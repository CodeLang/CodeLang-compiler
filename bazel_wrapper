#!/usr/bin/env bash
# This is the front-end script that bootstraps and calls bazel
# any build commands will go through this script.
# it is expected to behave the same as the bazel command itself (with bootstraping capability / extra features).

set -euo pipefail

# the version of bazel we are using
url=https://github.com/bazelbuild/bazel/releases/download/0.23.1/bazel-0.23.1-linux-x86_64
sha256=fedb6fcd266d2866d7d904213e4f797642791b93a77e8326930fa8aee884064b
#url=https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-linux-x86_64
#sha256=c6b9f3a3350419521461c6d9bdbfd09b4f745af564e1728e2fbf9d4d343f93b6

# paths to place bazel related artifacts
# CONSIDER(thickey): should we really install bazel in the user's home directory?  
# Are we sure they will even have a home repo?  Would it be better to install it inside the repo itself?
# I think this is fine for now.  We'll see if any problems arise.
# It may be recomended to have bazel write its cache to the home directory anyway.
cache_root="${HOME}/.cache"
install_dir="${cache_root}/bazel/${sha256}"
bazel="${install_dir}/bazel"

if [[ ! -f "${bazel}" ]]; then

    # Check for some bootstraping necessities
    # If these bare-bone requirements don't exist, I considered installing them for the user automatically,
    # but that seems hard to figure out due to the different systems and package managers.  
    # One of the online CIs, does not have wget when it spins up.
    # For now, we can handle these kinds of dependencies prior to running this script.
    # For example, most CI services have some kind of pre-install phase.  where you can install system packages.
    command -v mkdir >/dev/null 2>&1 || { echo >&2 "I require mkdir but it's not installed.  Aborting."; exit 1; }
    command -v rm >/dev/null 2>&1 || { echo >&2 "I require rm but it's not installed.  Aborting."; exit 1; }
    command -v chmod >/dev/null 2>&1 || { echo >&2 "I require chmod but it's not installed.  Aborting."; exit 1; }
    command -v trap >/dev/null 2>&1 || { echo >&2 "I require trap but it's not installed.  Aborting."; exit 1; }
    command -v tty >/dev/null 2>&1 || { echo >&2 "I require tty but it's not installed.  Aborting."; exit 1; }
    command -v wget >/dev/null 2>&1 || { echo >&2 "I require wget but it's not installed.  Aborting."; exit 1; }
    command -v sha256sum >/dev/null 2>&1 || { echo >&2 "I require sha256sum but it's not installed.  Aborting."; exit 1; }
    # CONSIDER(thickey): Do you need some kind of Java tooling installed for bazel first?  If so, add it here!
    # I think sfortson mentioned that he had to install bazel first.  The CIs seem to be fine, but sam was on arch linux
    # I'm not sure if bazel's thing is truely stand-alone or what.  you might need the jvm first.

    # Say that we are missing bazel, and will install it
    echo "INFO: Required bazel version not found."
    echo "downloading to ${bazel}..." >&2

    # Setup install directory & delete it on failure
    mkdir -p "${install_dir}"
    trap 'rm -rf "${install_dir}"' ERR INT TERM

    # Download bazel
    in_progress_download="${install_dir}/in_progress_download"
    if tty -s; then
        wget "${url}" -O "${in_progress_download}"
    else
	# should we provide a timeout?
	# --timeout=60
	# I see no reason to.
        wget "${url}" -O "${in_progress_download}" --no-verbose
    fi

    # Check that our download is valid
    echo "${sha256}  ${in_progress_download}" | sha256sum --check >&2
    chmod +x "${in_progress_download}"
    mv "${in_progress_download}" "${bazel}"
    trap - ERR INT TERM

fi

# If Inside Emacs Bazel tries to be helpful say it's "entering a
# directory" but that actually confuses emacs because then it starts
# looking for files inside the runfiles tree.
unset INSIDE_EMACS

# Run the real bazel that we boostrapped
cd source;
"${bazel}" "$@"
