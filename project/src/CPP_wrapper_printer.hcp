class
❪"systems"❫
❪"utilities"❫
❪"CodeLang_structure"❫
⚯
❪"header_printer"❫
❪"methods_printer"❫
⚞⚟


◀public: static▶ void ☀Print_Wrapper_Class(CodeLang_Structure const& structure)❰
    Print_Wrapper_Header(structure);
    Print_Wrapper_Source(structure);
❱

◀public: static▶ void ☀Print_Wrapper_Header(CodeLang_Structure const& structure)❰
    std::wofstream out(As_Capital_And_Pushed_Together(structure.name) + "Wrapper.hpp");
    Print_To_Stream_With_Newline(out,"//Wrapper struct for better testing");
    Print_To_Stream_With_Newline(out,"#pragma once");
    Header_Printer::Print_Object_Interface_Headers(structure.name,out,structure.imports.interface_dependencies);
    auto object_we_are_wrapping = As_Capital_And_Pushed_Together(structure.name) + ".h";
    Print_To_Stream_With_Newline(out,"#include \"" + object_we_are_wrapping + "\"");
    Print_To_Stream_With_Newline(out,"");
    Print_To_Stream(out,"struct " + As_Capital_And_Pushed_Together(structure.name));
    Print_To_Stream_With_Newline(out," {");
    Print_To_Stream_With_Newline(out,"");
    Print_To_Stream_With_Newline(out,"//the component we are wrapping in order to make testing easier");
    Print_To_Stream_With_Newline(out,As_Capital_And_Pushed_Together(structure.name) + "OutputsT o;");
    Print_To_Stream_With_Newline(out,"");
    Print_Declerations(out,structure);
    Print_To_Stream_With_Newline(out,"};");
    
    
    
    
❱
◀public: static▶ void ☀Print_Wrapper_Source(CodeLang_Structure const& structure)❰
    std::wofstream out(As_Capital_And_Pushed_Together(structure.name) + "Wrapper.cpp");
    Print_To_Stream_With_Newline(out,"//Wrapper file for testing");
    Header_Printer::Print_Object_Implementation_Headers(structure.name,out,structure.imports.implementation_dependencies);
❱

◀public: static▶ void ☀Print_Declerations(std::wofstream & out, CodeLang_Structure const& structure)❰
    Methods_Printer::Print_Global_Interface_Methods(out,structure.methods.methods);
❱

