class
❪"systems"❫
❪"utilities"❫
❪"CodeLang_structure"❫
⚯
//printers
❪"global_printer"❫
❪"object_printer"❫
❪"CPP_wrapper_printer"❫
⚞⚟

//Options to one day get worked in(things you can turn off or turn on):
//align / don't align header comments
//put a comment at the end of the include guards
//include guards format styles

//header comment related:
//put header comment even if none was provided
//headers do block comment or headers to line comment
//space after line comment or spaces between block comment
//do comments hug header files, or is there a space between?


◀public: static▶ void ☀Export(CodeLang_Structure const& structure)❰
    
    //create a directory for the global or object code, and export it in an f2si fashion
    Create_Path_If_It_Doesnt_Already_Exist_And_Step_Into_It(As_Capital_And_Pushed_Together(structure.name));
    
    if (structure.meta.code_type == L"global"){     Create_Global_Files(structure);}
    else if(structure.meta.code_type == L"object"){ Create_Object_Files(structure);}
    
    Step_Out_Of_Folder();
    
    
    //additionally, export a c++ wrapper for the object to make the testing easier
    if(structure.meta.code_type == L"object"){
        Create_Path_If_It_Doesnt_Already_Exist_And_Step_Into_It(As_Capital_And_Pushed_Together(structure.name) + "Wrapper");
        CPP_Wrapper_Printer::Print_Wrapper_Class(structure);
        Step_Out_Of_Folder();
    }
❱

//print global files
◀private: static▶ void ☀Create_Global_Files(CodeLang_Structure const& structure)❰
    Global_Printer::Print_Global_Interface_File(structure);
    Global_Printer::Print_Global_Implementation_File(structure);
❱

//print object files
◀private: static▶ void ☀Create_Object_Files(CodeLang_Structure const& structure)❰
    Object_Printer::Print_Object_Interface_File(structure);
    Object_Printer::Print_Object_Implementation_File(structure);
    Object_Printer::Print_Object_Data_File(structure);
❱


