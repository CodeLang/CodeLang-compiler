class
❪"systems"❫
❪"utilities"❫
❪"CodeLang_structure"❫
❪"parser_token"❫
⚯

⚞⚟

//turn the entire stream of tokens into a CodeLang data structure
◀public: static▶ CodeLang_Structure ☀Create_Code_Object_From_Token_Stream(std::vector<Parser_Token> const& tokens)❰
    CodeLang_Structure code;
    
    //the overall structure of any CodeLang file
    code.meta         = Parse_Out_Meta_Section(tokens);
    code.imports      = Parse_Out_Import_Section(tokens);
    code.namespaces   = Parse_Out_Namespace_Section(tokens);
    code.inheritence  = Parse_Out_Inheritence_Section(tokens);
    code.methods      = Parse_Out_Method_Section(tokens);
    code.data_members = Parse_Out_Data_Member_Section(tokens);
    
    return code;
❱

//root setters
◀public: static▶ Meta_Section ☀Parse_Out_Meta_Section(std::vector<Parser_Token> const& tokens)❰
    Meta_Section section;
    
    //singles
    section.code_type            = Get_Value_Of_Token_Name(tokens, "meta-data-code-type");
    section.brief_description    = Get_Value_Of_Token_Name(tokens, "meta-data-brief-description");
    section.detailed_description = Get_Value_Of_Token_Name(tokens, "meta-data-detailed-description");
    
    //multiple instances
    section.group_names = Get_Values_Of_Token_Name(tokens, "meta-data-group-name");
    section.authors     = Get_Values_Of_Token_Name(tokens, "meta-data-author");
    section.bugs        = Get_Values_Of_Token_Name(tokens, "meta-data-bug");
    section.warnings    = Get_Values_Of_Token_Name(tokens, "meta-data-warning");
    
    return section;
❱
◀public: static▶ Import_Section ☀Parse_Out_Import_Section(std::vector<Parser_Token> const& tokens)❰
    Import_Section section;
    
    section.interface_dependencies      = Strip_Out_Interface_Imports(tokens);
    section.implementation_dependencies = Strip_Out_Implementation_Imports(tokens);
    
    return section;
❱
◀public: static▶ Namespace_Section ☀Parse_Out_Namespace_Section(std::vector<Parser_Token> const& tokens)❰
    Namespace_Section section;
    
    section.namespaces = Strip_Out_Namespaces(tokens);
    
    return section;
❱
◀public: static▶ Inheritance_Section ☀Parse_Out_Inheritance_Section(std::vector<Parser_Token> const& tokens)❰
    Inheritance_Section section;
    
    section.namespaces = Strip_Out_Inheritances(tokens);
    
    return section;
❱
◀public: static▶ Method_Section ☀Parse_Out_Method_Section(std::vector<Parser_Token> const& tokens)❰
    Method_Section section;
    
    section.methods = Strip_Out_Methods(tokens);
    
    return section;
❱
◀public: static▶ Data_Member_Section ☀Parse_Out_Data_Member_Section(std::vector<Parser_Token> const& tokens)❰
    Data_Member_Section section;
    
    section.methods = Strip_Out_Data_Members(tokens);
    
    return section;
❱


//sub strippers
◀public: static▶ std::vector<Import_Item> ☀Strip_Out_Interface_Imports(tokens)❰
    std::vector<Import_Item> items;
    
    return items;
❱
◀public: static▶ std::vector<Import_Item> ☀Strip_Out_Implementation_Imports(tokens)❰
    std::vector<Import_Item> items;
    
    return items;
❱
◀public: static▶ std::vector<Namespace_Item> ☀Strip_Out_Namespaces(tokens)❰
    std::vector<Namespace_Item> items;
    
    return items;
❱
◀public: static▶ std::vector<Inheritance_Item> ☀Strip_Out_Inheritances(tokens)❰
    std::vector<Inheritance_Item> items;
    
    return items;
❱
◀public: static▶ std::vector<Method_Item> ☀Strip_Out_Methods(tokens)❰
    std::vector<Method_Item> items;
    
    return items;
❱
◀public: static▶ std::vector<Data_Member_Item> ☀Strip_Out_Data_Members(tokens)❰
    std::vector<Data_Member_Item> items;
    
    return items;
❱




//utilities for stream of parser tokens
◀public: static▶ std::wstring ☀Get_Value_Of_Token_Name(std::vector<Parser_Token> const& tokens, std::string token_name)❰
    std::wstring contents;
    
    return contents;
❱
◀public: static▶ std::vector<std::wstring> ☀Get_Values_Of_Token_Name(std::vector<Parser_Token> const& tokens, std::string token_name)❰
    std::vector<std::wstring> contents;
    
    return contents;
❱



