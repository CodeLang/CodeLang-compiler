class
❪"systems"❫
❪"utilities"❫
❪"CodeLang_structure"❫
❪"doxygen_block_printer"❫
❪"type_to_hungarian_notation_converter"❫
⚯

⚞⚟


//printing f2si objects
◀public: static▶ void ☀Print_Data_Structs(std::wofstream & out, CodeLang_Structure const& structure)❰
    Print_Local_Struct(out,structure);
    Print_Input_Struct(out,structure);
    Print_Output_Struct(out,structure);
❱
◀private: static▶ void ☀Print_Local_Struct(std::wofstream & out, CodeLang_Structure const& structure)❰


    //get all the variables that qualify for locals
    std::vector<Data_Member_Item> locals;
    for (auto it: structure.data_members.data_members){
        if (!it.is_observable || !it.is_obtainable){
            locals.push_back(it);
        }
    }
    
    if (!locals.empty()){
        
        auto dumb_name = As_Capital_And_Pushed_Together(structure.name) + "Locals_t";
        auto used_name = As_Capital_And_Pushed_Together(structure.name) + "LocalsT";
        auto print_name = Capitalize_Each_With_Space_In_Between(structure.name);
        Doxygen_Block_Printer::Print_Block(out,0,print_name + " Locals", "Contains internal state that should not be referenced by the client");
        Print_To_Stream(out,"typedef struct ");
        Print_To_Stream_With_Newline(out,dumb_name);
        Print_To_Stream_With_Newline(out,"{");
        Print_Local_Struct_Variables(out,locals);
        Print_To_Stream(out,"} ");
        Print_To_Stream(out,used_name);
        Print_To_Stream_With_Newline(out,";");
        Print_To_Stream_With_Newline(out,"");
    }
❱

◀private: static▶ void ☀Print_Input_Struct(std::wofstream & out, CodeLang_Structure const& structure)❰
        auto dumb_name = As_Capital_And_Pushed_Together(structure.name) + "Inputs_t";
        auto used_name = As_Capital_And_Pushed_Together(structure.name) + "InputsT";
        auto print_name = Capitalize_Each_With_Space_In_Between(structure.name);
        Doxygen_Block_Printer::Print_Block(out,0,print_name + " Inputs", "All of the conceivable inputs,\nthat may influence the state of the component, \nand potentially change any of the outputs");
        Print_To_Stream(out,"typedef struct ");
        Print_To_Stream_With_Newline(out,dumb_name);
        Print_To_Stream_With_Newline(out,"{");
        Print_Input_Struct_Variables(out,structure);
        Print_To_Stream(out,"} ");
        Print_To_Stream(out,used_name);
        Print_To_Stream_With_Newline(out,";");
        Print_To_Stream_With_Newline(out,"");
❱
◀private: static▶ void ☀Print_Output_Struct(std::wofstream & out, CodeLang_Structure const& structure)❰
        auto dumb_name = As_Capital_And_Pushed_Together(structure.name) + "Outputs_t";
        auto used_name = As_Capital_And_Pushed_Together(structure.name) + "OutputsT";
        auto print_name = Capitalize_Each_With_Space_In_Between(structure.name);
        Doxygen_Block_Printer::Print_Block(out,0,print_name + " Outputs", "All of the conceivable outputs,\nthat may be influenced by any of outputs during and update");
        Print_To_Stream(out,"typedef struct ");
        Print_To_Stream_With_Newline(out,dumb_name);
        Print_To_Stream_With_Newline(out,"{");
        Print_Output_Struct_Variables(out,structure);
        Print_To_Stream(out,"} ");
        Print_To_Stream(out,used_name);
        Print_To_Stream_With_Newline(out,";");
        Print_To_Stream_With_Newline(out,"");
❱

◀private: static▶ void ☀Print_Local_Struct_Variables(std::wofstream & out, std::vector<Data_Member_Item> const& locals)❰
    Print_To_Stream_With_Newline(out,"blah");
❱
◀private: static▶ void ☀Print_Input_Struct_Variables(std::wofstream & out, CodeLang_Structure const& structure)❰
    Print_To_Stream_With_Newline(out,"blah");
❱
◀private: static▶ void ☀Print_Output_Struct_Variables(std::wofstream & out, CodeLang_Structure const& structure)❰

    //print outputs due to state specifiers

    //get all the necessary members based on state specifiers
    auto members = structure.data_members.data_members;
    Remove_Elements_Where_Function_Is_True(members,[](Data_Member_Item const& x){ return x.is_observable || x.is_injectable;});
    for (auto it: members){
        Doxygen_Block_Printer::Print_Block(out,4,as_string(it.brief),as_string(it.detail));
        auto prefix = Type_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix(as_string(it.type),false,true,false,false,false);
        Print_To_Stream_With_Newline(out,"    " + as_string(it.type) + " " + prefix + As_Capital_And_Pushed_Together(as_string(it.name)) + ";");
        Print_To_Stream_With_Newline(out,"");
        
    }
❱


