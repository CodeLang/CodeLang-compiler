class
❪"systems"❫
❪"utilities"❫
❪"type_to_hungarian_notation_converter"❫
❪"data_member_item"❫
❪"function_argument"❫
❪"function_result"❫
⚯

⚞⚟

◀public: static▶ std::string ☀Get_Hungarian_Notation_Prefix(Data_Member_Item item, bool is_global, bool is_member)❰
    
    bool is_static = false;
    if (item.storage == Storage_Specifier::STATIC){
        is_static = true;
    }

    return Get_Hungarian_Notation_Prefix(item,is_global,is_member,is_static);
❱


◀
public: 
template <typename T>
static std::string Get_Hungarian_Notation_Prefix(T item, bool is_global, bool is_member){

    return Get_Hungarian_Notation_Prefix(item,is_global,is_member,false);
}
▶


//sub call
◀
public: 
template <typename T>
static std::string Get_Hungarian_Notation_Prefix(T item, bool is_global, bool is_member, bool is_static){

    auto type       = as_string(item.type.value);
    auto array_part = Strip_Out_Data_Between_First_Set_Of_Square_Brackets(type);
    bool is_array = true;
    if (array_part.empty()){
        is_array = false;
    }
    bool is_pointer = Begins_Or_Ends_With(type,"&") || Ends_With(type,"*const") || Ends_With(type,"*");

    return Type_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix
    (type,is_pointer,is_member,is_global,is_static,is_array);
}
▶



