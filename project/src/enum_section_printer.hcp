class
❪"systems"❫
❪"utilities"❫
❪"enum_item"❫
⚯
❪"doxygen_block_printer"❫
⚞⚟


◀public: static▶ void ☀Print_Types(std::wofstream & out, std::vector<Enum_Item> const& enum_items)❰

    for (auto it: enum_items){
        Print_Type(out,it);
        Print_To_Stream_With_Newline(out,"");
    }
❱

◀private: static▶ void ☀Print_Type(std::wofstream & out, Enum_Item const& item)❰

    Doxygen_Block_Printer::Print_Block(out,0,as_string(item.brief),as_string(item.detail));

    auto base_type_name = As_Capital_And_Pushed_Together(as_string(item.name));
    //dumb name part
    Print_To_Stream(out,"typedef enum ");
    Print_To_Stream(out,base_type_name);
    Print_To_Stream_With_Newline(out,"_e");
    Print_To_Stream_With_Newline(out,"{");
    
    //values part
    Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(item.args
        ,[&](Enum_Arg x){Print_Not_Last_Value(out,base_type_name,x);}
        ,[&](Enum_Arg x){Print_Last_Value(out,base_type_name,x);});
    Print_To_Stream_With_Newline(out,"");
    
    //actual name part
    Print_To_Stream(out,"} ");
    Print_To_Stream(out,base_type_name);
    Print_To_Stream_With_Newline(out,"E;");
❱


◀private: static▶ void ☀Print_Not_Last_Value(std::wofstream & out, std::string base_type_name, Enum_Arg arg)❰
    
    Print_Value_Name(4,out,base_type_name,arg);
    Print_To_Stream_With_Newline(out,",");

❱
◀private: static▶ void ☀Print_Last_Value(std::wofstream & out, std::string base_type_name, Enum_Arg arg)❰
    Print_Value_Name(4,out,base_type_name,arg);
    Print_To_Stream_With_Newline(out,"");
❱

◀private: static▶ void ☀Print_Value_Name(unsigned int indent, std::wofstream & out, std::string base_type_name, Enum_Arg arg)❰

    auto prefix = Uppercase(base_type_name);

    Print_To_Stream_N_Times(out," ",indent);
    Print_To_Stream(out,prefix +"_");
    Print_To_Stream(out,As_Uppercase(as_string(arg.name)));
    
    auto value = as_string(arg.value);
    auto comment = as_string(arg.comment);
    
    if (!value.empty()){
        Print_To_Stream(out," = " + value);
    }
    
    if (!comment.empty()){
        Print_To_Stream(out," //" + comment);
    }
❱