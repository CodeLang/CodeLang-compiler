class
❪"systems"❫
❪"utilities"❫
❪"filename_exception"❫
❪"tokenizer_exception"❫
❪"token_stream_validation_exception"❫
⚯

⚞⚟

//should be a template function instead
//they should all inherit from from std::exception?
◀public: static▶ void ☀Handle_Parse_Exceptions()❰
    try{throw;}
    catch(Filename_Exception const& e)               {Report_Filename_Error                   (e);}
    catch(Tokenizer_Exception const& e)              {Report_Tokenizing_Error                 (e);}
    catch(Token_Stream_Validation_Exception const& e){Report_Token_Stream_Validation_Error    (e);}
    catch(std::string const& e                      ){Report_Error_Mesage_With_No_Extra_Data  (e);}
    catch(const char* e                             ){Report_Error_Mesage_With_No_Extra_Data  (e);}
    catch(...)                                       {Report_Unknown_Error                    ( );}

❱

◀public: static▶ void ☀Report_Filename_Error(Filename_Exception const& e)❰
    Exit_With_Red_Error(e.Error_Message());
❱
◀public: static▶ void ☀Report_Tokenizing_Error(Tokenizer_Exception const& e)❰
    Exit_With_Red_Error("Failed to tokenize");
    //here's why...
❱
◀public: static▶ void ☀Report_Token_Stream_Validation_Error(Token_Stream_Validation_Exception const& e)❰
    std::cerr << e.Error_Message() << std::endl;
    std::cerr << "line: "<< e.Token().location.start.Line_Number();
    std::cerr << "char: "<< e.Token().location.start.Line_Number();
    
    Exit_With_Red_Error("Error while validating token stream");
    
❱
◀public: static▶ void ☀Report_Error_Mesage_With_No_Extra_Data(std::string const& e)❰
    Exit_With_Red_Error(e);
❱

◀public: static▶ void ☀Report_Unknown_Error()❰
    Exit_With_Red_Error("Unknown exception thrown. This should not happen.\nYou found a bug in the software.\nPlease report this.");
❱

