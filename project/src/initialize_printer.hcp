class
❪"systems"❫
❪"utilities"❫
❪"CodeLang_structure"❫
⚯
❪"methods_printer"❫
⚞⚟

◀public: static▶ void ☀Print_Initialize_Declaration(std::wofstream & out, CodeLang_Structure const& structure)❰
    Print_Block(out,structure);
❱
◀public: static▶ void ☀Print_Initialize_Definition(std::wofstream & out, CodeLang_Structure const& structure)❰
    Print_Block(out,structure);
❱

◀private: static▶ void ☀Print_Block(std::wofstream & out, CodeLang_Structure const& structure)❰
    //build up fake params
    std::vector<Method_Item> send_in;
    Method_Item m;
    
    m.class_access = Class_Access::PUBLIC;
    m.value_overload = Value_Overload::NONE;
    m.is_static = false;
    m.is_const = false;
    m.is_virtual = false;
    m.function_name = L"update " + as_wstring(As_All_Lowercase_Letters_With_Underscores_As_Spaces(structure.name));
    m.brief_description = L"hello";
    m.detailed_description = L"world";
    
    //set expected params
    Function_Argument one;
    one.is_const = false;
    one.type = as_wstring(As_Capital_And_Pushed_Together(structure.name)) + L"OutputsT";
    one.identifier = L"outputs";
    one.comment = L"The internal state that will be initialized based on the input parameters";
    Add_Constructor_Params(m.function_arguments,structure.methods.methods);
    
    //m.body = ;
    
    //call the printer
    m.function_arguments.push_back(one);
    send_in.push_back(m);
    Methods_Printer::Print_Global_Interface_Methods(out,send_in);
    
❱

◀private: static▶ void ☀Add_Constructor_Params(std::vector<Function_Argument> & args, std::vector<Method_Item> const& methods)❰
❱