class
❪"utilities"❫
❪"systems"❫
❪"program_options"❫
❪"tokenizer_exception"❫
❪"CodeLang_structure"❫
⚯
❪"CodeLang_parser"❫
❪"CodeLang_compiler"❫
❪"exception_handler"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& program_options)❰

     //process each file at a time
     for (auto const& path_to_file: program_options.Input_Files()){
      
        //compile the file, but stop at any time if there are compiler errors
        try{ Compile_File(path_to_file,program_options.Exporter(),program_options.Language()); }
        catch(...){Exception_Handler::Handle_Parse_Exceptions();}
     }
❱
◀private: static▶ void ☀Compile_File(std::string const& path_to_file, std::string const& exporter, std::string const& language)❰

        //exit if anything is initially wrong with the file name sent to the compiler
        Immediate_Checks_On_Filename_Sent_To_Compiler(path_to_file);

        //parse the CodeLang file and get back a class that represents it
        //might throw...
        auto code_structure = CodeLang_Parser::Parse(path_to_file);
    
        //compile that structure into the appropriate source code files
        CodeLang_Compiler::Compile(code_structure,exporter,language);
❱

◀private: static▶ void ☀Immediate_Checks_On_Filename_Sent_To_Compiler(std::string const& path_to_file)❰
    
    Make_Sure_File_Has_The_Proper_File_Extension(path_to_file);
    Make_Sure_The_File_Exists(path_to_file);
❱

◀public: static▶ void ☀Make_Sure_File_Has_The_Proper_File_Extension(std::string const& path_to_file)❰

    if (!File_Has_Extension(path_to_file,"CodeLang")){
        Exit_With_Error(path_to_file + " must have a .CodeLang file extension");
    }
❱
◀public: static▶ void ☀Make_Sure_The_File_Exists(std::string const& path_to_file)❰

    if (!File_Exists(path_to_file)){
        Exit_With_Error(path_to_file + " not found");
    }
❱