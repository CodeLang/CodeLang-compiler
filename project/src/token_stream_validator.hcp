class
❪"systems"❫
❪"utilities"❫
❪"parser_token"❫
⚯
❪"token_stream_validation_exception"❫
⚞⚟


◀public: static▶ void ☀Run_Validations_Over_Token_Stream(std::vector<Parser_Token> const& tokens)❰

    //ensure valid values for all the tokens that must contain only certain values
    Validate_Code_Type(tokens);
    Ensure_Namespace_Specifiers_Are_Valid(tokens);
    Ensure_Inheritance_Specifiers_Are_Valid(tokens);
    Ensure_Function_Class_Specifiers_Are_Valid(tokens);
    Ensure_Function_Operation_Categories_Are_Valid(tokens);
    Ensure_Function_Argument_Type_Qualifiers_Are_Valid(tokens);
    Ensure_Function_Result_Type_Qualifiers_Are_Valid(tokens);
    Ensure_Data_Member_Class_Specifiers_Are_Valid(tokens);
    Ensure_Data_Member_Type_Qualifiers_Are_Valid(tokens);
    Ensure_Data_Member_State_Specifier_Are_Valid(tokens);
❱

◀private: static▶ void ☀Validate_Code_Type(std::vector<Parser_Token> tokens)❰

    Reduce_To_Just_Tokens_Of_Name(tokens,"meta-data-code-type");
    
    if (tokens.empty()){
        throw "No Code Type token given.";
    }
    
    if (tokens.size() > 1){
        throw Token_Stream_Validation_Exception("More than one Code Type token",tokens[1]);
    }
    
    if (tokens[0].content != L"global" && tokens[0].content != L"object"){
        throw Token_Stream_Validation_Exception("Invalid Code Type value",tokens[0]);
    }
❱
◀private: static▶ void ☀Ensure_Namespace_Specifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"namespace-specifiers");
    for (auto it: tokens){
        if (it.content != L"i"){
            throw Token_Stream_Validation_Exception("Invalid namespace specifier",it);
        }
    }
❱
◀private: static▶ void ☀Ensure_Inheritance_Specifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"inheritance-specifiers");
    for (auto it: tokens){
        
        auto str = as_string(it.content);
        auto publics = Count_Instances_Of_Character(str,'+');
        auto protecteds = Count_Instances_Of_Character(str,'#');
        auto privates = Count_Instances_Of_Character(str,'-');
        auto virtuals = Count_Instances_Of_Character(str,'v');
        
        //throw if there is more than one of any of these
        if (publics > 1){throw Token_Stream_Validation_Exception("More than one public access specifier",it);}
        if (protecteds > 1){throw Token_Stream_Validation_Exception("More than one protected access specifier",it);}
        if (privates > 1){throw Token_Stream_Validation_Exception("More than one private access specifier",it);}
        if (virtuals > 1){throw Token_Stream_Validation_Exception("More than one virtual class specifier",it);}
        
        //throw if no access specifier is given
        if (publics + protecteds + privates == 0){
            throw Token_Stream_Validation_Exception("No access specifier given",it);
        }
        
        //ensure no invalid characters were given
        auto number_of_valid_chars = publics + protecteds + privates + virtuals;
        if (number_of_valid_chars < it.content.size()){
            throw Token_Stream_Validation_Exception("Invalid characters given",it);
        }
    }
❱
◀private: static▶ void ☀Ensure_Function_Class_Specifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"function-class-specifiers");
❱
◀private: static▶ void ☀Ensure_Function_Operation_Categories_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"function-operation-category");
❱
◀private: static▶ void ☀Ensure_Function_Argument_Type_Qualifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"function-argument-type-qualifiers");
❱
◀private: static▶ void ☀Ensure_Function_Result_Type_Qualifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"function-result-type-qualifiers");
❱
◀private: static▶ void ☀Ensure_Data_Member_Class_Specifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"data-member-class-specifiers");
❱
◀private: static▶ void ☀Ensure_Data_Member_Type_Qualifiers_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"data-member-type-qualifiers");
❱
◀private: static▶ void ☀Ensure_Data_Member_State_Specifier_Are_Valid(std::vector<Parser_Token> tokens)❰
    Reduce_To_Just_Tokens_Of_Name(tokens,"data-state-specifier");
❱



//utility
◀public: static▶ void ☀Reduce_To_Just_Tokens_Of_Name(std::vector<Parser_Token> & tokens, std::string name)❰
tokens.erase( std::remove_if( tokens.begin(), tokens.end(),
             [&](Parser_Token x){return x.token.name != name;}), tokens.end() ); 

❱