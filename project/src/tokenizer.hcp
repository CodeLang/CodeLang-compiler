class
❪"systems"❫
❪"utilities"❫
❪"parser_token"❫
❪"file_marker"❫
❪"tokenizer_marker"❫
⚯
❪"global_tokens_table_utilities"❫
❪"tokenizer_exception"❫

⚞⚟

//default constructor at file beginning
◀public:▶ ☀◈(std::string const& path_to_file)◖
              :path_to_file(path_to_file)
             ◗❰❱

◀public:▶ std::vector<Parser_Token> ☀Get_Stream_Of_Tokens()❰

    std::vector<Parser_Token> tokens;
    Build_Up_Tokens_By_Parsing_File(tokens,path_to_file);
    return tokens;
❱

◀private:▶ void ☀Build_Up_Tokens_By_Parsing_File(std::vector<Parser_Token> & tokens, std::string const& path_to_file)❰

    collecting_token = false;
    Tokenizer_Marker tokenizer_marker(path_to_file);
    while (tokenizer_marker.Current_Char() != EOF){
        Proccess_Marker(tokens,tokenizer_marker);
        tokenizer_marker.Move_Forward();
    }
    
    Check_For_Unfinished_Token(tokenizer_marker);
❱

◀private:▶ void ☀Proccess_Marker(std::vector<Parser_Token> & tokens, Tokenizer_Marker const& tokenizer_marker)❰

    //not yet collecting
    if (!collecting_token){
        collecting_token = tokenizer_marker.Inside_Marker();
        if (collecting_token){
            start_marker = tokenizer_marker.File_Mark();
            start_symbol = tokenizer_marker.Current_Char();
        }
    }
    
    //already collecting
    else{
        collecting_token = tokenizer_marker.Inside_Marker();
        if (collecting_token){
            token_value += tokenizer_marker.Current_Char();
        }
        
        //reached the end of the token
        else{
            std::wcout << token_value << std::endl;
            tokens.emplace_back(Global_Tokens_Table_Utilities::Get_Token_Through_Character_LookUp(start_symbol),start_marker,token_value);
            token_value.clear();
        }
    }
❱

◀private:▶ void ☀Check_For_Unfinished_Token(Tokenizer_Marker const& tokenizer_marker)❰
    
    //throw the tokenizer parse state if there was a problem
    if (collecting_token){
        throw Tokenizer_Exception{path_to_file, start_marker, start_symbol, token_value};
    }
❱


◀private:

//the file associated with the tokenizer
std::string path_to_file;

//parsed out data
std::wstring token_value;
File_Marker start_marker;
wchar_t start_symbol;

//important for keeping track of parse
bool collecting_token;

▶