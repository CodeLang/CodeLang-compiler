class
❪"systems"❫
❪"utilities"❫
⚯

⚞public Non_Constructible⚟


//assumes that any kind of namespace or scoping has been stripped away from the base_type name
◀public: static▶ std::string ☀Get_Hungarian_Notation_Prefix(std::string base_type, bool is_pointer, bool is_member, bool is_global, bool is_static, bool is_enum, bool is_array) ❰
    std::string prefix;
    bool type_found_early = false;
    
    //left precedence
    if(is_global){prefix += "g";}
    if(is_static){prefix += "s";}
    if(is_member){prefix += "m";}
    
    //potentially add underscore
    if(is_global || is_static || is_member){ prefix += "_";}
    
    //decide if it's a pointer,
    //some pointers are 'sz', while others are just 'p'
    if(is_pointer || is_array){
        
        if (base_type != All_Of( std::string("char"),
                                 std::string("signed char"),
                                 std::string("unsigned char"),
                                 std::string("wchar_t"),
                                 std::string("signed wchar_t"),
                                 std::string("unsigned wchar_t"),
                                 std::string("char16_t"),
                                 std::string("char32_t"),
                                 std::string("char*"),
                                 std::string("signed char*"),
                                 std::string("unsigned char*"),
                                 std::string("wchar_t*"),
                                 std::string("signed wchar_t*"),
                                 std::string("unsigned wchar_t*"),
                                 std::string("char16_t*"),
                                 std::string("char32_t*")
                                 
                                 )){ if (is_pointer){prefix += "p";} }
        else{
            prefix += "sz";
            type_found_early = true;
        }
    }
    
    
    //we should get rid of is_enum as an input param.  
    //it is deduced further down.
    if(is_enum){prefix += "e"; type_found_early = true;}
    
    //assuming it wasn't a cstring (sz) type..
    if (!type_found_early){
    
        //miscellaneous
        if     (base_type == "void"){prefix += "";}
        else if(base_type == "nullptr_t"){prefix += "p";} //pointer to nullptr? pp?  who cares.  hungarian notation is retarted.
        else if(base_type == "size_t"){prefix += "n";}
        else if(base_type == "ptrdiff_t"){prefix += "n";}
        
        //bools
        else if(base_type == "bool"){prefix += "b";}
        else if(base_type == "BOOL"){prefix += "b";}
        else if(base_type == "BYTE"){prefix += "b";}
        
        //fundamental character types
        else if(base_type == "char"){prefix += "c";}
        else if(base_type == "signed char"){prefix += "c";}
        else if(base_type == "unsigned char"){prefix += "c";}
        
        else if(base_type == "wchar_t"){prefix += "c";}
        else if(base_type == "signed wchar_t"){prefix += "c";}
        else if(base_type == "unsigned wchar_t"){prefix += "c";}
        
        else if(base_type == "char16_t"){prefix += "c";}
        else if(base_type == "char32_t"){prefix += "c";}
        
        //fundamental integer types
        else if(base_type == "short"){prefix += "n";}
        else if(base_type == "short int"){prefix += "n";}
        else if(base_type == "signed short"){prefix += "n";}
        else if(base_type == "signed short int"){prefix += "n";}
        else if(base_type == "unsigned short"){prefix += "n";}
        else if(base_type == "unsigned short int"){prefix += "n";}
        
        else if(base_type == "int"){prefix += "n";}
        else if(base_type == "signed"){prefix += "n";}
        else if(base_type == "signed int"){prefix += "n";}
        else if(base_type == "unsigned"){prefix += "n";}
        else if(base_type == "unsigned int"){prefix += "n";}
        
        else if(base_type == "long"){prefix += "n";}
        else if(base_type == "long int"){prefix += "n";}
        else if(base_type == "signed long"){prefix += "n";}
        else if(base_type == "signed long int"){prefix += "n";}
        else if(base_type == "unsigned long"){prefix += "n";}
        else if(base_type == "unsigned long int"){prefix += "n";}
        else if(base_type == "long long"){prefix += "n";}
        else if(base_type == "long long int"){prefix += "n";}
        else if(base_type == "signed long long"){prefix += "n";}
        else if(base_type == "signed long long int"){prefix += "n";}
        else if(base_type == "unsigned long long"){prefix += "n";}
        else if(base_type == "unsigned long long int"){prefix += "n";}
        
        //fundamental float types
        else if(base_type == "float"){prefix += "f";}
        else if(base_type == "double"){prefix += "f";}
        else if(base_type == "long"){prefix += "f";}
        
        //fixed width types <cstdint>
        else if(base_type == "int8_t"){prefix += "n";}
        else if(base_type == "int16_t"){prefix += "n";}
        else if(base_type == "int32_t"){prefix += "n";}
        else if(base_type == "int64_t"){prefix += "n";}
        else if(base_type == "int_fast8_t"){prefix += "n";}
        else if(base_type == "int_fast16_t"){prefix += "n";}
        else if(base_type == "int_fast32_t"){prefix += "n";}
        else if(base_type == "int_fast64_t"){prefix += "n";}
        else if(base_type == "int_least8_t"){prefix += "n";}
        else if(base_type == "int_least16_t"){prefix += "n";}
        else if(base_type == "int_least32_t"){prefix += "n";}
        else if(base_type == "int_least64_t"){prefix += "n";}
        else if(base_type == "intmax_t"){prefix += "n";}
        else if(base_type == "intptr_t"){prefix += "n";}
        else if(base_type == "uint8_t"){prefix += "n";}
        else if(base_type == "uint16_t"){prefix += "n";}
        else if(base_type == "uint32_t"){prefix += "n";}
        else if(base_type == "uint64_t"){prefix += "n";}
        else if(base_type == "uint_fast8_t"){prefix += "n";}
        else if(base_type == "uint_fast16_t"){prefix += "n";}
        else if(base_type == "uint_fast32_t"){prefix += "n";}
        else if(base_type == "uint_fast64_t"){prefix += "n";}
        else if(base_type == "uint_least8_t"){prefix += "n";}
        else if(base_type == "uint_least16_t"){prefix += "n";}
        else if(base_type == "uint_least32_t"){prefix += "n";}
        else if(base_type == "uint_least64_t"){prefix += "n";}
        else if(base_type == "uintmax_t"){prefix += "n";}
        else if(base_type == "uintptr_t"){prefix += "n";}
        
        //does the type end with a Capital E? If so, let's assume it's an enum type
        else if(Ends_With(base_type,"E")){prefix += "e";}
            
        //assume its a user-defined type
        else{ prefix += "t";}
    }

    return prefix;
❱
