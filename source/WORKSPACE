load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

################################################
# Pulling in and building clang
load("//bazel/toolchains:toolchains.bzl", "toolchains")

toolchains()

load("@com_grail_bazel_toolchain//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@com_grail_bazel_toolchain//toolchain:rules.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_toolchain",
    llvm_version = "10.0.0",

    # this sysroot was stolen from the grail_bazel_toolchain discussion.
    # I think its related to the chromium project?  or google somehow?
    # sysroot = {
    #     "linux": "@debian_stretch_amd64_sysroot//:sysroot",
    #     "darwin": "@debian_stretch_amd64_sysroot//:sysroot",
    # },

    # This is a custom built sysroot using a Dockerfile to build
    # needed compiler files
    sysroot = {
        "linux": "@ubuntu_14_04_clang_10_sysroot//:sysroot",
        "darwin": "@ubuntu_14_04_clang_10_sysroot//:sysroot",
    },
)

load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

################################################
# Ideally we don't want to create these, but sometimes things are too hard to build from source

new_local_repository(
    name = "GL",
    build_file = "//bazel/deps/build_files:GL.BUILD",
    path = "",
)

new_local_repository(
    name = "glut_so",
    build_file = "//bazel/deps/build_files:glut_so.BUILD",
    path = "/usr/lib",
)

new_local_repository(
    name = "GLU_so",
    build_file = "//bazel/deps/build_files:GLU_so.BUILD",
    path = "/usr/lib",
)

new_local_repository(
    name = "SDL2",
    build_file = "//bazel/deps/build_files:sdl2-local.BUILD",
    path = "/usr",
)

new_local_repository(
    name = "SFML_unhermetic",
    build_file = "//bazel/deps/build_files:sfml-local.BUILD",
    path = "/usr/include/SFML",
)

new_local_repository(
    name = "SFML_unhermetic_libs",
    build_file_content = """
cc_library(
    name = "SFML_unhermetic_libs",
    srcs = ["libsfml-audio.so", "libsfml-system.so", "libsfml-graphics.so", "libsfml-window.so", "libsfml-network.so"],
    visibility = ["//visibility:public"],
)
""",
    path = "/usr/lib/x86_64-linux-gnu",
)

new_local_repository(
    name = "opengl",
    build_file = "//bazel/deps/build_files:opengl-local.BUILD",
    path = "/usr",
)

new_local_repository(
    name = "python_context",
    build_file = "//bazel/deps/build_files:python_context.BUILD",
    path = "/usr/include/python3.6m",
)

################################################
load("@io_bazel_rules_m4//:m4.bzl", "m4_register_toolchains")

m4_register_toolchains()

load("//bazel/deps:third_party_libraries.bzl", "third_party_libraries")

third_party_libraries()

load("@build_stack_rules_proto//cpp:deps.bzl", "cpp_proto_compile")

cpp_proto_compile()
################################################
# Import "rules_foreign_cc".
# These are all an attempt to run cmake builds inside bazel

# Group the sources of the library so that CMake rule have access to it
#all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

#git_repository(
#    name = "rules_foreign_cc",
#    remote = "https://github.com/bazelbuild/rules_foreign_cc.git",
#    commit = "5511d9e1fe7219075ea8191298808c654974c6ac",
#)

#load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

# Workspace initialization function; includes repositories needed by rules_foreign_cc,
# and creates some utilities for the host operating system
#rules_foreign_cc_dependencies()
################################################

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# buildifier is written in Go and hence needs rules_go to be built.
# See https://github.com/bazelbuild/rules_go for the up to date setup instructions.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "9fb16af4d4836c8222142e54c9efa0bb5fc562ffc893ce2abeac3e25daead144",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/rules_go/releases/download/0.19.0/rules_go-0.19.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/0.19.0/rules_go-0.19.0.tar.gz",
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains()

http_archive(
    name = "bazel_gazelle",
    sha256 = "be9296bfd64882e3c08e3283c58fcb461fa6dd3c171764fcc4cf322f60615a9b",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

gazelle_dependencies()

http_archive(
    name = "com_google_protobuf",
    strip_prefix = "protobuf-master",
    urls = ["https://github.com/protocolbuffers/protobuf/archive/master.zip"],
)

#load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
#protobuf_deps()

################################################
# Packaging rules

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_pkg",
    sha256 = "4ba8f4ab0ff85f2484287ab06c0d871dcb31cc54d439457d28fd4ae14b18450a",
    url = "https://github.com/bazelbuild/rules_pkg/releases/download/0.2.4/rules_pkg-0.2.4.tar.gz",
)

################################################
