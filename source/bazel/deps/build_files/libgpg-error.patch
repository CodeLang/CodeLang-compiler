diff --git a/src/code-from-errno.h b/src/code-from-errno.h
new file mode 100644
index 0000000..8730ff0
--- /dev/null
+++ b/src/code-from-errno.h
@@ -0,0 +1,158 @@
+/* Output of mkerrcodes2.awk.  DO NOT EDIT.  */
+
+/* errnos.h - List of system error values.
+   Copyright (C) 2004 g10 Code GmbH
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+static const int err_code_from_index[] = {
+  GPG_ERR_EPERM,
+  GPG_ERR_ENOENT,
+  GPG_ERR_ESRCH,
+  GPG_ERR_EINTR,
+  GPG_ERR_EIO,
+  GPG_ERR_ENXIO,
+  GPG_ERR_E2BIG,
+  GPG_ERR_ENOEXEC,
+  GPG_ERR_EBADF,
+  GPG_ERR_ECHILD,
+  GPG_ERR_EAGAIN,
+  GPG_ERR_EWOULDBLOCK,
+  GPG_ERR_ENOMEM,
+  GPG_ERR_EACCES,
+  GPG_ERR_EFAULT,
+  GPG_ERR_ENOTBLK,
+  GPG_ERR_EBUSY,
+  GPG_ERR_EEXIST,
+  GPG_ERR_EXDEV,
+  GPG_ERR_ENODEV,
+  GPG_ERR_ENOTDIR,
+  GPG_ERR_EISDIR,
+  GPG_ERR_EINVAL,
+  GPG_ERR_ENFILE,
+  GPG_ERR_EMFILE,
+  GPG_ERR_ENOTTY,
+  GPG_ERR_ETXTBSY,
+  GPG_ERR_EFBIG,
+  GPG_ERR_ENOSPC,
+  GPG_ERR_ESPIPE,
+  GPG_ERR_EROFS,
+  GPG_ERR_EMLINK,
+  GPG_ERR_EPIPE,
+  GPG_ERR_EDOM,
+  GPG_ERR_ERANGE,
+  GPG_ERR_EDEADLK,
+  GPG_ERR_EDEADLOCK,
+  GPG_ERR_ENAMETOOLONG,
+  GPG_ERR_ENOLCK,
+  GPG_ERR_ENOSYS,
+  GPG_ERR_ENOTEMPTY,
+  GPG_ERR_ELOOP,
+  GPG_ERR_ENOMSG,
+  GPG_ERR_EIDRM,
+  GPG_ERR_ECHRNG,
+  GPG_ERR_EL2NSYNC,
+  GPG_ERR_EL3HLT,
+  GPG_ERR_EL3RST,
+  GPG_ERR_ELNRNG,
+  GPG_ERR_EUNATCH,
+  GPG_ERR_ENOCSI,
+  GPG_ERR_EL2HLT,
+  GPG_ERR_EBADE,
+  GPG_ERR_EBADR,
+  GPG_ERR_EXFULL,
+  GPG_ERR_ENOANO,
+  GPG_ERR_EBADRQC,
+  GPG_ERR_EBADSLT,
+  GPG_ERR_EBFONT,
+  GPG_ERR_ENOSTR,
+  GPG_ERR_ENODATA,
+  GPG_ERR_ETIME,
+  GPG_ERR_ENOSR,
+  GPG_ERR_ENONET,
+  GPG_ERR_ENOPKG,
+  GPG_ERR_EREMOTE,
+  GPG_ERR_ENOLINK,
+  GPG_ERR_EADV,
+  GPG_ERR_ESRMNT,
+  GPG_ERR_ECOMM,
+  GPG_ERR_EPROTO,
+  GPG_ERR_EMULTIHOP,
+  GPG_ERR_EDOTDOT,
+  GPG_ERR_EBADMSG,
+  GPG_ERR_EOVERFLOW,
+  GPG_ERR_ENOTUNIQ,
+  GPG_ERR_EBADFD,
+  GPG_ERR_EREMCHG,
+  GPG_ERR_ELIBACC,
+  GPG_ERR_ELIBBAD,
+  GPG_ERR_ELIBSCN,
+  GPG_ERR_ELIBMAX,
+  GPG_ERR_ELIBEXEC,
+  GPG_ERR_EILSEQ,
+  GPG_ERR_ERESTART,
+  GPG_ERR_ESTRPIPE,
+  GPG_ERR_EUSERS,
+  GPG_ERR_ENOTSOCK,
+  GPG_ERR_EDESTADDRREQ,
+  GPG_ERR_EMSGSIZE,
+  GPG_ERR_EPROTOTYPE,
+  GPG_ERR_ENOPROTOOPT,
+  GPG_ERR_EPROTONOSUPPORT,
+  GPG_ERR_ESOCKTNOSUPPORT,
+  GPG_ERR_ENOTSUP,
+  GPG_ERR_EOPNOTSUPP,
+  GPG_ERR_EPFNOSUPPORT,
+  GPG_ERR_EAFNOSUPPORT,
+  GPG_ERR_EADDRINUSE,
+  GPG_ERR_EADDRNOTAVAIL,
+  GPG_ERR_ENETDOWN,
+  GPG_ERR_ENETUNREACH,
+  GPG_ERR_ENETRESET,
+  GPG_ERR_ECONNABORTED,
+  GPG_ERR_ECONNRESET,
+  GPG_ERR_ENOBUFS,
+  GPG_ERR_EISCONN,
+  GPG_ERR_ENOTCONN,
+  GPG_ERR_ESHUTDOWN,
+  GPG_ERR_ETOOMANYREFS,
+  GPG_ERR_ETIMEDOUT,
+  GPG_ERR_ECONNREFUSED,
+  GPG_ERR_EHOSTDOWN,
+  GPG_ERR_EHOSTUNREACH,
+  GPG_ERR_EALREADY,
+  GPG_ERR_EINPROGRESS,
+  GPG_ERR_ESTALE,
+  GPG_ERR_EUCLEAN,
+  GPG_ERR_ENOTNAM,
+  GPG_ERR_ENAVAIL,
+  GPG_ERR_EISNAM,
+  GPG_ERR_EREMOTEIO,
+  GPG_ERR_EDQUOT,
+  GPG_ERR_ENOMEDIUM,
+  GPG_ERR_EMEDIUMTYPE,
+  GPG_ERR_ECANCELED,
+};
+
+#define errno_to_idx(code) (0 ? -1 \
+  : ((code >= 1) && (code <= 11)) ? (code - 1) \
+  : ((code >= 11) && (code <= 35)) ? (code - 0) \
+  : ((code >= 35) && (code <= 40)) ? (code - -1) \
+  : ((code >= 42) && (code <= 57)) ? (code - 0) \
+  : ((code >= 59) && (code <= 95)) ? (code - 1) \
+  : ((code >= 95) && (code <= 125)) ? (code - 0) \
+  : -1)
diff --git a/src/code-to-errno.h b/src/code-to-errno.h
new file mode 100644
index 0000000..8907fc0
--- /dev/null
+++ b/src/code-to-errno.h
@@ -0,0 +1,1300 @@
+/* Output of mkerrnos.awk.  DO NOT EDIT.  */
+
+/* errnos.in - List of system error values.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+
+#include <errno.h>
+#ifdef _WIN32
+#include <winsock2.h>
+#endif
+
+static const int err_code_to_errno [] = {
+#ifdef E2BIG
+  E2BIG,
+#else
+#ifdef WSAE2BIG
+  WSAE2BIG,
+#else
+  0,
+#endif
+#endif
+#ifdef EACCES
+  EACCES,
+#else
+#ifdef WSAEACCES
+  WSAEACCES,
+#else
+  0,
+#endif
+#endif
+#ifdef EADDRINUSE
+  EADDRINUSE,
+#else
+#ifdef WSAEADDRINUSE
+  WSAEADDRINUSE,
+#else
+  0,
+#endif
+#endif
+#ifdef EADDRNOTAVAIL
+  EADDRNOTAVAIL,
+#else
+#ifdef WSAEADDRNOTAVAIL
+  WSAEADDRNOTAVAIL,
+#else
+  0,
+#endif
+#endif
+#ifdef EADV
+  EADV,
+#else
+#ifdef WSAEADV
+  WSAEADV,
+#else
+  0,
+#endif
+#endif
+#ifdef EAFNOSUPPORT
+  EAFNOSUPPORT,
+#else
+#ifdef WSAEAFNOSUPPORT
+  WSAEAFNOSUPPORT,
+#else
+  0,
+#endif
+#endif
+#ifdef EAGAIN
+  EAGAIN,
+#else
+#ifdef WSAEAGAIN
+  WSAEAGAIN,
+#else
+  0,
+#endif
+#endif
+#ifdef EALREADY
+  EALREADY,
+#else
+#ifdef WSAEALREADY
+  WSAEALREADY,
+#else
+  0,
+#endif
+#endif
+#ifdef EAUTH
+  EAUTH,
+#else
+#ifdef WSAEAUTH
+  WSAEAUTH,
+#else
+  0,
+#endif
+#endif
+#ifdef EBACKGROUND
+  EBACKGROUND,
+#else
+#ifdef WSAEBACKGROUND
+  WSAEBACKGROUND,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADE
+  EBADE,
+#else
+#ifdef WSAEBADE
+  WSAEBADE,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADF
+  EBADF,
+#else
+#ifdef WSAEBADF
+  WSAEBADF,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADFD
+  EBADFD,
+#else
+#ifdef WSAEBADFD
+  WSAEBADFD,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADMSG
+  EBADMSG,
+#else
+#ifdef WSAEBADMSG
+  WSAEBADMSG,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADR
+  EBADR,
+#else
+#ifdef WSAEBADR
+  WSAEBADR,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADRPC
+  EBADRPC,
+#else
+#ifdef WSAEBADRPC
+  WSAEBADRPC,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADRQC
+  EBADRQC,
+#else
+#ifdef WSAEBADRQC
+  WSAEBADRQC,
+#else
+  0,
+#endif
+#endif
+#ifdef EBADSLT
+  EBADSLT,
+#else
+#ifdef WSAEBADSLT
+  WSAEBADSLT,
+#else
+  0,
+#endif
+#endif
+#ifdef EBFONT
+  EBFONT,
+#else
+#ifdef WSAEBFONT
+  WSAEBFONT,
+#else
+  0,
+#endif
+#endif
+#ifdef EBUSY
+  EBUSY,
+#else
+#ifdef WSAEBUSY
+  WSAEBUSY,
+#else
+  0,
+#endif
+#endif
+#ifdef ECANCELED
+  ECANCELED,
+#else
+#ifdef WSAECANCELED
+  WSAECANCELED,
+#else
+  0,
+#endif
+#endif
+#ifdef ECHILD
+  ECHILD,
+#else
+#ifdef WSAECHILD
+  WSAECHILD,
+#else
+  0,
+#endif
+#endif
+#ifdef ECHRNG
+  ECHRNG,
+#else
+#ifdef WSAECHRNG
+  WSAECHRNG,
+#else
+  0,
+#endif
+#endif
+#ifdef ECOMM
+  ECOMM,
+#else
+#ifdef WSAECOMM
+  WSAECOMM,
+#else
+  0,
+#endif
+#endif
+#ifdef ECONNABORTED
+  ECONNABORTED,
+#else
+#ifdef WSAECONNABORTED
+  WSAECONNABORTED,
+#else
+  0,
+#endif
+#endif
+#ifdef ECONNREFUSED
+  ECONNREFUSED,
+#else
+#ifdef WSAECONNREFUSED
+  WSAECONNREFUSED,
+#else
+  0,
+#endif
+#endif
+#ifdef ECONNRESET
+  ECONNRESET,
+#else
+#ifdef WSAECONNRESET
+  WSAECONNRESET,
+#else
+  0,
+#endif
+#endif
+#ifdef ED
+  ED,
+#else
+#ifdef WSAED
+  WSAED,
+#else
+  0,
+#endif
+#endif
+#ifdef EDEADLK
+  EDEADLK,
+#else
+#ifdef WSAEDEADLK
+  WSAEDEADLK,
+#else
+  0,
+#endif
+#endif
+#ifdef EDEADLOCK
+  EDEADLOCK,
+#else
+#ifdef WSAEDEADLOCK
+  WSAEDEADLOCK,
+#else
+  0,
+#endif
+#endif
+#ifdef EDESTADDRREQ
+  EDESTADDRREQ,
+#else
+#ifdef WSAEDESTADDRREQ
+  WSAEDESTADDRREQ,
+#else
+  0,
+#endif
+#endif
+#ifdef EDIED
+  EDIED,
+#else
+#ifdef WSAEDIED
+  WSAEDIED,
+#else
+  0,
+#endif
+#endif
+#ifdef EDOM
+  EDOM,
+#else
+#ifdef WSAEDOM
+  WSAEDOM,
+#else
+  0,
+#endif
+#endif
+#ifdef EDOTDOT
+  EDOTDOT,
+#else
+#ifdef WSAEDOTDOT
+  WSAEDOTDOT,
+#else
+  0,
+#endif
+#endif
+#ifdef EDQUOT
+  EDQUOT,
+#else
+#ifdef WSAEDQUOT
+  WSAEDQUOT,
+#else
+  0,
+#endif
+#endif
+#ifdef EEXIST
+  EEXIST,
+#else
+#ifdef WSAEEXIST
+  WSAEEXIST,
+#else
+  0,
+#endif
+#endif
+#ifdef EFAULT
+  EFAULT,
+#else
+#ifdef WSAEFAULT
+  WSAEFAULT,
+#else
+  0,
+#endif
+#endif
+#ifdef EFBIG
+  EFBIG,
+#else
+#ifdef WSAEFBIG
+  WSAEFBIG,
+#else
+  0,
+#endif
+#endif
+#ifdef EFTYPE
+  EFTYPE,
+#else
+#ifdef WSAEFTYPE
+  WSAEFTYPE,
+#else
+  0,
+#endif
+#endif
+#ifdef EGRATUITOUS
+  EGRATUITOUS,
+#else
+#ifdef WSAEGRATUITOUS
+  WSAEGRATUITOUS,
+#else
+  0,
+#endif
+#endif
+#ifdef EGREGIOUS
+  EGREGIOUS,
+#else
+#ifdef WSAEGREGIOUS
+  WSAEGREGIOUS,
+#else
+  0,
+#endif
+#endif
+#ifdef EHOSTDOWN
+  EHOSTDOWN,
+#else
+#ifdef WSAEHOSTDOWN
+  WSAEHOSTDOWN,
+#else
+  0,
+#endif
+#endif
+#ifdef EHOSTUNREACH
+  EHOSTUNREACH,
+#else
+#ifdef WSAEHOSTUNREACH
+  WSAEHOSTUNREACH,
+#else
+  0,
+#endif
+#endif
+#ifdef EIDRM
+  EIDRM,
+#else
+#ifdef WSAEIDRM
+  WSAEIDRM,
+#else
+  0,
+#endif
+#endif
+#ifdef EIEIO
+  EIEIO,
+#else
+#ifdef WSAEIEIO
+  WSAEIEIO,
+#else
+  0,
+#endif
+#endif
+#ifdef EILSEQ
+  EILSEQ,
+#else
+#ifdef WSAEILSEQ
+  WSAEILSEQ,
+#else
+  0,
+#endif
+#endif
+#ifdef EINPROGRESS
+  EINPROGRESS,
+#else
+#ifdef WSAEINPROGRESS
+  WSAEINPROGRESS,
+#else
+  0,
+#endif
+#endif
+#ifdef EINTR
+  EINTR,
+#else
+#ifdef WSAEINTR
+  WSAEINTR,
+#else
+  0,
+#endif
+#endif
+#ifdef EINVAL
+  EINVAL,
+#else
+#ifdef WSAEINVAL
+  WSAEINVAL,
+#else
+  0,
+#endif
+#endif
+#ifdef EIO
+  EIO,
+#else
+#ifdef WSAEIO
+  WSAEIO,
+#else
+  0,
+#endif
+#endif
+#ifdef EISCONN
+  EISCONN,
+#else
+#ifdef WSAEISCONN
+  WSAEISCONN,
+#else
+  0,
+#endif
+#endif
+#ifdef EISDIR
+  EISDIR,
+#else
+#ifdef WSAEISDIR
+  WSAEISDIR,
+#else
+  0,
+#endif
+#endif
+#ifdef EISNAM
+  EISNAM,
+#else
+#ifdef WSAEISNAM
+  WSAEISNAM,
+#else
+  0,
+#endif
+#endif
+#ifdef EL2HLT
+  EL2HLT,
+#else
+#ifdef WSAEL2HLT
+  WSAEL2HLT,
+#else
+  0,
+#endif
+#endif
+#ifdef EL2NSYNC
+  EL2NSYNC,
+#else
+#ifdef WSAEL2NSYNC
+  WSAEL2NSYNC,
+#else
+  0,
+#endif
+#endif
+#ifdef EL3HLT
+  EL3HLT,
+#else
+#ifdef WSAEL3HLT
+  WSAEL3HLT,
+#else
+  0,
+#endif
+#endif
+#ifdef EL3RST
+  EL3RST,
+#else
+#ifdef WSAEL3RST
+  WSAEL3RST,
+#else
+  0,
+#endif
+#endif
+#ifdef ELIBACC
+  ELIBACC,
+#else
+#ifdef WSAELIBACC
+  WSAELIBACC,
+#else
+  0,
+#endif
+#endif
+#ifdef ELIBBAD
+  ELIBBAD,
+#else
+#ifdef WSAELIBBAD
+  WSAELIBBAD,
+#else
+  0,
+#endif
+#endif
+#ifdef ELIBEXEC
+  ELIBEXEC,
+#else
+#ifdef WSAELIBEXEC
+  WSAELIBEXEC,
+#else
+  0,
+#endif
+#endif
+#ifdef ELIBMAX
+  ELIBMAX,
+#else
+#ifdef WSAELIBMAX
+  WSAELIBMAX,
+#else
+  0,
+#endif
+#endif
+#ifdef ELIBSCN
+  ELIBSCN,
+#else
+#ifdef WSAELIBSCN
+  WSAELIBSCN,
+#else
+  0,
+#endif
+#endif
+#ifdef ELNRNG
+  ELNRNG,
+#else
+#ifdef WSAELNRNG
+  WSAELNRNG,
+#else
+  0,
+#endif
+#endif
+#ifdef ELOOP
+  ELOOP,
+#else
+#ifdef WSAELOOP
+  WSAELOOP,
+#else
+  0,
+#endif
+#endif
+#ifdef EMEDIUMTYPE
+  EMEDIUMTYPE,
+#else
+#ifdef WSAEMEDIUMTYPE
+  WSAEMEDIUMTYPE,
+#else
+  0,
+#endif
+#endif
+#ifdef EMFILE
+  EMFILE,
+#else
+#ifdef WSAEMFILE
+  WSAEMFILE,
+#else
+  0,
+#endif
+#endif
+#ifdef EMLINK
+  EMLINK,
+#else
+#ifdef WSAEMLINK
+  WSAEMLINK,
+#else
+  0,
+#endif
+#endif
+#ifdef EMSGSIZE
+  EMSGSIZE,
+#else
+#ifdef WSAEMSGSIZE
+  WSAEMSGSIZE,
+#else
+  0,
+#endif
+#endif
+#ifdef EMULTIHOP
+  EMULTIHOP,
+#else
+#ifdef WSAEMULTIHOP
+  WSAEMULTIHOP,
+#else
+  0,
+#endif
+#endif
+#ifdef ENAMETOOLONG
+  ENAMETOOLONG,
+#else
+#ifdef WSAENAMETOOLONG
+  WSAENAMETOOLONG,
+#else
+  0,
+#endif
+#endif
+#ifdef ENAVAIL
+  ENAVAIL,
+#else
+#ifdef WSAENAVAIL
+  WSAENAVAIL,
+#else
+  0,
+#endif
+#endif
+#ifdef ENEEDAUTH
+  ENEEDAUTH,
+#else
+#ifdef WSAENEEDAUTH
+  WSAENEEDAUTH,
+#else
+  0,
+#endif
+#endif
+#ifdef ENETDOWN
+  ENETDOWN,
+#else
+#ifdef WSAENETDOWN
+  WSAENETDOWN,
+#else
+  0,
+#endif
+#endif
+#ifdef ENETRESET
+  ENETRESET,
+#else
+#ifdef WSAENETRESET
+  WSAENETRESET,
+#else
+  0,
+#endif
+#endif
+#ifdef ENETUNREACH
+  ENETUNREACH,
+#else
+#ifdef WSAENETUNREACH
+  WSAENETUNREACH,
+#else
+  0,
+#endif
+#endif
+#ifdef ENFILE
+  ENFILE,
+#else
+#ifdef WSAENFILE
+  WSAENFILE,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOANO
+  ENOANO,
+#else
+#ifdef WSAENOANO
+  WSAENOANO,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOBUFS
+  ENOBUFS,
+#else
+#ifdef WSAENOBUFS
+  WSAENOBUFS,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOCSI
+  ENOCSI,
+#else
+#ifdef WSAENOCSI
+  WSAENOCSI,
+#else
+  0,
+#endif
+#endif
+#ifdef ENODATA
+  ENODATA,
+#else
+#ifdef WSAENODATA
+  WSAENODATA,
+#else
+  0,
+#endif
+#endif
+#ifdef ENODEV
+  ENODEV,
+#else
+#ifdef WSAENODEV
+  WSAENODEV,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOENT
+  ENOENT,
+#else
+#ifdef WSAENOENT
+  WSAENOENT,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOEXEC
+  ENOEXEC,
+#else
+#ifdef WSAENOEXEC
+  WSAENOEXEC,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOLCK
+  ENOLCK,
+#else
+#ifdef WSAENOLCK
+  WSAENOLCK,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOLINK
+  ENOLINK,
+#else
+#ifdef WSAENOLINK
+  WSAENOLINK,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOMEDIUM
+  ENOMEDIUM,
+#else
+#ifdef WSAENOMEDIUM
+  WSAENOMEDIUM,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOMEM
+  ENOMEM,
+#else
+#ifdef WSAENOMEM
+  WSAENOMEM,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOMSG
+  ENOMSG,
+#else
+#ifdef WSAENOMSG
+  WSAENOMSG,
+#else
+  0,
+#endif
+#endif
+#ifdef ENONET
+  ENONET,
+#else
+#ifdef WSAENONET
+  WSAENONET,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOPKG
+  ENOPKG,
+#else
+#ifdef WSAENOPKG
+  WSAENOPKG,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOPROTOOPT
+  ENOPROTOOPT,
+#else
+#ifdef WSAENOPROTOOPT
+  WSAENOPROTOOPT,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOSPC
+  ENOSPC,
+#else
+#ifdef WSAENOSPC
+  WSAENOSPC,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOSR
+  ENOSR,
+#else
+#ifdef WSAENOSR
+  WSAENOSR,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOSTR
+  ENOSTR,
+#else
+#ifdef WSAENOSTR
+  WSAENOSTR,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOSYS
+  ENOSYS,
+#else
+#ifdef WSAENOSYS
+  WSAENOSYS,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTBLK
+  ENOTBLK,
+#else
+#ifdef WSAENOTBLK
+  WSAENOTBLK,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTCONN
+  ENOTCONN,
+#else
+#ifdef WSAENOTCONN
+  WSAENOTCONN,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTDIR
+  ENOTDIR,
+#else
+#ifdef WSAENOTDIR
+  WSAENOTDIR,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTEMPTY
+  ENOTEMPTY,
+#else
+#ifdef WSAENOTEMPTY
+  WSAENOTEMPTY,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTNAM
+  ENOTNAM,
+#else
+#ifdef WSAENOTNAM
+  WSAENOTNAM,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTSOCK
+  ENOTSOCK,
+#else
+#ifdef WSAENOTSOCK
+  WSAENOTSOCK,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTSUP
+  ENOTSUP,
+#else
+#ifdef WSAENOTSUP
+  WSAENOTSUP,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTTY
+  ENOTTY,
+#else
+#ifdef WSAENOTTY
+  WSAENOTTY,
+#else
+  0,
+#endif
+#endif
+#ifdef ENOTUNIQ
+  ENOTUNIQ,
+#else
+#ifdef WSAENOTUNIQ
+  WSAENOTUNIQ,
+#else
+  0,
+#endif
+#endif
+#ifdef ENXIO
+  ENXIO,
+#else
+#ifdef WSAENXIO
+  WSAENXIO,
+#else
+  0,
+#endif
+#endif
+#ifdef EOPNOTSUPP
+  EOPNOTSUPP,
+#else
+#ifdef WSAEOPNOTSUPP
+  WSAEOPNOTSUPP,
+#else
+  0,
+#endif
+#endif
+#ifdef EOVERFLOW
+  EOVERFLOW,
+#else
+#ifdef WSAEOVERFLOW
+  WSAEOVERFLOW,
+#else
+  0,
+#endif
+#endif
+#ifdef EPERM
+  EPERM,
+#else
+#ifdef WSAEPERM
+  WSAEPERM,
+#else
+  0,
+#endif
+#endif
+#ifdef EPFNOSUPPORT
+  EPFNOSUPPORT,
+#else
+#ifdef WSAEPFNOSUPPORT
+  WSAEPFNOSUPPORT,
+#else
+  0,
+#endif
+#endif
+#ifdef EPIPE
+  EPIPE,
+#else
+#ifdef WSAEPIPE
+  WSAEPIPE,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROCLIM
+  EPROCLIM,
+#else
+#ifdef WSAEPROCLIM
+  WSAEPROCLIM,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROCUNAVAIL
+  EPROCUNAVAIL,
+#else
+#ifdef WSAEPROCUNAVAIL
+  WSAEPROCUNAVAIL,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROGMISMATCH
+  EPROGMISMATCH,
+#else
+#ifdef WSAEPROGMISMATCH
+  WSAEPROGMISMATCH,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROGUNAVAIL
+  EPROGUNAVAIL,
+#else
+#ifdef WSAEPROGUNAVAIL
+  WSAEPROGUNAVAIL,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROTO
+  EPROTO,
+#else
+#ifdef WSAEPROTO
+  WSAEPROTO,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROTONOSUPPORT
+  EPROTONOSUPPORT,
+#else
+#ifdef WSAEPROTONOSUPPORT
+  WSAEPROTONOSUPPORT,
+#else
+  0,
+#endif
+#endif
+#ifdef EPROTOTYPE
+  EPROTOTYPE,
+#else
+#ifdef WSAEPROTOTYPE
+  WSAEPROTOTYPE,
+#else
+  0,
+#endif
+#endif
+#ifdef ERANGE
+  ERANGE,
+#else
+#ifdef WSAERANGE
+  WSAERANGE,
+#else
+  0,
+#endif
+#endif
+#ifdef EREMCHG
+  EREMCHG,
+#else
+#ifdef WSAEREMCHG
+  WSAEREMCHG,
+#else
+  0,
+#endif
+#endif
+#ifdef EREMOTE
+  EREMOTE,
+#else
+#ifdef WSAEREMOTE
+  WSAEREMOTE,
+#else
+  0,
+#endif
+#endif
+#ifdef EREMOTEIO
+  EREMOTEIO,
+#else
+#ifdef WSAEREMOTEIO
+  WSAEREMOTEIO,
+#else
+  0,
+#endif
+#endif
+#ifdef ERESTART
+  ERESTART,
+#else
+#ifdef WSAERESTART
+  WSAERESTART,
+#else
+  0,
+#endif
+#endif
+#ifdef EROFS
+  EROFS,
+#else
+#ifdef WSAEROFS
+  WSAEROFS,
+#else
+  0,
+#endif
+#endif
+#ifdef ERPCMISMATCH
+  ERPCMISMATCH,
+#else
+#ifdef WSAERPCMISMATCH
+  WSAERPCMISMATCH,
+#else
+  0,
+#endif
+#endif
+#ifdef ESHUTDOWN
+  ESHUTDOWN,
+#else
+#ifdef WSAESHUTDOWN
+  WSAESHUTDOWN,
+#else
+  0,
+#endif
+#endif
+#ifdef ESOCKTNOSUPPORT
+  ESOCKTNOSUPPORT,
+#else
+#ifdef WSAESOCKTNOSUPPORT
+  WSAESOCKTNOSUPPORT,
+#else
+  0,
+#endif
+#endif
+#ifdef ESPIPE
+  ESPIPE,
+#else
+#ifdef WSAESPIPE
+  WSAESPIPE,
+#else
+  0,
+#endif
+#endif
+#ifdef ESRCH
+  ESRCH,
+#else
+#ifdef WSAESRCH
+  WSAESRCH,
+#else
+  0,
+#endif
+#endif
+#ifdef ESRMNT
+  ESRMNT,
+#else
+#ifdef WSAESRMNT
+  WSAESRMNT,
+#else
+  0,
+#endif
+#endif
+#ifdef ESTALE
+  ESTALE,
+#else
+#ifdef WSAESTALE
+  WSAESTALE,
+#else
+  0,
+#endif
+#endif
+#ifdef ESTRPIPE
+  ESTRPIPE,
+#else
+#ifdef WSAESTRPIPE
+  WSAESTRPIPE,
+#else
+  0,
+#endif
+#endif
+#ifdef ETIME
+  ETIME,
+#else
+#ifdef WSAETIME
+  WSAETIME,
+#else
+  0,
+#endif
+#endif
+#ifdef ETIMEDOUT
+  ETIMEDOUT,
+#else
+#ifdef WSAETIMEDOUT
+  WSAETIMEDOUT,
+#else
+  0,
+#endif
+#endif
+#ifdef ETOOMANYREFS
+  ETOOMANYREFS,
+#else
+#ifdef WSAETOOMANYREFS
+  WSAETOOMANYREFS,
+#else
+  0,
+#endif
+#endif
+#ifdef ETXTBSY
+  ETXTBSY,
+#else
+#ifdef WSAETXTBSY
+  WSAETXTBSY,
+#else
+  0,
+#endif
+#endif
+#ifdef EUCLEAN
+  EUCLEAN,
+#else
+#ifdef WSAEUCLEAN
+  WSAEUCLEAN,
+#else
+  0,
+#endif
+#endif
+#ifdef EUNATCH
+  EUNATCH,
+#else
+#ifdef WSAEUNATCH
+  WSAEUNATCH,
+#else
+  0,
+#endif
+#endif
+#ifdef EUSERS
+  EUSERS,
+#else
+#ifdef WSAEUSERS
+  WSAEUSERS,
+#else
+  0,
+#endif
+#endif
+#ifdef EWOULDBLOCK
+  EWOULDBLOCK,
+#else
+#ifdef WSAEWOULDBLOCK
+  WSAEWOULDBLOCK,
+#else
+  0,
+#endif
+#endif
+#ifdef EXDEV
+  EXDEV,
+#else
+#ifdef WSAEXDEV
+  WSAEXDEV,
+#else
+  0,
+#endif
+#endif
+#ifdef EXFULL
+  EXFULL,
+#else
+#ifdef WSAEXFULL
+  WSAEXFULL,
+#else
+  0,
+#endif
+#endif
+};
diff --git a/src/config.h b/src/config.h
new file mode 100644
index 0000000..689d256
--- /dev/null
+++ b/src/config.h
@@ -0,0 +1,362 @@
+/* config.h.  Generated from config.h.in by configure.  */
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* GIT commit id revision used to build this package */
+#define BUILD_REVISION "8047ca9"
+
+/* The time this package was configured for a build */
+#define BUILD_TIMESTAMP "<none>"
+
+/* Defined to use log_clock timestamps */
+/* #undef ENABLE_LOG_CLOCK */
+
+/* Define to 1 if translation of program messages to the user's native
+   language is requested. */
+#define ENABLE_NLS 1
+
+/* Define to use the GNU C visibility attribute. */
+#define GPGRT_USE_VISIBILITY 1
+
+/* Define to 1 if you have the Mac OS X function CFLocaleCopyCurrent in the
+   CoreFoundation framework. */
+/* #undef HAVE_CFLOCALECOPYCURRENT */
+
+/* Define to 1 if you have the Mac OS X function CFPreferencesCopyAppValue in
+   the CoreFoundation framework. */
+/* #undef HAVE_CFPREFERENCESCOPYAPPVALUE */
+
+/* Define if the GNU dcgettext() function is already present or preinstalled.
+   */
+#define HAVE_DCGETTEXT 1
+
+/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_R 1
+
+/* Define to 1 if you have the <direct.h> header file. */
+/* #undef HAVE_DIRECT_H */
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the `flockfile' function. */
+#define HAVE_FLOCKFILE 1
+
+/* Define to 1 if you have the `fork' function. */
+#define HAVE_FORK 1
+
+/* Defined if a GCC style "__attribute__ ((aligned (n))" is supported */
+#define HAVE_GCC_ATTRIBUTE_ALIGNED 1
+
+/* Define to 1 if you have the `getpwnam' function. */
+#define HAVE_GETPWNAM 1
+
+/* Define to 1 if you have the `getpwnam_r' function. */
+#define HAVE_GETPWNAM_R 1
+
+/* Define to 1 if you have the `getpwuid' function. */
+#define HAVE_GETPWUID 1
+
+/* Define to 1 if you have the `getpwuid_r' function. */
+#define HAVE_GETPWUID_R 1
+
+/* Define to 1 if you have the `getrlimit' function. */
+#define HAVE_GETRLIMIT 1
+
+/* Define if the GNU gettext() function is already present or preinstalled. */
+#define HAVE_GETTEXT 1
+
+/* Define if you have the iconv() function and it works. */
+/* #undef HAVE_ICONV */
+
+/* Define to 1 if the system has the type `intmax_t'. */
+#define HAVE_INTMAX_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define if you have <langinfo.h> and nl_langinfo(THOUSEP). */
+#define HAVE_LANGINFO_THOUSEP 1
+
+/* Define to 1 if you have a fully functional readline library. */
+#define HAVE_LIBREADLINE 1
+
+/* Define to 1 if you have the <locale.h> header file. */
+#define HAVE_LOCALE_H 1
+
+/* Define to 1 if the system has the type `long double'. */
+#define HAVE_LONG_DOUBLE 1
+
+/* Define to 1 if the system has the type 'long long int'. */
+#define HAVE_LONG_LONG_INT 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `memrchr' function. */
+#define HAVE_MEMRCHR 1
+
+/* Define to 1 if you have the `mmap' function. */
+#define HAVE_MMAP 1
+
+/* Define to 1 if you have the <poll.h> header file. */
+#define HAVE_POLL_H 1
+
+/* Define if the <pthread.h> defines PTHREAD_MUTEX_RECURSIVE. */
+#define HAVE_PTHREAD_MUTEX_RECURSIVE 1
+
+/* Define if the POSIX multithreading library has read/write locks. */
+#define HAVE_PTHREAD_RWLOCK 1
+
+/* Define to 1 if the system has the type `ptrdiff_t'. */
+#define HAVE_PTRDIFF_T 1
+
+/* Define to 1 if you have the <pwd.h> header file. */
+#define HAVE_PWD_H 1
+
+/* Define to 1 if you have the `rand' function. */
+#define HAVE_RAND 1
+
+/* Define to 1 if you have the `setenv' function. */
+#define HAVE_SETENV 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#define HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `stat' function. */
+#define HAVE_STAT 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the `stpcpy' function. */
+#define HAVE_STPCPY 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+#define HAVE_STRERROR_R 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strlwr' function. */
+/* #undef HAVE_STRLWR */
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#define HAVE_SYS_SELECT_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if the system has the type `uintmax_t'. */
+#define HAVE_UINTMAX_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if the system has the type 'unsigned long long int'. */
+#define HAVE_UNSIGNED_LONG_LONG_INT 1
+
+/* Define to 1 if you have the `vasprintf' function. */
+#define HAVE_VASPRINTF 1
+
+/* Define to 1 if you have the `vfork' function. */
+#define HAVE_VFORK 1
+
+/* Define to 1 if you have the <vfork.h> header file. */
+/* #undef HAVE_VFORK_H */
+
+/* Defined if we run on WindowsCE */
+/* #undef HAVE_W32CE_SYSTEM */
+
+/* Defined if we run on a W32 API based system */
+/* #undef HAVE_W32_SYSTEM */
+
+/* Defined if we run on 64 bit W32 API system */
+/* #undef HAVE_W64_SYSTEM */
+
+/* Define to 1 if `fork' works. */
+#define HAVE_WORKING_FORK 1
+
+/* Define to 1 if `vfork' works. */
+#define HAVE_WORKING_VFORK 1
+
+/* The host triplet */
+#define HOST_TRIPLET_STRING "x86_64-pc-linux-gnu"
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#define LT_OBJDIR ".libs/"
+
+/* Defined if mkdir() does not take permission flags */
+/* #undef MKDIR_TAKES_ONE_ARG */
+
+/* Name of package */
+#define PACKAGE "libgpg-error"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "https://bugs.gnupg.org"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "libgpg-error"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "libgpg-error 1.40-beta7"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "libgpg-error"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL ""
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "1.40-beta7"
+
+/* Define if the pthread_in_use() detection is hard. */
+/* #undef PTHREAD_IN_USE_DETECTION_HARD */
+
+/* Used by mkheader to insert the replacement type. */
+#define REPLACEMENT_FOR_OFF_T "long"
+
+/* The size of `int', as computed by sizeof. */
+#define SIZEOF_INT 4
+
+/* The size of `long', as computed by sizeof. */
+#define SIZEOF_LONG 8
+
+/* The size of `long long', as computed by sizeof. */
+#define SIZEOF_LONG_LONG 8
+
+/* The size of `pthread_mutex_t', as computed by sizeof. */
+#define SIZEOF_PTHREAD_MUTEX_T 40
+
+/* The size of `time_t', as computed by sizeof. */
+#define SIZEOF_TIME_T 8
+
+/* The size of `unsigned long', as computed by sizeof. */
+#define SIZEOF_UNSIGNED_LONG 8
+
+/* The size of `void *', as computed by sizeof. */
+#define SIZEOF_VOID_P 8
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if strerror_r returns char *. */
+#define STRERROR_R_CHAR_P 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#define TIME_WITH_SYS_TIME 1
+
+/* Define if the POSIX multithreading library can be used. */
+#define USE_POSIX_THREADS 1
+
+/* Define if references to the POSIX multithreading library should be made
+   weak. */
+#define USE_POSIX_THREADS_WEAK 1
+
+/* Define if the old Solaris multithreading library can be used. */
+/* #undef USE_SOLARIS_THREADS */
+
+/* Define if references to the old Solaris multithreading library should be
+   made weak. */
+/* #undef USE_SOLARIS_THREADS_WEAK */
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# define _ALL_SOURCE 1
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# define _GNU_SOURCE 1
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# define _POSIX_PTHREAD_SEMANTICS 1
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# define _TANDEM_SOURCE 1
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# define __EXTENSIONS__ 1
+#endif
+
+
+/* Define if the native Windows multithreading API can be used. */
+/* #undef USE_WINDOWS_THREADS */
+
+/* Version number of package */
+#define VERSION "1.40-beta7"
+
+/* Expose all libc features (__DARWIN_C_FULL). */
+/* #undef _DARWIN_C_SOURCE */
+
+/* Enable large inode numbers on Mac OS X 10.5.  */
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+/* #undef _FILE_OFFSET_BITS */
+
+/* Define for large files, on AIX-style hosts. */
+/* #undef _LARGE_FILES */
+
+/* Define to 1 if on MINIX. */
+/* #undef _MINIX */
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+/* #undef _POSIX_1_SOURCE */
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+/* #undef _POSIX_SOURCE */
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #undef const */
+
+/* Define to the widest signed integer type if <stdint.h> and <inttypes.h> do
+   not define. */
+/* #undef intmax_t */
+
+/* Define to `int' if <sys/types.h> does not define. */
+/* #undef pid_t */
+
+/* Define to the widest unsigned integer type if <stdint.h> and <inttypes.h>
+   do not define. */
+/* #undef uintmax_t */
+
+/* Define as `fork' if `vfork' does not work. */
+/* #undef vfork */
+
+
+/* Force using of NLS for W32 even if no libintl has been found.  This is
+   okay because we have our own gettext implementation for W32.  */
+#if defined(HAVE_W32_SYSTEM) && !defined(ENABLE_NLS)
+#define ENABLE_NLS 1
+#endif
+
+/* Connect the generic estream-printf.c to our framework.  */
+#define _ESTREAM_PRINTF_REALLOC _gpgrt_realloc
+#define _ESTREAM_PRINTF_EXTRA_INCLUDE "gpgrt-int.h"
+
+/* For building we need to define these macro.  */
+#define GPG_ERR_ENABLE_GETTEXT_MACROS 1
+#define GPG_ERR_ENABLE_ERRNO_MACROS 1
+#define GPGRT_ENABLE_ES_MACROS 1
+#define GPGRT_ENABLE_LOG_MACROS 1
+#define GPGRT_ENABLE_ARGPARSE_MACROS 1
+
diff --git a/src/err-codes-sym.h b/src/err-codes-sym.h
new file mode 100644
index 0000000..7892de1
--- /dev/null
+++ b/src/err-codes-sym.h
@@ -0,0 +1,936 @@
+/* Output of mkstrtable.awk.  DO NOT EDIT.  */
+
+/* err-codes.h - List of error codes and their description.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+/* The purpose of this complex string table is to produce
+   optimal code with a minimum of relocations.  */
+
+static const char msgstr[] = 
+  "GPG_ERR_NO_ERROR" "\0"
+  "GPG_ERR_GENERAL" "\0"
+  "GPG_ERR_UNKNOWN_PACKET" "\0"
+  "GPG_ERR_UNKNOWN_VERSION" "\0"
+  "GPG_ERR_PUBKEY_ALGO" "\0"
+  "GPG_ERR_DIGEST_ALGO" "\0"
+  "GPG_ERR_BAD_PUBKEY" "\0"
+  "GPG_ERR_BAD_SECKEY" "\0"
+  "GPG_ERR_BAD_SIGNATURE" "\0"
+  "GPG_ERR_NO_PUBKEY" "\0"
+  "GPG_ERR_CHECKSUM" "\0"
+  "GPG_ERR_BAD_PASSPHRASE" "\0"
+  "GPG_ERR_CIPHER_ALGO" "\0"
+  "GPG_ERR_KEYRING_OPEN" "\0"
+  "GPG_ERR_INV_PACKET" "\0"
+  "GPG_ERR_INV_ARMOR" "\0"
+  "GPG_ERR_NO_USER_ID" "\0"
+  "GPG_ERR_NO_SECKEY" "\0"
+  "GPG_ERR_WRONG_SECKEY" "\0"
+  "GPG_ERR_BAD_KEY" "\0"
+  "GPG_ERR_COMPR_ALGO" "\0"
+  "GPG_ERR_NO_PRIME" "\0"
+  "GPG_ERR_NO_ENCODING_METHOD" "\0"
+  "GPG_ERR_NO_ENCRYPTION_SCHEME" "\0"
+  "GPG_ERR_NO_SIGNATURE_SCHEME" "\0"
+  "GPG_ERR_INV_ATTR" "\0"
+  "GPG_ERR_NO_VALUE" "\0"
+  "GPG_ERR_NOT_FOUND" "\0"
+  "GPG_ERR_VALUE_NOT_FOUND" "\0"
+  "GPG_ERR_SYNTAX" "\0"
+  "GPG_ERR_BAD_MPI" "\0"
+  "GPG_ERR_INV_PASSPHRASE" "\0"
+  "GPG_ERR_SIG_CLASS" "\0"
+  "GPG_ERR_RESOURCE_LIMIT" "\0"
+  "GPG_ERR_INV_KEYRING" "\0"
+  "GPG_ERR_TRUSTDB" "\0"
+  "GPG_ERR_BAD_CERT" "\0"
+  "GPG_ERR_INV_USER_ID" "\0"
+  "GPG_ERR_UNEXPECTED" "\0"
+  "GPG_ERR_TIME_CONFLICT" "\0"
+  "GPG_ERR_KEYSERVER" "\0"
+  "GPG_ERR_WRONG_PUBKEY_ALGO" "\0"
+  "GPG_ERR_TRIBUTE_TO_D_A" "\0"
+  "GPG_ERR_WEAK_KEY" "\0"
+  "GPG_ERR_INV_KEYLEN" "\0"
+  "GPG_ERR_INV_ARG" "\0"
+  "GPG_ERR_BAD_URI" "\0"
+  "GPG_ERR_INV_URI" "\0"
+  "GPG_ERR_NETWORK" "\0"
+  "GPG_ERR_UNKNOWN_HOST" "\0"
+  "GPG_ERR_SELFTEST_FAILED" "\0"
+  "GPG_ERR_NOT_ENCRYPTED" "\0"
+  "GPG_ERR_NOT_PROCESSED" "\0"
+  "GPG_ERR_UNUSABLE_PUBKEY" "\0"
+  "GPG_ERR_UNUSABLE_SECKEY" "\0"
+  "GPG_ERR_INV_VALUE" "\0"
+  "GPG_ERR_BAD_CERT_CHAIN" "\0"
+  "GPG_ERR_MISSING_CERT" "\0"
+  "GPG_ERR_NO_DATA" "\0"
+  "GPG_ERR_BUG" "\0"
+  "GPG_ERR_NOT_SUPPORTED" "\0"
+  "GPG_ERR_INV_OP" "\0"
+  "GPG_ERR_TIMEOUT" "\0"
+  "GPG_ERR_INTERNAL" "\0"
+  "GPG_ERR_EOF_GCRYPT" "\0"
+  "GPG_ERR_INV_OBJ" "\0"
+  "GPG_ERR_TOO_SHORT" "\0"
+  "GPG_ERR_TOO_LARGE" "\0"
+  "GPG_ERR_NO_OBJ" "\0"
+  "GPG_ERR_NOT_IMPLEMENTED" "\0"
+  "GPG_ERR_CONFLICT" "\0"
+  "GPG_ERR_INV_CIPHER_MODE" "\0"
+  "GPG_ERR_INV_FLAG" "\0"
+  "GPG_ERR_INV_HANDLE" "\0"
+  "GPG_ERR_TRUNCATED" "\0"
+  "GPG_ERR_INCOMPLETE_LINE" "\0"
+  "GPG_ERR_INV_RESPONSE" "\0"
+  "GPG_ERR_NO_AGENT" "\0"
+  "GPG_ERR_AGENT" "\0"
+  "GPG_ERR_INV_DATA" "\0"
+  "GPG_ERR_ASSUAN_SERVER_FAULT" "\0"
+  "GPG_ERR_ASSUAN" "\0"
+  "GPG_ERR_INV_SESSION_KEY" "\0"
+  "GPG_ERR_INV_SEXP" "\0"
+  "GPG_ERR_UNSUPPORTED_ALGORITHM" "\0"
+  "GPG_ERR_NO_PIN_ENTRY" "\0"
+  "GPG_ERR_PIN_ENTRY" "\0"
+  "GPG_ERR_BAD_PIN" "\0"
+  "GPG_ERR_INV_NAME" "\0"
+  "GPG_ERR_BAD_DATA" "\0"
+  "GPG_ERR_INV_PARAMETER" "\0"
+  "GPG_ERR_WRONG_CARD" "\0"
+  "GPG_ERR_NO_DIRMNGR" "\0"
+  "GPG_ERR_DIRMNGR" "\0"
+  "GPG_ERR_CERT_REVOKED" "\0"
+  "GPG_ERR_NO_CRL_KNOWN" "\0"
+  "GPG_ERR_CRL_TOO_OLD" "\0"
+  "GPG_ERR_LINE_TOO_LONG" "\0"
+  "GPG_ERR_NOT_TRUSTED" "\0"
+  "GPG_ERR_CANCELED" "\0"
+  "GPG_ERR_BAD_CA_CERT" "\0"
+  "GPG_ERR_CERT_EXPIRED" "\0"
+  "GPG_ERR_CERT_TOO_YOUNG" "\0"
+  "GPG_ERR_UNSUPPORTED_CERT" "\0"
+  "GPG_ERR_UNKNOWN_SEXP" "\0"
+  "GPG_ERR_UNSUPPORTED_PROTECTION" "\0"
+  "GPG_ERR_CORRUPTED_PROTECTION" "\0"
+  "GPG_ERR_AMBIGUOUS_NAME" "\0"
+  "GPG_ERR_CARD" "\0"
+  "GPG_ERR_CARD_RESET" "\0"
+  "GPG_ERR_CARD_REMOVED" "\0"
+  "GPG_ERR_INV_CARD" "\0"
+  "GPG_ERR_CARD_NOT_PRESENT" "\0"
+  "GPG_ERR_NO_PKCS15_APP" "\0"
+  "GPG_ERR_NOT_CONFIRMED" "\0"
+  "GPG_ERR_CONFIGURATION" "\0"
+  "GPG_ERR_NO_POLICY_MATCH" "\0"
+  "GPG_ERR_INV_INDEX" "\0"
+  "GPG_ERR_INV_ID" "\0"
+  "GPG_ERR_NO_SCDAEMON" "\0"
+  "GPG_ERR_SCDAEMON" "\0"
+  "GPG_ERR_UNSUPPORTED_PROTOCOL" "\0"
+  "GPG_ERR_BAD_PIN_METHOD" "\0"
+  "GPG_ERR_CARD_NOT_INITIALIZED" "\0"
+  "GPG_ERR_UNSUPPORTED_OPERATION" "\0"
+  "GPG_ERR_WRONG_KEY_USAGE" "\0"
+  "GPG_ERR_NOTHING_FOUND" "\0"
+  "GPG_ERR_WRONG_BLOB_TYPE" "\0"
+  "GPG_ERR_MISSING_VALUE" "\0"
+  "GPG_ERR_HARDWARE" "\0"
+  "GPG_ERR_PIN_BLOCKED" "\0"
+  "GPG_ERR_USE_CONDITIONS" "\0"
+  "GPG_ERR_PIN_NOT_SYNCED" "\0"
+  "GPG_ERR_INV_CRL" "\0"
+  "GPG_ERR_BAD_BER" "\0"
+  "GPG_ERR_INV_BER" "\0"
+  "GPG_ERR_ELEMENT_NOT_FOUND" "\0"
+  "GPG_ERR_IDENTIFIER_NOT_FOUND" "\0"
+  "GPG_ERR_INV_TAG" "\0"
+  "GPG_ERR_INV_LENGTH" "\0"
+  "GPG_ERR_INV_KEYINFO" "\0"
+  "GPG_ERR_UNEXPECTED_TAG" "\0"
+  "GPG_ERR_NOT_DER_ENCODED" "\0"
+  "GPG_ERR_NO_CMS_OBJ" "\0"
+  "GPG_ERR_INV_CMS_OBJ" "\0"
+  "GPG_ERR_UNKNOWN_CMS_OBJ" "\0"
+  "GPG_ERR_UNSUPPORTED_CMS_OBJ" "\0"
+  "GPG_ERR_UNSUPPORTED_ENCODING" "\0"
+  "GPG_ERR_UNSUPPORTED_CMS_VERSION" "\0"
+  "GPG_ERR_UNKNOWN_ALGORITHM" "\0"
+  "GPG_ERR_INV_ENGINE" "\0"
+  "GPG_ERR_PUBKEY_NOT_TRUSTED" "\0"
+  "GPG_ERR_DECRYPT_FAILED" "\0"
+  "GPG_ERR_KEY_EXPIRED" "\0"
+  "GPG_ERR_SIG_EXPIRED" "\0"
+  "GPG_ERR_ENCODING_PROBLEM" "\0"
+  "GPG_ERR_INV_STATE" "\0"
+  "GPG_ERR_DUP_VALUE" "\0"
+  "GPG_ERR_MISSING_ACTION" "\0"
+  "GPG_ERR_MODULE_NOT_FOUND" "\0"
+  "GPG_ERR_INV_OID_STRING" "\0"
+  "GPG_ERR_INV_TIME" "\0"
+  "GPG_ERR_INV_CRL_OBJ" "\0"
+  "GPG_ERR_UNSUPPORTED_CRL_VERSION" "\0"
+  "GPG_ERR_INV_CERT_OBJ" "\0"
+  "GPG_ERR_UNKNOWN_NAME" "\0"
+  "GPG_ERR_LOCALE_PROBLEM" "\0"
+  "GPG_ERR_NOT_LOCKED" "\0"
+  "GPG_ERR_PROTOCOL_VIOLATION" "\0"
+  "GPG_ERR_INV_MAC" "\0"
+  "GPG_ERR_INV_REQUEST" "\0"
+  "GPG_ERR_UNKNOWN_EXTN" "\0"
+  "GPG_ERR_UNKNOWN_CRIT_EXTN" "\0"
+  "GPG_ERR_LOCKED" "\0"
+  "GPG_ERR_UNKNOWN_OPTION" "\0"
+  "GPG_ERR_UNKNOWN_COMMAND" "\0"
+  "GPG_ERR_NOT_OPERATIONAL" "\0"
+  "GPG_ERR_NO_PASSPHRASE" "\0"
+  "GPG_ERR_NO_PIN" "\0"
+  "GPG_ERR_NOT_ENABLED" "\0"
+  "GPG_ERR_NO_ENGINE" "\0"
+  "GPG_ERR_MISSING_KEY" "\0"
+  "GPG_ERR_TOO_MANY" "\0"
+  "GPG_ERR_LIMIT_REACHED" "\0"
+  "GPG_ERR_NOT_INITIALIZED" "\0"
+  "GPG_ERR_MISSING_ISSUER_CERT" "\0"
+  "GPG_ERR_NO_KEYSERVER" "\0"
+  "GPG_ERR_INV_CURVE" "\0"
+  "GPG_ERR_UNKNOWN_CURVE" "\0"
+  "GPG_ERR_DUP_KEY" "\0"
+  "GPG_ERR_AMBIGUOUS" "\0"
+  "GPG_ERR_NO_CRYPT_CTX" "\0"
+  "GPG_ERR_WRONG_CRYPT_CTX" "\0"
+  "GPG_ERR_BAD_CRYPT_CTX" "\0"
+  "GPG_ERR_CRYPT_CTX_CONFLICT" "\0"
+  "GPG_ERR_BROKEN_PUBKEY" "\0"
+  "GPG_ERR_BROKEN_SECKEY" "\0"
+  "GPG_ERR_MAC_ALGO" "\0"
+  "GPG_ERR_FULLY_CANCELED" "\0"
+  "GPG_ERR_UNFINISHED" "\0"
+  "GPG_ERR_BUFFER_TOO_SHORT" "\0"
+  "GPG_ERR_SEXP_INV_LEN_SPEC" "\0"
+  "GPG_ERR_SEXP_STRING_TOO_LONG" "\0"
+  "GPG_ERR_SEXP_UNMATCHED_PAREN" "\0"
+  "GPG_ERR_SEXP_NOT_CANONICAL" "\0"
+  "GPG_ERR_SEXP_BAD_CHARACTER" "\0"
+  "GPG_ERR_SEXP_BAD_QUOTATION" "\0"
+  "GPG_ERR_SEXP_ZERO_PREFIX" "\0"
+  "GPG_ERR_SEXP_NESTED_DH" "\0"
+  "GPG_ERR_SEXP_UNMATCHED_DH" "\0"
+  "GPG_ERR_SEXP_UNEXPECTED_PUNC" "\0"
+  "GPG_ERR_SEXP_BAD_HEX_CHAR" "\0"
+  "GPG_ERR_SEXP_ODD_HEX_NUMBERS" "\0"
+  "GPG_ERR_SEXP_BAD_OCT_CHAR" "\0"
+  "GPG_ERR_SUBKEYS_EXP_OR_REV" "\0"
+  "GPG_ERR_DB_CORRUPTED" "\0"
+  "GPG_ERR_SERVER_FAILED" "\0"
+  "GPG_ERR_NO_NAME" "\0"
+  "GPG_ERR_NO_KEY" "\0"
+  "GPG_ERR_LEGACY_KEY" "\0"
+  "GPG_ERR_REQUEST_TOO_SHORT" "\0"
+  "GPG_ERR_REQUEST_TOO_LONG" "\0"
+  "GPG_ERR_OBJ_TERM_STATE" "\0"
+  "GPG_ERR_NO_CERT_CHAIN" "\0"
+  "GPG_ERR_CERT_TOO_LARGE" "\0"
+  "GPG_ERR_INV_RECORD" "\0"
+  "GPG_ERR_BAD_MAC" "\0"
+  "GPG_ERR_UNEXPECTED_MSG" "\0"
+  "GPG_ERR_COMPR_FAILED" "\0"
+  "GPG_ERR_WOULD_WRAP" "\0"
+  "GPG_ERR_FATAL_ALERT" "\0"
+  "GPG_ERR_NO_CIPHER" "\0"
+  "GPG_ERR_MISSING_CLIENT_CERT" "\0"
+  "GPG_ERR_CLOSE_NOTIFY" "\0"
+  "GPG_ERR_TICKET_EXPIRED" "\0"
+  "GPG_ERR_BAD_TICKET" "\0"
+  "GPG_ERR_UNKNOWN_IDENTITY" "\0"
+  "GPG_ERR_BAD_HS_CERT" "\0"
+  "GPG_ERR_BAD_HS_CERT_REQ" "\0"
+  "GPG_ERR_BAD_HS_CERT_VER" "\0"
+  "GPG_ERR_BAD_HS_CHANGE_CIPHER" "\0"
+  "GPG_ERR_BAD_HS_CLIENT_HELLO" "\0"
+  "GPG_ERR_BAD_HS_SERVER_HELLO" "\0"
+  "GPG_ERR_BAD_HS_SERVER_HELLO_DONE" "\0"
+  "GPG_ERR_BAD_HS_FINISHED" "\0"
+  "GPG_ERR_BAD_HS_SERVER_KEX" "\0"
+  "GPG_ERR_BAD_HS_CLIENT_KEX" "\0"
+  "GPG_ERR_BOGUS_STRING" "\0"
+  "GPG_ERR_FORBIDDEN" "\0"
+  "GPG_ERR_KEY_DISABLED" "\0"
+  "GPG_ERR_KEY_ON_CARD" "\0"
+  "GPG_ERR_INV_LOCK_OBJ" "\0"
+  "GPG_ERR_TRUE" "\0"
+  "GPG_ERR_FALSE" "\0"
+  "GPG_ERR_ASS_GENERAL" "\0"
+  "GPG_ERR_ASS_ACCEPT_FAILED" "\0"
+  "GPG_ERR_ASS_CONNECT_FAILED" "\0"
+  "GPG_ERR_ASS_INV_RESPONSE" "\0"
+  "GPG_ERR_ASS_INV_VALUE" "\0"
+  "GPG_ERR_ASS_INCOMPLETE_LINE" "\0"
+  "GPG_ERR_ASS_LINE_TOO_LONG" "\0"
+  "GPG_ERR_ASS_NESTED_COMMANDS" "\0"
+  "GPG_ERR_ASS_NO_DATA_CB" "\0"
+  "GPG_ERR_ASS_NO_INQUIRE_CB" "\0"
+  "GPG_ERR_ASS_NOT_A_SERVER" "\0"
+  "GPG_ERR_ASS_NOT_A_CLIENT" "\0"
+  "GPG_ERR_ASS_SERVER_START" "\0"
+  "GPG_ERR_ASS_READ_ERROR" "\0"
+  "GPG_ERR_ASS_WRITE_ERROR" "\0"
+  "GPG_ERR_ASS_TOO_MUCH_DATA" "\0"
+  "GPG_ERR_ASS_UNEXPECTED_CMD" "\0"
+  "GPG_ERR_ASS_UNKNOWN_CMD" "\0"
+  "GPG_ERR_ASS_SYNTAX" "\0"
+  "GPG_ERR_ASS_CANCELED" "\0"
+  "GPG_ERR_ASS_NO_INPUT" "\0"
+  "GPG_ERR_ASS_NO_OUTPUT" "\0"
+  "GPG_ERR_ASS_PARAMETER" "\0"
+  "GPG_ERR_ASS_UNKNOWN_INQUIRE" "\0"
+  "GPG_ERR_ENGINE_TOO_OLD" "\0"
+  "GPG_ERR_WINDOW_TOO_SMALL" "\0"
+  "GPG_ERR_WINDOW_TOO_LARGE" "\0"
+  "GPG_ERR_MISSING_ENVVAR" "\0"
+  "GPG_ERR_USER_ID_EXISTS" "\0"
+  "GPG_ERR_NAME_EXISTS" "\0"
+  "GPG_ERR_DUP_NAME" "\0"
+  "GPG_ERR_TOO_YOUNG" "\0"
+  "GPG_ERR_TOO_OLD" "\0"
+  "GPG_ERR_UNKNOWN_FLAG" "\0"
+  "GPG_ERR_INV_ORDER" "\0"
+  "GPG_ERR_ALREADY_FETCHED" "\0"
+  "GPG_ERR_TRY_LATER" "\0"
+  "GPG_ERR_WRONG_NAME" "\0"
+  "GPG_ERR_NO_AUTH" "\0"
+  "GPG_ERR_BAD_AUTH" "\0"
+  "GPG_ERR_NO_KEYBOXD" "\0"
+  "GPG_ERR_KEYBOXD" "\0"
+  "GPG_ERR_NO_SERVICE" "\0"
+  "GPG_ERR_SERVICE" "\0"
+  "GPG_ERR_SYSTEM_BUG" "\0"
+  "GPG_ERR_DNS_UNKNOWN" "\0"
+  "GPG_ERR_DNS_SECTION" "\0"
+  "GPG_ERR_DNS_ADDRESS" "\0"
+  "GPG_ERR_DNS_NO_QUERY" "\0"
+  "GPG_ERR_DNS_NO_ANSWER" "\0"
+  "GPG_ERR_DNS_CLOSED" "\0"
+  "GPG_ERR_DNS_VERIFY" "\0"
+  "GPG_ERR_DNS_TIMEOUT" "\0"
+  "GPG_ERR_LDAP_GENERAL" "\0"
+  "GPG_ERR_LDAP_ATTR_GENERAL" "\0"
+  "GPG_ERR_LDAP_NAME_GENERAL" "\0"
+  "GPG_ERR_LDAP_SECURITY_GENERAL" "\0"
+  "GPG_ERR_LDAP_SERVICE_GENERAL" "\0"
+  "GPG_ERR_LDAP_UPDATE_GENERAL" "\0"
+  "GPG_ERR_LDAP_E_GENERAL" "\0"
+  "GPG_ERR_LDAP_X_GENERAL" "\0"
+  "GPG_ERR_LDAP_OTHER_GENERAL" "\0"
+  "GPG_ERR_LDAP_X_CONNECTING" "\0"
+  "GPG_ERR_LDAP_REFERRAL_LIMIT" "\0"
+  "GPG_ERR_LDAP_CLIENT_LOOP" "\0"
+  "GPG_ERR_LDAP_NO_RESULTS" "\0"
+  "GPG_ERR_LDAP_CONTROL_NOT_FOUND" "\0"
+  "GPG_ERR_LDAP_NOT_SUPPORTED" "\0"
+  "GPG_ERR_LDAP_CONNECT" "\0"
+  "GPG_ERR_LDAP_NO_MEMORY" "\0"
+  "GPG_ERR_LDAP_PARAM" "\0"
+  "GPG_ERR_LDAP_USER_CANCELLED" "\0"
+  "GPG_ERR_LDAP_FILTER" "\0"
+  "GPG_ERR_LDAP_AUTH_UNKNOWN" "\0"
+  "GPG_ERR_LDAP_TIMEOUT" "\0"
+  "GPG_ERR_LDAP_DECODING" "\0"
+  "GPG_ERR_LDAP_ENCODING" "\0"
+  "GPG_ERR_LDAP_LOCAL" "\0"
+  "GPG_ERR_LDAP_SERVER_DOWN" "\0"
+  "GPG_ERR_LDAP_SUCCESS" "\0"
+  "GPG_ERR_LDAP_OPERATIONS" "\0"
+  "GPG_ERR_LDAP_PROTOCOL" "\0"
+  "GPG_ERR_LDAP_TIMELIMIT" "\0"
+  "GPG_ERR_LDAP_SIZELIMIT" "\0"
+  "GPG_ERR_LDAP_COMPARE_FALSE" "\0"
+  "GPG_ERR_LDAP_COMPARE_TRUE" "\0"
+  "GPG_ERR_LDAP_UNSUPPORTED_AUTH" "\0"
+  "GPG_ERR_LDAP_STRONG_AUTH_RQRD" "\0"
+  "GPG_ERR_LDAP_PARTIAL_RESULTS" "\0"
+  "GPG_ERR_LDAP_REFERRAL" "\0"
+  "GPG_ERR_LDAP_ADMINLIMIT" "\0"
+  "GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN" "\0"
+  "GPG_ERR_LDAP_CONFIDENT_RQRD" "\0"
+  "GPG_ERR_LDAP_SASL_BIND_INPROG" "\0"
+  "GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE" "\0"
+  "GPG_ERR_LDAP_UNDEFINED_TYPE" "\0"
+  "GPG_ERR_LDAP_BAD_MATCHING" "\0"
+  "GPG_ERR_LDAP_CONST_VIOLATION" "\0"
+  "GPG_ERR_LDAP_TYPE_VALUE_EXISTS" "\0"
+  "GPG_ERR_LDAP_INV_SYNTAX" "\0"
+  "GPG_ERR_LDAP_NO_SUCH_OBJ" "\0"
+  "GPG_ERR_LDAP_ALIAS_PROBLEM" "\0"
+  "GPG_ERR_LDAP_INV_DN_SYNTAX" "\0"
+  "GPG_ERR_LDAP_IS_LEAF" "\0"
+  "GPG_ERR_LDAP_ALIAS_DEREF" "\0"
+  "GPG_ERR_LDAP_X_PROXY_AUTH_FAIL" "\0"
+  "GPG_ERR_LDAP_BAD_AUTH" "\0"
+  "GPG_ERR_LDAP_INV_CREDENTIALS" "\0"
+  "GPG_ERR_LDAP_INSUFFICIENT_ACC" "\0"
+  "GPG_ERR_LDAP_BUSY" "\0"
+  "GPG_ERR_LDAP_UNAVAILABLE" "\0"
+  "GPG_ERR_LDAP_UNWILL_TO_PERFORM" "\0"
+  "GPG_ERR_LDAP_LOOP_DETECT" "\0"
+  "GPG_ERR_LDAP_NAMING_VIOLATION" "\0"
+  "GPG_ERR_LDAP_OBJ_CLS_VIOLATION" "\0"
+  "GPG_ERR_LDAP_NOT_ALLOW_NONLEAF" "\0"
+  "GPG_ERR_LDAP_NOT_ALLOW_ON_RDN" "\0"
+  "GPG_ERR_LDAP_ALREADY_EXISTS" "\0"
+  "GPG_ERR_LDAP_NO_OBJ_CLASS_MODS" "\0"
+  "GPG_ERR_LDAP_RESULTS_TOO_LARGE" "\0"
+  "GPG_ERR_LDAP_AFFECTS_MULT_DSAS" "\0"
+  "GPG_ERR_LDAP_VLV" "\0"
+  "GPG_ERR_LDAP_OTHER" "\0"
+  "GPG_ERR_LDAP_CUP_RESOURCE_LIMIT" "\0"
+  "GPG_ERR_LDAP_CUP_SEC_VIOLATION" "\0"
+  "GPG_ERR_LDAP_CUP_INV_DATA" "\0"
+  "GPG_ERR_LDAP_CUP_UNSUP_SCHEME" "\0"
+  "GPG_ERR_LDAP_CUP_RELOAD" "\0"
+  "GPG_ERR_LDAP_CANCELLED" "\0"
+  "GPG_ERR_LDAP_NO_SUCH_OPERATION" "\0"
+  "GPG_ERR_LDAP_TOO_LATE" "\0"
+  "GPG_ERR_LDAP_CANNOT_CANCEL" "\0"
+  "GPG_ERR_LDAP_ASSERTION_FAILED" "\0"
+  "GPG_ERR_LDAP_PROX_AUTH_DENIED" "\0"
+  "GPG_ERR_USER_1" "\0"
+  "GPG_ERR_USER_2" "\0"
+  "GPG_ERR_USER_3" "\0"
+  "GPG_ERR_USER_4" "\0"
+  "GPG_ERR_USER_5" "\0"
+  "GPG_ERR_USER_6" "\0"
+  "GPG_ERR_USER_7" "\0"
+  "GPG_ERR_USER_8" "\0"
+  "GPG_ERR_USER_9" "\0"
+  "GPG_ERR_USER_10" "\0"
+  "GPG_ERR_USER_11" "\0"
+  "GPG_ERR_USER_12" "\0"
+  "GPG_ERR_USER_13" "\0"
+  "GPG_ERR_USER_14" "\0"
+  "GPG_ERR_USER_15" "\0"
+  "GPG_ERR_USER_16" "\0"
+  "GPG_ERR_SQL_OK" "\0"
+  "GPG_ERR_SQL_ERROR" "\0"
+  "GPG_ERR_SQL_INTERNAL" "\0"
+  "GPG_ERR_SQL_PERM" "\0"
+  "GPG_ERR_SQL_ABORT" "\0"
+  "GPG_ERR_SQL_BUSY" "\0"
+  "GPG_ERR_SQL_LOCKED" "\0"
+  "GPG_ERR_SQL_NOMEM" "\0"
+  "GPG_ERR_SQL_READONLY" "\0"
+  "GPG_ERR_SQL_INTERRUPT" "\0"
+  "GPG_ERR_SQL_IOERR" "\0"
+  "GPG_ERR_SQL_CORRUPT" "\0"
+  "GPG_ERR_SQL_NOTFOUND" "\0"
+  "GPG_ERR_SQL_FULL" "\0"
+  "GPG_ERR_SQL_CANTOPEN" "\0"
+  "GPG_ERR_SQL_PROTOCOL" "\0"
+  "GPG_ERR_SQL_EMPTY" "\0"
+  "GPG_ERR_SQL_SCHEMA" "\0"
+  "GPG_ERR_SQL_TOOBIG" "\0"
+  "GPG_ERR_SQL_CONSTRAINT" "\0"
+  "GPG_ERR_SQL_MISMATCH" "\0"
+  "GPG_ERR_SQL_MISUSE" "\0"
+  "GPG_ERR_SQL_NOLFS" "\0"
+  "GPG_ERR_SQL_AUTH" "\0"
+  "GPG_ERR_SQL_FORMAT" "\0"
+  "GPG_ERR_SQL_RANGE" "\0"
+  "GPG_ERR_SQL_NOTADB" "\0"
+  "GPG_ERR_SQL_NOTICE" "\0"
+  "GPG_ERR_SQL_WARNING" "\0"
+  "GPG_ERR_SQL_ROW" "\0"
+  "GPG_ERR_SQL_DONE" "\0"
+  "GPG_ERR_MISSING_ERRNO" "\0"
+  "GPG_ERR_UNKNOWN_ERRNO" "\0"
+  "GPG_ERR_EOF" "\0"
+  "GPG_ERR_CODE_DIM";
+
+static const int msgidx[] =
+  {
+    0,
+    17,
+    33,
+    56,
+    80,
+    100,
+    120,
+    139,
+    158,
+    180,
+    198,
+    215,
+    238,
+    258,
+    279,
+    298,
+    316,
+    335,
+    353,
+    374,
+    390,
+    409,
+    426,
+    453,
+    482,
+    510,
+    527,
+    544,
+    562,
+    586,
+    601,
+    617,
+    640,
+    658,
+    681,
+    701,
+    717,
+    734,
+    754,
+    773,
+    795,
+    813,
+    839,
+    862,
+    879,
+    898,
+    914,
+    930,
+    946,
+    962,
+    983,
+    1007,
+    1029,
+    1051,
+    1075,
+    1099,
+    1117,
+    1140,
+    1161,
+    1177,
+    1189,
+    1211,
+    1226,
+    1242,
+    1259,
+    1278,
+    1294,
+    1312,
+    1330,
+    1345,
+    1369,
+    1386,
+    1410,
+    1427,
+    1446,
+    1464,
+    1488,
+    1509,
+    1526,
+    1540,
+    1557,
+    1585,
+    1600,
+    1624,
+    1641,
+    1671,
+    1692,
+    1710,
+    1726,
+    1743,
+    1760,
+    1782,
+    1801,
+    1820,
+    1836,
+    1857,
+    1878,
+    1898,
+    1920,
+    1940,
+    1957,
+    1977,
+    1998,
+    2021,
+    2046,
+    2067,
+    2098,
+    2127,
+    2150,
+    2163,
+    2182,
+    2203,
+    2220,
+    2245,
+    2267,
+    2289,
+    2311,
+    2335,
+    2353,
+    2368,
+    2388,
+    2405,
+    2434,
+    2457,
+    2486,
+    2516,
+    2540,
+    2562,
+    2586,
+    2608,
+    2625,
+    2645,
+    2668,
+    2691,
+    2707,
+    2723,
+    2739,
+    2765,
+    2794,
+    2810,
+    2829,
+    2849,
+    2872,
+    2896,
+    2915,
+    2935,
+    2959,
+    2987,
+    3016,
+    3048,
+    3074,
+    3093,
+    3120,
+    3143,
+    3163,
+    3183,
+    3208,
+    3226,
+    3244,
+    3267,
+    3292,
+    3315,
+    3332,
+    3352,
+    3384,
+    3405,
+    3426,
+    3449,
+    3468,
+    3495,
+    3511,
+    3531,
+    3552,
+    3578,
+    3593,
+    3616,
+    3640,
+    3664,
+    3686,
+    3701,
+    3721,
+    3739,
+    3759,
+    3776,
+    3798,
+    3822,
+    3850,
+    3871,
+    3889,
+    3911,
+    3927,
+    3945,
+    3966,
+    3990,
+    4012,
+    4039,
+    4061,
+    4083,
+    4100,
+    4123,
+    4142,
+    4167,
+    4193,
+    4222,
+    4251,
+    4278,
+    4305,
+    4332,
+    4357,
+    4380,
+    4406,
+    4435,
+    4461,
+    4490,
+    4516,
+    4543,
+    4564,
+    4586,
+    4602,
+    4617,
+    4636,
+    4662,
+    4687,
+    4710,
+    4732,
+    4755,
+    4774,
+    4790,
+    4813,
+    4834,
+    4853,
+    4873,
+    4891,
+    4919,
+    4940,
+    4963,
+    4982,
+    5007,
+    5027,
+    5051,
+    5075,
+    5104,
+    5132,
+    5160,
+    5193,
+    5217,
+    5243,
+    5269,
+    5290,
+    5308,
+    5329,
+    5349,
+    5370,
+    5383,
+    5397,
+    5417,
+    5443,
+    5470,
+    5495,
+    5517,
+    5545,
+    5571,
+    5599,
+    5622,
+    5648,
+    5673,
+    5698,
+    5723,
+    5746,
+    5770,
+    5796,
+    5823,
+    5847,
+    5866,
+    5887,
+    5908,
+    5930,
+    5952,
+    5980,
+    6003,
+    6028,
+    6053,
+    6076,
+    6099,
+    6119,
+    6136,
+    6154,
+    6170,
+    6191,
+    6209,
+    6233,
+    6251,
+    6270,
+    6286,
+    6303,
+    6322,
+    6338,
+    6357,
+    6373,
+    6392,
+    6412,
+    6432,
+    6452,
+    6473,
+    6495,
+    6514,
+    6533,
+    6553,
+    6574,
+    6600,
+    6626,
+    6656,
+    6685,
+    6713,
+    6736,
+    6759,
+    6786,
+    6812,
+    6840,
+    6865,
+    6889,
+    6920,
+    6947,
+    6968,
+    6991,
+    7010,
+    7038,
+    7058,
+    7084,
+    7105,
+    7127,
+    7149,
+    7168,
+    7193,
+    7214,
+    7238,
+    7260,
+    7283,
+    7306,
+    7333,
+    7359,
+    7389,
+    7419,
+    7448,
+    7470,
+    7494,
+    7525,
+    7553,
+    7583,
+    7614,
+    7642,
+    7668,
+    7697,
+    7728,
+    7752,
+    7777,
+    7804,
+    7831,
+    7852,
+    7877,
+    7908,
+    7930,
+    7959,
+    7989,
+    8007,
+    8032,
+    8063,
+    8088,
+    8118,
+    8149,
+    8180,
+    8210,
+    8238,
+    8269,
+    8300,
+    8331,
+    8348,
+    8367,
+    8399,
+    8430,
+    8456,
+    8486,
+    8510,
+    8533,
+    8564,
+    8586,
+    8613,
+    8643,
+    8673,
+    8688,
+    8703,
+    8718,
+    8733,
+    8748,
+    8763,
+    8778,
+    8793,
+    8808,
+    8824,
+    8840,
+    8856,
+    8872,
+    8888,
+    8904,
+    8920,
+    8935,
+    8953,
+    8974,
+    8991,
+    9009,
+    9026,
+    9045,
+    9063,
+    9084,
+    9106,
+    9124,
+    9144,
+    9165,
+    9182,
+    9203,
+    9224,
+    9242,
+    9261,
+    9280,
+    9303,
+    9324,
+    9343,
+    9361,
+    9378,
+    9397,
+    9415,
+    9434,
+    9453,
+    9473,
+    9489,
+    9506,
+    9528,
+    9550,
+    9562
+  };
+
+static GPG_ERR_INLINE int
+msgidxof (int code)
+{
+  return (0 ? 0
+  : ((code >= 0) && (code <= 213)) ? (code - 0)
+  : ((code >= 217) && (code <= 271)) ? (code - 3)
+  : ((code >= 273) && (code <= 281)) ? (code - 4)
+  : ((code >= 300) && (code <= 319)) ? (code - 22)
+  : ((code >= 666) && (code <= 666)) ? (code - 368)
+  : ((code >= 711) && (code <= 718)) ? (code - 412)
+  : ((code >= 721) && (code <= 729)) ? (code - 414)
+  : ((code >= 750) && (code <= 752)) ? (code - 434)
+  : ((code >= 754) && (code <= 782)) ? (code - 435)
+  : ((code >= 784) && (code <= 789)) ? (code - 436)
+  : ((code >= 800) && (code <= 804)) ? (code - 446)
+  : ((code >= 815) && (code <= 822)) ? (code - 456)
+  : ((code >= 832) && (code <= 839)) ? (code - 465)
+  : ((code >= 844) && (code <= 844)) ? (code - 469)
+  : ((code >= 848) && (code <= 848)) ? (code - 472)
+  : ((code >= 881) && (code <= 891)) ? (code - 504)
+  : ((code >= 1024) && (code <= 1039)) ? (code - 636)
+  : ((code >= 1500) && (code <= 1528)) ? (code - 1096)
+  : ((code >= 1600) && (code <= 1601)) ? (code - 1167)
+  : ((code >= 16381) && (code <= 16383)) ? (code - 15946)
+  : 16384 - 15946);
+}
diff --git a/src/err-codes.h b/src/err-codes.h
new file mode 100644
index 0000000..c4786c9
--- /dev/null
+++ b/src/err-codes.h
@@ -0,0 +1,936 @@
+/* Output of mkstrtable.awk.  DO NOT EDIT.  */
+
+/* err-codes.h - List of error codes and their description.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+/* The purpose of this complex string table is to produce
+   optimal code with a minimum of relocations.  */
+
+static const char msgstr[] = 
+  gettext_noop ("Success") "\0"
+  gettext_noop ("General error") "\0"
+  gettext_noop ("Unknown packet") "\0"
+  gettext_noop ("Unknown version in packet") "\0"
+  gettext_noop ("Invalid public key algorithm") "\0"
+  gettext_noop ("Invalid digest algorithm") "\0"
+  gettext_noop ("Bad public key") "\0"
+  gettext_noop ("Bad secret key") "\0"
+  gettext_noop ("Bad signature") "\0"
+  gettext_noop ("No public key") "\0"
+  gettext_noop ("Checksum error") "\0"
+  gettext_noop ("Bad passphrase") "\0"
+  gettext_noop ("Invalid cipher algorithm") "\0"
+  gettext_noop ("Cannot open keyring") "\0"
+  gettext_noop ("Invalid packet") "\0"
+  gettext_noop ("Invalid armor") "\0"
+  gettext_noop ("No user ID") "\0"
+  gettext_noop ("No secret key") "\0"
+  gettext_noop ("Wrong secret key used") "\0"
+  gettext_noop ("Bad session key") "\0"
+  gettext_noop ("Unknown compression algorithm") "\0"
+  gettext_noop ("Number is not prime") "\0"
+  gettext_noop ("Invalid encoding method") "\0"
+  gettext_noop ("Invalid encryption scheme") "\0"
+  gettext_noop ("Invalid signature scheme") "\0"
+  gettext_noop ("Invalid attribute") "\0"
+  gettext_noop ("No value") "\0"
+  gettext_noop ("Not found") "\0"
+  gettext_noop ("Value not found") "\0"
+  gettext_noop ("Syntax error") "\0"
+  gettext_noop ("Bad MPI value") "\0"
+  gettext_noop ("Invalid passphrase") "\0"
+  gettext_noop ("Invalid signature class") "\0"
+  gettext_noop ("Resources exhausted") "\0"
+  gettext_noop ("Invalid keyring") "\0"
+  gettext_noop ("Trust DB error") "\0"
+  gettext_noop ("Bad certificate") "\0"
+  gettext_noop ("Invalid user ID") "\0"
+  gettext_noop ("Unexpected error") "\0"
+  gettext_noop ("Time conflict") "\0"
+  gettext_noop ("Keyserver error") "\0"
+  gettext_noop ("Wrong public key algorithm") "\0"
+  gettext_noop ("Tribute to D. A.") "\0"
+  gettext_noop ("Weak encryption key") "\0"
+  gettext_noop ("Invalid key length") "\0"
+  gettext_noop ("Invalid argument") "\0"
+  gettext_noop ("Syntax error in URI") "\0"
+  gettext_noop ("Invalid URI") "\0"
+  gettext_noop ("Network error") "\0"
+  gettext_noop ("Unknown host") "\0"
+  gettext_noop ("Selftest failed") "\0"
+  gettext_noop ("Data not encrypted") "\0"
+  gettext_noop ("Data not processed") "\0"
+  gettext_noop ("Unusable public key") "\0"
+  gettext_noop ("Unusable secret key") "\0"
+  gettext_noop ("Invalid value") "\0"
+  gettext_noop ("Bad certificate chain") "\0"
+  gettext_noop ("Missing certificate") "\0"
+  gettext_noop ("No data") "\0"
+  gettext_noop ("Bug") "\0"
+  gettext_noop ("Not supported") "\0"
+  gettext_noop ("Invalid operation code") "\0"
+  gettext_noop ("Timeout") "\0"
+  gettext_noop ("Internal error") "\0"
+  gettext_noop ("EOF (gcrypt)") "\0"
+  gettext_noop ("Invalid object") "\0"
+  gettext_noop ("Provided object is too short") "\0"
+  gettext_noop ("Provided object is too large") "\0"
+  gettext_noop ("Missing item in object") "\0"
+  gettext_noop ("Not implemented") "\0"
+  gettext_noop ("Conflicting use") "\0"
+  gettext_noop ("Invalid cipher mode") "\0"
+  gettext_noop ("Invalid flag") "\0"
+  gettext_noop ("Invalid handle") "\0"
+  gettext_noop ("Result truncated") "\0"
+  gettext_noop ("Incomplete line") "\0"
+  gettext_noop ("Invalid response") "\0"
+  gettext_noop ("No agent running") "\0"
+  gettext_noop ("Agent error") "\0"
+  gettext_noop ("Invalid data") "\0"
+  gettext_noop ("Unspecific Assuan server fault") "\0"
+  gettext_noop ("General Assuan error") "\0"
+  gettext_noop ("Invalid session key") "\0"
+  gettext_noop ("Invalid S-expression") "\0"
+  gettext_noop ("Unsupported algorithm") "\0"
+  gettext_noop ("No pinentry") "\0"
+  gettext_noop ("pinentry error") "\0"
+  gettext_noop ("Bad PIN") "\0"
+  gettext_noop ("Invalid name") "\0"
+  gettext_noop ("Bad data") "\0"
+  gettext_noop ("Invalid parameter") "\0"
+  gettext_noop ("Wrong card") "\0"
+  gettext_noop ("No dirmngr") "\0"
+  gettext_noop ("dirmngr error") "\0"
+  gettext_noop ("Certificate revoked") "\0"
+  gettext_noop ("No CRL known") "\0"
+  gettext_noop ("CRL too old") "\0"
+  gettext_noop ("Line too long") "\0"
+  gettext_noop ("Not trusted") "\0"
+  gettext_noop ("Operation cancelled") "\0"
+  gettext_noop ("Bad CA certificate") "\0"
+  gettext_noop ("Certificate expired") "\0"
+  gettext_noop ("Certificate too young") "\0"
+  gettext_noop ("Unsupported certificate") "\0"
+  gettext_noop ("Unknown S-expression") "\0"
+  gettext_noop ("Unsupported protection") "\0"
+  gettext_noop ("Corrupted protection") "\0"
+  gettext_noop ("Ambiguous name") "\0"
+  gettext_noop ("Card error") "\0"
+  gettext_noop ("Card reset required") "\0"
+  gettext_noop ("Card removed") "\0"
+  gettext_noop ("Invalid card") "\0"
+  gettext_noop ("Card not present") "\0"
+  gettext_noop ("No PKCS15 application") "\0"
+  gettext_noop ("Not confirmed") "\0"
+  gettext_noop ("Configuration error") "\0"
+  gettext_noop ("No policy match") "\0"
+  gettext_noop ("Invalid index") "\0"
+  gettext_noop ("Invalid ID") "\0"
+  gettext_noop ("No SmartCard daemon") "\0"
+  gettext_noop ("SmartCard daemon error") "\0"
+  gettext_noop ("Unsupported protocol") "\0"
+  gettext_noop ("Bad PIN method") "\0"
+  gettext_noop ("Card not initialized") "\0"
+  gettext_noop ("Unsupported operation") "\0"
+  gettext_noop ("Wrong key usage") "\0"
+  gettext_noop ("Nothing found") "\0"
+  gettext_noop ("Wrong blob type") "\0"
+  gettext_noop ("Missing value") "\0"
+  gettext_noop ("Hardware problem") "\0"
+  gettext_noop ("PIN blocked") "\0"
+  gettext_noop ("Conditions of use not satisfied") "\0"
+  gettext_noop ("PINs are not synced") "\0"
+  gettext_noop ("Invalid CRL") "\0"
+  gettext_noop ("BER error") "\0"
+  gettext_noop ("Invalid BER") "\0"
+  gettext_noop ("Element not found") "\0"
+  gettext_noop ("Identifier not found") "\0"
+  gettext_noop ("Invalid tag") "\0"
+  gettext_noop ("Invalid length") "\0"
+  gettext_noop ("Invalid key info") "\0"
+  gettext_noop ("Unexpected tag") "\0"
+  gettext_noop ("Not DER encoded") "\0"
+  gettext_noop ("No CMS object") "\0"
+  gettext_noop ("Invalid CMS object") "\0"
+  gettext_noop ("Unknown CMS object") "\0"
+  gettext_noop ("Unsupported CMS object") "\0"
+  gettext_noop ("Unsupported encoding") "\0"
+  gettext_noop ("Unsupported CMS version") "\0"
+  gettext_noop ("Unknown algorithm") "\0"
+  gettext_noop ("Invalid crypto engine") "\0"
+  gettext_noop ("Public key not trusted") "\0"
+  gettext_noop ("Decryption failed") "\0"
+  gettext_noop ("Key expired") "\0"
+  gettext_noop ("Signature expired") "\0"
+  gettext_noop ("Encoding problem") "\0"
+  gettext_noop ("Invalid state") "\0"
+  gettext_noop ("Duplicated value") "\0"
+  gettext_noop ("Missing action") "\0"
+  gettext_noop ("ASN.1 module not found") "\0"
+  gettext_noop ("Invalid OID string") "\0"
+  gettext_noop ("Invalid time") "\0"
+  gettext_noop ("Invalid CRL object") "\0"
+  gettext_noop ("Unsupported CRL version") "\0"
+  gettext_noop ("Invalid certificate object") "\0"
+  gettext_noop ("Unknown name") "\0"
+  gettext_noop ("A locale function failed") "\0"
+  gettext_noop ("Not locked") "\0"
+  gettext_noop ("Protocol violation") "\0"
+  gettext_noop ("Invalid MAC") "\0"
+  gettext_noop ("Invalid request") "\0"
+  gettext_noop ("Unknown extension") "\0"
+  gettext_noop ("Unknown critical extension") "\0"
+  gettext_noop ("Locked") "\0"
+  gettext_noop ("Unknown option") "\0"
+  gettext_noop ("Unknown command") "\0"
+  gettext_noop ("Not operational") "\0"
+  gettext_noop ("No passphrase given") "\0"
+  gettext_noop ("No PIN given") "\0"
+  gettext_noop ("Not enabled") "\0"
+  gettext_noop ("No crypto engine") "\0"
+  gettext_noop ("Missing key") "\0"
+  gettext_noop ("Too many objects") "\0"
+  gettext_noop ("Limit reached") "\0"
+  gettext_noop ("Not initialized") "\0"
+  gettext_noop ("Missing issuer certificate") "\0"
+  gettext_noop ("No keyserver available") "\0"
+  gettext_noop ("Invalid elliptic curve") "\0"
+  gettext_noop ("Unknown elliptic curve") "\0"
+  gettext_noop ("Duplicated key") "\0"
+  gettext_noop ("Ambiguous result") "\0"
+  gettext_noop ("No crypto context") "\0"
+  gettext_noop ("Wrong crypto context") "\0"
+  gettext_noop ("Bad crypto context") "\0"
+  gettext_noop ("Conflict in the crypto context") "\0"
+  gettext_noop ("Broken public key") "\0"
+  gettext_noop ("Broken secret key") "\0"
+  gettext_noop ("Invalid MAC algorithm") "\0"
+  gettext_noop ("Operation fully cancelled") "\0"
+  gettext_noop ("Operation not yet finished") "\0"
+  gettext_noop ("Buffer too short") "\0"
+  gettext_noop ("Invalid length specifier in S-expression") "\0"
+  gettext_noop ("String too long in S-expression") "\0"
+  gettext_noop ("Unmatched parentheses in S-expression") "\0"
+  gettext_noop ("S-expression not canonical") "\0"
+  gettext_noop ("Bad character in S-expression") "\0"
+  gettext_noop ("Bad quotation in S-expression") "\0"
+  gettext_noop ("Zero prefix in S-expression") "\0"
+  gettext_noop ("Nested display hints in S-expression") "\0"
+  gettext_noop ("Unmatched display hints") "\0"
+  gettext_noop ("Unexpected reserved punctuation in S-expression") "\0"
+  gettext_noop ("Bad hexadecimal character in S-expression") "\0"
+  gettext_noop ("Odd hexadecimal numbers in S-expression") "\0"
+  gettext_noop ("Bad octal character in S-expression") "\0"
+  gettext_noop ("All subkeys are expired or revoked") "\0"
+  gettext_noop ("Database is corrupted") "\0"
+  gettext_noop ("Server indicated a failure") "\0"
+  gettext_noop ("No name") "\0"
+  gettext_noop ("No key") "\0"
+  gettext_noop ("Legacy key") "\0"
+  gettext_noop ("Request too short") "\0"
+  gettext_noop ("Request too long") "\0"
+  gettext_noop ("Object is in termination state") "\0"
+  gettext_noop ("No certificate chain") "\0"
+  gettext_noop ("Certificate is too large") "\0"
+  gettext_noop ("Invalid record") "\0"
+  gettext_noop ("The MAC does not verify") "\0"
+  gettext_noop ("Unexpected message") "\0"
+  gettext_noop ("Compression or decompression failed") "\0"
+  gettext_noop ("A counter would wrap") "\0"
+  gettext_noop ("Fatal alert message received") "\0"
+  gettext_noop ("No cipher algorithm") "\0"
+  gettext_noop ("Missing client certificate") "\0"
+  gettext_noop ("Close notification received") "\0"
+  gettext_noop ("Ticket expired") "\0"
+  gettext_noop ("Bad ticket") "\0"
+  gettext_noop ("Unknown identity") "\0"
+  gettext_noop ("Bad certificate message in handshake") "\0"
+  gettext_noop ("Bad certificate request message in handshake") "\0"
+  gettext_noop ("Bad certificate verify message in handshake") "\0"
+  gettext_noop ("Bad change cipher message in handshake") "\0"
+  gettext_noop ("Bad client hello message in handshake") "\0"
+  gettext_noop ("Bad server hello message in handshake") "\0"
+  gettext_noop ("Bad server hello done message in handshake") "\0"
+  gettext_noop ("Bad finished message in handshake") "\0"
+  gettext_noop ("Bad server key exchange message in handshake") "\0"
+  gettext_noop ("Bad client key exchange message in handshake") "\0"
+  gettext_noop ("Bogus string") "\0"
+  gettext_noop ("Forbidden") "\0"
+  gettext_noop ("Key disabled") "\0"
+  gettext_noop ("Not possible with a card based key") "\0"
+  gettext_noop ("Invalid lock object") "\0"
+  gettext_noop ("True") "\0"
+  gettext_noop ("False") "\0"
+  gettext_noop ("General IPC error") "\0"
+  gettext_noop ("IPC accept call failed") "\0"
+  gettext_noop ("IPC connect call failed") "\0"
+  gettext_noop ("Invalid IPC response") "\0"
+  gettext_noop ("Invalid value passed to IPC") "\0"
+  gettext_noop ("Incomplete line passed to IPC") "\0"
+  gettext_noop ("Line passed to IPC too long") "\0"
+  gettext_noop ("Nested IPC commands") "\0"
+  gettext_noop ("No data callback in IPC") "\0"
+  gettext_noop ("No inquire callback in IPC") "\0"
+  gettext_noop ("Not an IPC server") "\0"
+  gettext_noop ("Not an IPC client") "\0"
+  gettext_noop ("Problem starting IPC server") "\0"
+  gettext_noop ("IPC read error") "\0"
+  gettext_noop ("IPC write error") "\0"
+  gettext_noop ("Too much data for IPC layer") "\0"
+  gettext_noop ("Unexpected IPC command") "\0"
+  gettext_noop ("Unknown IPC command") "\0"
+  gettext_noop ("IPC syntax error") "\0"
+  gettext_noop ("IPC call has been cancelled") "\0"
+  gettext_noop ("No input source for IPC") "\0"
+  gettext_noop ("No output source for IPC") "\0"
+  gettext_noop ("IPC parameter error") "\0"
+  gettext_noop ("Unknown IPC inquire") "\0"
+  gettext_noop ("Crypto engine too old") "\0"
+  gettext_noop ("Screen or window too small") "\0"
+  gettext_noop ("Screen or window too large") "\0"
+  gettext_noop ("Required environment variable not set") "\0"
+  gettext_noop ("User ID already exists") "\0"
+  gettext_noop ("Name already exists") "\0"
+  gettext_noop ("Duplicated name") "\0"
+  gettext_noop ("Object is too young") "\0"
+  gettext_noop ("Object is too old") "\0"
+  gettext_noop ("Unknown flag") "\0"
+  gettext_noop ("Invalid execution order") "\0"
+  gettext_noop ("Already fetched") "\0"
+  gettext_noop ("Try again later") "\0"
+  gettext_noop ("Wrong name") "\0"
+  gettext_noop ("Not authenticated") "\0"
+  gettext_noop ("Bad authentication") "\0"
+  gettext_noop ("No Keybox daemon running") "\0"
+  gettext_noop ("Keybox daemon error") "\0"
+  gettext_noop ("Service is not running") "\0"
+  gettext_noop ("Service error") "\0"
+  gettext_noop ("System bug detected") "\0"
+  gettext_noop ("Unknown DNS error") "\0"
+  gettext_noop ("Invalid DNS section") "\0"
+  gettext_noop ("Invalid textual address form") "\0"
+  gettext_noop ("Missing DNS query packet") "\0"
+  gettext_noop ("Missing DNS answer packet") "\0"
+  gettext_noop ("Connection closed in DNS") "\0"
+  gettext_noop ("Verification failed in DNS") "\0"
+  gettext_noop ("DNS Timeout") "\0"
+  gettext_noop ("General LDAP error") "\0"
+  gettext_noop ("General LDAP attribute error") "\0"
+  gettext_noop ("General LDAP name error") "\0"
+  gettext_noop ("General LDAP security error") "\0"
+  gettext_noop ("General LDAP service error") "\0"
+  gettext_noop ("General LDAP update error") "\0"
+  gettext_noop ("Experimental LDAP error code") "\0"
+  gettext_noop ("Private LDAP error code") "\0"
+  gettext_noop ("Other general LDAP error") "\0"
+  gettext_noop ("LDAP connecting failed (X)") "\0"
+  gettext_noop ("LDAP referral limit exceeded") "\0"
+  gettext_noop ("LDAP client loop") "\0"
+  gettext_noop ("No LDAP results returned") "\0"
+  gettext_noop ("LDAP control not found") "\0"
+  gettext_noop ("Not supported by LDAP") "\0"
+  gettext_noop ("LDAP connect error") "\0"
+  gettext_noop ("Out of memory in LDAP") "\0"
+  gettext_noop ("Bad parameter to an LDAP routine") "\0"
+  gettext_noop ("User cancelled LDAP operation") "\0"
+  gettext_noop ("Bad LDAP search filter") "\0"
+  gettext_noop ("Unknown LDAP authentication method") "\0"
+  gettext_noop ("Timeout in LDAP") "\0"
+  gettext_noop ("LDAP decoding error") "\0"
+  gettext_noop ("LDAP encoding error") "\0"
+  gettext_noop ("LDAP local error") "\0"
+  gettext_noop ("Cannot contact LDAP server") "\0"
+  gettext_noop ("LDAP success") "\0"
+  gettext_noop ("LDAP operations error") "\0"
+  gettext_noop ("LDAP protocol error") "\0"
+  gettext_noop ("Time limit exceeded in LDAP") "\0"
+  gettext_noop ("Size limit exceeded in LDAP") "\0"
+  gettext_noop ("LDAP compare false") "\0"
+  gettext_noop ("LDAP compare true") "\0"
+  gettext_noop ("LDAP authentication method not supported") "\0"
+  gettext_noop ("Strong(er) LDAP authentication required") "\0"
+  gettext_noop ("Partial LDAP results+referral received") "\0"
+  gettext_noop ("LDAP referral") "\0"
+  gettext_noop ("Administrative LDAP limit exceeded") "\0"
+  gettext_noop ("Critical LDAP extension is unavailable") "\0"
+  gettext_noop ("Confidentiality required by LDAP") "\0"
+  gettext_noop ("LDAP SASL bind in progress") "\0"
+  gettext_noop ("No such LDAP attribute") "\0"
+  gettext_noop ("Undefined LDAP attribute type") "\0"
+  gettext_noop ("Inappropriate matching in LDAP") "\0"
+  gettext_noop ("Constraint violation in LDAP") "\0"
+  gettext_noop ("LDAP type or value exists") "\0"
+  gettext_noop ("Invalid syntax in LDAP") "\0"
+  gettext_noop ("No such LDAP object") "\0"
+  gettext_noop ("LDAP alias problem") "\0"
+  gettext_noop ("Invalid DN syntax in LDAP") "\0"
+  gettext_noop ("LDAP entry is a leaf") "\0"
+  gettext_noop ("LDAP alias dereferencing problem") "\0"
+  gettext_noop ("LDAP proxy authorization failure (X)") "\0"
+  gettext_noop ("Inappropriate LDAP authentication") "\0"
+  gettext_noop ("Invalid LDAP credentials") "\0"
+  gettext_noop ("Insufficient access for LDAP") "\0"
+  gettext_noop ("LDAP server is busy") "\0"
+  gettext_noop ("LDAP server is unavailable") "\0"
+  gettext_noop ("LDAP server is unwilling to perform") "\0"
+  gettext_noop ("Loop detected by LDAP") "\0"
+  gettext_noop ("LDAP naming violation") "\0"
+  gettext_noop ("LDAP object class violation") "\0"
+  gettext_noop ("LDAP operation not allowed on non-leaf") "\0"
+  gettext_noop ("LDAP operation not allowed on RDN") "\0"
+  gettext_noop ("Already exists (LDAP)") "\0"
+  gettext_noop ("Cannot modify LDAP object class") "\0"
+  gettext_noop ("LDAP results too large") "\0"
+  gettext_noop ("LDAP operation affects multiple DSAs") "\0"
+  gettext_noop ("Virtual LDAP list view error") "\0"
+  gettext_noop ("Other LDAP error") "\0"
+  gettext_noop ("Resources exhausted in LCUP") "\0"
+  gettext_noop ("Security violation in LCUP") "\0"
+  gettext_noop ("Invalid data in LCUP") "\0"
+  gettext_noop ("Unsupported scheme in LCUP") "\0"
+  gettext_noop ("Reload required in LCUP") "\0"
+  gettext_noop ("LDAP cancelled") "\0"
+  gettext_noop ("No LDAP operation to cancel") "\0"
+  gettext_noop ("Too late to cancel LDAP") "\0"
+  gettext_noop ("Cannot cancel LDAP") "\0"
+  gettext_noop ("LDAP assertion failed") "\0"
+  gettext_noop ("Proxied authorization denied by LDAP") "\0"
+  gettext_noop ("User defined error code 1") "\0"
+  gettext_noop ("User defined error code 2") "\0"
+  gettext_noop ("User defined error code 3") "\0"
+  gettext_noop ("User defined error code 4") "\0"
+  gettext_noop ("User defined error code 5") "\0"
+  gettext_noop ("User defined error code 6") "\0"
+  gettext_noop ("User defined error code 7") "\0"
+  gettext_noop ("User defined error code 8") "\0"
+  gettext_noop ("User defined error code 9") "\0"
+  gettext_noop ("User defined error code 10") "\0"
+  gettext_noop ("User defined error code 11") "\0"
+  gettext_noop ("User defined error code 12") "\0"
+  gettext_noop ("User defined error code 13") "\0"
+  gettext_noop ("User defined error code 14") "\0"
+  gettext_noop ("User defined error code 15") "\0"
+  gettext_noop ("User defined error code 16") "\0"
+  gettext_noop ("SQL success") "\0"
+  gettext_noop ("SQL error") "\0"
+  gettext_noop ("Internal logic error in SQL library") "\0"
+  gettext_noop ("Access permission denied (SQL)") "\0"
+  gettext_noop ("SQL abort was requested") "\0"
+  gettext_noop ("SQL database file is locked") "\0"
+  gettext_noop ("An SQL table in the database is locked") "\0"
+  gettext_noop ("SQL library ran out of core") "\0"
+  gettext_noop ("Attempt to write a readonly SQL database") "\0"
+  gettext_noop ("SQL operation terminated by interrupt") "\0"
+  gettext_noop ("I/O error during SQL operation") "\0"
+  gettext_noop ("SQL database disk image is malformed") "\0"
+  gettext_noop ("Unknown opcode in SQL file control") "\0"
+  gettext_noop ("Insertion failed because SQL database is full") "\0"
+  gettext_noop ("Unable to open the SQL database file") "\0"
+  gettext_noop ("SQL database lock protocol error") "\0"
+  gettext_noop ("(internal SQL code: empty)") "\0"
+  gettext_noop ("SQL database schema changed") "\0"
+  gettext_noop ("String or blob exceeds size limit (SQL)") "\0"
+  gettext_noop ("SQL abort due to constraint violation") "\0"
+  gettext_noop ("Data type mismatch (SQL)") "\0"
+  gettext_noop ("SQL library used incorrectly") "\0"
+  gettext_noop ("SQL library uses unsupported OS features") "\0"
+  gettext_noop ("Authorization denied (SQL)") "\0"
+  gettext_noop ("(unused SQL code: format)") "\0"
+  gettext_noop ("SQL bind parameter out of range") "\0"
+  gettext_noop ("File opened that is not an SQL database file") "\0"
+  gettext_noop ("Notifications from SQL logger") "\0"
+  gettext_noop ("Warnings from SQL logger") "\0"
+  gettext_noop ("SQL has another row ready") "\0"
+  gettext_noop ("SQL has finished executing") "\0"
+  gettext_noop ("System error w/o errno") "\0"
+  gettext_noop ("Unknown system error") "\0"
+  gettext_noop ("End of file") "\0"
+  gettext_noop ("Unknown error code");
+
+static const int msgidx[] =
+  {
+    0,
+    8,
+    22,
+    37,
+    63,
+    92,
+    117,
+    132,
+    147,
+    161,
+    175,
+    190,
+    205,
+    230,
+    250,
+    265,
+    279,
+    290,
+    304,
+    326,
+    342,
+    372,
+    392,
+    416,
+    442,
+    467,
+    485,
+    494,
+    504,
+    520,
+    533,
+    547,
+    566,
+    590,
+    610,
+    626,
+    641,
+    657,
+    673,
+    690,
+    704,
+    720,
+    747,
+    764,
+    784,
+    803,
+    820,
+    840,
+    852,
+    866,
+    879,
+    895,
+    914,
+    933,
+    953,
+    973,
+    987,
+    1009,
+    1029,
+    1037,
+    1041,
+    1055,
+    1078,
+    1086,
+    1101,
+    1114,
+    1129,
+    1158,
+    1187,
+    1210,
+    1226,
+    1242,
+    1262,
+    1275,
+    1290,
+    1307,
+    1323,
+    1340,
+    1357,
+    1369,
+    1382,
+    1413,
+    1434,
+    1454,
+    1475,
+    1497,
+    1509,
+    1524,
+    1532,
+    1545,
+    1554,
+    1572,
+    1583,
+    1594,
+    1608,
+    1628,
+    1641,
+    1653,
+    1667,
+    1679,
+    1699,
+    1718,
+    1738,
+    1760,
+    1784,
+    1805,
+    1828,
+    1849,
+    1864,
+    1875,
+    1895,
+    1908,
+    1921,
+    1938,
+    1960,
+    1974,
+    1994,
+    2010,
+    2024,
+    2035,
+    2055,
+    2078,
+    2099,
+    2114,
+    2135,
+    2157,
+    2173,
+    2187,
+    2203,
+    2217,
+    2234,
+    2246,
+    2278,
+    2298,
+    2310,
+    2320,
+    2332,
+    2350,
+    2371,
+    2383,
+    2398,
+    2415,
+    2430,
+    2446,
+    2460,
+    2479,
+    2498,
+    2521,
+    2542,
+    2566,
+    2584,
+    2606,
+    2629,
+    2647,
+    2659,
+    2677,
+    2694,
+    2708,
+    2725,
+    2740,
+    2763,
+    2782,
+    2795,
+    2814,
+    2838,
+    2865,
+    2878,
+    2903,
+    2914,
+    2933,
+    2945,
+    2961,
+    2979,
+    3006,
+    3013,
+    3028,
+    3044,
+    3060,
+    3080,
+    3093,
+    3105,
+    3122,
+    3134,
+    3151,
+    3165,
+    3181,
+    3208,
+    3231,
+    3254,
+    3277,
+    3292,
+    3309,
+    3327,
+    3348,
+    3367,
+    3398,
+    3416,
+    3434,
+    3456,
+    3482,
+    3509,
+    3526,
+    3567,
+    3599,
+    3637,
+    3664,
+    3694,
+    3724,
+    3752,
+    3789,
+    3813,
+    3861,
+    3903,
+    3943,
+    3979,
+    4014,
+    4036,
+    4063,
+    4071,
+    4078,
+    4089,
+    4107,
+    4124,
+    4155,
+    4176,
+    4201,
+    4216,
+    4240,
+    4259,
+    4295,
+    4316,
+    4345,
+    4365,
+    4392,
+    4420,
+    4435,
+    4446,
+    4463,
+    4500,
+    4545,
+    4589,
+    4628,
+    4666,
+    4704,
+    4747,
+    4781,
+    4826,
+    4871,
+    4884,
+    4894,
+    4907,
+    4942,
+    4962,
+    4967,
+    4973,
+    4991,
+    5014,
+    5038,
+    5059,
+    5087,
+    5117,
+    5145,
+    5165,
+    5189,
+    5216,
+    5234,
+    5252,
+    5280,
+    5295,
+    5311,
+    5339,
+    5362,
+    5382,
+    5399,
+    5427,
+    5451,
+    5476,
+    5496,
+    5516,
+    5538,
+    5565,
+    5592,
+    5630,
+    5653,
+    5673,
+    5689,
+    5709,
+    5727,
+    5740,
+    5764,
+    5780,
+    5796,
+    5807,
+    5825,
+    5844,
+    5869,
+    5889,
+    5912,
+    5926,
+    5946,
+    5964,
+    5984,
+    6013,
+    6038,
+    6064,
+    6089,
+    6116,
+    6128,
+    6147,
+    6176,
+    6200,
+    6228,
+    6255,
+    6281,
+    6310,
+    6334,
+    6359,
+    6386,
+    6415,
+    6432,
+    6457,
+    6480,
+    6502,
+    6521,
+    6543,
+    6576,
+    6606,
+    6629,
+    6664,
+    6680,
+    6700,
+    6720,
+    6737,
+    6764,
+    6777,
+    6799,
+    6819,
+    6847,
+    6875,
+    6894,
+    6912,
+    6953,
+    6993,
+    7032,
+    7046,
+    7081,
+    7120,
+    7153,
+    7180,
+    7203,
+    7233,
+    7264,
+    7293,
+    7319,
+    7342,
+    7362,
+    7381,
+    7407,
+    7428,
+    7461,
+    7498,
+    7532,
+    7557,
+    7586,
+    7606,
+    7633,
+    7669,
+    7691,
+    7713,
+    7741,
+    7780,
+    7814,
+    7836,
+    7868,
+    7891,
+    7928,
+    7957,
+    7974,
+    8002,
+    8029,
+    8050,
+    8077,
+    8101,
+    8116,
+    8144,
+    8168,
+    8187,
+    8209,
+    8246,
+    8272,
+    8298,
+    8324,
+    8350,
+    8376,
+    8402,
+    8428,
+    8454,
+    8480,
+    8507,
+    8534,
+    8561,
+    8588,
+    8615,
+    8642,
+    8669,
+    8681,
+    8691,
+    8727,
+    8758,
+    8782,
+    8810,
+    8849,
+    8877,
+    8918,
+    8956,
+    8987,
+    9024,
+    9059,
+    9105,
+    9142,
+    9175,
+    9202,
+    9230,
+    9270,
+    9308,
+    9333,
+    9362,
+    9403,
+    9430,
+    9456,
+    9488,
+    9533,
+    9563,
+    9588,
+    9614,
+    9641,
+    9664,
+    9685,
+    9697
+  };
+
+static GPG_ERR_INLINE int
+msgidxof (int code)
+{
+  return (0 ? 0
+  : ((code >= 0) && (code <= 213)) ? (code - 0)
+  : ((code >= 217) && (code <= 271)) ? (code - 3)
+  : ((code >= 273) && (code <= 281)) ? (code - 4)
+  : ((code >= 300) && (code <= 319)) ? (code - 22)
+  : ((code >= 666) && (code <= 666)) ? (code - 368)
+  : ((code >= 711) && (code <= 718)) ? (code - 412)
+  : ((code >= 721) && (code <= 729)) ? (code - 414)
+  : ((code >= 750) && (code <= 752)) ? (code - 434)
+  : ((code >= 754) && (code <= 782)) ? (code - 435)
+  : ((code >= 784) && (code <= 789)) ? (code - 436)
+  : ((code >= 800) && (code <= 804)) ? (code - 446)
+  : ((code >= 815) && (code <= 822)) ? (code - 456)
+  : ((code >= 832) && (code <= 839)) ? (code - 465)
+  : ((code >= 844) && (code <= 844)) ? (code - 469)
+  : ((code >= 848) && (code <= 848)) ? (code - 472)
+  : ((code >= 881) && (code <= 891)) ? (code - 504)
+  : ((code >= 1024) && (code <= 1039)) ? (code - 636)
+  : ((code >= 1500) && (code <= 1528)) ? (code - 1096)
+  : ((code >= 1600) && (code <= 1601)) ? (code - 1167)
+  : ((code >= 16381) && (code <= 16383)) ? (code - 15946)
+  : 16384 - 15946);
+}
diff --git a/src/err-sources-sym.h b/src/err-sources-sym.h
new file mode 100644
index 0000000..98388e9
--- /dev/null
+++ b/src/err-sources-sym.h
@@ -0,0 +1,87 @@
+/* Output of mkstrtable.awk.  DO NOT EDIT.  */
+
+/* err-sources.h - List of error sources and their description.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+/* The purpose of this complex string table is to produce
+   optimal code with a minimum of relocations.  */
+
+static const char msgstr[] = 
+  "GPG_ERR_SOURCE_UNKNOWN" "\0"
+  "GPG_ERR_SOURCE_GCRYPT" "\0"
+  "GPG_ERR_SOURCE_GPG" "\0"
+  "GPG_ERR_SOURCE_GPGSM" "\0"
+  "GPG_ERR_SOURCE_GPGAGENT" "\0"
+  "GPG_ERR_SOURCE_PINENTRY" "\0"
+  "GPG_ERR_SOURCE_SCD" "\0"
+  "GPG_ERR_SOURCE_GPGME" "\0"
+  "GPG_ERR_SOURCE_KEYBOX" "\0"
+  "GPG_ERR_SOURCE_KSBA" "\0"
+  "GPG_ERR_SOURCE_DIRMNGR" "\0"
+  "GPG_ERR_SOURCE_GSTI" "\0"
+  "GPG_ERR_SOURCE_GPA" "\0"
+  "GPG_ERR_SOURCE_KLEO" "\0"
+  "GPG_ERR_SOURCE_G13" "\0"
+  "GPG_ERR_SOURCE_ASSUAN" "\0"
+  "GPG_ERR_SOURCE_TLS" "\0"
+  "GPG_ERR_SOURCE_ANY" "\0"
+  "GPG_ERR_SOURCE_USER_1" "\0"
+  "GPG_ERR_SOURCE_USER_2" "\0"
+  "GPG_ERR_SOURCE_USER_3" "\0"
+  "GPG_ERR_SOURCE_USER_4" "\0"
+  "GPG_ERR_SOURCE_DIM";
+
+static const int msgidx[] =
+  {
+    0,
+    23,
+    45,
+    64,
+    85,
+    109,
+    133,
+    152,
+    173,
+    195,
+    215,
+    238,
+    258,
+    277,
+    297,
+    316,
+    338,
+    357,
+    376,
+    398,
+    420,
+    442,
+    464
+  };
+
+static GPG_ERR_INLINE int
+msgidxof (int code)
+{
+  return (0 ? 0
+  : ((code >= 0) && (code <= 15)) ? (code - 0)
+  : ((code >= 17) && (code <= 17)) ? (code - 1)
+  : ((code >= 31) && (code <= 35)) ? (code - 14)
+  : 36 - 14);
+}
diff --git a/src/err-sources.h b/src/err-sources.h
new file mode 100644
index 0000000..5160fd7
--- /dev/null
+++ b/src/err-sources.h
@@ -0,0 +1,87 @@
+/* Output of mkstrtable.awk.  DO NOT EDIT.  */
+
+/* err-sources.h - List of error sources and their description.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+/* The purpose of this complex string table is to produce
+   optimal code with a minimum of relocations.  */
+
+static const char msgstr[] = 
+  gettext_noop ("Unspecified source") "\0"
+  gettext_noop ("gcrypt") "\0"
+  gettext_noop ("GnuPG") "\0"
+  gettext_noop ("GpgSM") "\0"
+  gettext_noop ("GPG Agent") "\0"
+  gettext_noop ("Pinentry") "\0"
+  gettext_noop ("SCD") "\0"
+  gettext_noop ("GPGME") "\0"
+  gettext_noop ("Keybox") "\0"
+  gettext_noop ("KSBA") "\0"
+  gettext_noop ("Dirmngr") "\0"
+  gettext_noop ("GSTI") "\0"
+  gettext_noop ("GPA") "\0"
+  gettext_noop ("Kleopatra") "\0"
+  gettext_noop ("G13") "\0"
+  gettext_noop ("Assuan") "\0"
+  gettext_noop ("TLS") "\0"
+  gettext_noop ("Any source") "\0"
+  gettext_noop ("User defined source 1") "\0"
+  gettext_noop ("User defined source 2") "\0"
+  gettext_noop ("User defined source 3") "\0"
+  gettext_noop ("User defined source 4") "\0"
+  gettext_noop ("Unknown source");
+
+static const int msgidx[] =
+  {
+    0,
+    19,
+    26,
+    32,
+    38,
+    48,
+    57,
+    61,
+    67,
+    74,
+    79,
+    87,
+    92,
+    96,
+    106,
+    110,
+    117,
+    121,
+    132,
+    154,
+    176,
+    198,
+    220
+  };
+
+static GPG_ERR_INLINE int
+msgidxof (int code)
+{
+  return (0 ? 0
+  : ((code >= 0) && (code <= 15)) ? (code - 0)
+  : ((code >= 17) && (code <= 17)) ? (code - 1)
+  : ((code >= 31) && (code <= 35)) ? (code - 14)
+  : 36 - 14);
+}
diff --git a/src/errnos-sym.h b/src/errnos-sym.h
new file mode 100644
index 0000000..42804ae
--- /dev/null
+++ b/src/errnos-sym.h
@@ -0,0 +1,323 @@
+/* Output of mkstrtable.awk.  DO NOT EDIT.  */
+
+/* errnos.in - List of system error values.
+   Copyright (C) 2003, 2004 g10 Code GmbH
+
+   This file is part of libgpg-error.
+
+   libgpg-error is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public License
+   as published by the Free Software Foundation; either version 2.1 of
+   the License, or (at your option) any later version.
+
+   libgpg-error is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with libgpg-error; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+   02111-1307, USA.  */
+
+
+
+/* The purpose of this complex string table is to produce
+   optimal code with a minimum of relocations.  */
+
+static const char errnos_msgstr[] = 
+  "GPG_ERR_E2BIG" "\0"
+  "GPG_ERR_EACCES" "\0"
+  "GPG_ERR_EADDRINUSE" "\0"
+  "GPG_ERR_EADDRNOTAVAIL" "\0"
+  "GPG_ERR_EADV" "\0"
+  "GPG_ERR_EAFNOSUPPORT" "\0"
+  "GPG_ERR_EAGAIN" "\0"
+  "GPG_ERR_EALREADY" "\0"
+  "GPG_ERR_EAUTH" "\0"
+  "GPG_ERR_EBACKGROUND" "\0"
+  "GPG_ERR_EBADE" "\0"
+  "GPG_ERR_EBADF" "\0"
+  "GPG_ERR_EBADFD" "\0"
+  "GPG_ERR_EBADMSG" "\0"
+  "GPG_ERR_EBADR" "\0"
+  "GPG_ERR_EBADRPC" "\0"
+  "GPG_ERR_EBADRQC" "\0"
+  "GPG_ERR_EBADSLT" "\0"
+  "GPG_ERR_EBFONT" "\0"
+  "GPG_ERR_EBUSY" "\0"
+  "GPG_ERR_ECANCELED" "\0"
+  "GPG_ERR_ECHILD" "\0"
+  "GPG_ERR_ECHRNG" "\0"
+  "GPG_ERR_ECOMM" "\0"
+  "GPG_ERR_ECONNABORTED" "\0"
+  "GPG_ERR_ECONNREFUSED" "\0"
+  "GPG_ERR_ECONNRESET" "\0"
+  "GPG_ERR_ED" "\0"
+  "GPG_ERR_EDEADLK" "\0"
+  "GPG_ERR_EDEADLOCK" "\0"
+  "GPG_ERR_EDESTADDRREQ" "\0"
+  "GPG_ERR_EDIED" "\0"
+  "GPG_ERR_EDOM" "\0"
+  "GPG_ERR_EDOTDOT" "\0"
+  "GPG_ERR_EDQUOT" "\0"
+  "GPG_ERR_EEXIST" "\0"
+  "GPG_ERR_EFAULT" "\0"
+  "GPG_ERR_EFBIG" "\0"
+  "GPG_ERR_EFTYPE" "\0"
+  "GPG_ERR_EGRATUITOUS" "\0"
+  "GPG_ERR_EGREGIOUS" "\0"
+  "GPG_ERR_EHOSTDOWN" "\0"
+  "GPG_ERR_EHOSTUNREACH" "\0"
+  "GPG_ERR_EIDRM" "\0"
+  "GPG_ERR_EIEIO" "\0"
+  "GPG_ERR_EILSEQ" "\0"
+  "GPG_ERR_EINPROGRESS" "\0"
+  "GPG_ERR_EINTR" "\0"
+  "GPG_ERR_EINVAL" "\0"
+  "GPG_ERR_EIO" "\0"
+  "GPG_ERR_EISCONN" "\0"
+  "GPG_ERR_EISDIR" "\0"
+  "GPG_ERR_EISNAM" "\0"
+  "GPG_ERR_EL2HLT" "\0"
+  "GPG_ERR_EL2NSYNC" "\0"
+  "GPG_ERR_EL3HLT" "\0"
+  "GPG_ERR_EL3RST" "\0"
+  "GPG_ERR_ELIBACC" "\0"
+  "GPG_ERR_ELIBBAD" "\0"
+  "GPG_ERR_ELIBEXEC" "\0"
+  "GPG_ERR_ELIBMAX" "\0"
+  "GPG_ERR_ELIBSCN" "\0"
+  "GPG_ERR_ELNRNG" "\0"
+  "GPG_ERR_ELOOP" "\0"
+  "GPG_ERR_EMEDIUMTYPE" "\0"
+  "GPG_ERR_EMFILE" "\0"
+  "GPG_ERR_EMLINK" "\0"
+  "GPG_ERR_EMSGSIZE" "\0"
+  "GPG_ERR_EMULTIHOP" "\0"
+  "GPG_ERR_ENAMETOOLONG" "\0"
+  "GPG_ERR_ENAVAIL" "\0"
+  "GPG_ERR_ENEEDAUTH" "\0"
+  "GPG_ERR_ENETDOWN" "\0"
+  "GPG_ERR_ENETRESET" "\0"
+  "GPG_ERR_ENETUNREACH" "\0"
+  "GPG_ERR_ENFILE" "\0"
+  "GPG_ERR_ENOANO" "\0"
+  "GPG_ERR_ENOBUFS" "\0"
+  "GPG_ERR_ENOCSI" "\0"
+  "GPG_ERR_ENODATA" "\0"
+  "GPG_ERR_ENODEV" "\0"
+  "GPG_ERR_ENOENT" "\0"
+  "GPG_ERR_ENOEXEC" "\0"
+  "GPG_ERR_ENOLCK" "\0"
+  "GPG_ERR_ENOLINK" "\0"
+  "GPG_ERR_ENOMEDIUM" "\0"
+  "GPG_ERR_ENOMEM" "\0"
+  "GPG_ERR_ENOMSG" "\0"
+  "GPG_ERR_ENONET" "\0"
+  "GPG_ERR_ENOPKG" "\0"
+  "GPG_ERR_ENOPROTOOPT" "\0"
+  "GPG_ERR_ENOSPC" "\0"
+  "GPG_ERR_ENOSR" "\0"
+  "GPG_ERR_ENOSTR" "\0"
+  "GPG_ERR_ENOSYS" "\0"
+  "GPG_ERR_ENOTBLK" "\0"
+  "GPG_ERR_ENOTCONN" "\0"
+  "GPG_ERR_ENOTDIR" "\0"
+  "GPG_ERR_ENOTEMPTY" "\0"
+  "GPG_ERR_ENOTNAM" "\0"
+  "GPG_ERR_ENOTSOCK" "\0"
+  "GPG_ERR_ENOTSUP" "\0"
+  "GPG_ERR_ENOTTY" "\0"
+  "GPG_ERR_ENOTUNIQ" "\0"
+  "GPG_ERR_ENXIO" "\0"
+  "GPG_ERR_EOPNOTSUPP" "\0"
+  "GPG_ERR_EOVERFLOW" "\0"
+  "GPG_ERR_EPERM" "\0"
+  "GPG_ERR_EPFNOSUPPORT" "\0"
+  "GPG_ERR_EPIPE" "\0"
+  "GPG_ERR_EPROCLIM" "\0"
+  "GPG_ERR_EPROCUNAVAIL" "\0"
+  "GPG_ERR_EPROGMISMATCH" "\0"
+  "GPG_ERR_EPROGUNAVAIL" "\0"
+  "GPG_ERR_EPROTO" "\0"
+  "GPG_ERR_EPROTONOSUPPORT" "\0"
+  "GPG_ERR_EPROTOTYPE" "\0"
+  "GPG_ERR_ERANGE" "\0"
+  "GPG_ERR_EREMCHG" "\0"
+  "GPG_ERR_EREMOTE" "\0"
+  "GPG_ERR_EREMOTEIO" "\0"
+  "GPG_ERR_ERESTART" "\0"
+  "GPG_ERR_EROFS" "\0"
+  "GPG_ERR_ERPCMISMATCH" "\0"
+  "GPG_ERR_ESHUTDOWN" "\0"
+  "GPG_ERR_ESOCKTNOSUPPORT" "\0"
+  "GPG_ERR_ESPIPE" "\0"
+  "GPG_ERR_ESRCH" "\0"
+  "GPG_ERR_ESRMNT" "\0"
+  "GPG_ERR_ESTALE" "\0"
+  "GPG_ERR_ESTRPIPE" "\0"
+  "GPG_ERR_ETIME" "\0"
+  "GPG_ERR_ETIMEDOUT" "\0"
+  "GPG_ERR_ETOOMANYREFS" "\0"
+  "GPG_ERR_ETXTBSY" "\0"
+  "GPG_ERR_EUCLEAN" "\0"
+  "GPG_ERR_EUNATCH" "\0"
+  "GPG_ERR_EUSERS" "\0"
+  "GPG_ERR_EWOULDBLOCK" "\0"
+  "GPG_ERR_EXDEV" "\0"
+  "GPG_ERR_EXFULL";
+
+static const int errnos_msgidx[] =
+  {
+    0,
+    14,
+    29,
+    48,
+    70,
+    83,
+    104,
+    119,
+    136,
+    150,
+    170,
+    184,
+    198,
+    213,
+    229,
+    243,
+    259,
+    275,
+    291,
+    306,
+    320,
+    338,
+    353,
+    368,
+    382,
+    403,
+    424,
+    443,
+    454,
+    470,
+    488,
+    509,
+    523,
+    536,
+    552,
+    567,
+    582,
+    597,
+    611,
+    626,
+    646,
+    664,
+    682,
+    703,
+    717,
+    731,
+    746,
+    766,
+    780,
+    795,
+    807,
+    823,
+    838,
+    853,
+    868,
+    885,
+    900,
+    915,
+    931,
+    947,
+    964,
+    980,
+    996,
+    1011,
+    1025,
+    1045,
+    1060,
+    1075,
+    1092,
+    1110,
+    1131,
+    1147,
+    1165,
+    1182,
+    1200,
+    1220,
+    1235,
+    1250,
+    1266,
+    1281,
+    1297,
+    1312,
+    1327,
+    1343,
+    1358,
+    1374,
+    1392,
+    1407,
+    1422,
+    1437,
+    1452,
+    1472,
+    1487,
+    1501,
+    1516,
+    1531,
+    1547,
+    1564,
+    1580,
+    1598,
+    1614,
+    1631,
+    1647,
+    1662,
+    1679,
+    1693,
+    1712,
+    1730,
+    1744,
+    1765,
+    1779,
+    1796,
+    1817,
+    1839,
+    1860,
+    1875,
+    1899,
+    1918,
+    1933,
+    1949,
+    1965,
+    1983,
+    2000,
+    2014,
+    2035,
+    2053,
+    2077,
+    2092,
+    2106,
+    2121,
+    2136,
+    2153,
+    2167,
+    2185,
+    2206,
+    2222,
+    2238,
+    2254,
+    2269,
+    2289,
+    2303,
+    
+  };
+
+static GPG_ERR_INLINE int
+errnos_msgidxof (int code)
+{
+  return (0 ? 0
+  : ((code >= 0) && (code <= 140)) ? (code - 0)
+  : -1);
+}
diff --git a/src/gpg-error.h b/src/gpg-error.h
new file mode 100644
index 0000000..fc7ff68
--- /dev/null
+++ b/src/gpg-error.h
@@ -0,0 +1,2004 @@
+/* gpg-error.h or gpgrt.h - Common code for GnuPG and others.    -*- c -*-
+ * Copyright (C) 2001-2020 g10 Code GmbH
+ *
+ * This file is part of libgpg-error (aka libgpgrt).
+ *
+ * libgpg-error is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * libgpg-error is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, see <https://www.gnu.org/licenses/>.
+ * SPDX-License-Identifier: LGPL-2.1+
+ *
+ * Do not edit.  Generated from gpg-error.h.in for:
+                 x86_64-unknown-linux-gnu (x86_64-pc-linux-gnu)
+ */
+
+/* The GnuPG project consists of many components.  Error codes are
+ * exchanged between all components.  The common error codes and their
+ * user-presentable descriptions are kept into a shared library to
+ * allow adding new error codes and components without recompiling any
+ * of the other components.  In addition to error codes this library
+ * also features several other groups of functions which are common to
+ * all GnuPG components.  They may be used by independet project as
+ * well.  The interfaces will not change in a backward incompatible way.
+ *
+ * An error code together with an error source build up an error
+ * value.  As the error value is been passed from one component to
+ * another, it preserves the information about the source and nature
+ * of the error.
+ *
+ * A component of the GnuPG project can define the following macros to
+ * tune the behaviour of the library:
+ *
+ * GPG_ERR_SOURCE_DEFAULT: Define to an error source of type
+ * gpg_err_source_t to make that source the default for gpg_error().
+ * Otherwise GPG_ERR_SOURCE_UNKNOWN is used as default.
+ *
+ * GPG_ERR_ENABLE_GETTEXT_MACROS: Define to provide macros to map the
+ * internal gettext API to standard names.  This has only an effect on
+ * Windows platforms.
+ *
+ * GPGRT_ENABLE_ES_MACROS: Define to provide "es_" macros for the
+ * estream functions.
+ *
+ * GPGRT_ENABLE_LOG_MACROS: Define to provide short versions of the
+ * log functions.
+ *
+ * GPGRT_ENABLE_ARGPARSE_MACROS: Needs to be defined to provide the
+ * mandatory macros of the argparse interface.
+ */
+
+#ifndef GPG_ERROR_H
+#define GPG_ERROR_H 1
+#ifndef GPGRT_H
+#define GPGRT_H 1
+
+#include <stddef.h>
+#include <stdio.h>
+#include <stdarg.h>
+
+/* The version string of this header. */
+#define GPG_ERROR_VERSION "1.40-beta7"
+#define GPGRT_VERSION     "1.40-beta7"
+
+/* The version number of this header. */
+#define GPG_ERROR_VERSION_NUMBER 0x012800
+#define GPGRT_VERSION_NUMBER     0x012800
+
+
+#ifdef __GNUC__
+# define GPG_ERR_INLINE __inline__
+#elif defined(_MSC_VER) && _MSC_VER >= 1300
+# define GPG_ERR_INLINE __inline
+#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+# define GPG_ERR_INLINE inline
+#else
+# ifndef GPG_ERR_INLINE
+#  define GPG_ERR_INLINE
+# endif
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#if 0 /* just to make Emacs auto-indent happy */
+}
+#endif
+#endif /* __cplusplus */
+
+
+
+/* The error source type gpg_err_source_t.
+ *
+ * Where as the Poo out of a welle small
+ * Taketh his firste springing and his sours.
+ *					--Chaucer.
+ */
+
+/* Only use free slots, never change or reorder the existing
+ * entries.  */
+typedef enum
+  {
+    GPG_ERR_SOURCE_UNKNOWN = 0,
+    GPG_ERR_SOURCE_GCRYPT = 1,
+    GPG_ERR_SOURCE_GPG = 2,
+    GPG_ERR_SOURCE_GPGSM = 3,
+    GPG_ERR_SOURCE_GPGAGENT = 4,
+    GPG_ERR_SOURCE_PINENTRY = 5,
+    GPG_ERR_SOURCE_SCD = 6,
+    GPG_ERR_SOURCE_GPGME = 7,
+    GPG_ERR_SOURCE_KEYBOX = 8,
+    GPG_ERR_SOURCE_KSBA = 9,
+    GPG_ERR_SOURCE_DIRMNGR = 10,
+    GPG_ERR_SOURCE_GSTI = 11,
+    GPG_ERR_SOURCE_GPA = 12,
+    GPG_ERR_SOURCE_KLEO = 13,
+    GPG_ERR_SOURCE_G13 = 14,
+    GPG_ERR_SOURCE_ASSUAN = 15,
+    GPG_ERR_SOURCE_TLS = 17,
+    GPG_ERR_SOURCE_ANY = 31,
+    GPG_ERR_SOURCE_USER_1 = 32,
+    GPG_ERR_SOURCE_USER_2 = 33,
+    GPG_ERR_SOURCE_USER_3 = 34,
+    GPG_ERR_SOURCE_USER_4 = 35,
+
+    /* This is one more than the largest allowed entry.  */
+    GPG_ERR_SOURCE_DIM = 128
+  } gpg_err_source_t;
+
+
+/* The error code type gpg_err_code_t.  */
+
+/* Only use free slots, never change or reorder the existing
+ * entries.  */
+typedef enum
+  {
+    GPG_ERR_NO_ERROR = 0,
+    GPG_ERR_GENERAL = 1,
+    GPG_ERR_UNKNOWN_PACKET = 2,
+    GPG_ERR_UNKNOWN_VERSION = 3,
+    GPG_ERR_PUBKEY_ALGO = 4,
+    GPG_ERR_DIGEST_ALGO = 5,
+    GPG_ERR_BAD_PUBKEY = 6,
+    GPG_ERR_BAD_SECKEY = 7,
+    GPG_ERR_BAD_SIGNATURE = 8,
+    GPG_ERR_NO_PUBKEY = 9,
+    GPG_ERR_CHECKSUM = 10,
+    GPG_ERR_BAD_PASSPHRASE = 11,
+    GPG_ERR_CIPHER_ALGO = 12,
+    GPG_ERR_KEYRING_OPEN = 13,
+    GPG_ERR_INV_PACKET = 14,
+    GPG_ERR_INV_ARMOR = 15,
+    GPG_ERR_NO_USER_ID = 16,
+    GPG_ERR_NO_SECKEY = 17,
+    GPG_ERR_WRONG_SECKEY = 18,
+    GPG_ERR_BAD_KEY = 19,
+    GPG_ERR_COMPR_ALGO = 20,
+    GPG_ERR_NO_PRIME = 21,
+    GPG_ERR_NO_ENCODING_METHOD = 22,
+    GPG_ERR_NO_ENCRYPTION_SCHEME = 23,
+    GPG_ERR_NO_SIGNATURE_SCHEME = 24,
+    GPG_ERR_INV_ATTR = 25,
+    GPG_ERR_NO_VALUE = 26,
+    GPG_ERR_NOT_FOUND = 27,
+    GPG_ERR_VALUE_NOT_FOUND = 28,
+    GPG_ERR_SYNTAX = 29,
+    GPG_ERR_BAD_MPI = 30,
+    GPG_ERR_INV_PASSPHRASE = 31,
+    GPG_ERR_SIG_CLASS = 32,
+    GPG_ERR_RESOURCE_LIMIT = 33,
+    GPG_ERR_INV_KEYRING = 34,
+    GPG_ERR_TRUSTDB = 35,
+    GPG_ERR_BAD_CERT = 36,
+    GPG_ERR_INV_USER_ID = 37,
+    GPG_ERR_UNEXPECTED = 38,
+    GPG_ERR_TIME_CONFLICT = 39,
+    GPG_ERR_KEYSERVER = 40,
+    GPG_ERR_WRONG_PUBKEY_ALGO = 41,
+    GPG_ERR_TRIBUTE_TO_D_A = 42,
+    GPG_ERR_WEAK_KEY = 43,
+    GPG_ERR_INV_KEYLEN = 44,
+    GPG_ERR_INV_ARG = 45,
+    GPG_ERR_BAD_URI = 46,
+    GPG_ERR_INV_URI = 47,
+    GPG_ERR_NETWORK = 48,
+    GPG_ERR_UNKNOWN_HOST = 49,
+    GPG_ERR_SELFTEST_FAILED = 50,
+    GPG_ERR_NOT_ENCRYPTED = 51,
+    GPG_ERR_NOT_PROCESSED = 52,
+    GPG_ERR_UNUSABLE_PUBKEY = 53,
+    GPG_ERR_UNUSABLE_SECKEY = 54,
+    GPG_ERR_INV_VALUE = 55,
+    GPG_ERR_BAD_CERT_CHAIN = 56,
+    GPG_ERR_MISSING_CERT = 57,
+    GPG_ERR_NO_DATA = 58,
+    GPG_ERR_BUG = 59,
+    GPG_ERR_NOT_SUPPORTED = 60,
+    GPG_ERR_INV_OP = 61,
+    GPG_ERR_TIMEOUT = 62,
+    GPG_ERR_INTERNAL = 63,
+    GPG_ERR_EOF_GCRYPT = 64,
+    GPG_ERR_INV_OBJ = 65,
+    GPG_ERR_TOO_SHORT = 66,
+    GPG_ERR_TOO_LARGE = 67,
+    GPG_ERR_NO_OBJ = 68,
+    GPG_ERR_NOT_IMPLEMENTED = 69,
+    GPG_ERR_CONFLICT = 70,
+    GPG_ERR_INV_CIPHER_MODE = 71,
+    GPG_ERR_INV_FLAG = 72,
+    GPG_ERR_INV_HANDLE = 73,
+    GPG_ERR_TRUNCATED = 74,
+    GPG_ERR_INCOMPLETE_LINE = 75,
+    GPG_ERR_INV_RESPONSE = 76,
+    GPG_ERR_NO_AGENT = 77,
+    GPG_ERR_AGENT = 78,
+    GPG_ERR_INV_DATA = 79,
+    GPG_ERR_ASSUAN_SERVER_FAULT = 80,
+    GPG_ERR_ASSUAN = 81,
+    GPG_ERR_INV_SESSION_KEY = 82,
+    GPG_ERR_INV_SEXP = 83,
+    GPG_ERR_UNSUPPORTED_ALGORITHM = 84,
+    GPG_ERR_NO_PIN_ENTRY = 85,
+    GPG_ERR_PIN_ENTRY = 86,
+    GPG_ERR_BAD_PIN = 87,
+    GPG_ERR_INV_NAME = 88,
+    GPG_ERR_BAD_DATA = 89,
+    GPG_ERR_INV_PARAMETER = 90,
+    GPG_ERR_WRONG_CARD = 91,
+    GPG_ERR_NO_DIRMNGR = 92,
+    GPG_ERR_DIRMNGR = 93,
+    GPG_ERR_CERT_REVOKED = 94,
+    GPG_ERR_NO_CRL_KNOWN = 95,
+    GPG_ERR_CRL_TOO_OLD = 96,
+    GPG_ERR_LINE_TOO_LONG = 97,
+    GPG_ERR_NOT_TRUSTED = 98,
+    GPG_ERR_CANCELED = 99,
+    GPG_ERR_BAD_CA_CERT = 100,
+    GPG_ERR_CERT_EXPIRED = 101,
+    GPG_ERR_CERT_TOO_YOUNG = 102,
+    GPG_ERR_UNSUPPORTED_CERT = 103,
+    GPG_ERR_UNKNOWN_SEXP = 104,
+    GPG_ERR_UNSUPPORTED_PROTECTION = 105,
+    GPG_ERR_CORRUPTED_PROTECTION = 106,
+    GPG_ERR_AMBIGUOUS_NAME = 107,
+    GPG_ERR_CARD = 108,
+    GPG_ERR_CARD_RESET = 109,
+    GPG_ERR_CARD_REMOVED = 110,
+    GPG_ERR_INV_CARD = 111,
+    GPG_ERR_CARD_NOT_PRESENT = 112,
+    GPG_ERR_NO_PKCS15_APP = 113,
+    GPG_ERR_NOT_CONFIRMED = 114,
+    GPG_ERR_CONFIGURATION = 115,
+    GPG_ERR_NO_POLICY_MATCH = 116,
+    GPG_ERR_INV_INDEX = 117,
+    GPG_ERR_INV_ID = 118,
+    GPG_ERR_NO_SCDAEMON = 119,
+    GPG_ERR_SCDAEMON = 120,
+    GPG_ERR_UNSUPPORTED_PROTOCOL = 121,
+    GPG_ERR_BAD_PIN_METHOD = 122,
+    GPG_ERR_CARD_NOT_INITIALIZED = 123,
+    GPG_ERR_UNSUPPORTED_OPERATION = 124,
+    GPG_ERR_WRONG_KEY_USAGE = 125,
+    GPG_ERR_NOTHING_FOUND = 126,
+    GPG_ERR_WRONG_BLOB_TYPE = 127,
+    GPG_ERR_MISSING_VALUE = 128,
+    GPG_ERR_HARDWARE = 129,
+    GPG_ERR_PIN_BLOCKED = 130,
+    GPG_ERR_USE_CONDITIONS = 131,
+    GPG_ERR_PIN_NOT_SYNCED = 132,
+    GPG_ERR_INV_CRL = 133,
+    GPG_ERR_BAD_BER = 134,
+    GPG_ERR_INV_BER = 135,
+    GPG_ERR_ELEMENT_NOT_FOUND = 136,
+    GPG_ERR_IDENTIFIER_NOT_FOUND = 137,
+    GPG_ERR_INV_TAG = 138,
+    GPG_ERR_INV_LENGTH = 139,
+    GPG_ERR_INV_KEYINFO = 140,
+    GPG_ERR_UNEXPECTED_TAG = 141,
+    GPG_ERR_NOT_DER_ENCODED = 142,
+    GPG_ERR_NO_CMS_OBJ = 143,
+    GPG_ERR_INV_CMS_OBJ = 144,
+    GPG_ERR_UNKNOWN_CMS_OBJ = 145,
+    GPG_ERR_UNSUPPORTED_CMS_OBJ = 146,
+    GPG_ERR_UNSUPPORTED_ENCODING = 147,
+    GPG_ERR_UNSUPPORTED_CMS_VERSION = 148,
+    GPG_ERR_UNKNOWN_ALGORITHM = 149,
+    GPG_ERR_INV_ENGINE = 150,
+    GPG_ERR_PUBKEY_NOT_TRUSTED = 151,
+    GPG_ERR_DECRYPT_FAILED = 152,
+    GPG_ERR_KEY_EXPIRED = 153,
+    GPG_ERR_SIG_EXPIRED = 154,
+    GPG_ERR_ENCODING_PROBLEM = 155,
+    GPG_ERR_INV_STATE = 156,
+    GPG_ERR_DUP_VALUE = 157,
+    GPG_ERR_MISSING_ACTION = 158,
+    GPG_ERR_MODULE_NOT_FOUND = 159,
+    GPG_ERR_INV_OID_STRING = 160,
+    GPG_ERR_INV_TIME = 161,
+    GPG_ERR_INV_CRL_OBJ = 162,
+    GPG_ERR_UNSUPPORTED_CRL_VERSION = 163,
+    GPG_ERR_INV_CERT_OBJ = 164,
+    GPG_ERR_UNKNOWN_NAME = 165,
+    GPG_ERR_LOCALE_PROBLEM = 166,
+    GPG_ERR_NOT_LOCKED = 167,
+    GPG_ERR_PROTOCOL_VIOLATION = 168,
+    GPG_ERR_INV_MAC = 169,
+    GPG_ERR_INV_REQUEST = 170,
+    GPG_ERR_UNKNOWN_EXTN = 171,
+    GPG_ERR_UNKNOWN_CRIT_EXTN = 172,
+    GPG_ERR_LOCKED = 173,
+    GPG_ERR_UNKNOWN_OPTION = 174,
+    GPG_ERR_UNKNOWN_COMMAND = 175,
+    GPG_ERR_NOT_OPERATIONAL = 176,
+    GPG_ERR_NO_PASSPHRASE = 177,
+    GPG_ERR_NO_PIN = 178,
+    GPG_ERR_NOT_ENABLED = 179,
+    GPG_ERR_NO_ENGINE = 180,
+    GPG_ERR_MISSING_KEY = 181,
+    GPG_ERR_TOO_MANY = 182,
+    GPG_ERR_LIMIT_REACHED = 183,
+    GPG_ERR_NOT_INITIALIZED = 184,
+    GPG_ERR_MISSING_ISSUER_CERT = 185,
+    GPG_ERR_NO_KEYSERVER = 186,
+    GPG_ERR_INV_CURVE = 187,
+    GPG_ERR_UNKNOWN_CURVE = 188,
+    GPG_ERR_DUP_KEY = 189,
+    GPG_ERR_AMBIGUOUS = 190,
+    GPG_ERR_NO_CRYPT_CTX = 191,
+    GPG_ERR_WRONG_CRYPT_CTX = 192,
+    GPG_ERR_BAD_CRYPT_CTX = 193,
+    GPG_ERR_CRYPT_CTX_CONFLICT = 194,
+    GPG_ERR_BROKEN_PUBKEY = 195,
+    GPG_ERR_BROKEN_SECKEY = 196,
+    GPG_ERR_MAC_ALGO = 197,
+    GPG_ERR_FULLY_CANCELED = 198,
+    GPG_ERR_UNFINISHED = 199,
+    GPG_ERR_BUFFER_TOO_SHORT = 200,
+    GPG_ERR_SEXP_INV_LEN_SPEC = 201,
+    GPG_ERR_SEXP_STRING_TOO_LONG = 202,
+    GPG_ERR_SEXP_UNMATCHED_PAREN = 203,
+    GPG_ERR_SEXP_NOT_CANONICAL = 204,
+    GPG_ERR_SEXP_BAD_CHARACTER = 205,
+    GPG_ERR_SEXP_BAD_QUOTATION = 206,
+    GPG_ERR_SEXP_ZERO_PREFIX = 207,
+    GPG_ERR_SEXP_NESTED_DH = 208,
+    GPG_ERR_SEXP_UNMATCHED_DH = 209,
+    GPG_ERR_SEXP_UNEXPECTED_PUNC = 210,
+    GPG_ERR_SEXP_BAD_HEX_CHAR = 211,
+    GPG_ERR_SEXP_ODD_HEX_NUMBERS = 212,
+    GPG_ERR_SEXP_BAD_OCT_CHAR = 213,
+    GPG_ERR_SUBKEYS_EXP_OR_REV = 217,
+    GPG_ERR_DB_CORRUPTED = 218,
+    GPG_ERR_SERVER_FAILED = 219,
+    GPG_ERR_NO_NAME = 220,
+    GPG_ERR_NO_KEY = 221,
+    GPG_ERR_LEGACY_KEY = 222,
+    GPG_ERR_REQUEST_TOO_SHORT = 223,
+    GPG_ERR_REQUEST_TOO_LONG = 224,
+    GPG_ERR_OBJ_TERM_STATE = 225,
+    GPG_ERR_NO_CERT_CHAIN = 226,
+    GPG_ERR_CERT_TOO_LARGE = 227,
+    GPG_ERR_INV_RECORD = 228,
+    GPG_ERR_BAD_MAC = 229,
+    GPG_ERR_UNEXPECTED_MSG = 230,
+    GPG_ERR_COMPR_FAILED = 231,
+    GPG_ERR_WOULD_WRAP = 232,
+    GPG_ERR_FATAL_ALERT = 233,
+    GPG_ERR_NO_CIPHER = 234,
+    GPG_ERR_MISSING_CLIENT_CERT = 235,
+    GPG_ERR_CLOSE_NOTIFY = 236,
+    GPG_ERR_TICKET_EXPIRED = 237,
+    GPG_ERR_BAD_TICKET = 238,
+    GPG_ERR_UNKNOWN_IDENTITY = 239,
+    GPG_ERR_BAD_HS_CERT = 240,
+    GPG_ERR_BAD_HS_CERT_REQ = 241,
+    GPG_ERR_BAD_HS_CERT_VER = 242,
+    GPG_ERR_BAD_HS_CHANGE_CIPHER = 243,
+    GPG_ERR_BAD_HS_CLIENT_HELLO = 244,
+    GPG_ERR_BAD_HS_SERVER_HELLO = 245,
+    GPG_ERR_BAD_HS_SERVER_HELLO_DONE = 246,
+    GPG_ERR_BAD_HS_FINISHED = 247,
+    GPG_ERR_BAD_HS_SERVER_KEX = 248,
+    GPG_ERR_BAD_HS_CLIENT_KEX = 249,
+    GPG_ERR_BOGUS_STRING = 250,
+    GPG_ERR_FORBIDDEN = 251,
+    GPG_ERR_KEY_DISABLED = 252,
+    GPG_ERR_KEY_ON_CARD = 253,
+    GPG_ERR_INV_LOCK_OBJ = 254,
+    GPG_ERR_TRUE = 255,
+    GPG_ERR_FALSE = 256,
+    GPG_ERR_ASS_GENERAL = 257,
+    GPG_ERR_ASS_ACCEPT_FAILED = 258,
+    GPG_ERR_ASS_CONNECT_FAILED = 259,
+    GPG_ERR_ASS_INV_RESPONSE = 260,
+    GPG_ERR_ASS_INV_VALUE = 261,
+    GPG_ERR_ASS_INCOMPLETE_LINE = 262,
+    GPG_ERR_ASS_LINE_TOO_LONG = 263,
+    GPG_ERR_ASS_NESTED_COMMANDS = 264,
+    GPG_ERR_ASS_NO_DATA_CB = 265,
+    GPG_ERR_ASS_NO_INQUIRE_CB = 266,
+    GPG_ERR_ASS_NOT_A_SERVER = 267,
+    GPG_ERR_ASS_NOT_A_CLIENT = 268,
+    GPG_ERR_ASS_SERVER_START = 269,
+    GPG_ERR_ASS_READ_ERROR = 270,
+    GPG_ERR_ASS_WRITE_ERROR = 271,
+    GPG_ERR_ASS_TOO_MUCH_DATA = 273,
+    GPG_ERR_ASS_UNEXPECTED_CMD = 274,
+    GPG_ERR_ASS_UNKNOWN_CMD = 275,
+    GPG_ERR_ASS_SYNTAX = 276,
+    GPG_ERR_ASS_CANCELED = 277,
+    GPG_ERR_ASS_NO_INPUT = 278,
+    GPG_ERR_ASS_NO_OUTPUT = 279,
+    GPG_ERR_ASS_PARAMETER = 280,
+    GPG_ERR_ASS_UNKNOWN_INQUIRE = 281,
+    GPG_ERR_ENGINE_TOO_OLD = 300,
+    GPG_ERR_WINDOW_TOO_SMALL = 301,
+    GPG_ERR_WINDOW_TOO_LARGE = 302,
+    GPG_ERR_MISSING_ENVVAR = 303,
+    GPG_ERR_USER_ID_EXISTS = 304,
+    GPG_ERR_NAME_EXISTS = 305,
+    GPG_ERR_DUP_NAME = 306,
+    GPG_ERR_TOO_YOUNG = 307,
+    GPG_ERR_TOO_OLD = 308,
+    GPG_ERR_UNKNOWN_FLAG = 309,
+    GPG_ERR_INV_ORDER = 310,
+    GPG_ERR_ALREADY_FETCHED = 311,
+    GPG_ERR_TRY_LATER = 312,
+    GPG_ERR_WRONG_NAME = 313,
+    GPG_ERR_NO_AUTH = 314,
+    GPG_ERR_BAD_AUTH = 315,
+    GPG_ERR_NO_KEYBOXD = 316,
+    GPG_ERR_KEYBOXD = 317,
+    GPG_ERR_NO_SERVICE = 318,
+    GPG_ERR_SERVICE = 319,
+    GPG_ERR_SYSTEM_BUG = 666,
+    GPG_ERR_DNS_UNKNOWN = 711,
+    GPG_ERR_DNS_SECTION = 712,
+    GPG_ERR_DNS_ADDRESS = 713,
+    GPG_ERR_DNS_NO_QUERY = 714,
+    GPG_ERR_DNS_NO_ANSWER = 715,
+    GPG_ERR_DNS_CLOSED = 716,
+    GPG_ERR_DNS_VERIFY = 717,
+    GPG_ERR_DNS_TIMEOUT = 718,
+    GPG_ERR_LDAP_GENERAL = 721,
+    GPG_ERR_LDAP_ATTR_GENERAL = 722,
+    GPG_ERR_LDAP_NAME_GENERAL = 723,
+    GPG_ERR_LDAP_SECURITY_GENERAL = 724,
+    GPG_ERR_LDAP_SERVICE_GENERAL = 725,
+    GPG_ERR_LDAP_UPDATE_GENERAL = 726,
+    GPG_ERR_LDAP_E_GENERAL = 727,
+    GPG_ERR_LDAP_X_GENERAL = 728,
+    GPG_ERR_LDAP_OTHER_GENERAL = 729,
+    GPG_ERR_LDAP_X_CONNECTING = 750,
+    GPG_ERR_LDAP_REFERRAL_LIMIT = 751,
+    GPG_ERR_LDAP_CLIENT_LOOP = 752,
+    GPG_ERR_LDAP_NO_RESULTS = 754,
+    GPG_ERR_LDAP_CONTROL_NOT_FOUND = 755,
+    GPG_ERR_LDAP_NOT_SUPPORTED = 756,
+    GPG_ERR_LDAP_CONNECT = 757,
+    GPG_ERR_LDAP_NO_MEMORY = 758,
+    GPG_ERR_LDAP_PARAM = 759,
+    GPG_ERR_LDAP_USER_CANCELLED = 760,
+    GPG_ERR_LDAP_FILTER = 761,
+    GPG_ERR_LDAP_AUTH_UNKNOWN = 762,
+    GPG_ERR_LDAP_TIMEOUT = 763,
+    GPG_ERR_LDAP_DECODING = 764,
+    GPG_ERR_LDAP_ENCODING = 765,
+    GPG_ERR_LDAP_LOCAL = 766,
+    GPG_ERR_LDAP_SERVER_DOWN = 767,
+    GPG_ERR_LDAP_SUCCESS = 768,
+    GPG_ERR_LDAP_OPERATIONS = 769,
+    GPG_ERR_LDAP_PROTOCOL = 770,
+    GPG_ERR_LDAP_TIMELIMIT = 771,
+    GPG_ERR_LDAP_SIZELIMIT = 772,
+    GPG_ERR_LDAP_COMPARE_FALSE = 773,
+    GPG_ERR_LDAP_COMPARE_TRUE = 774,
+    GPG_ERR_LDAP_UNSUPPORTED_AUTH = 775,
+    GPG_ERR_LDAP_STRONG_AUTH_RQRD = 776,
+    GPG_ERR_LDAP_PARTIAL_RESULTS = 777,
+    GPG_ERR_LDAP_REFERRAL = 778,
+    GPG_ERR_LDAP_ADMINLIMIT = 779,
+    GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN = 780,
+    GPG_ERR_LDAP_CONFIDENT_RQRD = 781,
+    GPG_ERR_LDAP_SASL_BIND_INPROG = 782,
+    GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE = 784,
+    GPG_ERR_LDAP_UNDEFINED_TYPE = 785,
+    GPG_ERR_LDAP_BAD_MATCHING = 786,
+    GPG_ERR_LDAP_CONST_VIOLATION = 787,
+    GPG_ERR_LDAP_TYPE_VALUE_EXISTS = 788,
+    GPG_ERR_LDAP_INV_SYNTAX = 789,
+    GPG_ERR_LDAP_NO_SUCH_OBJ = 800,
+    GPG_ERR_LDAP_ALIAS_PROBLEM = 801,
+    GPG_ERR_LDAP_INV_DN_SYNTAX = 802,
+    GPG_ERR_LDAP_IS_LEAF = 803,
+    GPG_ERR_LDAP_ALIAS_DEREF = 804,
+    GPG_ERR_LDAP_X_PROXY_AUTH_FAIL = 815,
+    GPG_ERR_LDAP_BAD_AUTH = 816,
+    GPG_ERR_LDAP_INV_CREDENTIALS = 817,
+    GPG_ERR_LDAP_INSUFFICIENT_ACC = 818,
+    GPG_ERR_LDAP_BUSY = 819,
+    GPG_ERR_LDAP_UNAVAILABLE = 820,
+    GPG_ERR_LDAP_UNWILL_TO_PERFORM = 821,
+    GPG_ERR_LDAP_LOOP_DETECT = 822,
+    GPG_ERR_LDAP_NAMING_VIOLATION = 832,
+    GPG_ERR_LDAP_OBJ_CLS_VIOLATION = 833,
+    GPG_ERR_LDAP_NOT_ALLOW_NONLEAF = 834,
+    GPG_ERR_LDAP_NOT_ALLOW_ON_RDN = 835,
+    GPG_ERR_LDAP_ALREADY_EXISTS = 836,
+    GPG_ERR_LDAP_NO_OBJ_CLASS_MODS = 837,
+    GPG_ERR_LDAP_RESULTS_TOO_LARGE = 838,
+    GPG_ERR_LDAP_AFFECTS_MULT_DSAS = 839,
+    GPG_ERR_LDAP_VLV = 844,
+    GPG_ERR_LDAP_OTHER = 848,
+    GPG_ERR_LDAP_CUP_RESOURCE_LIMIT = 881,
+    GPG_ERR_LDAP_CUP_SEC_VIOLATION = 882,
+    GPG_ERR_LDAP_CUP_INV_DATA = 883,
+    GPG_ERR_LDAP_CUP_UNSUP_SCHEME = 884,
+    GPG_ERR_LDAP_CUP_RELOAD = 885,
+    GPG_ERR_LDAP_CANCELLED = 886,
+    GPG_ERR_LDAP_NO_SUCH_OPERATION = 887,
+    GPG_ERR_LDAP_TOO_LATE = 888,
+    GPG_ERR_LDAP_CANNOT_CANCEL = 889,
+    GPG_ERR_LDAP_ASSERTION_FAILED = 890,
+    GPG_ERR_LDAP_PROX_AUTH_DENIED = 891,
+    GPG_ERR_USER_1 = 1024,
+    GPG_ERR_USER_2 = 1025,
+    GPG_ERR_USER_3 = 1026,
+    GPG_ERR_USER_4 = 1027,
+    GPG_ERR_USER_5 = 1028,
+    GPG_ERR_USER_6 = 1029,
+    GPG_ERR_USER_7 = 1030,
+    GPG_ERR_USER_8 = 1031,
+    GPG_ERR_USER_9 = 1032,
+    GPG_ERR_USER_10 = 1033,
+    GPG_ERR_USER_11 = 1034,
+    GPG_ERR_USER_12 = 1035,
+    GPG_ERR_USER_13 = 1036,
+    GPG_ERR_USER_14 = 1037,
+    GPG_ERR_USER_15 = 1038,
+    GPG_ERR_USER_16 = 1039,
+    GPG_ERR_SQL_OK = 1500,
+    GPG_ERR_SQL_ERROR = 1501,
+    GPG_ERR_SQL_INTERNAL = 1502,
+    GPG_ERR_SQL_PERM = 1503,
+    GPG_ERR_SQL_ABORT = 1504,
+    GPG_ERR_SQL_BUSY = 1505,
+    GPG_ERR_SQL_LOCKED = 1506,
+    GPG_ERR_SQL_NOMEM = 1507,
+    GPG_ERR_SQL_READONLY = 1508,
+    GPG_ERR_SQL_INTERRUPT = 1509,
+    GPG_ERR_SQL_IOERR = 1510,
+    GPG_ERR_SQL_CORRUPT = 1511,
+    GPG_ERR_SQL_NOTFOUND = 1512,
+    GPG_ERR_SQL_FULL = 1513,
+    GPG_ERR_SQL_CANTOPEN = 1514,
+    GPG_ERR_SQL_PROTOCOL = 1515,
+    GPG_ERR_SQL_EMPTY = 1516,
+    GPG_ERR_SQL_SCHEMA = 1517,
+    GPG_ERR_SQL_TOOBIG = 1518,
+    GPG_ERR_SQL_CONSTRAINT = 1519,
+    GPG_ERR_SQL_MISMATCH = 1520,
+    GPG_ERR_SQL_MISUSE = 1521,
+    GPG_ERR_SQL_NOLFS = 1522,
+    GPG_ERR_SQL_AUTH = 1523,
+    GPG_ERR_SQL_FORMAT = 1524,
+    GPG_ERR_SQL_RANGE = 1525,
+    GPG_ERR_SQL_NOTADB = 1526,
+    GPG_ERR_SQL_NOTICE = 1527,
+    GPG_ERR_SQL_WARNING = 1528,
+    GPG_ERR_SQL_ROW = 1600,
+    GPG_ERR_SQL_DONE = 1601,
+    GPG_ERR_MISSING_ERRNO = 16381,
+    GPG_ERR_UNKNOWN_ERRNO = 16382,
+    GPG_ERR_EOF = 16383,
+
+    /* The following error codes are used to map system errors.  */
+#define GPG_ERR_SYSTEM_ERROR	(1 << 15)
+    GPG_ERR_E2BIG = GPG_ERR_SYSTEM_ERROR | 0,
+    GPG_ERR_EACCES = GPG_ERR_SYSTEM_ERROR | 1,
+    GPG_ERR_EADDRINUSE = GPG_ERR_SYSTEM_ERROR | 2,
+    GPG_ERR_EADDRNOTAVAIL = GPG_ERR_SYSTEM_ERROR | 3,
+    GPG_ERR_EADV = GPG_ERR_SYSTEM_ERROR | 4,
+    GPG_ERR_EAFNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 5,
+    GPG_ERR_EAGAIN = GPG_ERR_SYSTEM_ERROR | 6,
+    GPG_ERR_EALREADY = GPG_ERR_SYSTEM_ERROR | 7,
+    GPG_ERR_EAUTH = GPG_ERR_SYSTEM_ERROR | 8,
+    GPG_ERR_EBACKGROUND = GPG_ERR_SYSTEM_ERROR | 9,
+    GPG_ERR_EBADE = GPG_ERR_SYSTEM_ERROR | 10,
+    GPG_ERR_EBADF = GPG_ERR_SYSTEM_ERROR | 11,
+    GPG_ERR_EBADFD = GPG_ERR_SYSTEM_ERROR | 12,
+    GPG_ERR_EBADMSG = GPG_ERR_SYSTEM_ERROR | 13,
+    GPG_ERR_EBADR = GPG_ERR_SYSTEM_ERROR | 14,
+    GPG_ERR_EBADRPC = GPG_ERR_SYSTEM_ERROR | 15,
+    GPG_ERR_EBADRQC = GPG_ERR_SYSTEM_ERROR | 16,
+    GPG_ERR_EBADSLT = GPG_ERR_SYSTEM_ERROR | 17,
+    GPG_ERR_EBFONT = GPG_ERR_SYSTEM_ERROR | 18,
+    GPG_ERR_EBUSY = GPG_ERR_SYSTEM_ERROR | 19,
+    GPG_ERR_ECANCELED = GPG_ERR_SYSTEM_ERROR | 20,
+    GPG_ERR_ECHILD = GPG_ERR_SYSTEM_ERROR | 21,
+    GPG_ERR_ECHRNG = GPG_ERR_SYSTEM_ERROR | 22,
+    GPG_ERR_ECOMM = GPG_ERR_SYSTEM_ERROR | 23,
+    GPG_ERR_ECONNABORTED = GPG_ERR_SYSTEM_ERROR | 24,
+    GPG_ERR_ECONNREFUSED = GPG_ERR_SYSTEM_ERROR | 25,
+    GPG_ERR_ECONNRESET = GPG_ERR_SYSTEM_ERROR | 26,
+    GPG_ERR_ED = GPG_ERR_SYSTEM_ERROR | 27,
+    GPG_ERR_EDEADLK = GPG_ERR_SYSTEM_ERROR | 28,
+    GPG_ERR_EDEADLOCK = GPG_ERR_SYSTEM_ERROR | 29,
+    GPG_ERR_EDESTADDRREQ = GPG_ERR_SYSTEM_ERROR | 30,
+    GPG_ERR_EDIED = GPG_ERR_SYSTEM_ERROR | 31,
+    GPG_ERR_EDOM = GPG_ERR_SYSTEM_ERROR | 32,
+    GPG_ERR_EDOTDOT = GPG_ERR_SYSTEM_ERROR | 33,
+    GPG_ERR_EDQUOT = GPG_ERR_SYSTEM_ERROR | 34,
+    GPG_ERR_EEXIST = GPG_ERR_SYSTEM_ERROR | 35,
+    GPG_ERR_EFAULT = GPG_ERR_SYSTEM_ERROR | 36,
+    GPG_ERR_EFBIG = GPG_ERR_SYSTEM_ERROR | 37,
+    GPG_ERR_EFTYPE = GPG_ERR_SYSTEM_ERROR | 38,
+    GPG_ERR_EGRATUITOUS = GPG_ERR_SYSTEM_ERROR | 39,
+    GPG_ERR_EGREGIOUS = GPG_ERR_SYSTEM_ERROR | 40,
+    GPG_ERR_EHOSTDOWN = GPG_ERR_SYSTEM_ERROR | 41,
+    GPG_ERR_EHOSTUNREACH = GPG_ERR_SYSTEM_ERROR | 42,
+    GPG_ERR_EIDRM = GPG_ERR_SYSTEM_ERROR | 43,
+    GPG_ERR_EIEIO = GPG_ERR_SYSTEM_ERROR | 44,
+    GPG_ERR_EILSEQ = GPG_ERR_SYSTEM_ERROR | 45,
+    GPG_ERR_EINPROGRESS = GPG_ERR_SYSTEM_ERROR | 46,
+    GPG_ERR_EINTR = GPG_ERR_SYSTEM_ERROR | 47,
+    GPG_ERR_EINVAL = GPG_ERR_SYSTEM_ERROR | 48,
+    GPG_ERR_EIO = GPG_ERR_SYSTEM_ERROR | 49,
+    GPG_ERR_EISCONN = GPG_ERR_SYSTEM_ERROR | 50,
+    GPG_ERR_EISDIR = GPG_ERR_SYSTEM_ERROR | 51,
+    GPG_ERR_EISNAM = GPG_ERR_SYSTEM_ERROR | 52,
+    GPG_ERR_EL2HLT = GPG_ERR_SYSTEM_ERROR | 53,
+    GPG_ERR_EL2NSYNC = GPG_ERR_SYSTEM_ERROR | 54,
+    GPG_ERR_EL3HLT = GPG_ERR_SYSTEM_ERROR | 55,
+    GPG_ERR_EL3RST = GPG_ERR_SYSTEM_ERROR | 56,
+    GPG_ERR_ELIBACC = GPG_ERR_SYSTEM_ERROR | 57,
+    GPG_ERR_ELIBBAD = GPG_ERR_SYSTEM_ERROR | 58,
+    GPG_ERR_ELIBEXEC = GPG_ERR_SYSTEM_ERROR | 59,
+    GPG_ERR_ELIBMAX = GPG_ERR_SYSTEM_ERROR | 60,
+    GPG_ERR_ELIBSCN = GPG_ERR_SYSTEM_ERROR | 61,
+    GPG_ERR_ELNRNG = GPG_ERR_SYSTEM_ERROR | 62,
+    GPG_ERR_ELOOP = GPG_ERR_SYSTEM_ERROR | 63,
+    GPG_ERR_EMEDIUMTYPE = GPG_ERR_SYSTEM_ERROR | 64,
+    GPG_ERR_EMFILE = GPG_ERR_SYSTEM_ERROR | 65,
+    GPG_ERR_EMLINK = GPG_ERR_SYSTEM_ERROR | 66,
+    GPG_ERR_EMSGSIZE = GPG_ERR_SYSTEM_ERROR | 67,
+    GPG_ERR_EMULTIHOP = GPG_ERR_SYSTEM_ERROR | 68,
+    GPG_ERR_ENAMETOOLONG = GPG_ERR_SYSTEM_ERROR | 69,
+    GPG_ERR_ENAVAIL = GPG_ERR_SYSTEM_ERROR | 70,
+    GPG_ERR_ENEEDAUTH = GPG_ERR_SYSTEM_ERROR | 71,
+    GPG_ERR_ENETDOWN = GPG_ERR_SYSTEM_ERROR | 72,
+    GPG_ERR_ENETRESET = GPG_ERR_SYSTEM_ERROR | 73,
+    GPG_ERR_ENETUNREACH = GPG_ERR_SYSTEM_ERROR | 74,
+    GPG_ERR_ENFILE = GPG_ERR_SYSTEM_ERROR | 75,
+    GPG_ERR_ENOANO = GPG_ERR_SYSTEM_ERROR | 76,
+    GPG_ERR_ENOBUFS = GPG_ERR_SYSTEM_ERROR | 77,
+    GPG_ERR_ENOCSI = GPG_ERR_SYSTEM_ERROR | 78,
+    GPG_ERR_ENODATA = GPG_ERR_SYSTEM_ERROR | 79,
+    GPG_ERR_ENODEV = GPG_ERR_SYSTEM_ERROR | 80,
+    GPG_ERR_ENOENT = GPG_ERR_SYSTEM_ERROR | 81,
+    GPG_ERR_ENOEXEC = GPG_ERR_SYSTEM_ERROR | 82,
+    GPG_ERR_ENOLCK = GPG_ERR_SYSTEM_ERROR | 83,
+    GPG_ERR_ENOLINK = GPG_ERR_SYSTEM_ERROR | 84,
+    GPG_ERR_ENOMEDIUM = GPG_ERR_SYSTEM_ERROR | 85,
+    GPG_ERR_ENOMEM = GPG_ERR_SYSTEM_ERROR | 86,
+    GPG_ERR_ENOMSG = GPG_ERR_SYSTEM_ERROR | 87,
+    GPG_ERR_ENONET = GPG_ERR_SYSTEM_ERROR | 88,
+    GPG_ERR_ENOPKG = GPG_ERR_SYSTEM_ERROR | 89,
+    GPG_ERR_ENOPROTOOPT = GPG_ERR_SYSTEM_ERROR | 90,
+    GPG_ERR_ENOSPC = GPG_ERR_SYSTEM_ERROR | 91,
+    GPG_ERR_ENOSR = GPG_ERR_SYSTEM_ERROR | 92,
+    GPG_ERR_ENOSTR = GPG_ERR_SYSTEM_ERROR | 93,
+    GPG_ERR_ENOSYS = GPG_ERR_SYSTEM_ERROR | 94,
+    GPG_ERR_ENOTBLK = GPG_ERR_SYSTEM_ERROR | 95,
+    GPG_ERR_ENOTCONN = GPG_ERR_SYSTEM_ERROR | 96,
+    GPG_ERR_ENOTDIR = GPG_ERR_SYSTEM_ERROR | 97,
+    GPG_ERR_ENOTEMPTY = GPG_ERR_SYSTEM_ERROR | 98,
+    GPG_ERR_ENOTNAM = GPG_ERR_SYSTEM_ERROR | 99,
+    GPG_ERR_ENOTSOCK = GPG_ERR_SYSTEM_ERROR | 100,
+    GPG_ERR_ENOTSUP = GPG_ERR_SYSTEM_ERROR | 101,
+    GPG_ERR_ENOTTY = GPG_ERR_SYSTEM_ERROR | 102,
+    GPG_ERR_ENOTUNIQ = GPG_ERR_SYSTEM_ERROR | 103,
+    GPG_ERR_ENXIO = GPG_ERR_SYSTEM_ERROR | 104,
+    GPG_ERR_EOPNOTSUPP = GPG_ERR_SYSTEM_ERROR | 105,
+    GPG_ERR_EOVERFLOW = GPG_ERR_SYSTEM_ERROR | 106,
+    GPG_ERR_EPERM = GPG_ERR_SYSTEM_ERROR | 107,
+    GPG_ERR_EPFNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 108,
+    GPG_ERR_EPIPE = GPG_ERR_SYSTEM_ERROR | 109,
+    GPG_ERR_EPROCLIM = GPG_ERR_SYSTEM_ERROR | 110,
+    GPG_ERR_EPROCUNAVAIL = GPG_ERR_SYSTEM_ERROR | 111,
+    GPG_ERR_EPROGMISMATCH = GPG_ERR_SYSTEM_ERROR | 112,
+    GPG_ERR_EPROGUNAVAIL = GPG_ERR_SYSTEM_ERROR | 113,
+    GPG_ERR_EPROTO = GPG_ERR_SYSTEM_ERROR | 114,
+    GPG_ERR_EPROTONOSUPPORT = GPG_ERR_SYSTEM_ERROR | 115,
+    GPG_ERR_EPROTOTYPE = GPG_ERR_SYSTEM_ERROR | 116,
+    GPG_ERR_ERANGE = GPG_ERR_SYSTEM_ERROR | 117,
+    GPG_ERR_EREMCHG = GPG_ERR_SYSTEM_ERROR | 118,
+    GPG_ERR_EREMOTE = GPG_ERR_SYSTEM_ERROR | 119,
+    GPG_ERR_EREMOTEIO = GPG_ERR_SYSTEM_ERROR | 120,
+    GPG_ERR_ERESTART = GPG_ERR_SYSTEM_ERROR | 121,
+    GPG_ERR_EROFS = GPG_ERR_SYSTEM_ERROR | 122,
+    GPG_ERR_ERPCMISMATCH = GPG_ERR_SYSTEM_ERROR | 123,
+    GPG_ERR_ESHUTDOWN = GPG_ERR_SYSTEM_ERROR | 124,
+    GPG_ERR_ESOCKTNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 125,
+    GPG_ERR_ESPIPE = GPG_ERR_SYSTEM_ERROR | 126,
+    GPG_ERR_ESRCH = GPG_ERR_SYSTEM_ERROR | 127,
+    GPG_ERR_ESRMNT = GPG_ERR_SYSTEM_ERROR | 128,
+    GPG_ERR_ESTALE = GPG_ERR_SYSTEM_ERROR | 129,
+    GPG_ERR_ESTRPIPE = GPG_ERR_SYSTEM_ERROR | 130,
+    GPG_ERR_ETIME = GPG_ERR_SYSTEM_ERROR | 131,
+    GPG_ERR_ETIMEDOUT = GPG_ERR_SYSTEM_ERROR | 132,
+    GPG_ERR_ETOOMANYREFS = GPG_ERR_SYSTEM_ERROR | 133,
+    GPG_ERR_ETXTBSY = GPG_ERR_SYSTEM_ERROR | 134,
+    GPG_ERR_EUCLEAN = GPG_ERR_SYSTEM_ERROR | 135,
+    GPG_ERR_EUNATCH = GPG_ERR_SYSTEM_ERROR | 136,
+    GPG_ERR_EUSERS = GPG_ERR_SYSTEM_ERROR | 137,
+    GPG_ERR_EWOULDBLOCK = GPG_ERR_SYSTEM_ERROR | 138,
+    GPG_ERR_EXDEV = GPG_ERR_SYSTEM_ERROR | 139,
+    GPG_ERR_EXFULL = GPG_ERR_SYSTEM_ERROR | 140,
+
+    /* This is one more than the largest allowed entry.  */
+    GPG_ERR_CODE_DIM = 65536
+  } gpg_err_code_t;
+
+
+/* The error value type gpg_error_t.  */
+
+/* We would really like to use bit-fields in a struct, but using
+ * structs as return values can cause binary compatibility issues, in
+ * particular if you want to do it efficiently (also see
+ * -freg-struct-return option to GCC).  */
+typedef unsigned int gpg_error_t;
+
+/* We use the lowest 16 bits of gpg_error_t for error codes.  The 16th
+ * bit indicates system errors.  */
+#define GPG_ERR_CODE_MASK	(GPG_ERR_CODE_DIM - 1)
+
+/* Bits 17 to 24 are reserved.  */
+
+/* We use the upper 7 bits of gpg_error_t for error sources.  */
+#define GPG_ERR_SOURCE_MASK	(GPG_ERR_SOURCE_DIM - 1)
+#define GPG_ERR_SOURCE_SHIFT	24
+
+/* The highest bit is reserved.  It shouldn't be used to prevent
+ * potential negative numbers when transmitting error values as
+ * text.  */
+
+
+/*
+ * GCC feature test.
+ */
+#if __GNUC__
+# define _GPG_ERR_GCC_VERSION (__GNUC__ * 10000 \
+                               + __GNUC_MINOR__ * 100 \
+                               + __GNUC_PATCHLEVEL__)
+#else
+# define _GPG_ERR_GCC_VERSION 0
+#endif
+
+#undef _GPG_ERR_HAVE_CONSTRUCTOR
+#if _GPG_ERR_GCC_VERSION > 30100
+# define _GPG_ERR_CONSTRUCTOR	__attribute__ ((__constructor__))
+# define _GPG_ERR_HAVE_CONSTRUCTOR
+#else
+# define _GPG_ERR_CONSTRUCTOR
+#endif
+
+#define GPGRT_GCC_VERSION  _GPG_ERR_GCC_VERSION
+
+#if _GPG_ERR_GCC_VERSION >= 29200
+# define _GPGRT__RESTRICT __restrict__
+#else
+# define _GPGRT__RESTRICT
+#endif
+
+/* The noreturn attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_ATTR_NORETURN   __attribute__ ((__noreturn__))
+#else
+# define GPGRT_ATTR_NORETURN
+#endif
+
+/* The printf attributes.  */
+#if _GPG_ERR_GCC_VERSION >= 40400
+# define GPGRT_ATTR_PRINTF(f, a) \
+                    __attribute__ ((format(__gnu_printf__,f,a)))
+# define GPGRT_ATTR_NR_PRINTF(f, a) \
+                    __attribute__ ((__noreturn__, format(__gnu_printf__,f,a)))
+#elif _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_ATTR_PRINTF(f, a) \
+                    __attribute__ ((format(printf,f,a)))
+# define GPGRT_ATTR_NR_PRINTF(f, a) \
+                    __attribute__ ((__noreturn__, format(printf,f,a)))
+#else
+# define GPGRT_ATTR_PRINTF(f, a)
+# define GPGRT_ATTR_NR_PRINTF(f, a)
+#endif
+#if _GPG_ERR_GCC_VERSION >= 20800
+# define GPGRT_ATTR_FORMAT_ARG(a)  __attribute__ ((__format_arg__ (a)))
+#else
+# define GPGRT_ATTR_FORMAT_ARG(a)
+#endif
+
+/* The sentinel attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 40000
+# define GPGRT_ATTR_SENTINEL(a)  __attribute__ ((sentinel(a)))
+#else
+# define GPGRT_ATTR_SENTINEL(a)
+#endif
+
+/* The used and unused attributes.
+ * I am not sure since when the unused attribute is really supported.
+ * In any case it it only needed for gcc versions which print a
+ * warning.  Thus let us require gcc >= 3.5.  */
+#if _GPG_ERR_GCC_VERSION >= 40000
+# define GPGRT_ATTR_USED  __attribute__ ((used))
+#else
+# define GPGRT_ATTR_USED
+#endif
+#if _GPG_ERR_GCC_VERSION >= 30500
+# define GPGRT_ATTR_UNUSED  __attribute__ ((unused))
+#else
+# define GPGRT_ATTR_UNUSED
+#endif
+
+/* The deprecated attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 30100
+# define GPGRT_ATTR_DEPRECATED  __attribute__ ((__deprecated__))
+#else
+# define GPGRT_ATTR_DEPRECATED
+#endif
+
+/* The pure attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 29600
+# define GPGRT_ATTR_PURE  __attribute__ ((__pure__))
+#else
+# define GPGRT_ATTR_PURE
+#endif
+
+/* The malloc attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 30200
+# define GPGRT_ATTR_MALLOC  __attribute__ ((__malloc__))
+#else
+# define GPGRT_ATTR_MALLOC
+#endif
+
+/* A macro defined if a GCC style __FUNCTION__ macro is available.  */
+#undef GPGRT_HAVE_MACRO_FUNCTION
+#if _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_HAVE_MACRO_FUNCTION 1
+#endif
+
+/* A macro defined if the pragma GCC push_options is available.  */
+#undef GPGRT_HAVE_PRAGMA_GCC_PUSH
+#if _GPG_ERR_GCC_VERSION >= 40400
+# define GPGRT_HAVE_PRAGMA_GCC_PUSH 1
+#endif
+
+/* Detect LeakSanitizer (LSan) support for GCC and Clang based on
+ * whether AddressSanitizer (ASAN) is enabled via -fsanitize=address).
+ * Note that -fsanitize=leak just affect the linker options which
+ * cannot be detected here.  In that case you have to define the
+ * GPGRT_HAVE_LEAK_SANITIZER macro manually.  */
+#ifdef __GNUC__
+# ifdef __SANITIZE_ADDRESS__
+#  define GPGRT_HAVE_LEAK_SANITIZER
+# elif defined(__has_feature)
+#  if __has_feature(address_sanitizer)
+#   define GPGRT_HAVE_LEAK_SANITIZER
+#  endif
+# endif
+#endif
+
+
+/* The new name for the inline macro.  */
+#define GPGRT_INLINE GPG_ERR_INLINE
+
+#ifdef GPGRT_HAVE_LEAK_SANITIZER
+# include <sanitizer/lsan_interface.h>
+#endif
+
+/* Mark heap objects as non-leaked memory. */
+static GPGRT_INLINE void
+gpgrt_annotate_leaked_object (const void *p)
+{
+#ifdef GPGRT_HAVE_LEAK_SANITIZER
+  __lsan_ignore_object(p);
+#else
+  (void)p;
+#endif
+}
+
+
+/*
+ * Initialization function.
+ */
+
+/* Initialize the library.  This function should be run early.  */
+gpg_error_t gpg_err_init (void) _GPG_ERR_CONSTRUCTOR;
+
+/* If this is defined, the library is already initialized by the
+   constructor and does not need to be initialized explicitely.  */
+#undef GPG_ERR_INITIALIZED
+#ifdef _GPG_ERR_HAVE_CONSTRUCTOR
+# define GPG_ERR_INITIALIZED	1
+# define gpgrt_init() do { gpg_err_init (); } while (0)
+#else
+# define gpgrt_init() do { ; } while (0)
+#endif
+
+/* See the source on how to use the deinit function; it is usually not
+   required.  */
+void gpg_err_deinit (int mode);
+
+/* Register blocking system I/O clamping functions.  */
+void gpgrt_set_syscall_clamp (void (*pre)(void), void (*post)(void));
+
+/* Get current I/O clamping functions.  */
+void gpgrt_get_syscall_clamp (void (**r_pre)(void), void (**r_post)(void));
+
+/* Register a custom malloc/realloc/free function.  */
+void gpgrt_set_alloc_func  (void *(*f)(void *a, size_t n));
+
+/* Register an emergency cleanup handler.  */
+void gpgrt_add_emergency_cleanup (void (*f)(void));
+
+/* Wrapper around abort to make sure emergency cleanups are run.  */
+void gpgrt_abort (void) GPGRT_ATTR_NORETURN;
+
+
+
+/*
+ * Constructor and accessor functions.
+ */
+
+/* Construct an error value from an error code and source.  Within a
+ * subsystem, use gpg_error.  */
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_make (gpg_err_source_t source, gpg_err_code_t code)
+{
+  return code == GPG_ERR_NO_ERROR ? GPG_ERR_NO_ERROR
+    : (((source & GPG_ERR_SOURCE_MASK) << GPG_ERR_SOURCE_SHIFT)
+       | (code & GPG_ERR_CODE_MASK));
+}
+
+
+/* The user should define GPG_ERR_SOURCE_DEFAULT before including this
+ * file to specify a default source for gpg_error.  */
+#ifndef GPG_ERR_SOURCE_DEFAULT
+#define GPG_ERR_SOURCE_DEFAULT	GPG_ERR_SOURCE_UNKNOWN
+#endif
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error (gpg_err_code_t code)
+{
+  return gpg_err_make (GPG_ERR_SOURCE_DEFAULT, code);
+}
+
+
+/* Retrieve the error code from an error value.  */
+static GPG_ERR_INLINE gpg_err_code_t
+gpg_err_code (gpg_error_t err)
+{
+  return (gpg_err_code_t) (err & GPG_ERR_CODE_MASK);
+}
+
+
+/* Retrieve the error source from an error value.  */
+static GPG_ERR_INLINE gpg_err_source_t
+gpg_err_source (gpg_error_t err)
+{
+  return (gpg_err_source_t) ((err >> GPG_ERR_SOURCE_SHIFT)
+			     & GPG_ERR_SOURCE_MASK);
+}
+
+
+/* String functions.  */
+
+/* Return a pointer to a string containing a description of the error
+ * code in the error value ERR.  This function is not thread-safe.  */
+const char *gpg_strerror (gpg_error_t err);
+
+/* Return the error string for ERR in the user-supplied buffer BUF of
+ * size BUFLEN.  This function is, in contrast to gpg_strerror,
+ * thread-safe if a thread-safe strerror_r() function is provided by
+ * the system.  If the function succeeds, 0 is returned and BUF
+ * contains the string describing the error.  If the buffer was not
+ * large enough, ERANGE is returned and BUF contains as much of the
+ * beginning of the error string as fits into the buffer.  */
+int gpg_strerror_r (gpg_error_t err, char *buf, size_t buflen);
+
+/* Return a pointer to a string containing a description of the error
+ * source in the error value ERR.  */
+const char *gpg_strsource (gpg_error_t err);
+
+
+/*
+ * Mapping of system errors (errno).
+ */
+
+/* Retrieve the error code for the system error ERR.  This returns
+ * GPG_ERR_UNKNOWN_ERRNO if the system error is not mapped (report
+ * this). */
+gpg_err_code_t gpg_err_code_from_errno (int err);
+
+/* Retrieve the system error for the error code CODE.  This returns 0
+ * if CODE is not a system error code.  */
+int gpg_err_code_to_errno (gpg_err_code_t code);
+
+/* Retrieve the error code directly from the ERRNO variable.  This
+ * returns GPG_ERR_UNKNOWN_ERRNO if the system error is not mapped
+ * (report this) and GPG_ERR_MISSING_ERRNO if ERRNO has the value 0. */
+gpg_err_code_t gpg_err_code_from_syserror (void);
+
+/* Mapper for SQLite primary error codes.  */
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_code_from_sqlite (int sqlres)
+{
+  return sqlres? GPG_ERR_SQL_OK + (sqlres & 0xff) : 0;
+}
+
+
+/* Set the ERRNO variable.  This function is the preferred way to set
+ * ERRNO due to peculiarities on WindowsCE.  */
+void gpg_err_set_errno (int err);
+
+/* Return or check the version.  Both functions are identical.  */
+const char *gpgrt_check_version (const char *req_version);
+const char *gpg_error_check_version (const char *req_version);
+
+/* System specific type definitions.  */
+#include <sys/types.h>
+
+typedef ssize_t gpgrt_ssize_t;
+
+typedef long gpgrt_off_t;
+
+
+
+
+/* Self-documenting convenience functions.  */
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_make_from_errno (gpg_err_source_t source, int err)
+{
+  return gpg_err_make (source, gpg_err_code_from_errno (err));
+}
+
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error_from_errno (int err)
+{
+  return gpg_error (gpg_err_code_from_errno (err));
+}
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error_from_syserror (void)
+{
+  return gpg_error (gpg_err_code_from_syserror ());
+}
+
+
+
+/*
+ * Malloc and friends
+ */
+
+void *gpgrt_realloc (void *a, size_t n);
+void *gpgrt_reallocarray (void *a, size_t oldnmemb, size_t nmemb, size_t size);
+void *gpgrt_malloc (size_t n);
+void *gpgrt_calloc (size_t n, size_t m);
+char *gpgrt_strdup (const char *string);
+char *gpgrt_strconcat (const char *s1, ...) GPGRT_ATTR_SENTINEL(0);
+void gpgrt_free (void *a);
+
+
+/*
+ * System specific function wrappers.
+ */
+
+/* A getenv replacement which mallocs the returned string.  */
+char *gpgrt_getenv (const char *name);
+
+/* A setenv and a unsetenv replacement.*/
+gpg_err_code_t gpgrt_setenv (const char *name,
+                             const char *value, int overwrite);
+#define gpgrt_unsetenv(n) gpgrt_setenv ((n), NULL, 1)
+
+/* A wrapper around mkdir using a string for the mode.  */
+gpg_err_code_t gpgrt_mkdir (const char *name, const char *modestr);
+
+/* A simple wrapper around chdir.  */
+gpg_err_code_t gpgrt_chdir (const char *name);
+
+/* Return the current WD as a malloced string.  */
+char *gpgrt_getcwd (void);
+
+/* A wrapper around access to handle UTF-8 on Windows.  */
+gpg_err_code_t gpgrt_access (const char *fname, int mode);
+
+
+
+
+/*
+ * Lock functions.
+ */
+
+
+typedef struct
+{
+  long _vers;
+  union {
+    volatile char _priv[40];
+    long _x_align;
+    long *_xp_align;
+  } u;
+} gpgrt_lock_t;
+
+#define GPGRT_LOCK_INITIALIZER {1,{{0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0}}}
+
+
+#define GPGRT_LOCK_DEFINE(name) \
+  static gpgrt_lock_t name  = GPGRT_LOCK_INITIALIZER
+
+/* NB: If GPGRT_LOCK_DEFINE is not used, zero out the lock variable
+   before passing it to gpgrt_lock_init.  */
+gpg_err_code_t gpgrt_lock_init (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_lock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_trylock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_unlock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_destroy (gpgrt_lock_t *lockhd);
+
+
+
+/*
+ * Thread functions.
+ */
+
+gpg_err_code_t gpgrt_yield (void);
+
+
+
+
+/*
+ * Estream
+ */
+
+/* The definition of this struct is entirely private.  You must not
+   use it for anything.  It is only here so some functions can be
+   implemented as macros.  */
+struct _gpgrt_stream_internal;
+struct _gpgrt__stream
+{
+  /* The layout of this struct must never change.  It may be grown,
+     but only if all functions which access the new members are
+     versioned.  */
+
+  /* Various flags.  */
+  struct {
+    unsigned int magic: 16;
+    unsigned int writing: 1;
+    unsigned int reserved: 15;
+  } flags;
+
+  /* A pointer to the stream buffer.  */
+  unsigned char *buffer;
+
+  /* The size of the buffer in bytes.  */
+  size_t buffer_size;
+
+  /* The length of the usable data in the buffer, only valid when in
+     read mode (see flags).  */
+  size_t data_len;
+
+  /* The current position of the offset pointer, valid in read and
+     write mode.  */
+  size_t data_offset;
+
+  size_t data_flushed;
+  unsigned char *unread_buffer;
+  size_t unread_buffer_size;
+
+  /* The number of unread bytes.  */
+  size_t unread_data_len;
+
+  /* A pointer to our internal data for this stream.  */
+  struct _gpgrt_stream_internal *intern;
+};
+
+/* The opaque type for an estream.  */
+typedef struct _gpgrt__stream *gpgrt_stream_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt__stream *estream_t;
+#endif
+
+typedef ssize_t (*gpgrt_cookie_read_function_t) (void *cookie,
+                                                 void *buffer, size_t size);
+typedef ssize_t (*gpgrt_cookie_write_function_t) (void *cookie,
+                                                  const void *buffer,
+                                                  size_t size);
+typedef int (*gpgrt_cookie_seek_function_t) (void *cookie,
+                                             gpgrt_off_t *pos, int whence);
+typedef int (*gpgrt_cookie_close_function_t) (void *cookie);
+
+struct _gpgrt_cookie_io_functions
+{
+  gpgrt_cookie_read_function_t func_read;
+  gpgrt_cookie_write_function_t func_write;
+  gpgrt_cookie_seek_function_t func_seek;
+  gpgrt_cookie_close_function_t func_close;
+};
+typedef struct _gpgrt_cookie_io_functions gpgrt_cookie_io_functions_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_cookie_io_functions  es_cookie_io_functions_t;
+#define es_cookie_read_function_t  gpgrt_cookie_read_function_t
+#define es_cookie_write_function_t gpgrt_cookie_read_function_t
+#define es_cookie_seek_function_t  gpgrt_cookie_read_function_t
+#define es_cookie_close_function_t gpgrt_cookie_read_function_t
+#endif
+
+enum gpgrt_syshd_types
+  {
+    GPGRT_SYSHD_NONE = 0,  /* No system handle available.                   */
+    GPGRT_SYSHD_FD = 1,    /* A file descriptor as returned by open().      */
+    GPGRT_SYSHD_SOCK = 2,  /* A socket as returned by socket().             */
+    GPGRT_SYSHD_RVID = 3,  /* A rendezvous id (see libassuan's gpgcedev.c).  */
+    GPGRT_SYSHD_HANDLE = 4 /* A HANDLE object (Windows).                    */
+  };
+
+struct _gpgrt_syshd
+{
+  enum gpgrt_syshd_types type;
+  union {
+    int fd;
+    int sock;
+    int rvid;
+    void *handle;
+  } u;
+};
+typedef struct _gpgrt_syshd gpgrt_syshd_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_syshd es_syshd_t;
+#define ES_SYSHD_NONE   GPGRT_SYSHD_NONE
+#define ES_SYSHD_FD     GPGRT_SYSHD_FD
+#define ES_SYSHD_SOCK   GPGRT_SYSHD_SOCK
+#define ES_SYSHD_RVID   GPGRT_SYSHD_RVID
+#define ES_SYSHD_HANDLE GPGRT_SYSHD_HANDLE
+#endif
+
+/* The object used with gpgrt_poll.  */
+struct _gpgrt_poll_s
+{
+  gpgrt_stream_t stream;
+  unsigned int want_read:1;
+  unsigned int want_write:1;
+  unsigned int want_oob:1;
+  unsigned int want_rdhup:1;
+  unsigned int _reserv1:4;
+  unsigned int got_read:1;
+  unsigned int got_write:1;
+  unsigned int got_oob:1;
+  unsigned int got_rdhup:1;
+  unsigned int _reserv2:4;
+  unsigned int got_err:1;
+  unsigned int got_hup:1;
+  unsigned int got_nval:1;
+  unsigned int _reserv3:4;
+  unsigned int ignore:1;
+  unsigned int user:8;       /* For application use.  */
+};
+typedef struct _gpgrt_poll_s gpgrt_poll_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_poll_s es_poll_t;
+#endif
+
+/* The type of the string filter function as used by fprintf_sf et al.  */
+typedef char *(*gpgrt_string_filter_t) (const char *s, int n, void *opaque);
+
+
+
+gpgrt_stream_t gpgrt_fopen (const char *_GPGRT__RESTRICT path,
+                            const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_mopen (void *_GPGRT__RESTRICT data,
+                            size_t data_n, size_t data_len,
+                            unsigned int grow,
+                            void *(*func_realloc) (void *mem, size_t size),
+                            void (*func_free) (void *mem),
+                            const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_fopenmem (size_t memlimit,
+                               const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_fopenmem_init (size_t memlimit,
+                                    const char *_GPGRT__RESTRICT mode,
+                                    const void *data, size_t datalen);
+gpgrt_stream_t gpgrt_fdopen    (int filedes, const char *mode);
+gpgrt_stream_t gpgrt_fdopen_nc (int filedes, const char *mode);
+gpgrt_stream_t gpgrt_sysopen    (gpgrt_syshd_t *syshd, const char *mode);
+gpgrt_stream_t gpgrt_sysopen_nc (gpgrt_syshd_t *syshd, const char *mode);
+gpgrt_stream_t gpgrt_fpopen    (FILE *fp, const char *mode);
+gpgrt_stream_t gpgrt_fpopen_nc (FILE *fp, const char *mode);
+gpgrt_stream_t gpgrt_freopen (const char *_GPGRT__RESTRICT path,
+                              const char *_GPGRT__RESTRICT mode,
+                              gpgrt_stream_t _GPGRT__RESTRICT stream);
+gpgrt_stream_t gpgrt_fopencookie (void *_GPGRT__RESTRICT cookie,
+                                  const char *_GPGRT__RESTRICT mode,
+                                  gpgrt_cookie_io_functions_t functions);
+int gpgrt_fclose (gpgrt_stream_t stream);
+int gpgrt_fcancel (gpgrt_stream_t stream);
+int gpgrt_fclose_snatch (gpgrt_stream_t stream,
+                         void **r_buffer, size_t *r_buflen);
+int gpgrt_onclose (gpgrt_stream_t stream, int mode,
+                   void (*fnc) (gpgrt_stream_t, void*), void *fnc_value);
+int gpgrt_fileno (gpgrt_stream_t stream);
+int gpgrt_fileno_unlocked (gpgrt_stream_t stream);
+int gpgrt_syshd (gpgrt_stream_t stream, gpgrt_syshd_t *syshd);
+int gpgrt_syshd_unlocked (gpgrt_stream_t stream, gpgrt_syshd_t *syshd);
+
+void _gpgrt_set_std_fd (int no, int fd);
+gpgrt_stream_t _gpgrt_get_std_stream (int fd);
+
+#define gpgrt_stdin  _gpgrt_get_std_stream (0)
+#define gpgrt_stdout _gpgrt_get_std_stream (1)
+#define gpgrt_stderr _gpgrt_get_std_stream (2)
+
+
+void gpgrt_flockfile (gpgrt_stream_t stream);
+int  gpgrt_ftrylockfile (gpgrt_stream_t stream);
+void gpgrt_funlockfile (gpgrt_stream_t stream);
+
+int gpgrt_feof (gpgrt_stream_t stream);
+int gpgrt_feof_unlocked (gpgrt_stream_t stream);
+int gpgrt_ferror (gpgrt_stream_t stream);
+int gpgrt_ferror_unlocked (gpgrt_stream_t stream);
+void gpgrt_clearerr (gpgrt_stream_t stream);
+void gpgrt_clearerr_unlocked (gpgrt_stream_t stream);
+
+int _gpgrt_pending (gpgrt_stream_t stream);          /* (private) */
+int _gpgrt_pending_unlocked (gpgrt_stream_t stream); /* (private) */
+
+#define gpgrt_pending(stream) _gpgrt_pending (stream)
+
+#define gpgrt_pending_unlocked(stream)				\
+  (((!(stream)->flags.writing)					\
+    && (((stream)->data_offset < (stream)->data_len)		\
+        || ((stream)->unread_data_len)))                        \
+   ? 1 : _gpgrt_pending_unlocked ((stream)))
+
+int gpgrt_fflush (gpgrt_stream_t stream);
+int gpgrt_fseek (gpgrt_stream_t stream, long int offset, int whence);
+int gpgrt_fseeko (gpgrt_stream_t stream, gpgrt_off_t offset, int whence);
+int gpgrt_ftruncate (gpgrt_stream_t stream, gpgrt_off_t length);
+long int gpgrt_ftell (gpgrt_stream_t stream);
+gpgrt_off_t gpgrt_ftello (gpgrt_stream_t stream);
+void gpgrt_rewind (gpgrt_stream_t stream);
+
+int gpgrt_fgetc (gpgrt_stream_t stream);
+int gpgrt_fputc (int c, gpgrt_stream_t stream);
+
+int _gpgrt_getc_underflow (gpgrt_stream_t stream);       /* (private) */
+int _gpgrt_putc_overflow (int c, gpgrt_stream_t stream); /* (private) */
+
+#define gpgrt_getc_unlocked(stream)				\
+  (((!(stream)->flags.writing)					\
+    && ((stream)->data_offset < (stream)->data_len)		\
+    && (! (stream)->unread_data_len))				\
+  ? ((int) (stream)->buffer[((stream)->data_offset)++])		\
+  : _gpgrt_getc_underflow ((stream)))
+
+#define gpgrt_putc_unlocked(c, stream)				\
+  (((stream)->flags.writing					\
+    && ((stream)->data_offset < (stream)->buffer_size)		\
+    && (c != '\n'))						\
+  ? ((int) ((stream)->buffer[((stream)->data_offset)++] = (c)))	\
+  : _gpgrt_putc_overflow ((c), (stream)))
+
+#define gpgrt_getc(stream)    gpgrt_fgetc (stream)
+#define gpgrt_putc(c, stream) gpgrt_fputc (c, stream)
+
+int gpgrt_ungetc (int c, gpgrt_stream_t stream);
+
+int gpgrt_read (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                void *_GPGRT__RESTRICT buffer, size_t bytes_to_read,
+                size_t *_GPGRT__RESTRICT bytes_read);
+int gpgrt_write (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                 const void *_GPGRT__RESTRICT buffer, size_t bytes_to_write,
+                 size_t *_GPGRT__RESTRICT bytes_written);
+int gpgrt_write_sanitized (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                           const void *_GPGRT__RESTRICT buffer, size_t length,
+                           const char *delimiters,
+                           size_t *_GPGRT__RESTRICT bytes_written);
+int gpgrt_write_hexstring (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                           const void *_GPGRT__RESTRICT buffer, size_t length,
+                           int reserved,
+                           size_t *_GPGRT__RESTRICT bytes_written);
+
+size_t gpgrt_fread (void *_GPGRT__RESTRICT ptr, size_t size, size_t nitems,
+                    gpgrt_stream_t _GPGRT__RESTRICT stream);
+size_t gpgrt_fwrite (const void *_GPGRT__RESTRICT ptr, size_t size,
+                     size_t nitems, gpgrt_stream_t _GPGRT__RESTRICT stream);
+
+char *gpgrt_fgets (char *_GPGRT__RESTRICT s, int n,
+                   gpgrt_stream_t _GPGRT__RESTRICT stream);
+int gpgrt_fputs (const char *_GPGRT__RESTRICT s,
+                 gpgrt_stream_t _GPGRT__RESTRICT stream);
+int gpgrt_fputs_unlocked (const char *_GPGRT__RESTRICT s,
+                          gpgrt_stream_t _GPGRT__RESTRICT stream);
+
+ssize_t gpgrt_getline (char *_GPGRT__RESTRICT *_GPGRT__RESTRICT lineptr,
+                       size_t *_GPGRT__RESTRICT n,
+                       gpgrt_stream_t stream);
+ssize_t gpgrt_read_line (gpgrt_stream_t stream,
+                         char **addr_of_buffer, size_t *length_of_buffer,
+                         size_t *max_length);
+
+int gpgrt_fprintf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   const char *_GPGRT__RESTRICT format, ...)
+                   GPGRT_ATTR_PRINTF(2,3);
+int gpgrt_fprintf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                            const char *_GPGRT__RESTRICT format, ...)
+                            GPGRT_ATTR_PRINTF(2,3);
+
+int gpgrt_fprintf_sf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                      gpgrt_string_filter_t sf, void *sfvalue,
+                      const char *_GPGRT__RESTRICT format,
+                      ...) GPGRT_ATTR_PRINTF(4,5);
+int gpgrt_fprintf_sf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                               gpgrt_string_filter_t sf, void *sfvalue,
+                               const char *_GPGRT__RESTRICT format,
+                               ...) GPGRT_ATTR_PRINTF(4,5);
+
+int gpgrt_printf (const char *_GPGRT__RESTRICT format, ...)
+                  GPGRT_ATTR_PRINTF(1,2);
+int gpgrt_printf_unlocked (const char *_GPGRT__RESTRICT format, ...)
+                           GPGRT_ATTR_PRINTF(1,2);
+
+int gpgrt_vfprintf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                    const char *_GPGRT__RESTRICT format, va_list ap)
+                    GPGRT_ATTR_PRINTF(2,0);
+int gpgrt_vfprintf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                             const char *_GPGRT__RESTRICT format, va_list ap)
+                             GPGRT_ATTR_PRINTF(2,0);
+
+int gpgrt_setvbuf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   char *_GPGRT__RESTRICT buf, int mode, size_t size);
+void gpgrt_setbuf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   char *_GPGRT__RESTRICT buf);
+
+void gpgrt_set_binary (gpgrt_stream_t stream);
+int  gpgrt_set_nonblock (gpgrt_stream_t stream, int onoff);
+int  gpgrt_get_nonblock (gpgrt_stream_t stream);
+
+int gpgrt_poll (gpgrt_poll_t *fdlist, unsigned int nfds, int timeout);
+
+gpgrt_stream_t gpgrt_tmpfile (void);
+
+void gpgrt_opaque_set (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                       void *_GPGRT__RESTRICT opaque);
+void *gpgrt_opaque_get (gpgrt_stream_t stream);
+
+void gpgrt_fname_set (gpgrt_stream_t stream, const char *fname);
+const char *gpgrt_fname_get (gpgrt_stream_t stream);
+
+int gpgrt_asprintf (char **r_buf, const char * _GPGRT__RESTRICT format, ...)
+                    GPGRT_ATTR_PRINTF(2,3);
+int gpgrt_vasprintf (char **r_buf, const char * _GPGRT__RESTRICT format,
+                     va_list ap)
+                     GPGRT_ATTR_PRINTF(2,0);
+char *gpgrt_bsprintf (const char * _GPGRT__RESTRICT format, ...)
+                      GPGRT_ATTR_PRINTF(1,2);
+char *gpgrt_vbsprintf (const char * _GPGRT__RESTRICT format, va_list ap)
+                       GPGRT_ATTR_PRINTF(1,0);
+int gpgrt_snprintf (char *buf, size_t bufsize,
+                    const char * _GPGRT__RESTRICT format, ...)
+                    GPGRT_ATTR_PRINTF(3,4);
+int gpgrt_vsnprintf (char *buf,size_t bufsize,
+                     const char * _GPGRT__RESTRICT format, va_list arg_ptr)
+                     GPGRT_ATTR_PRINTF(3,0);
+
+
+#ifdef GPGRT_ENABLE_ES_MACROS
+# define es_fopen             gpgrt_fopen
+# define es_mopen             gpgrt_mopen
+# define es_fopenmem          gpgrt_fopenmem
+# define es_fopenmem_init     gpgrt_fopenmem_init
+# define es_fdopen            gpgrt_fdopen
+# define es_fdopen_nc         gpgrt_fdopen_nc
+# define es_sysopen           gpgrt_sysopen
+# define es_sysopen_nc        gpgrt_sysopen_nc
+# define es_fpopen            gpgrt_fpopen
+# define es_fpopen_nc         gpgrt_fpopen_nc
+# define es_freopen           gpgrt_freopen
+# define es_fopencookie       gpgrt_fopencookie
+# define es_fclose            gpgrt_fclose
+# define es_fclose_snatch     gpgrt_fclose_snatch
+# define es_onclose           gpgrt_onclose
+# define es_fileno            gpgrt_fileno
+# define es_fileno_unlocked   gpgrt_fileno_unlocked
+# define es_syshd             gpgrt_syshd
+# define es_syshd_unlocked    gpgrt_syshd_unlocked
+# define es_stdin             _gpgrt_get_std_stream (0)
+# define es_stdout            _gpgrt_get_std_stream (1)
+# define es_stderr            _gpgrt_get_std_stream (2)
+# define es_flockfile         gpgrt_flockfile
+# define es_ftrylockfile      gpgrt_ftrylockfile
+# define es_funlockfile       gpgrt_funlockfile
+# define es_feof              gpgrt_feof
+# define es_feof_unlocked     gpgrt_feof_unlocked
+# define es_ferror            gpgrt_ferror
+# define es_ferror_unlocked   gpgrt_ferror_unlocked
+# define es_clearerr          gpgrt_clearerr
+# define es_clearerr_unlocked gpgrt_clearerr_unlocked
+# define es_pending           gpgrt_pending
+# define es_pending_unlocked  gpgrt_pending_unlocked
+# define es_fflush            gpgrt_fflush
+# define es_fseek             gpgrt_fseek
+# define es_fseeko            gpgrt_fseeko
+# define es_ftruncate         gpgrt_ftruncate
+# define es_ftell             gpgrt_ftell
+# define es_ftello            gpgrt_ftello
+# define es_rewind            gpgrt_rewind
+# define es_fgetc             gpgrt_fgetc
+# define es_fputc             gpgrt_fputc
+# define es_getc_unlocked     gpgrt_getc_unlocked
+# define es_putc_unlocked     gpgrt_putc_unlocked
+# define es_getc              gpgrt_getc
+# define es_putc              gpgrt_putc
+# define es_ungetc            gpgrt_ungetc
+# define es_read              gpgrt_read
+# define es_write             gpgrt_write
+# define es_write_sanitized   gpgrt_write_sanitized
+# define es_write_hexstring   gpgrt_write_hexstring
+# define es_fread             gpgrt_fread
+# define es_fwrite            gpgrt_fwrite
+# define es_fgets             gpgrt_fgets
+# define es_fputs             gpgrt_fputs
+# define es_fputs_unlocked    gpgrt_fputs_unlocked
+# define es_getline           gpgrt_getline
+# define es_read_line         gpgrt_read_line
+# define es_free              gpgrt_free
+# define es_fprintf           gpgrt_fprintf
+# define es_fprintf_unlocked  gpgrt_fprintf_unlocked
+# define es_printf            gpgrt_printf
+# define es_printf_unlocked   gpgrt_printf_unlocked
+# define es_vfprintf          gpgrt_vfprintf
+# define es_vfprintf_unlocked gpgrt_vfprintf_unlocked
+# define es_setvbuf           gpgrt_setvbuf
+# define es_setbuf            gpgrt_setbuf
+# define es_set_binary        gpgrt_set_binary
+# define es_set_nonblock      gpgrt_set_nonblock
+# define es_get_nonblock      gpgrt_get_nonblock
+# define es_poll              gpgrt_poll
+# define es_tmpfile           gpgrt_tmpfile
+# define es_opaque_set        gpgrt_opaque_set
+# define es_opaque_get        gpgrt_opaque_get
+# define es_fname_set         gpgrt_fname_set
+# define es_fname_get         gpgrt_fname_get
+# define es_asprintf          gpgrt_asprintf
+# define es_vasprintf         gpgrt_vasprintf
+# define es_bsprintf          gpgrt_bsprintf
+# define es_vbsprintf         gpgrt_vbsprintf
+#endif /*GPGRT_ENABLE_ES_MACROS*/
+
+
+
+/*
+ * Base64 encode and decode functions.
+ */
+
+struct _gpgrt_b64state;
+typedef struct _gpgrt_b64state *gpgrt_b64state_t;
+
+gpgrt_b64state_t gpgrt_b64enc_start (gpgrt_stream_t stream, const char *title);
+gpg_err_code_t   gpgrt_b64enc_write (gpgrt_b64state_t state,
+                                     const void *buffer, size_t nbytes);
+gpg_err_code_t   gpgrt_b64enc_finish (gpgrt_b64state_t state);
+
+gpgrt_b64state_t gpgrt_b64dec_start (const char *title);
+gpg_error_t      gpgrt_b64dec_proc (gpgrt_b64state_t state,
+                                    void *buffer, size_t length,
+                                    size_t *r_nbytes);
+gpg_error_t      gpgrt_b64dec_finish (gpgrt_b64state_t state);
+
+
+
+/*
+ * Logging functions
+ */
+
+/* Flag values for gpgrt_log_set_prefix. */
+#define GPGRT_LOG_WITH_PREFIX  1
+#define GPGRT_LOG_WITH_TIME    2
+#define GPGRT_LOG_WITH_PID     4
+#define GPGRT_LOG_RUN_DETACHED 256
+#define GPGRT_LOG_NO_REGISTRY  512
+
+/* Log levels as used by gpgrt_log.  */
+enum gpgrt_log_levels
+  {
+    GPGRT_LOGLVL_BEGIN,
+    GPGRT_LOGLVL_CONT,
+    GPGRT_LOGLVL_INFO,
+    GPGRT_LOGLVL_WARN,
+    GPGRT_LOGLVL_ERROR,
+    GPGRT_LOGLVL_FATAL,
+    GPGRT_LOGLVL_BUG,
+    GPGRT_LOGLVL_DEBUG
+  };
+
+
+/* The next 4 functions are not thread-safe - call them early.  */
+void gpgrt_log_set_sink (const char *name, gpgrt_stream_t stream, int fd);
+void gpgrt_log_set_socket_dir_cb (const char *(*fnc)(void));
+void gpgrt_log_set_pid_suffix_cb (int (*cb)(unsigned long *r_value));
+void gpgrt_log_set_prefix (const char *text, unsigned int flags);
+
+int  gpgrt_get_errorcount (int clear);
+void gpgrt_inc_errorcount (void);
+const char *gpgrt_log_get_prefix (unsigned int *flags);
+int  gpgrt_log_test_fd (int fd);
+int  gpgrt_log_get_fd (void);
+gpgrt_stream_t gpgrt_log_get_stream (void);
+
+void gpgrt_log (int level, const char *fmt, ...) GPGRT_ATTR_PRINTF(2,3);
+void gpgrt_logv (int level, const char *fmt, va_list arg_ptr);
+void gpgrt_logv_prefix (int level, const char *prefix,
+                              const char *fmt, va_list arg_ptr);
+void gpgrt_log_string (int level, const char *string);
+void gpgrt_log_bug (const char *fmt, ...)    GPGRT_ATTR_NR_PRINTF(1,2);
+void gpgrt_log_fatal (const char *fmt, ...)  GPGRT_ATTR_NR_PRINTF(1,2);
+void gpgrt_log_error (const char *fmt, ...)  GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_info (const char *fmt, ...)   GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_debug (const char *fmt, ...)  GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_debug_string (const char *string,
+                             const char *fmt, ...) GPGRT_ATTR_PRINTF(2,3);
+void gpgrt_log_printf (const char *fmt, ...) GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_printhex (const void *buffer, size_t length,
+                         const char *fmt, ...) GPGRT_ATTR_PRINTF(3,4);
+void gpgrt_log_clock (const char *fmt, ...) GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_flush (void);
+void _gpgrt_log_assert (const char *expr, const char *file, int line,
+                        const char *func) GPGRT_ATTR_NORETURN;
+
+#ifdef GPGRT_HAVE_MACRO_FUNCTION
+# define gpgrt_assert(expr)                                     \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, __FUNCTION__))
+#else /*!GPGRT_HAVE_MACRO_FUNCTION*/
+# define gpgrt_assert(expr)                                     \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, NULL))
+#endif /*!GPGRT_HAVE_MACRO_FUNCTION*/
+
+#ifdef GPGRT_ENABLE_LOG_MACROS
+# define log_get_errorcount      gpgrt_get_errorcount
+# define log_inc_errorcount      gpgrt_inc_errorcount
+# define log_set_file(a)         gpgrt_log_set_sink ((a), NULL, -1)
+# define log_set_fd(a)           gpgrt_log_set_sink (NULL, NULL, (a))
+# define log_set_stream(a)       gpgrt_log_set_sink (NULL, (a), -1)
+# define log_set_socket_dir_cb   gpgrt_log_set_socket_dir_cb
+# define log_set_pid_suffix_cb   gpgrt_log_set_pid_suffix_cb
+# define log_set_prefix          gpgrt_log_set_prefix
+# define log_get_prefix          gpgrt_log_get_prefix
+# define log_test_fd             gpgrt_log_test_fd
+# define log_get_fd              gpgrt_log_get_fd
+# define log_get_stream          gpgrt_log_get_stream
+# define log_log                 gpgrt_log
+# define log_logv                gpgrt_logv
+# define log_logv_prefix         gpgrt_logv_prefix
+# define log_string              gpgrt_log_string
+# define log_bug                 gpgrt_log_bug
+# define log_fatal               gpgrt_log_fatal
+# define log_error               gpgrt_log_error
+# define log_info                gpgrt_log_info
+# define log_debug               gpgrt_log_debug
+# define log_debug_string        gpgrt_log_debug_string
+# define log_printf              gpgrt_log_printf
+# define log_printhex            gpgrt_log_printhex
+# define log_clock               gpgrt_log_clock
+# define log_flush               gpgrt_log_flush
+# ifdef GPGRT_HAVE_MACRO_FUNCTION
+#  define log_assert(expr)                                      \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, __FUNCTION__))
+# else /*!GPGRT_HAVE_MACRO_FUNCTION*/
+#  define log_assert(expr)                                      \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, NULL))
+# endif /*!GPGRT_HAVE_MACRO_FUNCTION*/
+
+#endif /*GPGRT_ENABLE_LOG_MACROS*/
+
+
+/*
+ * Spawn functions  (Not yet available)
+ */
+#define GPGRT_SPAWN_NONBLOCK   16 /* Set the streams to non-blocking.      */
+#define GPGRT_SPAWN_RUN_ASFW   64 /* Use AllowSetForegroundWindow on W32.  */
+#define GPGRT_SPAWN_DETACHED  128 /* Start the process in the background.  */
+
+#if 0
+
+/* Function and convenience macros to create pipes.  */
+gpg_err_code_t gpgrt_make_pipe (int filedes[2], gpgrt_stream_t *r_fp,
+                                int direction, int nonblock);
+#define gpgrt_create_pipe(a)              gpgrt_make_pipe ((a),NULL,  0,  0);
+#define gpgrt_create_inbound_pipe(a,b,c)  gpgrt_make_pipe ((a), (b), -1,(c));
+#define gpgrt_create_outbound_pipe(a,b,c) gpgrt_make_pipe ((a), (b),  1,(c));
+
+
+/* Fork and exec PGMNAME.  */
+gpg_err_code_t gpgrt_spawn_process (const char *pgmname, const char *argv[],
+                                    int *execpt, void (*preexec)(void),
+                                    unsigned int flags,
+                                    gpgrt_stream_t *r_infp,
+                                    gpgrt_stream_t *r_outfp,
+                                    gpgrt_stream_t *r_errfp,
+                                    pid_t *pid);
+
+/* Fork and exec PGNNAME and connect the process to the given FDs.  */
+gpg_err_code_t gpgrt_spawn_process_fd (const char *pgmname, const char *argv[],
+                                       int infd, int outfd, int errfd,
+                                       pid_t *pid);
+
+/* Fork and exec PGMNAME as a detached process.  */
+gpg_err_code_t gpgrt_spawn_process_detached (const char *pgmname,
+                                             const char *argv[],
+                                             const char *envp[] );
+
+/* Wait for a single process.  */
+gpg_err_code_t gpgrt_wait_process (const char *pgmname, pid_t pid, int hang,
+                                int *r_exitcode);
+
+/* Wait for a multiple processes.  */
+gpg_err_code_t gpgrt_wait_processes (const char **pgmnames, pid_t *pids,
+                                     size_t count, int hang, int *r_exitcodes);
+
+/* Kill the process identified by PID.  */
+void gpgrt_kill_process (pid_t pid);
+
+/* Release process resources identified by PID.  */
+void gpgrt_release_process (pid_t pid);
+
+#endif /*0*/
+
+
+
+/*
+ * Option parsing.
+ */
+
+struct _gpgrt_argparse_internal_s;
+typedef struct
+{
+  int  *argc;	      /* Pointer to ARGC (value subject to change). */
+  char ***argv;	      /* Pointer to ARGV (value subject to change). */
+  unsigned int flags; /* Global flags.  May be set prior to calling the
+                         parser.  The parser may change the value.  */
+  int err;            /* Print error description for last option.
+                         Either 0,  ARGPARSE_PRINT_WARNING or
+                         ARGPARSE_PRINT_ERROR.  */
+  unsigned int lineno;/* The current line number.  */
+  int r_opt; 	      /* Returns option code. */
+  int r_type;	      /* Returns type of option value.  */
+  union {
+    int   ret_int;
+    long  ret_long;
+    unsigned long ret_ulong;
+    char *ret_str;
+  } r;		      /* Return values */
+
+  struct _gpgrt_argparse_internal_s *internal;
+} gpgrt_argparse_t;
+
+
+typedef struct
+{
+  int          short_opt;
+  const char  *long_opt;
+  unsigned int flags;
+  const char  *description; /* Optional description. */
+} gpgrt_opt_t;
+
+
+#ifdef GPGRT_ENABLE_ARGPARSE_MACROS
+
+/* Global flags for (gpgrt_argparse_t).flags.  */
+#define ARGPARSE_FLAG_KEEP        1  /* Do not remove options form argv.     */
+#define ARGPARSE_FLAG_ALL         2  /* Do not stop at last option but return
+                                        remaining args with R_OPT set to -1. */
+#define ARGPARSE_FLAG_MIXED       4  /* Assume options and args are mixed.   */
+#define ARGPARSE_FLAG_NOSTOP      8  /* Do not stop processing at "--".      */
+#define ARGPARSE_FLAG_ARG0       16  /* Do not skip the first arg.           */
+#define ARGPARSE_FLAG_ONEDASH    32  /* Allow long options with one dash.    */
+#define ARGPARSE_FLAG_NOVERSION  64  /* No output for "--version".           */
+#define ARGPARSE_FLAG_RESET     128  /* Request to reset the internal state. */
+#define ARGPARSE_FLAG_STOP_SEEN 256  /* Set to true if a "--" has been seen. */
+#define ARGPARSE_FLAG_NOLINENO  512  /* Do not zero the lineno field.        */
+#define ARGPARSE_FLAG_SYS      1024  /* Use system config file.              */
+#define ARGPARSE_FLAG_USER     2048  /* Use user config file.                */
+#define ARGPARSE_FLAG_VERBOSE  4096  /* Print additional argparser info.     */
+#define ARGPARSE_FLAG_USERVERS 8192  /* Try version-ed user config files.    */
+#define ARGPARSE_FLAG_WITHATTR 16384 /* Return attribute bits.               */
+
+/* Constants for (gpgrt_argparse_t).err.  */
+#define ARGPARSE_PRINT_WARNING  1    /* Print a diagnostic.                  */
+#define ARGPARSE_PRINT_ERROR    2    /* Print a diagnostic and call exit.    */
+
+/* Special return values of gpgrt_argparse.  */
+#define ARGPARSE_IS_ARG            (-1)
+#define ARGPARSE_INVALID_OPTION    (-2)
+#define ARGPARSE_MISSING_ARG       (-3)
+#define ARGPARSE_KEYWORD_TOO_LONG  (-4)
+#define ARGPARSE_READ_ERROR        (-5)
+#define ARGPARSE_UNEXPECTED_ARG    (-6)
+#define ARGPARSE_INVALID_COMMAND   (-7)
+#define ARGPARSE_AMBIGUOUS_OPTION  (-8)
+#define ARGPARSE_AMBIGUOUS_COMMAND (-9)
+#define ARGPARSE_INVALID_ALIAS     (-10)
+#define ARGPARSE_OUT_OF_CORE       (-11)
+#define ARGPARSE_INVALID_ARG       (-12)
+#define ARGPARSE_PERMISSION_ERROR  (-13)
+#define ARGPARSE_NO_CONFFILE       (-14)
+#define ARGPARSE_CONFFILE          (-15)
+#define ARGPARSE_INVALID_META      (-16)
+#define ARGPARSE_UNKNOWN_META      (-17)
+#define ARGPARSE_UNEXPECTED_META   (-18)
+
+/* Flags for the option descriptor (gpgrt_opt_t)->flags.  Note that a
+ * TYPE constant may be or-ed with the OPT constants but when used as
+ * return value in r_type these OPT constants are normally not
+ * included.  However with ARGPARSE_FLAG_WITHATTR used and an option
+ * would normally not be returned, it is returned but
+ * ARGPARSE_OPT_IGNORE is then set; further ARPARSE_ATTR_* are set.
+ */
+#define ARGPARSE_TYPE_MASK   0x0007  /* Mask for the type bits.           */
+#define ARGPARSE_TYPE_NONE        0  /* Does not take an argument.        */
+#define ARGPARSE_TYPE_INT         1  /* Takes an int argument.            */
+#define ARGPARSE_TYPE_STRING      2  /* Takes a string argument.          */
+#define ARGPARSE_TYPE_LONG        3  /* Takes a long argument.            */
+#define ARGPARSE_TYPE_ULONG       4  /* Takes an unsigned long argument.  */
+#define ARGPARSE_OPT_OPTIONAL (1<<3) /* Argument is optional.             */
+#define ARGPARSE_OPT_PREFIX   (1<<4) /* Allow 0x etc. prefixed values.    */
+#define ARGPARSE_OPT_IGNORE   (1<<6) /* Ignore command or option.         */
+#define ARGPARSE_OPT_COMMAND  (1<<7) /* The argument is a command.        */
+#define ARGPARSE_OPT_CONFFILE (1<<8) /* The value is a conffile.          */
+#define ARGPARSE_OPT_HEADER   (1<<9) /* The value is printed as a header. */
+#define ARGPARSE_OPT_VERBATIM (1<<10)/* The value is printed verbatim.    */
+#define ARGPARSE_ATTR_FORCE   (1<<14)/* Attribute force is set.           */
+#define ARGPARSE_ATTR_IGNORE  (1<<15)/* Attribute ignore is set.          */
+
+/* A set of macros to make option definitions easier to read.  */
+#define ARGPARSE_x(s,l,t,f,d) \
+     { (s), (l), ARGPARSE_TYPE_ ## t | (f), (d) }
+
+#define ARGPARSE_s(s,l,t,d) \
+     { (s), (l), ARGPARSE_TYPE_ ## t, (d) }
+#define ARGPARSE_s_n(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_NONE, (d) }
+#define ARGPARSE_s_i(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_INT, (d) }
+#define ARGPARSE_s_s(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_STRING, (d) }
+#define ARGPARSE_s_l(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_LONG, (d) }
+#define ARGPARSE_s_u(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_ULONG, (d) }
+
+#define ARGPARSE_o(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t  | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE   | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT    | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG   | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG  | ARGPARSE_OPT_OPTIONAL), (d) }
+
+#define ARGPARSE_p(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t  | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE   | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT    | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG   | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG  | ARGPARSE_OPT_PREFIX), (d) }
+
+#define ARGPARSE_op(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+
+#define ARGPARSE_c(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE | ARGPARSE_OPT_COMMAND), (d) }
+
+#define ARGPARSE_conffile(s,l,d) \
+  { (s), (l), (ARGPARSE_TYPE_STRING|ARGPARSE_OPT_CONFFILE), (d) }
+
+#define ARGPARSE_noconffile(s,l,d) \
+  { (s), (l), (ARGPARSE_TYPE_NONE|ARGPARSE_OPT_CONFFILE), (d) }
+
+/* This macro is for stub or obsolete options.  */
+#define ARGPARSE_ignore(s,l)                    \
+  { (s), (l), (ARGPARSE_OPT_IGNORE), "@" }
+
+/* This is a legacy version of ARGPARSE_verbatim which really does
+ * verbatim printing.  */
+#define ARGPARSE_group(s,d) \
+  { (s), NULL, 0, (d) }
+
+/* Verbatim print the string D in the help output.  It does not make
+ * use of the "@" hack as ARGPARSE_group does.  */
+#define ARGPARSE_verbatim(d) \
+  { 1, NULL, (ARGPARSE_OPT_VERBATIM), (d) }
+
+/* Same as ARGPARSE_verbatim but also print a colon and a LF.  N can
+ * be used give a symbolic name to the header.  Nothing is printed if
+ * D is the empty string.  */
+#define ARGPARSE_header(n,d) \
+  { 1, (n), (ARGPARSE_OPT_HEADER), (d) }
+
+/* Mark the end of the list (mandatory).  */
+#define ARGPARSE_end() \
+  { 0, NULL, 0, NULL }
+
+#endif /* GPGRT_ENABLE_ARGPARSE_MACROS */
+
+/* Values used for gpgrt_set_confdir.  */
+#define GPGRT_CONFDIR_USER 1   /* The user's configuration dir.    */
+#define GPGRT_CONFDIR_SYS  2   /* The systems's configuration dir. */
+
+/* Take care: gpgrt_argparse keeps state in ARG and requires that
+ * either ARGPARSE_FLAG_RESET is used after OPTS has been changed or
+ * gpgrt_argparse (NULL, ARG, NULL) is called first.  */
+int gpgrt_argparse (gpgrt_stream_t fp,
+                    gpgrt_argparse_t *arg, gpgrt_opt_t *opts);
+int gpgrt_argparser (gpgrt_argparse_t *arg, gpgrt_opt_t *opts,
+                     const char *confname);
+void gpgrt_usage (int level);
+const char *gpgrt_strusage (int level);
+void gpgrt_set_strusage (const char *(*f)(int));
+void gpgrt_set_usage_outfnc (int (*f)(int, const char *));
+void gpgrt_set_fixed_string_mapper (const char *(*f)(const char*));
+void gpgrt_set_confdir (int what, const char *name);
+
+
+/*
+ * Various helper functions
+ */
+
+/* Compare arbitrary version strings.  For the standard m.n.o version
+ * numbering scheme a LEVEL of 3 is suitable; see the manual.  */
+int gpgrt_cmp_version (const char *a, const char *b, int level);
+
+/* Construct a filename from the NULL terminated list of parts.  Tilde
+ * expansion is done for the first argument.  The caller must release
+ * the result using gpgrt_free; on error ERRNO is set and NULL
+ * returned.  The second function returns an absolute filename.  */
+char *gpgrt_fnameconcat (const char *first, ...) GPGRT_ATTR_SENTINEL(0);
+char *gpgrt_absfnameconcat (const char *first, ...) GPGRT_ATTR_SENTINEL(0);
+
+
+#ifdef __cplusplus
+}
+#endif
+#endif	/* GPGRT_H */
+#endif	/* GPG_ERROR_H */
+/*
+Local Variables:
+buffer-read-only: t
+End:
+*/
diff --git a/src/gpgrt.h b/src/gpgrt.h
new file mode 100644
index 0000000..fc7ff68
--- /dev/null
+++ b/src/gpgrt.h
@@ -0,0 +1,2004 @@
+/* gpg-error.h or gpgrt.h - Common code for GnuPG and others.    -*- c -*-
+ * Copyright (C) 2001-2020 g10 Code GmbH
+ *
+ * This file is part of libgpg-error (aka libgpgrt).
+ *
+ * libgpg-error is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * libgpg-error is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, see <https://www.gnu.org/licenses/>.
+ * SPDX-License-Identifier: LGPL-2.1+
+ *
+ * Do not edit.  Generated from gpg-error.h.in for:
+                 x86_64-unknown-linux-gnu (x86_64-pc-linux-gnu)
+ */
+
+/* The GnuPG project consists of many components.  Error codes are
+ * exchanged between all components.  The common error codes and their
+ * user-presentable descriptions are kept into a shared library to
+ * allow adding new error codes and components without recompiling any
+ * of the other components.  In addition to error codes this library
+ * also features several other groups of functions which are common to
+ * all GnuPG components.  They may be used by independet project as
+ * well.  The interfaces will not change in a backward incompatible way.
+ *
+ * An error code together with an error source build up an error
+ * value.  As the error value is been passed from one component to
+ * another, it preserves the information about the source and nature
+ * of the error.
+ *
+ * A component of the GnuPG project can define the following macros to
+ * tune the behaviour of the library:
+ *
+ * GPG_ERR_SOURCE_DEFAULT: Define to an error source of type
+ * gpg_err_source_t to make that source the default for gpg_error().
+ * Otherwise GPG_ERR_SOURCE_UNKNOWN is used as default.
+ *
+ * GPG_ERR_ENABLE_GETTEXT_MACROS: Define to provide macros to map the
+ * internal gettext API to standard names.  This has only an effect on
+ * Windows platforms.
+ *
+ * GPGRT_ENABLE_ES_MACROS: Define to provide "es_" macros for the
+ * estream functions.
+ *
+ * GPGRT_ENABLE_LOG_MACROS: Define to provide short versions of the
+ * log functions.
+ *
+ * GPGRT_ENABLE_ARGPARSE_MACROS: Needs to be defined to provide the
+ * mandatory macros of the argparse interface.
+ */
+
+#ifndef GPG_ERROR_H
+#define GPG_ERROR_H 1
+#ifndef GPGRT_H
+#define GPGRT_H 1
+
+#include <stddef.h>
+#include <stdio.h>
+#include <stdarg.h>
+
+/* The version string of this header. */
+#define GPG_ERROR_VERSION "1.40-beta7"
+#define GPGRT_VERSION     "1.40-beta7"
+
+/* The version number of this header. */
+#define GPG_ERROR_VERSION_NUMBER 0x012800
+#define GPGRT_VERSION_NUMBER     0x012800
+
+
+#ifdef __GNUC__
+# define GPG_ERR_INLINE __inline__
+#elif defined(_MSC_VER) && _MSC_VER >= 1300
+# define GPG_ERR_INLINE __inline
+#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+# define GPG_ERR_INLINE inline
+#else
+# ifndef GPG_ERR_INLINE
+#  define GPG_ERR_INLINE
+# endif
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#if 0 /* just to make Emacs auto-indent happy */
+}
+#endif
+#endif /* __cplusplus */
+
+
+
+/* The error source type gpg_err_source_t.
+ *
+ * Where as the Poo out of a welle small
+ * Taketh his firste springing and his sours.
+ *					--Chaucer.
+ */
+
+/* Only use free slots, never change or reorder the existing
+ * entries.  */
+typedef enum
+  {
+    GPG_ERR_SOURCE_UNKNOWN = 0,
+    GPG_ERR_SOURCE_GCRYPT = 1,
+    GPG_ERR_SOURCE_GPG = 2,
+    GPG_ERR_SOURCE_GPGSM = 3,
+    GPG_ERR_SOURCE_GPGAGENT = 4,
+    GPG_ERR_SOURCE_PINENTRY = 5,
+    GPG_ERR_SOURCE_SCD = 6,
+    GPG_ERR_SOURCE_GPGME = 7,
+    GPG_ERR_SOURCE_KEYBOX = 8,
+    GPG_ERR_SOURCE_KSBA = 9,
+    GPG_ERR_SOURCE_DIRMNGR = 10,
+    GPG_ERR_SOURCE_GSTI = 11,
+    GPG_ERR_SOURCE_GPA = 12,
+    GPG_ERR_SOURCE_KLEO = 13,
+    GPG_ERR_SOURCE_G13 = 14,
+    GPG_ERR_SOURCE_ASSUAN = 15,
+    GPG_ERR_SOURCE_TLS = 17,
+    GPG_ERR_SOURCE_ANY = 31,
+    GPG_ERR_SOURCE_USER_1 = 32,
+    GPG_ERR_SOURCE_USER_2 = 33,
+    GPG_ERR_SOURCE_USER_3 = 34,
+    GPG_ERR_SOURCE_USER_4 = 35,
+
+    /* This is one more than the largest allowed entry.  */
+    GPG_ERR_SOURCE_DIM = 128
+  } gpg_err_source_t;
+
+
+/* The error code type gpg_err_code_t.  */
+
+/* Only use free slots, never change or reorder the existing
+ * entries.  */
+typedef enum
+  {
+    GPG_ERR_NO_ERROR = 0,
+    GPG_ERR_GENERAL = 1,
+    GPG_ERR_UNKNOWN_PACKET = 2,
+    GPG_ERR_UNKNOWN_VERSION = 3,
+    GPG_ERR_PUBKEY_ALGO = 4,
+    GPG_ERR_DIGEST_ALGO = 5,
+    GPG_ERR_BAD_PUBKEY = 6,
+    GPG_ERR_BAD_SECKEY = 7,
+    GPG_ERR_BAD_SIGNATURE = 8,
+    GPG_ERR_NO_PUBKEY = 9,
+    GPG_ERR_CHECKSUM = 10,
+    GPG_ERR_BAD_PASSPHRASE = 11,
+    GPG_ERR_CIPHER_ALGO = 12,
+    GPG_ERR_KEYRING_OPEN = 13,
+    GPG_ERR_INV_PACKET = 14,
+    GPG_ERR_INV_ARMOR = 15,
+    GPG_ERR_NO_USER_ID = 16,
+    GPG_ERR_NO_SECKEY = 17,
+    GPG_ERR_WRONG_SECKEY = 18,
+    GPG_ERR_BAD_KEY = 19,
+    GPG_ERR_COMPR_ALGO = 20,
+    GPG_ERR_NO_PRIME = 21,
+    GPG_ERR_NO_ENCODING_METHOD = 22,
+    GPG_ERR_NO_ENCRYPTION_SCHEME = 23,
+    GPG_ERR_NO_SIGNATURE_SCHEME = 24,
+    GPG_ERR_INV_ATTR = 25,
+    GPG_ERR_NO_VALUE = 26,
+    GPG_ERR_NOT_FOUND = 27,
+    GPG_ERR_VALUE_NOT_FOUND = 28,
+    GPG_ERR_SYNTAX = 29,
+    GPG_ERR_BAD_MPI = 30,
+    GPG_ERR_INV_PASSPHRASE = 31,
+    GPG_ERR_SIG_CLASS = 32,
+    GPG_ERR_RESOURCE_LIMIT = 33,
+    GPG_ERR_INV_KEYRING = 34,
+    GPG_ERR_TRUSTDB = 35,
+    GPG_ERR_BAD_CERT = 36,
+    GPG_ERR_INV_USER_ID = 37,
+    GPG_ERR_UNEXPECTED = 38,
+    GPG_ERR_TIME_CONFLICT = 39,
+    GPG_ERR_KEYSERVER = 40,
+    GPG_ERR_WRONG_PUBKEY_ALGO = 41,
+    GPG_ERR_TRIBUTE_TO_D_A = 42,
+    GPG_ERR_WEAK_KEY = 43,
+    GPG_ERR_INV_KEYLEN = 44,
+    GPG_ERR_INV_ARG = 45,
+    GPG_ERR_BAD_URI = 46,
+    GPG_ERR_INV_URI = 47,
+    GPG_ERR_NETWORK = 48,
+    GPG_ERR_UNKNOWN_HOST = 49,
+    GPG_ERR_SELFTEST_FAILED = 50,
+    GPG_ERR_NOT_ENCRYPTED = 51,
+    GPG_ERR_NOT_PROCESSED = 52,
+    GPG_ERR_UNUSABLE_PUBKEY = 53,
+    GPG_ERR_UNUSABLE_SECKEY = 54,
+    GPG_ERR_INV_VALUE = 55,
+    GPG_ERR_BAD_CERT_CHAIN = 56,
+    GPG_ERR_MISSING_CERT = 57,
+    GPG_ERR_NO_DATA = 58,
+    GPG_ERR_BUG = 59,
+    GPG_ERR_NOT_SUPPORTED = 60,
+    GPG_ERR_INV_OP = 61,
+    GPG_ERR_TIMEOUT = 62,
+    GPG_ERR_INTERNAL = 63,
+    GPG_ERR_EOF_GCRYPT = 64,
+    GPG_ERR_INV_OBJ = 65,
+    GPG_ERR_TOO_SHORT = 66,
+    GPG_ERR_TOO_LARGE = 67,
+    GPG_ERR_NO_OBJ = 68,
+    GPG_ERR_NOT_IMPLEMENTED = 69,
+    GPG_ERR_CONFLICT = 70,
+    GPG_ERR_INV_CIPHER_MODE = 71,
+    GPG_ERR_INV_FLAG = 72,
+    GPG_ERR_INV_HANDLE = 73,
+    GPG_ERR_TRUNCATED = 74,
+    GPG_ERR_INCOMPLETE_LINE = 75,
+    GPG_ERR_INV_RESPONSE = 76,
+    GPG_ERR_NO_AGENT = 77,
+    GPG_ERR_AGENT = 78,
+    GPG_ERR_INV_DATA = 79,
+    GPG_ERR_ASSUAN_SERVER_FAULT = 80,
+    GPG_ERR_ASSUAN = 81,
+    GPG_ERR_INV_SESSION_KEY = 82,
+    GPG_ERR_INV_SEXP = 83,
+    GPG_ERR_UNSUPPORTED_ALGORITHM = 84,
+    GPG_ERR_NO_PIN_ENTRY = 85,
+    GPG_ERR_PIN_ENTRY = 86,
+    GPG_ERR_BAD_PIN = 87,
+    GPG_ERR_INV_NAME = 88,
+    GPG_ERR_BAD_DATA = 89,
+    GPG_ERR_INV_PARAMETER = 90,
+    GPG_ERR_WRONG_CARD = 91,
+    GPG_ERR_NO_DIRMNGR = 92,
+    GPG_ERR_DIRMNGR = 93,
+    GPG_ERR_CERT_REVOKED = 94,
+    GPG_ERR_NO_CRL_KNOWN = 95,
+    GPG_ERR_CRL_TOO_OLD = 96,
+    GPG_ERR_LINE_TOO_LONG = 97,
+    GPG_ERR_NOT_TRUSTED = 98,
+    GPG_ERR_CANCELED = 99,
+    GPG_ERR_BAD_CA_CERT = 100,
+    GPG_ERR_CERT_EXPIRED = 101,
+    GPG_ERR_CERT_TOO_YOUNG = 102,
+    GPG_ERR_UNSUPPORTED_CERT = 103,
+    GPG_ERR_UNKNOWN_SEXP = 104,
+    GPG_ERR_UNSUPPORTED_PROTECTION = 105,
+    GPG_ERR_CORRUPTED_PROTECTION = 106,
+    GPG_ERR_AMBIGUOUS_NAME = 107,
+    GPG_ERR_CARD = 108,
+    GPG_ERR_CARD_RESET = 109,
+    GPG_ERR_CARD_REMOVED = 110,
+    GPG_ERR_INV_CARD = 111,
+    GPG_ERR_CARD_NOT_PRESENT = 112,
+    GPG_ERR_NO_PKCS15_APP = 113,
+    GPG_ERR_NOT_CONFIRMED = 114,
+    GPG_ERR_CONFIGURATION = 115,
+    GPG_ERR_NO_POLICY_MATCH = 116,
+    GPG_ERR_INV_INDEX = 117,
+    GPG_ERR_INV_ID = 118,
+    GPG_ERR_NO_SCDAEMON = 119,
+    GPG_ERR_SCDAEMON = 120,
+    GPG_ERR_UNSUPPORTED_PROTOCOL = 121,
+    GPG_ERR_BAD_PIN_METHOD = 122,
+    GPG_ERR_CARD_NOT_INITIALIZED = 123,
+    GPG_ERR_UNSUPPORTED_OPERATION = 124,
+    GPG_ERR_WRONG_KEY_USAGE = 125,
+    GPG_ERR_NOTHING_FOUND = 126,
+    GPG_ERR_WRONG_BLOB_TYPE = 127,
+    GPG_ERR_MISSING_VALUE = 128,
+    GPG_ERR_HARDWARE = 129,
+    GPG_ERR_PIN_BLOCKED = 130,
+    GPG_ERR_USE_CONDITIONS = 131,
+    GPG_ERR_PIN_NOT_SYNCED = 132,
+    GPG_ERR_INV_CRL = 133,
+    GPG_ERR_BAD_BER = 134,
+    GPG_ERR_INV_BER = 135,
+    GPG_ERR_ELEMENT_NOT_FOUND = 136,
+    GPG_ERR_IDENTIFIER_NOT_FOUND = 137,
+    GPG_ERR_INV_TAG = 138,
+    GPG_ERR_INV_LENGTH = 139,
+    GPG_ERR_INV_KEYINFO = 140,
+    GPG_ERR_UNEXPECTED_TAG = 141,
+    GPG_ERR_NOT_DER_ENCODED = 142,
+    GPG_ERR_NO_CMS_OBJ = 143,
+    GPG_ERR_INV_CMS_OBJ = 144,
+    GPG_ERR_UNKNOWN_CMS_OBJ = 145,
+    GPG_ERR_UNSUPPORTED_CMS_OBJ = 146,
+    GPG_ERR_UNSUPPORTED_ENCODING = 147,
+    GPG_ERR_UNSUPPORTED_CMS_VERSION = 148,
+    GPG_ERR_UNKNOWN_ALGORITHM = 149,
+    GPG_ERR_INV_ENGINE = 150,
+    GPG_ERR_PUBKEY_NOT_TRUSTED = 151,
+    GPG_ERR_DECRYPT_FAILED = 152,
+    GPG_ERR_KEY_EXPIRED = 153,
+    GPG_ERR_SIG_EXPIRED = 154,
+    GPG_ERR_ENCODING_PROBLEM = 155,
+    GPG_ERR_INV_STATE = 156,
+    GPG_ERR_DUP_VALUE = 157,
+    GPG_ERR_MISSING_ACTION = 158,
+    GPG_ERR_MODULE_NOT_FOUND = 159,
+    GPG_ERR_INV_OID_STRING = 160,
+    GPG_ERR_INV_TIME = 161,
+    GPG_ERR_INV_CRL_OBJ = 162,
+    GPG_ERR_UNSUPPORTED_CRL_VERSION = 163,
+    GPG_ERR_INV_CERT_OBJ = 164,
+    GPG_ERR_UNKNOWN_NAME = 165,
+    GPG_ERR_LOCALE_PROBLEM = 166,
+    GPG_ERR_NOT_LOCKED = 167,
+    GPG_ERR_PROTOCOL_VIOLATION = 168,
+    GPG_ERR_INV_MAC = 169,
+    GPG_ERR_INV_REQUEST = 170,
+    GPG_ERR_UNKNOWN_EXTN = 171,
+    GPG_ERR_UNKNOWN_CRIT_EXTN = 172,
+    GPG_ERR_LOCKED = 173,
+    GPG_ERR_UNKNOWN_OPTION = 174,
+    GPG_ERR_UNKNOWN_COMMAND = 175,
+    GPG_ERR_NOT_OPERATIONAL = 176,
+    GPG_ERR_NO_PASSPHRASE = 177,
+    GPG_ERR_NO_PIN = 178,
+    GPG_ERR_NOT_ENABLED = 179,
+    GPG_ERR_NO_ENGINE = 180,
+    GPG_ERR_MISSING_KEY = 181,
+    GPG_ERR_TOO_MANY = 182,
+    GPG_ERR_LIMIT_REACHED = 183,
+    GPG_ERR_NOT_INITIALIZED = 184,
+    GPG_ERR_MISSING_ISSUER_CERT = 185,
+    GPG_ERR_NO_KEYSERVER = 186,
+    GPG_ERR_INV_CURVE = 187,
+    GPG_ERR_UNKNOWN_CURVE = 188,
+    GPG_ERR_DUP_KEY = 189,
+    GPG_ERR_AMBIGUOUS = 190,
+    GPG_ERR_NO_CRYPT_CTX = 191,
+    GPG_ERR_WRONG_CRYPT_CTX = 192,
+    GPG_ERR_BAD_CRYPT_CTX = 193,
+    GPG_ERR_CRYPT_CTX_CONFLICT = 194,
+    GPG_ERR_BROKEN_PUBKEY = 195,
+    GPG_ERR_BROKEN_SECKEY = 196,
+    GPG_ERR_MAC_ALGO = 197,
+    GPG_ERR_FULLY_CANCELED = 198,
+    GPG_ERR_UNFINISHED = 199,
+    GPG_ERR_BUFFER_TOO_SHORT = 200,
+    GPG_ERR_SEXP_INV_LEN_SPEC = 201,
+    GPG_ERR_SEXP_STRING_TOO_LONG = 202,
+    GPG_ERR_SEXP_UNMATCHED_PAREN = 203,
+    GPG_ERR_SEXP_NOT_CANONICAL = 204,
+    GPG_ERR_SEXP_BAD_CHARACTER = 205,
+    GPG_ERR_SEXP_BAD_QUOTATION = 206,
+    GPG_ERR_SEXP_ZERO_PREFIX = 207,
+    GPG_ERR_SEXP_NESTED_DH = 208,
+    GPG_ERR_SEXP_UNMATCHED_DH = 209,
+    GPG_ERR_SEXP_UNEXPECTED_PUNC = 210,
+    GPG_ERR_SEXP_BAD_HEX_CHAR = 211,
+    GPG_ERR_SEXP_ODD_HEX_NUMBERS = 212,
+    GPG_ERR_SEXP_BAD_OCT_CHAR = 213,
+    GPG_ERR_SUBKEYS_EXP_OR_REV = 217,
+    GPG_ERR_DB_CORRUPTED = 218,
+    GPG_ERR_SERVER_FAILED = 219,
+    GPG_ERR_NO_NAME = 220,
+    GPG_ERR_NO_KEY = 221,
+    GPG_ERR_LEGACY_KEY = 222,
+    GPG_ERR_REQUEST_TOO_SHORT = 223,
+    GPG_ERR_REQUEST_TOO_LONG = 224,
+    GPG_ERR_OBJ_TERM_STATE = 225,
+    GPG_ERR_NO_CERT_CHAIN = 226,
+    GPG_ERR_CERT_TOO_LARGE = 227,
+    GPG_ERR_INV_RECORD = 228,
+    GPG_ERR_BAD_MAC = 229,
+    GPG_ERR_UNEXPECTED_MSG = 230,
+    GPG_ERR_COMPR_FAILED = 231,
+    GPG_ERR_WOULD_WRAP = 232,
+    GPG_ERR_FATAL_ALERT = 233,
+    GPG_ERR_NO_CIPHER = 234,
+    GPG_ERR_MISSING_CLIENT_CERT = 235,
+    GPG_ERR_CLOSE_NOTIFY = 236,
+    GPG_ERR_TICKET_EXPIRED = 237,
+    GPG_ERR_BAD_TICKET = 238,
+    GPG_ERR_UNKNOWN_IDENTITY = 239,
+    GPG_ERR_BAD_HS_CERT = 240,
+    GPG_ERR_BAD_HS_CERT_REQ = 241,
+    GPG_ERR_BAD_HS_CERT_VER = 242,
+    GPG_ERR_BAD_HS_CHANGE_CIPHER = 243,
+    GPG_ERR_BAD_HS_CLIENT_HELLO = 244,
+    GPG_ERR_BAD_HS_SERVER_HELLO = 245,
+    GPG_ERR_BAD_HS_SERVER_HELLO_DONE = 246,
+    GPG_ERR_BAD_HS_FINISHED = 247,
+    GPG_ERR_BAD_HS_SERVER_KEX = 248,
+    GPG_ERR_BAD_HS_CLIENT_KEX = 249,
+    GPG_ERR_BOGUS_STRING = 250,
+    GPG_ERR_FORBIDDEN = 251,
+    GPG_ERR_KEY_DISABLED = 252,
+    GPG_ERR_KEY_ON_CARD = 253,
+    GPG_ERR_INV_LOCK_OBJ = 254,
+    GPG_ERR_TRUE = 255,
+    GPG_ERR_FALSE = 256,
+    GPG_ERR_ASS_GENERAL = 257,
+    GPG_ERR_ASS_ACCEPT_FAILED = 258,
+    GPG_ERR_ASS_CONNECT_FAILED = 259,
+    GPG_ERR_ASS_INV_RESPONSE = 260,
+    GPG_ERR_ASS_INV_VALUE = 261,
+    GPG_ERR_ASS_INCOMPLETE_LINE = 262,
+    GPG_ERR_ASS_LINE_TOO_LONG = 263,
+    GPG_ERR_ASS_NESTED_COMMANDS = 264,
+    GPG_ERR_ASS_NO_DATA_CB = 265,
+    GPG_ERR_ASS_NO_INQUIRE_CB = 266,
+    GPG_ERR_ASS_NOT_A_SERVER = 267,
+    GPG_ERR_ASS_NOT_A_CLIENT = 268,
+    GPG_ERR_ASS_SERVER_START = 269,
+    GPG_ERR_ASS_READ_ERROR = 270,
+    GPG_ERR_ASS_WRITE_ERROR = 271,
+    GPG_ERR_ASS_TOO_MUCH_DATA = 273,
+    GPG_ERR_ASS_UNEXPECTED_CMD = 274,
+    GPG_ERR_ASS_UNKNOWN_CMD = 275,
+    GPG_ERR_ASS_SYNTAX = 276,
+    GPG_ERR_ASS_CANCELED = 277,
+    GPG_ERR_ASS_NO_INPUT = 278,
+    GPG_ERR_ASS_NO_OUTPUT = 279,
+    GPG_ERR_ASS_PARAMETER = 280,
+    GPG_ERR_ASS_UNKNOWN_INQUIRE = 281,
+    GPG_ERR_ENGINE_TOO_OLD = 300,
+    GPG_ERR_WINDOW_TOO_SMALL = 301,
+    GPG_ERR_WINDOW_TOO_LARGE = 302,
+    GPG_ERR_MISSING_ENVVAR = 303,
+    GPG_ERR_USER_ID_EXISTS = 304,
+    GPG_ERR_NAME_EXISTS = 305,
+    GPG_ERR_DUP_NAME = 306,
+    GPG_ERR_TOO_YOUNG = 307,
+    GPG_ERR_TOO_OLD = 308,
+    GPG_ERR_UNKNOWN_FLAG = 309,
+    GPG_ERR_INV_ORDER = 310,
+    GPG_ERR_ALREADY_FETCHED = 311,
+    GPG_ERR_TRY_LATER = 312,
+    GPG_ERR_WRONG_NAME = 313,
+    GPG_ERR_NO_AUTH = 314,
+    GPG_ERR_BAD_AUTH = 315,
+    GPG_ERR_NO_KEYBOXD = 316,
+    GPG_ERR_KEYBOXD = 317,
+    GPG_ERR_NO_SERVICE = 318,
+    GPG_ERR_SERVICE = 319,
+    GPG_ERR_SYSTEM_BUG = 666,
+    GPG_ERR_DNS_UNKNOWN = 711,
+    GPG_ERR_DNS_SECTION = 712,
+    GPG_ERR_DNS_ADDRESS = 713,
+    GPG_ERR_DNS_NO_QUERY = 714,
+    GPG_ERR_DNS_NO_ANSWER = 715,
+    GPG_ERR_DNS_CLOSED = 716,
+    GPG_ERR_DNS_VERIFY = 717,
+    GPG_ERR_DNS_TIMEOUT = 718,
+    GPG_ERR_LDAP_GENERAL = 721,
+    GPG_ERR_LDAP_ATTR_GENERAL = 722,
+    GPG_ERR_LDAP_NAME_GENERAL = 723,
+    GPG_ERR_LDAP_SECURITY_GENERAL = 724,
+    GPG_ERR_LDAP_SERVICE_GENERAL = 725,
+    GPG_ERR_LDAP_UPDATE_GENERAL = 726,
+    GPG_ERR_LDAP_E_GENERAL = 727,
+    GPG_ERR_LDAP_X_GENERAL = 728,
+    GPG_ERR_LDAP_OTHER_GENERAL = 729,
+    GPG_ERR_LDAP_X_CONNECTING = 750,
+    GPG_ERR_LDAP_REFERRAL_LIMIT = 751,
+    GPG_ERR_LDAP_CLIENT_LOOP = 752,
+    GPG_ERR_LDAP_NO_RESULTS = 754,
+    GPG_ERR_LDAP_CONTROL_NOT_FOUND = 755,
+    GPG_ERR_LDAP_NOT_SUPPORTED = 756,
+    GPG_ERR_LDAP_CONNECT = 757,
+    GPG_ERR_LDAP_NO_MEMORY = 758,
+    GPG_ERR_LDAP_PARAM = 759,
+    GPG_ERR_LDAP_USER_CANCELLED = 760,
+    GPG_ERR_LDAP_FILTER = 761,
+    GPG_ERR_LDAP_AUTH_UNKNOWN = 762,
+    GPG_ERR_LDAP_TIMEOUT = 763,
+    GPG_ERR_LDAP_DECODING = 764,
+    GPG_ERR_LDAP_ENCODING = 765,
+    GPG_ERR_LDAP_LOCAL = 766,
+    GPG_ERR_LDAP_SERVER_DOWN = 767,
+    GPG_ERR_LDAP_SUCCESS = 768,
+    GPG_ERR_LDAP_OPERATIONS = 769,
+    GPG_ERR_LDAP_PROTOCOL = 770,
+    GPG_ERR_LDAP_TIMELIMIT = 771,
+    GPG_ERR_LDAP_SIZELIMIT = 772,
+    GPG_ERR_LDAP_COMPARE_FALSE = 773,
+    GPG_ERR_LDAP_COMPARE_TRUE = 774,
+    GPG_ERR_LDAP_UNSUPPORTED_AUTH = 775,
+    GPG_ERR_LDAP_STRONG_AUTH_RQRD = 776,
+    GPG_ERR_LDAP_PARTIAL_RESULTS = 777,
+    GPG_ERR_LDAP_REFERRAL = 778,
+    GPG_ERR_LDAP_ADMINLIMIT = 779,
+    GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN = 780,
+    GPG_ERR_LDAP_CONFIDENT_RQRD = 781,
+    GPG_ERR_LDAP_SASL_BIND_INPROG = 782,
+    GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE = 784,
+    GPG_ERR_LDAP_UNDEFINED_TYPE = 785,
+    GPG_ERR_LDAP_BAD_MATCHING = 786,
+    GPG_ERR_LDAP_CONST_VIOLATION = 787,
+    GPG_ERR_LDAP_TYPE_VALUE_EXISTS = 788,
+    GPG_ERR_LDAP_INV_SYNTAX = 789,
+    GPG_ERR_LDAP_NO_SUCH_OBJ = 800,
+    GPG_ERR_LDAP_ALIAS_PROBLEM = 801,
+    GPG_ERR_LDAP_INV_DN_SYNTAX = 802,
+    GPG_ERR_LDAP_IS_LEAF = 803,
+    GPG_ERR_LDAP_ALIAS_DEREF = 804,
+    GPG_ERR_LDAP_X_PROXY_AUTH_FAIL = 815,
+    GPG_ERR_LDAP_BAD_AUTH = 816,
+    GPG_ERR_LDAP_INV_CREDENTIALS = 817,
+    GPG_ERR_LDAP_INSUFFICIENT_ACC = 818,
+    GPG_ERR_LDAP_BUSY = 819,
+    GPG_ERR_LDAP_UNAVAILABLE = 820,
+    GPG_ERR_LDAP_UNWILL_TO_PERFORM = 821,
+    GPG_ERR_LDAP_LOOP_DETECT = 822,
+    GPG_ERR_LDAP_NAMING_VIOLATION = 832,
+    GPG_ERR_LDAP_OBJ_CLS_VIOLATION = 833,
+    GPG_ERR_LDAP_NOT_ALLOW_NONLEAF = 834,
+    GPG_ERR_LDAP_NOT_ALLOW_ON_RDN = 835,
+    GPG_ERR_LDAP_ALREADY_EXISTS = 836,
+    GPG_ERR_LDAP_NO_OBJ_CLASS_MODS = 837,
+    GPG_ERR_LDAP_RESULTS_TOO_LARGE = 838,
+    GPG_ERR_LDAP_AFFECTS_MULT_DSAS = 839,
+    GPG_ERR_LDAP_VLV = 844,
+    GPG_ERR_LDAP_OTHER = 848,
+    GPG_ERR_LDAP_CUP_RESOURCE_LIMIT = 881,
+    GPG_ERR_LDAP_CUP_SEC_VIOLATION = 882,
+    GPG_ERR_LDAP_CUP_INV_DATA = 883,
+    GPG_ERR_LDAP_CUP_UNSUP_SCHEME = 884,
+    GPG_ERR_LDAP_CUP_RELOAD = 885,
+    GPG_ERR_LDAP_CANCELLED = 886,
+    GPG_ERR_LDAP_NO_SUCH_OPERATION = 887,
+    GPG_ERR_LDAP_TOO_LATE = 888,
+    GPG_ERR_LDAP_CANNOT_CANCEL = 889,
+    GPG_ERR_LDAP_ASSERTION_FAILED = 890,
+    GPG_ERR_LDAP_PROX_AUTH_DENIED = 891,
+    GPG_ERR_USER_1 = 1024,
+    GPG_ERR_USER_2 = 1025,
+    GPG_ERR_USER_3 = 1026,
+    GPG_ERR_USER_4 = 1027,
+    GPG_ERR_USER_5 = 1028,
+    GPG_ERR_USER_6 = 1029,
+    GPG_ERR_USER_7 = 1030,
+    GPG_ERR_USER_8 = 1031,
+    GPG_ERR_USER_9 = 1032,
+    GPG_ERR_USER_10 = 1033,
+    GPG_ERR_USER_11 = 1034,
+    GPG_ERR_USER_12 = 1035,
+    GPG_ERR_USER_13 = 1036,
+    GPG_ERR_USER_14 = 1037,
+    GPG_ERR_USER_15 = 1038,
+    GPG_ERR_USER_16 = 1039,
+    GPG_ERR_SQL_OK = 1500,
+    GPG_ERR_SQL_ERROR = 1501,
+    GPG_ERR_SQL_INTERNAL = 1502,
+    GPG_ERR_SQL_PERM = 1503,
+    GPG_ERR_SQL_ABORT = 1504,
+    GPG_ERR_SQL_BUSY = 1505,
+    GPG_ERR_SQL_LOCKED = 1506,
+    GPG_ERR_SQL_NOMEM = 1507,
+    GPG_ERR_SQL_READONLY = 1508,
+    GPG_ERR_SQL_INTERRUPT = 1509,
+    GPG_ERR_SQL_IOERR = 1510,
+    GPG_ERR_SQL_CORRUPT = 1511,
+    GPG_ERR_SQL_NOTFOUND = 1512,
+    GPG_ERR_SQL_FULL = 1513,
+    GPG_ERR_SQL_CANTOPEN = 1514,
+    GPG_ERR_SQL_PROTOCOL = 1515,
+    GPG_ERR_SQL_EMPTY = 1516,
+    GPG_ERR_SQL_SCHEMA = 1517,
+    GPG_ERR_SQL_TOOBIG = 1518,
+    GPG_ERR_SQL_CONSTRAINT = 1519,
+    GPG_ERR_SQL_MISMATCH = 1520,
+    GPG_ERR_SQL_MISUSE = 1521,
+    GPG_ERR_SQL_NOLFS = 1522,
+    GPG_ERR_SQL_AUTH = 1523,
+    GPG_ERR_SQL_FORMAT = 1524,
+    GPG_ERR_SQL_RANGE = 1525,
+    GPG_ERR_SQL_NOTADB = 1526,
+    GPG_ERR_SQL_NOTICE = 1527,
+    GPG_ERR_SQL_WARNING = 1528,
+    GPG_ERR_SQL_ROW = 1600,
+    GPG_ERR_SQL_DONE = 1601,
+    GPG_ERR_MISSING_ERRNO = 16381,
+    GPG_ERR_UNKNOWN_ERRNO = 16382,
+    GPG_ERR_EOF = 16383,
+
+    /* The following error codes are used to map system errors.  */
+#define GPG_ERR_SYSTEM_ERROR	(1 << 15)
+    GPG_ERR_E2BIG = GPG_ERR_SYSTEM_ERROR | 0,
+    GPG_ERR_EACCES = GPG_ERR_SYSTEM_ERROR | 1,
+    GPG_ERR_EADDRINUSE = GPG_ERR_SYSTEM_ERROR | 2,
+    GPG_ERR_EADDRNOTAVAIL = GPG_ERR_SYSTEM_ERROR | 3,
+    GPG_ERR_EADV = GPG_ERR_SYSTEM_ERROR | 4,
+    GPG_ERR_EAFNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 5,
+    GPG_ERR_EAGAIN = GPG_ERR_SYSTEM_ERROR | 6,
+    GPG_ERR_EALREADY = GPG_ERR_SYSTEM_ERROR | 7,
+    GPG_ERR_EAUTH = GPG_ERR_SYSTEM_ERROR | 8,
+    GPG_ERR_EBACKGROUND = GPG_ERR_SYSTEM_ERROR | 9,
+    GPG_ERR_EBADE = GPG_ERR_SYSTEM_ERROR | 10,
+    GPG_ERR_EBADF = GPG_ERR_SYSTEM_ERROR | 11,
+    GPG_ERR_EBADFD = GPG_ERR_SYSTEM_ERROR | 12,
+    GPG_ERR_EBADMSG = GPG_ERR_SYSTEM_ERROR | 13,
+    GPG_ERR_EBADR = GPG_ERR_SYSTEM_ERROR | 14,
+    GPG_ERR_EBADRPC = GPG_ERR_SYSTEM_ERROR | 15,
+    GPG_ERR_EBADRQC = GPG_ERR_SYSTEM_ERROR | 16,
+    GPG_ERR_EBADSLT = GPG_ERR_SYSTEM_ERROR | 17,
+    GPG_ERR_EBFONT = GPG_ERR_SYSTEM_ERROR | 18,
+    GPG_ERR_EBUSY = GPG_ERR_SYSTEM_ERROR | 19,
+    GPG_ERR_ECANCELED = GPG_ERR_SYSTEM_ERROR | 20,
+    GPG_ERR_ECHILD = GPG_ERR_SYSTEM_ERROR | 21,
+    GPG_ERR_ECHRNG = GPG_ERR_SYSTEM_ERROR | 22,
+    GPG_ERR_ECOMM = GPG_ERR_SYSTEM_ERROR | 23,
+    GPG_ERR_ECONNABORTED = GPG_ERR_SYSTEM_ERROR | 24,
+    GPG_ERR_ECONNREFUSED = GPG_ERR_SYSTEM_ERROR | 25,
+    GPG_ERR_ECONNRESET = GPG_ERR_SYSTEM_ERROR | 26,
+    GPG_ERR_ED = GPG_ERR_SYSTEM_ERROR | 27,
+    GPG_ERR_EDEADLK = GPG_ERR_SYSTEM_ERROR | 28,
+    GPG_ERR_EDEADLOCK = GPG_ERR_SYSTEM_ERROR | 29,
+    GPG_ERR_EDESTADDRREQ = GPG_ERR_SYSTEM_ERROR | 30,
+    GPG_ERR_EDIED = GPG_ERR_SYSTEM_ERROR | 31,
+    GPG_ERR_EDOM = GPG_ERR_SYSTEM_ERROR | 32,
+    GPG_ERR_EDOTDOT = GPG_ERR_SYSTEM_ERROR | 33,
+    GPG_ERR_EDQUOT = GPG_ERR_SYSTEM_ERROR | 34,
+    GPG_ERR_EEXIST = GPG_ERR_SYSTEM_ERROR | 35,
+    GPG_ERR_EFAULT = GPG_ERR_SYSTEM_ERROR | 36,
+    GPG_ERR_EFBIG = GPG_ERR_SYSTEM_ERROR | 37,
+    GPG_ERR_EFTYPE = GPG_ERR_SYSTEM_ERROR | 38,
+    GPG_ERR_EGRATUITOUS = GPG_ERR_SYSTEM_ERROR | 39,
+    GPG_ERR_EGREGIOUS = GPG_ERR_SYSTEM_ERROR | 40,
+    GPG_ERR_EHOSTDOWN = GPG_ERR_SYSTEM_ERROR | 41,
+    GPG_ERR_EHOSTUNREACH = GPG_ERR_SYSTEM_ERROR | 42,
+    GPG_ERR_EIDRM = GPG_ERR_SYSTEM_ERROR | 43,
+    GPG_ERR_EIEIO = GPG_ERR_SYSTEM_ERROR | 44,
+    GPG_ERR_EILSEQ = GPG_ERR_SYSTEM_ERROR | 45,
+    GPG_ERR_EINPROGRESS = GPG_ERR_SYSTEM_ERROR | 46,
+    GPG_ERR_EINTR = GPG_ERR_SYSTEM_ERROR | 47,
+    GPG_ERR_EINVAL = GPG_ERR_SYSTEM_ERROR | 48,
+    GPG_ERR_EIO = GPG_ERR_SYSTEM_ERROR | 49,
+    GPG_ERR_EISCONN = GPG_ERR_SYSTEM_ERROR | 50,
+    GPG_ERR_EISDIR = GPG_ERR_SYSTEM_ERROR | 51,
+    GPG_ERR_EISNAM = GPG_ERR_SYSTEM_ERROR | 52,
+    GPG_ERR_EL2HLT = GPG_ERR_SYSTEM_ERROR | 53,
+    GPG_ERR_EL2NSYNC = GPG_ERR_SYSTEM_ERROR | 54,
+    GPG_ERR_EL3HLT = GPG_ERR_SYSTEM_ERROR | 55,
+    GPG_ERR_EL3RST = GPG_ERR_SYSTEM_ERROR | 56,
+    GPG_ERR_ELIBACC = GPG_ERR_SYSTEM_ERROR | 57,
+    GPG_ERR_ELIBBAD = GPG_ERR_SYSTEM_ERROR | 58,
+    GPG_ERR_ELIBEXEC = GPG_ERR_SYSTEM_ERROR | 59,
+    GPG_ERR_ELIBMAX = GPG_ERR_SYSTEM_ERROR | 60,
+    GPG_ERR_ELIBSCN = GPG_ERR_SYSTEM_ERROR | 61,
+    GPG_ERR_ELNRNG = GPG_ERR_SYSTEM_ERROR | 62,
+    GPG_ERR_ELOOP = GPG_ERR_SYSTEM_ERROR | 63,
+    GPG_ERR_EMEDIUMTYPE = GPG_ERR_SYSTEM_ERROR | 64,
+    GPG_ERR_EMFILE = GPG_ERR_SYSTEM_ERROR | 65,
+    GPG_ERR_EMLINK = GPG_ERR_SYSTEM_ERROR | 66,
+    GPG_ERR_EMSGSIZE = GPG_ERR_SYSTEM_ERROR | 67,
+    GPG_ERR_EMULTIHOP = GPG_ERR_SYSTEM_ERROR | 68,
+    GPG_ERR_ENAMETOOLONG = GPG_ERR_SYSTEM_ERROR | 69,
+    GPG_ERR_ENAVAIL = GPG_ERR_SYSTEM_ERROR | 70,
+    GPG_ERR_ENEEDAUTH = GPG_ERR_SYSTEM_ERROR | 71,
+    GPG_ERR_ENETDOWN = GPG_ERR_SYSTEM_ERROR | 72,
+    GPG_ERR_ENETRESET = GPG_ERR_SYSTEM_ERROR | 73,
+    GPG_ERR_ENETUNREACH = GPG_ERR_SYSTEM_ERROR | 74,
+    GPG_ERR_ENFILE = GPG_ERR_SYSTEM_ERROR | 75,
+    GPG_ERR_ENOANO = GPG_ERR_SYSTEM_ERROR | 76,
+    GPG_ERR_ENOBUFS = GPG_ERR_SYSTEM_ERROR | 77,
+    GPG_ERR_ENOCSI = GPG_ERR_SYSTEM_ERROR | 78,
+    GPG_ERR_ENODATA = GPG_ERR_SYSTEM_ERROR | 79,
+    GPG_ERR_ENODEV = GPG_ERR_SYSTEM_ERROR | 80,
+    GPG_ERR_ENOENT = GPG_ERR_SYSTEM_ERROR | 81,
+    GPG_ERR_ENOEXEC = GPG_ERR_SYSTEM_ERROR | 82,
+    GPG_ERR_ENOLCK = GPG_ERR_SYSTEM_ERROR | 83,
+    GPG_ERR_ENOLINK = GPG_ERR_SYSTEM_ERROR | 84,
+    GPG_ERR_ENOMEDIUM = GPG_ERR_SYSTEM_ERROR | 85,
+    GPG_ERR_ENOMEM = GPG_ERR_SYSTEM_ERROR | 86,
+    GPG_ERR_ENOMSG = GPG_ERR_SYSTEM_ERROR | 87,
+    GPG_ERR_ENONET = GPG_ERR_SYSTEM_ERROR | 88,
+    GPG_ERR_ENOPKG = GPG_ERR_SYSTEM_ERROR | 89,
+    GPG_ERR_ENOPROTOOPT = GPG_ERR_SYSTEM_ERROR | 90,
+    GPG_ERR_ENOSPC = GPG_ERR_SYSTEM_ERROR | 91,
+    GPG_ERR_ENOSR = GPG_ERR_SYSTEM_ERROR | 92,
+    GPG_ERR_ENOSTR = GPG_ERR_SYSTEM_ERROR | 93,
+    GPG_ERR_ENOSYS = GPG_ERR_SYSTEM_ERROR | 94,
+    GPG_ERR_ENOTBLK = GPG_ERR_SYSTEM_ERROR | 95,
+    GPG_ERR_ENOTCONN = GPG_ERR_SYSTEM_ERROR | 96,
+    GPG_ERR_ENOTDIR = GPG_ERR_SYSTEM_ERROR | 97,
+    GPG_ERR_ENOTEMPTY = GPG_ERR_SYSTEM_ERROR | 98,
+    GPG_ERR_ENOTNAM = GPG_ERR_SYSTEM_ERROR | 99,
+    GPG_ERR_ENOTSOCK = GPG_ERR_SYSTEM_ERROR | 100,
+    GPG_ERR_ENOTSUP = GPG_ERR_SYSTEM_ERROR | 101,
+    GPG_ERR_ENOTTY = GPG_ERR_SYSTEM_ERROR | 102,
+    GPG_ERR_ENOTUNIQ = GPG_ERR_SYSTEM_ERROR | 103,
+    GPG_ERR_ENXIO = GPG_ERR_SYSTEM_ERROR | 104,
+    GPG_ERR_EOPNOTSUPP = GPG_ERR_SYSTEM_ERROR | 105,
+    GPG_ERR_EOVERFLOW = GPG_ERR_SYSTEM_ERROR | 106,
+    GPG_ERR_EPERM = GPG_ERR_SYSTEM_ERROR | 107,
+    GPG_ERR_EPFNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 108,
+    GPG_ERR_EPIPE = GPG_ERR_SYSTEM_ERROR | 109,
+    GPG_ERR_EPROCLIM = GPG_ERR_SYSTEM_ERROR | 110,
+    GPG_ERR_EPROCUNAVAIL = GPG_ERR_SYSTEM_ERROR | 111,
+    GPG_ERR_EPROGMISMATCH = GPG_ERR_SYSTEM_ERROR | 112,
+    GPG_ERR_EPROGUNAVAIL = GPG_ERR_SYSTEM_ERROR | 113,
+    GPG_ERR_EPROTO = GPG_ERR_SYSTEM_ERROR | 114,
+    GPG_ERR_EPROTONOSUPPORT = GPG_ERR_SYSTEM_ERROR | 115,
+    GPG_ERR_EPROTOTYPE = GPG_ERR_SYSTEM_ERROR | 116,
+    GPG_ERR_ERANGE = GPG_ERR_SYSTEM_ERROR | 117,
+    GPG_ERR_EREMCHG = GPG_ERR_SYSTEM_ERROR | 118,
+    GPG_ERR_EREMOTE = GPG_ERR_SYSTEM_ERROR | 119,
+    GPG_ERR_EREMOTEIO = GPG_ERR_SYSTEM_ERROR | 120,
+    GPG_ERR_ERESTART = GPG_ERR_SYSTEM_ERROR | 121,
+    GPG_ERR_EROFS = GPG_ERR_SYSTEM_ERROR | 122,
+    GPG_ERR_ERPCMISMATCH = GPG_ERR_SYSTEM_ERROR | 123,
+    GPG_ERR_ESHUTDOWN = GPG_ERR_SYSTEM_ERROR | 124,
+    GPG_ERR_ESOCKTNOSUPPORT = GPG_ERR_SYSTEM_ERROR | 125,
+    GPG_ERR_ESPIPE = GPG_ERR_SYSTEM_ERROR | 126,
+    GPG_ERR_ESRCH = GPG_ERR_SYSTEM_ERROR | 127,
+    GPG_ERR_ESRMNT = GPG_ERR_SYSTEM_ERROR | 128,
+    GPG_ERR_ESTALE = GPG_ERR_SYSTEM_ERROR | 129,
+    GPG_ERR_ESTRPIPE = GPG_ERR_SYSTEM_ERROR | 130,
+    GPG_ERR_ETIME = GPG_ERR_SYSTEM_ERROR | 131,
+    GPG_ERR_ETIMEDOUT = GPG_ERR_SYSTEM_ERROR | 132,
+    GPG_ERR_ETOOMANYREFS = GPG_ERR_SYSTEM_ERROR | 133,
+    GPG_ERR_ETXTBSY = GPG_ERR_SYSTEM_ERROR | 134,
+    GPG_ERR_EUCLEAN = GPG_ERR_SYSTEM_ERROR | 135,
+    GPG_ERR_EUNATCH = GPG_ERR_SYSTEM_ERROR | 136,
+    GPG_ERR_EUSERS = GPG_ERR_SYSTEM_ERROR | 137,
+    GPG_ERR_EWOULDBLOCK = GPG_ERR_SYSTEM_ERROR | 138,
+    GPG_ERR_EXDEV = GPG_ERR_SYSTEM_ERROR | 139,
+    GPG_ERR_EXFULL = GPG_ERR_SYSTEM_ERROR | 140,
+
+    /* This is one more than the largest allowed entry.  */
+    GPG_ERR_CODE_DIM = 65536
+  } gpg_err_code_t;
+
+
+/* The error value type gpg_error_t.  */
+
+/* We would really like to use bit-fields in a struct, but using
+ * structs as return values can cause binary compatibility issues, in
+ * particular if you want to do it efficiently (also see
+ * -freg-struct-return option to GCC).  */
+typedef unsigned int gpg_error_t;
+
+/* We use the lowest 16 bits of gpg_error_t for error codes.  The 16th
+ * bit indicates system errors.  */
+#define GPG_ERR_CODE_MASK	(GPG_ERR_CODE_DIM - 1)
+
+/* Bits 17 to 24 are reserved.  */
+
+/* We use the upper 7 bits of gpg_error_t for error sources.  */
+#define GPG_ERR_SOURCE_MASK	(GPG_ERR_SOURCE_DIM - 1)
+#define GPG_ERR_SOURCE_SHIFT	24
+
+/* The highest bit is reserved.  It shouldn't be used to prevent
+ * potential negative numbers when transmitting error values as
+ * text.  */
+
+
+/*
+ * GCC feature test.
+ */
+#if __GNUC__
+# define _GPG_ERR_GCC_VERSION (__GNUC__ * 10000 \
+                               + __GNUC_MINOR__ * 100 \
+                               + __GNUC_PATCHLEVEL__)
+#else
+# define _GPG_ERR_GCC_VERSION 0
+#endif
+
+#undef _GPG_ERR_HAVE_CONSTRUCTOR
+#if _GPG_ERR_GCC_VERSION > 30100
+# define _GPG_ERR_CONSTRUCTOR	__attribute__ ((__constructor__))
+# define _GPG_ERR_HAVE_CONSTRUCTOR
+#else
+# define _GPG_ERR_CONSTRUCTOR
+#endif
+
+#define GPGRT_GCC_VERSION  _GPG_ERR_GCC_VERSION
+
+#if _GPG_ERR_GCC_VERSION >= 29200
+# define _GPGRT__RESTRICT __restrict__
+#else
+# define _GPGRT__RESTRICT
+#endif
+
+/* The noreturn attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_ATTR_NORETURN   __attribute__ ((__noreturn__))
+#else
+# define GPGRT_ATTR_NORETURN
+#endif
+
+/* The printf attributes.  */
+#if _GPG_ERR_GCC_VERSION >= 40400
+# define GPGRT_ATTR_PRINTF(f, a) \
+                    __attribute__ ((format(__gnu_printf__,f,a)))
+# define GPGRT_ATTR_NR_PRINTF(f, a) \
+                    __attribute__ ((__noreturn__, format(__gnu_printf__,f,a)))
+#elif _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_ATTR_PRINTF(f, a) \
+                    __attribute__ ((format(printf,f,a)))
+# define GPGRT_ATTR_NR_PRINTF(f, a) \
+                    __attribute__ ((__noreturn__, format(printf,f,a)))
+#else
+# define GPGRT_ATTR_PRINTF(f, a)
+# define GPGRT_ATTR_NR_PRINTF(f, a)
+#endif
+#if _GPG_ERR_GCC_VERSION >= 20800
+# define GPGRT_ATTR_FORMAT_ARG(a)  __attribute__ ((__format_arg__ (a)))
+#else
+# define GPGRT_ATTR_FORMAT_ARG(a)
+#endif
+
+/* The sentinel attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 40000
+# define GPGRT_ATTR_SENTINEL(a)  __attribute__ ((sentinel(a)))
+#else
+# define GPGRT_ATTR_SENTINEL(a)
+#endif
+
+/* The used and unused attributes.
+ * I am not sure since when the unused attribute is really supported.
+ * In any case it it only needed for gcc versions which print a
+ * warning.  Thus let us require gcc >= 3.5.  */
+#if _GPG_ERR_GCC_VERSION >= 40000
+# define GPGRT_ATTR_USED  __attribute__ ((used))
+#else
+# define GPGRT_ATTR_USED
+#endif
+#if _GPG_ERR_GCC_VERSION >= 30500
+# define GPGRT_ATTR_UNUSED  __attribute__ ((unused))
+#else
+# define GPGRT_ATTR_UNUSED
+#endif
+
+/* The deprecated attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 30100
+# define GPGRT_ATTR_DEPRECATED  __attribute__ ((__deprecated__))
+#else
+# define GPGRT_ATTR_DEPRECATED
+#endif
+
+/* The pure attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 29600
+# define GPGRT_ATTR_PURE  __attribute__ ((__pure__))
+#else
+# define GPGRT_ATTR_PURE
+#endif
+
+/* The malloc attribute.  */
+#if _GPG_ERR_GCC_VERSION >= 30200
+# define GPGRT_ATTR_MALLOC  __attribute__ ((__malloc__))
+#else
+# define GPGRT_ATTR_MALLOC
+#endif
+
+/* A macro defined if a GCC style __FUNCTION__ macro is available.  */
+#undef GPGRT_HAVE_MACRO_FUNCTION
+#if _GPG_ERR_GCC_VERSION >= 20500
+# define GPGRT_HAVE_MACRO_FUNCTION 1
+#endif
+
+/* A macro defined if the pragma GCC push_options is available.  */
+#undef GPGRT_HAVE_PRAGMA_GCC_PUSH
+#if _GPG_ERR_GCC_VERSION >= 40400
+# define GPGRT_HAVE_PRAGMA_GCC_PUSH 1
+#endif
+
+/* Detect LeakSanitizer (LSan) support for GCC and Clang based on
+ * whether AddressSanitizer (ASAN) is enabled via -fsanitize=address).
+ * Note that -fsanitize=leak just affect the linker options which
+ * cannot be detected here.  In that case you have to define the
+ * GPGRT_HAVE_LEAK_SANITIZER macro manually.  */
+#ifdef __GNUC__
+# ifdef __SANITIZE_ADDRESS__
+#  define GPGRT_HAVE_LEAK_SANITIZER
+# elif defined(__has_feature)
+#  if __has_feature(address_sanitizer)
+#   define GPGRT_HAVE_LEAK_SANITIZER
+#  endif
+# endif
+#endif
+
+
+/* The new name for the inline macro.  */
+#define GPGRT_INLINE GPG_ERR_INLINE
+
+#ifdef GPGRT_HAVE_LEAK_SANITIZER
+# include <sanitizer/lsan_interface.h>
+#endif
+
+/* Mark heap objects as non-leaked memory. */
+static GPGRT_INLINE void
+gpgrt_annotate_leaked_object (const void *p)
+{
+#ifdef GPGRT_HAVE_LEAK_SANITIZER
+  __lsan_ignore_object(p);
+#else
+  (void)p;
+#endif
+}
+
+
+/*
+ * Initialization function.
+ */
+
+/* Initialize the library.  This function should be run early.  */
+gpg_error_t gpg_err_init (void) _GPG_ERR_CONSTRUCTOR;
+
+/* If this is defined, the library is already initialized by the
+   constructor and does not need to be initialized explicitely.  */
+#undef GPG_ERR_INITIALIZED
+#ifdef _GPG_ERR_HAVE_CONSTRUCTOR
+# define GPG_ERR_INITIALIZED	1
+# define gpgrt_init() do { gpg_err_init (); } while (0)
+#else
+# define gpgrt_init() do { ; } while (0)
+#endif
+
+/* See the source on how to use the deinit function; it is usually not
+   required.  */
+void gpg_err_deinit (int mode);
+
+/* Register blocking system I/O clamping functions.  */
+void gpgrt_set_syscall_clamp (void (*pre)(void), void (*post)(void));
+
+/* Get current I/O clamping functions.  */
+void gpgrt_get_syscall_clamp (void (**r_pre)(void), void (**r_post)(void));
+
+/* Register a custom malloc/realloc/free function.  */
+void gpgrt_set_alloc_func  (void *(*f)(void *a, size_t n));
+
+/* Register an emergency cleanup handler.  */
+void gpgrt_add_emergency_cleanup (void (*f)(void));
+
+/* Wrapper around abort to make sure emergency cleanups are run.  */
+void gpgrt_abort (void) GPGRT_ATTR_NORETURN;
+
+
+
+/*
+ * Constructor and accessor functions.
+ */
+
+/* Construct an error value from an error code and source.  Within a
+ * subsystem, use gpg_error.  */
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_make (gpg_err_source_t source, gpg_err_code_t code)
+{
+  return code == GPG_ERR_NO_ERROR ? GPG_ERR_NO_ERROR
+    : (((source & GPG_ERR_SOURCE_MASK) << GPG_ERR_SOURCE_SHIFT)
+       | (code & GPG_ERR_CODE_MASK));
+}
+
+
+/* The user should define GPG_ERR_SOURCE_DEFAULT before including this
+ * file to specify a default source for gpg_error.  */
+#ifndef GPG_ERR_SOURCE_DEFAULT
+#define GPG_ERR_SOURCE_DEFAULT	GPG_ERR_SOURCE_UNKNOWN
+#endif
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error (gpg_err_code_t code)
+{
+  return gpg_err_make (GPG_ERR_SOURCE_DEFAULT, code);
+}
+
+
+/* Retrieve the error code from an error value.  */
+static GPG_ERR_INLINE gpg_err_code_t
+gpg_err_code (gpg_error_t err)
+{
+  return (gpg_err_code_t) (err & GPG_ERR_CODE_MASK);
+}
+
+
+/* Retrieve the error source from an error value.  */
+static GPG_ERR_INLINE gpg_err_source_t
+gpg_err_source (gpg_error_t err)
+{
+  return (gpg_err_source_t) ((err >> GPG_ERR_SOURCE_SHIFT)
+			     & GPG_ERR_SOURCE_MASK);
+}
+
+
+/* String functions.  */
+
+/* Return a pointer to a string containing a description of the error
+ * code in the error value ERR.  This function is not thread-safe.  */
+const char *gpg_strerror (gpg_error_t err);
+
+/* Return the error string for ERR in the user-supplied buffer BUF of
+ * size BUFLEN.  This function is, in contrast to gpg_strerror,
+ * thread-safe if a thread-safe strerror_r() function is provided by
+ * the system.  If the function succeeds, 0 is returned and BUF
+ * contains the string describing the error.  If the buffer was not
+ * large enough, ERANGE is returned and BUF contains as much of the
+ * beginning of the error string as fits into the buffer.  */
+int gpg_strerror_r (gpg_error_t err, char *buf, size_t buflen);
+
+/* Return a pointer to a string containing a description of the error
+ * source in the error value ERR.  */
+const char *gpg_strsource (gpg_error_t err);
+
+
+/*
+ * Mapping of system errors (errno).
+ */
+
+/* Retrieve the error code for the system error ERR.  This returns
+ * GPG_ERR_UNKNOWN_ERRNO if the system error is not mapped (report
+ * this). */
+gpg_err_code_t gpg_err_code_from_errno (int err);
+
+/* Retrieve the system error for the error code CODE.  This returns 0
+ * if CODE is not a system error code.  */
+int gpg_err_code_to_errno (gpg_err_code_t code);
+
+/* Retrieve the error code directly from the ERRNO variable.  This
+ * returns GPG_ERR_UNKNOWN_ERRNO if the system error is not mapped
+ * (report this) and GPG_ERR_MISSING_ERRNO if ERRNO has the value 0. */
+gpg_err_code_t gpg_err_code_from_syserror (void);
+
+/* Mapper for SQLite primary error codes.  */
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_code_from_sqlite (int sqlres)
+{
+  return sqlres? GPG_ERR_SQL_OK + (sqlres & 0xff) : 0;
+}
+
+
+/* Set the ERRNO variable.  This function is the preferred way to set
+ * ERRNO due to peculiarities on WindowsCE.  */
+void gpg_err_set_errno (int err);
+
+/* Return or check the version.  Both functions are identical.  */
+const char *gpgrt_check_version (const char *req_version);
+const char *gpg_error_check_version (const char *req_version);
+
+/* System specific type definitions.  */
+#include <sys/types.h>
+
+typedef ssize_t gpgrt_ssize_t;
+
+typedef long gpgrt_off_t;
+
+
+
+
+/* Self-documenting convenience functions.  */
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_err_make_from_errno (gpg_err_source_t source, int err)
+{
+  return gpg_err_make (source, gpg_err_code_from_errno (err));
+}
+
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error_from_errno (int err)
+{
+  return gpg_error (gpg_err_code_from_errno (err));
+}
+
+static GPG_ERR_INLINE gpg_error_t
+gpg_error_from_syserror (void)
+{
+  return gpg_error (gpg_err_code_from_syserror ());
+}
+
+
+
+/*
+ * Malloc and friends
+ */
+
+void *gpgrt_realloc (void *a, size_t n);
+void *gpgrt_reallocarray (void *a, size_t oldnmemb, size_t nmemb, size_t size);
+void *gpgrt_malloc (size_t n);
+void *gpgrt_calloc (size_t n, size_t m);
+char *gpgrt_strdup (const char *string);
+char *gpgrt_strconcat (const char *s1, ...) GPGRT_ATTR_SENTINEL(0);
+void gpgrt_free (void *a);
+
+
+/*
+ * System specific function wrappers.
+ */
+
+/* A getenv replacement which mallocs the returned string.  */
+char *gpgrt_getenv (const char *name);
+
+/* A setenv and a unsetenv replacement.*/
+gpg_err_code_t gpgrt_setenv (const char *name,
+                             const char *value, int overwrite);
+#define gpgrt_unsetenv(n) gpgrt_setenv ((n), NULL, 1)
+
+/* A wrapper around mkdir using a string for the mode.  */
+gpg_err_code_t gpgrt_mkdir (const char *name, const char *modestr);
+
+/* A simple wrapper around chdir.  */
+gpg_err_code_t gpgrt_chdir (const char *name);
+
+/* Return the current WD as a malloced string.  */
+char *gpgrt_getcwd (void);
+
+/* A wrapper around access to handle UTF-8 on Windows.  */
+gpg_err_code_t gpgrt_access (const char *fname, int mode);
+
+
+
+
+/*
+ * Lock functions.
+ */
+
+
+typedef struct
+{
+  long _vers;
+  union {
+    volatile char _priv[40];
+    long _x_align;
+    long *_xp_align;
+  } u;
+} gpgrt_lock_t;
+
+#define GPGRT_LOCK_INITIALIZER {1,{{0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0}}}
+
+
+#define GPGRT_LOCK_DEFINE(name) \
+  static gpgrt_lock_t name  = GPGRT_LOCK_INITIALIZER
+
+/* NB: If GPGRT_LOCK_DEFINE is not used, zero out the lock variable
+   before passing it to gpgrt_lock_init.  */
+gpg_err_code_t gpgrt_lock_init (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_lock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_trylock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_unlock (gpgrt_lock_t *lockhd);
+gpg_err_code_t gpgrt_lock_destroy (gpgrt_lock_t *lockhd);
+
+
+
+/*
+ * Thread functions.
+ */
+
+gpg_err_code_t gpgrt_yield (void);
+
+
+
+
+/*
+ * Estream
+ */
+
+/* The definition of this struct is entirely private.  You must not
+   use it for anything.  It is only here so some functions can be
+   implemented as macros.  */
+struct _gpgrt_stream_internal;
+struct _gpgrt__stream
+{
+  /* The layout of this struct must never change.  It may be grown,
+     but only if all functions which access the new members are
+     versioned.  */
+
+  /* Various flags.  */
+  struct {
+    unsigned int magic: 16;
+    unsigned int writing: 1;
+    unsigned int reserved: 15;
+  } flags;
+
+  /* A pointer to the stream buffer.  */
+  unsigned char *buffer;
+
+  /* The size of the buffer in bytes.  */
+  size_t buffer_size;
+
+  /* The length of the usable data in the buffer, only valid when in
+     read mode (see flags).  */
+  size_t data_len;
+
+  /* The current position of the offset pointer, valid in read and
+     write mode.  */
+  size_t data_offset;
+
+  size_t data_flushed;
+  unsigned char *unread_buffer;
+  size_t unread_buffer_size;
+
+  /* The number of unread bytes.  */
+  size_t unread_data_len;
+
+  /* A pointer to our internal data for this stream.  */
+  struct _gpgrt_stream_internal *intern;
+};
+
+/* The opaque type for an estream.  */
+typedef struct _gpgrt__stream *gpgrt_stream_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt__stream *estream_t;
+#endif
+
+typedef ssize_t (*gpgrt_cookie_read_function_t) (void *cookie,
+                                                 void *buffer, size_t size);
+typedef ssize_t (*gpgrt_cookie_write_function_t) (void *cookie,
+                                                  const void *buffer,
+                                                  size_t size);
+typedef int (*gpgrt_cookie_seek_function_t) (void *cookie,
+                                             gpgrt_off_t *pos, int whence);
+typedef int (*gpgrt_cookie_close_function_t) (void *cookie);
+
+struct _gpgrt_cookie_io_functions
+{
+  gpgrt_cookie_read_function_t func_read;
+  gpgrt_cookie_write_function_t func_write;
+  gpgrt_cookie_seek_function_t func_seek;
+  gpgrt_cookie_close_function_t func_close;
+};
+typedef struct _gpgrt_cookie_io_functions gpgrt_cookie_io_functions_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_cookie_io_functions  es_cookie_io_functions_t;
+#define es_cookie_read_function_t  gpgrt_cookie_read_function_t
+#define es_cookie_write_function_t gpgrt_cookie_read_function_t
+#define es_cookie_seek_function_t  gpgrt_cookie_read_function_t
+#define es_cookie_close_function_t gpgrt_cookie_read_function_t
+#endif
+
+enum gpgrt_syshd_types
+  {
+    GPGRT_SYSHD_NONE = 0,  /* No system handle available.                   */
+    GPGRT_SYSHD_FD = 1,    /* A file descriptor as returned by open().      */
+    GPGRT_SYSHD_SOCK = 2,  /* A socket as returned by socket().             */
+    GPGRT_SYSHD_RVID = 3,  /* A rendezvous id (see libassuan's gpgcedev.c).  */
+    GPGRT_SYSHD_HANDLE = 4 /* A HANDLE object (Windows).                    */
+  };
+
+struct _gpgrt_syshd
+{
+  enum gpgrt_syshd_types type;
+  union {
+    int fd;
+    int sock;
+    int rvid;
+    void *handle;
+  } u;
+};
+typedef struct _gpgrt_syshd gpgrt_syshd_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_syshd es_syshd_t;
+#define ES_SYSHD_NONE   GPGRT_SYSHD_NONE
+#define ES_SYSHD_FD     GPGRT_SYSHD_FD
+#define ES_SYSHD_SOCK   GPGRT_SYSHD_SOCK
+#define ES_SYSHD_RVID   GPGRT_SYSHD_RVID
+#define ES_SYSHD_HANDLE GPGRT_SYSHD_HANDLE
+#endif
+
+/* The object used with gpgrt_poll.  */
+struct _gpgrt_poll_s
+{
+  gpgrt_stream_t stream;
+  unsigned int want_read:1;
+  unsigned int want_write:1;
+  unsigned int want_oob:1;
+  unsigned int want_rdhup:1;
+  unsigned int _reserv1:4;
+  unsigned int got_read:1;
+  unsigned int got_write:1;
+  unsigned int got_oob:1;
+  unsigned int got_rdhup:1;
+  unsigned int _reserv2:4;
+  unsigned int got_err:1;
+  unsigned int got_hup:1;
+  unsigned int got_nval:1;
+  unsigned int _reserv3:4;
+  unsigned int ignore:1;
+  unsigned int user:8;       /* For application use.  */
+};
+typedef struct _gpgrt_poll_s gpgrt_poll_t;
+#ifdef GPGRT_ENABLE_ES_MACROS
+typedef struct _gpgrt_poll_s es_poll_t;
+#endif
+
+/* The type of the string filter function as used by fprintf_sf et al.  */
+typedef char *(*gpgrt_string_filter_t) (const char *s, int n, void *opaque);
+
+
+
+gpgrt_stream_t gpgrt_fopen (const char *_GPGRT__RESTRICT path,
+                            const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_mopen (void *_GPGRT__RESTRICT data,
+                            size_t data_n, size_t data_len,
+                            unsigned int grow,
+                            void *(*func_realloc) (void *mem, size_t size),
+                            void (*func_free) (void *mem),
+                            const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_fopenmem (size_t memlimit,
+                               const char *_GPGRT__RESTRICT mode);
+gpgrt_stream_t gpgrt_fopenmem_init (size_t memlimit,
+                                    const char *_GPGRT__RESTRICT mode,
+                                    const void *data, size_t datalen);
+gpgrt_stream_t gpgrt_fdopen    (int filedes, const char *mode);
+gpgrt_stream_t gpgrt_fdopen_nc (int filedes, const char *mode);
+gpgrt_stream_t gpgrt_sysopen    (gpgrt_syshd_t *syshd, const char *mode);
+gpgrt_stream_t gpgrt_sysopen_nc (gpgrt_syshd_t *syshd, const char *mode);
+gpgrt_stream_t gpgrt_fpopen    (FILE *fp, const char *mode);
+gpgrt_stream_t gpgrt_fpopen_nc (FILE *fp, const char *mode);
+gpgrt_stream_t gpgrt_freopen (const char *_GPGRT__RESTRICT path,
+                              const char *_GPGRT__RESTRICT mode,
+                              gpgrt_stream_t _GPGRT__RESTRICT stream);
+gpgrt_stream_t gpgrt_fopencookie (void *_GPGRT__RESTRICT cookie,
+                                  const char *_GPGRT__RESTRICT mode,
+                                  gpgrt_cookie_io_functions_t functions);
+int gpgrt_fclose (gpgrt_stream_t stream);
+int gpgrt_fcancel (gpgrt_stream_t stream);
+int gpgrt_fclose_snatch (gpgrt_stream_t stream,
+                         void **r_buffer, size_t *r_buflen);
+int gpgrt_onclose (gpgrt_stream_t stream, int mode,
+                   void (*fnc) (gpgrt_stream_t, void*), void *fnc_value);
+int gpgrt_fileno (gpgrt_stream_t stream);
+int gpgrt_fileno_unlocked (gpgrt_stream_t stream);
+int gpgrt_syshd (gpgrt_stream_t stream, gpgrt_syshd_t *syshd);
+int gpgrt_syshd_unlocked (gpgrt_stream_t stream, gpgrt_syshd_t *syshd);
+
+void _gpgrt_set_std_fd (int no, int fd);
+gpgrt_stream_t _gpgrt_get_std_stream (int fd);
+
+#define gpgrt_stdin  _gpgrt_get_std_stream (0)
+#define gpgrt_stdout _gpgrt_get_std_stream (1)
+#define gpgrt_stderr _gpgrt_get_std_stream (2)
+
+
+void gpgrt_flockfile (gpgrt_stream_t stream);
+int  gpgrt_ftrylockfile (gpgrt_stream_t stream);
+void gpgrt_funlockfile (gpgrt_stream_t stream);
+
+int gpgrt_feof (gpgrt_stream_t stream);
+int gpgrt_feof_unlocked (gpgrt_stream_t stream);
+int gpgrt_ferror (gpgrt_stream_t stream);
+int gpgrt_ferror_unlocked (gpgrt_stream_t stream);
+void gpgrt_clearerr (gpgrt_stream_t stream);
+void gpgrt_clearerr_unlocked (gpgrt_stream_t stream);
+
+int _gpgrt_pending (gpgrt_stream_t stream);          /* (private) */
+int _gpgrt_pending_unlocked (gpgrt_stream_t stream); /* (private) */
+
+#define gpgrt_pending(stream) _gpgrt_pending (stream)
+
+#define gpgrt_pending_unlocked(stream)				\
+  (((!(stream)->flags.writing)					\
+    && (((stream)->data_offset < (stream)->data_len)		\
+        || ((stream)->unread_data_len)))                        \
+   ? 1 : _gpgrt_pending_unlocked ((stream)))
+
+int gpgrt_fflush (gpgrt_stream_t stream);
+int gpgrt_fseek (gpgrt_stream_t stream, long int offset, int whence);
+int gpgrt_fseeko (gpgrt_stream_t stream, gpgrt_off_t offset, int whence);
+int gpgrt_ftruncate (gpgrt_stream_t stream, gpgrt_off_t length);
+long int gpgrt_ftell (gpgrt_stream_t stream);
+gpgrt_off_t gpgrt_ftello (gpgrt_stream_t stream);
+void gpgrt_rewind (gpgrt_stream_t stream);
+
+int gpgrt_fgetc (gpgrt_stream_t stream);
+int gpgrt_fputc (int c, gpgrt_stream_t stream);
+
+int _gpgrt_getc_underflow (gpgrt_stream_t stream);       /* (private) */
+int _gpgrt_putc_overflow (int c, gpgrt_stream_t stream); /* (private) */
+
+#define gpgrt_getc_unlocked(stream)				\
+  (((!(stream)->flags.writing)					\
+    && ((stream)->data_offset < (stream)->data_len)		\
+    && (! (stream)->unread_data_len))				\
+  ? ((int) (stream)->buffer[((stream)->data_offset)++])		\
+  : _gpgrt_getc_underflow ((stream)))
+
+#define gpgrt_putc_unlocked(c, stream)				\
+  (((stream)->flags.writing					\
+    && ((stream)->data_offset < (stream)->buffer_size)		\
+    && (c != '\n'))						\
+  ? ((int) ((stream)->buffer[((stream)->data_offset)++] = (c)))	\
+  : _gpgrt_putc_overflow ((c), (stream)))
+
+#define gpgrt_getc(stream)    gpgrt_fgetc (stream)
+#define gpgrt_putc(c, stream) gpgrt_fputc (c, stream)
+
+int gpgrt_ungetc (int c, gpgrt_stream_t stream);
+
+int gpgrt_read (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                void *_GPGRT__RESTRICT buffer, size_t bytes_to_read,
+                size_t *_GPGRT__RESTRICT bytes_read);
+int gpgrt_write (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                 const void *_GPGRT__RESTRICT buffer, size_t bytes_to_write,
+                 size_t *_GPGRT__RESTRICT bytes_written);
+int gpgrt_write_sanitized (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                           const void *_GPGRT__RESTRICT buffer, size_t length,
+                           const char *delimiters,
+                           size_t *_GPGRT__RESTRICT bytes_written);
+int gpgrt_write_hexstring (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                           const void *_GPGRT__RESTRICT buffer, size_t length,
+                           int reserved,
+                           size_t *_GPGRT__RESTRICT bytes_written);
+
+size_t gpgrt_fread (void *_GPGRT__RESTRICT ptr, size_t size, size_t nitems,
+                    gpgrt_stream_t _GPGRT__RESTRICT stream);
+size_t gpgrt_fwrite (const void *_GPGRT__RESTRICT ptr, size_t size,
+                     size_t nitems, gpgrt_stream_t _GPGRT__RESTRICT stream);
+
+char *gpgrt_fgets (char *_GPGRT__RESTRICT s, int n,
+                   gpgrt_stream_t _GPGRT__RESTRICT stream);
+int gpgrt_fputs (const char *_GPGRT__RESTRICT s,
+                 gpgrt_stream_t _GPGRT__RESTRICT stream);
+int gpgrt_fputs_unlocked (const char *_GPGRT__RESTRICT s,
+                          gpgrt_stream_t _GPGRT__RESTRICT stream);
+
+ssize_t gpgrt_getline (char *_GPGRT__RESTRICT *_GPGRT__RESTRICT lineptr,
+                       size_t *_GPGRT__RESTRICT n,
+                       gpgrt_stream_t stream);
+ssize_t gpgrt_read_line (gpgrt_stream_t stream,
+                         char **addr_of_buffer, size_t *length_of_buffer,
+                         size_t *max_length);
+
+int gpgrt_fprintf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   const char *_GPGRT__RESTRICT format, ...)
+                   GPGRT_ATTR_PRINTF(2,3);
+int gpgrt_fprintf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                            const char *_GPGRT__RESTRICT format, ...)
+                            GPGRT_ATTR_PRINTF(2,3);
+
+int gpgrt_fprintf_sf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                      gpgrt_string_filter_t sf, void *sfvalue,
+                      const char *_GPGRT__RESTRICT format,
+                      ...) GPGRT_ATTR_PRINTF(4,5);
+int gpgrt_fprintf_sf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                               gpgrt_string_filter_t sf, void *sfvalue,
+                               const char *_GPGRT__RESTRICT format,
+                               ...) GPGRT_ATTR_PRINTF(4,5);
+
+int gpgrt_printf (const char *_GPGRT__RESTRICT format, ...)
+                  GPGRT_ATTR_PRINTF(1,2);
+int gpgrt_printf_unlocked (const char *_GPGRT__RESTRICT format, ...)
+                           GPGRT_ATTR_PRINTF(1,2);
+
+int gpgrt_vfprintf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                    const char *_GPGRT__RESTRICT format, va_list ap)
+                    GPGRT_ATTR_PRINTF(2,0);
+int gpgrt_vfprintf_unlocked (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                             const char *_GPGRT__RESTRICT format, va_list ap)
+                             GPGRT_ATTR_PRINTF(2,0);
+
+int gpgrt_setvbuf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   char *_GPGRT__RESTRICT buf, int mode, size_t size);
+void gpgrt_setbuf (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                   char *_GPGRT__RESTRICT buf);
+
+void gpgrt_set_binary (gpgrt_stream_t stream);
+int  gpgrt_set_nonblock (gpgrt_stream_t stream, int onoff);
+int  gpgrt_get_nonblock (gpgrt_stream_t stream);
+
+int gpgrt_poll (gpgrt_poll_t *fdlist, unsigned int nfds, int timeout);
+
+gpgrt_stream_t gpgrt_tmpfile (void);
+
+void gpgrt_opaque_set (gpgrt_stream_t _GPGRT__RESTRICT stream,
+                       void *_GPGRT__RESTRICT opaque);
+void *gpgrt_opaque_get (gpgrt_stream_t stream);
+
+void gpgrt_fname_set (gpgrt_stream_t stream, const char *fname);
+const char *gpgrt_fname_get (gpgrt_stream_t stream);
+
+int gpgrt_asprintf (char **r_buf, const char * _GPGRT__RESTRICT format, ...)
+                    GPGRT_ATTR_PRINTF(2,3);
+int gpgrt_vasprintf (char **r_buf, const char * _GPGRT__RESTRICT format,
+                     va_list ap)
+                     GPGRT_ATTR_PRINTF(2,0);
+char *gpgrt_bsprintf (const char * _GPGRT__RESTRICT format, ...)
+                      GPGRT_ATTR_PRINTF(1,2);
+char *gpgrt_vbsprintf (const char * _GPGRT__RESTRICT format, va_list ap)
+                       GPGRT_ATTR_PRINTF(1,0);
+int gpgrt_snprintf (char *buf, size_t bufsize,
+                    const char * _GPGRT__RESTRICT format, ...)
+                    GPGRT_ATTR_PRINTF(3,4);
+int gpgrt_vsnprintf (char *buf,size_t bufsize,
+                     const char * _GPGRT__RESTRICT format, va_list arg_ptr)
+                     GPGRT_ATTR_PRINTF(3,0);
+
+
+#ifdef GPGRT_ENABLE_ES_MACROS
+# define es_fopen             gpgrt_fopen
+# define es_mopen             gpgrt_mopen
+# define es_fopenmem          gpgrt_fopenmem
+# define es_fopenmem_init     gpgrt_fopenmem_init
+# define es_fdopen            gpgrt_fdopen
+# define es_fdopen_nc         gpgrt_fdopen_nc
+# define es_sysopen           gpgrt_sysopen
+# define es_sysopen_nc        gpgrt_sysopen_nc
+# define es_fpopen            gpgrt_fpopen
+# define es_fpopen_nc         gpgrt_fpopen_nc
+# define es_freopen           gpgrt_freopen
+# define es_fopencookie       gpgrt_fopencookie
+# define es_fclose            gpgrt_fclose
+# define es_fclose_snatch     gpgrt_fclose_snatch
+# define es_onclose           gpgrt_onclose
+# define es_fileno            gpgrt_fileno
+# define es_fileno_unlocked   gpgrt_fileno_unlocked
+# define es_syshd             gpgrt_syshd
+# define es_syshd_unlocked    gpgrt_syshd_unlocked
+# define es_stdin             _gpgrt_get_std_stream (0)
+# define es_stdout            _gpgrt_get_std_stream (1)
+# define es_stderr            _gpgrt_get_std_stream (2)
+# define es_flockfile         gpgrt_flockfile
+# define es_ftrylockfile      gpgrt_ftrylockfile
+# define es_funlockfile       gpgrt_funlockfile
+# define es_feof              gpgrt_feof
+# define es_feof_unlocked     gpgrt_feof_unlocked
+# define es_ferror            gpgrt_ferror
+# define es_ferror_unlocked   gpgrt_ferror_unlocked
+# define es_clearerr          gpgrt_clearerr
+# define es_clearerr_unlocked gpgrt_clearerr_unlocked
+# define es_pending           gpgrt_pending
+# define es_pending_unlocked  gpgrt_pending_unlocked
+# define es_fflush            gpgrt_fflush
+# define es_fseek             gpgrt_fseek
+# define es_fseeko            gpgrt_fseeko
+# define es_ftruncate         gpgrt_ftruncate
+# define es_ftell             gpgrt_ftell
+# define es_ftello            gpgrt_ftello
+# define es_rewind            gpgrt_rewind
+# define es_fgetc             gpgrt_fgetc
+# define es_fputc             gpgrt_fputc
+# define es_getc_unlocked     gpgrt_getc_unlocked
+# define es_putc_unlocked     gpgrt_putc_unlocked
+# define es_getc              gpgrt_getc
+# define es_putc              gpgrt_putc
+# define es_ungetc            gpgrt_ungetc
+# define es_read              gpgrt_read
+# define es_write             gpgrt_write
+# define es_write_sanitized   gpgrt_write_sanitized
+# define es_write_hexstring   gpgrt_write_hexstring
+# define es_fread             gpgrt_fread
+# define es_fwrite            gpgrt_fwrite
+# define es_fgets             gpgrt_fgets
+# define es_fputs             gpgrt_fputs
+# define es_fputs_unlocked    gpgrt_fputs_unlocked
+# define es_getline           gpgrt_getline
+# define es_read_line         gpgrt_read_line
+# define es_free              gpgrt_free
+# define es_fprintf           gpgrt_fprintf
+# define es_fprintf_unlocked  gpgrt_fprintf_unlocked
+# define es_printf            gpgrt_printf
+# define es_printf_unlocked   gpgrt_printf_unlocked
+# define es_vfprintf          gpgrt_vfprintf
+# define es_vfprintf_unlocked gpgrt_vfprintf_unlocked
+# define es_setvbuf           gpgrt_setvbuf
+# define es_setbuf            gpgrt_setbuf
+# define es_set_binary        gpgrt_set_binary
+# define es_set_nonblock      gpgrt_set_nonblock
+# define es_get_nonblock      gpgrt_get_nonblock
+# define es_poll              gpgrt_poll
+# define es_tmpfile           gpgrt_tmpfile
+# define es_opaque_set        gpgrt_opaque_set
+# define es_opaque_get        gpgrt_opaque_get
+# define es_fname_set         gpgrt_fname_set
+# define es_fname_get         gpgrt_fname_get
+# define es_asprintf          gpgrt_asprintf
+# define es_vasprintf         gpgrt_vasprintf
+# define es_bsprintf          gpgrt_bsprintf
+# define es_vbsprintf         gpgrt_vbsprintf
+#endif /*GPGRT_ENABLE_ES_MACROS*/
+
+
+
+/*
+ * Base64 encode and decode functions.
+ */
+
+struct _gpgrt_b64state;
+typedef struct _gpgrt_b64state *gpgrt_b64state_t;
+
+gpgrt_b64state_t gpgrt_b64enc_start (gpgrt_stream_t stream, const char *title);
+gpg_err_code_t   gpgrt_b64enc_write (gpgrt_b64state_t state,
+                                     const void *buffer, size_t nbytes);
+gpg_err_code_t   gpgrt_b64enc_finish (gpgrt_b64state_t state);
+
+gpgrt_b64state_t gpgrt_b64dec_start (const char *title);
+gpg_error_t      gpgrt_b64dec_proc (gpgrt_b64state_t state,
+                                    void *buffer, size_t length,
+                                    size_t *r_nbytes);
+gpg_error_t      gpgrt_b64dec_finish (gpgrt_b64state_t state);
+
+
+
+/*
+ * Logging functions
+ */
+
+/* Flag values for gpgrt_log_set_prefix. */
+#define GPGRT_LOG_WITH_PREFIX  1
+#define GPGRT_LOG_WITH_TIME    2
+#define GPGRT_LOG_WITH_PID     4
+#define GPGRT_LOG_RUN_DETACHED 256
+#define GPGRT_LOG_NO_REGISTRY  512
+
+/* Log levels as used by gpgrt_log.  */
+enum gpgrt_log_levels
+  {
+    GPGRT_LOGLVL_BEGIN,
+    GPGRT_LOGLVL_CONT,
+    GPGRT_LOGLVL_INFO,
+    GPGRT_LOGLVL_WARN,
+    GPGRT_LOGLVL_ERROR,
+    GPGRT_LOGLVL_FATAL,
+    GPGRT_LOGLVL_BUG,
+    GPGRT_LOGLVL_DEBUG
+  };
+
+
+/* The next 4 functions are not thread-safe - call them early.  */
+void gpgrt_log_set_sink (const char *name, gpgrt_stream_t stream, int fd);
+void gpgrt_log_set_socket_dir_cb (const char *(*fnc)(void));
+void gpgrt_log_set_pid_suffix_cb (int (*cb)(unsigned long *r_value));
+void gpgrt_log_set_prefix (const char *text, unsigned int flags);
+
+int  gpgrt_get_errorcount (int clear);
+void gpgrt_inc_errorcount (void);
+const char *gpgrt_log_get_prefix (unsigned int *flags);
+int  gpgrt_log_test_fd (int fd);
+int  gpgrt_log_get_fd (void);
+gpgrt_stream_t gpgrt_log_get_stream (void);
+
+void gpgrt_log (int level, const char *fmt, ...) GPGRT_ATTR_PRINTF(2,3);
+void gpgrt_logv (int level, const char *fmt, va_list arg_ptr);
+void gpgrt_logv_prefix (int level, const char *prefix,
+                              const char *fmt, va_list arg_ptr);
+void gpgrt_log_string (int level, const char *string);
+void gpgrt_log_bug (const char *fmt, ...)    GPGRT_ATTR_NR_PRINTF(1,2);
+void gpgrt_log_fatal (const char *fmt, ...)  GPGRT_ATTR_NR_PRINTF(1,2);
+void gpgrt_log_error (const char *fmt, ...)  GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_info (const char *fmt, ...)   GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_debug (const char *fmt, ...)  GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_debug_string (const char *string,
+                             const char *fmt, ...) GPGRT_ATTR_PRINTF(2,3);
+void gpgrt_log_printf (const char *fmt, ...) GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_printhex (const void *buffer, size_t length,
+                         const char *fmt, ...) GPGRT_ATTR_PRINTF(3,4);
+void gpgrt_log_clock (const char *fmt, ...) GPGRT_ATTR_PRINTF(1,2);
+void gpgrt_log_flush (void);
+void _gpgrt_log_assert (const char *expr, const char *file, int line,
+                        const char *func) GPGRT_ATTR_NORETURN;
+
+#ifdef GPGRT_HAVE_MACRO_FUNCTION
+# define gpgrt_assert(expr)                                     \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, __FUNCTION__))
+#else /*!GPGRT_HAVE_MACRO_FUNCTION*/
+# define gpgrt_assert(expr)                                     \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, NULL))
+#endif /*!GPGRT_HAVE_MACRO_FUNCTION*/
+
+#ifdef GPGRT_ENABLE_LOG_MACROS
+# define log_get_errorcount      gpgrt_get_errorcount
+# define log_inc_errorcount      gpgrt_inc_errorcount
+# define log_set_file(a)         gpgrt_log_set_sink ((a), NULL, -1)
+# define log_set_fd(a)           gpgrt_log_set_sink (NULL, NULL, (a))
+# define log_set_stream(a)       gpgrt_log_set_sink (NULL, (a), -1)
+# define log_set_socket_dir_cb   gpgrt_log_set_socket_dir_cb
+# define log_set_pid_suffix_cb   gpgrt_log_set_pid_suffix_cb
+# define log_set_prefix          gpgrt_log_set_prefix
+# define log_get_prefix          gpgrt_log_get_prefix
+# define log_test_fd             gpgrt_log_test_fd
+# define log_get_fd              gpgrt_log_get_fd
+# define log_get_stream          gpgrt_log_get_stream
+# define log_log                 gpgrt_log
+# define log_logv                gpgrt_logv
+# define log_logv_prefix         gpgrt_logv_prefix
+# define log_string              gpgrt_log_string
+# define log_bug                 gpgrt_log_bug
+# define log_fatal               gpgrt_log_fatal
+# define log_error               gpgrt_log_error
+# define log_info                gpgrt_log_info
+# define log_debug               gpgrt_log_debug
+# define log_debug_string        gpgrt_log_debug_string
+# define log_printf              gpgrt_log_printf
+# define log_printhex            gpgrt_log_printhex
+# define log_clock               gpgrt_log_clock
+# define log_flush               gpgrt_log_flush
+# ifdef GPGRT_HAVE_MACRO_FUNCTION
+#  define log_assert(expr)                                      \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, __FUNCTION__))
+# else /*!GPGRT_HAVE_MACRO_FUNCTION*/
+#  define log_assert(expr)                                      \
+  ((expr)                                                       \
+   ? (void) 0                                                   \
+   : _gpgrt_log_assert (#expr, __FILE__, __LINE__, NULL))
+# endif /*!GPGRT_HAVE_MACRO_FUNCTION*/
+
+#endif /*GPGRT_ENABLE_LOG_MACROS*/
+
+
+/*
+ * Spawn functions  (Not yet available)
+ */
+#define GPGRT_SPAWN_NONBLOCK   16 /* Set the streams to non-blocking.      */
+#define GPGRT_SPAWN_RUN_ASFW   64 /* Use AllowSetForegroundWindow on W32.  */
+#define GPGRT_SPAWN_DETACHED  128 /* Start the process in the background.  */
+
+#if 0
+
+/* Function and convenience macros to create pipes.  */
+gpg_err_code_t gpgrt_make_pipe (int filedes[2], gpgrt_stream_t *r_fp,
+                                int direction, int nonblock);
+#define gpgrt_create_pipe(a)              gpgrt_make_pipe ((a),NULL,  0,  0);
+#define gpgrt_create_inbound_pipe(a,b,c)  gpgrt_make_pipe ((a), (b), -1,(c));
+#define gpgrt_create_outbound_pipe(a,b,c) gpgrt_make_pipe ((a), (b),  1,(c));
+
+
+/* Fork and exec PGMNAME.  */
+gpg_err_code_t gpgrt_spawn_process (const char *pgmname, const char *argv[],
+                                    int *execpt, void (*preexec)(void),
+                                    unsigned int flags,
+                                    gpgrt_stream_t *r_infp,
+                                    gpgrt_stream_t *r_outfp,
+                                    gpgrt_stream_t *r_errfp,
+                                    pid_t *pid);
+
+/* Fork and exec PGNNAME and connect the process to the given FDs.  */
+gpg_err_code_t gpgrt_spawn_process_fd (const char *pgmname, const char *argv[],
+                                       int infd, int outfd, int errfd,
+                                       pid_t *pid);
+
+/* Fork and exec PGMNAME as a detached process.  */
+gpg_err_code_t gpgrt_spawn_process_detached (const char *pgmname,
+                                             const char *argv[],
+                                             const char *envp[] );
+
+/* Wait for a single process.  */
+gpg_err_code_t gpgrt_wait_process (const char *pgmname, pid_t pid, int hang,
+                                int *r_exitcode);
+
+/* Wait for a multiple processes.  */
+gpg_err_code_t gpgrt_wait_processes (const char **pgmnames, pid_t *pids,
+                                     size_t count, int hang, int *r_exitcodes);
+
+/* Kill the process identified by PID.  */
+void gpgrt_kill_process (pid_t pid);
+
+/* Release process resources identified by PID.  */
+void gpgrt_release_process (pid_t pid);
+
+#endif /*0*/
+
+
+
+/*
+ * Option parsing.
+ */
+
+struct _gpgrt_argparse_internal_s;
+typedef struct
+{
+  int  *argc;	      /* Pointer to ARGC (value subject to change). */
+  char ***argv;	      /* Pointer to ARGV (value subject to change). */
+  unsigned int flags; /* Global flags.  May be set prior to calling the
+                         parser.  The parser may change the value.  */
+  int err;            /* Print error description for last option.
+                         Either 0,  ARGPARSE_PRINT_WARNING or
+                         ARGPARSE_PRINT_ERROR.  */
+  unsigned int lineno;/* The current line number.  */
+  int r_opt; 	      /* Returns option code. */
+  int r_type;	      /* Returns type of option value.  */
+  union {
+    int   ret_int;
+    long  ret_long;
+    unsigned long ret_ulong;
+    char *ret_str;
+  } r;		      /* Return values */
+
+  struct _gpgrt_argparse_internal_s *internal;
+} gpgrt_argparse_t;
+
+
+typedef struct
+{
+  int          short_opt;
+  const char  *long_opt;
+  unsigned int flags;
+  const char  *description; /* Optional description. */
+} gpgrt_opt_t;
+
+
+#ifdef GPGRT_ENABLE_ARGPARSE_MACROS
+
+/* Global flags for (gpgrt_argparse_t).flags.  */
+#define ARGPARSE_FLAG_KEEP        1  /* Do not remove options form argv.     */
+#define ARGPARSE_FLAG_ALL         2  /* Do not stop at last option but return
+                                        remaining args with R_OPT set to -1. */
+#define ARGPARSE_FLAG_MIXED       4  /* Assume options and args are mixed.   */
+#define ARGPARSE_FLAG_NOSTOP      8  /* Do not stop processing at "--".      */
+#define ARGPARSE_FLAG_ARG0       16  /* Do not skip the first arg.           */
+#define ARGPARSE_FLAG_ONEDASH    32  /* Allow long options with one dash.    */
+#define ARGPARSE_FLAG_NOVERSION  64  /* No output for "--version".           */
+#define ARGPARSE_FLAG_RESET     128  /* Request to reset the internal state. */
+#define ARGPARSE_FLAG_STOP_SEEN 256  /* Set to true if a "--" has been seen. */
+#define ARGPARSE_FLAG_NOLINENO  512  /* Do not zero the lineno field.        */
+#define ARGPARSE_FLAG_SYS      1024  /* Use system config file.              */
+#define ARGPARSE_FLAG_USER     2048  /* Use user config file.                */
+#define ARGPARSE_FLAG_VERBOSE  4096  /* Print additional argparser info.     */
+#define ARGPARSE_FLAG_USERVERS 8192  /* Try version-ed user config files.    */
+#define ARGPARSE_FLAG_WITHATTR 16384 /* Return attribute bits.               */
+
+/* Constants for (gpgrt_argparse_t).err.  */
+#define ARGPARSE_PRINT_WARNING  1    /* Print a diagnostic.                  */
+#define ARGPARSE_PRINT_ERROR    2    /* Print a diagnostic and call exit.    */
+
+/* Special return values of gpgrt_argparse.  */
+#define ARGPARSE_IS_ARG            (-1)
+#define ARGPARSE_INVALID_OPTION    (-2)
+#define ARGPARSE_MISSING_ARG       (-3)
+#define ARGPARSE_KEYWORD_TOO_LONG  (-4)
+#define ARGPARSE_READ_ERROR        (-5)
+#define ARGPARSE_UNEXPECTED_ARG    (-6)
+#define ARGPARSE_INVALID_COMMAND   (-7)
+#define ARGPARSE_AMBIGUOUS_OPTION  (-8)
+#define ARGPARSE_AMBIGUOUS_COMMAND (-9)
+#define ARGPARSE_INVALID_ALIAS     (-10)
+#define ARGPARSE_OUT_OF_CORE       (-11)
+#define ARGPARSE_INVALID_ARG       (-12)
+#define ARGPARSE_PERMISSION_ERROR  (-13)
+#define ARGPARSE_NO_CONFFILE       (-14)
+#define ARGPARSE_CONFFILE          (-15)
+#define ARGPARSE_INVALID_META      (-16)
+#define ARGPARSE_UNKNOWN_META      (-17)
+#define ARGPARSE_UNEXPECTED_META   (-18)
+
+/* Flags for the option descriptor (gpgrt_opt_t)->flags.  Note that a
+ * TYPE constant may be or-ed with the OPT constants but when used as
+ * return value in r_type these OPT constants are normally not
+ * included.  However with ARGPARSE_FLAG_WITHATTR used and an option
+ * would normally not be returned, it is returned but
+ * ARGPARSE_OPT_IGNORE is then set; further ARPARSE_ATTR_* are set.
+ */
+#define ARGPARSE_TYPE_MASK   0x0007  /* Mask for the type bits.           */
+#define ARGPARSE_TYPE_NONE        0  /* Does not take an argument.        */
+#define ARGPARSE_TYPE_INT         1  /* Takes an int argument.            */
+#define ARGPARSE_TYPE_STRING      2  /* Takes a string argument.          */
+#define ARGPARSE_TYPE_LONG        3  /* Takes a long argument.            */
+#define ARGPARSE_TYPE_ULONG       4  /* Takes an unsigned long argument.  */
+#define ARGPARSE_OPT_OPTIONAL (1<<3) /* Argument is optional.             */
+#define ARGPARSE_OPT_PREFIX   (1<<4) /* Allow 0x etc. prefixed values.    */
+#define ARGPARSE_OPT_IGNORE   (1<<6) /* Ignore command or option.         */
+#define ARGPARSE_OPT_COMMAND  (1<<7) /* The argument is a command.        */
+#define ARGPARSE_OPT_CONFFILE (1<<8) /* The value is a conffile.          */
+#define ARGPARSE_OPT_HEADER   (1<<9) /* The value is printed as a header. */
+#define ARGPARSE_OPT_VERBATIM (1<<10)/* The value is printed verbatim.    */
+#define ARGPARSE_ATTR_FORCE   (1<<14)/* Attribute force is set.           */
+#define ARGPARSE_ATTR_IGNORE  (1<<15)/* Attribute ignore is set.          */
+
+/* A set of macros to make option definitions easier to read.  */
+#define ARGPARSE_x(s,l,t,f,d) \
+     { (s), (l), ARGPARSE_TYPE_ ## t | (f), (d) }
+
+#define ARGPARSE_s(s,l,t,d) \
+     { (s), (l), ARGPARSE_TYPE_ ## t, (d) }
+#define ARGPARSE_s_n(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_NONE, (d) }
+#define ARGPARSE_s_i(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_INT, (d) }
+#define ARGPARSE_s_s(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_STRING, (d) }
+#define ARGPARSE_s_l(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_LONG, (d) }
+#define ARGPARSE_s_u(s,l,d) \
+     { (s), (l), ARGPARSE_TYPE_ULONG, (d) }
+
+#define ARGPARSE_o(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t  | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE   | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT    | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG   | ARGPARSE_OPT_OPTIONAL), (d) }
+#define ARGPARSE_o_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG  | ARGPARSE_OPT_OPTIONAL), (d) }
+
+#define ARGPARSE_p(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t  | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE   | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT    | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG   | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_p_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG  | ARGPARSE_OPT_PREFIX), (d) }
+
+#define ARGPARSE_op(s,l,t,d) \
+     { (s), (l), (ARGPARSE_TYPE_ ## t \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_n(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_i(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_INT \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_s(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_STRING \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_l(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_LONG \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+#define ARGPARSE_op_u(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_ULONG \
+                  | ARGPARSE_OPT_OPTIONAL | ARGPARSE_OPT_PREFIX), (d) }
+
+#define ARGPARSE_c(s,l,d) \
+     { (s), (l), (ARGPARSE_TYPE_NONE | ARGPARSE_OPT_COMMAND), (d) }
+
+#define ARGPARSE_conffile(s,l,d) \
+  { (s), (l), (ARGPARSE_TYPE_STRING|ARGPARSE_OPT_CONFFILE), (d) }
+
+#define ARGPARSE_noconffile(s,l,d) \
+  { (s), (l), (ARGPARSE_TYPE_NONE|ARGPARSE_OPT_CONFFILE), (d) }
+
+/* This macro is for stub or obsolete options.  */
+#define ARGPARSE_ignore(s,l)                    \
+  { (s), (l), (ARGPARSE_OPT_IGNORE), "@" }
+
+/* This is a legacy version of ARGPARSE_verbatim which really does
+ * verbatim printing.  */
+#define ARGPARSE_group(s,d) \
+  { (s), NULL, 0, (d) }
+
+/* Verbatim print the string D in the help output.  It does not make
+ * use of the "@" hack as ARGPARSE_group does.  */
+#define ARGPARSE_verbatim(d) \
+  { 1, NULL, (ARGPARSE_OPT_VERBATIM), (d) }
+
+/* Same as ARGPARSE_verbatim but also print a colon and a LF.  N can
+ * be used give a symbolic name to the header.  Nothing is printed if
+ * D is the empty string.  */
+#define ARGPARSE_header(n,d) \
+  { 1, (n), (ARGPARSE_OPT_HEADER), (d) }
+
+/* Mark the end of the list (mandatory).  */
+#define ARGPARSE_end() \
+  { 0, NULL, 0, NULL }
+
+#endif /* GPGRT_ENABLE_ARGPARSE_MACROS */
+
+/* Values used for gpgrt_set_confdir.  */
+#define GPGRT_CONFDIR_USER 1   /* The user's configuration dir.    */
+#define GPGRT_CONFDIR_SYS  2   /* The systems's configuration dir. */
+
+/* Take care: gpgrt_argparse keeps state in ARG and requires that
+ * either ARGPARSE_FLAG_RESET is used after OPTS has been changed or
+ * gpgrt_argparse (NULL, ARG, NULL) is called first.  */
+int gpgrt_argparse (gpgrt_stream_t fp,
+                    gpgrt_argparse_t *arg, gpgrt_opt_t *opts);
+int gpgrt_argparser (gpgrt_argparse_t *arg, gpgrt_opt_t *opts,
+                     const char *confname);
+void gpgrt_usage (int level);
+const char *gpgrt_strusage (int level);
+void gpgrt_set_strusage (const char *(*f)(int));
+void gpgrt_set_usage_outfnc (int (*f)(int, const char *));
+void gpgrt_set_fixed_string_mapper (const char *(*f)(const char*));
+void gpgrt_set_confdir (int what, const char *name);
+
+
+/*
+ * Various helper functions
+ */
+
+/* Compare arbitrary version strings.  For the standard m.n.o version
+ * numbering scheme a LEVEL of 3 is suitable; see the manual.  */
+int gpgrt_cmp_version (const char *a, const char *b, int level);
+
+/* Construct a filename from the NULL terminated list of parts.  Tilde
+ * expansion is done for the first argument.  The caller must release
+ * the result using gpgrt_free; on error ERRNO is set and NULL
+ * returned.  The second function returns an absolute filename.  */
+char *gpgrt_fnameconcat (const char *first, ...) GPGRT_ATTR_SENTINEL(0);
+char *gpgrt_absfnameconcat (const char *first, ...) GPGRT_ATTR_SENTINEL(0);
+
+
+#ifdef __cplusplus
+}
+#endif
+#endif	/* GPGRT_H */
+#endif	/* GPG_ERROR_H */
+/*
+Local Variables:
+buffer-read-only: t
+End:
+*/
diff --git a/src/lock-obj-pub.native.h b/src/lock-obj-pub.native.h
new file mode 100644
index 0000000..0dd6431
--- /dev/null
+++ b/src/lock-obj-pub.native.h
@@ -0,0 +1,25 @@
+## lock-obj-pub.x86_64-pc-linux-gnu.h
+## File created by gen-posix-lock-obj - DO NOT EDIT
+## To be included by mkheader into gpg-error.h
+
+typedef struct
+{
+  long _vers;
+  union {
+    volatile char _priv[40];
+    long _x_align;
+    long *_xp_align;
+  } u;
+} gpgrt_lock_t;
+
+#define GPGRT_LOCK_INITIALIZER {1,{{0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0, \
+                                    0,0,0,0,0,0,0,0}}}
+##
+## Local Variables:
+## mode: c
+## buffer-read-only: t
+## End:
+##
diff --git a/src/mkerrcodes.h b/src/mkerrcodes.h
new file mode 100644
index 0000000..d469641
--- /dev/null
+++ b/src/mkerrcodes.h
@@ -0,0 +1,135 @@
+/* Output of mkerrcodes.awk.  DO NOT EDIT.  */
+
+static struct
+  {
+    int err;
+    const char *err_sym;
+  } err_table[] = 
+{
+  { 7, "GPG_ERR_E2BIG" },
+  { 13, "GPG_ERR_EACCES" },
+  { 98, "GPG_ERR_EADDRINUSE" },
+  { 99, "GPG_ERR_EADDRNOTAVAIL" },
+  { 68, "GPG_ERR_EADV" },
+  { 97, "GPG_ERR_EAFNOSUPPORT" },
+  { 11, "GPG_ERR_EAGAIN" },
+  { 114, "GPG_ERR_EALREADY" },
+  { 52, "GPG_ERR_EBADE" },
+  { 9, "GPG_ERR_EBADF" },
+  { 77, "GPG_ERR_EBADFD" },
+  { 74, "GPG_ERR_EBADMSG" },
+  { 53, "GPG_ERR_EBADR" },
+  { 56, "GPG_ERR_EBADRQC" },
+  { 57, "GPG_ERR_EBADSLT" },
+  { 59, "GPG_ERR_EBFONT" },
+  { 16, "GPG_ERR_EBUSY" },
+  { 125, "GPG_ERR_ECANCELED" },
+  { 10, "GPG_ERR_ECHILD" },
+  { 44, "GPG_ERR_ECHRNG" },
+  { 70, "GPG_ERR_ECOMM" },
+  { 103, "GPG_ERR_ECONNABORTED" },
+  { 111, "GPG_ERR_ECONNREFUSED" },
+  { 104, "GPG_ERR_ECONNRESET" },
+  { 35, "GPG_ERR_EDEADLK" },
+  { 35, "GPG_ERR_EDEADLOCK" },
+  { 89, "GPG_ERR_EDESTADDRREQ" },
+  { 33, "GPG_ERR_EDOM" },
+  { 73, "GPG_ERR_EDOTDOT" },
+  { 122, "GPG_ERR_EDQUOT" },
+  { 17, "GPG_ERR_EEXIST" },
+  { 14, "GPG_ERR_EFAULT" },
+  { 27, "GPG_ERR_EFBIG" },
+  { 112, "GPG_ERR_EHOSTDOWN" },
+  { 113, "GPG_ERR_EHOSTUNREACH" },
+  { 43, "GPG_ERR_EIDRM" },
+  { 84, "GPG_ERR_EILSEQ" },
+  { 115, "GPG_ERR_EINPROGRESS" },
+  { 4, "GPG_ERR_EINTR" },
+  { 22, "GPG_ERR_EINVAL" },
+  { 5, "GPG_ERR_EIO" },
+  { 106, "GPG_ERR_EISCONN" },
+  { 21, "GPG_ERR_EISDIR" },
+  { 120, "GPG_ERR_EISNAM" },
+  { 51, "GPG_ERR_EL2HLT" },
+  { 45, "GPG_ERR_EL2NSYNC" },
+  { 46, "GPG_ERR_EL3HLT" },
+  { 47, "GPG_ERR_EL3RST" },
+  { 79, "GPG_ERR_ELIBACC" },
+  { 80, "GPG_ERR_ELIBBAD" },
+  { 83, "GPG_ERR_ELIBEXEC" },
+  { 82, "GPG_ERR_ELIBMAX" },
+  { 81, "GPG_ERR_ELIBSCN" },
+  { 48, "GPG_ERR_ELNRNG" },
+  { 40, "GPG_ERR_ELOOP" },
+  { 124, "GPG_ERR_EMEDIUMTYPE" },
+  { 24, "GPG_ERR_EMFILE" },
+  { 31, "GPG_ERR_EMLINK" },
+  { 90, "GPG_ERR_EMSGSIZE" },
+  { 72, "GPG_ERR_EMULTIHOP" },
+  { 36, "GPG_ERR_ENAMETOOLONG" },
+  { 119, "GPG_ERR_ENAVAIL" },
+  { 100, "GPG_ERR_ENETDOWN" },
+  { 102, "GPG_ERR_ENETRESET" },
+  { 101, "GPG_ERR_ENETUNREACH" },
+  { 23, "GPG_ERR_ENFILE" },
+  { 55, "GPG_ERR_ENOANO" },
+  { 105, "GPG_ERR_ENOBUFS" },
+  { 50, "GPG_ERR_ENOCSI" },
+  { 61, "GPG_ERR_ENODATA" },
+  { 19, "GPG_ERR_ENODEV" },
+  { 2, "GPG_ERR_ENOENT" },
+  { 8, "GPG_ERR_ENOEXEC" },
+  { 37, "GPG_ERR_ENOLCK" },
+  { 67, "GPG_ERR_ENOLINK" },
+  { 123, "GPG_ERR_ENOMEDIUM" },
+  { 12, "GPG_ERR_ENOMEM" },
+  { 42, "GPG_ERR_ENOMSG" },
+  { 64, "GPG_ERR_ENONET" },
+  { 65, "GPG_ERR_ENOPKG" },
+  { 92, "GPG_ERR_ENOPROTOOPT" },
+  { 28, "GPG_ERR_ENOSPC" },
+  { 63, "GPG_ERR_ENOSR" },
+  { 60, "GPG_ERR_ENOSTR" },
+  { 38, "GPG_ERR_ENOSYS" },
+  { 15, "GPG_ERR_ENOTBLK" },
+  { 107, "GPG_ERR_ENOTCONN" },
+  { 20, "GPG_ERR_ENOTDIR" },
+  { 39, "GPG_ERR_ENOTEMPTY" },
+  { 118, "GPG_ERR_ENOTNAM" },
+  { 88, "GPG_ERR_ENOTSOCK" },
+  { 95, "GPG_ERR_ENOTSUP" },
+  { 25, "GPG_ERR_ENOTTY" },
+  { 76, "GPG_ERR_ENOTUNIQ" },
+  { 6, "GPG_ERR_ENXIO" },
+  { 95, "GPG_ERR_EOPNOTSUPP" },
+  { 75, "GPG_ERR_EOVERFLOW" },
+  { 1, "GPG_ERR_EPERM" },
+  { 96, "GPG_ERR_EPFNOSUPPORT" },
+  { 32, "GPG_ERR_EPIPE" },
+  { 71, "GPG_ERR_EPROTO" },
+  { 93, "GPG_ERR_EPROTONOSUPPORT" },
+  { 91, "GPG_ERR_EPROTOTYPE" },
+  { 34, "GPG_ERR_ERANGE" },
+  { 78, "GPG_ERR_EREMCHG" },
+  { 66, "GPG_ERR_EREMOTE" },
+  { 121, "GPG_ERR_EREMOTEIO" },
+  { 85, "GPG_ERR_ERESTART" },
+  { 30, "GPG_ERR_EROFS" },
+  { 108, "GPG_ERR_ESHUTDOWN" },
+  { 94, "GPG_ERR_ESOCKTNOSUPPORT" },
+  { 29, "GPG_ERR_ESPIPE" },
+  { 3, "GPG_ERR_ESRCH" },
+  { 69, "GPG_ERR_ESRMNT" },
+  { 116, "GPG_ERR_ESTALE" },
+  { 86, "GPG_ERR_ESTRPIPE" },
+  { 62, "GPG_ERR_ETIME" },
+  { 110, "GPG_ERR_ETIMEDOUT" },
+  { 109, "GPG_ERR_ETOOMANYREFS" },
+  { 26, "GPG_ERR_ETXTBSY" },
+  { 117, "GPG_ERR_EUCLEAN" },
+  { 49, "GPG_ERR_EUNATCH" },
+  { 87, "GPG_ERR_EUSERS" },
+  { 11, "GPG_ERR_EWOULDBLOCK" },
+  { 18, "GPG_ERR_EXDEV" },
+  { 54, "GPG_ERR_EXFULL" },
+};
diff --git a/src/mkw32errmap.map.c b/src/mkw32errmap.map.c
new file mode 100644
index 0000000..c65491e
--- /dev/null
+++ b/src/mkw32errmap.map.c
@@ -0,0 +1 @@
+/*dummy*/
