diff --git a/Zend/zend_ini_parser.c b/Zend/zend_ini_parser.c
new file mode 100644
index 0000000000..98cf2114da
--- /dev/null
+++ b/Zend/zend_ini_parser.c
@@ -0,0 +1,2323 @@
+/* A Bison parser, made by GNU Bison 3.5.1.  */
+
+/* Bison implementation for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "3.5.1"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 2
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* Substitute the type names.  */
+#define YYSTYPE         INI_STYPE
+/* Substitute the variable and function names.  */
+#define yyparse         ini_parse
+#define yylex           ini_lex
+#define yyerror         ini_error
+#define yydebug         ini_debug
+#define yynerrs         ini_nerrs
+
+/* First part of user prologue.  */
+#line 2 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) Zend Technologies Ltd. (http://www.zend.com)           |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Zeev Suraski <zeev@php.net>                                 |
+   |          Jani Taskinen <jani@php.net>                                |
+   +----------------------------------------------------------------------+
+*/
+
+#define DEBUG_CFG_PARSER 0
+
+#include "zend.h"
+#include "zend_API.h"
+#include "zend_ini.h"
+#include "zend_constants.h"
+#include "zend_ini_scanner.h"
+#include "zend_extensions.h"
+
+#ifdef ZEND_WIN32
+#include "win32/syslog.h"
+#endif
+
+int ini_parse(void);
+
+#define ZEND_INI_PARSER_CB	(CG(ini_parser_param))->ini_parser_cb
+#define ZEND_INI_PARSER_ARG	(CG(ini_parser_param))->arg
+
+#ifdef _MSC_VER
+#define YYMALLOC malloc
+#define YYFREE free
+#endif
+
+#define ZEND_SYSTEM_INI CG(ini_parser_unbuffered_errors)
+
+static int get_int_val(zval *op) {
+	switch (Z_TYPE_P(op)) {
+		case IS_LONG:
+			return Z_LVAL_P(op);
+		case IS_DOUBLE:
+			return (int)Z_DVAL_P(op);
+		case IS_STRING:
+		{
+			int val = atoi(Z_STRVAL_P(op));
+			zend_string_free(Z_STR_P(op));
+			return val;
+		}
+		EMPTY_SWITCH_DEFAULT_CASE()
+	}
+}
+
+/* {{{ zend_ini_do_op() */
+static void zend_ini_do_op(char type, zval *result, zval *op1, zval *op2)
+{
+	int i_result;
+	int i_op1, i_op2;
+	int str_len;
+	char str_result[MAX_LENGTH_OF_LONG+1];
+
+	i_op1 = get_int_val(op1);
+	i_op2 = op2 ? get_int_val(op2) : 0;
+
+	switch (type) {
+		case '|':
+			i_result = i_op1 | i_op2;
+			break;
+		case '&':
+			i_result = i_op1 & i_op2;
+			break;
+		case '^':
+			i_result = i_op1 ^ i_op2;
+			break;
+		case '~':
+			i_result = ~i_op1;
+			break;
+		case '!':
+			i_result = !i_op1;
+			break;
+		default:
+			i_result = 0;
+			break;
+	}
+
+	str_len = sprintf(str_result, "%d", i_result);
+	ZVAL_NEW_STR(result, zend_string_init(str_result, str_len, ZEND_SYSTEM_INI));
+}
+/* }}} */
+
+/* {{{ zend_ini_init_string() */
+static void zend_ini_init_string(zval *result)
+{
+	if (ZEND_SYSTEM_INI) {
+		ZVAL_EMPTY_PSTRING(result);
+	} else {
+		ZVAL_EMPTY_STRING(result);
+	}
+}
+/* }}} */
+
+/* {{{ zend_ini_add_string() */
+static void zend_ini_add_string(zval *result, zval *op1, zval *op2)
+{
+	int length, op1_len;
+
+	if (Z_TYPE_P(op1) != IS_STRING) {
+		/* ZEND_ASSERT(!Z_REFCOUNTED_P(op1)); */
+		if (ZEND_SYSTEM_INI) {
+			zend_string *tmp_str;
+			zend_string *str = zval_get_tmp_string(op1, &tmp_str);
+			ZVAL_PSTRINGL(op1, ZSTR_VAL(str), ZSTR_LEN(str));
+			zend_tmp_string_release(tmp_str);
+		} else {
+			ZVAL_STR(op1, zval_get_string_func(op1));
+		}
+	}
+	op1_len = (int)Z_STRLEN_P(op1);
+
+	if (Z_TYPE_P(op2) != IS_STRING) {
+		convert_to_string(op2);
+	}
+	length = op1_len + (int)Z_STRLEN_P(op2);
+
+	ZVAL_NEW_STR(result, zend_string_extend(Z_STR_P(op1), length, ZEND_SYSTEM_INI));
+	memcpy(Z_STRVAL_P(result) + op1_len, Z_STRVAL_P(op2), Z_STRLEN_P(op2) + 1);
+}
+/* }}} */
+
+/* {{{ zend_ini_get_constant() */
+static void zend_ini_get_constant(zval *result, zval *name)
+{
+	zval *c, tmp;
+
+	/* If name contains ':' it is not a constant. Bug #26893. */
+	if (!memchr(Z_STRVAL_P(name), ':', Z_STRLEN_P(name))
+		   	&& (c = zend_get_constant(Z_STR_P(name))) != 0) {
+		if (Z_TYPE_P(c) != IS_STRING) {
+			ZVAL_COPY_OR_DUP(&tmp, c);
+			if (Z_OPT_CONSTANT(tmp)) {
+				zval_update_constant_ex(&tmp, NULL);
+			}
+			convert_to_string(&tmp);
+			c = &tmp;
+		}
+		ZVAL_NEW_STR(result, zend_string_init(Z_STRVAL_P(c), Z_STRLEN_P(c), ZEND_SYSTEM_INI));
+		if (c == &tmp) {
+			zend_string_release(Z_STR(tmp));
+		}
+		zend_string_free(Z_STR_P(name));
+	} else {
+		*result = *name;
+	}
+}
+/* }}} */
+
+/* {{{ zend_ini_get_var() */
+static void zend_ini_get_var(zval *result, zval *name)
+{
+	zval *curval;
+	char *envvar;
+
+	/* Fetch configuration option value */
+	if ((curval = zend_get_configuration_directive(Z_STR_P(name))) != NULL) {
+		ZVAL_NEW_STR(result, zend_string_init(Z_STRVAL_P(curval), Z_STRLEN_P(curval), ZEND_SYSTEM_INI));
+	/* ..or if not found, try ENV */
+	} else if ((envvar = zend_getenv(Z_STRVAL_P(name), Z_STRLEN_P(name))) != NULL ||
+			   (envvar = getenv(Z_STRVAL_P(name))) != NULL) {
+		ZVAL_NEW_STR(result, zend_string_init(envvar, strlen(envvar), ZEND_SYSTEM_INI));
+	} else {
+		zend_ini_init_string(result);
+	}
+}
+/* }}} */
+
+/* {{{ ini_error() */
+static ZEND_COLD void ini_error(const char *msg)
+{
+	char *error_buf;
+	int error_buf_len;
+	char *currently_parsed_filename;
+
+	currently_parsed_filename = zend_ini_scanner_get_filename();
+	if (currently_parsed_filename) {
+		error_buf_len = 128 + (int)strlen(msg) + (int)strlen(currently_parsed_filename); /* should be more than enough */
+		error_buf = (char *) emalloc(error_buf_len);
+
+		sprintf(error_buf, "%s in %s on line %d\n", msg, currently_parsed_filename, zend_ini_scanner_get_lineno());
+	} else {
+		error_buf = estrdup("Invalid configuration directive\n");
+	}
+
+	if (CG(ini_parser_unbuffered_errors)) {
+#ifdef ZEND_WIN32
+		syslog(LOG_ALERT, "PHP: %s (%s)", error_buf, GetCommandLine());
+#endif
+		fprintf(stderr, "PHP:  %s", error_buf);
+	} else {
+		zend_error(E_WARNING, "%s", error_buf);
+	}
+	efree(error_buf);
+}
+/* }}} */
+
+/* {{{ zend_parse_ini_file() */
+ZEND_API zend_result zend_parse_ini_file(zend_file_handle *fh, bool unbuffered_errors, int scanner_mode, zend_ini_parser_cb_t ini_parser_cb, void *arg)
+{
+	int retval;
+	zend_ini_parser_param ini_parser_param;
+
+	ini_parser_param.ini_parser_cb = ini_parser_cb;
+	ini_parser_param.arg = arg;
+	CG(ini_parser_param) = &ini_parser_param;
+
+	if (zend_ini_open_file_for_scanning(fh, scanner_mode) == FAILURE) {
+		return FAILURE;
+	}
+
+	CG(ini_parser_unbuffered_errors) = unbuffered_errors;
+	retval = ini_parse();
+
+	shutdown_ini_scanner();
+
+	if (retval == 0) {
+		return SUCCESS;
+	} else {
+		return FAILURE;
+	}
+}
+/* }}} */
+
+/* {{{ zend_parse_ini_string() */
+ZEND_API zend_result zend_parse_ini_string(char *str, bool unbuffered_errors, int scanner_mode, zend_ini_parser_cb_t ini_parser_cb, void *arg)
+{
+	int retval;
+	zend_ini_parser_param ini_parser_param;
+
+	ini_parser_param.ini_parser_cb = ini_parser_cb;
+	ini_parser_param.arg = arg;
+	CG(ini_parser_param) = &ini_parser_param;
+
+	if (zend_ini_prepare_string_for_scanning(str, scanner_mode) == FAILURE) {
+		return FAILURE;
+	}
+
+	CG(ini_parser_unbuffered_errors) = unbuffered_errors;
+	retval = ini_parse();
+
+	shutdown_ini_scanner();
+
+	if (retval == 0) {
+		return SUCCESS;
+	} else {
+		return FAILURE;
+	}
+}
+/* }}} */
+
+/* {{{ zval_ini_dtor() */
+static void zval_ini_dtor(zval *zv)
+{
+	if (Z_TYPE_P(zv) == IS_STRING) {
+		zend_string_release(Z_STR_P(zv));
+	}
+}
+/* }}} */
+
+
+#line 353 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+
+# ifndef YY_CAST
+#  ifdef __cplusplus
+#   define YY_CAST(Type, Val) static_cast<Type> (Val)
+#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
+#  else
+#   define YY_CAST(Type, Val) ((Type) (Val))
+#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
+#  endif
+# endif
+# ifndef YY_NULLPTR
+#  if defined __cplusplus
+#   if 201103L <= __cplusplus
+#    define YY_NULLPTR nullptr
+#   else
+#    define YY_NULLPTR 0
+#   endif
+#  else
+#   define YY_NULLPTR ((void*)0)
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 1
+#endif
+
+/* Use api.header.include to #include this header
+   instead of duplicating it here.  */
+#ifndef YY_INI_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_INI_PARSER_H_INCLUDED
+# define YY_INI_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_INI_PARSER_H_INCLUDED
+/* Debug traces.  */
+#ifndef INI_DEBUG
+# if defined YYDEBUG
+#if YYDEBUG
+#   define INI_DEBUG 1
+#  else
+#   define INI_DEBUG 0
+#  endif
+# else /* ! defined YYDEBUG */
+#  define INI_DEBUG 0
+# endif /* ! defined YYDEBUG */
+#endif  /* ! defined INI_DEBUG */
+#if INI_DEBUG
+extern int ini_debug;
+#endif
+
+/* Token type.  */
+#ifndef INI_TOKENTYPE
+# define INI_TOKENTYPE
+  enum ini_tokentype
+  {
+    END = 0,
+    TC_SECTION = 258,
+    TC_RAW = 259,
+    TC_CONSTANT = 260,
+    TC_NUMBER = 261,
+    TC_STRING = 262,
+    TC_WHITESPACE = 263,
+    TC_LABEL = 264,
+    TC_OFFSET = 265,
+    TC_DOLLAR_CURLY = 266,
+    TC_VARNAME = 267,
+    TC_QUOTED_STRING = 268,
+    BOOL_TRUE = 269,
+    BOOL_FALSE = 270,
+    NULL_NULL = 271,
+    END_OF_LINE = 272
+  };
+#endif
+
+/* Value type.  */
+#if ! defined INI_STYPE && ! defined INI_STYPE_IS_DECLARED
+typedef zval INI_STYPE;
+# define INI_STYPE_IS_TRIVIAL 1
+# define INI_STYPE_IS_DECLARED 1
+#endif
+
+
+
+int ini_parse (void);
+
+#endif /* !YY_INI_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_INI_PARSER_H_INCLUDED  */
+
+
+
+#ifdef short
+# undef short
+#endif
+
+/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
+   <limits.h> and (if available) <stdint.h> are included
+   so that the code can choose integer types of a good width.  */
+
+#ifndef __PTRDIFF_MAX__
+# include <limits.h> /* INFRINGES ON USER NAME SPACE */
+# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
+#  define YY_STDINT_H
+# endif
+#endif
+
+/* Narrow types that promote to a signed type and that can represent a
+   signed or unsigned integer of at least N bits.  In tables they can
+   save space and decrease cache pressure.  Promoting to a signed type
+   helps avoid bugs in integer arithmetic.  */
+
+#ifdef __INT_LEAST8_MAX__
+typedef __INT_LEAST8_TYPE__ yytype_int8;
+#elif defined YY_STDINT_H
+typedef int_least8_t yytype_int8;
+#else
+typedef signed char yytype_int8;
+#endif
+
+#ifdef __INT_LEAST16_MAX__
+typedef __INT_LEAST16_TYPE__ yytype_int16;
+#elif defined YY_STDINT_H
+typedef int_least16_t yytype_int16;
+#else
+typedef short yytype_int16;
+#endif
+
+#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST8_TYPE__ yytype_uint8;
+#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST8_MAX <= INT_MAX)
+typedef uint_least8_t yytype_uint8;
+#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
+typedef unsigned char yytype_uint8;
+#else
+typedef short yytype_uint8;
+#endif
+
+#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST16_TYPE__ yytype_uint16;
+#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST16_MAX <= INT_MAX)
+typedef uint_least16_t yytype_uint16;
+#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
+typedef unsigned short yytype_uint16;
+#else
+typedef int yytype_uint16;
+#endif
+
+#ifndef YYPTRDIFF_T
+# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
+#  define YYPTRDIFF_T __PTRDIFF_TYPE__
+#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
+# elif defined PTRDIFF_MAX
+#  ifndef ptrdiff_t
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYPTRDIFF_T ptrdiff_t
+#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
+# else
+#  define YYPTRDIFF_T long
+#  define YYPTRDIFF_MAXIMUM LONG_MAX
+# endif
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM                                  \
+  YY_CAST (YYPTRDIFF_T,                                 \
+           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
+            ? YYPTRDIFF_MAXIMUM                         \
+            : YY_CAST (YYSIZE_T, -1)))
+
+#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
+
+/* Stored state numbers (used for stacks). */
+typedef yytype_int8 yy_state_t;
+
+/* State numbers in computations.  */
+typedef int yy_state_fast_t;
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_PURE
+# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
+# else
+#  define YY_ATTRIBUTE_PURE
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_UNUSED
+# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
+# else
+#  define YY_ATTRIBUTE_UNUSED
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
+
+#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
+    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
+    _Pragma ("GCC diagnostic pop")
+#else
+# define YY_INITIAL_VALUE(Value) Value
+#endif
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
+#endif
+
+#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
+# define YY_IGNORE_USELESS_CAST_BEGIN                          \
+    _Pragma ("GCC diagnostic push")                            \
+    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
+# define YY_IGNORE_USELESS_CAST_END            \
+    _Pragma ("GCC diagnostic pop")
+#endif
+#ifndef YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_END
+#endif
+
+
+#define YY_ASSERT(E) ((void) (0 && (E)))
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's 'empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+             && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+         || (defined INI_STYPE_IS_TRIVIAL && INI_STYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yy_state_t yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
+    do                                                                  \
+      {                                                                 \
+        YYPTRDIFF_T yynewbytes;                                         \
+        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
+        Stack = &yyptr->Stack_alloc;                                    \
+        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
+      }                                                                 \
+    while (0)
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYPTRDIFF_T yyi;                      \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (0)
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  2
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   123
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  44
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  13
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  50
+/* YYNSTATES -- Number of states.  */
+#define YYNSTATES  72
+
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   272
+
+
+/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, with out-of-bounds checking.  */
+#define YYTRANSLATE(YYX)                                                \
+  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex.  */
+static const yytype_int8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    40,    22,     2,    30,    29,    39,    23,
+      42,    43,    28,    25,    20,    26,    21,    27,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    19,     2,
+      32,    18,    33,    34,    35,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    41,    24,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    36,    38,    37,    31,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17
+};
+
+#if INI_DEBUG
+  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+static const yytype_int16 yyrline[] =
+{
+       0,   310,   310,   311,   315,   322,   330,   339,   340,   344,
+     345,   349,   350,   351,   352,   353,   357,   358,   362,   363,
+     364,   368,   369,   370,   371,   372,   373,   377,   378,   379,
+     380,   381,   382,   386,   387,   388,   389,   390,   391,   392,
+     396,   400,   401,   402,   403,   404,   408,   409,   410,   411,
+     412
+};
+#endif
+
+#if INI_DEBUG || YYERROR_VERBOSE || 1
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "\"end of file\"", "error", "$undefined", "TC_SECTION", "TC_RAW",
+  "TC_CONSTANT", "TC_NUMBER", "TC_STRING", "TC_WHITESPACE", "TC_LABEL",
+  "TC_OFFSET", "TC_DOLLAR_CURLY", "TC_VARNAME", "TC_QUOTED_STRING",
+  "BOOL_TRUE", "BOOL_FALSE", "NULL_NULL", "END_OF_LINE", "'='", "':'",
+  "','", "'.'", "'\"'", "'\\''", "'^'", "'+'", "'-'", "'/'", "'*'", "'%'",
+  "'$'", "'~'", "'<'", "'>'", "'?'", "'@'", "'{'", "'}'", "'|'", "'&'",
+  "'!'", "']'", "'('", "')'", "$accept", "statement_list", "statement",
+  "section_string_or_value", "string_or_value", "option_offset",
+  "encapsed_list", "var_string_list_section", "var_string_list", "expr",
+  "cfg_var_ref", "constant_literal", "constant_string", YY_NULLPTR
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[NUM] -- (External) token number corresponding to the
+   (internal) symbol number NUM (which must be that of a token).  */
+static const yytype_int16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,    61,    58,
+      44,    46,    34,    39,    94,    43,    45,    47,    42,    37,
+      36,   126,    60,    62,    63,    64,   123,   125,   124,    38,
+      33,    93,    40,    41
+};
+# endif
+
+#define YYPACT_NINF (-25)
+
+#define yypact_value_is_default(Yyn) \
+  ((Yyn) == YYPACT_NINF)
+
+#define YYTABLE_NINF (-1)
+
+#define yytable_value_is_error(Yyn) \
+  0
+
+  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+     STATE-NUM.  */
+static const yytype_int8 yypact[] =
+{
+     -25,     9,   -25,    73,   -17,    81,   -25,   -25,   -25,   -25,
+     -25,   -25,   -25,    15,   -25,   -20,    93,   -25,   -25,     0,
+     -25,   -25,   -25,   -25,   -25,   -25,   -12,   101,   -25,   -25,
+      -7,    36,   -25,   -25,   -25,   -25,   -25,   -25,   -25,   -25,
+      28,    28,    28,   -25,   101,    -1,    40,    30,   -25,   -25,
+     -25,   -25,   -25,   -25,   -25,    80,   -25,   -25,    33,    28,
+      28,    28,   -25,     0,   100,   -25,   -25,   -25,   -25,   -25,
+     -25,   -25
+};
+
+  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+     Performed when YYTABLE does not specify something else to do.  Zero
+     means the default is an error.  */
+static const yytype_int8 yydefact[] =
+{
+       3,     0,     1,    10,     7,    17,     8,     2,    42,    41,
+      43,    44,    45,     0,    20,     0,     9,    21,    22,     0,
+      47,    46,    48,    49,    50,    20,     0,    16,    27,    28,
+       0,     0,     4,    20,    24,    25,    12,    13,    14,    15,
+       0,     0,     0,     5,    33,    11,     0,     0,    20,    30,
+      31,    40,    19,    23,    18,     0,    37,    38,     0,     0,
+       0,     0,    29,     0,     0,    26,    39,    36,    34,    35,
+       6,    32
+};
+
+  /* YYPGOTO[NTERM-NUM].  */
+static const yytype_int8 yypgoto[] =
+{
+     -25,   -25,   -25,   -25,    -9,   -25,   -23,   -25,    50,     4,
+      -3,    44,   -24
+};
+
+  /* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int8 yydefgoto[] =
+{
+      -1,     1,     7,    15,    43,    26,    31,    16,    44,    45,
+      28,    18,    29
+};
+
+  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+     positive, shift that token.  If negative, reduce the rule whose
+     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+static const yytype_int8 yytable[] =
+{
+      17,    19,    46,    50,    20,    21,    22,    23,    24,     2,
+      55,    13,     3,    34,    36,    37,    38,    39,     4,     5,
+      50,    32,    25,    59,    49,    64,     6,    30,    54,    47,
+      51,    40,    20,    21,    22,    23,    24,    60,    61,    13,
+      41,    49,    42,    54,    56,    57,    58,    13,    63,    52,
+      25,    13,    54,    52,    70,    27,     0,    59,    53,    40,
+      35,    54,    62,    67,    68,    69,     0,     0,    41,     0,
+      42,    60,    61,     0,     0,     0,    66,     8,     9,    10,
+      11,    12,     0,     0,    13,    20,    21,    22,    23,    24,
+       0,    13,    13,    52,     0,    14,     0,     8,     9,    10,
+      11,    12,    65,    25,    13,    20,    21,    22,    23,    24,
+       0,    13,    13,    52,     0,    33,     0,     0,     0,     0,
+       0,     0,    71,    48
+};
+
+static const yytype_int8 yycheck[] =
+{
+       3,    18,    25,    27,     4,     5,     6,     7,     8,     0,
+      33,    11,     3,    16,    14,    15,    16,    17,     9,    10,
+      44,    41,    22,    24,    27,    48,    17,    12,    31,    41,
+      37,    31,     4,     5,     6,     7,     8,    38,    39,    11,
+      40,    44,    42,    46,    40,    41,    42,    11,    18,    13,
+      22,    11,    55,    13,    63,     5,    -1,    24,    22,    31,
+      16,    64,    22,    59,    60,    61,    -1,    -1,    40,    -1,
+      42,    38,    39,    -1,    -1,    -1,    43,     4,     5,     6,
+       7,     8,    -1,    -1,    11,     4,     5,     6,     7,     8,
+      -1,    11,    11,    13,    -1,    22,    -1,     4,     5,     6,
+       7,     8,    22,    22,    11,     4,     5,     6,     7,     8,
+      -1,    11,    11,    13,    -1,    22,    -1,    -1,    -1,    -1,
+      -1,    -1,    22,    22
+};
+
+  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+     symbol of state STATE-NUM.  */
+static const yytype_int8 yystos[] =
+{
+       0,    45,     0,     3,     9,    10,    17,    46,     4,     5,
+       6,     7,     8,    11,    22,    47,    51,    54,    55,    18,
+       4,     5,     6,     7,     8,    22,    49,    52,    54,    56,
+      12,    50,    41,    22,    54,    55,    14,    15,    16,    17,
+      31,    40,    42,    48,    52,    53,    50,    41,    22,    54,
+      56,    37,    13,    22,    54,    50,    53,    53,    53,    24,
+      38,    39,    22,    18,    50,    22,    43,    53,    53,    53,
+      48,    22
+};
+
+  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_int8 yyr1[] =
+{
+       0,    44,    45,    45,    46,    46,    46,    46,    46,    47,
+      47,    48,    48,    48,    48,    48,    49,    49,    50,    50,
+      50,    51,    51,    51,    51,    51,    51,    52,    52,    52,
+      52,    52,    52,    53,    53,    53,    53,    53,    53,    53,
+      54,    55,    55,    55,    55,    55,    56,    56,    56,    56,
+      56
+};
+
+  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+static const yytype_int8 yyr2[] =
+{
+       0,     2,     2,     0,     3,     3,     5,     1,     1,     1,
+       0,     1,     1,     1,     1,     1,     1,     0,     2,     2,
+       0,     1,     1,     3,     2,     2,     4,     1,     1,     3,
+       2,     2,     4,     1,     3,     3,     3,     2,     2,     3,
+       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1
+};
+
+
+#define yyerrok         (yyerrstatus = 0)
+#define yyclearin       (yychar = YYEMPTY)
+#define YYEMPTY         (-2)
+#define YYEOF           0
+
+#define YYACCEPT        goto yyacceptlab
+#define YYABORT         goto yyabortlab
+#define YYERROR         goto yyerrorlab
+
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)                                    \
+  do                                                              \
+    if (yychar == YYEMPTY)                                        \
+      {                                                           \
+        yychar = (Token);                                         \
+        yylval = (Value);                                         \
+        YYPOPSTACK (yylen);                                       \
+        yystate = *yyssp;                                         \
+        goto yybackup;                                            \
+      }                                                           \
+    else                                                          \
+      {                                                           \
+        yyerror (YY_("syntax error: cannot back up")); \
+        YYERROR;                                                  \
+      }                                                           \
+  while (0)
+
+/* Error token number */
+#define YYTERROR        1
+#define YYERRCODE       256
+
+
+
+/* Enable debugging if requested.  */
+#if INI_DEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)                        \
+do {                                            \
+  if (yydebug)                                  \
+    YYFPRINTF Args;                             \
+} while (0)
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
+do {                                                                      \
+  if (yydebug)                                                            \
+    {                                                                     \
+      YYFPRINTF (stderr, "%s ", Title);                                   \
+      yy_symbol_print (stderr,                                            \
+                  Type, Value); \
+      YYFPRINTF (stderr, "\n");                                           \
+    }                                                                     \
+} while (0)
+
+
+/*-----------------------------------.
+| Print this symbol's value on YYO.  |
+`-----------------------------------*/
+
+static void
+yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  FILE *yyoutput = yyo;
+  YYUSE (yyoutput);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
+# endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+/*---------------------------.
+| Print this symbol on YYO.  |
+`---------------------------*/
+
+static void
+yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  YYFPRINTF (yyo, "%s %s (",
+             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
+
+  yy_symbol_value_print (yyo, yytype, yyvaluep);
+  YYFPRINTF (yyo, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+static void
+yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)                            \
+do {                                                            \
+  if (yydebug)                                                  \
+    yy_stack_print ((Bottom), (Top));                           \
+} while (0)
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+static void
+yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)
+{
+  int yylno = yyrline[yyrule];
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
+             yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr,
+                       yystos[+yyssp[yyi + 1 - yynrhs]],
+                       &yyvsp[(yyi + 1) - (yynrhs)]
+                                              );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)          \
+do {                                    \
+  if (yydebug)                          \
+    yy_reduce_print (yyssp, yyvsp, Rule); \
+} while (0)
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !INI_DEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !INI_DEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
+#  else
+/* Return the length of YYSTR.  */
+static YYPTRDIFF_T
+yystrlen (const char *yystr)
+{
+  YYPTRDIFF_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYPTRDIFF_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYPTRDIFF_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+        switch (*++yyp)
+          {
+          case '\'':
+          case ',':
+            goto do_not_strip_quotes;
+
+          case '\\':
+            if (*++yyp != '\\')
+              goto do_not_strip_quotes;
+            else
+              goto append;
+
+          append:
+          default:
+            if (yyres)
+              yyres[yyn] = *yyp;
+            yyn++;
+            break;
+
+          case '"':
+            if (yyres)
+              yyres[yyn] = '\0';
+            return yyn;
+          }
+    do_not_strip_quotes: ;
+    }
+
+  if (yyres)
+    return yystpcpy (yyres, yystr) - yyres;
+  else
+    return yystrlen (yystr);
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
+                yy_state_t *yyssp, int yytoken)
+{
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULLPTR;
+  /* Arguments of yyformat: reported tokens (one for the "unexpected",
+     one per "expected"). */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Actual size of YYARG. */
+  int yycount = 0;
+  /* Cumulated lengths of YYARG.  */
+  YYPTRDIFF_T yysize = 0;
+
+  /* There are many possibilities here to consider:
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[+*yyssp];
+      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+      yysize = yysize0;
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYPTRDIFF_T yysize1
+                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+                    yysize = yysize1;
+                  else
+                    return 2;
+                }
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+    default: /* Avoid compiler warnings. */
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    /* Don't count the "%s"s in the final size, but reserve room for
+       the terminator.  */
+    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
+    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+      yysize = yysize1;
+    else
+      return 2;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          ++yyp;
+          ++yyformat;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+{
+  YYUSE (yyvaluep);
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  switch (yytype)
+    {
+    case 4: /* TC_RAW  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1404 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 5: /* TC_CONSTANT  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1410 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 6: /* TC_NUMBER  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1416 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 7: /* TC_STRING  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1422 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 8: /* TC_WHITESPACE  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1428 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 9: /* TC_LABEL  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1434 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 10: /* TC_OFFSET  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1440 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 12: /* TC_VARNAME  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1446 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 14: /* BOOL_TRUE  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1452 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 15: /* BOOL_FALSE  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1458 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 16: /* NULL_NULL  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1464 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 47: /* section_string_or_value  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1470 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 48: /* string_or_value  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1476 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 49: /* option_offset  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1482 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 50: /* encapsed_list  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1488 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 51: /* var_string_list_section  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1494 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 52: /* var_string_list  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1500 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 53: /* expr  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1506 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 54: /* cfg_var_ref  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1512 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 55: /* constant_literal  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1518 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+    case 56: /* constant_string  */
+#line 305 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+            { zval_ini_dtor(&(*yyvaluep)); }
+#line 1524 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+        break;
+
+      default:
+        break;
+    }
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+int
+yyparse (void)
+{
+/* The lookahead symbol.  */
+int yychar;
+
+
+/* The semantic value of the lookahead symbol.  */
+/* Default value used for initialization, for pacifying older GCCs
+   or non-GCC compilers.  */
+YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
+YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
+
+    /* Number of syntax errors so far.  */
+    int yynerrs;
+
+    yy_state_fast_t yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       'yyss': related to states.
+       'yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yy_state_t yyssa[YYINITDEPTH];
+    yy_state_t *yyss;
+    yy_state_t *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYPTRDIFF_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
+
+
+/*------------------------------------------------------------.
+| yynewstate -- push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+
+/*--------------------------------------------------------------------.
+| yysetstate -- set current state (the top of the stack) to yystate.  |
+`--------------------------------------------------------------------*/
+yysetstate:
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
+  YY_IGNORE_USELESS_CAST_BEGIN
+  *yyssp = YY_CAST (yy_state_t, yystate);
+  YY_IGNORE_USELESS_CAST_END
+
+  if (yyss + yystacksize - 1 <= yyssp)
+#if !defined yyoverflow && !defined YYSTACK_RELOCATE
+    goto yyexhaustedlab;
+#else
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYPTRDIFF_T yysize = yyssp - yyss + 1;
+
+# if defined yyoverflow
+      {
+        /* Give user a chance to reallocate the stack.  Use copies of
+           these so that the &'s don't force the real ones into
+           memory.  */
+        yy_state_t *yyss1 = yyss;
+        YYSTYPE *yyvs1 = yyvs;
+
+        /* Each stack pointer address is followed by the size of the
+           data in use in that stack, in bytes.  This used to be a
+           conditional around just the two extra args, but that might
+           be undefined if yyoverflow is a macro.  */
+        yyoverflow (YY_("memory exhausted"),
+                    &yyss1, yysize * YYSIZEOF (*yyssp),
+                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
+                    &yystacksize);
+        yyss = yyss1;
+        yyvs = yyvs1;
+      }
+# else /* defined YYSTACK_RELOCATE */
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+        goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+        yystacksize = YYMAXDEPTH;
+
+      {
+        yy_state_t *yyss1 = yyss;
+        union yyalloc *yyptr =
+          YY_CAST (union yyalloc *,
+                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
+        if (! yyptr)
+          goto yyexhaustedlab;
+        YYSTACK_RELOCATE (yyss_alloc, yyss);
+        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+# undef YYSTACK_RELOCATE
+        if (yyss1 != yyssa)
+          YYSTACK_FREE (yyss1);
+      }
+# endif
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YY_IGNORE_USELESS_CAST_BEGIN
+      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
+                  YY_CAST (long, yystacksize)));
+      YY_IGNORE_USELESS_CAST_END
+
+      if (yyss + yystacksize - 1 <= yyssp)
+        YYABORT;
+    }
+#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = yylex (&yylval);
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     '$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+  case 4:
+#line 315 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                       {
+#if DEBUG_CFG_PARSER
+			printf("SECTION: [%s]\n", Z_STRVAL(yyvsp[-1]));
+#endif
+			ZEND_INI_PARSER_CB(&yyvsp[-1], NULL, NULL, ZEND_INI_PARSER_SECTION, ZEND_INI_PARSER_ARG);
+			zend_string_release(Z_STR(yyvsp[-1]));
+		}
+#line 1804 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 5:
+#line 322 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                             {
+#if DEBUG_CFG_PARSER
+			printf("NORMAL: '%s' = '%s'\n", Z_STRVAL(yyvsp[-2]), Z_STRVAL(yyvsp[0]));
+#endif
+			ZEND_INI_PARSER_CB(&yyvsp[-2], &yyvsp[0], NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG);
+			zend_string_release(Z_STR(yyvsp[-2]));
+			zval_ini_dtor(&yyvsp[0]);
+		}
+#line 1817 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 6:
+#line 330 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                {
+#if DEBUG_CFG_PARSER
+			printf("OFFSET: '%s'[%s] = '%s'\n", Z_STRVAL(yyvsp[-4]), Z_STRVAL(yyvsp[-3]), Z_STRVAL(yyvsp[0]));
+#endif
+			ZEND_INI_PARSER_CB(&yyvsp[-4], &yyvsp[0], &yyvsp[-3], ZEND_INI_PARSER_POP_ENTRY, ZEND_INI_PARSER_ARG);
+			zend_string_release(Z_STR(yyvsp[-4]));
+			zval_ini_dtor(&yyvsp[-3]);
+			zval_ini_dtor(&yyvsp[0]);
+		}
+#line 1831 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 7:
+#line 339 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                { ZEND_INI_PARSER_CB(&yyvsp[0], NULL, NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG); zend_string_release(Z_STR(yyvsp[0])); }
+#line 1837 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 9:
+#line 344 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                        { yyval = yyvsp[0]; }
+#line 1843 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 10:
+#line 345 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_init_string(&yyval); }
+#line 1849 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 11:
+#line 349 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1855 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 12:
+#line 350 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1861 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 13:
+#line 351 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1867 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 14:
+#line 352 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1873 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 15:
+#line 353 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { zend_ini_init_string(&yyval); }
+#line 1879 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 16:
+#line 357 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; }
+#line 1885 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 17:
+#line 358 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_init_string(&yyval); }
+#line 1891 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 18:
+#line 362 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                        { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1897 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 19:
+#line 363 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1903 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 20:
+#line 364 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_init_string(&yyval); }
+#line 1909 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 21:
+#line 368 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1915 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 22:
+#line 369 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; }
+#line 1921 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 23:
+#line 370 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                        { yyval = yyvsp[-1]; }
+#line 1927 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 24:
+#line 371 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                        { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1933 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 25:
+#line 372 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1939 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 26:
+#line 373 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                               { zend_ini_add_string(&yyval, &yyvsp[-3], &yyvsp[-1]); zend_string_free(Z_STR(yyvsp[-1])); }
+#line 1945 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 27:
+#line 377 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 1951 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 28:
+#line 378 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; }
+#line 1957 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 29:
+#line 379 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                        { yyval = yyvsp[-1]; }
+#line 1963 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 30:
+#line 380 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1969 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 31:
+#line 381 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                { zend_ini_add_string(&yyval, &yyvsp[-1], &yyvsp[0]); zend_string_free(Z_STR(yyvsp[0])); }
+#line 1975 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 32:
+#line 382 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                       { zend_ini_add_string(&yyval, &yyvsp[-3], &yyvsp[-1]); zend_string_free(Z_STR(yyvsp[-1])); }
+#line 1981 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 33:
+#line 386 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; }
+#line 1987 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 34:
+#line 387 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_do_op('|', &yyval, &yyvsp[-2], &yyvsp[0]); }
+#line 1993 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 35:
+#line 388 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_do_op('&', &yyval, &yyvsp[-2], &yyvsp[0]); }
+#line 1999 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 36:
+#line 389 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { zend_ini_do_op('^', &yyval, &yyvsp[-2], &yyvsp[0]); }
+#line 2005 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 37:
+#line 390 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { zend_ini_do_op('~', &yyval, &yyvsp[0], NULL); }
+#line 2011 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 38:
+#line 391 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { zend_ini_do_op('!', &yyval, &yyvsp[0], NULL); }
+#line 2017 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 39:
+#line 392 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[-1]; }
+#line 2023 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 40:
+#line 396 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                { zend_ini_get_var(&yyval, &yyvsp[-1]); zend_string_free(Z_STR(yyvsp[-1])); }
+#line 2029 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 41:
+#line 400 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; }
+#line 2035 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 42:
+#line 401 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_RAW: '%s'\n", Z_STRVAL($1));*/ }
+#line 2041 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 43:
+#line 402 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_NUMBER: '%s'\n", Z_STRVAL($1));*/ }
+#line 2047 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 44:
+#line 403 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_STRING: '%s'\n", Z_STRVAL($1));*/ }
+#line 2053 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 45:
+#line 404 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; /*printf("TC_WHITESPACE: '%s'\n", Z_STRVAL($1));*/ }
+#line 2059 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 46:
+#line 408 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { zend_ini_get_constant(&yyval, &yyvsp[0]); }
+#line 2065 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 47:
+#line 409 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_RAW: '%s'\n", Z_STRVAL($1));*/ }
+#line 2071 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 48:
+#line 410 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_NUMBER: '%s'\n", Z_STRVAL($1));*/ }
+#line 2077 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 49:
+#line 411 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                        { yyval = yyvsp[0]; /*printf("TC_STRING: '%s'\n", Z_STRVAL($1));*/ }
+#line 2083 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+  case 50:
+#line 412 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.y"
+                                                                { yyval = yyvsp[0]; /*printf("TC_WHITESPACE: '%s'\n", Z_STRVAL($1));*/ }
+#line 2089 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+    break;
+
+
+#line 2093 "/home/luxe/Desktop/php-src/Zend/zend_ini_parser.c"
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now 'shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+  {
+    const int yylhs = yyr1[yyn] - YYNTOKENS;
+    const int yyi = yypgoto[yylhs] + *yyssp;
+    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
+               ? yytable[yyi]
+               : yydefgoto[yylhs]);
+  }
+
+  goto yynewstate;
+
+
+/*--------------------------------------.
+| yyerrlab -- here on detecting error.  |
+`--------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+         error, discard it.  */
+
+      if (yychar <= YYEOF)
+        {
+          /* Return failure if at end of input.  */
+          if (yychar == YYEOF)
+            YYABORT;
+        }
+      else
+        {
+          yydestruct ("Error: discarding",
+                      yytoken, &yylval);
+          yychar = YYEMPTY;
+        }
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+  /* Pacify compilers when the user code never invokes YYERROR and the
+     label yyerrorlab therefore never appears in user code.  */
+  if (0)
+    YYERROR;
+
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+        {
+          yyn += YYTERROR;
+          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+            {
+              yyn = yytable[yyn];
+              if (0 < yyn)
+                break;
+            }
+        }
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+        YYABORT;
+
+
+      yydestruct ("Error: popping",
+                  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+
+/*-----------------------------------------------------.
+| yyreturn -- parsing is finished, return the result.  |
+`-----------------------------------------------------*/
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+                  yystos[+*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  return yyresult;
+}
diff --git a/Zend/zend_ini_scanner.c b/Zend/zend_ini_scanner.c
new file mode 100644
index 0000000000..9350c5385d
--- /dev/null
+++ b/Zend/zend_ini_scanner.c
@@ -0,0 +1,3881 @@
+/* Generated by re2c 1.3 */
+#line 1 "Zend/zend_ini_scanner.l"
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) Zend Technologies Ltd. (http://www.zend.com)           |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Zeev Suraski <zeev@php.net>                                 |
+   |          Jani Taskinen <jani@php.net>                                |
+   |          Marcus Boerger <helly@php.net>                              |
+   |          Nuno Lopes <nlopess@php.net>                                |
+   |          Scott MacVicar <scottmac@php.net>                           |
+   +----------------------------------------------------------------------+
+*/
+
+#include <errno.h>
+#include "zend.h"
+#include "zend_API.h"
+#include "zend_globals.h"
+#include <zend_ini_parser.h>
+#include "zend_ini_scanner.h"
+
+#ifdef YYDEBUG
+#undef YYDEBUG
+#endif
+
+#if 0
+# define YYDEBUG(s, c) printf("state: %d char: %c\n", s, c)
+#else
+# define YYDEBUG(s, c)
+#endif
+
+#include "zend_ini_scanner_defs.h"
+
+#define YYCTYPE   unsigned char
+/* allow the scanner to read one null byte after the end of the string (from ZEND_MMAP_AHEAD)
+ * so that if will be able to terminate to match the current token (e.g. non-enclosed string) */
+#define YYFILL(n) { if (YYCURSOR > YYLIMIT) return 0; }
+#define YYCURSOR  SCNG(yy_cursor)
+#define YYLIMIT   SCNG(yy_limit)
+#define YYMARKER  SCNG(yy_marker)
+
+#define YYGETCONDITION()  SCNG(yy_state)
+#define YYSETCONDITION(s) SCNG(yy_state) = s
+
+#define STATE(name)  yyc##name
+
+/* emulate flex constructs */
+#define BEGIN(state) YYSETCONDITION(STATE(state))
+#define YYSTATE      YYGETCONDITION()
+#define yytext       ((char*)SCNG(yy_text))
+#define yyleng       SCNG(yy_leng)
+#define yyless(x)    do {	YYCURSOR = (unsigned char*)yytext + x; \
+							yyleng   = (unsigned int)x; } while(0)
+
+/* #define yymore()     goto yymore_restart */
+
+/* perform sanity check. If this message is triggered you should
+   increase the ZEND_MMAP_AHEAD value in the zend_streams.h file */
+#define YYMAXFILL 6
+
+#if ZEND_MMAP_AHEAD < (YYMAXFILL + 1)
+# error ZEND_MMAP_AHEAD should be greater than YYMAXFILL
+#endif
+
+
+/* How it works (for the core ini directives):
+ * ===========================================
+ *
+ * 1. Scanner scans file for tokens and passes them to parser.
+ * 2. Parser parses the tokens and passes the name/value pairs to the callback
+ *    function which stores them in the configuration hash table.
+ * 3. Later REGISTER_INI_ENTRIES() is called which triggers the actual
+ *    registering of ini entries and uses zend_get_configuration_directive()
+ *    to fetch the previously stored name/value pair from configuration hash table
+ *    and registers the static ini entries which match the name to the value
+ *    into EG(ini_directives) hash table.
+ * 4. PATH section entries are used per-request from down to top, each overriding
+ *    previous if one exists. zend_alter_ini_entry() is called for each entry.
+ *    Settings in PATH section are ZEND_INI_SYSTEM accessible and thus mimics the
+ *    php_admin_* directives used within Apache httpd.conf when PHP is compiled as
+ *    module for Apache.
+ * 5. User defined ini files (like .htaccess for apache) are parsed for each request and
+ *    stored in separate hash defined by SAPI.
+ */
+
+/* TODO: (ordered by importance :-)
+ * ===============================================================================
+ *
+ *  - Separate constant lookup totally from plain strings (using CONSTANT pattern)
+ *  - Add #if .. #else .. #endif and ==, !=, <, > , <=, >= operators
+ *  - Add #include "some.ini"
+ *  - Allow variables to refer to options also when using parse_ini_file()
+ *
+ */
+
+/* Globals Macros */
+#define SCNG	INI_SCNG
+#ifdef ZTS
+ZEND_API ts_rsrc_id ini_scanner_globals_id;
+ZEND_API size_t ini_scanner_globals_offset;
+#else
+ZEND_API zend_ini_scanner_globals ini_scanner_globals;
+#endif
+
+#define ZEND_SYSTEM_INI CG(ini_parser_unbuffered_errors)
+
+/* Eat leading whitespace */
+#define EAT_LEADING_WHITESPACE()                     \
+	while (yyleng) {                                 \
+		if (yytext[0] == ' ' || yytext[0] == '\t') { \
+			SCNG(yy_text)++;                         \
+			yyleng--;                                \
+		} else {                                     \
+			break;                                   \
+		}                                            \
+	}
+
+/* Eat trailing whitespace + extra char */
+#define EAT_TRAILING_WHITESPACE_EX(ch)              \
+	while (yyleng && (                              \
+		(ch != 'X' && yytext[yyleng - 1] ==  ch) || \
+		yytext[yyleng - 1] == '\n' ||               \
+		yytext[yyleng - 1] == '\r' ||               \
+		yytext[yyleng - 1] == '\t' ||               \
+		yytext[yyleng - 1] == ' ')                  \
+	) {                                             \
+		yyleng--;                                   \
+	}
+
+/* Eat trailing whitespace */
+#define EAT_TRAILING_WHITESPACE()	EAT_TRAILING_WHITESPACE_EX('X')
+
+#define zend_ini_copy_value(retval, str, len)	\
+	ZVAL_NEW_STR(retval, zend_string_init(str, len, ZEND_SYSTEM_INI))
+
+
+#define RETURN_TOKEN(type, str, len) {                             \
+	if (SCNG(scanner_mode) == ZEND_INI_SCANNER_TYPED &&            \
+		(YYSTATE == STATE(ST_VALUE) || YYSTATE == STATE(ST_RAW))) {\
+		zend_ini_copy_typed_value(ini_lval, type, str, len);       \
+	} else {                                                       \
+		zend_ini_copy_value(ini_lval, str, len);                   \
+	}                                                              \
+	return type;                                                   \
+}
+
+static inline zend_result convert_to_number(zval *retval, const char *str, const int str_len)
+{
+	zend_uchar type;
+	int overflow;
+	zend_long lval;
+	double dval;
+
+	if ((type = is_numeric_string_ex(str, str_len, &lval, &dval, 0, &overflow, NULL)) != 0) {
+		if (type == IS_LONG) {
+			ZVAL_LONG(retval, lval);
+			return SUCCESS;
+		} else if (type == IS_DOUBLE && !overflow) {
+			ZVAL_DOUBLE(retval, dval);
+			return SUCCESS;
+		}
+	}
+
+	return FAILURE;
+}
+
+static void zend_ini_copy_typed_value(zval *retval, const int type, const char *str, int len)
+{
+	switch (type) {
+		case BOOL_FALSE:
+		case BOOL_TRUE:
+			ZVAL_BOOL(retval, type == BOOL_TRUE);
+			break;
+
+		case NULL_NULL:
+			ZVAL_NULL(retval);
+			break;
+
+		case TC_NUMBER:
+			if (convert_to_number(retval, str, len) == SUCCESS) {
+				break;
+			}
+			ZEND_FALLTHROUGH;
+		default:
+			zend_ini_copy_value(retval, str, len);
+	}
+}
+
+static void _yy_push_state(int new_state)
+{
+	zend_stack_push(&SCNG(state_stack), (void *) &YYGETCONDITION());
+	YYSETCONDITION(new_state);
+}
+
+#define yy_push_state(state_and_tsrm) _yy_push_state(yyc##state_and_tsrm)
+
+static void yy_pop_state(void)
+{
+	int *stack_state = zend_stack_top(&SCNG(state_stack));
+	YYSETCONDITION(*stack_state);
+	zend_stack_del_top(&SCNG(state_stack));
+}
+
+static void yy_scan_buffer(char *str, unsigned int len)
+{
+	YYCURSOR = (YYCTYPE*)str;
+	SCNG(yy_start) = YYCURSOR;
+	YYLIMIT  = YYCURSOR + len;
+}
+
+#define ini_filename SCNG(filename)
+
+/* {{{ init_ini_scanner() */
+static zend_result init_ini_scanner(int scanner_mode, zend_file_handle *fh)
+{
+	/* Sanity check */
+	if (scanner_mode != ZEND_INI_SCANNER_NORMAL && scanner_mode != ZEND_INI_SCANNER_RAW && scanner_mode != ZEND_INI_SCANNER_TYPED) {
+		zend_error(E_WARNING, "Invalid scanner mode");
+		return FAILURE;
+	}
+
+	SCNG(lineno) = 1;
+	SCNG(scanner_mode) = scanner_mode;
+	SCNG(yy_in) = fh;
+
+	if (fh != NULL) {
+		ini_filename = zend_string_copy(fh->filename);
+	} else {
+		ini_filename = NULL;
+	}
+
+	zend_stack_init(&SCNG(state_stack), sizeof(int));
+	BEGIN(INITIAL);
+
+	return SUCCESS;
+}
+/* }}} */
+
+/* {{{ shutdown_ini_scanner() */
+void shutdown_ini_scanner(void)
+{
+	zend_stack_destroy(&SCNG(state_stack));
+	if (ini_filename) {
+		zend_string_release(ini_filename);
+	}
+}
+/* }}} */
+
+/* {{{ zend_ini_scanner_get_lineno() */
+ZEND_COLD int zend_ini_scanner_get_lineno(void)
+{
+	return SCNG(lineno);
+}
+/* }}} */
+
+/* {{{ zend_ini_scanner_get_filename() */
+ZEND_COLD char *zend_ini_scanner_get_filename(void)
+{
+	return ini_filename ? ZSTR_VAL(ini_filename) : "Unknown";
+}
+/* }}} */
+
+/* {{{ zend_ini_open_file_for_scanning() */
+zend_result zend_ini_open_file_for_scanning(zend_file_handle *fh, int scanner_mode)
+{
+	char *buf;
+	size_t size;
+
+	if (zend_stream_fixup(fh, &buf, &size) == FAILURE) {
+		return FAILURE;
+	}
+
+	if (init_ini_scanner(scanner_mode, fh) == FAILURE) {
+		return FAILURE;
+	}
+
+	yy_scan_buffer(buf, (unsigned int)size);
+
+	return SUCCESS;
+}
+/* }}} */
+
+/* {{{ zend_ini_prepare_string_for_scanning() */
+zend_result zend_ini_prepare_string_for_scanning(char *str, int scanner_mode)
+{
+	int len = (int)strlen(str);
+
+	if (init_ini_scanner(scanner_mode, NULL) == FAILURE) {
+		return FAILURE;
+	}
+
+	yy_scan_buffer(str, len);
+
+	return SUCCESS;
+}
+/* }}} */
+
+/* {{{ zend_ini_escape_string() */
+static void zend_ini_escape_string(zval *lval, char *str, int len, char quote_type)
+{
+	char *s, *t;
+	char *end;
+
+	zend_ini_copy_value(lval, str, len);
+
+	/* convert escape sequences */
+	s = t = Z_STRVAL_P(lval);
+	end = s + Z_STRLEN_P(lval);
+
+	while (s < end) {
+		if (*s == '\\') {
+			s++;
+			if (s >= end) {
+				*t++ = '\\';
+				continue;
+			}
+			switch (*s) {
+				case '"':
+					if (*s != quote_type) {
+						*t++ = '\\';
+						*t++ = *s;
+						break;
+					}
+					ZEND_FALLTHROUGH;
+				case '\\':
+				case '$':
+					*t++ = *s;
+					Z_STRLEN_P(lval)--;
+					break;
+				default:
+					*t++ = '\\';
+					*t++ = *s;
+					break;
+			}
+		} else {
+			*t++ = *s;
+		}
+		if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
+			SCNG(lineno)++;
+		}
+		s++;
+	}
+	*t = 0;
+}
+/* }}} */
+
+int ini_lex(zval *ini_lval)
+{
+restart:
+	SCNG(yy_text) = YYCURSOR;
+
+/* yymore_restart: */
+	/* detect EOF */
+	if (YYCURSOR >= YYLIMIT) {
+		if (YYSTATE == STATE(ST_VALUE) || YYSTATE == STATE(ST_RAW)) {
+			BEGIN(INITIAL);
+			return END_OF_LINE;
+		}
+		return 0;
+	}
+
+	/* Eat any UTF-8 BOM we find in the first 3 bytes */
+	if (YYCURSOR == SCNG(yy_start) && YYCURSOR + 3 < YYLIMIT) {
+		if (memcmp(YYCURSOR, "\xef\xbb\xbf", 3) == 0) {
+			YYCURSOR += 3;
+			goto restart;
+		}
+	}
+
+#line 381 "Zend/zend_ini_scanner.c"
+{
+	YYCTYPE yych;
+	unsigned int yyaccept = 0;
+	if (YYGETCONDITION() < 4) {
+		if (YYGETCONDITION() < 2) {
+			if (YYGETCONDITION() < 1) {
+				goto yyc_INITIAL;
+			} else {
+				goto yyc_ST_OFFSET;
+			}
+		} else {
+			if (YYGETCONDITION() < 3) {
+				goto yyc_ST_SECTION_VALUE;
+			} else {
+				goto yyc_ST_VALUE;
+			}
+		}
+	} else {
+		if (YYGETCONDITION() < 6) {
+			if (YYGETCONDITION() < 5) {
+				goto yyc_ST_SECTION_RAW;
+			} else {
+				goto yyc_ST_DOUBLE_QUOTES;
+			}
+		} else {
+			if (YYGETCONDITION() < 7) {
+				goto yyc_ST_VARNAME;
+			} else {
+				goto yyc_ST_RAW;
+			}
+		}
+	}
+/* *********************************** */
+yyc_INITIAL:
+	{
+		static const unsigned char yybm[] = {
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 160,   0, 144, 144,   0, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			240, 128, 128, 144, 128, 144, 128, 144, 
+			128, 128, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 128, 144, 128, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 128, 144, 144, 128, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 128, 128, 128, 128, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+			144, 144, 144, 144, 144, 144, 144, 144, 
+		};
+		YYDEBUG(1, *YYCURSOR);
+		YYFILL(5);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy12;
+		}
+		switch (yych) {
+		case '\t':	goto yy6;
+		case '\n':	goto yy9;
+		case '\r':	goto yy11;
+		case ' ':
+		case '!':
+		case '"':
+		case '$':
+		case '&':
+		case '(':
+		case ')':
+		case '^':
+		case '{':
+		case '|':
+		case '}':
+		case '~':	goto yy14;
+		case ';':	goto yy16;
+		case '=':	goto yy18;
+		case 'F':
+		case 'f':	goto yy21;
+		case 'N':
+		case 'n':	goto yy22;
+		case 'O':
+		case 'o':	goto yy23;
+		case 'T':
+		case 't':	goto yy24;
+		case 'Y':
+		case 'y':	goto yy25;
+		case '[':	goto yy26;
+		default:	goto yy3;
+		}
+yy3:
+		YYDEBUG(3, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy4:
+		YYDEBUG(4, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy3;
+		}
+		if (yych <= '=') goto yy5;
+		if (yych <= '[') goto yy28;
+yy5:
+		YYDEBUG(5, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 476 "Zend/zend_ini_scanner.l"
+		{ /* Get option name */
+	/* Eat leading whitespace */
+	EAT_LEADING_WHITESPACE();
+
+	/* Eat trailing whitespace */
+	EAT_TRAILING_WHITESPACE();
+
+	RETURN_TOKEN(TC_LABEL, yytext, yyleng);
+}
+#line 513 "Zend/zend_ini_scanner.c"
+yy6:
+		YYDEBUG(6, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(7, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy6;
+		}
+		if (yych <= '\r') {
+			if (yych <= 0x08) goto yy8;
+			if (yych <= '\n') goto yy9;
+			if (yych >= '\r') goto yy11;
+		} else {
+			if (yych <= ';') {
+				if (yych >= ';') goto yy16;
+			} else {
+				if (yych == '=') goto yy18;
+			}
+		}
+yy8:
+		YYDEBUG(8, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 633 "Zend/zend_ini_scanner.l"
+		{
+	/* eat whitespace */
+	goto restart;
+}
+#line 542 "Zend/zend_ini_scanner.c"
+yy9:
+		YYDEBUG(9, *YYCURSOR);
+		++YYCURSOR;
+yy10:
+		YYDEBUG(10, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 638 "Zend/zend_ini_scanner.l"
+		{
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 554 "Zend/zend_ini_scanner.c"
+yy11:
+		YYDEBUG(11, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy9;
+		goto yy10;
+yy12:
+		YYDEBUG(12, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(13, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy12;
+		}
+		if (yych <= '\'') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy3;
+					if (yych <= '\t') goto yy6;
+					goto yy9;
+				} else {
+					if (yych == '\r') goto yy11;
+					goto yy3;
+				}
+			} else {
+				if (yych <= '$') {
+					if (yych == '#') goto yy3;
+					goto yy5;
+				} else {
+					if (yych == '&') goto yy5;
+					goto yy3;
+				}
+			}
+		} else {
+			if (yych <= 'Z') {
+				if (yych <= ';') {
+					if (yych <= ')') goto yy5;
+					if (yych <= ':') goto yy3;
+					goto yy16;
+				} else {
+					if (yych == '=') goto yy18;
+					goto yy3;
+				}
+			} else {
+				if (yych <= '^') {
+					if (yych <= '[') goto yy28;
+					if (yych <= ']') goto yy3;
+					goto yy5;
+				} else {
+					if (yych <= 'z') goto yy3;
+					if (yych <= '~') goto yy5;
+					goto yy3;
+				}
+			}
+		}
+yy14:
+		YYDEBUG(14, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(15, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 557 "Zend/zend_ini_scanner.l"
+		{ /* Disallow these chars outside option values */
+	return yytext[0];
+}
+#line 619 "Zend/zend_ini_scanner.c"
+yy16:
+		YYDEBUG(16, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(17, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy16;
+		}
+		if (yych <= '\n') goto yy31;
+		goto yy33;
+yy18:
+		YYDEBUG(18, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(19, *YYCURSOR);
+		if (yych == '\t') goto yy18;
+		if (yych == ' ') goto yy18;
+		YYDEBUG(20, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 486 "Zend/zend_ini_scanner.l"
+		{ /* Start option value */
+	if (SCNG(scanner_mode) == ZEND_INI_SCANNER_RAW) {
+		BEGIN(ST_RAW);
+	} else {
+		BEGIN(ST_VALUE);
+	}
+	return '=';
+}
+#line 650 "Zend/zend_ini_scanner.c"
+yy21:
+		YYDEBUG(21, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy34;
+		if (yych == 'a') goto yy34;
+		goto yy4;
+yy22:
+		YYDEBUG(22, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= 'U') {
+			if (yych == 'O') goto yy35;
+			if (yych <= 'T') goto yy4;
+			goto yy37;
+		} else {
+			if (yych <= 'o') {
+				if (yych <= 'n') goto yy4;
+				goto yy35;
+			} else {
+				if (yych == 'u') goto yy37;
+				goto yy4;
+			}
+		}
+yy23:
+		YYDEBUG(23, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= 'N') {
+			if (yych == 'F') goto yy38;
+			if (yych <= 'M') goto yy4;
+			goto yy39;
+		} else {
+			if (yych <= 'f') {
+				if (yych <= 'e') goto yy4;
+				goto yy38;
+			} else {
+				if (yych == 'n') goto yy39;
+				goto yy4;
+			}
+		}
+yy24:
+		YYDEBUG(24, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy42;
+		if (yych == 'r') goto yy42;
+		goto yy4;
+yy25:
+		YYDEBUG(25, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy43;
+		if (yych == 'e') goto yy43;
+		goto yy4;
+yy26:
+		YYDEBUG(26, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(27, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 401 "Zend/zend_ini_scanner.l"
+		{ /* Section start */
+	/* Enter section data lookup state */
+	if (SCNG(scanner_mode) == ZEND_INI_SCANNER_RAW) {
+		BEGIN(ST_SECTION_RAW);
+	} else {
+		BEGIN(ST_SECTION_VALUE);
+	}
+	return TC_SECTION;
+}
+#line 716 "Zend/zend_ini_scanner.c"
+yy28:
+		YYDEBUG(28, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(29, *YYCURSOR);
+		if (yych == '\t') goto yy28;
+		if (yych == ' ') goto yy28;
+		YYDEBUG(30, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 426 "Zend/zend_ini_scanner.l"
+		{ /* Start of option with offset */
+	/* Eat leading whitespace */
+	EAT_LEADING_WHITESPACE();
+
+	/* Eat trailing whitespace and [ */
+	EAT_TRAILING_WHITESPACE_EX('[');
+
+	/* Enter offset lookup state */
+	BEGIN(ST_OFFSET);
+
+	RETURN_TOKEN(TC_OFFSET, yytext, yyleng);
+}
+#line 740 "Zend/zend_ini_scanner.c"
+yy31:
+		YYDEBUG(31, *YYCURSOR);
+		++YYCURSOR;
+yy32:
+		YYDEBUG(32, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 643 "Zend/zend_ini_scanner.l"
+		{ /* Comment */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 753 "Zend/zend_ini_scanner.c"
+yy33:
+		YYDEBUG(33, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy31;
+		goto yy32;
+yy34:
+		YYDEBUG(34, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy44;
+		if (yych == 'l') goto yy44;
+		goto yy4;
+yy35:
+		YYDEBUG(35, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\'') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy4;
+					if (yych <= '\t') goto yy45;
+				} else {
+					if (yych != '\r') goto yy4;
+				}
+			} else {
+				if (yych <= '#') {
+					if (yych <= ' ') goto yy47;
+					if (yych >= '#') goto yy4;
+				} else {
+					if (yych == '%') goto yy4;
+					if (yych >= '\'') goto yy4;
+				}
+			}
+		} else {
+			if (yych <= 'N') {
+				if (yych <= ';') {
+					if (yych <= ')') goto yy36;
+					if (yych <= ':') goto yy4;
+				} else {
+					if (yych == '=') goto yy36;
+					if (yych <= 'M') goto yy4;
+					goto yy49;
+				}
+			} else {
+				if (yych <= 'm') {
+					if (yych != '^') goto yy4;
+				} else {
+					if (yych <= 'n') goto yy49;
+					if (yych <= 'z') goto yy4;
+					if (yych >= 0x7F) goto yy4;
+				}
+			}
+		}
+yy36:
+		YYDEBUG(36, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 468 "Zend/zend_ini_scanner.l"
+		{ /* FALSE value (when used outside option value/offset this causes parse error!)*/
+	RETURN_TOKEN(BOOL_FALSE, "", 0);
+}
+#line 812 "Zend/zend_ini_scanner.c"
+yy37:
+		YYDEBUG(37, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy50;
+		if (yych == 'l') goto yy50;
+		goto yy4;
+yy38:
+		YYDEBUG(38, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'F') goto yy47;
+		if (yych == 'f') goto yy47;
+		goto yy4;
+yy39:
+		YYDEBUG(39, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(40, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy3;
+					if (yych <= '\t') goto yy51;
+				} else {
+					if (yych != '\r') goto yy3;
+				}
+			} else {
+				if (yych <= '#') {
+					if (yych <= ' ') goto yy39;
+					if (yych >= '#') goto yy3;
+				} else {
+					if (yych == '%') goto yy3;
+				}
+			}
+		} else {
+			if (yych <= '=') {
+				if (yych <= ':') {
+					if (yych <= '\'') goto yy3;
+					if (yych >= '*') goto yy3;
+				} else {
+					if (yych == '<') goto yy3;
+				}
+			} else {
+				if (yych <= ']') {
+					if (yych == '[') goto yy28;
+					goto yy3;
+				} else {
+					if (yych <= '^') goto yy41;
+					if (yych <= 'z') goto yy3;
+					if (yych >= 0x7F) goto yy3;
+				}
+			}
+		}
+yy41:
+		YYDEBUG(41, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 464 "Zend/zend_ini_scanner.l"
+		{ /* TRUE value (when used outside option value/offset this causes parse error!) */
+	RETURN_TOKEN(BOOL_TRUE, "1", 1);
+}
+#line 873 "Zend/zend_ini_scanner.c"
+yy42:
+		YYDEBUG(42, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'U') goto yy53;
+		if (yych == 'u') goto yy53;
+		goto yy4;
+yy43:
+		YYDEBUG(43, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'S') goto yy39;
+		if (yych == 's') goto yy39;
+		goto yy4;
+yy44:
+		YYDEBUG(44, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'S') goto yy49;
+		if (yych == 's') goto yy49;
+		goto yy4;
+yy45:
+		YYDEBUG(45, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(46, *YYCURSOR);
+		if (yych == '\t') goto yy45;
+		if (yych == ' ') goto yy45;
+		goto yy36;
+yy47:
+		YYDEBUG(47, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(48, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy3;
+					if (yych <= '\t') goto yy45;
+					goto yy36;
+				} else {
+					if (yych == '\r') goto yy36;
+					goto yy3;
+				}
+			} else {
+				if (yych <= '#') {
+					if (yych <= ' ') goto yy47;
+					if (yych <= '"') goto yy36;
+					goto yy3;
+				} else {
+					if (yych == '%') goto yy3;
+					goto yy36;
+				}
+			}
+		} else {
+			if (yych <= '=') {
+				if (yych <= ':') {
+					if (yych <= '\'') goto yy3;
+					if (yych <= ')') goto yy36;
+					goto yy3;
+				} else {
+					if (yych == '<') goto yy3;
+					goto yy36;
+				}
+			} else {
+				if (yych <= ']') {
+					if (yych == '[') goto yy28;
+					goto yy3;
+				} else {
+					if (yych <= '^') goto yy36;
+					if (yych <= 'z') goto yy3;
+					if (yych <= '~') goto yy36;
+					goto yy3;
+				}
+			}
+		}
+yy49:
+		YYDEBUG(49, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy47;
+		if (yych == 'e') goto yy47;
+		goto yy4;
+yy50:
+		YYDEBUG(50, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy54;
+		if (yych == 'l') goto yy54;
+		goto yy4;
+yy51:
+		YYDEBUG(51, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(52, *YYCURSOR);
+		if (yych == '\t') goto yy51;
+		if (yych == ' ') goto yy51;
+		goto yy41;
+yy53:
+		YYDEBUG(53, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy39;
+		if (yych == 'e') goto yy39;
+		goto yy4;
+yy54:
+		YYDEBUG(54, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(55, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy3;
+					if (yych <= '\t') goto yy57;
+				} else {
+					if (yych != '\r') goto yy3;
+				}
+			} else {
+				if (yych <= '#') {
+					if (yych <= ' ') goto yy54;
+					if (yych >= '#') goto yy3;
+				} else {
+					if (yych == '%') goto yy3;
+				}
+			}
+		} else {
+			if (yych <= '=') {
+				if (yych <= ':') {
+					if (yych <= '\'') goto yy3;
+					if (yych >= '*') goto yy3;
+				} else {
+					if (yych == '<') goto yy3;
+				}
+			} else {
+				if (yych <= ']') {
+					if (yych == '[') goto yy28;
+					goto yy3;
+				} else {
+					if (yych <= '^') goto yy56;
+					if (yych <= 'z') goto yy3;
+					if (yych >= 0x7F) goto yy3;
+				}
+			}
+		}
+yy56:
+		YYDEBUG(56, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 472 "Zend/zend_ini_scanner.l"
+		{
+	RETURN_TOKEN(NULL_NULL, "", 0);
+}
+#line 1024 "Zend/zend_ini_scanner.c"
+yy57:
+		YYDEBUG(57, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(58, *YYCURSOR);
+		if (yych == '\t') goto yy57;
+		if (yych == ' ') goto yy57;
+		goto yy56;
+	}
+/* *********************************** */
+yyc_ST_OFFSET:
+	{
+		static const unsigned char yybm[] = {
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 140, 128, 132, 132, 128, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			140, 132, 128, 132, 192, 132, 132,   0, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			180, 180, 180, 180, 180, 180, 180, 180, 
+			180, 180, 132, 128, 132, 132, 132, 132, 
+			132, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 132, 192, 128, 132, 164, 
+			132, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+		};
+		YYDEBUG(59, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 8) {
+			goto yy64;
+		}
+		if (yych <= '/') {
+			if (yych <= '"') {
+				if (yych <= '\f') {
+					if (yych <= 0x08) goto yy61;
+					if (yych <= '\n') goto yy66;
+				} else {
+					if (yych <= '\r') goto yy66;
+					if (yych >= '"') goto yy68;
+				}
+			} else {
+				if (yych <= '&') {
+					if (yych == '$') goto yy70;
+				} else {
+					if (yych <= '\'') goto yy71;
+					if (yych <= ',') goto yy61;
+					if (yych <= '.') goto yy72;
+				}
+			}
+		} else {
+			if (yych <= '[') {
+				if (yych <= ';') {
+					if (yych <= '9') goto yy73;
+					if (yych >= ';') goto yy66;
+				} else {
+					if (yych <= '@') goto yy61;
+					if (yych <= 'Z') goto yy76;
+				}
+			} else {
+				if (yych <= '^') {
+					if (yych <= '\\') goto yy79;
+					if (yych <= ']') goto yy80;
+				} else {
+					if (yych == '`') goto yy61;
+					if (yych <= 'z') goto yy76;
+				}
+			}
+		}
+yy61:
+		YYDEBUG(61, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy62:
+		YYDEBUG(62, *YYCURSOR);
+		if (yybm[0+yych] & 4) {
+			goto yy61;
+		}
+		if (yych <= '"') goto yy63;
+		if (yych <= '$') goto yy82;
+		if (yych <= ';') goto yy63;
+		if (yych <= '\\') goto yy79;
+yy63:
+		YYDEBUG(63, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 575 "Zend/zend_ini_scanner.l"
+		{ /* Get rest as section/offset value */
+	RETURN_TOKEN(TC_STRING, yytext, yyleng);
+}
+#line 1137 "Zend/zend_ini_scanner.c"
+yy64:
+		YYDEBUG(64, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(65, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy64;
+		}
+		if (yych <= '$') {
+			if (yych <= '\r') {
+				if (yych <= 0x08) goto yy61;
+				if (yych <= '\n') goto yy63;
+				if (yych <= '\f') goto yy61;
+				goto yy63;
+			} else {
+				if (yych == '"') goto yy68;
+				if (yych <= '#') goto yy61;
+				goto yy82;
+			}
+		} else {
+			if (yych <= ';') {
+				if (yych == '\'') goto yy63;
+				if (yych <= ':') goto yy61;
+				goto yy63;
+			} else {
+				if (yych <= '[') goto yy61;
+				if (yych <= '\\') goto yy79;
+				if (yych <= ']') goto yy80;
+				goto yy61;
+			}
+		}
+yy66:
+		YYDEBUG(66, *YYCURSOR);
+		++YYCURSOR;
+yy67:
+		YYDEBUG(67, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 654 "Zend/zend_ini_scanner.l"
+		{
+	return 0;
+}
+#line 1181 "Zend/zend_ini_scanner.c"
+yy68:
+		YYDEBUG(68, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(69, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 579 "Zend/zend_ini_scanner.l"
+		{ /* Double quoted '"' string start */
+	yy_push_state(ST_DOUBLE_QUOTES);
+	return '"';
+}
+#line 1192 "Zend/zend_ini_scanner.c"
+yy70:
+		YYDEBUG(70, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy67;
+			if (yych <= '[') goto yy61;
+			goto yy84;
+		} else {
+			if (yych == '{') goto yy86;
+			goto yy61;
+		}
+yy71:
+		YYDEBUG(71, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy88;
+		}
+		goto yy67;
+yy72:
+		YYDEBUG(72, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '/') goto yy62;
+		if (yych <= '9') goto yy90;
+		goto yy62;
+yy73:
+		YYDEBUG(73, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(74, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy73;
+		}
+		if (yych <= '&') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy75;
+				if (yych <= '\f') goto yy61;
+			} else {
+				if (yych <= '"') {
+					if (yych <= '!') goto yy61;
+				} else {
+					if (yych == '$') goto yy82;
+					goto yy61;
+				}
+			}
+		} else {
+			if (yych <= ':') {
+				if (yych <= '\'') goto yy75;
+				if (yych == '.') goto yy90;
+				goto yy61;
+			} else {
+				if (yych <= '[') {
+					if (yych >= '<') goto yy61;
+				} else {
+					if (yych <= '\\') goto yy79;
+					if (yych >= '^') goto yy61;
+				}
+			}
+		}
+yy75:
+		YYDEBUG(75, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 553 "Zend/zend_ini_scanner.l"
+		{ /* Get number option value as string */
+	RETURN_TOKEN(TC_NUMBER, yytext, yyleng);
+}
+#line 1261 "Zend/zend_ini_scanner.c"
+yy76:
+		YYDEBUG(76, *YYCURSOR);
+		yyaccept = 2;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(77, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy76;
+		}
+		if (yych <= '$') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy78;
+				if (yych <= '\f') goto yy61;
+			} else {
+				if (yych == '"') goto yy78;
+				if (yych <= '#') goto yy61;
+				goto yy82;
+			}
+		} else {
+			if (yych <= ';') {
+				if (yych == '\'') goto yy78;
+				if (yych <= ':') goto yy61;
+			} else {
+				if (yych <= '[') goto yy61;
+				if (yych <= '\\') goto yy79;
+				if (yych >= '^') goto yy61;
+			}
+		}
+yy78:
+		YYDEBUG(78, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 549 "Zend/zend_ini_scanner.l"
+		{ /* Get constant option value */
+	RETURN_TOKEN(TC_CONSTANT, yytext, yyleng);
+}
+#line 1298 "Zend/zend_ini_scanner.c"
+yy79:
+		YYDEBUG(79, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		goto yy61;
+yy80:
+		YYDEBUG(80, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(81, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 439 "Zend/zend_ini_scanner.l"
+		{ /* End of section or an option offset */
+	BEGIN(INITIAL);
+	return ']';
+}
+#line 1315 "Zend/zend_ini_scanner.c"
+yy82:
+		YYDEBUG(82, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy83;
+			if (yych <= '[') goto yy61;
+			goto yy84;
+		} else {
+			if (yych != '{') goto yy61;
+		}
+yy83:
+		YYDEBUG(83, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 1) {
+			if (yyaccept == 0) {
+				goto yy63;
+			} else {
+				goto yy75;
+			}
+		} else {
+			goto yy78;
+		}
+yy84:
+		YYDEBUG(84, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(85, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy84;
+		}
+		goto yy61;
+yy86:
+		YYDEBUG(86, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(87, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 444 "Zend/zend_ini_scanner.l"
+		{ /* Variable start */
+	yy_push_state(ST_VARNAME);
+	return TC_DOLLAR_CURLY;
+}
+#line 1360 "Zend/zend_ini_scanner.c"
+yy88:
+		YYDEBUG(88, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(89, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy88;
+		}
+		goto yy92;
+yy90:
+		YYDEBUG(90, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(91, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy75;
+				if (yych <= '\f') goto yy61;
+				goto yy75;
+			} else {
+				if (yych <= '"') {
+					if (yych <= '!') goto yy61;
+					goto yy75;
+				} else {
+					if (yych == '$') goto yy82;
+					goto yy61;
+				}
+			}
+		} else {
+			if (yych <= ':') {
+				if (yych <= '\'') goto yy75;
+				if (yych <= '/') goto yy61;
+				if (yych <= '9') goto yy90;
+				goto yy61;
+			} else {
+				if (yych <= '[') {
+					if (yych <= ';') goto yy75;
+					goto yy61;
+				} else {
+					if (yych <= '\\') goto yy79;
+					if (yych <= ']') goto yy75;
+					goto yy61;
+				}
+			}
+		}
+yy92:
+		YYDEBUG(92, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(93, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 411 "Zend/zend_ini_scanner.l"
+		{ /* Raw string */
+	/* Eat leading and trailing single quotes */
+	if (yytext[0] == '\'' && yytext[yyleng - 1] == '\'') {
+		SCNG(yy_text)++;
+		yyleng = yyleng - 2;
+	}
+	RETURN_TOKEN(TC_RAW, yytext, yyleng);
+}
+#line 1423 "Zend/zend_ini_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_SECTION_VALUE:
+	{
+		static const unsigned char yybm[] = {
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 140, 128, 132, 132, 128, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			140, 132, 128, 132, 192, 132, 132,   0, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			180, 180, 180, 180, 180, 180, 180, 180, 
+			180, 180, 132, 128, 132, 132, 132, 132, 
+			132, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 132, 192, 128, 132, 164, 
+			132, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 164, 164, 164, 164, 164, 
+			164, 164, 164, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+			132, 132, 132, 132, 132, 132, 132, 132, 
+		};
+		YYDEBUG(94, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 8) {
+			goto yy99;
+		}
+		if (yych <= '/') {
+			if (yych <= '"') {
+				if (yych <= '\f') {
+					if (yych <= 0x08) goto yy96;
+					if (yych <= '\n') goto yy101;
+				} else {
+					if (yych <= '\r') goto yy101;
+					if (yych >= '"') goto yy103;
+				}
+			} else {
+				if (yych <= '&') {
+					if (yych == '$') goto yy105;
+				} else {
+					if (yych <= '\'') goto yy106;
+					if (yych <= ',') goto yy96;
+					if (yych <= '.') goto yy107;
+				}
+			}
+		} else {
+			if (yych <= '[') {
+				if (yych <= ';') {
+					if (yych <= '9') goto yy108;
+					if (yych >= ';') goto yy101;
+				} else {
+					if (yych <= '@') goto yy96;
+					if (yych <= 'Z') goto yy111;
+				}
+			} else {
+				if (yych <= '^') {
+					if (yych <= '\\') goto yy114;
+					if (yych <= ']') goto yy115;
+				} else {
+					if (yych == '`') goto yy96;
+					if (yych <= 'z') goto yy111;
+				}
+			}
+		}
+yy96:
+		YYDEBUG(96, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy97:
+		YYDEBUG(97, *YYCURSOR);
+		if (yybm[0+yych] & 4) {
+			goto yy96;
+		}
+		if (yych <= '"') goto yy98;
+		if (yych <= '$') goto yy118;
+		if (yych <= ';') goto yy98;
+		if (yych <= '\\') goto yy114;
+yy98:
+		YYDEBUG(98, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 575 "Zend/zend_ini_scanner.l"
+		{ /* Get rest as section/offset value */
+	RETURN_TOKEN(TC_STRING, yytext, yyleng);
+}
+#line 1527 "Zend/zend_ini_scanner.c"
+yy99:
+		YYDEBUG(99, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(100, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy99;
+		}
+		if (yych <= '$') {
+			if (yych <= '\r') {
+				if (yych <= 0x08) goto yy96;
+				if (yych <= '\n') goto yy98;
+				if (yych <= '\f') goto yy96;
+				goto yy98;
+			} else {
+				if (yych == '"') goto yy103;
+				if (yych <= '#') goto yy96;
+				goto yy118;
+			}
+		} else {
+			if (yych <= ';') {
+				if (yych == '\'') goto yy98;
+				if (yych <= ':') goto yy96;
+				goto yy98;
+			} else {
+				if (yych <= '[') goto yy96;
+				if (yych <= '\\') goto yy114;
+				if (yych <= ']') goto yy98;
+				goto yy96;
+			}
+		}
+yy101:
+		YYDEBUG(101, *YYCURSOR);
+		++YYCURSOR;
+yy102:
+		YYDEBUG(102, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 654 "Zend/zend_ini_scanner.l"
+		{
+	return 0;
+}
+#line 1571 "Zend/zend_ini_scanner.c"
+yy103:
+		YYDEBUG(103, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(104, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 579 "Zend/zend_ini_scanner.l"
+		{ /* Double quoted '"' string start */
+	yy_push_state(ST_DOUBLE_QUOTES);
+	return '"';
+}
+#line 1582 "Zend/zend_ini_scanner.c"
+yy105:
+		YYDEBUG(105, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy102;
+			if (yych <= '[') goto yy96;
+			goto yy120;
+		} else {
+			if (yych == '{') goto yy122;
+			goto yy96;
+		}
+yy106:
+		YYDEBUG(106, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy124;
+		}
+		goto yy102;
+yy107:
+		YYDEBUG(107, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '/') goto yy97;
+		if (yych <= '9') goto yy126;
+		goto yy97;
+yy108:
+		YYDEBUG(108, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(109, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy108;
+		}
+		if (yych <= '&') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy110;
+				if (yych <= '\f') goto yy96;
+			} else {
+				if (yych <= '"') {
+					if (yych <= '!') goto yy96;
+				} else {
+					if (yych == '$') goto yy118;
+					goto yy96;
+				}
+			}
+		} else {
+			if (yych <= ':') {
+				if (yych <= '\'') goto yy110;
+				if (yych == '.') goto yy126;
+				goto yy96;
+			} else {
+				if (yych <= '[') {
+					if (yych >= '<') goto yy96;
+				} else {
+					if (yych <= '\\') goto yy114;
+					if (yych >= '^') goto yy96;
+				}
+			}
+		}
+yy110:
+		YYDEBUG(110, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 553 "Zend/zend_ini_scanner.l"
+		{ /* Get number option value as string */
+	RETURN_TOKEN(TC_NUMBER, yytext, yyleng);
+}
+#line 1651 "Zend/zend_ini_scanner.c"
+yy111:
+		YYDEBUG(111, *YYCURSOR);
+		yyaccept = 2;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(112, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy111;
+		}
+		if (yych <= '$') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy113;
+				if (yych <= '\f') goto yy96;
+			} else {
+				if (yych == '"') goto yy113;
+				if (yych <= '#') goto yy96;
+				goto yy118;
+			}
+		} else {
+			if (yych <= ';') {
+				if (yych == '\'') goto yy113;
+				if (yych <= ':') goto yy96;
+			} else {
+				if (yych <= '[') goto yy96;
+				if (yych <= '\\') goto yy114;
+				if (yych >= '^') goto yy96;
+			}
+		}
+yy113:
+		YYDEBUG(113, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 549 "Zend/zend_ini_scanner.l"
+		{ /* Get constant option value */
+	RETURN_TOKEN(TC_CONSTANT, yytext, yyleng);
+}
+#line 1688 "Zend/zend_ini_scanner.c"
+yy114:
+		YYDEBUG(114, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		goto yy96;
+yy115:
+		YYDEBUG(115, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(116, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy117;
+			if (yych <= '\t') goto yy115;
+			if (yych <= '\n') goto yy128;
+		} else {
+			if (yych <= '\r') goto yy129;
+			if (yych == ' ') goto yy115;
+		}
+yy117:
+		YYDEBUG(117, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 420 "Zend/zend_ini_scanner.l"
+		{ /* End of section */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return ']';
+}
+#line 1718 "Zend/zend_ini_scanner.c"
+yy118:
+		YYDEBUG(118, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy119;
+			if (yych <= '[') goto yy96;
+			goto yy120;
+		} else {
+			if (yych != '{') goto yy96;
+		}
+yy119:
+		YYDEBUG(119, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 1) {
+			if (yyaccept == 0) {
+				goto yy98;
+			} else {
+				goto yy110;
+			}
+		} else {
+			goto yy113;
+		}
+yy120:
+		YYDEBUG(120, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(121, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy120;
+		}
+		goto yy96;
+yy122:
+		YYDEBUG(122, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(123, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 444 "Zend/zend_ini_scanner.l"
+		{ /* Variable start */
+	yy_push_state(ST_VARNAME);
+	return TC_DOLLAR_CURLY;
+}
+#line 1763 "Zend/zend_ini_scanner.c"
+yy124:
+		YYDEBUG(124, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(125, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy124;
+		}
+		goto yy130;
+yy126:
+		YYDEBUG(126, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(127, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= '\r') {
+				if (yych == '\n') goto yy110;
+				if (yych <= '\f') goto yy96;
+				goto yy110;
+			} else {
+				if (yych <= '"') {
+					if (yych <= '!') goto yy96;
+					goto yy110;
+				} else {
+					if (yych == '$') goto yy118;
+					goto yy96;
+				}
+			}
+		} else {
+			if (yych <= ':') {
+				if (yych <= '\'') goto yy110;
+				if (yych <= '/') goto yy96;
+				if (yych <= '9') goto yy126;
+				goto yy96;
+			} else {
+				if (yych <= '[') {
+					if (yych <= ';') goto yy110;
+					goto yy96;
+				} else {
+					if (yych <= '\\') goto yy114;
+					if (yych <= ']') goto yy110;
+					goto yy96;
+				}
+			}
+		}
+yy128:
+		YYDEBUG(128, *YYCURSOR);
+		++YYCURSOR;
+		goto yy117;
+yy129:
+		YYDEBUG(129, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy128;
+		goto yy117;
+yy130:
+		YYDEBUG(130, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(131, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 411 "Zend/zend_ini_scanner.l"
+		{ /* Raw string */
+	/* Eat leading and trailing single quotes */
+	if (yytext[0] == '\'' && yytext[yyleng - 1] == '\'') {
+		SCNG(yy_text)++;
+		yyleng = yyleng - 2;
+	}
+	RETURN_TOKEN(TC_RAW, yytext, yyleng);
+}
+#line 1835 "Zend/zend_ini_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_VALUE:
+	{
+		static const unsigned char yybm[] = {
+			 80,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  84,  64,  82,  82,  64,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 84,  80,  80,  82, 208,  82,  80,  16, 
+			 80,  80,  82,  82,  82,  82,  82,  82, 
+			122, 122, 122, 122, 122, 122, 122, 122, 
+			122, 122,  82,  80,  82,  80,  82,  82, 
+			 82, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114,  82,  82,  82,  80, 114, 
+			 82, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114, 114, 114, 114, 114, 114, 
+			114, 114, 114,  82,  80,  82,  80,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+			 82,  82,  82,  82,  82,  82,  82,  82, 
+		};
+		YYDEBUG(132, *YYCURSOR);
+		YYFILL(6);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 4) {
+			goto yy139;
+		}
+		switch (yych) {
+		case 0x00:	goto yy134;
+		case '\t':
+		case '\n':	goto yy142;
+		case '\r':	goto yy144;
+		case ' ':
+		case '!':
+		case '&':
+		case '(':
+		case ')':
+		case '^':
+		case '|':
+		case '~':	goto yy145;
+		case '"':	goto yy148;
+		case '$':	goto yy150;
+		case '\'':	goto yy151;
+		case '-':
+		case '.':	goto yy152;
+		case '0':
+		case '1':
+		case '2':
+		case '3':
+		case '4':
+		case '5':
+		case '6':
+		case '7':
+		case '8':
+		case '9':	goto yy153;
+		case ';':	goto yy156;
+		case '=':	goto yy158;
+		case 'A':
+		case 'B':
+		case 'C':
+		case 'D':
+		case 'E':
+		case 'G':
+		case 'H':
+		case 'I':
+		case 'J':
+		case 'K':
+		case 'L':
+		case 'M':
+		case 'P':
+		case 'Q':
+		case 'R':
+		case 'S':
+		case 'U':
+		case 'V':
+		case 'W':
+		case 'X':
+		case 'Z':
+		case '_':
+		case 'a':
+		case 'b':
+		case 'c':
+		case 'd':
+		case 'e':
+		case 'g':
+		case 'h':
+		case 'i':
+		case 'j':
+		case 'k':
+		case 'l':
+		case 'm':
+		case 'p':
+		case 'q':
+		case 'r':
+		case 's':
+		case 'u':
+		case 'v':
+		case 'w':
+		case 'x':
+		case 'z':	goto yy160;
+		case 'F':
+		case 'f':	goto yy163;
+		case 'N':
+		case 'n':	goto yy164;
+		case 'O':
+		case 'o':	goto yy165;
+		case 'T':
+		case 't':	goto yy166;
+		case 'Y':
+		case 'y':	goto yy167;
+		default:	goto yy136;
+		}
+yy134:
+		YYDEBUG(134, *YYCURSOR);
+		++YYCURSOR;
+yy135:
+		YYDEBUG(135, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 649 "Zend/zend_ini_scanner.l"
+		{ /* End of option value (if EOF is reached before EOL */
+	BEGIN(INITIAL);
+	return END_OF_LINE;
+}
+#line 1976 "Zend/zend_ini_scanner.c"
+yy136:
+		YYDEBUG(136, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy137:
+		YYDEBUG(137, *YYCURSOR);
+		if (yybm[0+yych] & 2) {
+			goto yy136;
+		}
+		if (yych <= '"') goto yy138;
+		if (yych <= '$') goto yy168;
+yy138:
+		YYDEBUG(138, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 571 "Zend/zend_ini_scanner.l"
+		{ /* Get everything else as option/offset value */
+	RETURN_TOKEN(TC_STRING, yytext, yyleng);
+}
+#line 1997 "Zend/zend_ini_scanner.c"
+yy139:
+		YYDEBUG(139, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(140, *YYCURSOR);
+		if (yybm[0+yych] & 4) {
+			goto yy139;
+		}
+		if (yych <= '\r') {
+			if (yych <= 0x08) goto yy141;
+			if (yych <= '\n') goto yy142;
+			if (yych >= '\r') goto yy144;
+		} else {
+			if (yych <= '"') {
+				if (yych >= '"') goto yy148;
+			} else {
+				if (yych == ';') goto yy156;
+			}
+		}
+yy141:
+		YYDEBUG(141, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 629 "Zend/zend_ini_scanner.l"
+		{
+	RETURN_TOKEN(TC_WHITESPACE, yytext, yyleng);
+}
+#line 2025 "Zend/zend_ini_scanner.c"
+yy142:
+		YYDEBUG(142, *YYCURSOR);
+		++YYCURSOR;
+yy143:
+		YYDEBUG(143, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 543 "Zend/zend_ini_scanner.l"
+		{ /* End of option value */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 2038 "Zend/zend_ini_scanner.c"
+yy144:
+		YYDEBUG(144, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy142;
+		goto yy143;
+yy145:
+		YYDEBUG(145, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(146, *YYCURSOR);
+		if (yych == '\t') goto yy145;
+		if (yych == ' ') goto yy145;
+		YYDEBUG(147, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 561 "Zend/zend_ini_scanner.l"
+		{ /* Boolean operators */
+	return yytext[0];
+}
+#line 2058 "Zend/zend_ini_scanner.c"
+yy148:
+		YYDEBUG(148, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(149, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 579 "Zend/zend_ini_scanner.l"
+		{ /* Double quoted '"' string start */
+	yy_push_state(ST_DOUBLE_QUOTES);
+	return '"';
+}
+#line 2069 "Zend/zend_ini_scanner.c"
+yy150:
+		YYDEBUG(150, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy135;
+			if (yych <= '[') goto yy136;
+			goto yy170;
+		} else {
+			if (yych == '{') goto yy171;
+			goto yy136;
+		}
+yy151:
+		YYDEBUG(151, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy173;
+		}
+		goto yy135;
+yy152:
+		YYDEBUG(152, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '/') goto yy137;
+		if (yych <= '9') goto yy175;
+		goto yy137;
+yy153:
+		YYDEBUG(153, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(154, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy153;
+		}
+		if (yych <= '-') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy155;
+					if (yych <= 0x08) goto yy136;
+				} else {
+					if (yych != '\r') goto yy136;
+				}
+			} else {
+				if (yych <= '$') {
+					if (yych <= '"') goto yy155;
+					if (yych <= '#') goto yy136;
+					goto yy168;
+				} else {
+					if (yych <= '%') goto yy136;
+					if (yych >= '*') goto yy136;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= '.') goto yy175;
+					if (yych <= ':') goto yy136;
+				} else {
+					if (yych != '=') goto yy136;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy155;
+					if (yych <= '{') goto yy136;
+				} else {
+					if (yych != '~') goto yy136;
+				}
+			}
+		}
+yy155:
+		YYDEBUG(155, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 553 "Zend/zend_ini_scanner.l"
+		{ /* Get number option value as string */
+	RETURN_TOKEN(TC_NUMBER, yytext, yyleng);
+}
+#line 2147 "Zend/zend_ini_scanner.c"
+yy156:
+		YYDEBUG(156, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(157, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy156;
+		}
+		if (yych <= '\n') goto yy177;
+		goto yy179;
+yy158:
+		YYDEBUG(158, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(159, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 565 "Zend/zend_ini_scanner.l"
+		{ /* Make = used in option value to trigger error */
+	yyless(0);
+	BEGIN(INITIAL);
+	return END_OF_LINE;
+}
+#line 2170 "Zend/zend_ini_scanner.c"
+yy160:
+		YYDEBUG(160, *YYCURSOR);
+		yyaccept = 2;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(161, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy160;
+		}
+		if (yych <= ')') {
+			if (yych <= '\r') {
+				if (yych <= 0x08) {
+					if (yych >= 0x01) goto yy136;
+				} else {
+					if (yych <= '\n') goto yy162;
+					if (yych <= '\f') goto yy136;
+				}
+			} else {
+				if (yych <= '#') {
+					if (yych <= 0x1F) goto yy136;
+					if (yych >= '#') goto yy136;
+				} else {
+					if (yych <= '$') goto yy168;
+					if (yych <= '%') goto yy136;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= ':') goto yy136;
+				} else {
+					if (yych != '=') goto yy136;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy162;
+					if (yych <= '{') goto yy136;
+				} else {
+					if (yych != '~') goto yy136;
+				}
+			}
+		}
+yy162:
+		YYDEBUG(162, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 549 "Zend/zend_ini_scanner.l"
+		{ /* Get constant option value */
+	RETURN_TOKEN(TC_CONSTANT, yytext, yyleng);
+}
+#line 2221 "Zend/zend_ini_scanner.c"
+yy163:
+		YYDEBUG(163, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '<') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '/') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					goto yy137;
+				} else {
+					if (yych <= '9') goto yy160;
+					if (yych == ';') goto yy162;
+					goto yy137;
+				}
+			}
+		} else {
+			if (yych <= '_') {
+				if (yych <= 'A') {
+					if (yych <= '=') goto yy162;
+					if (yych <= '@') goto yy137;
+					goto yy180;
+				} else {
+					if (yych <= 'Z') goto yy160;
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					goto yy160;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych <= '`') goto yy137;
+					if (yych <= 'a') goto yy180;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy164:
+		YYDEBUG(164, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'N') {
+			if (yych <= '%') {
+				if (yych <= '\f') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					if (yych <= '\n') goto yy162;
+					goto yy137;
+				} else {
+					if (yych <= '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					if (yych <= '"') goto yy162;
+					goto yy137;
+				}
+			} else {
+				if (yych <= ':') {
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					if (yych <= '9') goto yy160;
+					goto yy137;
+				} else {
+					if (yych <= '<') {
+						if (yych <= ';') goto yy162;
+						goto yy137;
+					} else {
+						if (yych <= '=') goto yy162;
+						if (yych <= '@') goto yy137;
+						goto yy160;
+					}
+				}
+			}
+		} else {
+			if (yych <= 'n') {
+				if (yych <= 'Z') {
+					if (yych <= 'O') goto yy181;
+					if (yych == 'U') goto yy183;
+					goto yy160;
+				} else {
+					if (yych <= '^') {
+						if (yych <= ']') goto yy137;
+						goto yy162;
+					} else {
+						if (yych == '`') goto yy137;
+						goto yy160;
+					}
+				}
+			} else {
+				if (yych <= 'z') {
+					if (yych <= 'o') goto yy181;
+					if (yych == 'u') goto yy183;
+					goto yy160;
+				} else {
+					if (yych <= '|') {
+						if (yych <= '{') goto yy137;
+						goto yy162;
+					} else {
+						if (yych == '~') goto yy162;
+						goto yy137;
+					}
+				}
+			}
+		}
+yy165:
+		YYDEBUG(165, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'E') {
+			if (yych <= '%') {
+				if (yych <= '\f') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					if (yych <= '\n') goto yy162;
+					goto yy137;
+				} else {
+					if (yych <= '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					if (yych <= '"') goto yy162;
+					goto yy137;
+				}
+			} else {
+				if (yych <= ':') {
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					if (yych <= '9') goto yy160;
+					goto yy137;
+				} else {
+					if (yych <= '<') {
+						if (yych <= ';') goto yy162;
+						goto yy137;
+					} else {
+						if (yych <= '=') goto yy162;
+						if (yych <= '@') goto yy137;
+						goto yy160;
+					}
+				}
+			}
+		} else {
+			if (yych <= 'e') {
+				if (yych <= 'Z') {
+					if (yych <= 'F') goto yy184;
+					if (yych == 'N') goto yy185;
+					goto yy160;
+				} else {
+					if (yych <= '^') {
+						if (yych <= ']') goto yy137;
+						goto yy162;
+					} else {
+						if (yych == '`') goto yy137;
+						goto yy160;
+					}
+				}
+			} else {
+				if (yych <= 'z') {
+					if (yych <= 'f') goto yy184;
+					if (yych == 'n') goto yy185;
+					goto yy160;
+				} else {
+					if (yych <= '|') {
+						if (yych <= '{') goto yy137;
+						goto yy162;
+					} else {
+						if (yych == '~') goto yy162;
+						goto yy137;
+					}
+				}
+			}
+		}
+yy166:
+		YYDEBUG(166, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'R') goto yy187;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'r') goto yy187;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy167:
+		YYDEBUG(167, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'E') goto yy188;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'e') goto yy188;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy168:
+		YYDEBUG(168, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '\\') {
+			if (yych <= 0x00) goto yy169;
+			if (yych <= '[') goto yy136;
+			goto yy170;
+		} else {
+			if (yych != '{') goto yy136;
+		}
+yy169:
+		YYDEBUG(169, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 2) {
+			if (yyaccept <= 1) {
+				if (yyaccept == 0) {
+					goto yy138;
+				} else {
+					goto yy155;
+				}
+			} else {
+				goto yy162;
+			}
+		} else {
+			if (yyaccept <= 4) {
+				if (yyaccept == 3) {
+					goto yy182;
+				} else {
+					goto yy186;
+				}
+			} else {
+				goto yy203;
+			}
+		}
+yy170:
+		YYDEBUG(170, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy189;
+		}
+		goto yy136;
+yy171:
+		YYDEBUG(171, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(172, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 444 "Zend/zend_ini_scanner.l"
+		{ /* Variable start */
+	yy_push_state(ST_VARNAME);
+	return TC_DOLLAR_CURLY;
+}
+#line 2560 "Zend/zend_ini_scanner.c"
+yy173:
+		YYDEBUG(173, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(174, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy173;
+		}
+		goto yy191;
+yy175:
+		YYDEBUG(175, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(176, *YYCURSOR);
+		if (yych <= '/') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy155;
+					if (yych <= 0x08) goto yy136;
+					goto yy155;
+				} else {
+					if (yych == '\r') goto yy155;
+					goto yy136;
+				}
+			} else {
+				if (yych <= '$') {
+					if (yych <= '"') goto yy155;
+					if (yych <= '#') goto yy136;
+					goto yy168;
+				} else {
+					if (yych <= '%') goto yy136;
+					if (yych <= ')') goto yy155;
+					goto yy136;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= '9') goto yy175;
+					if (yych <= ':') goto yy136;
+					goto yy155;
+				} else {
+					if (yych == '=') goto yy155;
+					goto yy136;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy155;
+					if (yych <= '{') goto yy136;
+					goto yy155;
+				} else {
+					if (yych == '~') goto yy155;
+					goto yy136;
+				}
+			}
+		}
+yy177:
+		YYDEBUG(177, *YYCURSOR);
+		++YYCURSOR;
+yy178:
+		YYDEBUG(178, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 643 "Zend/zend_ini_scanner.l"
+		{ /* Comment */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 2632 "Zend/zend_ini_scanner.c"
+yy179:
+		YYDEBUG(179, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy177;
+		goto yy178;
+yy180:
+		YYDEBUG(180, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'L') goto yy193;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'l') goto yy193;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy181:
+		YYDEBUG(181, *YYCURSOR);
+		yyaccept = 3;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '<') {
+			if (yych <= ' ') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy182;
+					if (yych <= 0x08) goto yy137;
+					if (yych <= '\t') goto yy194;
+				} else {
+					if (yych == '\r') goto yy182;
+					if (yych <= 0x1F) goto yy137;
+					goto yy194;
+				}
+			} else {
+				if (yych <= '/') {
+					if (yych <= '"') goto yy182;
+					if (yych <= '%') goto yy137;
+					if (yych >= '*') goto yy137;
+				} else {
+					if (yych <= '9') goto yy160;
+					if (yych != ';') goto yy137;
+				}
+			}
+		} else {
+			if (yych <= '_') {
+				if (yych <= 'N') {
+					if (yych <= '=') goto yy182;
+					if (yych <= '@') goto yy137;
+					if (yych <= 'M') goto yy160;
+					goto yy196;
+				} else {
+					if (yych <= 'Z') goto yy160;
+					if (yych <= ']') goto yy137;
+					if (yych >= '_') goto yy160;
+				}
+			} else {
+				if (yych <= 'z') {
+					if (yych <= '`') goto yy137;
+					if (yych == 'n') goto yy196;
+					goto yy160;
+				} else {
+					if (yych <= '|') {
+						if (yych <= '{') goto yy137;
+					} else {
+						if (yych != '~') goto yy137;
+					}
+				}
+			}
+		}
+yy182:
+		YYDEBUG(182, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 468 "Zend/zend_ini_scanner.l"
+		{ /* FALSE value (when used outside option value/offset this causes parse error!)*/
+	RETURN_TOKEN(BOOL_FALSE, "", 0);
+}
+#line 2747 "Zend/zend_ini_scanner.c"
+yy183:
+		YYDEBUG(183, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'L') goto yy197;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'l') goto yy197;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy184:
+		YYDEBUG(184, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'F') goto yy198;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'f') goto yy198;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy185:
+		YYDEBUG(185, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy160;
+		}
+		if (yych <= ')') {
+			if (yych <= '\f') {
+				if (yych <= 0x08) {
+					if (yych >= 0x01) goto yy137;
+				} else {
+					if (yych <= '\t') goto yy199;
+					if (yych >= '\v') goto yy137;
+				}
+			} else {
+				if (yych <= ' ') {
+					if (yych <= '\r') goto yy186;
+					if (yych <= 0x1F) goto yy137;
+					goto yy199;
+				} else {
+					if (yych <= '"') goto yy186;
+					if (yych <= '%') goto yy137;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= ':') goto yy137;
+				} else {
+					if (yych != '=') goto yy137;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy186;
+					if (yych <= '{') goto yy137;
+				} else {
+					if (yych != '~') goto yy137;
+				}
+			}
+		}
+yy186:
+		YYDEBUG(186, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 464 "Zend/zend_ini_scanner.l"
+		{ /* TRUE value (when used outside option value/offset this causes parse error!) */
+	RETURN_TOKEN(BOOL_TRUE, "1", 1);
+}
+#line 2898 "Zend/zend_ini_scanner.c"
+yy187:
+		YYDEBUG(187, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'U') goto yy201;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'u') goto yy201;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy188:
+		YYDEBUG(188, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'S') goto yy185;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 's') goto yy185;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy189:
+		YYDEBUG(189, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(190, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy189;
+		}
+		if (yych <= 0x00) goto yy138;
+		if (yych == '\\') goto yy170;
+		goto yy136;
+yy191:
+		YYDEBUG(191, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(192, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 411 "Zend/zend_ini_scanner.l"
+		{ /* Raw string */
+	/* Eat leading and trailing single quotes */
+	if (yytext[0] == '\'' && yytext[yyleng - 1] == '\'') {
+		SCNG(yy_text)++;
+		yyleng = yyleng - 2;
+	}
+	RETURN_TOKEN(TC_RAW, yytext, yyleng);
+}
+#line 3027 "Zend/zend_ini_scanner.c"
+yy193:
+		YYDEBUG(193, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'S') goto yy196;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 's') goto yy196;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy194:
+		YYDEBUG(194, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(195, *YYCURSOR);
+		if (yych == '\t') goto yy194;
+		if (yych == ' ') goto yy194;
+		goto yy182;
+yy196:
+		YYDEBUG(196, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'E') goto yy198;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'e') goto yy198;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy197:
+		YYDEBUG(197, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'L') goto yy202;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'l') goto yy202;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy198:
+		YYDEBUG(198, *YYCURSOR);
+		yyaccept = 3;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy160;
+		}
+		if (yych <= ')') {
+			if (yych <= '\f') {
+				if (yych <= 0x08) {
+					if (yych <= 0x00) goto yy182;
+					goto yy137;
+				} else {
+					if (yych <= '\t') goto yy194;
+					if (yych <= '\n') goto yy182;
+					goto yy137;
+				}
+			} else {
+				if (yych <= ' ') {
+					if (yych <= '\r') goto yy182;
+					if (yych <= 0x1F) goto yy137;
+					goto yy194;
+				} else {
+					if (yych <= '"') goto yy182;
+					if (yych <= '%') goto yy137;
+					goto yy182;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= ':') goto yy137;
+					goto yy182;
+				} else {
+					if (yych == '=') goto yy182;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy182;
+					if (yych <= '{') goto yy137;
+					goto yy182;
+				} else {
+					if (yych == '~') goto yy182;
+					goto yy137;
+				}
+			}
+		}
+yy199:
+		YYDEBUG(199, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(200, *YYCURSOR);
+		if (yych == '\t') goto yy199;
+		if (yych == ' ') goto yy199;
+		goto yy186;
+yy201:
+		YYDEBUG(201, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych <= '"') {
+				if (yych <= '\n') {
+					if (yych <= 0x00) goto yy162;
+					if (yych <= 0x08) goto yy137;
+					goto yy162;
+				} else {
+					if (yych == '\r') goto yy162;
+					if (yych <= 0x1F) goto yy137;
+					goto yy162;
+				}
+			} else {
+				if (yych <= '9') {
+					if (yych <= '%') goto yy137;
+					if (yych <= ')') goto yy162;
+					if (yych <= '/') goto yy137;
+					goto yy160;
+				} else {
+					if (yych == ';') goto yy162;
+					if (yych <= '<') goto yy137;
+					goto yy162;
+				}
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'Z') {
+					if (yych <= '@') goto yy137;
+					if (yych == 'E') goto yy185;
+					goto yy160;
+				} else {
+					if (yych <= ']') goto yy137;
+					if (yych <= '^') goto yy162;
+					if (yych <= '_') goto yy160;
+					goto yy137;
+				}
+			} else {
+				if (yych <= '{') {
+					if (yych == 'e') goto yy185;
+					if (yych <= 'z') goto yy160;
+					goto yy137;
+				} else {
+					if (yych == '}') goto yy137;
+					if (yych <= '~') goto yy162;
+					goto yy137;
+				}
+			}
+		}
+yy202:
+		YYDEBUG(202, *YYCURSOR);
+		yyaccept = 5;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy160;
+		}
+		if (yych <= ')') {
+			if (yych <= '\f') {
+				if (yych <= 0x08) {
+					if (yych >= 0x01) goto yy137;
+				} else {
+					if (yych <= '\t') goto yy204;
+					if (yych >= '\v') goto yy137;
+				}
+			} else {
+				if (yych <= ' ') {
+					if (yych <= '\r') goto yy203;
+					if (yych <= 0x1F) goto yy137;
+					goto yy204;
+				} else {
+					if (yych <= '"') goto yy203;
+					if (yych <= '%') goto yy137;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= ';') {
+					if (yych <= ':') goto yy137;
+				} else {
+					if (yych != '=') goto yy137;
+				}
+			} else {
+				if (yych <= '|') {
+					if (yych <= '^') goto yy203;
+					if (yych <= '{') goto yy137;
+				} else {
+					if (yych != '~') goto yy137;
+				}
+			}
+		}
+yy203:
+		YYDEBUG(203, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 472 "Zend/zend_ini_scanner.l"
+		{
+	RETURN_TOKEN(NULL_NULL, "", 0);
+}
+#line 3346 "Zend/zend_ini_scanner.c"
+yy204:
+		YYDEBUG(204, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(205, *YYCURSOR);
+		if (yych == '\t') goto yy204;
+		if (yych == ' ') goto yy204;
+		goto yy203;
+	}
+/* *********************************** */
+yyc_ST_SECTION_RAW:
+	{
+		static const unsigned char yybm[] = {
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64, 192,   0,  64,  64,   0,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			192,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,   0,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+		};
+		YYDEBUG(206, *YYCURSOR);
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy208;
+		}
+		if (yych <= '\r') goto yy211;
+		goto yy213;
+yy208:
+		YYDEBUG(208, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(209, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy208;
+		}
+		YYDEBUG(210, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 539 "Zend/zend_ini_scanner.l"
+		{ /* Raw value, only used when SCNG(scanner_mode) == ZEND_INI_SCANNER_RAW. */
+	RETURN_TOKEN(TC_RAW, yytext, yyleng);
+}
+#line 3417 "Zend/zend_ini_scanner.c"
+yy211:
+		YYDEBUG(211, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(212, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 654 "Zend/zend_ini_scanner.l"
+		{
+	return 0;
+}
+#line 3427 "Zend/zend_ini_scanner.c"
+yy213:
+		YYDEBUG(213, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(214, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy213;
+		}
+		if (yych <= 0x08) goto yy215;
+		if (yych <= '\n') goto yy216;
+		if (yych == '\r') goto yy217;
+yy215:
+		YYDEBUG(215, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 420 "Zend/zend_ini_scanner.l"
+		{ /* End of section */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return ']';
+}
+#line 3449 "Zend/zend_ini_scanner.c"
+yy216:
+		YYDEBUG(216, *YYCURSOR);
+		++YYCURSOR;
+		goto yy215;
+yy217:
+		YYDEBUG(217, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy216;
+		goto yy215;
+	}
+/* *********************************** */
+yyc_ST_DOUBLE_QUOTES:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0, 128,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+		};
+		YYDEBUG(218, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych == '"') goto yy222;
+		if (yych == '$') goto yy225;
+		YYDEBUG(220, *YYCURSOR);
+		++YYCURSOR;
+yy221:
+		YYDEBUG(221, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 589 "Zend/zend_ini_scanner.l"
+		{ /* Escape double quoted string contents */
+	if (YYCURSOR > YYLIMIT) {
+		return 0;
+	}
+
+	unsigned char *s = SCNG(yy_text);
+
+	while (s < YYLIMIT) {
+		switch (*s++) {
+			case '"':
+				break;
+			case '$':
+				if (s < YYLIMIT && *s == '{') {
+					break;
+				}
+				continue;
+			case '\\':
+				if (s < YYLIMIT) {
+					unsigned char escaped = *s++;
+					/* A special case for Windows paths, e.g. key="C:\path\" */
+					if (escaped == '"' && (s >= YYLIMIT || *s == '\n' || *s == '\r')) {
+						break;
+					}
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		s--;
+		break;
+	}
+
+	YYCURSOR = s;
+	yyleng = YYCURSOR - SCNG(yy_text);
+
+	zend_ini_escape_string(ini_lval, yytext, yyleng, '"');
+	return TC_QUOTED_STRING;
+}
+#line 3547 "Zend/zend_ini_scanner.c"
+yy222:
+		YYDEBUG(222, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(223, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy222;
+		}
+		YYDEBUG(224, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 584 "Zend/zend_ini_scanner.l"
+		{ /* Double quoted '"' string ends */
+	yy_pop_state();
+	return '"';
+}
+#line 3564 "Zend/zend_ini_scanner.c"
+yy225:
+		YYDEBUG(225, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych != '{') goto yy221;
+		YYDEBUG(226, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(227, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 444 "Zend/zend_ini_scanner.l"
+		{ /* Variable start */
+	yy_push_state(ST_VARNAME);
+	return TC_DOLLAR_CURLY;
+}
+#line 3578 "Zend/zend_ini_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_VARNAME:
+	{
+		static const unsigned char yybm[] = {
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128,   0,   0, 128, 128,   0, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128,   0,   0, 128,   0, 128,   0, 128, 
+			  0,   0, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0, 128,   0, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0, 128, 128,   0, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(228, *YYCURSOR);
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy230;
+		}
+		if (yych == '}') goto yy235;
+		goto yy233;
+yy230:
+		YYDEBUG(230, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(231, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy230;
+		}
+		YYDEBUG(232, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 449 "Zend/zend_ini_scanner.l"
+		{ /* Variable name */
+	/* Eat leading whitespace */
+	EAT_LEADING_WHITESPACE();
+
+	/* Eat trailing whitespace */
+	EAT_TRAILING_WHITESPACE();
+
+	RETURN_TOKEN(TC_VARNAME, yytext, yyleng);
+}
+#line 3646 "Zend/zend_ini_scanner.c"
+yy233:
+		YYDEBUG(233, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(234, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 654 "Zend/zend_ini_scanner.l"
+		{
+	return 0;
+}
+#line 3656 "Zend/zend_ini_scanner.c"
+yy235:
+		YYDEBUG(235, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(236, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 459 "Zend/zend_ini_scanner.l"
+		{ /* Variable end */
+	yy_pop_state();
+	return '}';
+}
+#line 3667 "Zend/zend_ini_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_RAW:
+	{
+		static const unsigned char yybm[] = {
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64, 192,   0,  64,  64,   0,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			192,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+		};
+		YYDEBUG(237, *YYCURSOR);
+		YYFILL(3);
+		yych = *YYCURSOR;
+		if (yych <= '\f') {
+			if (yych <= 0x08) {
+				if (yych >= 0x01) goto yy241;
+			} else {
+				if (yych <= '\t') goto yy243;
+				if (yych <= '\n') goto yy244;
+				goto yy241;
+			}
+		} else {
+			if (yych <= ' ') {
+				if (yych <= '\r') goto yy246;
+				if (yych <= 0x1F) goto yy241;
+				goto yy243;
+			} else {
+				if (yych == ';') goto yy247;
+				goto yy241;
+			}
+		}
+		YYDEBUG(239, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(240, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 649 "Zend/zend_ini_scanner.l"
+		{ /* End of option value (if EOF is reached before EOL */
+	BEGIN(INITIAL);
+	return END_OF_LINE;
+}
+#line 3736 "Zend/zend_ini_scanner.c"
+yy241:
+		YYDEBUG(241, *YYCURSOR);
+		++YYCURSOR;
+yy242:
+		YYDEBUG(242, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 495 "Zend/zend_ini_scanner.l"
+		{ /* Raw value, only used when SCNG(scanner_mode) == ZEND_INI_SCANNER_RAW. */
+	unsigned char *sc = NULL;
+	EAT_LEADING_WHITESPACE();
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR) {
+			case '\n':
+			case '\r':
+				goto end_raw_value_chars;
+				break;
+			case ';':
+				if (sc == NULL) {
+					sc = YYCURSOR;
+				}
+				YYCURSOR++;
+				break;
+			case '"':
+				if (yytext[0] == '"') {
+					sc = NULL;
+				}
+				YYCURSOR++;
+				break;
+			default:
+				YYCURSOR++;
+				break;
+		}
+	}
+end_raw_value_chars:
+	if (sc) {
+		yyleng = sc - SCNG(yy_text);
+	} else {
+		yyleng = YYCURSOR - SCNG(yy_text);
+	}
+
+	EAT_TRAILING_WHITESPACE();
+
+	/* Eat leading and trailing double quotes */
+	if (yyleng > 1 && yytext[0] == '"' && yytext[yyleng - 1] == '"') {
+		SCNG(yy_text)++;
+		yyleng = yyleng - 2;
+	}
+
+	RETURN_TOKEN(TC_RAW, yytext, yyleng);
+}
+#line 3787 "Zend/zend_ini_scanner.c"
+yy243:
+		YYDEBUG(243, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\r') {
+			if (yych <= 0x08) goto yy242;
+			if (yych <= '\n') goto yy250;
+			if (yych <= '\f') goto yy242;
+			goto yy250;
+		} else {
+			if (yych <= ' ') {
+				if (yych <= 0x1F) goto yy242;
+				goto yy250;
+			} else {
+				if (yych == ';') goto yy250;
+				goto yy242;
+			}
+		}
+yy244:
+		YYDEBUG(244, *YYCURSOR);
+		++YYCURSOR;
+yy245:
+		YYDEBUG(245, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 543 "Zend/zend_ini_scanner.l"
+		{ /* End of option value */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 3817 "Zend/zend_ini_scanner.c"
+yy246:
+		YYDEBUG(246, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy244;
+		goto yy245;
+yy247:
+		YYDEBUG(247, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(248, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy247;
+		}
+		if (yych <= '\n') goto yy252;
+		goto yy254;
+yy249:
+		YYDEBUG(249, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+yy250:
+		YYDEBUG(250, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy249;
+		}
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy251;
+			if (yych <= '\n') goto yy244;
+		} else {
+			if (yych <= '\r') goto yy246;
+			if (yych == ';') goto yy247;
+		}
+yy251:
+		YYDEBUG(251, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 633 "Zend/zend_ini_scanner.l"
+		{
+	/* eat whitespace */
+	goto restart;
+}
+#line 3859 "Zend/zend_ini_scanner.c"
+yy252:
+		YYDEBUG(252, *YYCURSOR);
+		++YYCURSOR;
+yy253:
+		YYDEBUG(253, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 643 "Zend/zend_ini_scanner.l"
+		{ /* Comment */
+	BEGIN(INITIAL);
+	SCNG(lineno)++;
+	return END_OF_LINE;
+}
+#line 3872 "Zend/zend_ini_scanner.c"
+yy254:
+		YYDEBUG(254, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy252;
+		goto yy253;
+	}
+}
+#line 658 "Zend/zend_ini_scanner.l"
+
+}
diff --git a/Zend/zend_language_parser.c b/Zend/zend_language_parser.c
new file mode 100644
index 0000000000..e217f49190
--- /dev/null
+++ b/Zend/zend_language_parser.c
@@ -0,0 +1,8117 @@
+/* A Bison parser, made by GNU Bison 3.5.1.  */
+
+/* Bison implementation for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "3.5.1"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 2
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* "%code top" blocks.  */
+#line 22 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+
+#include "zend.h"
+#include "zend_list.h"
+#include "zend_globals.h"
+#include "zend_API.h"
+#include "zend_constants.h"
+#include "zend_language_scanner.h"
+#include "zend_exceptions.h"
+
+#define YYSIZE_T size_t
+#define yytnamerr zend_yytnamerr
+static YYSIZE_T zend_yytnamerr(char*, const char*);
+
+#ifdef _MSC_VER
+#define YYMALLOC malloc
+#define YYFREE free
+#endif
+
+#line 86 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+/* Substitute the type names.  */
+#define YYSTYPE         ZENDSTYPE
+/* Substitute the variable and function names.  */
+#define yyparse         zendparse
+#define yylex           zendlex
+#define yyerror         zenderror
+#define yydebug         zenddebug
+#define yynerrs         zendnerrs
+
+
+# ifndef YY_CAST
+#  ifdef __cplusplus
+#   define YY_CAST(Type, Val) static_cast<Type> (Val)
+#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
+#  else
+#   define YY_CAST(Type, Val) ((Type) (Val))
+#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
+#  endif
+# endif
+# ifndef YY_NULLPTR
+#  if defined __cplusplus
+#   if 201103L <= __cplusplus
+#    define YY_NULLPTR nullptr
+#   else
+#    define YY_NULLPTR 0
+#   endif
+#  else
+#   define YY_NULLPTR ((void*)0)
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 1
+#endif
+
+/* Use api.header.include to #include this header
+   instead of duplicating it here.  */
+#ifndef YY_ZEND_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_LANGUAGE_PARSER_H_INCLUDED
+# define YY_ZEND_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_LANGUAGE_PARSER_H_INCLUDED
+/* Debug traces.  */
+#ifndef ZENDDEBUG
+# if defined YYDEBUG
+#if YYDEBUG
+#   define ZENDDEBUG 1
+#  else
+#   define ZENDDEBUG 0
+#  endif
+# else /* ! defined YYDEBUG */
+#  define ZENDDEBUG 0
+# endif /* ! defined YYDEBUG */
+#endif  /* ! defined ZENDDEBUG */
+#if ZENDDEBUG
+extern int zenddebug;
+#endif
+/* "%code requires" blocks.  */
+#line 41 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+
+#include "zend_compile.h"
+
+#line 150 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+
+/* Token type.  */
+#ifndef ZENDTOKENTYPE
+# define ZENDTOKENTYPE
+  enum zendtokentype
+  {
+    END = 0,
+    T_THROW = 258,
+    PREC_ARROW_FUNCTION = 259,
+    T_INCLUDE = 260,
+    T_INCLUDE_ONCE = 261,
+    T_REQUIRE = 262,
+    T_REQUIRE_ONCE = 263,
+    T_LOGICAL_OR = 264,
+    T_LOGICAL_XOR = 265,
+    T_LOGICAL_AND = 266,
+    T_PRINT = 267,
+    T_YIELD = 268,
+    T_DOUBLE_ARROW = 269,
+    T_YIELD_FROM = 270,
+    T_PLUS_EQUAL = 271,
+    T_MINUS_EQUAL = 272,
+    T_MUL_EQUAL = 273,
+    T_DIV_EQUAL = 274,
+    T_CONCAT_EQUAL = 275,
+    T_MOD_EQUAL = 276,
+    T_AND_EQUAL = 277,
+    T_OR_EQUAL = 278,
+    T_XOR_EQUAL = 279,
+    T_SL_EQUAL = 280,
+    T_SR_EQUAL = 281,
+    T_POW_EQUAL = 282,
+    T_COALESCE_EQUAL = 283,
+    T_COALESCE = 284,
+    T_BOOLEAN_OR = 285,
+    T_BOOLEAN_AND = 286,
+    T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 287,
+    T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 288,
+    T_IS_EQUAL = 289,
+    T_IS_NOT_EQUAL = 290,
+    T_IS_IDENTICAL = 291,
+    T_IS_NOT_IDENTICAL = 292,
+    T_SPACESHIP = 293,
+    T_IS_SMALLER_OR_EQUAL = 294,
+    T_IS_GREATER_OR_EQUAL = 295,
+    T_SL = 296,
+    T_SR = 297,
+    T_INSTANCEOF = 298,
+    T_INT_CAST = 299,
+    T_DOUBLE_CAST = 300,
+    T_STRING_CAST = 301,
+    T_ARRAY_CAST = 302,
+    T_OBJECT_CAST = 303,
+    T_BOOL_CAST = 304,
+    T_UNSET_CAST = 305,
+    T_POW = 306,
+    T_CLONE = 307,
+    T_NOELSE = 308,
+    T_ELSEIF = 309,
+    T_ELSE = 310,
+    T_LNUMBER = 311,
+    T_DNUMBER = 312,
+    T_STRING = 313,
+    T_NAME_FULLY_QUALIFIED = 314,
+    T_NAME_RELATIVE = 315,
+    T_NAME_QUALIFIED = 316,
+    T_VARIABLE = 317,
+    T_INLINE_HTML = 318,
+    T_ENCAPSED_AND_WHITESPACE = 319,
+    T_CONSTANT_ENCAPSED_STRING = 320,
+    T_STRING_VARNAME = 321,
+    T_NUM_STRING = 322,
+    T_EVAL = 323,
+    T_NEW = 324,
+    T_EXIT = 325,
+    T_IF = 326,
+    T_ENDIF = 327,
+    T_ECHO = 328,
+    T_DO = 329,
+    T_WHILE = 330,
+    T_ENDWHILE = 331,
+    T_FOR = 332,
+    T_ENDFOR = 333,
+    T_FOREACH = 334,
+    T_ENDFOREACH = 335,
+    T_DECLARE = 336,
+    T_ENDDECLARE = 337,
+    T_AS = 338,
+    T_SWITCH = 339,
+    T_ENDSWITCH = 340,
+    T_CASE = 341,
+    T_DEFAULT = 342,
+    T_MATCH = 343,
+    T_BREAK = 344,
+    T_CONTINUE = 345,
+    T_GOTO = 346,
+    T_FUNCTION = 347,
+    T_FN = 348,
+    T_CONST = 349,
+    T_RETURN = 350,
+    T_TRY = 351,
+    T_CATCH = 352,
+    T_FINALLY = 353,
+    T_USE = 354,
+    T_INSTEADOF = 355,
+    T_GLOBAL = 356,
+    T_STATIC = 357,
+    T_ABSTRACT = 358,
+    T_FINAL = 359,
+    T_PRIVATE = 360,
+    T_PROTECTED = 361,
+    T_PUBLIC = 362,
+    T_READONLY = 363,
+    T_VAR = 364,
+    T_UNSET = 365,
+    T_ISSET = 366,
+    T_EMPTY = 367,
+    T_HALT_COMPILER = 368,
+    T_CLASS = 369,
+    T_TRAIT = 370,
+    T_INTERFACE = 371,
+    T_ENUM = 372,
+    T_EXTENDS = 373,
+    T_IMPLEMENTS = 374,
+    T_NAMESPACE = 375,
+    T_LIST = 376,
+    T_ARRAY = 377,
+    T_CALLABLE = 378,
+    T_LINE = 379,
+    T_FILE = 380,
+    T_DIR = 381,
+    T_CLASS_C = 382,
+    T_TRAIT_C = 383,
+    T_METHOD_C = 384,
+    T_FUNC_C = 385,
+    T_NS_C = 386,
+    T_ATTRIBUTE = 387,
+    T_INC = 388,
+    T_DEC = 389,
+    T_OBJECT_OPERATOR = 390,
+    T_NULLSAFE_OBJECT_OPERATOR = 391,
+    T_COMMENT = 392,
+    T_DOC_COMMENT = 393,
+    T_OPEN_TAG = 394,
+    T_OPEN_TAG_WITH_ECHO = 395,
+    T_CLOSE_TAG = 396,
+    T_WHITESPACE = 397,
+    T_START_HEREDOC = 398,
+    T_END_HEREDOC = 399,
+    T_DOLLAR_OPEN_CURLY_BRACES = 400,
+    T_CURLY_OPEN = 401,
+    T_PAAMAYIM_NEKUDOTAYIM = 402,
+    T_NS_SEPARATOR = 403,
+    T_ELLIPSIS = 404,
+    T_BAD_CHARACTER = 405,
+    T_ERROR = 406
+  };
+#endif
+
+/* Value type.  */
+#if ! defined ZENDSTYPE && ! defined ZENDSTYPE_IS_DECLARED
+typedef zend_parser_stack_elem ZENDSTYPE;
+# define ZENDSTYPE_IS_TRIVIAL 1
+# define ZENDSTYPE_IS_DECLARED 1
+#endif
+
+
+
+ZEND_API int zendparse (void);
+
+#endif /* !YY_ZEND_HOME_LUXE_DESKTOP_PHP_SRC_ZEND_ZEND_LANGUAGE_PARSER_H_INCLUDED  */
+
+
+
+#ifdef short
+# undef short
+#endif
+
+/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
+   <limits.h> and (if available) <stdint.h> are included
+   so that the code can choose integer types of a good width.  */
+
+#ifndef __PTRDIFF_MAX__
+# include <limits.h> /* INFRINGES ON USER NAME SPACE */
+# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
+#  define YY_STDINT_H
+# endif
+#endif
+
+/* Narrow types that promote to a signed type and that can represent a
+   signed or unsigned integer of at least N bits.  In tables they can
+   save space and decrease cache pressure.  Promoting to a signed type
+   helps avoid bugs in integer arithmetic.  */
+
+#ifdef __INT_LEAST8_MAX__
+typedef __INT_LEAST8_TYPE__ yytype_int8;
+#elif defined YY_STDINT_H
+typedef int_least8_t yytype_int8;
+#else
+typedef signed char yytype_int8;
+#endif
+
+#ifdef __INT_LEAST16_MAX__
+typedef __INT_LEAST16_TYPE__ yytype_int16;
+#elif defined YY_STDINT_H
+typedef int_least16_t yytype_int16;
+#else
+typedef short yytype_int16;
+#endif
+
+#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST8_TYPE__ yytype_uint8;
+#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST8_MAX <= INT_MAX)
+typedef uint_least8_t yytype_uint8;
+#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
+typedef unsigned char yytype_uint8;
+#else
+typedef short yytype_uint8;
+#endif
+
+#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST16_TYPE__ yytype_uint16;
+#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST16_MAX <= INT_MAX)
+typedef uint_least16_t yytype_uint16;
+#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
+typedef unsigned short yytype_uint16;
+#else
+typedef int yytype_uint16;
+#endif
+
+#ifndef YYPTRDIFF_T
+# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
+#  define YYPTRDIFF_T __PTRDIFF_TYPE__
+#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
+# elif defined PTRDIFF_MAX
+#  ifndef ptrdiff_t
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYPTRDIFF_T ptrdiff_t
+#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
+# else
+#  define YYPTRDIFF_T long
+#  define YYPTRDIFF_MAXIMUM LONG_MAX
+# endif
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM                                  \
+  YY_CAST (YYPTRDIFF_T,                                 \
+           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
+            ? YYPTRDIFF_MAXIMUM                         \
+            : YY_CAST (YYSIZE_T, -1)))
+
+#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
+
+/* Stored state numbers (used for stacks). */
+typedef yytype_int16 yy_state_t;
+
+/* State numbers in computations.  */
+typedef int yy_state_fast_t;
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_PURE
+# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
+# else
+#  define YY_ATTRIBUTE_PURE
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_UNUSED
+# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
+# else
+#  define YY_ATTRIBUTE_UNUSED
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
+
+#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
+    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
+    _Pragma ("GCC diagnostic pop")
+#else
+# define YY_INITIAL_VALUE(Value) Value
+#endif
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
+#endif
+
+#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
+# define YY_IGNORE_USELESS_CAST_BEGIN                          \
+    _Pragma ("GCC diagnostic push")                            \
+    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
+# define YY_IGNORE_USELESS_CAST_END            \
+    _Pragma ("GCC diagnostic pop")
+#endif
+#ifndef YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_END
+#endif
+
+
+#define YY_ASSERT(E) ((void) (0 && (E)))
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's 'empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+             && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+         || (defined ZENDSTYPE_IS_TRIVIAL && ZENDSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yy_state_t yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
+    do                                                                  \
+      {                                                                 \
+        YYPTRDIFF_T yynewbytes;                                         \
+        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
+        Stack = &yyptr->Stack_alloc;                                    \
+        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
+      }                                                                 \
+    while (0)
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYPTRDIFF_T yyi;                      \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (0)
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  3
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   8303
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  179
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  171
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  581
+/* YYNSTATES -- Number of states.  */
+#define YYNSTATES  1096
+
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   406
+
+
+/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, with out-of-bounds checking.  */
+#define YYTRANSLATE(YYX)                                                \
+  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    56,   177,     2,   178,    55,     2,     2,
+     170,   171,    53,    51,   168,    52,    48,    54,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    31,   172,
+      44,    16,    46,    30,    66,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,   175,     2,   169,    36,     2,   176,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,   173,    35,   174,    58,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    32,    33,    34,    37,    38,    39,
+      40,    41,    42,    43,    45,    47,    49,    50,    57,    59,
+      60,    61,    62,    63,    64,    65,    67,    68,    69,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
+      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
+     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
+     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
+     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
+     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
+     161,   162,   163,   164,   165,   166,   167
+};
+
+#if ZENDDEBUG
+  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+static const yytype_int16 yyrline[] =
+{
+       0,   295,   295,   299,   299,   299,   299,   299,   299,   299,
+     299,   300,   300,   300,   300,   300,   300,   300,   300,   300,
+     300,   300,   300,   301,   301,   301,   301,   301,   301,   301,
+     301,   301,   301,   302,   302,   302,   302,   302,   302,   302,
+     302,   302,   302,   303,   303,   303,   303,   303,   303,   303,
+     303,   303,   303,   303,   304,   304,   304,   304,   304,   304,
+     304,   304,   305,   305,   305,   305,   305,   305,   305,   305,
+     305,   305,   305,   309,   310,   310,   310,   310,   310,   310,
+     310,   314,   315,   319,   320,   328,   329,   334,   335,   340,
+     341,   346,   347,   351,   352,   353,   354,   358,   360,   365,
+     367,   372,   376,   377,   381,   382,   383,   384,   385,   389,
+     390,   391,   392,   396,   399,   399,   402,   402,   405,   406,
+     407,   408,   409,   413,   414,   418,   423,   428,   429,   433,
+     435,   440,   442,   447,   449,   454,   455,   459,   461,   466,
+     468,   473,   474,   478,   480,   486,   487,   488,   489,   496,
+     497,   498,   499,   501,   503,   505,   507,   508,   509,   510,
+     511,   512,   513,   514,   515,   516,   518,   522,   521,   525,
+     526,   528,   529,   533,   535,   540,   541,   545,   546,   550,
+     551,   555,   556,   560,   564,   571,   572,   576,   577,   581,
+     581,   584,   584,   590,   591,   596,   597,   601,   601,   607,
+     607,   613,   613,   619,   620,   624,   629,   630,   634,   635,
+     639,   640,   644,   645,   649,   650,   651,   652,   656,   657,
+     661,   662,   666,   667,   671,   672,   673,   674,   678,   679,
+     681,   686,   687,   692,   697,   698,   702,   703,   707,   709,
+     714,   715,   720,   721,   726,   729,   735,   736,   741,   744,
+     750,   751,   757,   758,   763,   765,   770,   771,   775,   776,
+     780,   781,   782,   783,   787,   791,   799,   800,   804,   805,
+     806,   807,   811,   812,   816,   817,   821,   822,   829,   830,
+     831,   832,   836,   837,   838,   842,   844,   849,   851,   856,
+     857,   861,   862,   863,   867,   869,   874,   875,   877,   881,
+     882,   886,   892,   893,   897,   898,   902,   904,   910,   913,
+     916,   920,   924,   925,   926,   931,   932,   936,   937,   938,
+     942,   944,   949,   950,   954,   959,   961,   965,   967,   972,
+     974,   978,   983,   984,   988,   989,   993,   994,   999,  1000,
+    1005,  1006,  1007,  1008,  1009,  1010,  1011,  1015,  1016,  1020,
+    1022,  1027,  1028,  1032,  1036,  1040,  1041,  1044,  1048,  1049,
+    1053,  1054,  1058,  1058,  1068,  1070,  1072,  1077,  1079,  1081,
+    1083,  1085,  1087,  1088,  1090,  1092,  1094,  1096,  1098,  1100,
+    1102,  1104,  1106,  1108,  1110,  1112,  1114,  1115,  1116,  1117,
+    1118,  1120,  1122,  1124,  1126,  1128,  1129,  1130,  1131,  1132,
+    1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,
+    1143,  1144,  1145,  1147,  1149,  1151,  1153,  1155,  1157,  1159,
+    1161,  1163,  1165,  1169,  1170,  1172,  1174,  1176,  1177,  1178,
+    1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,
+    1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1199,
+    1204,  1209,  1219,  1223,  1227,  1231,  1235,  1239,  1240,  1244,
+    1245,  1249,  1250,  1254,  1255,  1259,  1261,  1263,  1265,  1270,
+    1273,  1277,  1278,  1279,  1283,  1284,  1288,  1290,  1291,  1296,
+    1297,  1302,  1303,  1304,  1305,  1309,  1310,  1311,  1312,  1314,
+    1315,  1316,  1317,  1321,  1322,  1323,  1324,  1325,  1326,  1327,
+    1328,  1329,  1333,  1335,  1340,  1341,  1345,  1349,  1350,  1351,
+    1352,  1356,  1357,  1361,  1362,  1363,  1367,  1369,  1371,  1373,
+    1375,  1377,  1381,  1383,  1385,  1387,  1392,  1393,  1394,  1398,
+    1400,  1405,  1407,  1409,  1411,  1413,  1415,  1417,  1422,  1423,
+    1424,  1428,  1429,  1430,  1434,  1439,  1440,  1444,  1446,  1451,
+    1453,  1455,  1457,  1459,  1461,  1464,  1470,  1472,  1474,  1476,
+    1481,  1483,  1486,  1489,  1492,  1494,  1496,  1499,  1503,  1504,
+    1505,  1506,  1511,  1512,  1513,  1515,  1517,  1519,  1521,  1526,
+    1527,  1532
+};
+#endif
+
+#if ZENDDEBUG || YYERROR_VERBOSE || 1
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "\"end of file\"", "error", "$undefined", "\"'throw'\"",
+  "PREC_ARROW_FUNCTION", "\"'include'\"", "\"'include_once'\"",
+  "\"'require'\"", "\"'require_once'\"", "\"'or'\"", "\"'xor'\"",
+  "\"'and'\"", "\"'print'\"", "\"'yield'\"", "\"'=>'\"",
+  "\"'yield from'\"", "'='", "\"'+='\"", "\"'-='\"", "\"'*='\"",
+  "\"'/='\"", "\"'.='\"", "\"'%='\"", "\"'&='\"", "\"'|='\"", "\"'^='\"",
+  "\"'<<='\"", "\"'>>='\"", "\"'**='\"", "\"'?""?='\"", "'?'", "':'",
+  "\"'?""?'\"", "\"'||'\"", "\"'&&'\"", "'|'", "'^'", "\"amp\"", "\"'&'\"",
+  "\"'=='\"", "\"'!='\"", "\"'==='\"", "\"'!=='\"", "\"'<=>'\"", "'<'",
+  "\"'<='\"", "'>'", "\"'>='\"", "'.'", "\"'<<'\"", "\"'>>'\"", "'+'",
+  "'-'", "'*'", "'/'", "'%'", "'!'", "\"'instanceof'\"", "'~'",
+  "\"'(int)'\"", "\"'(double)'\"", "\"'(string)'\"", "\"'(array)'\"",
+  "\"'(object)'\"", "\"'(bool)'\"", "\"'(unset)'\"", "'@'", "\"'**'\"",
+  "\"'clone'\"", "T_NOELSE", "\"'elseif'\"", "\"'else'\"", "\"integer\"",
+  "\"floating-point number\"", "\"identifier\"",
+  "\"fully qualified name\"", "\"namespace-relative name\"",
+  "\"namespaced name\"", "\"variable\"", "T_INLINE_HTML",
+  "\"string content\"", "\"quoted string\"", "\"variable name\"",
+  "\"number\"", "\"'eval'\"", "\"'new'\"", "\"'exit'\"", "\"'if'\"",
+  "\"'endif'\"", "\"'echo'\"", "\"'do'\"", "\"'while'\"", "\"'endwhile'\"",
+  "\"'for'\"", "\"'endfor'\"", "\"'foreach'\"", "\"'endforeach'\"",
+  "\"'declare'\"", "\"'enddeclare'\"", "\"'as'\"", "\"'switch'\"",
+  "\"'endswitch'\"", "\"'case'\"", "\"'default'\"", "\"'match'\"",
+  "\"'break'\"", "\"'continue'\"", "\"'goto'\"", "\"'function'\"",
+  "\"'fn'\"", "\"'const'\"", "\"'return'\"", "\"'try'\"", "\"'catch'\"",
+  "\"'finally'\"", "\"'use'\"", "\"'insteadof'\"", "\"'global'\"",
+  "\"'static'\"", "\"'abstract'\"", "\"'final'\"", "\"'private'\"",
+  "\"'protected'\"", "\"'public'\"", "\"'readonly'\"", "\"'var'\"",
+  "\"'unset'\"", "\"'isset'\"", "\"'empty'\"", "\"'__halt_compiler'\"",
+  "\"'class'\"", "\"'trait'\"", "\"'interface'\"", "\"'enum'\"",
+  "\"'extends'\"", "\"'implements'\"", "\"'namespace'\"", "\"'list'\"",
+  "\"'array'\"", "\"'callable'\"", "\"'__LINE__'\"", "\"'__FILE__'\"",
+  "\"'__DIR__'\"", "\"'__CLASS__'\"", "\"'__TRAIT__'\"",
+  "\"'__METHOD__'\"", "\"'__FUNCTION__'\"", "\"'__NAMESPACE__'\"",
+  "\"'#['\"", "\"'++'\"", "\"'--'\"", "\"'->'\"", "\"'?->'\"",
+  "\"comment\"", "\"doc comment\"", "\"open tag\"", "\"'<?='\"",
+  "\"'?>'\"", "\"whitespace\"", "\"heredoc start\"", "\"heredoc end\"",
+  "\"'${'\"", "\"'{$'\"", "\"'::'\"", "\"'\\\\'\"", "\"'...'\"",
+  "\"invalid character\"", "T_ERROR", "','", "']'", "'('", "')'", "';'",
+  "'{'", "'}'", "'['", "'`'", "'\"'", "'$'", "$accept", "start",
+  "reserved_non_modifiers", "semi_reserved", "ampersand", "identifier",
+  "top_statement_list", "namespace_declaration_name", "namespace_name",
+  "legacy_namespace_name", "name", "attribute_decl", "attribute_group",
+  "attribute", "attributes", "attributed_statement", "top_statement",
+  "$@1", "$@2", "use_type", "group_use_declaration",
+  "mixed_group_use_declaration", "possible_comma",
+  "inline_use_declarations", "unprefixed_use_declarations",
+  "use_declarations", "inline_use_declaration",
+  "unprefixed_use_declaration", "use_declaration", "const_list",
+  "inner_statement_list", "inner_statement", "statement", "$@3",
+  "catch_list", "catch_name_list", "optional_variable",
+  "finally_statement", "unset_variables", "unset_variable",
+  "function_declaration_statement", "is_reference", "is_variadic",
+  "class_declaration_statement", "@4", "@5", "class_modifiers",
+  "class_modifier", "trait_declaration_statement", "@6",
+  "interface_declaration_statement", "@7", "enum_declaration_statement",
+  "@8", "enum_backing_type", "enum_case", "enum_case_expr", "extends_from",
+  "interface_extends_list", "implements_list", "foreach_variable",
+  "for_statement", "foreach_statement", "declare_statement",
+  "switch_case_list", "case_list", "case_separator", "match",
+  "match_arm_list", "non_empty_match_arm_list", "match_arm",
+  "match_arm_cond_list", "while_statement", "if_stmt_without_else",
+  "if_stmt", "alt_if_stmt_without_else", "alt_if_stmt", "parameter_list",
+  "non_empty_parameter_list", "attributed_parameter",
+  "optional_property_modifiers", "property_modifier", "parameter",
+  "optional_type_without_static", "type_expr", "type", "union_type",
+  "intersection_type", "type_expr_without_static", "type_without_static",
+  "union_type_without_static", "intersection_type_without_static",
+  "return_type", "argument_list", "non_empty_argument_list", "argument",
+  "global_var_list", "global_var", "static_var_list", "static_var",
+  "class_statement_list", "attributed_class_statement", "class_statement",
+  "class_name_list", "trait_adaptations", "trait_adaptation_list",
+  "trait_adaptation", "trait_precedence", "trait_alias",
+  "trait_method_reference", "absolute_trait_method_reference",
+  "method_body", "variable_modifiers", "method_modifiers",
+  "non_empty_member_modifiers", "member_modifier", "property_list",
+  "property", "class_const_list", "class_const_decl", "const_decl",
+  "echo_expr_list", "echo_expr", "for_exprs", "non_empty_for_exprs",
+  "anonymous_class", "@9", "new_expr", "expr", "inline_function", "fn",
+  "function", "backup_doc_comment", "backup_fn_flags", "backup_lex_pos",
+  "returns_ref", "lexical_vars", "lexical_var_list", "lexical_var",
+  "function_call", "class_name", "class_name_reference", "exit_expr",
+  "backticks_expr", "ctor_arguments", "dereferenceable_scalar", "scalar",
+  "constant", "class_constant", "optional_expr", "variable_class_name",
+  "fully_dereferenceable", "array_object_dereferenceable", "callable_expr",
+  "callable_variable", "variable", "simple_variable", "static_member",
+  "new_variable", "member_name", "property_name", "array_pair_list",
+  "possible_array_pair", "non_empty_array_pair_list", "array_pair",
+  "encaps_list", "encaps_var", "encaps_var_offset",
+  "internal_functions_in_yacc", "isset_variables", "isset_variable", YY_NULLPTR
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[NUM] -- (External) token number corresponding to the
+   (internal) symbol number NUM (which must be that of a token).  */
+static const yytype_int16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,    61,   271,   272,   273,
+     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
+      63,    58,   284,   285,   286,   124,    94,   287,   288,   289,
+     290,   291,   292,   293,    60,   294,    62,   295,    46,   296,
+     297,    43,    45,    42,    47,    37,    33,   298,   126,   299,
+     300,   301,   302,   303,   304,   305,    64,   306,   307,   308,
+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
+     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
+     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
+     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
+     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
+     399,   400,   401,   402,   403,   404,   405,   406,    44,    93,
+      40,    41,    59,   123,   125,    91,    96,    34,    36
+};
+# endif
+
+#define YYPACT_NINF (-904)
+
+#define yypact_value_is_default(Yyn) \
+  ((Yyn) == YYPACT_NINF)
+
+#define YYTABLE_NINF (-553)
+
+#define yytable_value_is_error(Yyn) \
+  ((Yyn) == YYTABLE_NINF)
+
+  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+     STATE-NUM.  */
+static const yytype_int16 yypact[] =
+{
+    -904,    52,  1711,  -904,  6007,  6007,  6007,  6007,  6007,  6007,
+    6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,
+    6007,  6007,  6007,  6007,  6007,  -904,  -904,    67,  -904,  -904,
+    -904,  -904,  -904,  -904,   -57,   790,   -47,    47,  6007,  4675,
+      94,   110,   141,   151,   165,   190,  6007,  6007,    86,  -904,
+    -904,   116,  6007,   156,   268,   -24,   159,  -904,  -904,   226,
+     265,   288,   316,  -904,  -904,  -904,  -904,  7467,   324,   348,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,   231,   683,
+     683,   201,  6007,  -904,  -904,  4823,    60,   109,   -36,   125,
+    -904,   858,  -904,  -904,  -904,  -904,  -904,   343,  -904,  -904,
+    -904,  -904,  -904,   398,  -904,   287,  -904,  -904,  6793,  -904,
+      49,    49,  -904,   207,   309,  -904,   173,   363,   370,   377,
+     346,   365,   367,   147,  -904,  -904,  -904,  -904,   185,   223,
+    8115,    49,  8115,  8115,  8115,  8115,  3784,  8205,  3784,   322,
+     322,    48,   322,   322,   322,   322,   322,   322,   322,   322,
+     322,  -904,  -904,  6007,  -904,  -904,  6007,  -904,   -27,  -904,
+     387,   365,  -904,   401,  6007,  -904,  6007,   -61,  -904,  8115,
+     475,  6007,  6007,  6007,   116,  6007,  6007,  8115,   400,   403,
+     405,   562,    84,  -904,   415,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,    42,   529,   417,   172,  -904,   200,  -904,  -904,
+     579,   227,  -904,  -904,   683,  6007,  6007,   426,   526,   528,
+     535,   544,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,   449,   456,  4823,  4823,  -904,   455,
+     365,  6007,  4823,   461,  -904,  -904,   419,   419,   281,   -34,
+    -904,  5267,   683,   222,  -904,  1254,  1859,  -904,  -904,   464,
+    6007,   683,  8017,   470,  -904,   473,  -904,    17,   472,   166,
+      17,    32,  6007,  -904,  1091,  -904,   185,  -904,  -904,  -904,
+    -904,  -904,   480,  4675,   483,   623,   484,  6007,  6007,  6007,
+    5415,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,
+    6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,
+    6007,  6007,  6007,  6007,  6007,   199,  6007,  -904,  -904,  -904,
+     587,  3790,  3790,   -21,   -21,  6007,  6007,  -904,  4971,  6007,
+    6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,  6007,
+    6007,  6007,  -904,  -904,  -904,  6007,  6842,   365,  6891,  -904,
+     -24,  -904,  -904,   -21,   -21,   -24,  6007,  6007,   492,  6940,
+    6007,  -904,   494,  6989,   493,   498,  8115,  7918,    68,  7038,
+    7087,  -904,  -904,  -904,  6007,   116,  -904,  -904,  2007,   596,
+     505,    44,   516,   317,  -904,   529,  -904,   -24,  -904,  6007,
+     614,  -904,   525,  -904,   148,  8115,   530,  -904,  7136,   524,
+     563,  -904,   566,   671,  -904,   532,  -904,   536,   537,   231,
+     534,  -904,  7185,   541,   632,   637,   307,  -904,  -904,   205,
+    6450,   539,  -904,  -904,  -904,   329,   546,  -904,   858,  -904,
+    -904,  -904,  4823,  8115,   439,  5119,   698,  4823,  -904,  -904,
+    6499,  6007,  6007,  6007,  6007,  6007,  6007,  5563,  6007,    18,
+     -57,   790,   -14,   190,   686,   688,   146,   265,   288,   324,
+     348,   689,   690,   692,   694,   695,   696,   699,   701,  5711,
+    -904,   703,   567,  -904,  8115,  -904,   655,  6007,  -904,  6007,
+    -904,  -904,  8163,  7605,  3784,  6007,  8066,  6154,  6303,  7447,
+    7735,  8236,  5167,  5167,  5315,  5315,  5315,  5315,  5315,  1550,
+    1550,  1550,  1550,  1069,  1191,  1191,   531,   531,    48,    48,
+      48,  -904,   322,   569,  -904,   570,  6007,   572,   575,   365,
+     572,   575,   365,  -904,  6007,  -904,   365,   365,  6548,   577,
+     683,  3784,  3784,  3784,  3784,  3784,  3784,  3784,  3784,  3784,
+    3784,  3784,  3784,  3784,  3784,  3784,  -904,   563,  -904,  -904,
+    -904,  -904,  -904,  6597,   578,  -904,  3935,  -904,  6007,  4083,
+    6007,  6007,  7868,  -904,   -15,   581,  8115,  -904,  -904,  -904,
+     290,   582,  -904,  -904,   649,  -904,  -904,  8115,  -904,   683,
+     580,  6007,   591,  -904,  -904,   231,   630,   593,   231,  -904,
+      74,   630,  -904,  1415,   751,  -904,  -904,  -904,   598,  -904,
+    -904,  -904,   687,  -904,  -904,  -904,   602,  -904,  6007,  -904,
+    -904,   601,  -904,   604,   603,   683,  8115,  6007,  -904,  -904,
+    -904,  8115,  6007,  1267,   605,   563,  7234,  7283,  2155,  6154,
+    6007,   -46,   610,   -46,  6646,  -904,  -904,  6695,  -904,  -904,
+    -904,  -904,   419,   630,  -904,  -904,  -904,  -904,  7332,  -904,
+    -904,  -904,   609,  8115,   612,  4823,   683,    20,    24,  4231,
+     615,   617,  -904,  5859,  -904,   409,   691,   450,   626,  -904,
+    -904,   450,  -904,   619,  -904,  -904,  -904,   231,  -904,  -904,
+     631,  -904,   627,   390,  -904,  -904,  -904,  -904,  -904,    87,
+     769,   768,  -904,  -904,  1563,  -904,  6007,  -904,  -904,  7381,
+     634,   751,  4823,   478,  3784,  8115,  6007,  -904,  -904,   630,
+    4675,   776,   639,  6154,   661,   641,   646,  -904,   215,  -904,
+     -46,   647,  -904,  -904,  -904,  3635,   650,  2303,  6007,  4823,
+     662,    25,  7868,  4379,  -904,  -904,  -904,  -904,   374,  -904,
+     113,   651,   658,   665,  -904,   667,  8115,   666,   668,  -904,
+     764,  -904,   290,   670,   672,  -904,  -904,   631,   673,   916,
+     231,  -904,  -904,   390,   390,   390,   390,   675,  -904,  3784,
+     677,  -904,   674,  -904,  -904,  -904,  -904,  -904,   808,    63,
+    -904,     8,  -904,  -904,  -904,  -904,  -904,   814,  -904,   266,
+     819,   818,   700,   742,   702,  -904,   697,   706,   708,    26,
+     710,  -904,  -904,  -904,  2451,   557,   712,  6007,    16,   130,
+    -904,  -904,   868,  -904,  5859,  -904,  6007,   871,   231,  -904,
+    -904,  -904,  -904,   450,   713,  -904,  -904,   231,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  1010,  -904,  -904,
+    -904,   174,   402,   561,  -904,  -904,  1337,  -904,  -904,  -904,
+    -904,  -904,  -904,   751,   716,  3635,    74,   872,  -904,  -904,
+    -904,   707,     8,     8,     8,     8,   808,   720,   808,  -904,
+    -904,  4527,  -904,  4379,  2599,   719,   721,  -904,  6744,  -904,
+    -904,  -904,  -904,  6007,  -904,  8115,  6007,    21,  -904,  2747,
+    -904,  -904,  3857,  7612,   219,  -904,   820,  7612,    49,  -904,
+    -904,  4744,  -904,  -904,  -904,  -904,   821,  -904,  -904,  -904,
+    -904,  -904,   245,  -904,  4801,  -904,  -904,  -904,  -904,   728,
+    -904,  -904,  -904,  3635,  8115,  8115,   231,  -904,   731,  -904,
+    -904,   876,  -904,  6162,  -904,   887,   323,  -904,   890,   345,
+    -904,  7612,  -904,  4892,  -904,  -904,   734,  -904,   832,   743,
+    -904,   739,  -904,  2895,  -904,  3635,  -904,   744,  6007,   746,
+     752,  -904,  -904,  6307,  -904,   747,   750,   817,   807,   762,
+    6007,  -904,   820,  -904,  6007,  7612,  -904,  -904,  -904,  6007,
+     910,  -904,  -904,   245,   756,  -904,   757,  -904,  8115,  -904,
+    -904,  -904,  -904,  -904,  7757,   231,  7612,  8115,  -904,  8115,
+    -904,   761,  8115,  6007,  3043,  -904,  -904,  3191,  -904,  3339,
+    -904,  -904,  7612,   631,  -904,  -904,  -904,   -46,  -904,  8115,
+    -904,  -904,  -904,  -904,   766,  -904,  -904,   808,  -904,   372,
+    -904,  -904,  -904,  3487,  -904,  -904
+};
+
+  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+     Performed when YYTABLE does not specify something else to do.  Zero
+     means the default is an error.  */
+static const yytype_int16 yydefact[] =
+{
+      86,     0,     2,     1,     0,     0,     0,     0,     0,     0,
+     440,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   485,   486,    93,    95,    96,
+      94,   526,   162,   483,     0,     0,   474,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   504,   504,     0,   453,
+     452,     0,   504,     0,     0,     0,   469,   195,   196,     0,
+       0,     0,     0,   191,   197,   199,   201,   116,     0,     0,
+     494,   495,   496,   501,   497,   498,   499,   500,     0,     0,
+       0,     0,     0,   169,   144,   545,   476,     0,     0,   493,
+     102,     0,   110,    85,   109,   104,   105,     0,   193,   106,
+     107,   108,   449,   246,   150,     0,   151,   423,     0,   445,
+     457,   457,   521,     0,   490,   437,   491,   492,     0,   511,
+       0,     0,   522,   367,   516,   523,   427,    93,   469,     0,
+     444,   457,   574,   575,   577,   578,   439,   441,   443,   408,
+     409,   410,   411,   428,   429,   430,   431,   432,   433,   434,
+     436,   372,   172,     0,   469,   362,     0,   470,     0,   365,
+     471,   479,   531,   472,   504,   435,     0,     0,   356,   357,
+       0,     0,   358,     0,     0,     0,     0,   505,     0,     0,
+       0,     0,     0,   142,     0,   144,    89,    92,    90,   123,
+     124,    91,   139,     0,     0,     0,   134,     0,   300,   301,
+     304,     0,   303,   447,     0,     0,     0,     0,     0,     0,
+       0,     0,    33,     3,     4,     6,     7,     8,     9,    10,
+      46,    47,    11,    13,    16,    17,    83,    88,     5,    12,
+      14,    15,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    49,    50,    51,    52,    71,    53,
+      41,    42,    43,    70,    44,    45,    30,    31,    32,    34,
+      35,    36,    74,    75,    76,    77,    78,    79,    80,    37,
+      38,    39,    40,    61,    59,    60,    72,    56,    57,    58,
+      48,    54,    55,    66,    67,    68,    62,    63,    65,    64,
+      69,    73,    84,    87,   114,     0,   545,   545,    99,   127,
+      97,     0,   545,   509,   512,   510,   387,   389,   560,     0,
+     488,     0,     0,     0,   558,     0,     0,    82,    81,     0,
+       0,     0,   550,     0,   548,   544,   546,   477,     0,   478,
+       0,     0,     0,   528,     0,   465,     0,   103,   111,   446,
+     189,   194,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   163,   458,   454,
+     454,     0,     0,     0,     0,     0,   504,   468,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   386,   388,   454,     0,     0,   479,     0,   366,
+       0,   480,   364,     0,     0,     0,     0,   504,     0,     0,
+       0,   161,     0,     0,     0,   359,   361,     0,     0,     0,
+       0,   156,   157,   171,     0,     0,   122,   158,     0,     0,
+       0,   139,     0,     0,   118,     0,   120,     0,   159,     0,
+       0,   160,   127,   181,   507,   581,   127,   579,     0,     0,
+     208,   454,   210,   203,   113,     0,    86,     0,     0,   128,
+       0,    98,     0,     0,     0,     0,     0,   487,   559,     0,
+       0,   507,   557,   489,   556,   422,     0,   149,     0,   146,
+     143,   145,   545,   553,   507,     0,   482,   545,   438,   484,
+       0,    33,     3,     4,     6,     7,    46,   440,    13,    93,
+       5,    12,   474,    71,   453,   452,    74,    39,    40,    48,
+      54,   494,   495,   496,   501,   497,   498,   499,   500,     0,
+     291,     0,   127,   294,   296,   448,     0,     0,   247,     0,
+     144,   250,   392,   394,   393,     0,     0,   426,   390,   391,
+     395,   398,   396,   397,   414,   415,   412,   413,   420,   416,
+     417,   418,   419,   399,   406,   407,   400,   401,   402,   404,
+     405,   421,   403,     0,   454,     0,     0,   502,   529,     0,
+     503,   530,     0,   541,     0,   543,   524,   525,     0,     0,
+       0,   370,   373,   374,   375,   377,   378,   379,   380,   381,
+     382,   383,   384,   376,   385,   442,   576,   208,   473,   536,
+     534,   535,   537,     0,     0,   475,     0,   355,     0,     0,
+     358,     0,     0,   167,     0,     0,   454,   141,   173,   140,
+       0,     0,   119,   121,   139,   133,   299,   305,   302,   128,
+       0,   128,     0,   573,   112,     0,   212,     0,     0,   454,
+       0,   212,    86,     0,     0,   481,   100,   101,   508,   482,
+     562,   563,     0,   568,   571,   569,     0,   565,     0,   564,
+     567,     0,   147,     0,     0,     0,   549,     0,   547,   527,
+     293,   298,     0,   128,     0,   208,     0,     0,     0,   425,
+       0,   258,     0,   258,     0,   466,   467,     0,   519,   520,
+     518,   517,   371,   212,   533,   532,   144,   244,     0,   144,
+     242,   152,     0,   360,     0,   545,     0,     0,   507,     0,
+     228,   228,   155,   234,   354,   179,   137,     0,   127,   130,
+     135,     0,   182,     0,   580,   572,   209,     0,   454,   307,
+     211,   315,     0,     0,   273,   282,   283,   284,   204,   268,
+     270,   271,   272,   454,     0,   117,     0,   570,   561,     0,
+       0,   555,   545,   507,   369,   297,     0,   295,   292,   212,
+       0,     0,     0,   424,   258,     0,   127,   254,   266,   257,
+     258,     0,   539,   542,   454,   248,     0,     0,   358,   545,
+       0,   507,     0,     0,   144,   222,   168,   228,     0,   228,
+       0,   127,     0,   127,   236,   127,   240,     0,     0,   170,
+       0,   136,   128,     0,   127,   132,   164,   213,     0,   336,
+       0,   307,   269,     0,     0,     0,     0,     0,   115,   368,
+       0,   148,     0,   454,   245,   144,   251,   256,   289,   258,
+     252,     0,   262,   261,   260,   263,   259,   185,   267,   278,
+     280,   281,     0,   459,     0,   153,     0,     0,     0,   482,
+       0,   144,   220,   165,     0,     0,     0,     0,     0,     0,
+     224,   128,     0,   233,   128,   235,   128,     0,     0,   144,
+     138,   129,   126,   128,     0,   307,   454,     0,   343,   344,
+     345,   342,   341,   340,   346,   335,   198,   336,   311,   312,
+     306,   266,     0,   334,   338,   316,   336,   274,   276,   275,
+     277,   307,   566,   554,     0,   249,     0,     0,   255,   279,
+     186,   187,     0,     0,     0,     0,   289,     0,   289,   307,
+     243,     0,   216,     0,     0,     0,     0,   226,     0,   231,
+     232,   144,   225,     0,   237,   241,     0,   177,   175,     0,
+     131,   125,   336,     0,     0,   313,     0,     0,   457,   339,
+     200,   336,   307,   290,   455,   188,     0,   285,   287,   286,
+     288,   455,     0,   455,   336,   144,   218,   154,   166,     0,
+     223,   227,   144,   230,   239,   238,     0,   178,     0,   180,
+     192,   206,   317,     0,   314,   454,     0,   348,     0,     0,
+     352,     0,   202,   336,   456,   454,     0,   463,     0,   127,
+     462,     0,   363,     0,   221,   229,   176,     0,     0,     0,
+      74,   318,   329,     0,   320,     0,     0,     0,   330,     0,
+       0,   349,     0,   308,     0,     0,   309,   454,   190,     0,
+     264,   144,   464,   128,     0,   144,     0,   144,   207,   205,
+     319,   321,   322,   323,     0,     0,     0,   454,   347,   454,
+     351,     0,   455,     0,     0,   461,   460,     0,   219,     0,
+     325,   326,   328,   324,   331,   350,   353,   258,   451,   265,
+     455,   455,   174,   327,     0,   184,   450,   289,   455,     0,
+     332,   144,   455,     0,   310,   333
+};
+
+  /* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+    -904,  -904,  -119,  -904,  -102,   -48,  -453,  -904,   -11,  -179,
+     -28,   477,  -904,   -50,    -2,     2,  -904,  -904,  -904,   885,
+    -904,  -904,  -271,  -904,  -904,   758,   132,  -703,   504,   778,
+    -167,  -904,     9,  -904,  -904,  -904,  -904,  -904,  -904,   315,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,   859,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -904,  -904,  -556,  -904,  -571,
+     163,  -904,    28,  -904,  -904,  -666,    19,  -904,  -904,  -904,
+      88,  -904,  -904,  -904,  -904,  -904,  -904,  -683,  -904,   124,
+    -904,  -904,   195,    69,    55,  -623,  -904,  -904,  -904,  -682,
+    -904,  -904,  -903,   -86,  -904,   291,  -904,   517,  -904,   523,
+    -776,    82,  -904,  -725,  -904,  -904,   -40,  -904,  -904,  -904,
+    -904,  -904,  -904,  -904,  -904,  -877,  -904,   -52,  -904,   -51,
+     550,  -904,   573,  -605,  -904,   828,  -904,  -904,    54,   -10,
+    -904,    -1,    50,  -857,  -904,  -109,  -904,  -904,   -45,  -904,
+      56,   621,  -904,  -904,   585,   -74,  -904,   -59,   -49,   -20,
+    -904,  -904,  -904,  -904,  -904,   -43,   230,  -904,  -904,   620,
+    -156,  -208,   497,  -904,  -904,   482,   306,  -904,  -904,  -904,
+     358
+};
+
+  /* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     1,   291,   292,   321,   531,     2,   294,   726,   192,
+      89,   298,   299,    90,   129,   489,    93,   465,   295,   727,
+     442,   194,   470,   728,   814,   195,   729,   730,   196,   182,
+     316,   490,   491,   719,   725,   947,   988,   809,   452,   453,
+      95,   921,   966,    96,   536,   208,    97,    98,    99,   209,
+     100,   210,   101,   211,   651,   898,  1019,   646,   649,   738,
+     717,   977,   863,   796,   722,   798,   941,   102,   802,   803,
+     804,   805,   711,   103,   104,   105,   106,   775,   776,   777,
+     778,   846,   779,   847,   748,   749,   750,   751,   848,   752,
+     850,   851,   917,   411,   532,   533,   197,   198,   201,   202,
+     819,   899,   900,   740,   994,  1023,  1024,  1025,  1026,  1027,
+    1028,  1092,   901,   902,   903,   904,   996,   997,   999,  1000,
+     183,   167,   168,   424,   425,   159,   407,   107,   108,   109,
+     110,   131,   575,  1004,  1039,   379,   928,  1009,  1010,   112,
+     113,   161,   165,   328,   412,   114,   115,   116,   117,   178,
+     118,   119,   120,   121,   122,   123,   124,   125,   163,   579,
+     586,   323,   324,   325,   326,   313,   314,   666,   126,   456,
+     457
+};
+
+  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+     positive, shift that token.  If negative, reduce the rule whose
+     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+static const yytype_int16 yytable[] =
+{
+      91,   111,   380,   335,    92,   303,   303,   157,   378,   378,
+     781,    94,   817,   653,   441,   712,   720,   -14,   438,   293,
+     304,   304,   404,   971,   811,   973,   959,   179,   815,   378,
+     305,   305,   184,   158,   792,   387,   306,   307,  -214,  -215,
+    -217,   337,    31,   191,   308,   906,   203,   939,   170,   -83,
+     157,   703,     3,   583,    31,   800,   986,    31,   130,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,   151,   337,
+     753,   339,   127,    28,    29,    30,   317,   318,   467,   468,
+     111,   160,   169,   338,   473,   308,   849,   852,   152,   987,
+     177,   177,    78,   155,   743,   375,   177,   420,   337,   952,
+     308,   421,   482,   153,  1006,   376,  1011,   -83,   203,   339,
+     822,    78,   823,   164,   824,  -253,   477,   311,   312,   769,
+     303,   865,   784,   869,   300,   961,   315,   332,   308,   322,
+     327,   439,    88,   439,   418,   304,   745,   746,   127,    28,
+      29,    30,   584,   974,    88,   305,   164,    88,   721,   919,
+     180,   454,   954,   388,   389,   390,   391,   392,   393,   394,
+     395,   396,   397,   398,   399,   400,   401,  1072,   311,   312,
+     950,   640,   191,   857,  1088,   642,  1003,   308,   940,   330,
+     181,   793,   744,   311,   312,  -214,  -215,  -217,   833,   754,
+     907,   908,   909,   910,   841,  1078,   440,   406,   631,   499,
+     408,    78,   745,   746,   471,   867,   868,   166,   177,   849,
+     419,   311,   312,  1085,  1086,   423,   426,   427,   587,   429,
+     430,  1089,   867,   868,  -128,  1094,   435,   200,   303,   623,
+     967,   968,   969,   970,   308,   841,   482,   303,   127,    28,
+      29,    30,   435,   304,    49,    50,   436,   610,   611,   455,
+     458,   684,   304,   305,   171,   162,   634,    49,    50,   481,
+     311,   312,   305,   127,    28,    29,    30,    31,   494,   308,
+     172,   309,   317,   318,   673,   199,   590,   870,  -470,   127,
+      28,    29,    30,    49,    50,   334,   402,   403,  -507,  -507,
+     308,   922,   482,   923,   942,   127,    28,    29,    30,  -469,
+    -507,   173,   745,   746,   488,   111,  -183,   154,   333,  -183,
+    -507,   174,  -507,  1007,  -512,  -512,   535,   311,   312,   185,
+    1073,    49,    50,   577,   580,   175,   842,   843,   844,   845,
+     445,   336,   186,   187,   446,   188,  -512,   157,  -512,   154,
+     322,   322,   538,   745,   746,   472,   322,   344,   345,   662,
+     176,   310,   311,   312,   186,   480,   589,   188,   447,   156,
+     381,    78,   448,   688,   493,   346,   189,    88,   190,   667,
+     668,   663,   483,   311,   312,   664,   500,   820,   534,   376,
+     665,   992,   993,   675,  1084,   450,   204,   614,   189,   451,
+     190,   542,   543,   544,   546,   547,   548,   549,   550,   551,
+     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
+     562,   563,   564,   565,   566,   567,   568,   569,   570,   573,
+     572,   160,   474,   475,   191,   205,   488,   111,   337,   588,
+     177,   157,   591,   592,   593,   594,   595,   596,   597,   598,
+     599,   600,   601,   602,   603,   604,   476,   813,   206,   605,
+    -509,  -509,    57,    58,   127,    28,    29,    30,   342,   343,
+     613,   177,  -509,   340,   169,   866,   867,   868,   339,  -515,
+    -508,  -508,  -509,   157,  -509,   445,   207,   111,   626,   633,
+     672,  1032,  -508,   695,   296,  1033,   696,   383,   384,  -514,
+     698,   699,  -508,   637,  -508,   840,   203,   790,   744,   158,
+      49,   647,   957,  1035,  -510,  -510,   303,  1036,   297,   385,
+     716,   386,   807,   808,   186,   300,  -510,   188,   745,   746,
+     872,   304,   875,   382,   877,   334,  -510,  -513,  -510,   785,
+    -506,   305,   787,   884,  1090,  1091,   322,   702,   303,   676,
+     410,   322,   413,   414,   832,   130,   132,   133,   134,   135,
+     136,   137,   151,   304,   415,   303,   422,   160,   329,   331,
+    -507,  -507,   431,   305,   416,   432,   417,   433,   434,   718,
+     304,   858,  -507,   681,   372,   373,   374,   437,   375,   444,
+     305,   686,  -507,   687,  -507,   449,   454,   459,   376,   689,
+     460,   303,   461,   186,   187,   162,   188,  -552,  -552,   462,
+    -552,   578,   581,   585,   585,   478,   304,   157,   463,   484,
+     157,   464,   747,   469,   692,   707,   305,   864,   710,   466,
+     694,  -515,   763,   478,   492,   484,   478,   484,   697,   496,
+     609,   497,   303,   585,   585,   612,  -551,  -551,   498,  -551,
+     537,    91,   111,   539,   540,    92,   541,   304,   936,   867,
+     868,   574,    94,   615,   618,   620,   621,   305,   915,  -337,
+     629,  -337,   708,   791,   426,   713,   724,   199,   630,   888,
+     889,   890,   891,   892,   893,   894,   488,   111,   632,   774,
+     716,   774,   200,   639,   934,   455,   644,   645,   641,   742,
+     648,   736,   650,   657,   741,   652,   660,   654,   655,   157,
+     659,   661,   949,   670,   677,   747,   671,   -43,   303,   -70,
+     -66,   -67,   759,   -68,   337,   -62,   -63,   -65,   795,   685,
+     -64,   764,   -69,   304,   682,   683,   765,   534,  1044,   691,
+     693,   162,  -538,   305,   773,  -540,   701,   705,   439,   718,
+     747,   733,    91,   111,   723,   731,    92,   127,    28,    29,
+      30,    31,   735,    94,    33,   737,   739,   756,  -514,   322,
+     757,   758,   760,   762,   983,   761,   768,   806,   774,   834,
+     780,   788,   789,   488,   111,   488,   111,   797,   818,   799,
+     810,   816,   157,   741,   812,   747,   747,   747,   747,   820,
+     821,   154,   862,   827,   825,   826,   831,   835,  1013,    78,
+     829,   836,   838,   747,   839,  1015,   322,   897,   853,   871,
+     681,    69,   855,    70,    71,    72,    73,    74,    75,    76,
+      77,   859,   873,   874,   854,   876,   878,   774,   880,   916,
+     883,   879,   426,   322,   882,   913,   885,   337,   911,  1001,
+     157,   912,   920,   301,   924,   925,   378,   927,   302,   157,
+      87,    88,   488,   111,   127,    28,    29,    30,    31,   930,
+    1008,   926,   965,   747,  1064,   929,   905,   931,  1067,   932,
+    1069,   933,   943,   914,   937,   946,   964,   951,   747,   962,
+     972,   980,  1018,   981,   747,   747,   747,   747,   995,  1005,
+    1014,   958,  1017,  1030,   897,   991,  1034,  1041,   154,   998,
+    1042,  1043,  1045,   488,   111,  -469,  1054,  1047,  1049,  1052,
+     155,   938,  1053,  1055,  1093,  1056,  1063,  1066,   806,  1068,
+     945,  1077,   488,   111,   948,  1071,   953,  1087,    78,   193,
+     976,  1008,   862,   741,   881,  1022,   656,   488,   111,   635,
+     897,   443,   428,  1037,   732,   860,   341,   982,   157,   897,
+     156,   978,   944,   918,   636,   157,    49,    50,    88,   837,
+     956,   963,   897,   638,   767,  1022,   336,    57,    58,   955,
+    1058,   488,   111,  1051,  1060,   627,   409,   998,    63,    64,
+      65,    66,   607,   617,   678,   157,   571,   984,  1065,   734,
+     985,   897,   582,     0,     0,     0,    78,     0,  1074,     0,
+       0,   488,   111,   488,   111,     0,     0,     0,   886,     0,
+       0,     0,     0,     0,  1083,     0,     0,   157,     0,     0,
+       0,   887,     0,     0,   888,   889,   890,   891,   892,   893,
+     894,   895,  1016,     0,     0,  1031,     0,     0,     0,  1029,
+       0,     0,     0,     0,     0,  1040,     0,     0,     0,     0,
+       0,     0,   488,   111,    78,   488,   111,   488,   111,     0,
+       0,     0,  1048,     0,     0,   774,     0,     0,     0,  1029,
+       0,     0,     0,     0,  1057,     0,     0,  1061,  1059,     0,
+     896,   488,   111,  1062,   501,     0,   502,   503,   504,   505,
+     217,   218,   219,   506,   507,     0,    11,  1075,     0,  1076,
+       0,   741,   886,     0,     0,     0,     0,  1079,   368,   369,
+     370,   371,   372,   373,   374,     0,   375,     0,   888,   889,
+     890,   891,   892,   893,   894,   895,   376,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,   222,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    78,   508,
+       0,   224,   225,    25,    26,   509,    28,    29,    30,    31,
+       0,     0,    33,     0,     0,   510,   511,   512,   231,   232,
+     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
+     243,   244,   245,   246,   247,   513,   249,   250,   251,   514,
+     515,   254,   255,   256,   257,   258,   259,   260,   261,   516,
+     263,   264,   265,   266,   267,   268,   269,   270,   517,   518,
+       0,   273,   274,   275,   276,   277,   278,   279,   519,   520,
+     282,   521,   522,   523,   524,   525,   526,   527,   528,    78,
+      79,    80,   370,   371,   372,   373,   374,     0,   375,     0,
+      81,     0,     0,     0,     0,     0,   529,     0,   376,     0,
+       0,    82,   530,   347,   348,   349,    85,    86,    87,    88,
+     501,     0,   502,   503,   504,   505,   217,   218,   219,   506,
+     507,     0,    11,     0,   350,     0,   351,   352,   353,   354,
+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+       0,   375,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,   376,     0,    14,   222,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,   508,     0,   224,   225,    25,
+      26,   509,    28,    29,    30,    31,     0,     0,    33,     0,
+       0,   510,   511,   512,   231,   232,   233,   234,   235,   236,
+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
+     247,   513,   249,   250,   251,   514,   515,   254,   255,   256,
+     257,   258,   259,   260,   261,   516,   263,   264,   265,   266,
+     267,   268,   269,   270,   517,   518,     0,   273,   274,   275,
+     276,   277,   278,   279,   519,   520,   282,   521,   522,   523,
+     524,   525,   526,   527,   528,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,   485,    81,     9,    10,     0,
+      11,     0,   766,     0,     0,     0,     0,    82,     0,   886,
+       0,     0,    85,    86,    87,    88,     0,     0,     0,     0,
+       0,     0,   887,     0,     0,   888,   889,   890,   891,   892,
+     893,   894,   895,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,    78,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,     0,    38,    39,    40,     0,    41,     0,
+      42,   960,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,     0,     0,
+      54,     0,    55,    56,    57,    58,     0,     0,     0,     0,
+       0,    59,    60,    61,    62,    63,    64,    65,    66,     0,
+       0,    67,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,     0,    83,    84,   755,
+      85,    86,    87,    88,  -553,  -553,  -553,  -553,   367,   368,
+     369,   370,   371,   372,   373,   374,     0,   375,     0,     0,
+       0,     0,     0,     0,    12,    13,     0,   376,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,     0,     0,     0,    25,    26,    27,    28,    29,
+      30,    31,    32,     0,    33,     0,     0,    34,    35,    36,
+      37,     0,    38,    39,    40,     0,    41,     0,    42,     0,
+      43,     0,     0,    44,     0,     0,     0,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,     0,     0,    54,     0,
+      55,    56,    57,    58,     0,     0,     0,     0,     0,    59,
+      60,    61,    62,    63,    64,    65,    66,     0,     0,    67,
+      68,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,     0,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,     0,     0,
+       0,     0,     0,    82,     0,    83,    84,   828,    85,    86,
+      87,    88,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+       0,     0,     0,    25,    26,    27,    28,    29,    30,    31,
+      32,     0,    33,     0,     0,    34,    35,    36,    37,     0,
+      38,    39,    40,     0,    41,     0,    42,     0,    43,     0,
+       0,    44,     0,     0,     0,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,     0,     0,    54,     0,    55,    56,
+      57,    58,     0,     0,     0,     0,     0,    59,    60,    61,
+      62,    63,    64,    65,    66,     0,     0,    67,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,     0,    83,    84,     0,    85,    86,    87,    88,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,    27,    28,    29,    30,    31,    32,     0,
+      33,     0,     0,    34,    35,    36,    37,     0,    38,    39,
+      40,     0,    41,     0,    42,     0,    43,     0,     0,    44,
+       0,     0,     0,    45,    46,    47,    48,    49,    50,     0,
+      52,    53,     0,     0,     0,     0,    55,    56,    57,    58,
+       0,     0,     0,     0,     0,    59,    60,    61,   486,    63,
+      64,    65,    66,     0,     0,     0,    68,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,    83,    84,   487,    85,    86,    87,    88,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,    27,    28,    29,    30,    31,    32,     0,    33,     0,
+       0,    34,    35,    36,    37,     0,    38,    39,    40,     0,
+      41,     0,    42,     0,    43,     0,     0,    44,     0,     0,
+       0,    45,    46,    47,    48,    49,    50,     0,    52,    53,
+       0,     0,     0,     0,    55,    56,    57,    58,     0,     0,
+       0,     0,     0,    59,    60,    61,   486,    63,    64,    65,
+      66,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,     0,    81,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,    82,     0,    83,
+      84,   628,    85,    86,    87,    88,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,     0,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,   772,    38,    39,    40,     0,    41,     0,
+      42,     0,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,     0,    52,    53,     0,     0,
+       0,     0,    55,    56,    57,    58,     0,     0,     0,     0,
+       0,    59,    60,    61,   486,    63,    64,    65,    66,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,     0,    83,    84,     0,
+      85,    86,    87,    88,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    12,    13,     0,     0,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,     0,     0,     0,    25,    26,    27,    28,    29,
+      30,    31,    32,     0,    33,     0,     0,    34,    35,    36,
+      37,     0,    38,    39,    40,   856,    41,     0,    42,     0,
+      43,     0,     0,    44,     0,     0,     0,    45,    46,    47,
+      48,    49,    50,     0,    52,    53,     0,     0,     0,     0,
+      55,    56,    57,    58,     0,     0,     0,     0,     0,    59,
+      60,    61,   486,    63,    64,    65,    66,     0,     0,     0,
+      68,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,     0,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,     0,     0,
+       0,     0,     0,    82,     0,    83,    84,     0,    85,    86,
+      87,    88,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+       0,     0,     0,    25,    26,    27,    28,    29,    30,    31,
+      32,     0,    33,     0,     0,    34,    35,    36,    37,     0,
+      38,    39,    40,     0,    41,     0,    42,     0,    43,   935,
+       0,    44,     0,     0,     0,    45,    46,    47,    48,    49,
+      50,     0,    52,    53,     0,     0,     0,     0,    55,    56,
+      57,    58,     0,     0,     0,     0,     0,    59,    60,    61,
+     486,    63,    64,    65,    66,     0,     0,     0,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,     0,    83,    84,     0,    85,    86,    87,    88,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,    27,    28,    29,    30,    31,    32,     0,
+      33,     0,     0,    34,    35,    36,    37,     0,    38,    39,
+      40,     0,    41,     0,    42,   979,    43,     0,     0,    44,
+       0,     0,     0,    45,    46,    47,    48,    49,    50,     0,
+      52,    53,     0,     0,     0,     0,    55,    56,    57,    58,
+       0,     0,     0,     0,     0,    59,    60,    61,   486,    63,
+      64,    65,    66,     0,     0,     0,    68,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,    83,    84,     0,    85,    86,    87,    88,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,    27,    28,    29,    30,    31,    32,     0,    33,     0,
+       0,    34,    35,    36,    37,     0,    38,    39,    40,     0,
+      41,     0,    42,     0,    43,     0,     0,    44,     0,     0,
+       0,    45,    46,    47,    48,    49,    50,     0,    52,    53,
+       0,     0,     0,     0,    55,    56,    57,    58,     0,     0,
+       0,     0,     0,    59,    60,    61,   486,    63,    64,    65,
+      66,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,     0,    81,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,    82,     0,    83,
+      84,   989,    85,    86,    87,    88,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,     0,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,     0,    38,    39,    40,     0,    41,  1046,
+      42,     0,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,     0,    52,    53,     0,     0,
+       0,     0,    55,    56,    57,    58,     0,     0,     0,     0,
+       0,    59,    60,    61,   486,    63,    64,    65,    66,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,     0,    83,    84,     0,
+      85,    86,    87,    88,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    12,    13,     0,     0,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,     0,     0,     0,    25,    26,    27,    28,    29,
+      30,    31,    32,     0,    33,     0,     0,    34,    35,    36,
+      37,     0,    38,    39,    40,     0,    41,     0,    42,     0,
+      43,     0,     0,    44,     0,     0,     0,    45,    46,    47,
+      48,    49,    50,     0,    52,    53,     0,     0,     0,     0,
+      55,    56,    57,    58,     0,     0,     0,     0,     0,    59,
+      60,    61,   486,    63,    64,    65,    66,     0,     0,     0,
+      68,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,     0,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,     0,     0,
+       0,     0,     0,    82,     0,    83,    84,  1080,    85,    86,
+      87,    88,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+       0,     0,     0,    25,    26,    27,    28,    29,    30,    31,
+      32,     0,    33,     0,     0,    34,    35,    36,    37,     0,
+      38,    39,    40,     0,    41,     0,    42,     0,    43,     0,
+       0,    44,     0,     0,     0,    45,    46,    47,    48,    49,
+      50,     0,    52,    53,     0,     0,     0,     0,    55,    56,
+      57,    58,     0,     0,     0,     0,     0,    59,    60,    61,
+     486,    63,    64,    65,    66,     0,     0,     0,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,     0,    83,    84,  1081,    85,    86,    87,    88,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,    27,    28,    29,    30,    31,    32,     0,
+      33,     0,     0,    34,    35,    36,    37,     0,    38,    39,
+      40,     0,    41,     0,    42,     0,    43,     0,     0,    44,
+       0,     0,     0,    45,    46,    47,    48,    49,    50,     0,
+      52,    53,     0,     0,     0,     0,    55,    56,    57,    58,
+       0,     0,     0,     0,     0,    59,    60,    61,   486,    63,
+      64,    65,    66,     0,     0,     0,    68,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,    83,    84,  1082,    85,    86,    87,    88,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,    27,    28,    29,    30,    31,    32,     0,    33,     0,
+       0,    34,    35,    36,    37,     0,    38,    39,    40,     0,
+      41,     0,    42,     0,    43,     0,     0,    44,     0,     0,
+       0,    45,    46,    47,    48,    49,    50,     0,    52,    53,
+       0,     0,     0,     0,    55,    56,    57,    58,     0,     0,
+       0,     0,     0,    59,    60,    61,   486,    63,    64,    65,
+      66,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,     0,    81,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,    82,     0,    83,
+      84,  1095,    85,    86,    87,    88,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,     0,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,     0,    38,    39,    40,     0,    41,     0,
+      42,     0,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,     0,    52,    53,     0,     0,
+       0,     0,    55,    56,    57,    58,     0,     0,     0,     0,
+       0,    59,    60,    61,   486,    63,    64,    65,    66,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     0,     0,     0,     0,
+       0,     0,     0,   212,    81,   213,   214,   215,   216,   217,
+     218,   219,   220,   221,     0,    82,     0,    83,    84,     0,
+      85,    86,    87,    88,   350,     0,   351,   352,   353,   354,
+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+       0,   375,     0,     0,     0,     0,     0,   222,     0,     0,
+       0,   376,     0,     0,     0,     0,     0,     0,   223,     0,
+     224,   225,     0,     0,   226,     0,     0,     0,    31,     0,
+       0,     0,     0,     0,   228,   229,   230,   231,   232,   233,
+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
+     264,   265,   266,   267,   268,   269,   270,   271,   272,     0,
+     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
+     283,   284,   285,   286,   287,   288,   289,   290,     4,     0,
+       5,     6,     7,     8,     0,     0,     0,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,     0,     0,   886,
+       0,     0,     0,   576,     0,     0,   706,     0,    88,     0,
+       0,     0,   887,     0,     0,   888,   889,   890,   891,   892,
+     893,   894,   895,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,    78,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,     0,    38,    39,    40,     0,    41,     0,
+      42,   990,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,     0,    52,    53,     0,     0,
+       0,     0,    55,    56,     0,     0,     0,     0,     0,     0,
+       0,    59,    60,    61,     0,     0,     0,     0,     0,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,     0,    83,    84,     0,
+      85,    86,    87,    88,   709,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    12,    13,     0,     0,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,     0,     0,     0,    25,    26,    27,    28,    29,
+      30,    31,    32,     0,    33,     0,     0,    34,    35,    36,
+      37,     0,    38,    39,    40,     0,    41,     0,    42,     0,
+      43,     0,     0,    44,     0,     0,     0,    45,    46,    47,
+      48,    49,    50,     0,    52,    53,     0,     0,     0,     0,
+      55,    56,     0,     0,     0,     0,     0,     0,     0,    59,
+      60,    61,     0,     0,     0,     0,     0,     0,     0,     0,
+      68,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,     0,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,     0,     0,
+       0,     0,     0,    82,     0,    83,    84,     0,    85,    86,
+      87,    88,   794,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+       0,     0,     0,    25,    26,    27,    28,    29,    30,    31,
+      32,     0,    33,     0,     0,    34,    35,    36,    37,     0,
+      38,    39,    40,     0,    41,     0,    42,     0,    43,     0,
+       0,    44,     0,     0,     0,    45,    46,    47,    48,    49,
+      50,     0,    52,    53,     0,     0,     0,     0,    55,    56,
+       0,     0,     0,     0,     0,     0,     0,    59,    60,    61,
+       0,     0,     0,     0,     0,     0,     0,     0,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,     0,    83,    84,     0,    85,    86,    87,    88,
+     861,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,    27,    28,    29,    30,    31,    32,     0,
+      33,     0,     0,    34,    35,    36,    37,     0,    38,    39,
+      40,     0,    41,     0,    42,     0,    43,     0,     0,    44,
+       0,     0,     0,    45,    46,    47,    48,    49,    50,     0,
+      52,    53,     0,     0,     0,     0,    55,    56,     0,     0,
+       0,     0,     0,     0,     0,    59,    60,    61,     0,     0,
+       0,     0,     0,     0,     0,     0,    68,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,    83,    84,     0,    85,    86,    87,    88,   975,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,    27,    28,    29,    30,    31,    32,     0,    33,     0,
+       0,    34,    35,    36,    37,     0,    38,    39,    40,     0,
+      41,     0,    42,     0,    43,     0,     0,    44,     0,     0,
+       0,    45,    46,    47,    48,    49,    50,     0,    52,    53,
+       0,     0,     0,     0,    55,    56,     0,     0,     0,     0,
+       0,     0,     0,    59,    60,    61,     0,     0,     0,     0,
+       0,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,     0,    81,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,    82,     0,    83,
+      84,     0,    85,    86,    87,    88,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,     0,     0,    25,    26,    27,
+      28,    29,    30,    31,    32,     0,    33,     0,     0,    34,
+      35,    36,    37,     0,    38,    39,    40,     0,    41,     0,
+      42,     0,    43,     0,     0,    44,     0,     0,     0,    45,
+      46,    47,    48,    49,    50,     0,    52,    53,     0,     0,
+       0,     0,    55,    56,     0,     0,     0,     0,     0,     0,
+       0,    59,    60,    61,     0,     0,     0,     0,     0,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,   886,    83,    84,     0,
+      85,    86,    87,    88,     0,     0,     0,     0,     0,   887,
+     317,   318,   888,   889,   890,   891,   892,   893,   894,   895,
+       0,     0,     0,     0,    12,    13,     0,     0,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,    78,     0,     0,    25,    26,   127,    28,    29,
+      30,    31,     0,   886,    33,     0,     0,    34,    35,    36,
+       0,     0,     0,     0,     0,     0,   887,     0,  1002,   888,
+     889,   890,   891,   892,   893,   894,   895,    45,     0,     0,
+       0,    49,    50,     0,     0,     0,     0,     0,     0,     0,
+       0,   128,     0,     0,     0,     0,     0,     0,     0,    78,
+      60,    61,     0,     0,     0,     0,     0,     0,     0,     0,
+     319,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,  1012,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,   320,     0,
+       0,     0,     0,    82,   886,     0,     0,     0,    85,    86,
+      87,    88,     0,     0,     0,     0,     0,   887,   317,   318,
+     888,   889,   890,   891,   892,   893,   894,   895,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+      78,     0,     0,    25,    26,   127,    28,    29,    30,    31,
+       0,     0,    33,     0,     0,    34,    35,    36,     0,     0,
+       0,     0,     0,     0,     0,     0,  1038,     0,     0,     0,
+       0,     0,     0,     0,     0,    45,     0,     0,     0,    49,
+      50,     0,     0,     0,     0,     0,     0,     0,     0,   128,
+       0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
+       0,     0,     0,     0,     0,     0,     0,     0,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,     0,     0,     0,     0,    85,    86,    87,    88,
+       0,     0,     0,     0,     0,     0,   317,   318,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,   127,    28,    29,    30,    31,     0,     0,
+      33,     0,     0,    34,    35,    36,   358,   359,   360,   361,
+     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     372,   373,   374,    45,   375,     0,     0,    49,    50,     0,
+       0,     0,     0,     0,   376,     0,     0,   128,     0,     0,
+       0,     0,     0,     0,     0,     0,    60,    61,     0,     0,
+       0,     0,     0,     0,     0,     0,   674,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,     0,     0,     0,    85,    86,    87,    88,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,   127,    28,    29,    30,    31,     0,     0,    33,   479,
+       0,    34,    35,    36,  -553,  -553,  -553,  -553,  -553,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,    45,   375,     0,     0,    49,    50,     0,     0,     0,
+       0,     0,   376,     0,     0,   128,     0,     0,     0,     0,
+       0,     0,     0,     0,    60,    61,     0,     0,     0,     0,
+       0,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
+       5,     6,     7,     8,     0,     0,    81,     9,    10,     0,
+      11,     0,     0,     0,     0,     0,     0,    82,     0,     0,
+       0,     0,    85,    86,    87,    88,   545,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    12,    13,     0,     0,
+       0,    14,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,     0,    24,     0,     0,     0,    25,    26,   127,
+      28,    29,    30,    31,     0,     0,    33,     0,     0,    34,
+      35,    36,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
+       0,     0,     0,    49,    50,     0,     0,     0,     0,     0,
+       0,     0,     0,   128,     0,     0,     0,     0,     0,     0,
+       0,     0,    60,    61,     0,     0,     0,     0,     0,     0,
+       0,     0,    68,    69,     0,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,     4,     0,     5,     6,
+       7,     8,     0,     0,    81,     9,    10,     0,    11,     0,
+       0,     0,     0,     0,     0,    82,     0,     0,     0,     0,
+      85,    86,    87,    88,   -47,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    12,    13,     0,     0,     0,    14,
+       0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+       0,    24,     0,     0,     0,    25,    26,   127,    28,    29,
+      30,    31,     0,     0,    33,     0,     0,    34,    35,    36,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
+       0,    49,    50,     0,     0,     0,     0,     0,     0,     0,
+       0,   128,     0,     0,     0,     0,     0,     0,     0,     0,
+      60,    61,     0,     0,     0,     0,     0,     0,     0,     0,
+      68,    69,     0,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,     4,     0,     5,     6,     7,     8,
+       0,     0,    81,     9,    10,     0,    11,     0,     0,     0,
+       0,     0,     0,    82,     0,     0,     0,     0,    85,    86,
+      87,    88,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    12,    13,     0,     0,     0,    14,     0,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
+       0,     0,     0,    25,    26,   127,    28,    29,    30,    31,
+       0,     0,    33,     0,     0,    34,    35,    36,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,    45,     0,     0,     0,    49,
+      50,     0,     0,     0,     0,     0,     0,     0,     0,   128,
+       0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
+       0,     0,     0,     0,     0,     0,     0,     0,    68,    69,
+       0,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,     4,     0,     5,     6,     7,     8,     0,     0,
+      81,     9,    10,     0,    11,     0,     0,     0,     0,     0,
+       0,    82,   680,     0,     0,     0,    85,    86,    87,    88,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      12,    13,     0,     0,     0,    14,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,     0,    24,     0,     0,
+       0,    25,    26,   127,    28,    29,    30,    31,     0,     0,
+      33,     0,     0,    34,    35,    36,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   801,    45,     0,     0,     0,    49,    50,     0,
+       0,     0,     0,     0,     0,     0,     0,   128,     0,     0,
+       0,     0,     0,     0,     0,     0,    60,    61,     0,     0,
+       0,     0,     0,     0,     0,     0,    68,    69,     0,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+       4,     0,     5,     6,     7,     8,     0,     0,    81,     9,
+      10,     0,    11,     0,     0,     0,     0,     0,     0,    82,
+       0,     0,     0,     0,    85,    86,    87,    88,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
+       0,     0,     0,    14,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,     0,    24,     0,     0,     0,    25,
+      26,   127,    28,    29,    30,    31,     0,     0,    33,     0,
+       0,    34,    35,    36,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    45,     0,     0,     0,    49,    50,     0,     0,     0,
+       0,     0,     0,     0,     0,   128,     0,     0,     0,     0,
+       0,     0,     0,     0,    60,    61,     0,     0,     0,     0,
+       0,     0,     0,     0,    68,    69,     0,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
+       0,     0,     0,     0,     0,   212,    81,   213,   214,   215,
+     216,   217,   218,   219,   220,   221,     0,    82,     0,     0,
+       0,     0,    85,    86,    87,    88,   351,   352,   353,   354,
+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+       0,   375,     0,     0,     0,     0,     0,     0,     0,   222,
+       0,   376,     0,     0,     0,     0,     0,     0,     0,     0,
+     223,     0,   224,   225,     0,     0,   509,    28,    29,    30,
+       0,     0,     0,     0,     0,     0,   228,   229,   230,   231,
+     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
+    1020,   263,   264,   265,   266,   267,   268,   269,   270,   271,
+     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
+     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
+     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
+     221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,  1021,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
+     375,     0,     0,     0,   222,     0,     0,     0,     0,     0,
+     376,     0,     0,     0,     0,   223,     0,   224,   225,     0,
+       0,   509,    28,    29,    30,     0,     0,     0,     0,     0,
+       0,   228,   229,   230,   231,   232,   233,   234,   235,   236,
+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
+     257,   258,   259,   260,   261,  1020,   263,   264,   265,   266,
+     267,   268,   269,   270,   271,   272,     0,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,     0,     0,     0,     0,   347,
+     348,   349,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     350,  1050,   351,   352,   353,   354,   355,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+     369,   370,   371,   372,   373,   374,     0,   375,   347,   348,
+     349,     0,     0,     0,     0,     0,     0,   376,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
+       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
+     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
+     370,   371,   372,   373,   374,     0,   375,   347,   348,   349,
+       0,     0,     0,     0,     0,     0,   376,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   350,     0,
+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
+     371,   372,   373,   374,     0,   375,   347,   348,   349,     0,
+       0,     0,     0,     0,     0,   376,     0,     0,     0,     0,
+       0,     0,     0,     0,   669,     0,     0,   350,     0,   351,
+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
+     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     372,   373,   374,     0,   375,   347,   348,   349,     0,     0,
+       0,     0,     0,     0,   376,     0,     0,     0,     0,     0,
+       0,     0,     0,   679,     0,     0,   350,     0,   351,   352,
+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
+     373,   374,     0,   375,   347,   348,   349,     0,     0,     0,
+       0,     0,     0,   376,     0,     0,     0,     0,     0,     0,
+       0,     0,   700,     0,     0,   350,     0,   351,   352,   353,
+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,   347,   348,   349,     0,     0,     0,     0,
+       0,     0,   376,     0,     0,     0,     0,     0,     0,     0,
+       0,   704,     0,     0,   350,   939,   351,   352,   353,   354,
+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+       0,   375,   347,   348,   349,     0,     0,     0,     0,     0,
+       0,   376,     0,     0,     0,     0,     0,     0,     0,     0,
+     782,     0,     0,   350,     0,   351,   352,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
+     375,   347,   348,   349,     0,     0,     0,     0,     0,     0,
+     376,     0,     0,     0,     0,     0,     0,     0,     0,   783,
+       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
+     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
+     347,   348,   349,     0,     0,     0,     0,     0,     0,   376,
+       0,     0,     0,     0,     0,     0,   940,     0,     0,     0,
+       0,   350,     0,   351,   352,   353,   354,   355,   356,   357,
+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
+     368,   369,   370,   371,   372,   373,   374,     0,   375,   347,
+     348,   349,     0,     0,     0,     0,     0,     0,   376,     0,
+       0,     0,     0,     0,     0,   377,     0,     0,     0,     0,
+     350,     0,   351,   352,   353,   354,   355,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+     369,   370,   371,   372,   373,   374,     0,   375,   347,   348,
+     349,     0,     0,     0,     0,     0,     0,   376,     0,     0,
+       0,     0,     0,   606,     0,     0,     0,     0,     0,   350,
+       0,   351,   352,   353,   354,   355,   356,   357,   358,   359,
+     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
+     370,   371,   372,   373,   374,     0,   375,   347,   348,   349,
+       0,     0,     0,     0,     0,     0,   376,     0,     0,     0,
+       0,     0,   608,     0,     0,     0,     0,     0,   350,     0,
+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
+     371,   372,   373,   374,     0,   375,   347,   348,   349,     0,
+       0,     0,     0,     0,     0,   376,     0,     0,     0,     0,
+       0,   616,     0,     0,     0,     0,     0,   350,     0,   351,
+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
+     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     372,   373,   374,     0,   375,   347,   348,   349,     0,     0,
+       0,     0,     0,     0,   376,     0,     0,     0,     0,     0,
+     619,     0,     0,     0,     0,     0,   350,     0,   351,   352,
+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
+     373,   374,     0,   375,   347,   348,   349,     0,     0,     0,
+       0,     0,     0,   376,     0,     0,     0,     0,     0,   624,
+       0,     0,     0,     0,     0,   350,     0,   351,   352,   353,
+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,   347,   348,   349,     0,     0,     0,     0,
+       0,     0,   376,     0,     0,     0,     0,     0,   625,     0,
+       0,     0,     0,     0,   350,     0,   351,   352,   353,   354,
+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+       0,   375,   347,   348,   349,     0,     0,     0,     0,     0,
+       0,   376,     0,     0,     0,     0,     0,   643,     0,     0,
+       0,     0,     0,   350,     0,   351,   352,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,     0,
+     375,   347,   348,   349,     0,     0,     0,     0,     0,     0,
+     376,     0,     0,     0,     0,     0,   658,     0,     0,     0,
+       0,     0,   350,     0,   351,   352,   353,   354,   355,   356,
+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
+     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
+     347,   348,   349,     0,     0,     0,     0,     0,     0,   376,
+       0,     0,     0,     0,     0,   770,     0,     0,     0,     0,
+       0,   350,     0,   351,   352,   353,   354,   355,   356,   357,
+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
+     368,   369,   370,   371,   372,   373,   374,     0,   375,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   376,     0,
+       0,     0,     0,     0,   771,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
+     221,     0,   354,   355,   356,   357,   358,   359,   360,   361,
+     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     372,   373,   374,   786,   375,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   376,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   223,     0,   224,   225,     0,
+       0,   226,     0,     0,   227,     0,     0,     0,     0,     0,
+     830,   228,   229,   230,   231,   232,   233,   234,   235,   236,
+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
+     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
+     267,   268,   269,   270,   271,   272,     0,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,   212,   349,   213,   214,   215,
+     216,   217,   218,   219,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   350,     0,   351,   352,   353,
+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,     0,     0,     0,     0,     0,     0,   222,
+       0,     0,   376,     0,     0,     0,     0,     0,     0,     0,
+     223,     0,   224,   225,     0,     0,   226,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   228,   229,   230,   231,
+     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
+     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
+     272,     0,   273,   274,   275,   276,   277,   278,   279,   280,
+     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
+     212,     0,   213,   214,   215,   216,   217,   218,   219,   220,
+     221,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   376,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   223,     0,   224,   225,     0,
+       0,  1070,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   228,   229,   230,   231,   232,   233,   234,   235,   236,
+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
+     257,   258,   259,   260,   261,   888,   889,   890,   891,   892,
+     893,   894,   269,   270,   271,   272,     0,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,   317,   318,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   127,    28,    29,    30,    31,     0,   350,    33,
+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
+     371,   372,   373,   374,     0,   375,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   376,   154,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   714,    69,     0,    70,    71,
+      72,    73,    74,    75,    76,    77,     0,   622,     0,     0,
+       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
+       0,   495,     0,     0,     0,     0,     0,     0,   301,     0,
+       0,     0,     0,   715,     0,    87,    88,   350,     0,   351,
+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
+     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     372,   373,   374,     0,   375,   347,   348,   349,     0,     0,
+       0,     0,     0,     0,   376,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   350,   690,   351,   352,
+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
+     373,   374,     0,   375,   347,   348,   349,     0,     0,     0,
+       0,     0,     0,   376,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   350,     0,   351,   352,   353,
+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,   348,   349,     0,     0,     0,     0,     0,
+       0,     0,   376,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   350,     0,   351,   352,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,   405,
+     375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     376,     0,     0,     0,     0,   350,     0,   351,   352,   353,
+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
+     374,     0,   375,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   376,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
+     373,   374,     0,   375,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   376
+};
+
+static const yytype_int16 yycheck[] =
+{
+       2,     2,   111,    89,     2,    79,    80,    35,   110,   111,
+     693,     2,   737,   466,   193,   620,    31,    31,   185,    67,
+      79,    80,   131,   926,   727,   928,   903,    47,   731,   131,
+      79,    80,    52,    35,    14,   121,    79,    80,    14,    14,
+      14,    91,    78,    54,    78,   821,    56,    31,    39,    31,
+      78,   607,     0,    74,    78,   721,    35,    78,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,   129,
+     651,    91,    74,    75,    76,    77,    37,    38,   296,   297,
+      91,    35,    38,    91,   302,    78,   778,   780,    31,    78,
+      46,    47,   148,   130,    30,    57,    52,   168,   158,   885,
+      78,   172,    80,   170,   971,    67,   973,    99,   128,   129,
+     743,   148,    35,   170,    37,   171,   160,   161,   162,   685,
+     204,   797,   703,   799,    78,   911,    82,   173,    78,    85,
+      80,    99,   178,    99,   164,   204,   138,   139,    74,    75,
+      76,    77,   173,   929,   178,   204,   170,   178,   173,   841,
+      74,   204,   887,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,  1054,   161,   162,
+     883,   452,   193,   788,  1087,   456,   962,    78,   172,    80,
+      74,   171,   118,   161,   162,   171,   171,   171,   769,   652,
+     823,   824,   825,   826,    30,  1062,   164,   153,   164,   177,
+     156,   148,   138,   139,   300,   102,   103,   170,   164,   901,
+     166,   161,   162,  1080,  1081,   171,   172,   173,   384,   175,
+     176,  1088,   102,   103,   171,  1092,   168,    78,   312,   171,
+     922,   923,   924,   925,    78,    30,    80,   321,    74,    75,
+      76,    77,   168,   312,   108,   109,   172,   413,   414,   205,
+     206,   532,   321,   312,   170,    35,   445,   108,   109,   312,
+     161,   162,   321,    74,    75,    76,    77,    78,   321,    78,
+     170,    80,    37,    38,   492,    55,   388,   174,   163,    74,
+      75,    76,    77,   108,   109,   170,   149,   150,   151,   152,
+      78,    35,    80,    37,   174,    74,    75,    76,    77,   163,
+     163,   170,   138,   139,   316,   316,   168,   118,    88,   171,
+     173,   170,   175,    78,   151,   152,   336,   161,   162,   173,
+    1055,   108,   109,   381,   382,   170,   121,   122,   123,   124,
+     168,   118,    74,    75,   172,    77,   173,   375,   175,   118,
+     296,   297,   343,   138,   139,   301,   302,    70,    71,    52,
+     170,   160,   161,   162,    74,   311,   386,    77,   168,   170,
+     163,   148,   172,   540,   320,    88,   108,   178,   110,   174,
+     175,    74,   160,   161,   162,    78,   332,   168,   334,    67,
+      83,   172,   173,   495,  1077,   168,   170,   417,   108,   172,
+     110,   347,   348,   349,   350,   351,   352,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,   379,
+     376,   375,   151,   152,   445,   170,   438,   438,   488,   385,
+     386,   469,   388,   389,   390,   391,   392,   393,   394,   395,
+     396,   397,   398,   399,   400,   401,   175,   728,   170,   405,
+     151,   152,   119,   120,    74,    75,    76,    77,    70,    71,
+     416,   417,   163,   130,   420,   101,   102,   103,   488,   170,
+     151,   152,   173,   511,   175,   168,   170,   488,   434,   172,
+     488,   168,   163,   579,   170,   172,   582,   151,   152,   170,
+     586,   587,   173,   449,   175,   776,   516,   715,   118,   511,
+     108,   461,   110,   168,   151,   152,   590,   172,   170,   173,
+     622,   175,   113,   114,    74,   469,   163,    77,   138,   139,
+     801,   590,   803,   163,   805,   170,   173,   170,   175,   706,
+     163,   590,   709,   814,   172,   173,   492,   590,   622,   495,
+     163,   497,   151,   152,   762,   501,   502,   503,   504,   505,
+     506,   507,   508,   622,   163,   639,    91,   511,    86,    87,
+     151,   152,   172,   622,   173,   172,   175,   172,    16,   622,
+     639,   789,   163,   529,    53,    54,    55,   172,    57,   172,
+     639,   537,   173,   539,   175,    16,   639,   171,    67,   545,
+      74,   675,    74,    74,    75,   375,    77,   168,   169,    74,
+     171,   381,   382,   383,   384,   309,   675,   645,    74,   313,
+     648,   172,   650,   168,   574,   616,   675,   794,   619,   173,
+     576,   170,   675,   327,   170,   329,   330,   331,   584,   169,
+     410,   168,   716,   413,   414,   415,   168,   169,   176,   171,
+     170,   653,   653,   170,    31,   653,   172,   716,   101,   102,
+     103,    74,   653,   171,   170,   172,   168,   716,   835,   108,
+      74,   110,   618,   716,   620,   621,   626,   447,   173,   118,
+     119,   120,   121,   122,   123,   124,   688,   688,   172,   691,
+     792,   693,    78,   168,   861,   641,   172,   134,   168,   649,
+     134,   645,    31,   169,   648,   173,    74,   171,   171,   737,
+     169,    74,   879,   174,    16,   743,   170,    31,   792,    31,
+      31,    31,   668,    31,   774,    31,    31,    31,   719,    74,
+      31,   677,    31,   792,    31,   168,   682,   683,  1009,   170,
+     170,   511,   170,   792,   690,   170,   169,   169,    99,   792,
+     778,   171,   754,   754,   173,   173,   754,    74,    75,    76,
+      77,    78,   171,   754,    81,   135,   173,    16,   170,   715,
+      83,   169,   171,   170,   941,   171,   171,   723,   780,   770,
+     170,   172,   170,   785,   785,   787,   787,   172,   738,   172,
+      99,   172,   820,   737,   168,   823,   824,   825,   826,   168,
+     173,   118,   793,   753,    35,    37,   172,    31,   975,   148,
+     756,   172,   171,   841,   168,   982,   762,   819,   171,   168,
+     766,   138,   172,   140,   141,   142,   143,   144,   145,   146,
+     147,   169,   174,   168,   784,   168,   170,   839,    74,    31,
+     168,   173,   788,   789,   174,   171,   173,   897,   173,   958,
+     878,   174,    38,   170,    35,    37,   958,   115,   175,   887,
+     177,   178,   864,   864,    74,    75,    76,    77,    78,   172,
+     972,   171,   165,   901,  1041,   173,   820,   171,  1045,   171,
+    1047,   171,    14,   833,   172,    14,    14,   174,   916,   173,
+     170,   172,    16,   172,   922,   923,   924,   925,    78,    78,
+     172,   902,   171,    16,   906,   953,    16,   173,   118,   957,
+      78,   168,   173,   915,   915,   163,    99,   173,   172,   172,
+     130,   867,   172,   116,  1091,   163,    16,   171,   874,   172,
+     876,   170,   934,   934,   878,  1054,   886,   171,   148,    54,
+     931,  1043,   933,   887,   812,   993,   469,   949,   949,   445,
+     952,   193,   174,  1001,   639,   792,    97,   938,   986,   961,
+     170,   933,   874,   839,   447,   993,   108,   109,   178,   774,
+     901,   916,   974,   450,   683,  1023,   118,   119,   120,   897,
+    1032,   983,   983,  1023,  1035,   435,   158,  1035,   130,   131,
+     132,   133,   407,   420,   497,  1023,   375,   943,  1043,   641,
+     946,  1003,   382,    -1,    -1,    -1,   148,    -1,  1056,    -1,
+      -1,  1013,  1013,  1015,  1015,    -1,    -1,    -1,   102,    -1,
+      -1,    -1,    -1,    -1,  1072,    -1,    -1,  1055,    -1,    -1,
+      -1,   115,    -1,    -1,   118,   119,   120,   121,   122,   123,
+     124,   125,   986,    -1,    -1,   995,    -1,    -1,    -1,   993,
+      -1,    -1,    -1,    -1,    -1,  1005,    -1,    -1,    -1,    -1,
+      -1,    -1,  1064,  1064,   148,  1067,  1067,  1069,  1069,    -1,
+      -1,    -1,  1018,    -1,    -1,  1077,    -1,    -1,    -1,  1023,
+      -1,    -1,    -1,    -1,  1030,    -1,    -1,  1037,  1034,    -1,
+     174,  1093,  1093,  1039,     3,    -1,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    -1,    15,  1057,    -1,  1059,
+      -1,  1055,   102,    -1,    -1,    -1,    -1,  1063,    49,    50,
+      51,    52,    53,    54,    55,    -1,    57,    -1,   118,   119,
+     120,   121,   122,   123,   124,   125,    67,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    57,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,   148,    68,
+      -1,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
+      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
+     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
+     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
+      -1,   130,   131,   132,   133,   134,   135,   136,   137,   138,
+     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,    51,    52,    53,    54,    55,    -1,    57,    -1,
+     159,    -1,    -1,    -1,    -1,    -1,   165,    -1,    67,    -1,
+      -1,   170,   171,     9,    10,    11,   175,   176,   177,   178,
+       3,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    -1,    15,    -1,    30,    -1,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    67,    -1,    56,    57,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    -1,    -1,    81,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
+      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,   127,   128,    -1,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,   171,   159,    12,    13,    -1,
+      15,    -1,   165,    -1,    -1,    -1,    -1,   170,    -1,   102,
+      -1,    -1,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
+      -1,    -1,   115,    -1,    -1,   118,   119,   120,   121,   122,
+     123,   124,   125,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,   148,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    93,    -1,
+      95,   174,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
+     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
+      -1,   136,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,    -1,   172,   173,   174,
+     175,   176,   177,   178,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    55,    -1,    57,    -1,    -1,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    67,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    79,    -1,    81,    -1,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    -1,    93,    -1,    95,    -1,
+      97,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
+     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
+     117,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,   126,
+     127,   128,   129,   130,   131,   132,   133,    -1,    -1,   136,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,    -1,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,    -1,    -1,
+      -1,    -1,    -1,   170,    -1,   172,   173,   174,   175,   176,
+     177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+      -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      79,    -1,    81,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    93,    -1,    95,    -1,    97,    -1,
+      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
+     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
+     119,   120,    -1,    -1,    -1,    -1,    -1,   126,   127,   128,
+     129,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
+      81,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    93,    -1,    95,    -1,    97,    -1,    -1,   100,
+      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
+     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,   120,
+      -1,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
+     131,   132,   133,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    79,    -1,    81,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      93,    -1,    95,    -1,    97,    -1,    -1,   100,    -1,    -1,
+      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
+      -1,    -1,    -1,    -1,   117,   118,   119,   120,    -1,    -1,
+      -1,    -1,    -1,   126,   127,   128,   129,   130,   131,   132,
+     133,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,   159,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   172,
+     173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,    -1,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    88,    89,    90,    91,    -1,    93,    -1,
+      95,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,    -1,   111,   112,    -1,    -1,
+      -1,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,    -1,   172,   173,    -1,
+     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    79,    -1,    81,    -1,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    92,    93,    -1,    95,    -1,
+      97,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
+     107,   108,   109,    -1,   111,   112,    -1,    -1,    -1,    -1,
+     117,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,   126,
+     127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,    -1,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,    -1,    -1,
+      -1,    -1,    -1,   170,    -1,   172,   173,    -1,   175,   176,
+     177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+      -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      79,    -1,    81,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    93,    -1,    95,    -1,    97,    98,
+      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
+     109,    -1,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
+     119,   120,    -1,    -1,    -1,    -1,    -1,   126,   127,   128,
+     129,   130,   131,   132,   133,    -1,    -1,    -1,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
+      81,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    93,    -1,    95,    96,    97,    -1,    -1,   100,
+      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
+     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,   120,
+      -1,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
+     131,   132,   133,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,   172,   173,    -1,   175,   176,   177,   178,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    79,    -1,    81,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      93,    -1,    95,    -1,    97,    -1,    -1,   100,    -1,    -1,
+      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
+      -1,    -1,    -1,    -1,   117,   118,   119,   120,    -1,    -1,
+      -1,    -1,    -1,   126,   127,   128,   129,   130,   131,   132,
+     133,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,   159,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   172,
+     173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,    -1,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    93,    94,
+      95,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,    -1,   111,   112,    -1,    -1,
+      -1,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,    -1,   172,   173,    -1,
+     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    79,    -1,    81,    -1,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    -1,    93,    -1,    95,    -1,
+      97,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
+     107,   108,   109,    -1,   111,   112,    -1,    -1,    -1,    -1,
+     117,   118,   119,   120,    -1,    -1,    -1,    -1,    -1,   126,
+     127,   128,   129,   130,   131,   132,   133,    -1,    -1,    -1,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,    -1,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,    -1,    -1,
+      -1,    -1,    -1,   170,    -1,   172,   173,   174,   175,   176,
+     177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+      -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      79,    -1,    81,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    93,    -1,    95,    -1,    97,    -1,
+      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
+     109,    -1,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
+     119,   120,    -1,    -1,    -1,    -1,    -1,   126,   127,   128,
+     129,   130,   131,   132,   133,    -1,    -1,    -1,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
+      81,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    93,    -1,    95,    -1,    97,    -1,    -1,   100,
+      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
+     111,   112,    -1,    -1,    -1,    -1,   117,   118,   119,   120,
+      -1,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
+     131,   132,   133,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    79,    -1,    81,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      93,    -1,    95,    -1,    97,    -1,    -1,   100,    -1,    -1,
+      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
+      -1,    -1,    -1,    -1,   117,   118,   119,   120,    -1,    -1,
+      -1,    -1,    -1,   126,   127,   128,   129,   130,   131,   132,
+     133,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,   159,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   172,
+     173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,    -1,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    93,    -1,
+      95,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,    -1,   111,   112,    -1,    -1,
+      -1,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,     3,   159,     5,     6,     7,     8,     9,
+      10,    11,    12,    13,    -1,   170,    -1,   172,   173,    -1,
+     175,   176,   177,   178,    30,    -1,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      -1,    57,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,
+      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
+      70,    71,    -1,    -1,    74,    -1,    -1,    -1,    78,    -1,
+      -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
+      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
+     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,   122,   123,   124,   125,   126,   127,   128,    -1,
+     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
+     140,   141,   142,   143,   144,   145,   146,   147,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,    -1,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
+      -1,    -1,    -1,   173,    -1,    -1,    31,    -1,   178,    -1,
+      -1,    -1,   115,    -1,    -1,   118,   119,   120,   121,   122,
+     123,   124,   125,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,   148,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    93,    -1,
+      95,   174,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,    -1,   111,   112,    -1,    -1,
+      -1,    -1,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,    -1,   172,   173,    -1,
+     175,   176,   177,   178,    31,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    79,    -1,    81,    -1,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    -1,    93,    -1,    95,    -1,
+      97,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
+     107,   108,   109,    -1,   111,   112,    -1,    -1,    -1,    -1,
+     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
+     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,    -1,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,    -1,    -1,
+      -1,    -1,    -1,   170,    -1,   172,   173,    -1,   175,   176,
+     177,   178,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+      -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      79,    -1,    81,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    93,    -1,    95,    -1,    97,    -1,
+      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
+     109,    -1,   111,   112,    -1,    -1,    -1,    -1,   117,   118,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,   128,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
+      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
+      81,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    93,    -1,    95,    -1,    97,    -1,    -1,   100,
+      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
+     111,   112,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   126,   127,   128,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,   172,   173,    -1,   175,   176,   177,   178,    31,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    79,    -1,    81,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      93,    -1,    95,    -1,    97,    -1,    -1,   100,    -1,    -1,
+      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
+      -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   126,   127,   128,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,   159,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,   172,
+     173,    -1,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,    -1,    -1,    72,    73,    74,
+      75,    76,    77,    78,    79,    -1,    81,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    93,    -1,
+      95,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,   104,
+     105,   106,   107,   108,   109,    -1,   111,   112,    -1,    -1,
+      -1,    -1,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,   102,   172,   173,    -1,
+     175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,   115,
+      37,    38,   118,   119,   120,   121,   122,   123,   124,   125,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,   148,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    -1,   102,    81,    -1,    -1,    84,    85,    86,
+      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   174,   118,
+     119,   120,   121,   122,   123,   124,   125,   104,    -1,    -1,
+      -1,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
+     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,   174,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,   165,    -1,
+      -1,    -1,    -1,   170,   102,    -1,    -1,    -1,   175,   176,
+     177,   178,    -1,    -1,    -1,    -1,    -1,   115,    37,    38,
+     118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+     148,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      -1,    -1,    81,    -1,    -1,    84,    85,    86,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,   108,
+     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,    -1,    -1,    -1,    -1,   175,   176,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    -1,
+      81,    -1,    -1,    84,    85,    86,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,   104,    57,    -1,    -1,   108,   109,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,   118,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    -1,    -1,    81,    82,
+      -1,    84,    85,    86,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,   104,    57,    -1,    -1,   108,   109,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,   118,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,     3,    -1,
+       5,     6,     7,     8,    -1,    -1,   159,    12,    13,    -1,
+      15,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,
+      -1,    -1,   175,   176,   177,   178,    31,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    -1,    68,    -1,    -1,    -1,    72,    73,    74,
+      75,    76,    77,    78,    -1,    -1,    81,    -1,    -1,    84,
+      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
+      -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,     3,    -1,     5,     6,
+       7,     8,    -1,    -1,   159,    12,    13,    -1,    15,    -1,
+      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
+     175,   176,   177,   178,    31,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      -1,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
+      77,    78,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
+      -1,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,     3,    -1,     5,     6,     7,     8,
+      -1,    -1,   159,    12,    13,    -1,    15,    -1,    -1,    -1,
+      -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,   175,   176,
+     177,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
+      -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
+      -1,    -1,    81,    -1,    -1,    84,    85,    86,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,   108,
+     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,
+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,     3,    -1,     5,     6,     7,     8,    -1,    -1,
+     159,    12,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
+      -1,   170,   171,    -1,    -1,    -1,   175,   176,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      51,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    -1,    -1,
+      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    -1,
+      81,    -1,    -1,    84,    85,    86,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   103,   104,    -1,    -1,    -1,   108,   109,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+       3,    -1,     5,     6,     7,     8,    -1,    -1,   159,    12,
+      13,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,   170,
+      -1,    -1,    -1,    -1,   175,   176,   177,   178,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
+      -1,    -1,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,    72,
+      73,    74,    75,    76,    77,    78,    -1,    -1,    81,    -1,
+      -1,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   104,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,     3,   159,     5,     6,     7,
+       8,     9,    10,    11,    12,    13,    -1,   170,    -1,    -1,
+      -1,    -1,   175,   176,   177,   178,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
+      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      68,    -1,    70,    71,    -1,    -1,    74,    75,    76,    77,
+      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
+      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
+      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
+     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
+     128,    -1,   130,   131,   132,   133,   134,   135,   136,   137,
+     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
+       3,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   174,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
+      57,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    -1,
+      -1,    74,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
+      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,   127,   128,    -1,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,     9,
+      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      30,   174,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    55,    -1,    57,     9,    10,
+      11,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,
+      -1,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,    53,    54,    55,    -1,    57,     9,    10,    11,
+      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    53,    54,    55,    -1,    57,     9,    10,    11,    -1,
+      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   174,    -1,    -1,    30,    -1,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,    -1,    57,     9,    10,    11,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   174,    -1,    -1,    30,    -1,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    -1,    57,     9,    10,    11,    -1,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   174,    -1,    -1,    30,    -1,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,     9,    10,    11,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   174,    -1,    -1,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      -1,    57,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
+      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     174,    -1,    -1,    30,    -1,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
+      57,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,
+      -1,    -1,    30,    -1,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
+       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
+      -1,    30,    -1,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    53,    54,    55,    -1,    57,     9,
+      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
+      30,    -1,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    55,    -1,    57,     9,    10,
+      11,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
+      -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,    30,
+      -1,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,    53,    54,    55,    -1,    57,     9,    10,    11,
+      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
+      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,    30,    -1,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    53,    54,    55,    -1,    57,     9,    10,    11,    -1,
+      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
+      -1,   171,    -1,    -1,    -1,    -1,    -1,    30,    -1,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,    -1,    57,     9,    10,    11,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
+     171,    -1,    -1,    -1,    -1,    -1,    30,    -1,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    -1,    57,     9,    10,    11,    -1,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,   171,
+      -1,    -1,    -1,    -1,    -1,    30,    -1,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,     9,    10,    11,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,   171,    -1,
+      -1,    -1,    -1,    -1,    30,    -1,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      -1,    57,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
+      -1,    67,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,
+      -1,    -1,    -1,    30,    -1,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
+      57,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,
+      -1,    -1,    30,    -1,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    -1,    57,
+       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,
+      -1,    30,    -1,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    53,    54,    55,    -1,    57,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+       3,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,   171,    57,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    -1,
+      -1,    74,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
+     169,    84,    85,    86,    87,    88,    89,    90,    91,    92,
+      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,   127,   128,    -1,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,     3,    11,     5,     6,     7,
+       8,     9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    30,    -1,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    57,
+      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      68,    -1,    70,    71,    -1,    -1,    74,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
+      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
+      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
+     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
+     128,    -1,   130,   131,   132,   133,   134,   135,   136,   137,
+     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
+       3,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    -1,
+      -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
+      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,   127,   128,    -1,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,    37,    38,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    74,    75,    76,    77,    78,    -1,    30,    81,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    53,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    67,   118,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,
+     142,   143,   144,   145,   146,   147,    -1,    99,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
+      -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,
+      -1,    -1,    -1,   175,    -1,   177,   178,    30,    -1,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,    -1,    57,     9,    10,    11,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    -1,    57,     9,    10,    11,    -1,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    30,    -1,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,    10,    11,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    30,    -1,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,    14,
+      57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    -1,    -1,    30,    -1,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    67
+};
+
+  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+     symbol of state STATE-NUM.  */
+static const yytype_int16 yystos[] =
+{
+       0,   180,   185,     0,     3,     5,     6,     7,     8,    12,
+      13,    15,    51,    52,    56,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    68,    72,    73,    74,    75,    76,
+      77,    78,    79,    81,    84,    85,    86,    87,    89,    90,
+      91,    93,    95,    97,   100,   104,   105,   106,   107,   108,
+     109,   110,   111,   112,   115,   117,   118,   119,   120,   126,
+     127,   128,   129,   130,   131,   132,   133,   136,   137,   138,
+     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
+     150,   159,   170,   172,   173,   175,   176,   177,   178,   189,
+     192,   193,   194,   195,   211,   219,   222,   225,   226,   227,
+     229,   231,   246,   252,   253,   254,   255,   306,   307,   308,
+     309,   310,   318,   319,   324,   325,   326,   327,   329,   330,
+     331,   332,   333,   334,   335,   336,   347,    74,   118,   193,
+     307,   310,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,    31,   170,   118,   130,   170,   189,   193,   304,
+     319,   320,   335,   337,   170,   321,   170,   300,   301,   307,
+     211,   170,   170,   170,   170,   170,   170,   307,   328,   328,
+      74,    74,   208,   299,   328,   173,    74,    75,    77,   108,
+     110,   187,   188,   198,   200,   204,   207,   275,   276,   335,
+      78,   277,   278,   308,   170,   170,   170,   170,   224,   228,
+     230,   232,     3,     5,     6,     7,     8,     9,    10,    11,
+      12,    13,    57,    68,    70,    71,    74,    77,    84,    85,
+      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
+      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
+     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
+     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
+     126,   127,   128,   130,   131,   132,   133,   134,   135,   136,
+     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
+     147,   181,   182,   184,   186,   197,   170,   170,   190,   191,
+     319,   170,   175,   324,   326,   327,   334,   334,    78,    80,
+     160,   161,   162,   344,   345,   307,   209,    37,    38,   137,
+     165,   183,   307,   340,   341,   342,   343,    80,   322,   344,
+      80,   344,   173,   335,   170,   272,   118,   192,   194,   308,
+     130,   226,    70,    71,    70,    71,    88,     9,    10,    11,
+      30,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,    53,    54,    55,    57,    67,   172,   183,   314,
+     314,   163,   163,   151,   152,   173,   175,   272,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,   149,   150,   314,    14,   307,   305,   307,   304,
+     163,   272,   323,   151,   152,   163,   173,   175,   328,   307,
+     168,   172,    91,   307,   302,   303,   307,   307,   208,   307,
+     307,   172,   172,   172,    16,   168,   172,   172,   209,    99,
+     164,   188,   199,   204,   172,   168,   172,   168,   172,    16,
+     168,   172,   217,   218,   334,   307,   348,   349,   307,   171,
+      74,    74,    74,    74,   172,   196,   173,   340,   340,   168,
+     201,   272,   307,   340,   151,   152,   175,   160,   345,    82,
+     307,   334,    80,   160,   345,   171,   129,   174,   193,   194,
+     210,   211,   170,   307,   334,    14,   169,   168,   176,   177,
+     307,     3,     5,     6,     7,     8,    12,    13,    68,    74,
+      84,    85,    86,   104,   108,   109,   118,   127,   128,   137,
+     138,   140,   141,   142,   143,   144,   145,   146,   147,   165,
+     171,   184,   273,   274,   307,   308,   223,   170,   211,   170,
+      31,   172,   307,   307,   307,    31,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   320,   307,   311,    74,   311,   173,   184,   335,   338,
+     184,   335,   338,    74,   173,   335,   339,   339,   307,   328,
+     183,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   171,   323,   171,   335,
+     339,   339,   335,   307,   328,   171,   171,   301,   170,   171,
+     172,   168,    99,   171,   171,   171,   307,   299,   174,    74,
+     173,   164,   172,   172,   188,   207,   276,   307,   278,   168,
+     201,   168,   201,   171,   172,   134,   236,   311,   134,   237,
+      31,   233,   173,   185,   171,   171,   190,   169,   171,   169,
+      74,    74,    52,    74,    78,    83,   346,   174,   175,   174,
+     174,   170,   194,   340,   137,   183,   307,    16,   341,   174,
+     171,   307,    31,   168,   201,    74,   307,   307,   209,   307,
+      31,   170,   311,   170,   307,   272,   272,   307,   272,   272,
+     174,   169,   334,   236,   174,   169,    31,   211,   307,    31,
+     211,   251,   302,   307,   137,   175,   183,   239,   334,   212,
+      31,   173,   243,   173,   311,   213,   187,   198,   202,   205,
+     206,   173,   218,   171,   349,   171,   319,   135,   238,   173,
+     282,   319,   311,    30,   118,   138,   139,   189,   263,   264,
+     265,   266,   268,   238,   185,   174,    16,    83,   169,   307,
+     171,   171,   170,   334,   307,   307,   165,   274,   171,   236,
+     171,   171,    88,   307,   193,   256,   257,   258,   259,   261,
+     170,   256,   174,   174,   238,   209,   171,   209,   172,   170,
+     340,   334,    14,   171,    31,   211,   242,   172,   244,   172,
+     244,   103,   247,   248,   249,   250,   307,   113,   114,   216,
+      99,   206,   168,   201,   203,   206,   172,   282,   311,   279,
+     168,   173,   264,    35,    37,    35,    37,   311,   174,   307,
+     169,   172,   340,   238,   211,    31,   172,   261,   171,   168,
+     201,    30,   121,   122,   123,   124,   260,   262,   267,   268,
+     269,   270,   256,   171,   311,   172,    92,   302,   340,   169,
+     239,    31,   211,   241,   209,   244,   101,   102,   103,   244,
+     174,   168,   201,   174,   168,   201,   168,   201,   170,   173,
+      74,   205,   174,   168,   201,   173,   102,   115,   118,   119,
+     120,   121,   122,   123,   124,   125,   174,   193,   234,   280,
+     281,   291,   292,   293,   294,   319,   279,   264,   264,   264,
+     264,   173,   174,   171,   311,   209,    31,   271,   258,   268,
+      38,   220,    35,    37,    35,    37,   171,   115,   315,   173,
+     172,   171,   171,   171,   209,    98,   101,   172,   307,    31,
+     172,   245,   174,    14,   249,   307,    14,   214,   319,   209,
+     206,   174,   279,   311,   282,   280,   262,   110,   310,   294,
+     174,   279,   173,   263,    14,   165,   221,   268,   268,   268,
+     268,   271,   170,   271,   279,    31,   211,   240,   241,    96,
+     172,   172,   245,   209,   307,   307,    35,    78,   215,   174,
+     174,   184,   172,   173,   283,    78,   295,   296,   184,   297,
+     298,   314,   174,   279,   312,    78,   312,    78,   183,   316,
+     317,   312,   174,   209,   172,   209,   319,   171,    16,   235,
+     118,   174,   184,   284,   285,   286,   287,   288,   289,   319,
+      16,   311,   168,   172,    16,   168,   172,   184,   174,   313,
+     311,   173,    78,   168,   201,   173,    94,   173,   307,   172,
+     174,   285,   172,   172,    99,   116,   163,   307,   296,   307,
+     298,   311,   307,    16,   209,   317,   171,   209,   172,   209,
+      74,   181,   294,   282,   184,   311,   311,   170,   312,   307,
+     174,   174,   174,   184,   256,   312,   312,   171,   271,   312,
+     172,   173,   290,   209,   312,   174
+};
+
+  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_int16 yyr1[] =
+{
+       0,   179,   180,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
+     181,   181,   181,   182,   182,   182,   182,   182,   182,   182,
+     182,   183,   183,   184,   184,   185,   185,   186,   186,   187,
+     187,   188,   188,   189,   189,   189,   189,   190,   190,   191,
+     191,   192,   193,   193,   194,   194,   194,   194,   194,   195,
+     195,   195,   195,   195,   196,   195,   197,   195,   195,   195,
+     195,   195,   195,   198,   198,   199,   200,   201,   201,   202,
+     202,   203,   203,   204,   204,   205,   205,   206,   206,   207,
+     207,   208,   208,   209,   209,   210,   210,   210,   210,   211,
+     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
+     211,   211,   211,   211,   211,   211,   211,   212,   211,   211,
+     211,   211,   211,   213,   213,   214,   214,   215,   215,   216,
+     216,   217,   217,   218,   219,   220,   220,   221,   221,   223,
+     222,   224,   222,   225,   225,   226,   226,   228,   227,   230,
+     229,   232,   231,   233,   233,   234,   235,   235,   236,   236,
+     237,   237,   238,   238,   239,   239,   239,   239,   240,   240,
+     241,   241,   242,   242,   243,   243,   243,   243,   244,   244,
+     244,   245,   245,   246,   247,   247,   248,   248,   249,   249,
+     250,   250,   251,   251,   252,   252,   253,   253,   254,   254,
+     255,   255,   256,   256,   257,   257,   258,   258,   259,   259,
+     260,   260,   260,   260,   261,   261,   262,   262,   263,   263,
+     263,   263,   264,   264,   265,   265,   266,   266,   267,   267,
+     267,   267,   268,   268,   268,   269,   269,   270,   270,   271,
+     271,   272,   272,   272,   273,   273,   274,   274,   274,   275,
+     275,   276,   277,   277,   278,   278,   279,   279,   280,   280,
+     280,   280,   281,   281,   281,   282,   282,   283,   283,   283,
+     284,   284,   285,   285,   286,   287,   287,   287,   287,   288,
+     288,   289,   290,   290,   291,   291,   292,   292,   293,   293,
+     294,   294,   294,   294,   294,   294,   294,   295,   295,   296,
+     296,   297,   297,   298,   299,   300,   300,   301,   302,   302,
+     303,   303,   305,   304,   306,   306,   306,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
+     308,   308,   309,   310,   311,   312,   313,   314,   314,   315,
+     315,   316,   316,   317,   317,   318,   318,   318,   318,   319,
+     319,   320,   320,   320,   321,   321,   322,   322,   322,   323,
+     323,   324,   324,   324,   324,   325,   325,   325,   325,   325,
+     325,   325,   325,   326,   326,   326,   326,   326,   326,   326,
+     326,   326,   327,   327,   328,   328,   329,   330,   330,   330,
+     330,   331,   331,   332,   332,   332,   333,   333,   333,   333,
+     333,   333,   334,   334,   334,   334,   335,   335,   335,   336,
+     336,   337,   337,   337,   337,   337,   337,   337,   338,   338,
+     338,   339,   339,   339,   340,   341,   341,   342,   342,   343,
+     343,   343,   343,   343,   343,   343,   344,   344,   344,   344,
+     345,   345,   345,   345,   345,   345,   345,   345,   346,   346,
+     346,   346,   347,   347,   347,   347,   347,   347,   347,   348,
+     348,   349
+};
+
+  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+static const yytype_int8 yyr2[] =
+{
+       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     2,     0,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
+       3,     4,     1,     2,     1,     1,     1,     1,     1,     1,
+       1,     2,     4,     3,     0,     6,     0,     5,     3,     4,
+       3,     4,     3,     1,     1,     6,     6,     0,     1,     3,
+       1,     3,     1,     3,     1,     1,     2,     1,     3,     1,
+       3,     3,     1,     2,     0,     1,     1,     2,     4,     3,
+       1,     1,     5,     7,     9,     5,     3,     3,     3,     3,
+       3,     3,     1,     2,     6,     7,     9,     0,     6,     1,
+       6,     3,     2,     0,     9,     1,     3,     0,     1,     0,
+       4,     1,     3,     1,    13,     0,     1,     0,     1,     0,
+      10,     0,     9,     1,     2,     1,     1,     0,     7,     0,
+       8,     0,     9,     0,     2,     5,     0,     2,     0,     2,
+       0,     2,     0,     2,     1,     2,     4,     3,     1,     4,
+       1,     4,     1,     4,     3,     4,     4,     5,     0,     5,
+       4,     1,     1,     7,     0,     2,     1,     3,     4,     4,
+       1,     3,     1,     4,     5,     6,     1,     3,     6,     7,
+       3,     6,     2,     0,     1,     3,     2,     1,     0,     2,
+       1,     1,     1,     1,     6,     8,     0,     1,     1,     2,
+       1,     1,     1,     1,     3,     3,     3,     3,     1,     2,
+       1,     1,     1,     1,     1,     3,     3,     3,     3,     0,
+       2,     2,     4,     3,     1,     3,     1,     3,     2,     3,
+       1,     1,     3,     1,     1,     3,     2,     0,     4,     4,
+      12,     1,     1,     2,     3,     1,     3,     1,     2,     3,
+       1,     2,     2,     2,     3,     3,     3,     4,     3,     1,
+       1,     3,     1,     3,     1,     1,     0,     1,     1,     2,
+       1,     1,     1,     1,     1,     1,     1,     3,     1,     2,
+       4,     3,     1,     4,     4,     3,     1,     1,     0,     1,
+       3,     1,     0,     9,     3,     2,     3,     1,     6,     5,
+       3,     4,     2,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
+       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     1,     5,     4,     3,     1,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     1,     3,     2,
+       1,     2,     4,     2,     2,     1,     2,     2,     3,     1,
+      13,    12,     1,     1,     0,     0,     0,     0,     1,     0,
+       5,     3,     1,     1,     2,     2,     4,     4,     2,     1,
+       1,     1,     1,     3,     0,     3,     0,     1,     1,     0,
+       1,     4,     3,     1,     3,     1,     1,     3,     2,     3,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     3,     3,     0,     1,     1,     1,     3,     1,
+       1,     1,     1,     1,     3,     1,     1,     4,     4,     4,
+       4,     1,     1,     1,     3,     3,     1,     4,     2,     3,
+       3,     1,     4,     4,     3,     3,     3,     3,     1,     3,
+       1,     1,     3,     1,     1,     0,     1,     3,     1,     3,
+       1,     4,     2,     2,     6,     4,     2,     2,     1,     2,
+       1,     4,     3,     3,     3,     3,     6,     3,     1,     1,
+       2,     1,     5,     4,     2,     2,     4,     2,     2,     1,
+       3,     1
+};
+
+
+#define yyerrok         (yyerrstatus = 0)
+#define yyclearin       (yychar = YYEMPTY)
+#define YYEMPTY         (-2)
+#define YYEOF           0
+
+#define YYACCEPT        goto yyacceptlab
+#define YYABORT         goto yyabortlab
+#define YYERROR         goto yyerrorlab
+
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)                                    \
+  do                                                              \
+    if (yychar == YYEMPTY)                                        \
+      {                                                           \
+        yychar = (Token);                                         \
+        yylval = (Value);                                         \
+        YYPOPSTACK (yylen);                                       \
+        yystate = *yyssp;                                         \
+        goto yybackup;                                            \
+      }                                                           \
+    else                                                          \
+      {                                                           \
+        yyerror (YY_("syntax error: cannot back up")); \
+        YYERROR;                                                  \
+      }                                                           \
+  while (0)
+
+/* Error token number */
+#define YYTERROR        1
+#define YYERRCODE       256
+
+
+
+/* Enable debugging if requested.  */
+#if ZENDDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)                        \
+do {                                            \
+  if (yydebug)                                  \
+    YYFPRINTF Args;                             \
+} while (0)
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
+do {                                                                      \
+  if (yydebug)                                                            \
+    {                                                                     \
+      YYFPRINTF (stderr, "%s ", Title);                                   \
+      yy_symbol_print (stderr,                                            \
+                  Type, Value); \
+      YYFPRINTF (stderr, "\n");                                           \
+    }                                                                     \
+} while (0)
+
+
+/*-----------------------------------.
+| Print this symbol's value on YYO.  |
+`-----------------------------------*/
+
+static void
+yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  FILE *yyoutput = yyo;
+  YYUSE (yyoutput);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
+# endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+/*---------------------------.
+| Print this symbol on YYO.  |
+`---------------------------*/
+
+static void
+yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  YYFPRINTF (yyo, "%s %s (",
+             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
+
+  yy_symbol_value_print (yyo, yytype, yyvaluep);
+  YYFPRINTF (yyo, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+static void
+yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)                            \
+do {                                                            \
+  if (yydebug)                                                  \
+    yy_stack_print ((Bottom), (Top));                           \
+} while (0)
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+static void
+yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)
+{
+  int yylno = yyrline[yyrule];
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
+             yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr,
+                       yystos[+yyssp[yyi + 1 - yynrhs]],
+                       &yyvsp[(yyi + 1) - (yynrhs)]
+                                              );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)          \
+do {                                    \
+  if (yydebug)                          \
+    yy_reduce_print (yyssp, yyvsp, Rule); \
+} while (0)
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !ZENDDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !ZENDDEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
+#  else
+/* Return the length of YYSTR.  */
+static YYPTRDIFF_T
+yystrlen (const char *yystr)
+{
+  YYPTRDIFF_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYPTRDIFF_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYPTRDIFF_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+        switch (*++yyp)
+          {
+          case '\'':
+          case ',':
+            goto do_not_strip_quotes;
+
+          case '\\':
+            if (*++yyp != '\\')
+              goto do_not_strip_quotes;
+            else
+              goto append;
+
+          append:
+          default:
+            if (yyres)
+              yyres[yyn] = *yyp;
+            yyn++;
+            break;
+
+          case '"':
+            if (yyres)
+              yyres[yyn] = '\0';
+            return yyn;
+          }
+    do_not_strip_quotes: ;
+    }
+
+  if (yyres)
+    return yystpcpy (yyres, yystr) - yyres;
+  else
+    return yystrlen (yystr);
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
+                yy_state_t *yyssp, int yytoken)
+{
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULLPTR;
+  /* Arguments of yyformat: reported tokens (one for the "unexpected",
+     one per "expected"). */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Actual size of YYARG. */
+  int yycount = 0;
+  /* Cumulated lengths of YYARG.  */
+  YYPTRDIFF_T yysize = 0;
+
+  /* There are many possibilities here to consider:
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[+*yyssp];
+      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+      yysize = yysize0;
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYPTRDIFF_T yysize1
+                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+                    yysize = yysize1;
+                  else
+                    return 2;
+                }
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+    default: /* Avoid compiler warnings. */
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    /* Don't count the "%s"s in the final size, but reserve room for
+       the terminator.  */
+    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
+    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+      yysize = yysize1;
+    else
+      return 2;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          ++yyp;
+          ++yyformat;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+{
+  YYUSE (yyvaluep);
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  switch (yytype)
+    {
+    case 72: /* "integer"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3525 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 73: /* "floating-point number"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3531 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 74: /* "identifier"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3537 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 75: /* "fully qualified name"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3543 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 76: /* "namespace-relative name"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3549 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 77: /* "namespaced name"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3555 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 78: /* "variable"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3561 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 79: /* T_INLINE_HTML  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3567 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 80: /* "string content"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3573 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 81: /* "quoted string"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3579 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 82: /* "variable name"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3585 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 83: /* "number"  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3591 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 184: /* identifier  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3597 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 185: /* top_statement_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3603 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 186: /* namespace_declaration_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3609 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 187: /* namespace_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3615 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 188: /* legacy_namespace_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3621 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 189: /* name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3627 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 190: /* attribute_decl  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3633 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 191: /* attribute_group  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3639 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 192: /* attribute  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3645 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 193: /* attributes  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3651 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 194: /* attributed_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3657 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 195: /* top_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3663 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 199: /* group_use_declaration  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3669 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 200: /* mixed_group_use_declaration  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3675 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 202: /* inline_use_declarations  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3681 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 203: /* unprefixed_use_declarations  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3687 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 204: /* use_declarations  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3693 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 205: /* inline_use_declaration  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3699 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 206: /* unprefixed_use_declaration  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3705 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 207: /* use_declaration  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3711 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 208: /* const_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3717 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 209: /* inner_statement_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3723 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 210: /* inner_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3729 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 211: /* statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3735 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 213: /* catch_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3741 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 214: /* catch_name_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3747 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 215: /* optional_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3753 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 216: /* finally_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3759 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 217: /* unset_variables  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3765 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 218: /* unset_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3771 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 219: /* function_declaration_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3777 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 222: /* class_declaration_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3783 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 227: /* trait_declaration_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3789 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 229: /* interface_declaration_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3795 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 231: /* enum_declaration_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3801 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 233: /* enum_backing_type  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3807 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 234: /* enum_case  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3813 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 235: /* enum_case_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3819 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 236: /* extends_from  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3825 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 237: /* interface_extends_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3831 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 238: /* implements_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3837 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 239: /* foreach_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3843 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 240: /* for_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3849 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 241: /* foreach_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3855 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 242: /* declare_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3861 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 243: /* switch_case_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3867 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 244: /* case_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3873 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 246: /* match  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3879 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 247: /* match_arm_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3885 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 248: /* non_empty_match_arm_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3891 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 249: /* match_arm  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3897 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 250: /* match_arm_cond_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3903 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 251: /* while_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3909 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 252: /* if_stmt_without_else  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3915 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 253: /* if_stmt  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3921 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 254: /* alt_if_stmt_without_else  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3927 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 255: /* alt_if_stmt  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3933 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 256: /* parameter_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3939 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 257: /* non_empty_parameter_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3945 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 258: /* attributed_parameter  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3951 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 261: /* parameter  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3957 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 262: /* optional_type_without_static  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3963 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 263: /* type_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3969 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 264: /* type  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3975 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 265: /* union_type  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3981 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 266: /* intersection_type  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3987 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 267: /* type_expr_without_static  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3993 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 268: /* type_without_static  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 3999 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 269: /* union_type_without_static  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4005 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 270: /* intersection_type_without_static  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4011 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 271: /* return_type  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4017 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 272: /* argument_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4023 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 273: /* non_empty_argument_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4029 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 274: /* argument  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4035 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 275: /* global_var_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4041 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 276: /* global_var  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4047 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 277: /* static_var_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4053 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 278: /* static_var  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4059 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 279: /* class_statement_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4065 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 280: /* attributed_class_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4071 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 281: /* class_statement  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4077 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 282: /* class_name_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4083 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 283: /* trait_adaptations  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4089 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 284: /* trait_adaptation_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4095 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 285: /* trait_adaptation  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4101 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 286: /* trait_precedence  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4107 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 287: /* trait_alias  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4113 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 288: /* trait_method_reference  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4119 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 289: /* absolute_trait_method_reference  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4125 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 290: /* method_body  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4131 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 295: /* property_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4137 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 296: /* property  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4143 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 297: /* class_const_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4149 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 298: /* class_const_decl  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4155 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 299: /* const_decl  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4161 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 300: /* echo_expr_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4167 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 301: /* echo_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4173 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 302: /* for_exprs  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4179 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 303: /* non_empty_for_exprs  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4185 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 304: /* anonymous_class  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4191 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 306: /* new_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4197 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 307: /* expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4203 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 308: /* inline_function  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4209 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 311: /* backup_doc_comment  */
+#line 52 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { if (((*yyvaluep).str)) zend_string_release_ex(((*yyvaluep).str), 0); }
+#line 4215 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 315: /* lexical_vars  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4221 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 316: /* lexical_var_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4227 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 317: /* lexical_var  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4233 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 318: /* function_call  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4239 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 319: /* class_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4245 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 320: /* class_name_reference  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4251 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 321: /* exit_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4257 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 322: /* backticks_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4263 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 323: /* ctor_arguments  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4269 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 324: /* dereferenceable_scalar  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4275 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 325: /* scalar  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4281 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 326: /* constant  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4287 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 327: /* class_constant  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4293 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 328: /* optional_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4299 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 329: /* variable_class_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4305 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 330: /* fully_dereferenceable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4311 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 331: /* array_object_dereferenceable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4317 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 332: /* callable_expr  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4323 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 333: /* callable_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4329 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 334: /* variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4335 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 335: /* simple_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4341 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 336: /* static_member  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4347 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 337: /* new_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4353 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 338: /* member_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4359 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 339: /* property_name  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4365 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 340: /* array_pair_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4371 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 341: /* possible_array_pair  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4377 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 342: /* non_empty_array_pair_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4383 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 343: /* array_pair  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4389 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 344: /* encaps_list  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4395 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 345: /* encaps_var  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4401 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 346: /* encaps_var_offset  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4407 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 347: /* internal_functions_in_yacc  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4413 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 348: /* isset_variables  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4419 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+    case 349: /* isset_variable  */
+#line 51 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+            { zend_ast_destroy(((*yyvaluep).ast)); }
+#line 4425 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+        break;
+
+      default:
+        break;
+    }
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+int
+yyparse (void)
+{
+/* The lookahead symbol.  */
+int yychar;
+
+
+/* The semantic value of the lookahead symbol.  */
+/* Default value used for initialization, for pacifying older GCCs
+   or non-GCC compilers.  */
+YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
+YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
+
+    /* Number of syntax errors so far.  */
+    int yynerrs;
+
+    yy_state_fast_t yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       'yyss': related to states.
+       'yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yy_state_t yyssa[YYINITDEPTH];
+    yy_state_t *yyss;
+    yy_state_t *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYPTRDIFF_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
+
+
+/*------------------------------------------------------------.
+| yynewstate -- push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+
+/*--------------------------------------------------------------------.
+| yysetstate -- set current state (the top of the stack) to yystate.  |
+`--------------------------------------------------------------------*/
+yysetstate:
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
+  YY_IGNORE_USELESS_CAST_BEGIN
+  *yyssp = YY_CAST (yy_state_t, yystate);
+  YY_IGNORE_USELESS_CAST_END
+
+  if (yyss + yystacksize - 1 <= yyssp)
+#if !defined yyoverflow && !defined YYSTACK_RELOCATE
+    goto yyexhaustedlab;
+#else
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYPTRDIFF_T yysize = yyssp - yyss + 1;
+
+# if defined yyoverflow
+      {
+        /* Give user a chance to reallocate the stack.  Use copies of
+           these so that the &'s don't force the real ones into
+           memory.  */
+        yy_state_t *yyss1 = yyss;
+        YYSTYPE *yyvs1 = yyvs;
+
+        /* Each stack pointer address is followed by the size of the
+           data in use in that stack, in bytes.  This used to be a
+           conditional around just the two extra args, but that might
+           be undefined if yyoverflow is a macro.  */
+        yyoverflow (YY_("memory exhausted"),
+                    &yyss1, yysize * YYSIZEOF (*yyssp),
+                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
+                    &yystacksize);
+        yyss = yyss1;
+        yyvs = yyvs1;
+      }
+# else /* defined YYSTACK_RELOCATE */
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+        goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+        yystacksize = YYMAXDEPTH;
+
+      {
+        yy_state_t *yyss1 = yyss;
+        union yyalloc *yyptr =
+          YY_CAST (union yyalloc *,
+                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
+        if (! yyptr)
+          goto yyexhaustedlab;
+        YYSTACK_RELOCATE (yyss_alloc, yyss);
+        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+# undef YYSTACK_RELOCATE
+        if (yyss1 != yyssa)
+          YYSTACK_FREE (yyss1);
+      }
+# endif
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YY_IGNORE_USELESS_CAST_BEGIN
+      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
+                  YY_CAST (long, yystacksize)));
+      YY_IGNORE_USELESS_CAST_END
+
+      if (yyss + yystacksize - 1 <= yyssp)
+        YYABORT;
+    }
+#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = yylex (&yylval);
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     '$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+  case 2:
+#line 295 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { CG(ast) = (yyvsp[0].ast); }
+#line 4699 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 83:
+#line 319 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = (yyvsp[0].ast); }
+#line 4705 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 84:
+#line 320 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               {
+			zval zv;
+			if (zend_lex_tstring(&zv, (yyvsp[0].ident)) == FAILURE) { YYABORT; }
+			(yyval.ast) = zend_ast_create_zval(&zv);
+		}
+#line 4715 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 85:
+#line 328 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                 { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 4721 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 86:
+#line 329 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_STMT_LIST); }
+#line 4727 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 87:
+#line 334 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4733 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 88:
+#line 335 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4739 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 89:
+#line 340 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4745 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 90:
+#line 341 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4751 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 91:
+#line 346 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4757 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 92:
+#line 347 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4763 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 93:
+#line 351 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                                { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_NAME_NOT_FQ; }
+#line 4769 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 94:
+#line 352 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                        { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_NAME_NOT_FQ; }
+#line 4775 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 95:
+#line 353 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_NAME_FQ; }
+#line 4781 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 96:
+#line 354 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                        { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_NAME_RELATIVE; }
+#line 4787 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 97:
+#line 359 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ATTRIBUTE, (yyvsp[0].ast), NULL); }
+#line 4793 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 98:
+#line 361 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ATTRIBUTE, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 4799 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 99:
+#line 366 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_ATTRIBUTE_GROUP, (yyvsp[0].ast)); }
+#line 4805 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 100:
+#line 368 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 4811 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 101:
+#line 372 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[-2].ast); }
+#line 4817 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 102:
+#line 376 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_ATTRIBUTE_LIST, (yyvsp[0].ast)); }
+#line 4823 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 103:
+#line 377 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 4829 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 104:
+#line 381 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4835 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 105:
+#line 382 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4841 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 106:
+#line 383 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4847 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 107:
+#line 384 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4853 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 108:
+#line 385 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4859 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 109:
+#line 389 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 4865 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 110:
+#line 390 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 4871 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 111:
+#line 391 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-1].ast)); }
+#line 4877 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 112:
+#line 393 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_HALT_COMPILER,
+			      zend_ast_create_zval_from_long(zend_get_scanned_file_offset()));
+			  zend_stop_lexing(); }
+#line 4885 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 113:
+#line 397 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NAMESPACE, (yyvsp[-1].ast), NULL);
+			  RESET_DOC_COMMENT(); }
+#line 4892 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 114:
+#line 399 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                       { RESET_DOC_COMMENT(); }
+#line 4898 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 115:
+#line 401 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NAMESPACE, (yyvsp[-4].ast), (yyvsp[-1].ast)); }
+#line 4904 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 116:
+#line 402 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { RESET_DOC_COMMENT(); }
+#line 4910 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 117:
+#line 404 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NAMESPACE, NULL, (yyvsp[-1].ast)); }
+#line 4916 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 118:
+#line 405 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 4922 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 119:
+#line 406 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = (yyvsp[-2].num); }
+#line 4928 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 120:
+#line 407 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = ZEND_SYMBOL_CLASS; }
+#line 4934 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 121:
+#line 408 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = (yyvsp[-2].num); }
+#line 4940 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 122:
+#line 409 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 4946 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 123:
+#line 413 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.num) = ZEND_SYMBOL_FUNCTION; }
+#line 4952 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 124:
+#line 414 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.num) = ZEND_SYMBOL_CONST; }
+#line 4958 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 125:
+#line 419 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_GROUP_USE, (yyvsp[-5].ast), (yyvsp[-2].ast)); }
+#line 4964 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 126:
+#line 424 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_GROUP_USE, (yyvsp[-5].ast), (yyvsp[-2].ast));}
+#line 4970 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 129:
+#line 434 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 4976 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 130:
+#line 436 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_USE, (yyvsp[0].ast)); }
+#line 4982 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 131:
+#line 441 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 4988 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 132:
+#line 443 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_USE, (yyvsp[0].ast)); }
+#line 4994 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 133:
+#line 448 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5000 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 134:
+#line 450 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_USE, (yyvsp[0].ast)); }
+#line 5006 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 135:
+#line 454 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                           { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_SYMBOL_CLASS; }
+#line 5012 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 136:
+#line 455 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                    { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = (yyvsp[-1].num); }
+#line 5018 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 137:
+#line 460 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_USE_ELEM, (yyvsp[0].ast), NULL); }
+#line 5024 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 138:
+#line 462 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_USE_ELEM, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5030 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 139:
+#line 467 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_USE_ELEM, (yyvsp[0].ast), NULL); }
+#line 5036 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 140:
+#line 469 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_USE_ELEM, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5042 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 141:
+#line 473 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                          { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5048 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 142:
+#line 474 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_CONST_DECL, (yyvsp[0].ast)); }
+#line 5054 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 143:
+#line 479 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 5060 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 144:
+#line 481 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_STMT_LIST); }
+#line 5066 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 145:
+#line 486 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 5072 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 146:
+#line 487 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5078 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 147:
+#line 488 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-1].ast)); }
+#line 5084 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 148:
+#line 490 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; zend_throw_exception(zend_ce_compile_error,
+			      "__HALT_COMPILER() can only be used from the outermost scope", 0); YYERROR; }
+#line 5091 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 149:
+#line 496 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                             { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5097 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 150:
+#line 497 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5103 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 151:
+#line 498 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.ast) = (yyvsp[0].ast); }
+#line 5109 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 152:
+#line 500 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_WHILE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5115 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 153:
+#line 502 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DO_WHILE, (yyvsp[-5].ast), (yyvsp[-2].ast)); }
+#line 5121 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 154:
+#line 504 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_FOR, (yyvsp[-6].ast), (yyvsp[-4].ast), (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5127 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 155:
+#line 506 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_SWITCH, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5133 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 156:
+#line 507 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = zend_ast_create(ZEND_AST_BREAK, (yyvsp[-1].ast)); }
+#line 5139 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 157:
+#line 508 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = zend_ast_create(ZEND_AST_CONTINUE, (yyvsp[-1].ast)); }
+#line 5145 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 158:
+#line 509 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = zend_ast_create(ZEND_AST_RETURN, (yyvsp[-1].ast)); }
+#line 5151 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 159:
+#line 510 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5157 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 160:
+#line 511 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5163 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 161:
+#line 512 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5169 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 162:
+#line 513 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                              { (yyval.ast) = zend_ast_create(ZEND_AST_ECHO, (yyvsp[0].ast)); }
+#line 5175 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 163:
+#line 514 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5181 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 164:
+#line 515 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                   { (yyval.ast) = (yyvsp[-3].ast); }
+#line 5187 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 165:
+#line 517 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_FOREACH, (yyvsp[-4].ast), (yyvsp[-2].ast), NULL, (yyvsp[0].ast)); }
+#line 5193 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 166:
+#line 520 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_FOREACH, (yyvsp[-6].ast), (yyvsp[-2].ast), (yyvsp[-4].ast), (yyvsp[0].ast)); }
+#line 5199 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 167:
+#line 522 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { if (!zend_handle_encoding_declaration((yyvsp[-1].ast))) { YYERROR; } }
+#line 5205 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 168:
+#line 524 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DECLARE, (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 5211 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 169:
+#line 525 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                              { (yyval.ast) = NULL; }
+#line 5217 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 170:
+#line 527 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_TRY, (yyvsp[-3].ast), (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 5223 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 171:
+#line 528 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                    { (yyval.ast) = zend_ast_create(ZEND_AST_GOTO, (yyvsp[-1].ast)); }
+#line 5229 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 172:
+#line 529 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             { (yyval.ast) = zend_ast_create(ZEND_AST_LABEL, (yyvsp[-1].ast)); }
+#line 5235 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 173:
+#line 534 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_CATCH_LIST); }
+#line 5241 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 174:
+#line 536 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-8].ast), zend_ast_create(ZEND_AST_CATCH, (yyvsp[-5].ast), (yyvsp[-4].ast), (yyvsp[-1].ast))); }
+#line 5247 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 175:
+#line 540 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_NAME_LIST, (yyvsp[0].ast)); }
+#line 5253 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 176:
+#line 541 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5259 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 177:
+#line 545 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = NULL; }
+#line 5265 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 178:
+#line 546 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = (yyvsp[0].ast); }
+#line 5271 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 179:
+#line 550 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = NULL; }
+#line 5277 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 180:
+#line 551 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                       { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5283 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 181:
+#line 555 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_STMT_LIST, (yyvsp[0].ast)); }
+#line 5289 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 182:
+#line 556 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                   { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5295 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 183:
+#line 560 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = zend_ast_create(ZEND_AST_UNSET, (yyvsp[0].ast)); }
+#line 5301 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 184:
+#line 566 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                { (yyval.ast) = zend_ast_create_decl(ZEND_AST_FUNC_DECL, (yyvsp[-11].num) | (yyvsp[0].num), (yyvsp[-12].num), (yyvsp[-9].str),
+		      zend_ast_get_str((yyvsp[-10].ast)), (yyvsp[-7].ast), NULL, (yyvsp[-2].ast), (yyvsp[-5].ast), NULL); CG(extra_fn_flags) = (yyvsp[-4].num); }
+#line 5308 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 185:
+#line 571 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = 0; }
+#line 5314 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 186:
+#line 572 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_PARAM_REF; }
+#line 5320 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 187:
+#line 576 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.num) = 0; }
+#line 5326 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 188:
+#line 577 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.num) = ZEND_PARAM_VARIADIC; }
+#line 5332 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 189:
+#line 581 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.num) = CG(zend_lineno); }
+#line 5338 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 190:
+#line 583 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLASS, (yyvsp[-9].num), (yyvsp[-7].num), (yyvsp[-3].str), zend_ast_get_str((yyvsp[-6].ast)), (yyvsp[-5].ast), (yyvsp[-4].ast), (yyvsp[-1].ast), NULL, NULL); }
+#line 5344 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 191:
+#line 584 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = CG(zend_lineno); }
+#line 5350 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 192:
+#line 586 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLASS, 0, (yyvsp[-7].num), (yyvsp[-3].str), zend_ast_get_str((yyvsp[-6].ast)), (yyvsp[-5].ast), (yyvsp[-4].ast), (yyvsp[-1].ast), NULL, NULL); }
+#line 5356 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 193:
+#line 590 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.num) = (yyvsp[0].num); }
+#line 5362 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 194:
+#line 592 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = zend_add_class_modifier((yyvsp[-1].num), (yyvsp[0].num)); if (!(yyval.num)) { YYERROR; } }
+#line 5368 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 195:
+#line 596 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.num) = ZEND_ACC_EXPLICIT_ABSTRACT_CLASS; }
+#line 5374 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 196:
+#line 597 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.num) = ZEND_ACC_FINAL; }
+#line 5380 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 197:
+#line 601 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = CG(zend_lineno); }
+#line 5386 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 198:
+#line 603 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLASS, ZEND_ACC_TRAIT, (yyvsp[-5].num), (yyvsp[-3].str), zend_ast_get_str((yyvsp[-4].ast)), NULL, NULL, (yyvsp[-1].ast), NULL, NULL); }
+#line 5392 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 199:
+#line 607 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.num) = CG(zend_lineno); }
+#line 5398 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 200:
+#line 609 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLASS, ZEND_ACC_INTERFACE, (yyvsp[-6].num), (yyvsp[-3].str), zend_ast_get_str((yyvsp[-5].ast)), NULL, (yyvsp[-4].ast), (yyvsp[-1].ast), NULL, NULL); }
+#line 5404 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 201:
+#line 613 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.num) = CG(zend_lineno); }
+#line 5410 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 202:
+#line 615 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLASS, ZEND_ACC_ENUM|ZEND_ACC_FINAL, (yyvsp[-7].num), (yyvsp[-3].str), zend_ast_get_str((yyvsp[-6].ast)), NULL, (yyvsp[-4].ast), (yyvsp[-1].ast), NULL, (yyvsp[-5].ast)); }
+#line 5416 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 203:
+#line 619 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; }
+#line 5422 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 204:
+#line 620 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                              { (yyval.ast) = (yyvsp[0].ast); }
+#line 5428 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 205:
+#line 625 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ENUM_CASE, (yyvsp[-2].ast), (yyvsp[-1].ast), ((yyvsp[-3].str) ? zend_ast_create_zval_from_str((yyvsp[-3].str)) : NULL), NULL); }
+#line 5434 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 206:
+#line 629 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; }
+#line 5440 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 207:
+#line 630 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = (yyvsp[0].ast); }
+#line 5446 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 208:
+#line 634 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = NULL; }
+#line 5452 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 209:
+#line 635 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5458 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 210:
+#line 639 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = NULL; }
+#line 5464 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 211:
+#line 640 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5470 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 212:
+#line 644 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = NULL; }
+#line 5476 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 213:
+#line 645 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5482 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 214:
+#line 649 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5488 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 215:
+#line 650 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create(ZEND_AST_REF, (yyvsp[0].ast)); }
+#line 5494 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 216:
+#line 651 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = ZEND_ARRAY_SYNTAX_LIST; }
+#line 5500 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 217:
+#line 652 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = ZEND_ARRAY_SYNTAX_SHORT; }
+#line 5506 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 218:
+#line 656 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 5512 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 219:
+#line 657 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                      { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5518 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 220:
+#line 661 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 5524 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 221:
+#line 662 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                          { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5530 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 222:
+#line 666 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 5536 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 223:
+#line 667 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                          { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5542 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 224:
+#line 671 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5548 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 225:
+#line 672 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5554 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 226:
+#line 673 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5560 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 227:
+#line 674 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5566 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 228:
+#line 678 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_SWITCH_LIST); }
+#line 5572 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 229:
+#line 680 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-4].ast), zend_ast_create(ZEND_AST_SWITCH_CASE, (yyvsp[-2].ast), (yyvsp[0].ast))); }
+#line 5578 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 230:
+#line 682 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-3].ast), zend_ast_create(ZEND_AST_SWITCH_CASE, NULL, (yyvsp[0].ast))); }
+#line 5584 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 233:
+#line 693 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_MATCH, (yyvsp[-4].ast), (yyvsp[-1].ast)); }
+#line 5590 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 234:
+#line 697 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_MATCH_ARM_LIST); }
+#line 5596 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 235:
+#line 698 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5602 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 236:
+#line 702 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_MATCH_ARM_LIST, (yyvsp[0].ast)); }
+#line 5608 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 237:
+#line 703 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                       { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5614 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 238:
+#line 708 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_MATCH_ARM, (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 5620 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 239:
+#line 710 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_MATCH_ARM, NULL, (yyvsp[0].ast)); }
+#line 5626 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 240:
+#line 714 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                     { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_EXPR_LIST, (yyvsp[0].ast)); }
+#line 5632 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 241:
+#line 715 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                             { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5638 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 242:
+#line 720 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 5644 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 243:
+#line 721 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5650 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 244:
+#line 727 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_IF,
+			      zend_ast_create(ZEND_AST_IF_ELEM, (yyvsp[-2].ast), (yyvsp[0].ast))); }
+#line 5657 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 245:
+#line 730 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-5].ast),
+			      zend_ast_create(ZEND_AST_IF_ELEM, (yyvsp[-2].ast), (yyvsp[0].ast))); }
+#line 5664 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 246:
+#line 735 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                    { (yyval.ast) = (yyvsp[0].ast); }
+#line 5670 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 247:
+#line 737 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), zend_ast_create(ZEND_AST_IF_ELEM, NULL, (yyvsp[0].ast))); }
+#line 5676 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 248:
+#line 742 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_IF,
+			      zend_ast_create(ZEND_AST_IF_ELEM, (yyvsp[-3].ast), (yyvsp[0].ast))); }
+#line 5683 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 249:
+#line 745 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-6].ast),
+			      zend_ast_create(ZEND_AST_IF_ELEM, (yyvsp[-3].ast), (yyvsp[0].ast))); }
+#line 5690 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 250:
+#line 750 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                     { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5696 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 251:
+#line 752 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-5].ast),
+			      zend_ast_create(ZEND_AST_IF_ELEM, NULL, (yyvsp[-2].ast))); }
+#line 5703 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 252:
+#line 757 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 5709 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 253:
+#line 758 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_PARAM_LIST); }
+#line 5715 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 254:
+#line 764 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_PARAM_LIST, (yyvsp[0].ast)); }
+#line 5721 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 255:
+#line 766 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5727 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 256:
+#line 770 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-1].ast)); }
+#line 5733 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 257:
+#line 771 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5739 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 258:
+#line 775 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = 0; }
+#line 5745 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 259:
+#line 777 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = zend_add_member_modifier((yyvsp[-1].num), (yyvsp[0].num)); if (!(yyval.num)) { YYERROR; } }
+#line 5751 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 260:
+#line 780 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PUBLIC; }
+#line 5757 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 261:
+#line 781 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PROTECTED; }
+#line 5763 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 262:
+#line 782 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PRIVATE; }
+#line 5769 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 263:
+#line 783 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_READONLY; }
+#line 5775 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 264:
+#line 789 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_PARAM, (yyvsp[-5].num) | (yyvsp[-3].num) | (yyvsp[-2].num), (yyvsp[-4].ast), (yyvsp[-1].ast), NULL,
+					NULL, (yyvsp[0].str) ? zend_ast_create_zval_from_str((yyvsp[0].str)) : NULL); }
+#line 5782 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 265:
+#line 793 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_PARAM, (yyvsp[-7].num) | (yyvsp[-5].num) | (yyvsp[-4].num), (yyvsp[-6].ast), (yyvsp[-3].ast), (yyvsp[0].ast),
+					NULL, (yyvsp[-2].str) ? zend_ast_create_zval_from_str((yyvsp[-2].str)) : NULL); }
+#line 5789 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 266:
+#line 799 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; }
+#line 5795 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 267:
+#line 800 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5801 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 268:
+#line 804 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5807 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 269:
+#line 805 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr |= ZEND_TYPE_NULLABLE; }
+#line 5813 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 270:
+#line 806 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5819 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 271:
+#line 807 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5825 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 272:
+#line 811 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5831 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 273:
+#line 812 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_TYPE, IS_STATIC); }
+#line 5837 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 274:
+#line 816 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                    { (yyval.ast) = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5843 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 275:
+#line 817 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                    { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5849 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 276:
+#line 821 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                          { (yyval.ast) = zend_ast_create_list(2, ZEND_AST_TYPE_INTERSECTION, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5855 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 277:
+#line 822 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                 { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5861 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 278:
+#line 829 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5867 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 279:
+#line 830 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr |= ZEND_TYPE_NULLABLE; }
+#line 5873 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 280:
+#line 831 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5879 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 281:
+#line 832 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 5885 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 282:
+#line 836 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }
+#line 5891 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 283:
+#line 837 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }
+#line 5897 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 284:
+#line 838 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5903 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 285:
+#line 843 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5909 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 286:
+#line 845 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5915 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 287:
+#line 850 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(2, ZEND_AST_TYPE_INTERSECTION, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5921 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 288:
+#line 852 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5927 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 289:
+#line 856 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; }
+#line 5933 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 290:
+#line 857 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5939 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 291:
+#line 861 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_ARG_LIST); }
+#line 5945 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 292:
+#line 862 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                               { (yyval.ast) = (yyvsp[-2].ast); }
+#line 5951 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 293:
+#line 863 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                   { (yyval.ast) = zend_ast_create(ZEND_AST_CALLABLE_CONVERT); }
+#line 5957 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 294:
+#line 868 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_ARG_LIST, (yyvsp[0].ast)); }
+#line 5963 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 295:
+#line 870 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5969 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 296:
+#line 874 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 5975 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 297:
+#line 876 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NAMED_ARG, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5981 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 298:
+#line 877 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create(ZEND_AST_UNPACK, (yyvsp[0].ast)); }
+#line 5987 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 299:
+#line 881 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 5993 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 300:
+#line 882 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_STMT_LIST, (yyvsp[0].ast)); }
+#line 5999 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 301:
+#line 887 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                { (yyval.ast) = zend_ast_create(ZEND_AST_GLOBAL, zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast))); }
+#line 6005 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 302:
+#line 892 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6011 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 303:
+#line 893 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_STMT_LIST, (yyvsp[0].ast)); }
+#line 6017 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 304:
+#line 897 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC, (yyvsp[0].ast), NULL); }
+#line 6023 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 305:
+#line 898 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6029 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 306:
+#line 903 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 6035 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 307:
+#line 905 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_STMT_LIST); }
+#line 6041 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 308:
+#line 911 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP_GROUP, (yyvsp[-2].ast), (yyvsp[-1].ast), NULL);
+			  (yyval.ast)->attr = (yyvsp[-3].num); }
+#line 6048 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 309:
+#line 914 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_CLASS_CONST_GROUP, (yyvsp[-1].ast), NULL);
+			  (yyval.ast)->attr = (yyvsp[-3].num); }
+#line 6055 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 310:
+#line 918 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_METHOD, (yyvsp[-9].num) | (yyvsp[-11].num) | (yyvsp[0].num), (yyvsp[-10].num), (yyvsp[-7].str),
+				  zend_ast_get_str((yyvsp[-8].ast)), (yyvsp[-5].ast), NULL, (yyvsp[-1].ast), (yyvsp[-3].ast), NULL); CG(extra_fn_flags) = (yyvsp[-2].num); }
+#line 6062 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 311:
+#line 920 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 6068 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 312:
+#line 924 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                           { (yyval.ast) = (yyvsp[0].ast); }
+#line 6074 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 313:
+#line 925 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                      { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-1].ast)); }
+#line 6080 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 314:
+#line 927 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_USE_TRAIT, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 6086 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 315:
+#line 931 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_NAME_LIST, (yyvsp[0].ast)); }
+#line 6092 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 316:
+#line 932 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6098 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 317:
+#line 936 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                { (yyval.ast) = NULL; }
+#line 6104 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 318:
+#line 937 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = NULL; }
+#line 6110 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 319:
+#line 938 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 6116 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 320:
+#line 943 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_TRAIT_ADAPTATIONS, (yyvsp[0].ast)); }
+#line 6122 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 321:
+#line 945 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 6128 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 322:
+#line 949 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 6134 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 323:
+#line 950 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 6140 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 324:
+#line 955 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                { (yyval.ast) = zend_ast_create(ZEND_AST_TRAIT_PRECEDENCE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6146 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 325:
+#line 960 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_TRAIT_ALIAS, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6152 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 326:
+#line 962 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { zval zv;
+			  if (zend_lex_tstring(&zv, (yyvsp[0].ident)) == FAILURE) { YYABORT; }
+			  (yyval.ast) = zend_ast_create(ZEND_AST_TRAIT_ALIAS, (yyvsp[-2].ast), zend_ast_create_zval(&zv)); }
+#line 6160 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 327:
+#line 966 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_TRAIT_ALIAS, (yyvsp[-1].num), (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 6166 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 328:
+#line 968 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_TRAIT_ALIAS, (yyvsp[0].num), (yyvsp[-2].ast), NULL); }
+#line 6172 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 329:
+#line 973 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_METHOD_REFERENCE, NULL, (yyvsp[0].ast)); }
+#line 6178 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 330:
+#line 974 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 6184 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 331:
+#line 979 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                { (yyval.ast) = zend_ast_create(ZEND_AST_METHOD_REFERENCE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6190 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 332:
+#line 983 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = NULL; }
+#line 6196 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 333:
+#line 984 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 6202 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 334:
+#line 988 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = (yyvsp[0].num); }
+#line 6208 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 335:
+#line 989 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.num) = ZEND_ACC_PUBLIC; }
+#line 6214 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 336:
+#line 993 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.num) = ZEND_ACC_PUBLIC; }
+#line 6220 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 337:
+#line 995 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = (yyvsp[0].num); if (!((yyval.num) & ZEND_ACC_PPP_MASK)) { (yyval.num) |= ZEND_ACC_PUBLIC; } }
+#line 6226 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 338:
+#line 999 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.num) = (yyvsp[0].num); }
+#line 6232 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 339:
+#line 1001 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = zend_add_member_modifier((yyvsp[-1].num), (yyvsp[0].num)); if (!(yyval.num)) { YYERROR; } }
+#line 6238 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 340:
+#line 1005 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PUBLIC; }
+#line 6244 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 341:
+#line 1006 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PROTECTED; }
+#line 6250 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 342:
+#line 1007 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_PRIVATE; }
+#line 6256 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 343:
+#line 1008 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_STATIC; }
+#line 6262 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 344:
+#line 1009 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_ABSTRACT; }
+#line 6268 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 345:
+#line 1010 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_FINAL; }
+#line 6274 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 346:
+#line 1011 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.num) = ZEND_ACC_READONLY; }
+#line 6280 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 347:
+#line 1015 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                           { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6286 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 348:
+#line 1016 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_PROP_DECL, (yyvsp[0].ast)); }
+#line 6292 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 349:
+#line 1021 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP_ELEM, (yyvsp[-1].ast), NULL, ((yyvsp[0].str) ? zend_ast_create_zval_from_str((yyvsp[0].str)) : NULL)); }
+#line 6298 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 350:
+#line 1023 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP_ELEM, (yyvsp[-3].ast), (yyvsp[-1].ast), ((yyvsp[0].str) ? zend_ast_create_zval_from_str((yyvsp[0].str)) : NULL)); }
+#line 6304 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 351:
+#line 1027 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                      { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6310 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 352:
+#line 1028 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                 { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_CLASS_CONST_DECL, (yyvsp[0].ast)); }
+#line 6316 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 353:
+#line 1032 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                               { (yyval.ast) = zend_ast_create(ZEND_AST_CONST_ELEM, (yyvsp[-3].ast), (yyvsp[-1].ast), ((yyvsp[0].str) ? zend_ast_create_zval_from_str((yyvsp[0].str)) : NULL)); }
+#line 6322 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 354:
+#line 1036 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                             { (yyval.ast) = zend_ast_create(ZEND_AST_CONST_ELEM, (yyvsp[-3].ast), (yyvsp[-1].ast), ((yyvsp[0].str) ? zend_ast_create_zval_from_str((yyvsp[0].str)) : NULL)); }
+#line 6328 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 355:
+#line 1040 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                             { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6334 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 356:
+#line 1041 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                          { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_STMT_LIST, (yyvsp[0].ast)); }
+#line 6340 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 357:
+#line 1044 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+             { (yyval.ast) = zend_ast_create(ZEND_AST_ECHO, (yyvsp[0].ast)); }
+#line 6346 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 358:
+#line 1048 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = NULL; }
+#line 6352 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 359:
+#line 1049 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 6358 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 360:
+#line 1053 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                             { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6364 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 361:
+#line 1054 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                     { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_EXPR_LIST, (yyvsp[0].ast)); }
+#line 6370 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 362:
+#line 1058 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                { (yyval.num) = CG(zend_lineno); }
+#line 6376 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 363:
+#line 1059 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                                             {
+			zend_ast *decl = zend_ast_create_decl(
+				ZEND_AST_CLASS, ZEND_ACC_ANON_CLASS, (yyvsp[-7].num), (yyvsp[-3].str), NULL,
+				(yyvsp[-5].ast), (yyvsp[-4].ast), (yyvsp[-1].ast), NULL, NULL);
+			(yyval.ast) = zend_ast_create(ZEND_AST_NEW, decl, (yyvsp[-6].ast));
+		}
+#line 6387 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 364:
+#line 1069 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NEW, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 6393 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 365:
+#line 1071 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 6399 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 366:
+#line 1073 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { zend_ast_with_attributes((yyvsp[0].ast)->child[0], (yyvsp[-1].ast)); (yyval.ast) = (yyvsp[0].ast); }
+#line 6405 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 367:
+#line 1078 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 6411 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 368:
+#line 1080 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyvsp[-3].ast)->attr = ZEND_ARRAY_SYNTAX_LIST; (yyval.ast) = zend_ast_create(ZEND_AST_ASSIGN, (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 6417 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 369:
+#line 1082 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyvsp[-3].ast)->attr = ZEND_ARRAY_SYNTAX_SHORT; (yyval.ast) = zend_ast_create(ZEND_AST_ASSIGN, (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 6423 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 370:
+#line 1084 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ASSIGN, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6429 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 371:
+#line 1086 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ASSIGN_REF, (yyvsp[-3].ast), (yyvsp[0].ast)); }
+#line 6435 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 372:
+#line 1087 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             { (yyval.ast) = zend_ast_create(ZEND_AST_CLONE, (yyvsp[0].ast)); }
+#line 6441 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 373:
+#line 1089 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_ADD, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6447 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 374:
+#line 1091 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_SUB, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6453 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 375:
+#line 1093 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_MUL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6459 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 376:
+#line 1095 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_POW, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6465 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 377:
+#line 1097 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_DIV, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6471 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 378:
+#line 1099 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_CONCAT, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6477 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 379:
+#line 1101 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_MOD, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6483 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 380:
+#line 1103 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_BW_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6489 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 381:
+#line 1105 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_BW_OR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6495 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 382:
+#line 1107 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_BW_XOR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6501 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 383:
+#line 1109 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_SL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6507 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 384:
+#line 1111 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_assign_op(ZEND_SR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6513 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 385:
+#line 1113 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ASSIGN_COALESCE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6519 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 386:
+#line 1114 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = zend_ast_create(ZEND_AST_POST_INC, (yyvsp[-1].ast)); }
+#line 6525 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 387:
+#line 1115 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = zend_ast_create(ZEND_AST_PRE_INC, (yyvsp[0].ast)); }
+#line 6531 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 388:
+#line 1116 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = zend_ast_create(ZEND_AST_POST_DEC, (yyvsp[-1].ast)); }
+#line 6537 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 389:
+#line 1117 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = zend_ast_create(ZEND_AST_PRE_DEC, (yyvsp[0].ast)); }
+#line 6543 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 390:
+#line 1119 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_OR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6549 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 391:
+#line 1121 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6555 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 392:
+#line 1123 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_OR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6561 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 393:
+#line 1125 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6567 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 394:
+#line 1127 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_BOOL_XOR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6573 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 395:
+#line 1128 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_BW_OR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6579 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 396:
+#line 1129 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_BW_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6585 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 397:
+#line 1130 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_BW_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6591 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 398:
+#line 1131 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_BW_XOR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6597 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 399:
+#line 1132 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_CONCAT, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6603 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 400:
+#line 1133 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_ADD, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6609 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 401:
+#line 1134 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_SUB, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6615 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 402:
+#line 1135 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_MUL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6621 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 403:
+#line 1136 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_POW, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6627 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 404:
+#line 1137 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_DIV, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6633 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 405:
+#line 1138 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_MOD, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6639 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 406:
+#line 1139 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_SL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6645 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 407:
+#line 1140 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_binary_op(ZEND_SR, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6651 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 408:
+#line 1141 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                   { (yyval.ast) = zend_ast_create(ZEND_AST_UNARY_PLUS, (yyvsp[0].ast)); }
+#line 6657 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 409:
+#line 1142 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                   { (yyval.ast) = zend_ast_create(ZEND_AST_UNARY_MINUS, (yyvsp[0].ast)); }
+#line 6663 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 410:
+#line 1143 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = zend_ast_create_ex(ZEND_AST_UNARY_OP, ZEND_BOOL_NOT, (yyvsp[0].ast)); }
+#line 6669 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 411:
+#line 1144 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = zend_ast_create_ex(ZEND_AST_UNARY_OP, ZEND_BW_NOT, (yyvsp[0].ast)); }
+#line 6675 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 412:
+#line 1146 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_IDENTICAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6681 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 413:
+#line 1148 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_NOT_IDENTICAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6687 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 414:
+#line 1150 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_EQUAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6693 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 415:
+#line 1152 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_NOT_EQUAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6699 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 416:
+#line 1154 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_SMALLER, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6705 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 417:
+#line 1156 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_IS_SMALLER_OR_EQUAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6711 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 418:
+#line 1158 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_GREATER, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6717 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 419:
+#line 1160 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_GREATER_EQUAL, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6723 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 420:
+#line 1162 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_binary_op(ZEND_SPACESHIP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6729 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 421:
+#line 1164 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_INSTANCEOF, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6735 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 422:
+#line 1165 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             {
+			(yyval.ast) = (yyvsp[-1].ast);
+			if ((yyval.ast)->kind == ZEND_AST_CONDITIONAL) (yyval.ast)->attr = ZEND_PARENTHESIZED_CONDITIONAL;
+		}
+#line 6744 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 423:
+#line 1169 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = (yyvsp[0].ast); }
+#line 6750 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 424:
+#line 1171 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_CONDITIONAL, (yyvsp[-4].ast), (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6756 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 425:
+#line 1173 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_CONDITIONAL, (yyvsp[-3].ast), NULL, (yyvsp[0].ast)); }
+#line 6762 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 426:
+#line 1175 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_COALESCE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6768 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 427:
+#line 1176 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                           { (yyval.ast) = (yyvsp[0].ast); }
+#line 6774 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 428:
+#line 1177 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_LONG, (yyvsp[0].ast)); }
+#line 6780 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 429:
+#line 1178 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_DOUBLE, (yyvsp[0].ast)); }
+#line 6786 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 430:
+#line 1179 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_STRING, (yyvsp[0].ast)); }
+#line 6792 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 431:
+#line 1180 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_ARRAY, (yyvsp[0].ast)); }
+#line 6798 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 432:
+#line 1181 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_OBJECT, (yyvsp[0].ast)); }
+#line 6804 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 433:
+#line 1182 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(_IS_BOOL, (yyvsp[0].ast)); }
+#line 6810 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 434:
+#line 1183 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create_cast(IS_NULL, (yyvsp[0].ast)); }
+#line 6816 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 435:
+#line 1184 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create(ZEND_AST_EXIT, (yyvsp[0].ast)); }
+#line 6822 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 436:
+#line 1185 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = zend_ast_create(ZEND_AST_SILENCE, (yyvsp[0].ast)); }
+#line 6828 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 437:
+#line 1186 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = (yyvsp[0].ast); }
+#line 6834 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 438:
+#line 1187 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                       { (yyval.ast) = zend_ast_create(ZEND_AST_SHELL_EXEC, (yyvsp[-1].ast)); }
+#line 6840 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 439:
+#line 1188 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             { (yyval.ast) = zend_ast_create(ZEND_AST_PRINT, (yyvsp[0].ast)); }
+#line 6846 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 440:
+#line 1189 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_YIELD, NULL, NULL); CG(extra_fn_flags) |= ZEND_ACC_GENERATOR; }
+#line 6852 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 441:
+#line 1190 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             { (yyval.ast) = zend_ast_create(ZEND_AST_YIELD, (yyvsp[0].ast), NULL); CG(extra_fn_flags) |= ZEND_ACC_GENERATOR; }
+#line 6858 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 442:
+#line 1191 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                 { (yyval.ast) = zend_ast_create(ZEND_AST_YIELD, (yyvsp[0].ast), (yyvsp[-2].ast)); CG(extra_fn_flags) |= ZEND_ACC_GENERATOR; }
+#line 6864 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 443:
+#line 1192 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                  { (yyval.ast) = zend_ast_create(ZEND_AST_YIELD_FROM, (yyvsp[0].ast)); CG(extra_fn_flags) |= ZEND_ACC_GENERATOR; }
+#line 6870 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 444:
+#line 1193 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                             { (yyval.ast) = zend_ast_create(ZEND_AST_THROW, (yyvsp[0].ast)); }
+#line 6876 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 445:
+#line 1194 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 6882 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 446:
+#line 1195 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                           { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-1].ast)); }
+#line 6888 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 447:
+#line 1196 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                         { (yyval.ast) = (yyvsp[0].ast); ((zend_ast_decl *) (yyval.ast))->flags |= ZEND_ACC_STATIC; }
+#line 6894 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 448:
+#line 1198 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_with_attributes((yyvsp[0].ast), (yyvsp[-2].ast)); ((zend_ast_decl *) (yyval.ast))->flags |= ZEND_ACC_STATIC; }
+#line 6900 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 449:
+#line 1199 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                      { (yyval.ast) = (yyvsp[0].ast); }
+#line 6906 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 450:
+#line 1206 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_CLOSURE, (yyvsp[-11].num) | (yyvsp[0].num), (yyvsp[-12].num), (yyvsp[-10].str),
+				  zend_string_init("{closure}", sizeof("{closure}") - 1, 0),
+				  (yyvsp[-8].ast), (yyvsp[-6].ast), (yyvsp[-2].ast), (yyvsp[-5].ast), NULL); CG(extra_fn_flags) = (yyvsp[-4].num); }
+#line 6914 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 451:
+#line 1211 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, (yyvsp[-10].num) | (yyvsp[0].num), (yyvsp[-11].num), (yyvsp[-9].str),
+				  zend_string_init("{closure}", sizeof("{closure}") - 1, 0), (yyvsp[-7].ast), NULL,
+				  zend_ast_create(ZEND_AST_RETURN, (yyvsp[-1].ast)), (yyvsp[-5].ast), NULL);
+				  ((zend_ast_decl *) (yyval.ast))->lex_pos = (yyvsp[-2].ptr);
+				  CG(extra_fn_flags) = (yyvsp[-3].num); }
+#line 6924 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 452:
+#line 1219 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+             { (yyval.num) = CG(zend_lineno); }
+#line 6930 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 453:
+#line 1223 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                   { (yyval.num) = CG(zend_lineno); }
+#line 6936 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 454:
+#line 1227 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+               { (yyval.str) = CG(doc_comment); CG(doc_comment) = NULL; }
+#line 6942 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 455:
+#line 1231 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                         { (yyval.num) = CG(extra_fn_flags); CG(extra_fn_flags) = 0; }
+#line 6948 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 456:
+#line 1235 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+               { (yyval.ptr) = LANG_SCNG(yy_text); }
+#line 6954 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 457:
+#line 1239 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.num) = 0; }
+#line 6960 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 458:
+#line 1240 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.num) = ZEND_ACC_RETURN_REFERENCE; }
+#line 6966 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 459:
+#line 1244 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = NULL; }
+#line 6972 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 460:
+#line 1245 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                              { (yyval.ast) = (yyvsp[-2].ast); }
+#line 6978 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 461:
+#line 1249 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                 { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 6984 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 462:
+#line 1250 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_CLOSURE_USES, (yyvsp[0].ast)); }
+#line 6990 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 463:
+#line 1254 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 6996 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 464:
+#line 1255 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); (yyval.ast)->attr = ZEND_BIND_REF; }
+#line 7002 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 465:
+#line 1260 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_CALL, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7008 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 466:
+#line 1262 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_CALL, (yyvsp[-3].ast), (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7014 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 467:
+#line 1264 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_CALL, (yyvsp[-3].ast), (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7020 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 468:
+#line 1266 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_CALL, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7026 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 469:
+#line 1271 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { zval zv; ZVAL_INTERNED_STR(&zv, ZSTR_KNOWN(ZEND_STR_STATIC));
+			  (yyval.ast) = zend_ast_create_zval_ex(&zv, ZEND_NAME_NOT_FQ); }
+#line 7033 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 470:
+#line 1273 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                     { (yyval.ast) = (yyvsp[0].ast); }
+#line 7039 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 471:
+#line 1277 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7045 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 472:
+#line 1278 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7051 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 473:
+#line 1279 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7057 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 474:
+#line 1283 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = NULL; }
+#line 7063 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 475:
+#line 1284 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7069 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 476:
+#line 1289 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_zval_from_str(ZSTR_EMPTY_ALLOC()); }
+#line 7075 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 477:
+#line 1290 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                          { (yyval.ast) = (yyvsp[0].ast); }
+#line 7081 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 478:
+#line 1291 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.ast) = (yyvsp[0].ast); }
+#line 7087 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 479:
+#line 1296 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(0, ZEND_AST_ARG_LIST); }
+#line 7093 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 480:
+#line 1297 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                              { (yyval.ast) = (yyvsp[0].ast); }
+#line 7099 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 481:
+#line 1302 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = ZEND_ARRAY_SYNTAX_LONG; }
+#line 7105 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 482:
+#line 1303 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[-1].ast); (yyval.ast)->attr = ZEND_ARRAY_SYNTAX_SHORT; }
+#line 7111 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 483:
+#line 1304 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7117 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 484:
+#line 1305 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7123 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 485:
+#line 1309 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7129 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 486:
+#line 1310 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7135 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 487:
+#line 1311 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7141 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 488:
+#line 1313 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_zval_from_str(ZSTR_EMPTY_ALLOC()); }
+#line 7147 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 489:
+#line 1314 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                          { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7153 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 490:
+#line 1315 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7159 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 491:
+#line 1316 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7165 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 492:
+#line 1317 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7171 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 493:
+#line 1321 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create(ZEND_AST_CONST, (yyvsp[0].ast)); }
+#line 7177 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 494:
+#line 1322 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_LINE); }
+#line 7183 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 495:
+#line 1323 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_FILE); }
+#line 7189 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 496:
+#line 1324 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_DIR); }
+#line 7195 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 497:
+#line 1325 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_TRAIT_C); }
+#line 7201 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 498:
+#line 1326 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_METHOD_C); }
+#line 7207 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 499:
+#line 1327 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_FUNC_C); }
+#line 7213 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 500:
+#line 1328 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_NS_C); }
+#line 7219 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 501:
+#line 1329 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create_ex(ZEND_AST_MAGIC_CONST, T_CLASS_C); }
+#line 7225 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 502:
+#line 1334 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_class_const_or_name((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7231 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 503:
+#line 1336 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_class_const_or_name((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7237 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 504:
+#line 1340 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = NULL; }
+#line 7243 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 505:
+#line 1341 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7249 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 506:
+#line 1345 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                      { (yyval.ast) = (yyvsp[0].ast); }
+#line 7255 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 507:
+#line 1349 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7261 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 508:
+#line 1350 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7267 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 509:
+#line 1351 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7273 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 510:
+#line 1352 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7279 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 511:
+#line 1356 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7285 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 512:
+#line 1357 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7291 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 513:
+#line 1361 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7297 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 514:
+#line 1362 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7303 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 515:
+#line 1363 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7309 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 516:
+#line 1368 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7315 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 517:
+#line 1370 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DIM, (yyvsp[-3].ast), (yyvsp[-1].ast)); }
+#line 7321 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 518:
+#line 1372 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_DIM, ZEND_DIM_ALTERNATIVE_SYNTAX, (yyvsp[-3].ast), (yyvsp[-1].ast)); }
+#line 7327 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 519:
+#line 1374 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_METHOD_CALL, (yyvsp[-3].ast), (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7333 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 520:
+#line 1376 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NULLSAFE_METHOD_CALL, (yyvsp[-3].ast), (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7339 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 521:
+#line 1377 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                              { (yyval.ast) = (yyvsp[0].ast); }
+#line 7345 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 522:
+#line 1382 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7351 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 523:
+#line 1384 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7357 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 524:
+#line 1386 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7363 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 525:
+#line 1388 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NULLSAFE_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7369 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 526:
+#line 1392 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7375 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 527:
+#line 1393 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7381 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 528:
+#line 1394 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7387 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 529:
+#line 1399 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7393 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 530:
+#line 1401 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7399 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 531:
+#line 1406 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7405 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 532:
+#line 1408 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DIM, (yyvsp[-3].ast), (yyvsp[-1].ast)); }
+#line 7411 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 533:
+#line 1410 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_DIM, ZEND_DIM_ALTERNATIVE_SYNTAX, (yyvsp[-3].ast), (yyvsp[-1].ast)); }
+#line 7417 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 534:
+#line 1412 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7423 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 535:
+#line 1414 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NULLSAFE_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7429 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 536:
+#line 1416 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7435 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 537:
+#line 1418 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_STATIC_PROP, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7441 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 538:
+#line 1422 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                           { (yyval.ast) = (yyvsp[0].ast); }
+#line 7447 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 539:
+#line 1423 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7453 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 540:
+#line 1424 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7459 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 541:
+#line 1428 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                         { (yyval.ast) = (yyvsp[0].ast); }
+#line 7465 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 542:
+#line 1429 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7471 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 543:
+#line 1430 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7477 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 544:
+#line 1435 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { /* allow single trailing comma */ (yyval.ast) = zend_ast_list_rtrim((yyvsp[0].ast)); }
+#line 7483 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 545:
+#line 1439 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                       { (yyval.ast) = NULL; }
+#line 7489 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 546:
+#line 1440 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                            { (yyval.ast) = (yyvsp[0].ast); }
+#line 7495 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 547:
+#line 1445 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7501 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 548:
+#line 1447 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_ARRAY, (yyvsp[0].ast)); }
+#line 7507 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 549:
+#line 1452 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ARRAY_ELEM, (yyvsp[0].ast), (yyvsp[-2].ast)); }
+#line 7513 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 550:
+#line 1454 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_ARRAY_ELEM, (yyvsp[0].ast), NULL); }
+#line 7519 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 551:
+#line 1456 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_ARRAY_ELEM, 1, (yyvsp[0].ast), (yyvsp[-3].ast)); }
+#line 7525 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 552:
+#line 1458 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_ARRAY_ELEM, 1, (yyvsp[0].ast), NULL); }
+#line 7531 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 553:
+#line 1460 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_UNPACK, (yyvsp[0].ast)); }
+#line 7537 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 554:
+#line 1462 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyvsp[-1].ast)->attr = ZEND_ARRAY_SYNTAX_LIST;
+			  (yyval.ast) = zend_ast_create(ZEND_AST_ARRAY_ELEM, (yyvsp[-1].ast), (yyvsp[-5].ast)); }
+#line 7544 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 555:
+#line 1465 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyvsp[-1].ast)->attr = ZEND_ARRAY_SYNTAX_LIST;
+			  (yyval.ast) = zend_ast_create(ZEND_AST_ARRAY_ELEM, (yyvsp[-1].ast), NULL); }
+#line 7551 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 556:
+#line 1471 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7557 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 557:
+#line 1473 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_list_add((yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7563 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 558:
+#line 1475 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(1, ZEND_AST_ENCAPS_LIST, (yyvsp[0].ast)); }
+#line 7569 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 559:
+#line 1477 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_list(2, ZEND_AST_ENCAPS_LIST, (yyvsp[-1].ast), (yyvsp[0].ast)); }
+#line 7575 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 560:
+#line 1482 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7581 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 561:
+#line 1484 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DIM,
+			      zend_ast_create(ZEND_AST_VAR, (yyvsp[-3].ast)), (yyvsp[-1].ast)); }
+#line 7588 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 562:
+#line 1487 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_PROP,
+			      zend_ast_create(ZEND_AST_VAR, (yyvsp[-2].ast)), (yyvsp[0].ast)); }
+#line 7595 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 563:
+#line 1490 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_NULLSAFE_PROP,
+			      zend_ast_create(ZEND_AST_VAR, (yyvsp[-2].ast)), (yyvsp[0].ast)); }
+#line 7602 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 564:
+#line 1493 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[-1].ast)); }
+#line 7608 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 565:
+#line 1495 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[-1].ast)); }
+#line 7614 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 566:
+#line 1497 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_DIM,
+			      zend_ast_create(ZEND_AST_VAR, (yyvsp[-4].ast)), (yyvsp[-2].ast)); }
+#line 7621 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 567:
+#line 1499 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                          { (yyval.ast) = (yyvsp[-1].ast); }
+#line 7627 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 568:
+#line 1503 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = (yyvsp[0].ast); }
+#line 7633 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 569:
+#line 1504 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = (yyvsp[0].ast); }
+#line 7639 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 570:
+#line 1505 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                        { (yyval.ast) = zend_negate_num_string((yyvsp[0].ast)); }
+#line 7645 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 571:
+#line 1506 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                { (yyval.ast) = zend_ast_create(ZEND_AST_VAR, (yyvsp[0].ast)); }
+#line 7651 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 572:
+#line 1511 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                                               { (yyval.ast) = (yyvsp[-2].ast); }
+#line 7657 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 573:
+#line 1512 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                                     { (yyval.ast) = zend_ast_create(ZEND_AST_EMPTY, (yyvsp[-1].ast)); }
+#line 7663 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 574:
+#line 1514 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_INCLUDE, (yyvsp[0].ast)); }
+#line 7669 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 575:
+#line 1516 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_INCLUDE_ONCE, (yyvsp[0].ast)); }
+#line 7675 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 576:
+#line 1518 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_EVAL, (yyvsp[-1].ast)); }
+#line 7681 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 577:
+#line 1520 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_REQUIRE, (yyvsp[0].ast)); }
+#line 7687 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 578:
+#line 1522 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create_ex(ZEND_AST_INCLUDE_OR_EVAL, ZEND_REQUIRE_ONCE, (yyvsp[0].ast)); }
+#line 7693 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 579:
+#line 1526 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                               { (yyval.ast) = (yyvsp[0].ast); }
+#line 7699 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 580:
+#line 1528 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                        { (yyval.ast) = zend_ast_create(ZEND_AST_AND, (yyvsp[-2].ast), (yyvsp[0].ast)); }
+#line 7705 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+  case 581:
+#line 1532 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+                     { (yyval.ast) = zend_ast_create(ZEND_AST_ISSET, (yyvsp[0].ast)); }
+#line 7711 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+    break;
+
+
+#line 7715 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.c"
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now 'shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+  {
+    const int yylhs = yyr1[yyn] - YYNTOKENS;
+    const int yyi = yypgoto[yylhs] + *yyssp;
+    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
+               ? yytable[yyi]
+               : yydefgoto[yylhs]);
+  }
+
+  goto yynewstate;
+
+
+/*--------------------------------------.
+| yyerrlab -- here on detecting error.  |
+`--------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+         error, discard it.  */
+
+      if (yychar <= YYEOF)
+        {
+          /* Return failure if at end of input.  */
+          if (yychar == YYEOF)
+            YYABORT;
+        }
+      else
+        {
+          yydestruct ("Error: discarding",
+                      yytoken, &yylval);
+          yychar = YYEMPTY;
+        }
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+  /* Pacify compilers when the user code never invokes YYERROR and the
+     label yyerrorlab therefore never appears in user code.  */
+  if (0)
+    YYERROR;
+
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+        {
+          yyn += YYTERROR;
+          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+            {
+              yyn = yytable[yyn];
+              if (0 < yyn)
+                break;
+            }
+        }
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+        YYABORT;
+
+
+      yydestruct ("Error: popping",
+                  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+
+/*-----------------------------------------------------.
+| yyreturn -- parsing is finished, return the result.  |
+`-----------------------------------------------------*/
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+                  yystos[+*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  return yyresult;
+}
+#line 1535 "/home/luxe/Desktop/php-src/Zend/zend_language_parser.y"
+
+
+/* Over-ride Bison formatting routine to give better token descriptions.
+   Copy to YYRES the contents of YYSTR for use in yyerror.
+   YYSTR is taken from yytname, from the %token declaration.
+   If YYRES is null, do not copy; instead, return the length of what
+   the result would have been.  */
+static YYSIZE_T zend_yytnamerr(char *yyres, const char *yystr)
+{
+	const char *toktype = yystr;
+	size_t toktype_len = strlen(toktype);
+
+	/* CG(parse_error) states:
+	 * 0 => yyres = NULL, yystr is the unexpected token
+	 * 1 => yyres = NULL, yystr is one of the expected tokens
+	 * 2 => yyres != NULL, yystr is the unexpected token
+	 * 3 => yyres != NULL, yystr is one of the expected tokens
+	 */
+	if (yyres && CG(parse_error) < 2) {
+		CG(parse_error) = 2;
+	}
+
+	if (CG(parse_error) % 2 == 0) {
+		/* The unexpected token */
+		char buffer[120];
+		const unsigned char *tokcontent, *tokcontent_end;
+		size_t tokcontent_len;
+
+		CG(parse_error)++;
+
+		if (LANG_SCNG(yy_text)[0] == 0 &&
+			LANG_SCNG(yy_leng) == 1 &&
+			strcmp(toktype, "\"end of file\"") == 0) {
+			if (yyres) {
+				yystpcpy(yyres, "end of file");
+			}
+			return sizeof("end of file")-1;
+		}
+
+		/* Prevent the backslash getting doubled in the output (eugh) */
+		if (strcmp(toktype, "\"'\\\\'\"") == 0) {
+			if (yyres) {
+				yystpcpy(yyres, "token \"\\\"");
+			}
+			return sizeof("token \"\\\"")-1;
+		}
+
+		/* We used "amp" as a dummy label to avoid a duplicate token literal warning. */
+		if (strcmp(toktype, "\"amp\"") == 0) {
+			if (yyres) {
+				yystpcpy(yyres, "token \"&\"");
+			}
+			return sizeof("token \"&\"")-1;
+		}
+
+		/* Avoid unreadable """ */
+		/* "'" would theoretically be just as bad, but is never currently parsed as a separate token */
+		if (strcmp(toktype, "'\"'") == 0) {
+			if (yyres) {
+				yystpcpy(yyres, "double-quote mark");
+			}
+			return sizeof("double-quote mark")-1;
+		}
+
+		/* Strip off the outer quote marks */
+		if (toktype_len >= 2 && *toktype == '"') {
+			toktype++;
+			toktype_len -= 2;
+		}
+
+		/* If the token always has one form, the %token line should have a single-quoted name */
+		/* The parser rules also include single-character un-named tokens which will be single-quoted here */
+		/* We re-format this with double quotes here to ensure everything's consistent */
+		if (toktype_len > 0 && *toktype == '\'') {
+			if (yyres) {
+				snprintf(buffer, sizeof(buffer), "token \"%.*s\"", (int)toktype_len-2, toktype+1);
+				yystpcpy(yyres, buffer);
+			}
+			return toktype_len + sizeof("token ")-1;
+		}
+
+		/* Fetch the content of the last seen token from global lexer state */
+		tokcontent = LANG_SCNG(yy_text);
+		tokcontent_len = LANG_SCNG(yy_leng);
+
+		/* For T_BAD_CHARACTER, the content probably won't be a printable char */
+		/* Also, "unexpected invalid character" sounds a bit redundant */
+		if (tokcontent_len == 1 && strcmp(yystr, "\"invalid character\"") == 0) {
+			if (yyres) {
+				snprintf(buffer, sizeof(buffer), "character 0x%02hhX", *tokcontent);
+				yystpcpy(yyres, buffer);
+			}
+			return sizeof("character 0x00")-1;
+		}
+
+		/* Truncate at line end to avoid messing up log formats */
+		tokcontent_end = memchr(tokcontent, '\n', tokcontent_len);
+		if (tokcontent_end != NULL) {
+			tokcontent_len = (tokcontent_end - tokcontent);
+		}
+
+		/* Try to be helpful about what kind of string was found, before stripping the quotes */
+		if (tokcontent_len > 0 && strcmp(yystr, "\"quoted string\"") == 0) {
+			if (*tokcontent == '"') {
+				toktype = "double-quoted string";
+				toktype_len = sizeof("double-quoted string")-1;
+			}
+			else if (*tokcontent == '\'') {
+				toktype = "single-quoted string";
+				toktype_len = sizeof("single-quoted string")-1;
+			}
+		}
+
+		/* For quoted strings, strip off another layer of quotes to avoid putting quotes inside quotes */
+		if (tokcontent_len > 0 && (*tokcontent == '\'' || *tokcontent=='"'))  {
+			tokcontent++;
+			tokcontent_len--;
+		}
+		if (tokcontent_len > 0 && (tokcontent[tokcontent_len-1] == '\'' || tokcontent[tokcontent_len-1] == '"'))  {
+			tokcontent_len--;
+		}
+
+		/* Truncate to 30 characters and add a ... */
+		if (tokcontent_len > 30 + sizeof("...")-1) {
+			if (yyres) {
+				snprintf(buffer, sizeof(buffer), "%.*s \"%.*s...\"", (int)toktype_len, toktype, 30, tokcontent);
+				yystpcpy(yyres, buffer);
+			}
+			return toktype_len + 30 + sizeof(" \"...\"")-1;
+		}
+
+		if (yyres) {
+			snprintf(buffer, sizeof(buffer), "%.*s \"%.*s\"", (int)toktype_len, toktype, (int)tokcontent_len, tokcontent);
+			yystpcpy(yyres, buffer);
+		}
+		return toktype_len + tokcontent_len + sizeof(" \"\"")-1;
+	}
+
+	/* One of the expected tokens */
+
+	/* Prevent the backslash getting doubled in the output (eugh) */
+	if (strcmp(toktype, "\"'\\\\'\"") == 0) {
+		if (yyres) {
+			yystpcpy(yyres, "\"\\\"");
+		}
+		return sizeof("\"\\\"")-1;
+	}
+
+	/* Strip off the outer quote marks */
+	if (toktype_len >= 2 && *toktype == '"') {
+		toktype++;
+		toktype_len -= 2;
+	}
+
+	if (yyres) {
+		YYSIZE_T yyn = 0;
+
+		for (; yyn < toktype_len; ++yyn) {
+			/* Replace single quotes with double for consistency */
+			if (toktype[yyn] == '\'') {
+				yyres[yyn] = '"';
+			}
+			else {
+				yyres[yyn] = toktype[yyn];
+			}
+		}
+		yyres[toktype_len] = '\0';
+	}
+
+	return toktype_len;
+}
diff --git a/Zend/zend_language_scanner.c b/Zend/zend_language_scanner.c
new file mode 100644
index 0000000000..9483eaf739
--- /dev/null
+++ b/Zend/zend_language_scanner.c
@@ -0,0 +1,10300 @@
+/* Generated by re2c 1.3 */
+#line 1 "Zend/zend_language_scanner.l"
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) Zend Technologies Ltd. (http://www.zend.com)           |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Marcus Boerger <helly@php.net>                              |
+   |          Nuno Lopes <nlopess@php.net>                                |
+   |          Scott MacVicar <scottmac@php.net>                           |
+   | Flex version authors:                                                |
+   |          Andi Gutmans <andi@php.net>                                 |
+   |          Zeev Suraski <zeev@php.net>                                 |
+   +----------------------------------------------------------------------+
+*/
+
+#if 0
+# define YYDEBUG(s, c) printf("state: %d char: %c\n", s, c)
+#else
+# define YYDEBUG(s, c)
+#endif
+
+#include "zend_language_scanner_defs.h"
+
+#include <errno.h>
+#include "zend.h"
+#ifdef ZEND_WIN32
+# include <Winuser.h>
+#endif
+#include "zend_alloc.h"
+#include <zend_language_parser.h>
+#include "zend_compile.h"
+#include "zend_language_scanner.h"
+#include "zend_highlight.h"
+#include "zend_constants.h"
+#include "zend_variables.h"
+#include "zend_operators.h"
+#include "zend_API.h"
+#include "zend_strtod.h"
+#include "zend_exceptions.h"
+#include "zend_virtual_cwd.h"
+
+#define YYCTYPE   unsigned char
+#define YYFILL(n) { if ((YYCURSOR + n) >= (YYLIMIT + ZEND_MMAP_AHEAD)) { return 0; } }
+#define YYCURSOR  SCNG(yy_cursor)
+#define YYLIMIT   SCNG(yy_limit)
+#define YYMARKER  SCNG(yy_marker)
+
+#define YYGETCONDITION()  SCNG(yy_state)
+#define YYSETCONDITION(s) SCNG(yy_state) = s
+
+#define STATE(name)  yyc##name
+
+/* emulate flex constructs */
+#define BEGIN(state) YYSETCONDITION(STATE(state))
+#define YYSTATE      YYGETCONDITION()
+#define yytext       ((char*)SCNG(yy_text))
+#define yyleng       SCNG(yy_leng)
+#define yyless(x)    do { YYCURSOR = (unsigned char*)yytext + x; \
+                          yyleng   = (unsigned int)x; } while(0)
+#define yymore()     goto yymore_restart
+
+/* perform sanity check. If this message is triggered you should
+   increase the ZEND_MMAP_AHEAD value in the zend_streams.h file */
+#define YYMAXFILL 16
+
+#if ZEND_MMAP_AHEAD < YYMAXFILL
+# error ZEND_MMAP_AHEAD should be greater than or equal to YYMAXFILL
+#endif
+
+#include <stdarg.h>
+
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+
+/* Globals Macros */
+#define SCNG	LANG_SCNG
+#ifdef ZTS
+ZEND_API ts_rsrc_id language_scanner_globals_id;
+ZEND_API size_t language_scanner_globals_offset;
+#else
+ZEND_API zend_php_scanner_globals language_scanner_globals;
+#endif
+
+#define HANDLE_NEWLINES(s, l)													\
+do {																			\
+	char *p = (s), *boundary = p+(l);											\
+																				\
+	while (p<boundary) {														\
+		if (*p == '\n' || (*p == '\r' && (*(p+1) != '\n'))) {					\
+			CG(zend_lineno)++;													\
+		}																		\
+		p++;																	\
+	}																			\
+} while (0)
+
+#define HANDLE_NEWLINE(c) \
+{ \
+	if (c == '\n' || c == '\r') { \
+		CG(zend_lineno)++; \
+	} \
+}
+
+/* To save initial string length after scanning to first variable */
+#define SET_DOUBLE_QUOTES_SCANNED_LENGTH(len) SCNG(scanned_string_len) = (len)
+#define GET_DOUBLE_QUOTES_SCANNED_LENGTH()    SCNG(scanned_string_len)
+
+#define IS_LABEL_START(c) (((c) >= 'a' && (c) <= 'z') || ((c) >= 'A' && (c) <= 'Z') || (c) == '_' || (c) >= 0x80)
+#define IS_LABEL_SUCCESSOR(c) (((c) >= 'a' && (c) <= 'z') || ((c) >= 'A' && (c) <= 'Z') || ((c) >= '0' && (c) <= '9') || (c) == '_' || (c) >= 0x80)
+
+#define ZEND_IS_OCT(c)  ((c)>='0' && (c)<='7')
+#define ZEND_IS_HEX(c)  (((c)>='0' && (c)<='9') || ((c)>='a' && (c)<='f') || ((c)>='A' && (c)<='F'))
+
+
+static void strip_underscores(char *str, size_t *len)
+{
+	char *src = str, *dest = str;
+	while (*src != '\0') {
+		if (*src != '_') {
+			*dest = *src;
+			dest++;
+		} else {
+			--(*len);
+		}
+		src++;
+	}
+	*dest = '\0';
+}
+
+static size_t encoding_filter_script_to_internal(unsigned char **to, size_t *to_length, const unsigned char *from, size_t from_length)
+{
+	const zend_encoding *internal_encoding = zend_multibyte_get_internal_encoding();
+	ZEND_ASSERT(internal_encoding);
+	return zend_multibyte_encoding_converter(to, to_length, from, from_length, internal_encoding, LANG_SCNG(script_encoding));
+}
+
+static size_t encoding_filter_script_to_intermediate(unsigned char **to, size_t *to_length, const unsigned char *from, size_t from_length)
+{
+	return zend_multibyte_encoding_converter(to, to_length, from, from_length, zend_multibyte_encoding_utf8, LANG_SCNG(script_encoding));
+}
+
+static size_t encoding_filter_intermediate_to_script(unsigned char **to, size_t *to_length, const unsigned char *from, size_t from_length)
+{
+	return zend_multibyte_encoding_converter(to, to_length, from, from_length,
+LANG_SCNG(script_encoding), zend_multibyte_encoding_utf8);
+}
+
+static size_t encoding_filter_intermediate_to_internal(unsigned char **to, size_t *to_length, const unsigned char *from, size_t from_length)
+{
+	const zend_encoding *internal_encoding = zend_multibyte_get_internal_encoding();
+	ZEND_ASSERT(internal_encoding);
+	return zend_multibyte_encoding_converter(to, to_length, from, from_length,
+internal_encoding, zend_multibyte_encoding_utf8);
+}
+
+
+static void _yy_push_state(int new_state)
+{
+	zend_stack_push(&SCNG(state_stack), (void *) &YYGETCONDITION());
+	YYSETCONDITION(new_state);
+}
+
+#define yy_push_state(state_and_tsrm) _yy_push_state(yyc##state_and_tsrm)
+
+static void yy_pop_state(void)
+{
+	int *stack_state = zend_stack_top(&SCNG(state_stack));
+	YYSETCONDITION(*stack_state);
+	zend_stack_del_top(&SCNG(state_stack));
+}
+
+static void yy_scan_buffer(char *str, size_t len)
+{
+	YYCURSOR       = (YYCTYPE*)str;
+	YYLIMIT        = YYCURSOR + len;
+	if (!SCNG(yy_start)) {
+		SCNG(yy_start) = YYCURSOR;
+	}
+}
+
+void startup_scanner(void)
+{
+	CG(parse_error) = 0;
+	CG(doc_comment) = NULL;
+	CG(extra_fn_flags) = 0;
+	zend_stack_init(&SCNG(state_stack), sizeof(int));
+	zend_stack_init(&SCNG(nest_location_stack), sizeof(zend_nest_location));
+	zend_ptr_stack_init(&SCNG(heredoc_label_stack));
+	SCNG(heredoc_scan_ahead) = 0;
+}
+
+static void heredoc_label_dtor(zend_heredoc_label *heredoc_label) {
+    efree(heredoc_label->label);
+}
+
+void shutdown_scanner(void)
+{
+	CG(parse_error) = 0;
+	RESET_DOC_COMMENT();
+	zend_stack_destroy(&SCNG(state_stack));
+	zend_stack_destroy(&SCNG(nest_location_stack));
+	zend_ptr_stack_clean(&SCNG(heredoc_label_stack), (void (*)(void *)) &heredoc_label_dtor, 1);
+	zend_ptr_stack_destroy(&SCNG(heredoc_label_stack));
+	SCNG(heredoc_scan_ahead) = 0;
+	SCNG(on_event) = NULL;
+}
+
+ZEND_API void zend_save_lexical_state(zend_lex_state *lex_state)
+{
+	lex_state->yy_leng   = SCNG(yy_leng);
+	lex_state->yy_start  = SCNG(yy_start);
+	lex_state->yy_text   = SCNG(yy_text);
+	lex_state->yy_cursor = SCNG(yy_cursor);
+	lex_state->yy_marker = SCNG(yy_marker);
+	lex_state->yy_limit  = SCNG(yy_limit);
+
+	lex_state->state_stack = SCNG(state_stack);
+	zend_stack_init(&SCNG(state_stack), sizeof(int));
+
+	lex_state->nest_location_stack = SCNG(nest_location_stack);
+	zend_stack_init(&SCNG(nest_location_stack), sizeof(zend_nest_location));
+
+	lex_state->heredoc_label_stack = SCNG(heredoc_label_stack);
+	zend_ptr_stack_init(&SCNG(heredoc_label_stack));
+
+	lex_state->in = SCNG(yy_in);
+	lex_state->yy_state = YYSTATE;
+	lex_state->filename = CG(compiled_filename);
+	lex_state->lineno = CG(zend_lineno);
+	CG(compiled_filename) = NULL;
+
+	lex_state->script_org = SCNG(script_org);
+	lex_state->script_org_size = SCNG(script_org_size);
+	lex_state->script_filtered = SCNG(script_filtered);
+	lex_state->script_filtered_size = SCNG(script_filtered_size);
+	lex_state->input_filter = SCNG(input_filter);
+	lex_state->output_filter = SCNG(output_filter);
+	lex_state->script_encoding = SCNG(script_encoding);
+
+	lex_state->on_event = SCNG(on_event);
+	lex_state->on_event_context = SCNG(on_event_context);
+
+	lex_state->ast = CG(ast);
+	lex_state->ast_arena = CG(ast_arena);
+}
+
+ZEND_API void zend_restore_lexical_state(zend_lex_state *lex_state)
+{
+	SCNG(yy_leng)   = lex_state->yy_leng;
+	SCNG(yy_start)  = lex_state->yy_start;
+	SCNG(yy_text)   = lex_state->yy_text;
+	SCNG(yy_cursor) = lex_state->yy_cursor;
+	SCNG(yy_marker) = lex_state->yy_marker;
+	SCNG(yy_limit)  = lex_state->yy_limit;
+
+	zend_stack_destroy(&SCNG(state_stack));
+	SCNG(state_stack) = lex_state->state_stack;
+
+	zend_stack_destroy(&SCNG(nest_location_stack));
+	SCNG(nest_location_stack) = lex_state->nest_location_stack;
+
+	zend_ptr_stack_clean(&SCNG(heredoc_label_stack), (void (*)(void *)) &heredoc_label_dtor, 1);
+	zend_ptr_stack_destroy(&SCNG(heredoc_label_stack));
+	SCNG(heredoc_label_stack) = lex_state->heredoc_label_stack;
+
+	SCNG(yy_in) = lex_state->in;
+	YYSETCONDITION(lex_state->yy_state);
+	CG(zend_lineno) = lex_state->lineno;
+	zend_restore_compiled_filename(lex_state->filename);
+
+	if (SCNG(script_filtered)) {
+		efree(SCNG(script_filtered));
+		SCNG(script_filtered) = NULL;
+	}
+	SCNG(script_org) = lex_state->script_org;
+	SCNG(script_org_size) = lex_state->script_org_size;
+	SCNG(script_filtered) = lex_state->script_filtered;
+	SCNG(script_filtered_size) = lex_state->script_filtered_size;
+	SCNG(input_filter) = lex_state->input_filter;
+	SCNG(output_filter) = lex_state->output_filter;
+	SCNG(script_encoding) = lex_state->script_encoding;
+
+	SCNG(on_event) = lex_state->on_event;
+	SCNG(on_event_context) = lex_state->on_event_context;
+
+	CG(ast) = lex_state->ast;
+	CG(ast_arena) = lex_state->ast_arena;
+
+	RESET_DOC_COMMENT();
+}
+
+ZEND_API zend_result zend_lex_tstring(zval *zv, unsigned char *ident)
+{
+	unsigned char *end = ident;
+	while ((*end >= 'a' && *end <= 'z') || (*end >= 'A' && *end <= 'Z') || *end == '_') {
+		end++;
+	}
+
+	size_t length = end - ident;
+	if (length == 0) {
+		ZEND_ASSERT(ident[0] == '<' && ident[1] == '?' && ident[2] == '=');
+		zend_throw_exception(zend_ce_parse_error, "Cannot use \"<?=\" as an identifier", 0);
+		return FAILURE;
+	}
+
+	if (SCNG(on_event)) {
+		SCNG(on_event)(ON_FEEDBACK, T_STRING, 0, (char *) ident, length, SCNG(on_event_context));
+	}
+
+	ZVAL_STRINGL(zv, (char *) ident, length);
+	return SUCCESS;
+}
+
+#define BOM_UTF32_BE	"\x00\x00\xfe\xff"
+#define	BOM_UTF32_LE	"\xff\xfe\x00\x00"
+#define	BOM_UTF16_BE	"\xfe\xff"
+#define	BOM_UTF16_LE	"\xff\xfe"
+#define	BOM_UTF8		"\xef\xbb\xbf"
+
+static const zend_encoding *zend_multibyte_detect_utf_encoding(const unsigned char *script, size_t script_size)
+{
+	const unsigned char *p;
+	int wchar_size = 2;
+	int le = 0;
+
+	/* utf-16 or utf-32? */
+	p = script;
+	assert(p >= script);
+	while ((size_t)(p-script) < script_size) {
+		p = memchr(p, 0, script_size-(p-script)-2);
+		if (!p) {
+			break;
+		}
+		if (*(p+1) == '\0' && *(p+2) == '\0') {
+			wchar_size = 4;
+			break;
+		}
+
+		/* searching for UTF-32 specific byte orders, so this will do */
+		p += 4;
+	}
+
+	/* BE or LE? */
+	p = script;
+	assert(p >= script);
+	while ((size_t)(p-script) < script_size) {
+		if (*p == '\0' && *(p+wchar_size-1) != '\0') {
+			/* BE */
+			le = 0;
+			break;
+		} else if (*p != '\0' && *(p+wchar_size-1) == '\0') {
+			/* LE* */
+			le = 1;
+			break;
+		}
+		p += wchar_size;
+	}
+
+	if (wchar_size == 2) {
+		return le ? zend_multibyte_encoding_utf16le : zend_multibyte_encoding_utf16be;
+	} else {
+		return le ? zend_multibyte_encoding_utf32le : zend_multibyte_encoding_utf32be;
+	}
+
+	return NULL;
+}
+
+static const zend_encoding* zend_multibyte_detect_unicode(void)
+{
+	const zend_encoding *script_encoding = NULL;
+	int bom_size;
+	unsigned char *pos1, *pos2;
+
+	if (LANG_SCNG(script_org_size) < sizeof(BOM_UTF32_LE)-1) {
+		return NULL;
+	}
+
+	/* check out BOM */
+	if (!memcmp(LANG_SCNG(script_org), BOM_UTF32_BE, sizeof(BOM_UTF32_BE)-1)) {
+		script_encoding = zend_multibyte_encoding_utf32be;
+		bom_size = sizeof(BOM_UTF32_BE)-1;
+	} else if (!memcmp(LANG_SCNG(script_org), BOM_UTF32_LE, sizeof(BOM_UTF32_LE)-1)) {
+		script_encoding = zend_multibyte_encoding_utf32le;
+		bom_size = sizeof(BOM_UTF32_LE)-1;
+	} else if (!memcmp(LANG_SCNG(script_org), BOM_UTF16_BE, sizeof(BOM_UTF16_BE)-1)) {
+		script_encoding = zend_multibyte_encoding_utf16be;
+		bom_size = sizeof(BOM_UTF16_BE)-1;
+	} else if (!memcmp(LANG_SCNG(script_org), BOM_UTF16_LE, sizeof(BOM_UTF16_LE)-1)) {
+		script_encoding = zend_multibyte_encoding_utf16le;
+		bom_size = sizeof(BOM_UTF16_LE)-1;
+	} else if (!memcmp(LANG_SCNG(script_org), BOM_UTF8, sizeof(BOM_UTF8)-1)) {
+		script_encoding = zend_multibyte_encoding_utf8;
+		bom_size = sizeof(BOM_UTF8)-1;
+	}
+
+	if (script_encoding) {
+		/* remove BOM */
+		LANG_SCNG(script_org) += bom_size;
+		LANG_SCNG(script_org_size) -= bom_size;
+
+		return script_encoding;
+	}
+
+	/* script contains NULL bytes -> auto-detection */
+	if ((pos1 = memchr(LANG_SCNG(script_org), 0, LANG_SCNG(script_org_size)))) {
+		/* check if the NULL byte is after the __HALT_COMPILER(); */
+		pos2 = LANG_SCNG(script_org);
+
+		while ((size_t)(pos1 - pos2) >= sizeof("__HALT_COMPILER();")-1) {
+			pos2 = memchr(pos2, '_', pos1 - pos2);
+			if (!pos2) break;
+			pos2++;
+			if (strncasecmp((char*)pos2, "_HALT_COMPILER", sizeof("_HALT_COMPILER")-1) == 0) {
+				pos2 += sizeof("_HALT_COMPILER")-1;
+				while (*pos2 == ' '  ||
+					   *pos2 == '\t' ||
+					   *pos2 == '\r' ||
+					   *pos2 == '\n') {
+					pos2++;
+				}
+				if (*pos2 == '(') {
+					pos2++;
+					while (*pos2 == ' '  ||
+						   *pos2 == '\t' ||
+						   *pos2 == '\r' ||
+						   *pos2 == '\n') {
+						pos2++;
+					}
+					if (*pos2 == ')') {
+						pos2++;
+						while (*pos2 == ' '  ||
+							   *pos2 == '\t' ||
+							   *pos2 == '\r' ||
+							   *pos2 == '\n') {
+							pos2++;
+						}
+						if (*pos2 == ';') {
+							return NULL;
+						}
+					}
+				}
+			}
+		}
+		/* make best effort if BOM is missing */
+		return zend_multibyte_detect_utf_encoding(LANG_SCNG(script_org), LANG_SCNG(script_org_size));
+	}
+
+	return NULL;
+}
+
+static const zend_encoding* zend_multibyte_find_script_encoding(void)
+{
+	const zend_encoding *script_encoding;
+
+	if (CG(detect_unicode)) {
+		/* check out bom(byte order mark) and see if containing wchars */
+		script_encoding = zend_multibyte_detect_unicode();
+		if (script_encoding != NULL) {
+			/* bom or wchar detection is prior to 'script_encoding' option */
+			return script_encoding;
+		}
+	}
+
+	/* if no script_encoding specified, just leave alone */
+	if (!CG(script_encoding_list) || !CG(script_encoding_list_size)) {
+		return NULL;
+	}
+
+	/* if multiple encodings specified, detect automagically */
+	if (CG(script_encoding_list_size) > 1) {
+		return zend_multibyte_encoding_detector(LANG_SCNG(script_org), LANG_SCNG(script_org_size), CG(script_encoding_list), CG(script_encoding_list_size));
+	}
+
+	return CG(script_encoding_list)[0];
+}
+
+ZEND_API zend_result zend_multibyte_set_filter(const zend_encoding *onetime_encoding)
+{
+	const zend_encoding *internal_encoding = zend_multibyte_get_internal_encoding();
+	const zend_encoding *script_encoding = onetime_encoding ? onetime_encoding: zend_multibyte_find_script_encoding();
+
+	if (!script_encoding) {
+		return FAILURE;
+	}
+
+	/* judge input/output filter */
+	LANG_SCNG(script_encoding) = script_encoding;
+	LANG_SCNG(input_filter) = NULL;
+	LANG_SCNG(output_filter) = NULL;
+
+	if (!internal_encoding || LANG_SCNG(script_encoding) == internal_encoding) {
+		if (!zend_multibyte_check_lexer_compatibility(LANG_SCNG(script_encoding))) {
+			/* and if not, work around w/ script_encoding -> utf-8 -> script_encoding conversion */
+			LANG_SCNG(input_filter) = encoding_filter_script_to_intermediate;
+			LANG_SCNG(output_filter) = encoding_filter_intermediate_to_script;
+		} else {
+			LANG_SCNG(input_filter) = NULL;
+			LANG_SCNG(output_filter) = NULL;
+		}
+		return SUCCESS;
+	}
+
+	if (zend_multibyte_check_lexer_compatibility(internal_encoding)) {
+		LANG_SCNG(input_filter) = encoding_filter_script_to_internal;
+		LANG_SCNG(output_filter) = NULL;
+	} else if (zend_multibyte_check_lexer_compatibility(LANG_SCNG(script_encoding))) {
+		LANG_SCNG(input_filter) = NULL;
+		LANG_SCNG(output_filter) = encoding_filter_script_to_internal;
+	} else {
+		/* both script and internal encodings are incompatible w/ flex */
+		LANG_SCNG(input_filter) = encoding_filter_script_to_intermediate;
+		LANG_SCNG(output_filter) = encoding_filter_intermediate_to_internal;
+	}
+
+	return SUCCESS;
+}
+
+ZEND_API zend_result open_file_for_scanning(zend_file_handle *file_handle)
+{
+	char *buf;
+	size_t size;
+	zend_string *compiled_filename;
+
+	if (zend_stream_fixup(file_handle, &buf, &size) == FAILURE) {
+		/* Still add it to open_files to make destroy_file_handle work */
+		zend_llist_add_element(&CG(open_files), file_handle);
+		file_handle->in_list = 1;
+		return FAILURE;
+	}
+
+	ZEND_ASSERT(!EG(exception) && "stream_fixup() should have failed");
+	zend_llist_add_element(&CG(open_files), file_handle);
+	file_handle->in_list = 1;
+
+	/* Reset the scanner for scanning the new file */
+	SCNG(yy_in) = file_handle;
+	SCNG(yy_start) = NULL;
+
+	if (size != (size_t)-1) {
+		if (CG(multibyte)) {
+			SCNG(script_org) = (unsigned char*)buf;
+			SCNG(script_org_size) = size;
+			SCNG(script_filtered) = NULL;
+
+			zend_multibyte_set_filter(NULL);
+
+			if (SCNG(input_filter)) {
+				if ((size_t)-1 == SCNG(input_filter)(&SCNG(script_filtered), &SCNG(script_filtered_size), SCNG(script_org), SCNG(script_org_size))) {
+					zend_error_noreturn(E_COMPILE_ERROR, "Could not convert the script from the detected "
+							"encoding \"%s\" to a compatible encoding", zend_multibyte_get_encoding_name(LANG_SCNG(script_encoding)));
+				}
+				buf = (char*)SCNG(script_filtered);
+				size = SCNG(script_filtered_size);
+			}
+		}
+		SCNG(yy_start) = (unsigned char *)buf;
+		yy_scan_buffer(buf, size);
+	} else {
+		zend_error_noreturn(E_COMPILE_ERROR, "zend_stream_mmap() failed");
+	}
+
+	if (CG(skip_shebang)) {
+		BEGIN(SHEBANG);
+	} else {
+		BEGIN(INITIAL);
+	}
+
+	if (file_handle->opened_path) {
+		compiled_filename = zend_string_copy(file_handle->opened_path);
+	} else {
+		compiled_filename = zend_string_copy(file_handle->filename);
+	}
+
+	zend_set_compiled_filename(compiled_filename);
+	zend_string_release_ex(compiled_filename, 0);
+
+	RESET_DOC_COMMENT();
+	CG(zend_lineno) = 1;
+	CG(increment_lineno) = 0;
+	return SUCCESS;
+}
+
+static zend_op_array *zend_compile(int type)
+{
+	zend_op_array *op_array = NULL;
+	bool original_in_compilation = CG(in_compilation);
+
+	CG(in_compilation) = 1;
+	CG(ast) = NULL;
+	CG(ast_arena) = zend_arena_create(1024 * 32);
+
+	if (!zendparse()) {
+		int last_lineno = CG(zend_lineno);
+		zend_file_context original_file_context;
+		zend_oparray_context original_oparray_context;
+		zend_op_array *original_active_op_array = CG(active_op_array);
+
+		op_array = emalloc(sizeof(zend_op_array));
+		init_op_array(op_array, type, INITIAL_OP_ARRAY_SIZE);
+		CG(active_op_array) = op_array;
+
+		/* Use heap to not waste arena memory */
+		op_array->fn_flags |= ZEND_ACC_HEAP_RT_CACHE;
+
+		if (zend_ast_process) {
+			zend_ast_process(CG(ast));
+		}
+
+		zend_file_context_begin(&original_file_context);
+		zend_oparray_context_begin(&original_oparray_context);
+		zend_compile_top_stmt(CG(ast));
+		CG(zend_lineno) = last_lineno;
+		zend_emit_final_return(type == ZEND_USER_FUNCTION);
+		op_array->line_start = 1;
+		op_array->line_end = last_lineno;
+		zend_init_static_variables_map_ptr(op_array);
+		pass_two(op_array);
+		zend_oparray_context_end(&original_oparray_context);
+		zend_file_context_end(&original_file_context);
+
+		CG(active_op_array) = original_active_op_array;
+	}
+
+	zend_ast_destroy(CG(ast));
+	zend_arena_destroy(CG(ast_arena));
+
+	CG(in_compilation) = original_in_compilation;
+
+	return op_array;
+}
+
+ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type)
+{
+	zend_lex_state original_lex_state;
+	zend_op_array *op_array = NULL;
+	zend_save_lexical_state(&original_lex_state);
+
+	if (open_file_for_scanning(file_handle)==FAILURE) {
+		if (!EG(exception)) {
+			if (type==ZEND_REQUIRE) {
+				zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, ZSTR_VAL(file_handle->filename));
+			} else {
+				zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, ZSTR_VAL(file_handle->filename));
+			}
+		}
+	} else {
+		op_array = zend_compile(ZEND_USER_FUNCTION);
+	}
+
+	zend_restore_lexical_state(&original_lex_state);
+	return op_array;
+}
+
+ZEND_API zend_ast *zend_compile_string_to_ast(
+		zend_string *code, zend_arena **ast_arena, zend_string *filename) {
+	zval code_zv;
+	bool original_in_compilation;
+	zend_lex_state original_lex_state;
+	zend_ast *ast;
+
+	ZVAL_STR_COPY(&code_zv, code);
+
+	original_in_compilation = CG(in_compilation);
+	CG(in_compilation) = 1;
+
+	zend_save_lexical_state(&original_lex_state);
+	zend_prepare_string_for_scanning(&code_zv, filename);
+	CG(ast) = NULL;
+	CG(ast_arena) = zend_arena_create(1024 * 32);
+	LANG_SCNG(yy_state) = yycINITIAL;
+
+	if (zendparse() != 0) {
+		zend_ast_destroy(CG(ast));
+		zend_arena_destroy(CG(ast_arena));
+		CG(ast) = NULL;
+	}
+
+	/* restore_lexical_state changes CG(ast) and CG(ast_arena) */
+	ast = CG(ast);
+	*ast_arena = CG(ast_arena);
+
+	zend_restore_lexical_state(&original_lex_state);
+	CG(in_compilation) = original_in_compilation;
+
+	zval_ptr_dtor_str(&code_zv);
+
+	return ast;
+}
+
+zend_op_array *compile_filename(int type, zend_string *filename)
+{
+	zend_file_handle file_handle;
+	zend_op_array *retval;
+	zend_string *opened_path = NULL;
+
+	zend_stream_init_filename_ex(&file_handle, filename);
+
+	retval = zend_compile_file(&file_handle, type);
+	if (retval && file_handle.handle.stream.handle) {
+		if (!file_handle.opened_path) {
+			file_handle.opened_path = opened_path = zend_string_copy(filename);
+		}
+
+		zend_hash_add_empty_element(&EG(included_files), file_handle.opened_path);
+
+		if (opened_path) {
+			zend_string_release_ex(opened_path, 0);
+		}
+	}
+	zend_destroy_file_handle(&file_handle);
+
+	return retval;
+}
+
+ZEND_API void zend_prepare_string_for_scanning(zval *str, zend_string *filename)
+{
+	char *buf;
+	size_t size, old_len;
+
+	/* enforce ZEND_MMAP_AHEAD trailing NULLs for flex... */
+	old_len = Z_STRLEN_P(str);
+	Z_STR_P(str) = zend_string_extend(Z_STR_P(str), old_len + ZEND_MMAP_AHEAD, 0);
+	Z_TYPE_INFO_P(str) = IS_STRING_EX;
+	memset(Z_STRVAL_P(str) + old_len, 0, ZEND_MMAP_AHEAD + 1);
+
+	SCNG(yy_in) = NULL;
+	SCNG(yy_start) = NULL;
+
+	buf = Z_STRVAL_P(str);
+	size = old_len;
+
+	if (CG(multibyte)) {
+		SCNG(script_org) = (unsigned char*)buf;
+		SCNG(script_org_size) = size;
+		SCNG(script_filtered) = NULL;
+
+		zend_multibyte_set_filter(zend_multibyte_get_internal_encoding());
+
+		if (SCNG(input_filter)) {
+			if ((size_t)-1 == SCNG(input_filter)(&SCNG(script_filtered), &SCNG(script_filtered_size), SCNG(script_org), SCNG(script_org_size))) {
+				zend_error_noreturn(E_COMPILE_ERROR, "Could not convert the script from the detected "
+						"encoding \"%s\" to a compatible encoding", zend_multibyte_get_encoding_name(LANG_SCNG(script_encoding)));
+			}
+			buf = (char*)SCNG(script_filtered);
+			size = SCNG(script_filtered_size);
+		}
+	}
+
+	yy_scan_buffer(buf, size);
+	zend_set_compiled_filename(filename);
+	CG(zend_lineno) = 1;
+	CG(increment_lineno) = 0;
+	RESET_DOC_COMMENT();
+}
+
+
+ZEND_API size_t zend_get_scanned_file_offset(void)
+{
+	size_t offset = SCNG(yy_cursor) - SCNG(yy_start);
+	if (SCNG(input_filter)) {
+		size_t original_offset = offset, length = 0;
+		do {
+			unsigned char *p = NULL;
+			if ((size_t)-1 == SCNG(input_filter)(&p, &length, SCNG(script_org), offset)) {
+				return (size_t)-1;
+			}
+			efree(p);
+			if (length > original_offset) {
+				offset--;
+			} else if (length < original_offset) {
+				offset++;
+			}
+		} while (original_offset != length);
+	}
+	return offset;
+}
+
+zend_op_array *compile_string(zend_string *source_string, const char *filename, zend_compile_position position)
+{
+	zend_lex_state original_lex_state;
+	zend_op_array *op_array = NULL;
+	zval tmp;
+	zend_string *filename_str;
+
+	if (ZSTR_LEN(source_string) == 0) {
+		return NULL;
+	}
+
+	ZVAL_STR_COPY(&tmp, source_string);
+
+	zend_save_lexical_state(&original_lex_state);
+	filename_str = zend_string_init(filename, strlen(filename), 0);
+	zend_prepare_string_for_scanning(&tmp, filename_str);
+	zend_string_release(filename_str);
+
+	switch (position) {
+		case ZEND_COMPILE_POSITION_AT_SHEBANG:
+			BEGIN(SHEBANG);
+			break;
+		case ZEND_COMPILE_POSITION_AT_OPEN_TAG:
+			BEGIN(INITIAL);
+			break;
+		case ZEND_COMPILE_POSITION_AFTER_OPEN_TAG:
+			BEGIN(ST_IN_SCRIPTING);
+			break;
+	}
+
+	op_array = zend_compile(ZEND_EVAL_CODE);
+
+	zend_restore_lexical_state(&original_lex_state);
+	zval_ptr_dtor(&tmp);
+
+	return op_array;
+}
+
+
+zend_result highlight_file(const char *filename, zend_syntax_highlighter_ini *syntax_highlighter_ini)
+{
+	zend_lex_state original_lex_state;
+	zend_file_handle file_handle;
+
+	zend_stream_init_filename(&file_handle, filename);
+	zend_save_lexical_state(&original_lex_state);
+	if (open_file_for_scanning(&file_handle)==FAILURE) {
+		zend_message_dispatcher(ZMSG_FAILED_HIGHLIGHT_FOPEN, filename);
+		zend_destroy_file_handle(&file_handle);
+		zend_restore_lexical_state(&original_lex_state);
+		return FAILURE;
+	}
+	zend_highlight(syntax_highlighter_ini);
+	if (SCNG(script_filtered)) {
+		efree(SCNG(script_filtered));
+		SCNG(script_filtered) = NULL;
+	}
+	zend_destroy_file_handle(&file_handle);
+	zend_restore_lexical_state(&original_lex_state);
+	return SUCCESS;
+}
+
+void highlight_string(zend_string *str, zend_syntax_highlighter_ini *syntax_highlighter_ini, const char *filename)
+{
+	zend_lex_state original_lex_state;
+	zval str_zv;
+	zend_string *filename_str = zend_string_init(filename, strlen(filename), 0);
+	ZVAL_STR_COPY(&str_zv, str);
+	zend_save_lexical_state(&original_lex_state);
+	zend_prepare_string_for_scanning(&str_zv, filename_str);
+	zend_string_release(filename_str);
+	BEGIN(INITIAL);
+	zend_highlight(syntax_highlighter_ini);
+	if (SCNG(script_filtered)) {
+		efree(SCNG(script_filtered));
+		SCNG(script_filtered) = NULL;
+	}
+	zend_restore_lexical_state(&original_lex_state);
+	zval_ptr_dtor(&str_zv);
+}
+
+ZEND_API void zend_multibyte_yyinput_again(zend_encoding_filter old_input_filter, const zend_encoding *old_encoding)
+{
+	size_t length;
+	unsigned char *new_yy_start;
+
+	/* convert and set */
+	if (!SCNG(input_filter)) {
+		if (SCNG(script_filtered)) {
+			efree(SCNG(script_filtered));
+			SCNG(script_filtered) = NULL;
+		}
+		SCNG(script_filtered_size) = 0;
+		length = SCNG(script_org_size);
+		new_yy_start = SCNG(script_org);
+	} else {
+		if ((size_t)-1 == SCNG(input_filter)(&new_yy_start, &length, SCNG(script_org), SCNG(script_org_size))) {
+			zend_error_noreturn(E_COMPILE_ERROR, "Could not convert the script from the detected "
+					"encoding \"%s\" to a compatible encoding", zend_multibyte_get_encoding_name(LANG_SCNG(script_encoding)));
+		}
+		if (SCNG(script_filtered)) {
+			efree(SCNG(script_filtered));
+		}
+		SCNG(script_filtered) = new_yy_start;
+		SCNG(script_filtered_size) = length;
+	}
+
+	SCNG(yy_cursor) = new_yy_start + (SCNG(yy_cursor) - SCNG(yy_start));
+	SCNG(yy_marker) = new_yy_start + (SCNG(yy_marker) - SCNG(yy_start));
+	SCNG(yy_text) = new_yy_start + (SCNG(yy_text) - SCNG(yy_start));
+	SCNG(yy_limit) = new_yy_start + length;
+
+	SCNG(yy_start) = new_yy_start;
+}
+
+
+// TODO: avoid reallocation ???
+# define zend_copy_value(zendlval, yytext, yyleng) \
+	if (SCNG(output_filter)) { \
+		size_t sz = 0; \
+		char *s = NULL; \
+		SCNG(output_filter)((unsigned char **)&s, &sz, (unsigned char *)yytext, (size_t)yyleng); \
+		ZVAL_STRINGL(zendlval, s, sz); \
+		efree(s); \
+	} else if (yyleng == 1) { \
+		ZVAL_INTERNED_STR(zendlval, ZSTR_CHAR((zend_uchar)*(yytext))); \
+	} else { \
+		ZVAL_STRINGL(zendlval, yytext, yyleng); \
+	}
+
+static zend_result zend_scan_escape_string(zval *zendlval, char *str, int len, char quote_type)
+{
+	char *s, *t;
+	char *end;
+
+	if (len <= 1) {
+		if (len < 1) {
+			ZVAL_EMPTY_STRING(zendlval);
+		} else {
+			zend_uchar c = (zend_uchar)*str;
+			if (c == '\n' || c == '\r') {
+				CG(zend_lineno)++;
+			}
+			ZVAL_INTERNED_STR(zendlval, ZSTR_CHAR(c));
+		}
+		goto skip_escape_conversion;
+	}
+
+	ZVAL_STRINGL(zendlval, str, len);
+
+	/* convert escape sequences */
+	s = Z_STRVAL_P(zendlval);
+	end = s+Z_STRLEN_P(zendlval);
+	while (1) {
+		if (UNEXPECTED(*s=='\\')) {
+			break;
+		}
+		if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
+			CG(zend_lineno)++;
+		}
+		s++;
+		if (s == end) {
+			goto skip_escape_conversion;
+		}
+	}
+
+	t = s;
+	while (s<end) {
+		if (*s=='\\') {
+			s++;
+			if (s >= end) {
+				*t++ = '\\';
+				break;
+			}
+
+			switch(*s) {
+				case 'n':
+					*t++ = '\n';
+					break;
+				case 'r':
+					*t++ = '\r';
+					break;
+				case 't':
+					*t++ = '\t';
+					break;
+				case 'f':
+					*t++ = '\f';
+					break;
+				case 'v':
+					*t++ = '\v';
+					break;
+				case 'e':
+#ifdef ZEND_WIN32
+					*t++ = VK_ESCAPE;
+#else
+					*t++ = '\e';
+#endif
+					break;
+				case '"':
+				case '`':
+					if (*s != quote_type) {
+						*t++ = '\\';
+						*t++ = *s;
+						break;
+					}
+					ZEND_FALLTHROUGH;
+				case '\\':
+				case '$':
+					*t++ = *s;
+					break;
+				case 'x':
+				case 'X':
+					if (ZEND_IS_HEX(*(s+1))) {
+						char hex_buf[3] = { 0, 0, 0 };
+
+						hex_buf[0] = *(++s);
+						if (ZEND_IS_HEX(*(s+1))) {
+							hex_buf[1] = *(++s);
+						}
+						*t++ = (char) ZEND_STRTOL(hex_buf, NULL, 16);
+					} else {
+						*t++ = '\\';
+						*t++ = *s;
+					}
+					break;
+				/* UTF-8 codepoint escape, format: /\\u\{\x+\}/ */
+				case 'u':
+					{
+						/* cache where we started so we can parse after validating */
+						char *start = s + 1;
+						size_t len = 0;
+						bool valid = 1;
+						unsigned long codepoint;
+
+						if (*start != '{') {
+							/* we silently let this pass to avoid breaking code
+							 * with JSON in string literals (e.g. "\"\u202e\""
+							 */
+							*t++ = '\\';
+							*t++ = 'u';
+							break;
+						} else {
+							/* on the other hand, invalid \u{blah} errors */
+							s++;
+							len++;
+							s++;
+							while (*s != '}') {
+								if (!ZEND_IS_HEX(*s)) {
+									valid = 0;
+									break;
+								} else {
+									len++;
+								}
+								s++;
+							}
+							if (*s == '}') {
+								valid = 1;
+								len++;
+							}
+						}
+
+						/* \u{} is invalid */
+						if (len <= 2) {
+							valid = 0;
+						}
+
+						if (!valid) {
+							zend_throw_exception(zend_ce_parse_error,
+								"Invalid UTF-8 codepoint escape sequence", 0);
+							zval_ptr_dtor(zendlval);
+							ZVAL_UNDEF(zendlval);
+							return FAILURE;
+						}
+
+						errno = 0;
+						codepoint = strtoul(start + 1, NULL, 16);
+
+						/* per RFC 3629, UTF-8 can only represent 21 bits */
+						if (codepoint > 0x10FFFF || errno) {
+							zend_throw_exception(zend_ce_parse_error,
+								"Invalid UTF-8 codepoint escape sequence: Codepoint too large", 0);
+							zval_ptr_dtor(zendlval);
+							ZVAL_UNDEF(zendlval);
+							return FAILURE;
+						}
+
+						/* based on https://en.wikipedia.org/wiki/UTF-8#Sample_code */
+						if (codepoint < 0x80) {
+							*t++ = codepoint;
+						} else if (codepoint <= 0x7FF) {
+							*t++ = (codepoint >> 6) + 0xC0;
+							*t++ = (codepoint & 0x3F) + 0x80;
+						} else if (codepoint <= 0xFFFF) {
+							*t++ = (codepoint >> 12) + 0xE0;
+							*t++ = ((codepoint >> 6) & 0x3F) + 0x80;
+							*t++ = (codepoint & 0x3F) + 0x80;
+						} else if (codepoint <= 0x10FFFF) {
+							*t++ = (codepoint >> 18) + 0xF0;
+							*t++ = ((codepoint >> 12) & 0x3F) + 0x80;
+							*t++ = ((codepoint >> 6) & 0x3F) + 0x80;
+							*t++ = (codepoint & 0x3F) + 0x80;
+						}
+					}
+					break;
+				default:
+					/* check for an octal */
+					if (ZEND_IS_OCT(*s)) {
+						char octal_buf[4] = { 0, 0, 0, 0 };
+
+						octal_buf[0] = *s;
+						if (ZEND_IS_OCT(*(s+1))) {
+							octal_buf[1] = *(++s);
+							if (ZEND_IS_OCT(*(s+1))) {
+								octal_buf[2] = *(++s);
+							}
+						}
+						if (octal_buf[2] && (octal_buf[0] > '3') && !SCNG(heredoc_scan_ahead)) {
+							/* 3 octit values must not overflow 0xFF (\377) */
+							zend_error(E_COMPILE_WARNING, "Octal escape sequence overflow \\%s is greater than \\377", octal_buf);
+						}
+
+						*t++ = (char) ZEND_STRTOL(octal_buf, NULL, 8);
+					} else {
+						*t++ = '\\';
+						*t++ = *s;
+					}
+					break;
+			}
+		} else {
+			*t++ = *s;
+		}
+
+		if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
+			CG(zend_lineno)++;
+		}
+		s++;
+	}
+	*t = 0;
+	Z_STRLEN_P(zendlval) = t - Z_STRVAL_P(zendlval);
+
+skip_escape_conversion:
+	if (SCNG(output_filter)) {
+		size_t sz = 0;
+		unsigned char *str;
+		// TODO: avoid realocation ???
+		s = Z_STRVAL_P(zendlval);
+		SCNG(output_filter)(&str, &sz, (unsigned char *)s, (size_t)Z_STRLEN_P(zendlval));
+		zval_ptr_dtor(zendlval);
+		ZVAL_STRINGL(zendlval, (char *) str, sz);
+		efree(str);
+	}
+	return SUCCESS;
+}
+
+#define HEREDOC_USING_SPACES 1
+#define HEREDOC_USING_TABS 2
+
+static const char *next_newline(const char *str, const char *end, size_t *newline_len) {
+	for (; str < end; str++) {
+		if (*str == '\r') {
+			*newline_len = str + 1 < end && *(str + 1) == '\n' ? 2 : 1;
+			return str;
+		} else if (*str == '\n') {
+			*newline_len = 1;
+			return str;
+		}
+	}
+	*newline_len = 0;
+	return NULL;
+}
+
+static bool strip_multiline_string_indentation(
+	zval *zendlval, int indentation, bool using_spaces,
+	bool newline_at_start, bool newline_at_end)
+{
+	const char *str = Z_STRVAL_P(zendlval), *end = str + Z_STRLEN_P(zendlval);
+	char *copy = Z_STRVAL_P(zendlval);
+
+	int newline_count = 0;
+	size_t newline_len;
+	const char *nl;
+
+	if (!newline_at_start) {
+		nl = next_newline(str, end, &newline_len);
+		if (!nl) {
+			return 1;
+		}
+
+		str = nl + newline_len;
+		copy = (char *) nl + newline_len;
+		newline_count++;
+	} else {
+		nl = str;
+	}
+
+	/* <= intentional */
+	while (str <= end && nl) {
+		size_t skip;
+		nl = next_newline(str, end, &newline_len);
+		if (!nl && newline_at_end) {
+			nl = end;
+		}
+
+		/* Try to skip indentation */
+		for (skip = 0; skip < indentation; skip++, str++) {
+			if (str == nl) {
+				/* Don't require full indentation on whitespace-only lines */
+				break;
+			}
+
+			if (str == end || (*str != ' ' && *str != '\t')) {
+				CG(zend_lineno) += newline_count;
+				zend_throw_exception_ex(zend_ce_parse_error, 0,
+					"Invalid body indentation level (expecting an indentation level of at least %d)", indentation);
+				goto error;
+			}
+
+			if ((!using_spaces && *str == ' ') || (using_spaces && *str == '\t')) {
+				CG(zend_lineno) += newline_count;
+				zend_throw_exception(zend_ce_parse_error,
+					"Invalid indentation - tabs and spaces cannot be mixed", 0);
+				goto error;
+			}
+		}
+
+		if (str == end) {
+			break;
+		}
+
+		size_t len = nl ? (nl - str + newline_len) : (end - str);
+		memmove(copy, str, len);
+		str += len;
+		copy += len;
+		newline_count++;
+	}
+
+	*copy = '\0';
+	Z_STRLEN_P(zendlval) = copy - Z_STRVAL_P(zendlval);
+	return 1;
+
+error:
+	zval_ptr_dtor_str(zendlval);
+	ZVAL_UNDEF(zendlval);
+
+	return 0;
+}
+
+static void copy_heredoc_label_stack(void *void_heredoc_label)
+{
+	zend_heredoc_label *heredoc_label = void_heredoc_label;
+	zend_heredoc_label *new_heredoc_label = emalloc(sizeof(zend_heredoc_label));
+
+	*new_heredoc_label = *heredoc_label;
+	new_heredoc_label->label = estrndup(heredoc_label->label, heredoc_label->length);
+
+	zend_ptr_stack_push(&SCNG(heredoc_label_stack), (void *) new_heredoc_label);
+}
+
+/* Check that { }, [ ], ( ) are nested correctly */
+static void report_bad_nesting(char opening, int opening_lineno, char closing)
+{
+	char   buf[256];
+	size_t used = 0;
+
+	used = snprintf(buf, sizeof(buf), "Unclosed '%c'", opening);
+
+	if (opening_lineno != CG(zend_lineno)) {
+		used += snprintf(buf + used, sizeof(buf) - used, " on line %d", opening_lineno);
+	}
+
+	if (closing) { 	/* 'closing' will be 0 if at end of file */
+		used += snprintf(buf + used, sizeof(buf) - used, " does not match '%c'", closing);
+	}
+
+	zend_throw_exception(zend_ce_parse_error, buf, 0);
+}
+
+static void enter_nesting(char opening)
+{
+	zend_nest_location nest_loc = {opening, CG(zend_lineno)};
+	zend_stack_push(&SCNG(nest_location_stack), &nest_loc);
+}
+
+static zend_result exit_nesting(char closing)
+{
+	if (zend_stack_is_empty(&SCNG(nest_location_stack))) {
+		zend_throw_exception_ex(zend_ce_parse_error, 0, "Unmatched '%c'", closing);
+		return FAILURE;
+	}
+
+	zend_nest_location *nest_loc = zend_stack_top(&SCNG(nest_location_stack));
+	char opening = nest_loc->text;
+
+	if ((opening == '{' && closing != '}') ||
+	    (opening == '[' && closing != ']') ||
+	    (opening == '(' && closing != ')')) {
+		report_bad_nesting(opening, nest_loc->lineno, closing);
+		return FAILURE;
+	}
+
+	zend_stack_del_top(&SCNG(nest_location_stack));
+	return SUCCESS;
+}
+
+static zend_result check_nesting_at_end(void)
+{
+	if (!zend_stack_is_empty(&SCNG(nest_location_stack))) {
+		zend_nest_location *nest_loc = zend_stack_top(&SCNG(nest_location_stack));
+		report_bad_nesting(nest_loc->text, nest_loc->lineno, 0);
+		return FAILURE;
+	}
+
+	return SUCCESS;
+}
+
+#define PARSER_MODE() \
+	EXPECTED(elem != NULL)
+
+#define RETURN_TOKEN(_token) do { \
+		token = _token; \
+		goto emit_token; \
+	} while (0)
+
+#define RETURN_TOKEN_WITH_VAL(_token) do { \
+		token = _token; \
+		goto emit_token_with_val; \
+	} while (0)
+
+#define RETURN_TOKEN_WITH_STR(_token, _offset) do { \
+		token = _token; \
+		offset = _offset; \
+		goto emit_token_with_str; \
+	} while (0)
+
+#define RETURN_TOKEN_WITH_IDENT(_token) do { \
+		token = _token; \
+		goto emit_token_with_ident; \
+	} while (0)
+
+#define RETURN_OR_SKIP_TOKEN(_token) do { \
+		token = _token; \
+		if (PARSER_MODE()) { \
+			goto skip_token; \
+		} \
+		goto emit_token; \
+	} while (0)
+
+#define RETURN_EXIT_NESTING_TOKEN(_token) do { \
+		if (exit_nesting(_token) && PARSER_MODE()) { \
+			RETURN_TOKEN(T_ERROR); \
+		} else { \
+			RETURN_TOKEN(_token); \
+		} \
+	} while(0)
+
+#define RETURN_END_TOKEN do { \
+		if (check_nesting_at_end() && PARSER_MODE()) { \
+			RETURN_TOKEN(T_ERROR); \
+		} else { \
+			RETURN_TOKEN(END); \
+		} \
+	} while (0)
+
+int ZEND_FASTCALL lex_scan(zval *zendlval, zend_parser_stack_elem *elem)
+{
+int token;
+int offset;
+int start_line = CG(zend_lineno);
+
+	ZVAL_UNDEF(zendlval);
+restart:
+	SCNG(yy_text) = YYCURSOR;
+
+
+#line 1363 "Zend/zend_language_scanner.c"
+{
+	YYCTYPE yych;
+	unsigned int yyaccept = 0;
+	if (YYGETCONDITION() < 5) {
+		if (YYGETCONDITION() < 2) {
+			if (YYGETCONDITION() < 1) {
+				goto yyc_ST_IN_SCRIPTING;
+			} else {
+				goto yyc_ST_LOOKING_FOR_PROPERTY;
+			}
+		} else {
+			if (YYGETCONDITION() < 3) {
+				goto yyc_ST_BACKQUOTE;
+			} else {
+				if (YYGETCONDITION() < 4) {
+					goto yyc_ST_DOUBLE_QUOTES;
+				} else {
+					goto yyc_ST_HEREDOC;
+				}
+			}
+		}
+	} else {
+		if (YYGETCONDITION() < 8) {
+			if (YYGETCONDITION() < 6) {
+				goto yyc_ST_LOOKING_FOR_VARNAME;
+			} else {
+				if (YYGETCONDITION() < 7) {
+					goto yyc_ST_VAR_OFFSET;
+				} else {
+					goto yyc_SHEBANG;
+				}
+			}
+		} else {
+			if (YYGETCONDITION() < 9) {
+				goto yyc_INITIAL;
+			} else {
+				if (YYGETCONDITION() < 10) {
+					goto yyc_ST_END_HEREDOC;
+				} else {
+					goto yyc_ST_NOWDOC;
+				}
+			}
+		}
+	}
+/* *********************************** */
+yyc_ST_IN_SCRIPTING:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,  18,   2,   0,   0,   2,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			 18,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			236, 236, 204, 204, 204, 204, 204, 204, 
+			140, 140,   0,   0,   0,   0,   0,   0, 
+			  0, 136, 136, 136, 136, 136, 136,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   0,   0,   0,   0,   8, 
+			  0, 136, 136, 136, 136, 136, 136,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   0,   0,   0,   0,   0, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+			  8,   8,   8,   8,   8,   8,   8,   8, 
+		};
+		YYDEBUG(1, *YYCURSOR);
+		YYFILL(16);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 2) {
+			goto yy5;
+		}
+		switch (yych) {
+		case 0x00:
+		case 0x01:
+		case 0x02:
+		case 0x03:
+		case 0x04:
+		case 0x05:
+		case 0x06:
+		case 0x07:
+		case 0x08:
+		case '\t':
+		case '\n':
+		case '\v':
+		case '\f':
+		case '\r':
+		case 0x0E:
+		case 0x0F:
+		case 0x10:
+		case 0x11:
+		case 0x12:
+		case 0x13:
+		case 0x14:
+		case 0x15:
+		case 0x16:
+		case 0x17:
+		case 0x18:
+		case 0x19:
+		case 0x1A:
+		case 0x1B:
+		case 0x1C:
+		case 0x1D:
+		case 0x1E:
+		case 0x1F:
+		case 0x7F:	goto yy3;
+		case ' ':
+		case '!':	goto yy8;
+		case '"':	goto yy10;
+		case '#':	goto yy12;
+		case '$':	goto yy14;
+		case '%':	goto yy15;
+		case '&':	goto yy16;
+		case '\'':	goto yy18;
+		case '(':	goto yy20;
+		case ')':
+		case ']':	goto yy22;
+		case '*':	goto yy24;
+		case '+':	goto yy25;
+		case ',':
+		case ';':
+		case '@':
+		case '~':	goto yy26;
+		case '-':	goto yy27;
+		case '.':	goto yy28;
+		case '/':	goto yy29;
+		case '0':	goto yy30;
+		case '1':
+		case '2':
+		case '3':
+		case '4':
+		case '5':
+		case '6':
+		case '7':
+		case '8':
+		case '9':	goto yy32;
+		case ':':	goto yy34;
+		case '<':	goto yy35;
+		case '=':	goto yy36;
+		case '>':	goto yy37;
+		case '?':	goto yy38;
+		case 'A':
+		case 'a':	goto yy39;
+		case 'B':
+		case 'b':	goto yy41;
+		case 'C':
+		case 'c':	goto yy42;
+		case 'D':
+		case 'd':	goto yy43;
+		case 'E':
+		case 'e':	goto yy44;
+		case 'F':
+		case 'f':	goto yy45;
+		case 'G':
+		case 'g':	goto yy46;
+		case 'I':
+		case 'i':	goto yy49;
+		case 'L':
+		case 'l':	goto yy50;
+		case 'M':
+		case 'm':	goto yy51;
+		case 'N':
+		case 'n':	goto yy52;
+		case 'O':
+		case 'o':	goto yy53;
+		case 'P':
+		case 'p':	goto yy54;
+		case 'R':
+		case 'r':	goto yy55;
+		case 'S':
+		case 's':	goto yy56;
+		case 'T':
+		case 't':	goto yy57;
+		case 'U':
+		case 'u':	goto yy58;
+		case 'V':
+		case 'v':	goto yy59;
+		case 'W':
+		case 'w':	goto yy60;
+		case 'X':
+		case 'x':	goto yy61;
+		case 'Y':
+		case 'y':	goto yy62;
+		case '[':	goto yy63;
+		case '\\':	goto yy64;
+		case '^':	goto yy66;
+		case '_':	goto yy67;
+		case '`':	goto yy68;
+		case '{':	goto yy70;
+		case '|':	goto yy72;
+		case '}':	goto yy73;
+		default:	goto yy47;
+		}
+yy3:
+		YYDEBUG(3, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(4, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 3099 "Zend/zend_language_scanner.l"
+		{
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+
+	RETURN_TOKEN(T_BAD_CHARACTER);
+}
+#line 1585 "Zend/zend_language_scanner.c"
+yy5:
+		YYDEBUG(5, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(6, *YYCURSOR);
+		if (yybm[0+yych] & 2) {
+			goto yy5;
+		}
+		YYDEBUG(7, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1574 "Zend/zend_language_scanner.l"
+		{
+	goto return_whitespace;
+}
+#line 1601 "Zend/zend_language_scanner.c"
+yy8:
+		YYDEBUG(8, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy75;
+yy9:
+		YYDEBUG(9, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1898 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(yytext[0]);
+}
+#line 1613 "Zend/zend_language_scanner.c"
+yy10:
+		YYDEBUG(10, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(11, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2553 "Zend/zend_language_scanner.l"
+		{
+	int bprefix = (yytext[0] != '"') ? 1 : 0;
+
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '"':
+				yyleng = YYCURSOR - SCNG(yy_text);
+				if (EXPECTED(zend_scan_escape_string(zendlval, yytext+bprefix+1, yyleng-bprefix-2, '"') == SUCCESS)
+				 || !PARSER_MODE()) {
+					RETURN_TOKEN_WITH_VAL(T_CONSTANT_ENCAPSED_STRING);
+				} else {
+					RETURN_TOKEN(T_ERROR);
+				}
+			case '$':
+				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
+					break;
+				}
+				continue;
+			case '{':
+				if (*YYCURSOR == '$') {
+					break;
+				}
+				continue;
+			case '\\':
+				if (YYCURSOR < YYLIMIT) {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		YYCURSOR--;
+		break;
+	}
+
+	/* Remember how much was scanned to save rescanning */
+	SET_DOUBLE_QUOTES_SCANNED_LENGTH(YYCURSOR - SCNG(yy_text) - yyleng);
+
+	YYCURSOR = SCNG(yy_text) + yyleng;
+
+	BEGIN(ST_DOUBLE_QUOTES);
+	RETURN_TOKEN('"');
+}
+#line 1664 "Zend/zend_language_scanner.c"
+yy12:
+		YYDEBUG(12, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '[') goto yy77;
+yy13:
+		YYDEBUG(13, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2385 "Zend/zend_language_scanner.l"
+		{
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '\r':
+			case '\n':
+				YYCURSOR--;
+				break;
+			case '?':
+				if (*YYCURSOR == '>') {
+					YYCURSOR--;
+					break;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		break;
+	}
+
+	yyleng = YYCURSOR - SCNG(yy_text);
+	RETURN_OR_SKIP_TOKEN(T_COMMENT);
+}
+#line 1696 "Zend/zend_language_scanner.c"
+yy14:
+		YYDEBUG(14, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy9;
+			if (yych <= 'Z') goto yy79;
+			if (yych <= '^') goto yy9;
+			goto yy79;
+		} else {
+			if (yych <= '`') goto yy9;
+			if (yych <= 'z') goto yy79;
+			if (yych <= 0x7F) goto yy9;
+			goto yy79;
+		}
+yy15:
+		YYDEBUG(15, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy82;
+		goto yy9;
+yy16:
+		YYDEBUG(16, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '#') {
+			if (yych <= '\f') {
+				if (yych <= 0x08) goto yy17;
+				if (yych <= '\n') goto yy84;
+			} else {
+				if (yych <= '\r') goto yy84;
+				if (yych == ' ') goto yy84;
+			}
+		} else {
+			if (yych <= '-') {
+				if (yych <= '$') goto yy87;
+				if (yych == '&') goto yy89;
+			} else {
+				if (yych <= '.') goto yy91;
+				if (yych == '=') goto yy92;
+			}
+		}
+yy17:
+		YYDEBUG(17, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1884 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG);
+}
+#line 1744 "Zend/zend_language_scanner.c"
+yy18:
+		YYDEBUG(18, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(19, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2457 "Zend/zend_language_scanner.l"
+		{
+	char *s, *t;
+	char *end;
+	int bprefix = (yytext[0] != '\'') ? 1 : 0;
+
+	while (1) {
+		if (YYCURSOR < YYLIMIT) {
+			if (*YYCURSOR == '\'') {
+				YYCURSOR++;
+				yyleng = YYCURSOR - SCNG(yy_text);
+
+				break;
+			} else if (*YYCURSOR++ == '\\' && YYCURSOR < YYLIMIT) {
+				YYCURSOR++;
+			}
+		} else {
+			yyleng = YYLIMIT - SCNG(yy_text);
+
+			/* Unclosed single quotes; treat similar to double quotes, but without a separate token
+			 * for ' (unrecognized by parser), instead of old flex fallback to "Unexpected character..."
+			 * rule, which continued in ST_IN_SCRIPTING state after the quote */
+			ZVAL_NULL(zendlval);
+			RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+		}
+	}
+
+	if (yyleng-bprefix-2 <= 1) {
+		if (yyleng-bprefix-2 < 1) {
+			ZVAL_EMPTY_STRING(zendlval);
+		} else {
+			zend_uchar c = (zend_uchar)*(yytext+bprefix+1);
+			if (c == '\n' || c == '\r') {
+				CG(zend_lineno)++;
+			}
+			ZVAL_INTERNED_STR(zendlval, ZSTR_CHAR(c));
+		}
+		goto skip_escape_conversion;
+	}
+	ZVAL_STRINGL(zendlval, yytext+bprefix+1, yyleng-bprefix-2);
+
+	/* convert escape sequences */
+	s = Z_STRVAL_P(zendlval);
+	end = s+Z_STRLEN_P(zendlval);
+	while (1) {
+		if (UNEXPECTED(*s=='\\')) {
+			break;
+		}
+		if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
+			CG(zend_lineno)++;
+		}
+		s++;
+		if (s == end) {
+			goto skip_escape_conversion;
+		}
+	}
+
+	t = s;
+	while (s<end) {
+		if (*s=='\\') {
+			s++;
+			if (*s == '\\' || *s == '\'') {
+				*t++ = *s;
+			} else {
+				*t++ = '\\';
+				*t++ = *s;
+			}
+		} else {
+			*t++ = *s;
+		}
+		if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
+			CG(zend_lineno)++;
+		}
+		s++;
+	}
+	*t = 0;
+	Z_STRLEN_P(zendlval) = t - Z_STRVAL_P(zendlval);
+
+skip_escape_conversion:
+	if (SCNG(output_filter)) {
+		size_t sz = 0;
+		char *str = NULL;
+		zend_string *new_str;
+		s = Z_STRVAL_P(zendlval);
+		// TODO: avoid reallocation ???
+		SCNG(output_filter)((unsigned char **)&str, &sz, (unsigned char *)s, (size_t)Z_STRLEN_P(zendlval));
+		new_str = zend_string_init(str, sz, 0);
+		if (str != s) {
+			efree(str);
+		}
+		zend_string_release_ex(Z_STR_P(zendlval), 0);
+		ZVAL_STR(zendlval, new_str);
+	}
+	RETURN_TOKEN_WITH_VAL(T_CONSTANT_ENCAPSED_STRING);
+}
+#line 1845 "Zend/zend_language_scanner.c"
+yy20:
+		YYDEBUG(20, *YYCURSOR);
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'S') {
+			if (yych <= 'D') {
+				if (yych <= ' ') {
+					if (yych == '\t') goto yy95;
+					if (yych >= ' ') goto yy95;
+				} else {
+					if (yych <= '@') goto yy21;
+					if (yych != 'C') goto yy95;
+				}
+			} else {
+				if (yych <= 'I') {
+					if (yych == 'F') goto yy95;
+					if (yych >= 'I') goto yy95;
+				} else {
+					if (yych == 'O') goto yy95;
+					if (yych >= 'R') goto yy95;
+				}
+			}
+		} else {
+			if (yych <= 'f') {
+				if (yych <= 'b') {
+					if (yych == 'U') goto yy95;
+					if (yych >= 'a') goto yy95;
+				} else {
+					if (yych == 'd') goto yy95;
+					if (yych >= 'f') goto yy95;
+				}
+			} else {
+				if (yych <= 'o') {
+					if (yych == 'i') goto yy95;
+					if (yych >= 'o') goto yy95;
+				} else {
+					if (yych <= 's') {
+						if (yych >= 'r') goto yy95;
+					} else {
+						if (yych == 'u') goto yy95;
+					}
+				}
+			}
+		}
+yy21:
+		YYDEBUG(21, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1893 "Zend/zend_language_scanner.l"
+		{
+	enter_nesting(yytext[0]);
+	RETURN_TOKEN(yytext[0]);
+}
+#line 1898 "Zend/zend_language_scanner.c"
+yy22:
+		YYDEBUG(22, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(23, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1888 "Zend/zend_language_scanner.l"
+		{
+	/* Check that ] and ) match up properly with a preceding [ or ( */
+	RETURN_EXIT_NESTING_TOKEN(yytext[0]);
+}
+#line 1909 "Zend/zend_language_scanner.c"
+yy24:
+		YYDEBUG(24, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '*') goto yy105;
+		if (yych == '=') goto yy107;
+		goto yy9;
+yy25:
+		YYDEBUG(25, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '+') goto yy109;
+		if (yych == '=') goto yy111;
+		goto yy9;
+yy26:
+		YYDEBUG(26, *YYCURSOR);
+		++YYCURSOR;
+		goto yy9;
+yy27:
+		YYDEBUG(27, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '<') {
+			if (yych == '-') goto yy113;
+			goto yy9;
+		} else {
+			if (yych <= '=') goto yy115;
+			if (yych <= '>') goto yy117;
+			goto yy9;
+		}
+yy28:
+		YYDEBUG(28, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '/') {
+			if (yych == '.') goto yy119;
+			goto yy9;
+		} else {
+			if (yych <= '9') goto yy120;
+			if (yych == '=') goto yy123;
+			goto yy9;
+		}
+yy29:
+		YYDEBUG(29, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '.') {
+			if (yych == '*') goto yy125;
+			goto yy9;
+		} else {
+			if (yych <= '/') goto yy127;
+			if (yych == '=') goto yy128;
+			goto yy9;
+		}
+yy30:
+		YYDEBUG(30, *YYCURSOR);
+		yyaccept = 3;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'X') {
+			if (yych <= 'N') {
+				if (yych == 'B') goto yy131;
+				goto yy33;
+			} else {
+				if (yych <= 'O') goto yy133;
+				if (yych <= 'W') goto yy33;
+				goto yy134;
+			}
+		} else {
+			if (yych <= 'n') {
+				if (yych == 'b') goto yy131;
+				goto yy33;
+			} else {
+				if (yych <= 'o') goto yy133;
+				if (yych == 'x') goto yy134;
+				goto yy33;
+			}
+		}
+yy31:
+		YYDEBUG(31, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2032 "Zend/zend_language_scanner.l"
+		{
+	size_t len = yyleng;
+	char *end, *lnum = yytext;
+	bool is_octal = lnum[0] == '0';
+	bool contains_underscores = (memchr(lnum, '_', len) != NULL);
+
+	if (contains_underscores) {
+		lnum = estrndup(lnum, len);
+		strip_underscores(lnum, &len);
+	}
+
+	/* Digits 8 and 9 are illegal in octal literals. */
+	if (is_octal) {
+		size_t i;
+		for (i = 0; i < len; i++) {
+			if (lnum[i] == '8' || lnum[i] == '9') {
+				zend_throw_exception(zend_ce_parse_error, "Invalid numeric literal", 0);
+				if (PARSER_MODE()) {
+					if (contains_underscores) {
+						efree(lnum);
+					}
+					ZVAL_UNDEF(zendlval);
+					RETURN_TOKEN(T_ERROR);
+				}
+
+				/* Continue in order to determine if this is T_LNUMBER or T_DNUMBER. */
+				len = i;
+				break;
+			}
+		}
+	}
+
+
+	if (len < MAX_LENGTH_OF_LONG - 1) { /* Won't overflow */
+		errno = 0;
+		/* base must be passed explicitly for correct parse error on Windows */
+		ZVAL_LONG(zendlval, ZEND_STRTOL(lnum, &end, is_octal ? 8 : 10));
+		ZEND_ASSERT(end == lnum + len);
+	} else {
+		errno = 0;
+		ZVAL_LONG(zendlval, ZEND_STRTOL(lnum, &end, 0));
+		if (errno == ERANGE) { /* Overflow */
+			errno = 0;
+			if (is_octal) { /* octal overflow */
+				ZVAL_DOUBLE(zendlval, zend_oct_strtod(lnum, (const char **)&end));
+			} else {
+				ZVAL_DOUBLE(zendlval, zend_strtod(lnum, (const char **)&end));
+			}
+			ZEND_ASSERT(end == lnum + len);
+			if (contains_underscores) {
+				efree(lnum);
+			}
+			RETURN_TOKEN_WITH_VAL(T_DNUMBER);
+		}
+		ZEND_ASSERT(end == lnum + len);
+	}
+	ZEND_ASSERT(!errno);
+	if (contains_underscores) {
+		efree(lnum);
+	}
+	RETURN_TOKEN_WITH_VAL(T_LNUMBER);
+}
+#line 2049 "Zend/zend_language_scanner.c"
+yy32:
+		YYDEBUG(32, *YYCURSOR);
+		yyaccept = 3;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+yy33:
+		YYDEBUG(33, *YYCURSOR);
+		if (yybm[0+yych] & 4) {
+			goto yy32;
+		}
+		if (yych <= 'E') {
+			if (yych == '.') goto yy130;
+			if (yych <= 'D') goto yy31;
+			goto yy132;
+		} else {
+			if (yych <= '_') {
+				if (yych <= '^') goto yy31;
+				goto yy135;
+			} else {
+				if (yych == 'e') goto yy132;
+				goto yy31;
+			}
+		}
+yy34:
+		YYDEBUG(34, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == ':') goto yy136;
+		goto yy9;
+yy35:
+		YYDEBUG(35, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= ';') goto yy9;
+		if (yych <= '<') goto yy138;
+		if (yych <= '=') goto yy140;
+		if (yych <= '>') goto yy142;
+		goto yy9;
+yy36:
+		YYDEBUG(36, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '<') goto yy9;
+		if (yych <= '=') goto yy143;
+		if (yych <= '>') goto yy145;
+		goto yy9;
+yy37:
+		YYDEBUG(37, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '<') goto yy9;
+		if (yych <= '=') goto yy147;
+		if (yych <= '>') goto yy149;
+		goto yy9;
+yy38:
+		YYDEBUG(38, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '=') {
+			if (yych == '-') goto yy151;
+			goto yy9;
+		} else {
+			if (yych <= '>') goto yy152;
+			if (yych <= '?') goto yy154;
+			goto yy9;
+		}
+yy39:
+		YYDEBUG(39, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'S') {
+			if (yych <= 'M') {
+				if (yych == 'B') goto yy156;
+				goto yy48;
+			} else {
+				if (yych <= 'N') goto yy157;
+				if (yych <= 'Q') goto yy48;
+				if (yych <= 'R') goto yy158;
+				goto yy159;
+			}
+		} else {
+			if (yych <= 'n') {
+				if (yych == 'b') goto yy156;
+				if (yych <= 'm') goto yy48;
+				goto yy157;
+			} else {
+				if (yych <= 'q') goto yy48;
+				if (yych <= 'r') goto yy158;
+				if (yych <= 's') goto yy159;
+				goto yy48;
+			}
+		}
+yy40:
+		YYDEBUG(40, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2380 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_STRING, 0);
+}
+#line 2146 "Zend/zend_language_scanner.c"
+yy41:
+		YYDEBUG(41, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= ';') {
+			if (yych <= '"') {
+				if (yych <= '!') goto yy48;
+				goto yy10;
+			} else {
+				if (yych == '\'') goto yy18;
+				goto yy48;
+			}
+		} else {
+			if (yych <= 'R') {
+				if (yych <= '<') goto yy162;
+				if (yych <= 'Q') goto yy48;
+				goto yy163;
+			} else {
+				if (yych == 'r') goto yy163;
+				goto yy48;
+			}
+		}
+yy42:
+		YYDEBUG(42, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'O') {
+			if (yych <= 'K') {
+				if (yych == 'A') goto yy164;
+				goto yy48;
+			} else {
+				if (yych <= 'L') goto yy165;
+				if (yych <= 'N') goto yy48;
+				goto yy166;
+			}
+		} else {
+			if (yych <= 'k') {
+				if (yych == 'a') goto yy164;
+				goto yy48;
+			} else {
+				if (yych <= 'l') goto yy165;
+				if (yych == 'o') goto yy166;
+				goto yy48;
+			}
+		}
+yy43:
+		YYDEBUG(43, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'O') {
+			if (yych <= 'H') {
+				if (yych == 'E') goto yy167;
+				goto yy48;
+			} else {
+				if (yych <= 'I') goto yy168;
+				if (yych <= 'N') goto yy48;
+				goto yy169;
+			}
+		} else {
+			if (yych <= 'h') {
+				if (yych == 'e') goto yy167;
+				goto yy48;
+			} else {
+				if (yych <= 'i') goto yy168;
+				if (yych == 'o') goto yy169;
+				goto yy48;
+			}
+		}
+yy44:
+		YYDEBUG(44, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		switch (yych) {
+		case 'C':
+		case 'c':	goto yy171;
+		case 'L':
+		case 'l':	goto yy172;
+		case 'M':
+		case 'm':	goto yy173;
+		case 'N':
+		case 'n':	goto yy174;
+		case 'V':
+		case 'v':	goto yy175;
+		case 'X':
+		case 'x':	goto yy176;
+		default:	goto yy48;
+		}
+yy45:
+		YYDEBUG(45, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'U') {
+			if (yych <= 'M') {
+				if (yych == 'I') goto yy177;
+				goto yy48;
+			} else {
+				if (yych <= 'N') goto yy178;
+				if (yych <= 'O') goto yy180;
+				if (yych <= 'T') goto yy48;
+				goto yy181;
+			}
+		} else {
+			if (yych <= 'n') {
+				if (yych == 'i') goto yy177;
+				if (yych <= 'm') goto yy48;
+				goto yy178;
+			} else {
+				if (yych <= 'o') goto yy180;
+				if (yych == 'u') goto yy181;
+				goto yy48;
+			}
+		}
+yy46:
+		YYDEBUG(46, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'O') {
+			if (yych == 'L') goto yy182;
+			if (yych <= 'N') goto yy48;
+			goto yy183;
+		} else {
+			if (yych <= 'l') {
+				if (yych <= 'k') goto yy48;
+				goto yy182;
+			} else {
+				if (yych == 'o') goto yy183;
+				goto yy48;
+			}
+		}
+yy47:
+		YYDEBUG(47, *YYCURSOR);
+		yyaccept = 4;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy48:
+		YYDEBUG(48, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+		goto yy40;
+yy49:
+		YYDEBUG(49, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'S') {
+			if (yych <= 'L') {
+				if (yych == 'F') goto yy184;
+				goto yy48;
+			} else {
+				if (yych <= 'M') goto yy186;
+				if (yych <= 'N') goto yy187;
+				if (yych <= 'R') goto yy48;
+				goto yy188;
+			}
+		} else {
+			if (yych <= 'm') {
+				if (yych == 'f') goto yy184;
+				if (yych <= 'l') goto yy48;
+				goto yy186;
+			} else {
+				if (yych <= 'n') goto yy187;
+				if (yych == 's') goto yy188;
+				goto yy48;
+			}
+		}
+yy50:
+		YYDEBUG(50, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy189;
+		if (yych == 'i') goto yy189;
+		goto yy48;
+yy51:
+		YYDEBUG(51, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy190;
+		if (yych == 'a') goto yy190;
+		goto yy48;
+yy52:
+		YYDEBUG(52, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'E') {
+			if (yych == 'A') goto yy191;
+			if (yych <= 'D') goto yy48;
+			goto yy192;
+		} else {
+			if (yych <= 'a') {
+				if (yych <= '`') goto yy48;
+				goto yy191;
+			} else {
+				if (yych == 'e') goto yy192;
+				goto yy48;
+			}
+		}
+yy53:
+		YYDEBUG(53, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy193;
+		if (yych == 'r') goto yy193;
+		goto yy48;
+yy54:
+		YYDEBUG(54, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'U') {
+			if (yych == 'R') goto yy195;
+			if (yych <= 'T') goto yy48;
+			goto yy196;
+		} else {
+			if (yych <= 'r') {
+				if (yych <= 'q') goto yy48;
+				goto yy195;
+			} else {
+				if (yych == 'u') goto yy196;
+				goto yy48;
+			}
+		}
+yy55:
+		YYDEBUG(55, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy197;
+		if (yych == 'e') goto yy197;
+		goto yy48;
+yy56:
+		YYDEBUG(56, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'W') {
+			if (yych == 'T') goto yy198;
+			if (yych <= 'V') goto yy48;
+			goto yy199;
+		} else {
+			if (yych <= 't') {
+				if (yych <= 's') goto yy48;
+				goto yy198;
+			} else {
+				if (yych == 'w') goto yy199;
+				goto yy48;
+			}
+		}
+yy57:
+		YYDEBUG(57, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'R') {
+			if (yych == 'H') goto yy200;
+			if (yych <= 'Q') goto yy48;
+			goto yy201;
+		} else {
+			if (yych <= 'h') {
+				if (yych <= 'g') goto yy48;
+				goto yy200;
+			} else {
+				if (yych == 'r') goto yy201;
+				goto yy48;
+			}
+		}
+yy58:
+		YYDEBUG(58, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'S') {
+			if (yych == 'N') goto yy202;
+			if (yych <= 'R') goto yy48;
+			goto yy203;
+		} else {
+			if (yych <= 'n') {
+				if (yych <= 'm') goto yy48;
+				goto yy202;
+			} else {
+				if (yych == 's') goto yy203;
+				goto yy48;
+			}
+		}
+yy59:
+		YYDEBUG(59, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy204;
+		if (yych == 'a') goto yy204;
+		goto yy48;
+yy60:
+		YYDEBUG(60, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy205;
+		if (yych == 'h') goto yy205;
+		goto yy48;
+yy61:
+		YYDEBUG(61, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy206;
+		if (yych == 'o') goto yy206;
+		goto yy48;
+yy62:
+		YYDEBUG(62, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy207;
+		if (yych == 'i') goto yy207;
+		goto yy48;
+yy63:
+		YYDEBUG(63, *YYCURSOR);
+		++YYCURSOR;
+		goto yy21;
+yy64:
+		YYDEBUG(64, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy65;
+			if (yych <= 'Z') goto yy208;
+			if (yych >= '_') goto yy208;
+		} else {
+			if (yych <= '`') goto yy65;
+			if (yych <= 'z') goto yy208;
+			if (yych >= 0x80) goto yy208;
+		}
+yy65:
+		YYDEBUG(65, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2376 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_NS_SEPARATOR);
+}
+#line 2478 "Zend/zend_language_scanner.c"
+yy66:
+		YYDEBUG(66, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy211;
+		goto yy9;
+yy67:
+		YYDEBUG(67, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy213;
+		goto yy48;
+yy68:
+		YYDEBUG(68, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(69, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2745 "Zend/zend_language_scanner.l"
+		{
+	BEGIN(ST_BACKQUOTE);
+	RETURN_TOKEN('`');
+}
+#line 2500 "Zend/zend_language_scanner.c"
+yy70:
+		YYDEBUG(70, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(71, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1903 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_IN_SCRIPTING);
+	enter_nesting('{');
+	RETURN_TOKEN('{');
+}
+#line 2512 "Zend/zend_language_scanner.c"
+yy72:
+		YYDEBUG(72, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy214;
+		if (yych == '|') goto yy216;
+		goto yy9;
+yy73:
+		YYDEBUG(73, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(74, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1916 "Zend/zend_language_scanner.l"
+		{
+	RESET_DOC_COMMENT();
+	if (!zend_stack_is_empty(&SCNG(state_stack))) {
+		yy_pop_state();
+	}
+	RETURN_EXIT_NESTING_TOKEN('}');
+}
+#line 2532 "Zend/zend_language_scanner.c"
+yy75:
+		YYDEBUG(75, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy218;
+yy76:
+		YYDEBUG(76, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1779 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_NOT_EQUAL);
+}
+#line 2544 "Zend/zend_language_scanner.c"
+yy77:
+		YYDEBUG(77, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(78, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1400 "Zend/zend_language_scanner.l"
+		{
+	enter_nesting('[');
+	RETURN_TOKEN(T_ATTRIBUTE);
+}
+#line 2555 "Zend/zend_language_scanner.c"
+yy79:
+		YYDEBUG(79, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(80, *YYCURSOR);
+		if (yych <= '^') {
+			if (yych <= '9') {
+				if (yych >= '0') goto yy79;
+			} else {
+				if (yych <= '@') goto yy81;
+				if (yych <= 'Z') goto yy79;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= '_') goto yy79;
+			} else {
+				if (yych <= 'z') goto yy79;
+				if (yych >= 0x80) goto yy79;
+			}
+		}
+yy81:
+		YYDEBUG(81, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2342 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 2584 "Zend/zend_language_scanner.c"
+yy82:
+		YYDEBUG(82, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(83, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1823 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_MOD_EQUAL);
+}
+#line 2594 "Zend/zend_language_scanner.c"
+yy84:
+		YYDEBUG(84, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		YYDEBUG(85, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych <= '\n') {
+				if (yych >= '\t') goto yy84;
+			} else {
+				if (yych == '\r') goto yy84;
+			}
+		} else {
+			if (yych <= '$') {
+				if (yych <= ' ') goto yy84;
+				if (yych >= '$') goto yy87;
+			} else {
+				if (yych == '.') goto yy91;
+			}
+		}
+yy86:
+		YYDEBUG(86, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 46) {
+			if (yyaccept <= 23) {
+				if (yyaccept <= 11) {
+					if (yyaccept <= 5) {
+						if (yyaccept <= 2) {
+							if (yyaccept <= 1) {
+								if (yyaccept == 0) {
+									goto yy17;
+								} else {
+									goto yy21;
+								}
+							} else {
+								goto yy9;
+							}
+						} else {
+							if (yyaccept <= 4) {
+								if (yyaccept == 3) {
+									goto yy31;
+								} else {
+									goto yy40;
+								}
+							} else {
+								goto yy122;
+							}
+						}
+					} else {
+						if (yyaccept <= 8) {
+							if (yyaccept <= 7) {
+								if (yyaccept == 6) {
+									goto yy126;
+								} else {
+									goto yy139;
+								}
+							} else {
+								goto yy160;
+							}
+						} else {
+							if (yyaccept <= 10) {
+								if (yyaccept == 9) {
+									goto yy170;
+								} else {
+									goto yy179;
+								}
+							} else {
+								goto yy185;
+							}
+						}
+					}
+				} else {
+					if (yyaccept <= 17) {
+						if (yyaccept <= 14) {
+							if (yyaccept <= 13) {
+								if (yyaccept == 12) {
+									goto yy194;
+								} else {
+									goto yy210;
+								}
+							} else {
+								goto yy239;
+							}
+						} else {
+							if (yyaccept <= 16) {
+								if (yyaccept == 15) {
+									goto yy245;
+								} else {
+									goto yy248;
+								}
+							} else {
+								goto yy267;
+							}
+						}
+					} else {
+						if (yyaccept <= 20) {
+							if (yyaccept <= 19) {
+								if (yyaccept == 18) {
+									goto yy271;
+								} else {
+									goto yy283;
+								}
+							} else {
+								goto yy294;
+							}
+						} else {
+							if (yyaccept <= 22) {
+								if (yyaccept == 21) {
+									goto yy307;
+								} else {
+									goto yy319;
+								}
+							} else {
+								goto yy322;
+							}
+						}
+					}
+				}
+			} else {
+				if (yyaccept <= 35) {
+					if (yyaccept <= 29) {
+						if (yyaccept <= 26) {
+							if (yyaccept <= 25) {
+								if (yyaccept == 24) {
+									goto yy324;
+								} else {
+									goto yy327;
+								}
+							} else {
+								goto yy359;
+							}
+						} else {
+							if (yyaccept <= 28) {
+								if (yyaccept == 27) {
+									goto yy368;
+								} else {
+									goto yy370;
+								}
+							} else {
+								goto yy379;
+							}
+						}
+					} else {
+						if (yyaccept <= 32) {
+							if (yyaccept <= 31) {
+								if (yyaccept == 30) {
+									goto yy381;
+								} else {
+									goto yy388;
+								}
+							} else {
+								goto yy395;
+							}
+						} else {
+							if (yyaccept <= 34) {
+								if (yyaccept == 33) {
+									goto yy445;
+								} else {
+									goto yy447;
+								}
+							} else {
+								goto yy450;
+							}
+						}
+					}
+				} else {
+					if (yyaccept <= 41) {
+						if (yyaccept <= 38) {
+							if (yyaccept <= 37) {
+								if (yyaccept == 36) {
+									goto yy452;
+								} else {
+									goto yy454;
+								}
+							} else {
+								goto yy456;
+							}
+						} else {
+							if (yyaccept <= 40) {
+								if (yyaccept == 39) {
+									goto yy462;
+								} else {
+									goto yy466;
+								}
+							} else {
+								goto yy473;
+							}
+						}
+					} else {
+						if (yyaccept <= 44) {
+							if (yyaccept <= 43) {
+								if (yyaccept == 42) {
+									goto yy483;
+								} else {
+									goto yy485;
+								}
+							} else {
+								goto yy488;
+							}
+						} else {
+							if (yyaccept == 45) {
+								goto yy498;
+							} else {
+								goto yy500;
+							}
+						}
+					}
+				}
+			}
+		} else {
+			if (yyaccept <= 69) {
+				if (yyaccept <= 58) {
+					if (yyaccept <= 52) {
+						if (yyaccept <= 49) {
+							if (yyaccept <= 48) {
+								if (yyaccept == 47) {
+									goto yy502;
+								} else {
+									goto yy504;
+								}
+							} else {
+								goto yy506;
+							}
+						} else {
+							if (yyaccept <= 51) {
+								if (yyaccept == 50) {
+									goto yy541;
+								} else {
+									goto yy544;
+								}
+							} else {
+								goto yy548;
+							}
+						}
+					} else {
+						if (yyaccept <= 55) {
+							if (yyaccept <= 54) {
+								if (yyaccept == 53) {
+									goto yy556;
+								} else {
+									goto yy566;
+								}
+							} else {
+								goto yy570;
+							}
+						} else {
+							if (yyaccept <= 57) {
+								if (yyaccept == 56) {
+									goto yy572;
+								} else {
+									goto yy574;
+								}
+							} else {
+								goto yy602;
+							}
+						}
+					}
+				} else {
+					if (yyaccept <= 64) {
+						if (yyaccept <= 61) {
+							if (yyaccept <= 60) {
+								if (yyaccept == 59) {
+									goto yy604;
+								} else {
+									goto yy612;
+								}
+							} else {
+								goto yy614;
+							}
+						} else {
+							if (yyaccept <= 63) {
+								if (yyaccept == 62) {
+									goto yy616;
+								} else {
+									goto yy620;
+								}
+							} else {
+								goto yy626;
+							}
+						}
+					} else {
+						if (yyaccept <= 67) {
+							if (yyaccept <= 66) {
+								if (yyaccept == 65) {
+									goto yy630;
+								} else {
+									goto yy634;
+								}
+							} else {
+								goto yy647;
+							}
+						} else {
+							if (yyaccept == 68) {
+								goto yy649;
+							} else {
+								goto yy651;
+							}
+						}
+					}
+				}
+			} else {
+				if (yyaccept <= 81) {
+					if (yyaccept <= 75) {
+						if (yyaccept <= 72) {
+							if (yyaccept <= 71) {
+								if (yyaccept == 70) {
+									goto yy656;
+								} else {
+									goto yy660;
+								}
+							} else {
+								goto yy669;
+							}
+						} else {
+							if (yyaccept <= 74) {
+								if (yyaccept == 73) {
+									goto yy674;
+								} else {
+									goto yy678;
+								}
+							} else {
+								goto yy685;
+							}
+						}
+					} else {
+						if (yyaccept <= 78) {
+							if (yyaccept <= 77) {
+								if (yyaccept == 76) {
+									goto yy692;
+								} else {
+									goto yy694;
+								}
+							} else {
+								goto yy696;
+							}
+						} else {
+							if (yyaccept <= 80) {
+								if (yyaccept == 79) {
+									goto yy698;
+								} else {
+									goto yy706;
+								}
+							} else {
+								goto yy712;
+							}
+						}
+					}
+				} else {
+					if (yyaccept <= 87) {
+						if (yyaccept <= 84) {
+							if (yyaccept <= 83) {
+								if (yyaccept == 82) {
+									goto yy714;
+								} else {
+									goto yy716;
+								}
+							} else {
+								goto yy720;
+							}
+						} else {
+							if (yyaccept <= 86) {
+								if (yyaccept == 85) {
+									goto yy723;
+								} else {
+									goto yy730;
+								}
+							} else {
+								goto yy737;
+							}
+						}
+					} else {
+						if (yyaccept <= 90) {
+							if (yyaccept <= 89) {
+								if (yyaccept == 88) {
+									goto yy748;
+								} else {
+									goto yy750;
+								}
+							} else {
+								goto yy752;
+							}
+						} else {
+							if (yyaccept == 91) {
+								goto yy758;
+							} else {
+								goto yy761;
+							}
+						}
+					}
+				}
+			}
+		}
+yy87:
+		YYDEBUG(87, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(88, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1879 "Zend/zend_language_scanner.l"
+		{
+	yyless(1);
+	RETURN_TOKEN(T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG);
+}
+#line 2997 "Zend/zend_language_scanner.c"
+yy89:
+		YYDEBUG(89, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(90, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1855 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_BOOLEAN_AND);
+}
+#line 3007 "Zend/zend_language_scanner.c"
+yy91:
+		YYDEBUG(91, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '.') goto yy220;
+		goto yy86;
+yy92:
+		YYDEBUG(92, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(93, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1835 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_AND_EQUAL);
+}
+#line 3022 "Zend/zend_language_scanner.c"
+yy94:
+		YYDEBUG(94, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(7);
+		yych = *YYCURSOR;
+yy95:
+		YYDEBUG(95, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy94;
+		}
+		switch (yych) {
+		case 'A':
+		case 'a':	goto yy96;
+		case 'B':
+		case 'b':	goto yy97;
+		case 'D':
+		case 'd':	goto yy98;
+		case 'F':
+		case 'f':	goto yy99;
+		case 'I':
+		case 'i':	goto yy100;
+		case 'O':
+		case 'o':	goto yy101;
+		case 'R':
+		case 'r':	goto yy102;
+		case 'S':
+		case 's':	goto yy103;
+		case 'U':
+		case 'u':	goto yy104;
+		default:	goto yy86;
+		}
+yy96:
+		YYDEBUG(96, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy221;
+		if (yych == 'r') goto yy221;
+		goto yy86;
+yy97:
+		YYDEBUG(97, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= 'O') {
+			if (yych == 'I') goto yy222;
+			if (yych <= 'N') goto yy86;
+			goto yy223;
+		} else {
+			if (yych <= 'i') {
+				if (yych <= 'h') goto yy86;
+				goto yy222;
+			} else {
+				if (yych == 'o') goto yy223;
+				goto yy86;
+			}
+		}
+yy98:
+		YYDEBUG(98, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'O') goto yy224;
+		if (yych == 'o') goto yy224;
+		goto yy86;
+yy99:
+		YYDEBUG(99, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy225;
+		if (yych == 'l') goto yy225;
+		goto yy86;
+yy100:
+		YYDEBUG(100, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy226;
+		if (yych == 'n') goto yy226;
+		goto yy86;
+yy101:
+		YYDEBUG(101, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'B') goto yy227;
+		if (yych == 'b') goto yy227;
+		goto yy86;
+yy102:
+		YYDEBUG(102, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy228;
+		if (yych == 'e') goto yy228;
+		goto yy86;
+yy103:
+		YYDEBUG(103, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy229;
+		if (yych == 't') goto yy229;
+		goto yy86;
+yy104:
+		YYDEBUG(104, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy230;
+		if (yych == 'n') goto yy230;
+		goto yy86;
+yy105:
+		YYDEBUG(105, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy231;
+		YYDEBUG(106, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1807 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_POW);
+}
+#line 3128 "Zend/zend_language_scanner.c"
+yy107:
+		YYDEBUG(107, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(108, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1803 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_MUL_EQUAL);
+}
+#line 3138 "Zend/zend_language_scanner.c"
+yy109:
+		YYDEBUG(109, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(110, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1759 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_INC);
+}
+#line 3148 "Zend/zend_language_scanner.c"
+yy111:
+		YYDEBUG(111, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(112, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1795 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_PLUS_EQUAL);
+}
+#line 3158 "Zend/zend_language_scanner.c"
+yy113:
+		YYDEBUG(113, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(114, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1763 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_DEC);
+}
+#line 3168 "Zend/zend_language_scanner.c"
+yy115:
+		YYDEBUG(115, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(116, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1799 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_MINUS_EQUAL);
+}
+#line 3178 "Zend/zend_language_scanner.c"
+yy117:
+		YYDEBUG(117, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(118, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1564 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN(T_OBJECT_OPERATOR);
+}
+#line 3189 "Zend/zend_language_scanner.c"
+yy119:
+		YYDEBUG(119, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '.') goto yy233;
+		goto yy86;
+yy120:
+		YYDEBUG(120, *YYCURSOR);
+		yyaccept = 5;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+yy121:
+		YYDEBUG(121, *YYCURSOR);
+		if (yych <= 'E') {
+			if (yych <= '/') goto yy122;
+			if (yych <= '9') goto yy120;
+			if (yych >= 'E') goto yy132;
+		} else {
+			if (yych <= '_') {
+				if (yych >= '_') goto yy235;
+			} else {
+				if (yych == 'e') goto yy132;
+			}
+		}
+yy122:
+		YYDEBUG(122, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2162 "Zend/zend_language_scanner.l"
+		{
+	const char *end;
+	size_t len = yyleng;
+	char *dnum = yytext;
+	bool contains_underscores = (memchr(dnum, '_', len) != NULL);
+
+	if (contains_underscores) {
+		dnum = estrndup(dnum, len);
+		strip_underscores(dnum, &len);
+	}
+
+	ZVAL_DOUBLE(zendlval, zend_strtod(dnum, &end));
+	/* errno isn't checked since we allow HUGE_VAL/INF overflow */
+	ZEND_ASSERT(end == dnum + len);
+	if (contains_underscores) {
+		efree(dnum);
+	}
+	RETURN_TOKEN_WITH_VAL(T_DNUMBER);
+}
+#line 3237 "Zend/zend_language_scanner.c"
+yy123:
+		YYDEBUG(123, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(124, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1819 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_CONCAT_EQUAL);
+}
+#line 3247 "Zend/zend_language_scanner.c"
+yy125:
+		YYDEBUG(125, *YYCURSOR);
+		yyaccept = 6;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '*') goto yy236;
+yy126:
+		YYDEBUG(126, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2409 "Zend/zend_language_scanner.l"
+		{
+	int doc_com;
+
+	if (yyleng > 2) {
+		doc_com = 1;
+		RESET_DOC_COMMENT();
+	} else {
+		doc_com = 0;
+	}
+
+	while (YYCURSOR < YYLIMIT) {
+		if (*YYCURSOR++ == '*' && *YYCURSOR == '/') {
+			break;
+		}
+	}
+
+	if (YYCURSOR < YYLIMIT) {
+		YYCURSOR++;
+	} else {
+		zend_throw_exception_ex(zend_ce_parse_error, 0, "Unterminated comment starting line %d", CG(zend_lineno));
+		if (PARSER_MODE()) {
+			RETURN_TOKEN(T_ERROR);
+		}
+	}
+
+	yyleng = YYCURSOR - SCNG(yy_text);
+	HANDLE_NEWLINES(yytext, yyleng);
+
+	if (doc_com) {
+		CG(doc_comment) = zend_string_init(yytext, yyleng, 0);
+		RETURN_OR_SKIP_TOKEN(T_DOC_COMMENT);
+	}
+
+	RETURN_OR_SKIP_TOKEN(T_COMMENT);
+}
+#line 3292 "Zend/zend_language_scanner.c"
+yy127:
+		YYDEBUG(127, *YYCURSOR);
+		++YYCURSOR;
+		goto yy13;
+yy128:
+		YYDEBUG(128, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(129, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1815 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_DIV_EQUAL);
+}
+#line 3306 "Zend/zend_language_scanner.c"
+yy130:
+		YYDEBUG(130, *YYCURSOR);
+		yyaccept = 5;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy122;
+		goto yy121;
+yy131:
+		YYDEBUG(131, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 32) {
+			goto yy237;
+		}
+		goto yy86;
+yy132:
+		YYDEBUG(132, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= ',') {
+			if (yych == '+') goto yy240;
+			goto yy86;
+		} else {
+			if (yych <= '-') goto yy240;
+			if (yych <= '/') goto yy86;
+			if (yych <= '9') goto yy241;
+			goto yy86;
+		}
+yy133:
+		YYDEBUG(133, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy243;
+		}
+		goto yy86;
+yy134:
+		YYDEBUG(134, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy246;
+		}
+		goto yy86;
+yy135:
+		YYDEBUG(135, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 4) {
+			goto yy32;
+		}
+		goto yy86;
+yy136:
+		YYDEBUG(136, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(137, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1597 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_PAAMAYIM_NEKUDOTAYIM);
+}
+#line 3370 "Zend/zend_language_scanner.c"
+yy138:
+		YYDEBUG(138, *YYCURSOR);
+		yyaccept = 7;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= ';') goto yy139;
+		if (yych <= '<') goto yy249;
+		if (yych <= '=') goto yy251;
+yy139:
+		YYDEBUG(139, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1871 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_SL);
+}
+#line 3385 "Zend/zend_language_scanner.c"
+yy140:
+		YYDEBUG(140, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy253;
+		YYDEBUG(141, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1787 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_SMALLER_OR_EQUAL);
+}
+#line 3396 "Zend/zend_language_scanner.c"
+yy142:
+		YYDEBUG(142, *YYCURSOR);
+		++YYCURSOR;
+		goto yy76;
+yy143:
+		YYDEBUG(143, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy255;
+		YYDEBUG(144, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1775 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_EQUAL);
+}
+#line 3411 "Zend/zend_language_scanner.c"
+yy145:
+		YYDEBUG(145, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(146, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1743 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_DOUBLE_ARROW);
+}
+#line 3421 "Zend/zend_language_scanner.c"
+yy147:
+		YYDEBUG(147, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(148, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1791 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_GREATER_OR_EQUAL);
+}
+#line 3431 "Zend/zend_language_scanner.c"
+yy149:
+		YYDEBUG(149, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy257;
+		YYDEBUG(150, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1875 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_SR);
+}
+#line 3442 "Zend/zend_language_scanner.c"
+yy151:
+		YYDEBUG(151, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy259;
+		goto yy86;
+yy152:
+		YYDEBUG(152, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy261;
+		if (yych == '\r') goto yy262;
+yy153:
+		YYDEBUG(153, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2445 "Zend/zend_language_scanner.l"
+		{
+	BEGIN(INITIAL);
+	if (yytext[yyleng-1] != '>') {
+		CG(increment_lineno) = 1;
+	}
+	if (PARSER_MODE()) {
+		RETURN_TOKEN(';');  /* implicit ';' at php-end tag */
+	}
+	RETURN_TOKEN(T_CLOSE_TAG);
+}
+#line 3467 "Zend/zend_language_scanner.c"
+yy154:
+		YYDEBUG(154, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '=') goto yy263;
+		YYDEBUG(155, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1605 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_COALESCE);
+}
+#line 3478 "Zend/zend_language_scanner.c"
+yy156:
+		YYDEBUG(156, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy265;
+		if (yych == 's') goto yy265;
+		goto yy48;
+yy157:
+		YYDEBUG(157, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy266;
+		if (yych == 'd') goto yy266;
+		goto yy48;
+yy158:
+		YYDEBUG(158, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy268;
+		if (yych == 'r') goto yy268;
+		goto yy48;
+yy159:
+		YYDEBUG(159, *YYCURSOR);
+		yyaccept = 8;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy160:
+		YYDEBUG(160, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1487 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_AS);
+}
+#line 3515 "Zend/zend_language_scanner.c"
+yy161:
+		YYDEBUG(161, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy86;
+			if (yych <= 'Z') goto yy269;
+			if (yych <= '^') goto yy86;
+			goto yy269;
+		} else {
+			if (yych <= '`') goto yy86;
+			if (yych <= 'z') goto yy269;
+			if (yych <= 0x7F) goto yy86;
+			goto yy269;
+		}
+yy162:
+		YYDEBUG(162, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '<') goto yy272;
+		goto yy86;
+yy163:
+		YYDEBUG(163, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy273;
+		if (yych == 'e') goto yy273;
+		goto yy48;
+yy164:
+		YYDEBUG(164, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'T') {
+			if (yych <= 'L') {
+				if (yych <= 'K') goto yy48;
+				goto yy274;
+			} else {
+				if (yych <= 'R') goto yy48;
+				if (yych <= 'S') goto yy275;
+				goto yy276;
+			}
+		} else {
+			if (yych <= 'r') {
+				if (yych == 'l') goto yy274;
+				goto yy48;
+			} else {
+				if (yych <= 's') goto yy275;
+				if (yych <= 't') goto yy276;
+				goto yy48;
+			}
+		}
+yy165:
+		YYDEBUG(165, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'O') {
+			if (yych == 'A') goto yy277;
+			if (yych <= 'N') goto yy48;
+			goto yy278;
+		} else {
+			if (yych <= 'a') {
+				if (yych <= '`') goto yy48;
+				goto yy277;
+			} else {
+				if (yych == 'o') goto yy278;
+				goto yy48;
+			}
+		}
+yy166:
+		YYDEBUG(166, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy279;
+		if (yych == 'n') goto yy279;
+		goto yy48;
+yy167:
+		YYDEBUG(167, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'F') {
+			if (yych == 'C') goto yy280;
+			if (yych <= 'E') goto yy48;
+			goto yy281;
+		} else {
+			if (yych <= 'c') {
+				if (yych <= 'b') goto yy48;
+				goto yy280;
+			} else {
+				if (yych == 'f') goto yy281;
+				goto yy48;
+			}
+		}
+yy168:
+		YYDEBUG(168, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy282;
+		if (yych == 'e') goto yy282;
+		goto yy48;
+yy169:
+		YYDEBUG(169, *YYCURSOR);
+		yyaccept = 9;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy170:
+		YYDEBUG(170, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1455 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_DO);
+}
+#line 3630 "Zend/zend_language_scanner.c"
+yy171:
+		YYDEBUG(171, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy284;
+		if (yych == 'h') goto yy284;
+		goto yy48;
+yy172:
+		YYDEBUG(172, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy285;
+		if (yych == 's') goto yy285;
+		goto yy48;
+yy173:
+		YYDEBUG(173, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'P') goto yy286;
+		if (yych == 'p') goto yy286;
+		goto yy48;
+yy174:
+		YYDEBUG(174, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'U') {
+			if (yych == 'D') goto yy287;
+			if (yych <= 'T') goto yy48;
+			goto yy288;
+		} else {
+			if (yych <= 'd') {
+				if (yych <= 'c') goto yy48;
+				goto yy287;
+			} else {
+				if (yych == 'u') goto yy288;
+				goto yy48;
+			}
+		}
+yy175:
+		YYDEBUG(175, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy289;
+		if (yych == 'a') goto yy289;
+		goto yy48;
+yy176:
+		YYDEBUG(176, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'T') {
+			if (yych == 'I') goto yy290;
+			if (yych <= 'S') goto yy48;
+			goto yy291;
+		} else {
+			if (yych <= 'i') {
+				if (yych <= 'h') goto yy48;
+				goto yy290;
+			} else {
+				if (yych == 't') goto yy291;
+				goto yy48;
+			}
+		}
+yy177:
+		YYDEBUG(177, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy292;
+		if (yych == 'n') goto yy292;
+		goto yy48;
+yy178:
+		YYDEBUG(178, *YYCURSOR);
+		yyaccept = 10;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy179:
+		YYDEBUG(179, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1384 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FN);
+}
+#line 3715 "Zend/zend_language_scanner.c"
+yy180:
+		YYDEBUG(180, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy293;
+		if (yych == 'r') goto yy293;
+		goto yy48;
+yy181:
+		YYDEBUG(181, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy295;
+		if (yych == 'n') goto yy295;
+		goto yy48;
+yy182:
+		YYDEBUG(182, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy296;
+		if (yych == 'o') goto yy296;
+		goto yy48;
+yy183:
+		YYDEBUG(183, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy297;
+		if (yych == 't') goto yy297;
+		goto yy48;
+yy184:
+		YYDEBUG(184, *YYCURSOR);
+		yyaccept = 11;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy185:
+		YYDEBUG(185, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1431 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_IF);
+}
+#line 3759 "Zend/zend_language_scanner.c"
+yy186:
+		YYDEBUG(186, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'P') goto yy298;
+		if (yych == 'p') goto yy298;
+		goto yy48;
+yy187:
+		YYDEBUG(187, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'T') {
+			if (yych <= 'C') {
+				if (yych <= 'B') goto yy48;
+				goto yy299;
+			} else {
+				if (yych <= 'R') goto yy48;
+				if (yych <= 'S') goto yy300;
+				goto yy301;
+			}
+		} else {
+			if (yych <= 'r') {
+				if (yych == 'c') goto yy299;
+				goto yy48;
+			} else {
+				if (yych <= 's') goto yy300;
+				if (yych <= 't') goto yy301;
+				goto yy48;
+			}
+		}
+yy188:
+		YYDEBUG(188, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy302;
+		if (yych == 's') goto yy302;
+		goto yy48;
+yy189:
+		YYDEBUG(189, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy303;
+		if (yych == 's') goto yy303;
+		goto yy48;
+yy190:
+		YYDEBUG(190, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy304;
+		if (yych == 't') goto yy304;
+		goto yy48;
+yy191:
+		YYDEBUG(191, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy305;
+		if (yych == 'm') goto yy305;
+		goto yy48;
+yy192:
+		YYDEBUG(192, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'W') goto yy306;
+		if (yych == 'w') goto yy306;
+		goto yy48;
+yy193:
+		YYDEBUG(193, *YYCURSOR);
+		yyaccept = 12;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy194:
+		YYDEBUG(194, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1859 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_LOGICAL_OR);
+}
+#line 3840 "Zend/zend_language_scanner.c"
+yy195:
+		YYDEBUG(195, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'O') {
+			if (yych == 'I') goto yy308;
+			if (yych <= 'N') goto yy48;
+			goto yy309;
+		} else {
+			if (yych <= 'i') {
+				if (yych <= 'h') goto yy48;
+				goto yy308;
+			} else {
+				if (yych == 'o') goto yy309;
+				goto yy48;
+			}
+		}
+yy196:
+		YYDEBUG(196, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'B') goto yy310;
+		if (yych == 'b') goto yy310;
+		goto yy48;
+yy197:
+		YYDEBUG(197, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'T') {
+			if (yych <= 'P') {
+				if (yych == 'A') goto yy311;
+				goto yy48;
+			} else {
+				if (yych <= 'Q') goto yy312;
+				if (yych <= 'S') goto yy48;
+				goto yy313;
+			}
+		} else {
+			if (yych <= 'p') {
+				if (yych == 'a') goto yy311;
+				goto yy48;
+			} else {
+				if (yych <= 'q') goto yy312;
+				if (yych == 't') goto yy313;
+				goto yy48;
+			}
+		}
+yy198:
+		YYDEBUG(198, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy314;
+		if (yych == 'a') goto yy314;
+		goto yy48;
+yy199:
+		YYDEBUG(199, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy315;
+		if (yych == 'i') goto yy315;
+		goto yy48;
+yy200:
+		YYDEBUG(200, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy316;
+		if (yych == 'r') goto yy316;
+		goto yy48;
+yy201:
+		YYDEBUG(201, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'Y') {
+			if (yych == 'A') goto yy317;
+			if (yych <= 'X') goto yy48;
+			goto yy318;
+		} else {
+			if (yych <= 'a') {
+				if (yych <= '`') goto yy48;
+				goto yy317;
+			} else {
+				if (yych == 'y') goto yy318;
+				goto yy48;
+			}
+		}
+yy202:
+		YYDEBUG(202, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy320;
+		if (yych == 's') goto yy320;
+		goto yy48;
+yy203:
+		YYDEBUG(203, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy321;
+		if (yych == 'e') goto yy321;
+		goto yy48;
+yy204:
+		YYDEBUG(204, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy323;
+		if (yych == 'r') goto yy323;
+		goto yy48;
+yy205:
+		YYDEBUG(205, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy325;
+		if (yych == 'i') goto yy325;
+		goto yy48;
+yy206:
+		YYDEBUG(206, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy326;
+		if (yych == 'r') goto yy326;
+		goto yy48;
+yy207:
+		YYDEBUG(207, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy328;
+		if (yych == 'e') goto yy328;
+		goto yy48;
+yy208:
+		YYDEBUG(208, *YYCURSOR);
+		yyaccept = 13;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(209, *YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy210;
+				if (yych <= '9') goto yy208;
+			} else {
+				if (yych <= 'Z') goto yy208;
+				if (yych >= '\\') goto yy329;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy208;
+			} else {
+				if (yych <= 'z') goto yy208;
+				if (yych >= 0x80) goto yy208;
+			}
+		}
+yy210:
+		YYDEBUG(210, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2372 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_NAME_FULLY_QUALIFIED, 1);
+}
+#line 3998 "Zend/zend_language_scanner.c"
+yy211:
+		YYDEBUG(211, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(212, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1843 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_XOR_EQUAL);
+}
+#line 4008 "Zend/zend_language_scanner.c"
+yy213:
+		YYDEBUG(213, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		switch (yych) {
+		case 'C':
+		case 'c':	goto yy330;
+		case 'D':
+		case 'd':	goto yy331;
+		case 'F':
+		case 'f':	goto yy332;
+		case 'H':
+		case 'h':	goto yy333;
+		case 'L':
+		case 'l':	goto yy334;
+		case 'M':
+		case 'm':	goto yy335;
+		case 'N':
+		case 'n':	goto yy336;
+		case 'T':
+		case 't':	goto yy337;
+		default:	goto yy48;
+		}
+yy214:
+		YYDEBUG(214, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(215, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1839 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_OR_EQUAL);
+}
+#line 4041 "Zend/zend_language_scanner.c"
+yy216:
+		YYDEBUG(216, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(217, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1851 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_BOOLEAN_OR);
+}
+#line 4051 "Zend/zend_language_scanner.c"
+yy218:
+		YYDEBUG(218, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(219, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1771 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_NOT_IDENTICAL);
+}
+#line 4061 "Zend/zend_language_scanner.c"
+yy220:
+		YYDEBUG(220, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '.') goto yy87;
+		goto yy86;
+yy221:
+		YYDEBUG(221, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy338;
+		if (yych == 'r') goto yy338;
+		goto yy86;
+yy222:
+		YYDEBUG(222, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy339;
+		if (yych == 'n') goto yy339;
+		goto yy86;
+yy223:
+		YYDEBUG(223, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'O') goto yy340;
+		if (yych == 'o') goto yy340;
+		goto yy86;
+yy224:
+		YYDEBUG(224, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'U') goto yy341;
+		if (yych == 'u') goto yy341;
+		goto yy86;
+yy225:
+		YYDEBUG(225, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'O') goto yy342;
+		if (yych == 'o') goto yy342;
+		goto yy86;
+yy226:
+		YYDEBUG(226, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy343;
+		if (yych == 't') goto yy343;
+		goto yy86;
+yy227:
+		YYDEBUG(227, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'J') goto yy344;
+		if (yych == 'j') goto yy344;
+		goto yy86;
+yy228:
+		YYDEBUG(228, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy345;
+		if (yych == 'a') goto yy345;
+		goto yy86;
+yy229:
+		YYDEBUG(229, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy346;
+		if (yych == 'r') goto yy346;
+		goto yy86;
+yy230:
+		YYDEBUG(230, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'S') goto yy347;
+		if (yych == 's') goto yy347;
+		goto yy86;
+yy231:
+		YYDEBUG(231, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(232, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1811 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_POW_EQUAL);
+}
+#line 4136 "Zend/zend_language_scanner.c"
+yy233:
+		YYDEBUG(233, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(234, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1601 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_ELLIPSIS);
+}
+#line 4146 "Zend/zend_language_scanner.c"
+yy235:
+		YYDEBUG(235, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '/') goto yy86;
+		if (yych <= '9') goto yy120;
+		goto yy86;
+yy236:
+		YYDEBUG(236, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy86;
+			if (yych <= '\n') goto yy348;
+			goto yy86;
+		} else {
+			if (yych <= '\r') goto yy348;
+			if (yych == ' ') goto yy348;
+			goto yy86;
+		}
+yy237:
+		YYDEBUG(237, *YYCURSOR);
+		yyaccept = 14;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(238, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy237;
+		}
+		if (yych == '_') goto yy131;
+yy239:
+		YYDEBUG(239, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1940 "Zend/zend_language_scanner.l"
+		{
+	/* The +/- 2 skips "0b" */
+	size_t len = yyleng - 2;
+	char *end, *bin = yytext + 2;
+	bool contains_underscores;
+
+	/* Skip any leading 0s */
+	while (len > 0 && (*bin == '0' || *bin == '_')) {
+		++bin;
+		--len;
+	}
+
+	contains_underscores = (memchr(bin, '_', len) != NULL);
+
+	if (contains_underscores) {
+		bin = estrndup(bin, len);
+		strip_underscores(bin, &len);
+	}
+
+	if (len < SIZEOF_ZEND_LONG * 8) {
+		if (len == 0) {
+			ZVAL_LONG(zendlval, 0);
+		} else {
+			errno = 0;
+			ZVAL_LONG(zendlval, ZEND_STRTOL(bin, &end, 2));
+			ZEND_ASSERT(!errno && end == bin + len);
+		}
+		if (contains_underscores) {
+			efree(bin);
+		}
+		RETURN_TOKEN_WITH_VAL(T_LNUMBER);
+	} else {
+		ZVAL_DOUBLE(zendlval, zend_bin_strtod(bin, (const char **)&end));
+		/* errno isn't checked since we allow HUGE_VAL/INF overflow */
+		ZEND_ASSERT(end == bin + len);
+		if (contains_underscores) {
+			efree(bin);
+		}
+		RETURN_TOKEN_WITH_VAL(T_DNUMBER);
+	}
+}
+#line 4223 "Zend/zend_language_scanner.c"
+yy240:
+		YYDEBUG(240, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '/') goto yy86;
+		if (yych >= ':') goto yy86;
+yy241:
+		YYDEBUG(241, *YYCURSOR);
+		yyaccept = 5;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(242, *YYCURSOR);
+		if (yych <= '/') goto yy122;
+		if (yych <= '9') goto yy241;
+		if (yych == '_') goto yy240;
+		goto yy122;
+yy243:
+		YYDEBUG(243, *YYCURSOR);
+		yyaccept = 15;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(244, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy243;
+		}
+		if (yych == '_') goto yy133;
+yy245:
+		YYDEBUG(245, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1982 "Zend/zend_language_scanner.l"
+		{
+	/* The +/- 2 skips "0o" */
+	size_t len = yyleng - 2;
+	char *end, *octal = yytext + 2;
+	bool contains_underscores = (memchr(octal, '_', len) != NULL);
+
+	/* Skip any leading 0s */
+	while (len > 0 && (*octal == '0' || *octal == '_')) {
+		++octal;
+		--len;
+	}
+
+	if (len == 0) {
+		ZVAL_LONG(zendlval, 0);
+		RETURN_TOKEN_WITH_VAL(T_LNUMBER);
+	}
+
+	if (contains_underscores) {
+		octal = estrndup(octal, len);
+		strip_underscores(octal, &len);
+	}
+
+	errno = 0;
+
+	ZVAL_LONG(zendlval, ZEND_STRTOL(octal, &end, 8));
+
+	ZEND_ASSERT(end == octal + len);
+
+	if (!errno) {
+		if (contains_underscores) {
+			efree(octal);
+		}
+		RETURN_TOKEN_WITH_VAL(T_LNUMBER);
+	}
+
+	/* Overflow */
+	ZEND_ASSERT(errno == ERANGE);
+	/* Reset errno */
+	errno = 0;
+
+	/* zend_oct_strtod skips leading '0' */
+	ZVAL_DOUBLE(zendlval, zend_oct_strtod(octal, (const char **)&end));
+	ZEND_ASSERT(!errno);
+	ZEND_ASSERT(end == octal + len);
+	if (contains_underscores) {
+		efree(octal);
+	}
+	RETURN_TOKEN_WITH_VAL(T_DNUMBER);
+}
+#line 4306 "Zend/zend_language_scanner.c"
+yy246:
+		YYDEBUG(246, *YYCURSOR);
+		yyaccept = 16;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(247, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy246;
+		}
+		if (yych == '_') goto yy134;
+yy248:
+		YYDEBUG(248, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2095 "Zend/zend_language_scanner.l"
+		{
+	/* The +/- 2 skips "0x" */
+	size_t len = yyleng - 2;
+	char *end, *hex = yytext + 2;
+	bool contains_underscores;
+
+	/* Skip any leading 0s */
+	while (len > 0 && (*hex == '0' || *hex == '_')) {
+		++hex;
+		--len;
+	}
+
+	contains_underscores = (memchr(hex, '_', len) != NULL);
+
+	if (contains_underscores) {
+		hex = estrndup(hex, len);
+		strip_underscores(hex, &len);
+	}
+
+	if (len < SIZEOF_ZEND_LONG * 2 || (len == SIZEOF_ZEND_LONG * 2 && *hex <= '7')) {
+		if (len == 0) {
+			ZVAL_LONG(zendlval, 0);
+		} else {
+			errno = 0;
+			ZVAL_LONG(zendlval, ZEND_STRTOL(hex, &end, 16));
+			ZEND_ASSERT(!errno && end == hex + len);
+		}
+		if (contains_underscores) {
+			efree(hex);
+		}
+		RETURN_TOKEN_WITH_VAL(T_LNUMBER);
+	} else {
+		ZVAL_DOUBLE(zendlval, zend_hex_strtod(hex, (const char **)&end));
+		/* errno isn't checked since we allow HUGE_VAL/INF overflow */
+		ZEND_ASSERT(end == hex + len);
+		if (contains_underscores) {
+			efree(hex);
+		}
+		RETURN_TOKEN_WITH_VAL(T_DNUMBER);
+	}
+}
+#line 4363 "Zend/zend_language_scanner.c"
+yy249:
+		YYDEBUG(249, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(250, *YYCURSOR);
+		if (yych <= '\'') {
+			if (yych <= ' ') {
+				if (yych == '\t') goto yy249;
+				if (yych <= 0x1F) goto yy86;
+				goto yy249;
+			} else {
+				if (yych == '"') goto yy350;
+				if (yych <= '&') goto yy86;
+				goto yy351;
+			}
+		} else {
+			if (yych <= '_') {
+				if (yych <= '@') goto yy86;
+				if (yych <= 'Z') goto yy352;
+				if (yych <= '^') goto yy86;
+				goto yy352;
+			} else {
+				if (yych <= '`') goto yy86;
+				if (yych <= 'z') goto yy352;
+				if (yych <= 0x7F) goto yy86;
+				goto yy352;
+			}
+		}
+yy251:
+		YYDEBUG(251, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(252, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1827 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_SL_EQUAL);
+}
+#line 4402 "Zend/zend_language_scanner.c"
+yy253:
+		YYDEBUG(253, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(254, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1783 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_SPACESHIP);
+}
+#line 4412 "Zend/zend_language_scanner.c"
+yy255:
+		YYDEBUG(255, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(256, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1767 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_IS_IDENTICAL);
+}
+#line 4422 "Zend/zend_language_scanner.c"
+yy257:
+		YYDEBUG(257, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(258, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1831 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_SR_EQUAL);
+}
+#line 4432 "Zend/zend_language_scanner.c"
+yy259:
+		YYDEBUG(259, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(260, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1569 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN(T_NULLSAFE_OBJECT_OPERATOR);
+}
+#line 4443 "Zend/zend_language_scanner.c"
+yy261:
+		YYDEBUG(261, *YYCURSOR);
+		++YYCURSOR;
+		goto yy153;
+yy262:
+		YYDEBUG(262, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy261;
+		goto yy153;
+yy263:
+		YYDEBUG(263, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(264, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1847 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_COALESCE_EQUAL);
+}
+#line 4462 "Zend/zend_language_scanner.c"
+yy265:
+		YYDEBUG(265, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy354;
+		if (yych == 't') goto yy354;
+		goto yy48;
+yy266:
+		YYDEBUG(266, *YYCURSOR);
+		yyaccept = 17;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy267:
+		YYDEBUG(267, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1863 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_LOGICAL_AND);
+}
+#line 4485 "Zend/zend_language_scanner.c"
+yy268:
+		YYDEBUG(268, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy355;
+		if (yych == 'a') goto yy355;
+		goto yy48;
+yy269:
+		YYDEBUG(269, *YYCURSOR);
+		yyaccept = 18;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(270, *YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy271;
+				if (yych <= '9') goto yy269;
+			} else {
+				if (yych <= 'Z') goto yy269;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy269;
+			} else {
+				if (yych <= 'z') goto yy269;
+				if (yych >= 0x80) goto yy269;
+			}
+		}
+yy271:
+		YYDEBUG(271, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2368 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_NAME_QUALIFIED, 0);
+}
+#line 4523 "Zend/zend_language_scanner.c"
+yy272:
+		YYDEBUG(272, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '<') goto yy249;
+		goto yy86;
+yy273:
+		YYDEBUG(273, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy356;
+		if (yych == 'a') goto yy356;
+		goto yy48;
+yy274:
+		YYDEBUG(274, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy357;
+		if (yych == 'l') goto yy357;
+		goto yy48;
+yy275:
+		YYDEBUG(275, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy358;
+		if (yych == 'e') goto yy358;
+		goto yy48;
+yy276:
+		YYDEBUG(276, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy360;
+		if (yych == 'c') goto yy360;
+		goto yy48;
+yy277:
+		YYDEBUG(277, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy361;
+		if (yych == 's') goto yy361;
+		goto yy48;
+yy278:
+		YYDEBUG(278, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy362;
+		if (yych == 'n') goto yy362;
+		goto yy48;
+yy279:
+		YYDEBUG(279, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'T') {
+			if (yych <= 'R') goto yy48;
+			if (yych <= 'S') goto yy363;
+			goto yy364;
+		} else {
+			if (yych <= 'r') goto yy48;
+			if (yych <= 's') goto yy363;
+			if (yych <= 't') goto yy364;
+			goto yy48;
+		}
+yy280:
+		YYDEBUG(280, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy365;
+		if (yych == 'l') goto yy365;
+		goto yy48;
+yy281:
+		YYDEBUG(281, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy366;
+		if (yych == 'a') goto yy366;
+		goto yy48;
+yy282:
+		YYDEBUG(282, *YYCURSOR);
+		yyaccept = 19;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy283:
+		YYDEBUG(283, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1380 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_EXIT);
+}
+#line 4614 "Zend/zend_language_scanner.c"
+yy284:
+		YYDEBUG(284, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy367;
+		if (yych == 'o') goto yy367;
+		goto yy48;
+yy285:
+		YYDEBUG(285, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy369;
+		if (yych == 'e') goto yy369;
+		goto yy48;
+yy286:
+		YYDEBUG(286, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy371;
+		if (yych == 't') goto yy371;
+		goto yy48;
+yy287:
+		YYDEBUG(287, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		switch (yych) {
+		case 'D':
+		case 'd':	goto yy372;
+		case 'F':
+		case 'f':	goto yy373;
+		case 'I':
+		case 'i':	goto yy374;
+		case 'S':
+		case 's':	goto yy375;
+		case 'W':
+		case 'w':	goto yy376;
+		default:	goto yy48;
+		}
+yy288:
+		YYDEBUG(288, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy377;
+		if (yych == 'm') goto yy377;
+		goto yy48;
+yy289:
+		YYDEBUG(289, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy378;
+		if (yych == 'l') goto yy378;
+		goto yy48;
+yy290:
+		YYDEBUG(290, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy380;
+		if (yych == 't') goto yy380;
+		goto yy48;
+yy291:
+		YYDEBUG(291, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy382;
+		if (yych == 'e') goto yy382;
+		goto yy48;
+yy292:
+		YYDEBUG(292, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy383;
+		if (yych == 'a') goto yy383;
+		goto yy48;
+yy293:
+		YYDEBUG(293, *YYCURSOR);
+		yyaccept = 20;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= 'D') {
+				if (yych <= '/') goto yy294;
+				if (yych <= '9') goto yy47;
+				if (yych >= 'A') goto yy47;
+			} else {
+				if (yych <= 'E') goto yy384;
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= 'd') {
+				if (yych == '_') goto yy47;
+				if (yych >= 'a') goto yy47;
+			} else {
+				if (yych <= 'e') goto yy384;
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy294:
+		YYDEBUG(294, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1459 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FOR);
+}
+#line 4719 "Zend/zend_language_scanner.c"
+yy295:
+		YYDEBUG(295, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy385;
+		if (yych == 'c') goto yy385;
+		goto yy48;
+yy296:
+		YYDEBUG(296, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'B') goto yy386;
+		if (yych == 'b') goto yy386;
+		goto yy48;
+yy297:
+		YYDEBUG(297, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy387;
+		if (yych == 'o') goto yy387;
+		goto yy48;
+yy298:
+		YYDEBUG(298, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy389;
+		if (yych == 'l') goto yy389;
+		goto yy48;
+yy299:
+		YYDEBUG(299, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy390;
+		if (yych == 'l') goto yy390;
+		goto yy48;
+yy300:
+		YYDEBUG(300, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy391;
+		if (yych == 't') goto yy391;
+		goto yy48;
+yy301:
+		YYDEBUG(301, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy392;
+		if (yych == 'e') goto yy392;
+		goto yy48;
+yy302:
+		YYDEBUG(302, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy393;
+		if (yych == 'e') goto yy393;
+		goto yy48;
+yy303:
+		YYDEBUG(303, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy394;
+		if (yych == 't') goto yy394;
+		goto yy48;
+yy304:
+		YYDEBUG(304, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy396;
+		if (yych == 'c') goto yy396;
+		goto yy48;
+yy305:
+		YYDEBUG(305, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy397;
+		if (yych == 'e') goto yy397;
+		goto yy48;
+yy306:
+		YYDEBUG(306, *YYCURSOR);
+		yyaccept = 21;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy307:
+		YYDEBUG(307, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1609 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_NEW);
+}
+#line 4812 "Zend/zend_language_scanner.c"
+yy308:
+		YYDEBUG(308, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'V') {
+			if (yych == 'N') goto yy398;
+			if (yych <= 'U') goto yy48;
+			goto yy399;
+		} else {
+			if (yych <= 'n') {
+				if (yych <= 'm') goto yy48;
+				goto yy398;
+			} else {
+				if (yych == 'v') goto yy399;
+				goto yy48;
+			}
+		}
+yy309:
+		YYDEBUG(309, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy400;
+		if (yych == 't') goto yy400;
+		goto yy48;
+yy310:
+		YYDEBUG(310, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy401;
+		if (yych == 'l') goto yy401;
+		goto yy48;
+yy311:
+		YYDEBUG(311, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy402;
+		if (yych == 'd') goto yy402;
+		goto yy48;
+yy312:
+		YYDEBUG(312, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy403;
+		if (yych == 'u') goto yy403;
+		goto yy48;
+yy313:
+		YYDEBUG(313, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy404;
+		if (yych == 'u') goto yy404;
+		goto yy48;
+yy314:
+		YYDEBUG(314, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy405;
+		if (yych == 't') goto yy405;
+		goto yy48;
+yy315:
+		YYDEBUG(315, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy406;
+		if (yych == 't') goto yy406;
+		goto yy48;
+yy316:
+		YYDEBUG(316, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy407;
+		if (yych == 'o') goto yy407;
+		goto yy48;
+yy317:
+		YYDEBUG(317, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy408;
+		if (yych == 'i') goto yy408;
+		goto yy48;
+yy318:
+		YYDEBUG(318, *YYCURSOR);
+		yyaccept = 22;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy319:
+		YYDEBUG(319, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1415 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_TRY);
+}
+#line 4908 "Zend/zend_language_scanner.c"
+yy320:
+		YYDEBUG(320, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy409;
+		if (yych == 'e') goto yy409;
+		goto yy48;
+yy321:
+		YYDEBUG(321, *YYCURSOR);
+		yyaccept = 23;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy322:
+		YYDEBUG(322, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1681 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_USE);
+}
+#line 4931 "Zend/zend_language_scanner.c"
+yy323:
+		YYDEBUG(323, *YYCURSOR);
+		yyaccept = 24;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy324:
+		YYDEBUG(324, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1617 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_VAR);
+}
+#line 4947 "Zend/zend_language_scanner.c"
+yy325:
+		YYDEBUG(325, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy410;
+		if (yych == 'l') goto yy410;
+		goto yy48;
+yy326:
+		YYDEBUG(326, *YYCURSOR);
+		yyaccept = 25;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy327:
+		YYDEBUG(327, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1867 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_LOGICAL_XOR);
+}
+#line 4970 "Zend/zend_language_scanner.c"
+yy328:
+		YYDEBUG(328, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy411;
+		if (yych == 'l') goto yy411;
+		goto yy48;
+yy329:
+		YYDEBUG(329, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy86;
+			if (yych <= 'Z') goto yy208;
+			if (yych <= '^') goto yy86;
+			goto yy208;
+		} else {
+			if (yych <= '`') goto yy86;
+			if (yych <= 'z') goto yy208;
+			if (yych <= 0x7F) goto yy86;
+			goto yy208;
+		}
+yy330:
+		YYDEBUG(330, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy412;
+		if (yych == 'l') goto yy412;
+		goto yy48;
+yy331:
+		YYDEBUG(331, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy413;
+		if (yych == 'i') goto yy413;
+		goto yy48;
+yy332:
+		YYDEBUG(332, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'U') {
+			if (yych == 'I') goto yy414;
+			if (yych <= 'T') goto yy48;
+			goto yy415;
+		} else {
+			if (yych <= 'i') {
+				if (yych <= 'h') goto yy48;
+				goto yy414;
+			} else {
+				if (yych == 'u') goto yy415;
+				goto yy48;
+			}
+		}
+yy333:
+		YYDEBUG(333, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy416;
+		if (yych == 'a') goto yy416;
+		goto yy48;
+yy334:
+		YYDEBUG(334, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy417;
+		if (yych == 'i') goto yy417;
+		goto yy48;
+yy335:
+		YYDEBUG(335, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy418;
+		if (yych == 'e') goto yy418;
+		goto yy48;
+yy336:
+		YYDEBUG(336, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy419;
+		if (yych == 'a') goto yy419;
+		goto yy48;
+yy337:
+		YYDEBUG(337, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy420;
+		if (yych == 'r') goto yy420;
+		goto yy48;
+yy338:
+		YYDEBUG(338, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy421;
+		if (yych == 'a') goto yy421;
+		goto yy86;
+yy339:
+		YYDEBUG(339, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy422;
+		if (yych == 'a') goto yy422;
+		goto yy86;
+yy340:
+		YYDEBUG(340, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy423;
+		if (yych == 'l') goto yy423;
+		goto yy86;
+yy341:
+		YYDEBUG(341, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'B') goto yy424;
+		if (yych == 'b') goto yy424;
+		goto yy86;
+yy342:
+		YYDEBUG(342, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy425;
+		if (yych == 'a') goto yy425;
+		goto yy86;
+yy343:
+		YYDEBUG(343, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy430;
+		if (yych == 'e') goto yy430;
+		goto yy427;
+yy344:
+		YYDEBUG(344, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy431;
+		if (yych == 'e') goto yy431;
+		goto yy86;
+yy345:
+		YYDEBUG(345, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy432;
+		if (yych == 'l') goto yy432;
+		goto yy86;
+yy346:
+		YYDEBUG(346, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'I') goto yy434;
+		if (yych == 'i') goto yy434;
+		goto yy86;
+yy347:
+		YYDEBUG(347, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy435;
+		if (yych == 'e') goto yy435;
+		goto yy86;
+yy348:
+		YYDEBUG(348, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(349, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy126;
+			if (yych <= '\n') goto yy348;
+			goto yy126;
+		} else {
+			if (yych <= '\r') goto yy348;
+			if (yych == ' ') goto yy348;
+			goto yy126;
+		}
+yy350:
+		YYDEBUG(350, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '"') goto yy86;
+		if (yych <= '/') goto yy437;
+		if (yych <= '9') goto yy86;
+		goto yy437;
+yy351:
+		YYDEBUG(351, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\'') goto yy86;
+		if (yych <= '/') goto yy439;
+		if (yych <= '9') goto yy86;
+		goto yy439;
+yy352:
+		YYDEBUG(352, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(353, *YYCURSOR);
+		if (yych <= '@') {
+			if (yych <= '\f') {
+				if (yych == '\n') goto yy440;
+				goto yy86;
+			} else {
+				if (yych <= '\r') goto yy442;
+				if (yych <= '/') goto yy86;
+				if (yych <= '9') goto yy352;
+				goto yy86;
+			}
+		} else {
+			if (yych <= '_') {
+				if (yych <= 'Z') goto yy352;
+				if (yych <= '^') goto yy86;
+				goto yy352;
+			} else {
+				if (yych <= '`') goto yy86;
+				if (yych <= 'z') goto yy352;
+				if (yych <= 0x7F) goto yy86;
+				goto yy352;
+			}
+		}
+yy354:
+		YYDEBUG(354, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy443;
+		if (yych == 'r') goto yy443;
+		goto yy48;
+yy355:
+		YYDEBUG(355, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'Y') goto yy444;
+		if (yych == 'y') goto yy444;
+		goto yy48;
+yy356:
+		YYDEBUG(356, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'K') goto yy446;
+		if (yych == 'k') goto yy446;
+		goto yy48;
+yy357:
+		YYDEBUG(357, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy448;
+		if (yych == 'a') goto yy448;
+		goto yy48;
+yy358:
+		YYDEBUG(358, *YYCURSOR);
+		yyaccept = 26;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy359:
+		YYDEBUG(359, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1503 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CASE);
+}
+#line 5220 "Zend/zend_language_scanner.c"
+yy360:
+		YYDEBUG(360, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy449;
+		if (yych == 'h') goto yy449;
+		goto yy48;
+yy361:
+		YYDEBUG(361, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy451;
+		if (yych == 's') goto yy451;
+		goto yy48;
+yy362:
+		YYDEBUG(362, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy453;
+		if (yych == 'e') goto yy453;
+		goto yy48;
+yy363:
+		YYDEBUG(363, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy455;
+		if (yych == 't') goto yy455;
+		goto yy48;
+yy364:
+		YYDEBUG(364, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy457;
+		if (yych == 'i') goto yy457;
+		goto yy48;
+yy365:
+		YYDEBUG(365, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy458;
+		if (yych == 'a') goto yy458;
+		goto yy48;
+yy366:
+		YYDEBUG(366, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy459;
+		if (yych == 'u') goto yy459;
+		goto yy48;
+yy367:
+		YYDEBUG(367, *YYCURSOR);
+		yyaccept = 27;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy368:
+		YYDEBUG(368, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1523 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ECHO);
+}
+#line 5285 "Zend/zend_language_scanner.c"
+yy369:
+		YYDEBUG(369, *YYCURSOR);
+		yyaccept = 28;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= 'H') {
+				if (yych <= '/') goto yy370;
+				if (yych <= '9') goto yy47;
+				if (yych >= 'A') goto yy47;
+			} else {
+				if (yych <= 'I') goto yy460;
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= 'h') {
+				if (yych == '_') goto yy47;
+				if (yych >= 'a') goto yy47;
+			} else {
+				if (yych <= 'i') goto yy460;
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy370:
+		YYDEBUG(370, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1443 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ELSE);
+}
+#line 5317 "Zend/zend_language_scanner.c"
+yy371:
+		YYDEBUG(371, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'Y') goto yy461;
+		if (yych == 'y') goto yy461;
+		goto yy48;
+yy372:
+		YYDEBUG(372, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy463;
+		if (yych == 'e') goto yy463;
+		goto yy48;
+yy373:
+		YYDEBUG(373, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy464;
+		if (yych == 'o') goto yy464;
+		goto yy48;
+yy374:
+		YYDEBUG(374, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy465;
+		if (yych == 'f') goto yy465;
+		goto yy48;
+yy375:
+		YYDEBUG(375, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'W') goto yy467;
+		if (yych == 'w') goto yy467;
+		goto yy48;
+yy376:
+		YYDEBUG(376, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy468;
+		if (yych == 'h') goto yy468;
+		goto yy48;
+yy377:
+		YYDEBUG(377, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy48;
+			if (yych <= '\n') goto yy469;
+			goto yy48;
+		} else {
+			if (yych <= '\r') goto yy469;
+			if (yych == ' ') goto yy469;
+			goto yy48;
+		}
+yy378:
+		YYDEBUG(378, *YYCURSOR);
+		yyaccept = 29;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy379:
+		YYDEBUG(379, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1657 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_EVAL);
+}
+#line 5388 "Zend/zend_language_scanner.c"
+yy380:
+		YYDEBUG(380, *YYCURSOR);
+		yyaccept = 30;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy381:
+		YYDEBUG(381, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1376 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_EXIT);
+}
+#line 5404 "Zend/zend_language_scanner.c"
+yy382:
+		YYDEBUG(382, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy471;
+		if (yych == 'n') goto yy471;
+		goto yy48;
+yy383:
+		YYDEBUG(383, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy472;
+		if (yych == 'l') goto yy472;
+		goto yy48;
+yy384:
+		YYDEBUG(384, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy474;
+		if (yych == 'a') goto yy474;
+		goto yy48;
+yy385:
+		YYDEBUG(385, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy475;
+		if (yych == 't') goto yy475;
+		goto yy48;
+yy386:
+		YYDEBUG(386, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy476;
+		if (yych == 'a') goto yy476;
+		goto yy48;
+yy387:
+		YYDEBUG(387, *YYCURSOR);
+		yyaccept = 31;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy388:
+		YYDEBUG(388, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1519 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_GOTO);
+}
+#line 5455 "Zend/zend_language_scanner.c"
+yy389:
+		YYDEBUG(389, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy477;
+		if (yych == 'e') goto yy477;
+		goto yy48;
+yy390:
+		YYDEBUG(390, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy478;
+		if (yych == 'u') goto yy478;
+		goto yy48;
+yy391:
+		YYDEBUG(391, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'E') {
+			if (yych == 'A') goto yy479;
+			if (yych <= 'D') goto yy48;
+			goto yy480;
+		} else {
+			if (yych <= 'a') {
+				if (yych <= '`') goto yy48;
+				goto yy479;
+			} else {
+				if (yych == 'e') goto yy480;
+				goto yy48;
+			}
+		}
+yy392:
+		YYDEBUG(392, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy481;
+		if (yych == 'r') goto yy481;
+		goto yy48;
+yy393:
+		YYDEBUG(393, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy482;
+		if (yych == 't') goto yy482;
+		goto yy48;
+yy394:
+		YYDEBUG(394, *YYCURSOR);
+		yyaccept = 32;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy395:
+		YYDEBUG(395, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1747 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_LIST);
+}
+#line 5516 "Zend/zend_language_scanner.c"
+yy396:
+		YYDEBUG(396, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy484;
+		if (yych == 'h') goto yy484;
+		goto yy48;
+yy397:
+		YYDEBUG(397, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy486;
+		if (yych == 's') goto yy486;
+		goto yy48;
+yy398:
+		YYDEBUG(398, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy487;
+		if (yych == 't') goto yy487;
+		goto yy48;
+yy399:
+		YYDEBUG(399, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy489;
+		if (yych == 'a') goto yy489;
+		goto yy48;
+yy400:
+		YYDEBUG(400, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy490;
+		if (yych == 'e') goto yy490;
+		goto yy48;
+yy401:
+		YYDEBUG(401, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy491;
+		if (yych == 'i') goto yy491;
+		goto yy48;
+yy402:
+		YYDEBUG(402, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy492;
+		if (yych == 'o') goto yy492;
+		goto yy48;
+yy403:
+		YYDEBUG(403, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy493;
+		if (yych == 'i') goto yy493;
+		goto yy48;
+yy404:
+		YYDEBUG(404, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy494;
+		if (yych == 'r') goto yy494;
+		goto yy48;
+yy405:
+		YYDEBUG(405, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy495;
+		if (yych == 'i') goto yy495;
+		goto yy48;
+yy406:
+		YYDEBUG(406, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy496;
+		if (yych == 'c') goto yy496;
+		goto yy48;
+yy407:
+		YYDEBUG(407, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'W') goto yy497;
+		if (yych == 'w') goto yy497;
+		goto yy48;
+yy408:
+		YYDEBUG(408, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy499;
+		if (yych == 't') goto yy499;
+		goto yy48;
+yy409:
+		YYDEBUG(409, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy501;
+		if (yych == 't') goto yy501;
+		goto yy48;
+yy410:
+		YYDEBUG(410, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy503;
+		if (yych == 'e') goto yy503;
+		goto yy48;
+yy411:
+		YYDEBUG(411, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy505;
+		if (yych == 'd') goto yy505;
+		goto yy48;
+yy412:
+		YYDEBUG(412, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy507;
+		if (yych == 'a') goto yy507;
+		goto yy48;
+yy413:
+		YYDEBUG(413, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy508;
+		if (yych == 'r') goto yy508;
+		goto yy48;
+yy414:
+		YYDEBUG(414, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy509;
+		if (yych == 'l') goto yy509;
+		goto yy48;
+yy415:
+		YYDEBUG(415, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy510;
+		if (yych == 'n') goto yy510;
+		goto yy48;
+yy416:
+		YYDEBUG(416, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy511;
+		if (yych == 'l') goto yy511;
+		goto yy48;
+yy417:
+		YYDEBUG(417, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy512;
+		if (yych == 'n') goto yy512;
+		goto yy48;
+yy418:
+		YYDEBUG(418, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy513;
+		if (yych == 't') goto yy513;
+		goto yy48;
+yy419:
+		YYDEBUG(419, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy514;
+		if (yych == 'm') goto yy514;
+		goto yy48;
+yy420:
+		YYDEBUG(420, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy515;
+		if (yych == 'a') goto yy515;
+		goto yy48;
+yy421:
+		YYDEBUG(421, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'Y') goto yy516;
+		if (yych == 'y') goto yy516;
+		goto yy86;
+yy422:
+		YYDEBUG(422, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy518;
+		if (yych == 'r') goto yy518;
+		goto yy86;
+yy423:
+		YYDEBUG(423, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy523;
+		if (yych == 'e') goto yy523;
+		goto yy520;
+yy424:
+		YYDEBUG(424, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy524;
+		if (yych == 'l') goto yy524;
+		goto yy86;
+yy425:
+		YYDEBUG(425, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy525;
+		if (yych == 't') goto yy525;
+		goto yy86;
+yy426:
+		YYDEBUG(426, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy427:
+		YYDEBUG(427, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy426;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy426;
+			if (yych != ')') goto yy86;
+		}
+		YYDEBUG(428, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(429, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1621 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_INT_CAST);
+}
+#line 5744 "Zend/zend_language_scanner.c"
+yy430:
+		YYDEBUG(430, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'G') goto yy527;
+		if (yych == 'g') goto yy527;
+		goto yy86;
+yy431:
+		YYDEBUG(431, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'C') goto yy528;
+		if (yych == 'c') goto yy528;
+		goto yy86;
+yy432:
+		YYDEBUG(432, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(433, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy432;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy432;
+			if (yych == ')') goto yy529;
+			goto yy86;
+		}
+yy434:
+		YYDEBUG(434, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy531;
+		if (yych == 'n') goto yy531;
+		goto yy86;
+yy435:
+		YYDEBUG(435, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy532;
+		if (yych == 't') goto yy532;
+		goto yy86;
+yy436:
+		YYDEBUG(436, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+yy437:
+		YYDEBUG(437, *YYCURSOR);
+		if (yych <= 'Z') {
+			if (yych <= '/') {
+				if (yych == '"') goto yy534;
+				goto yy86;
+			} else {
+				if (yych <= '9') goto yy436;
+				if (yych <= '@') goto yy86;
+				goto yy436;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy436;
+				goto yy86;
+			} else {
+				if (yych <= 'z') goto yy436;
+				if (yych <= 0x7F) goto yy86;
+				goto yy436;
+			}
+		}
+yy438:
+		YYDEBUG(438, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+yy439:
+		YYDEBUG(439, *YYCURSOR);
+		if (yych <= 'Z') {
+			if (yych <= '/') {
+				if (yych == '\'') goto yy534;
+				goto yy86;
+			} else {
+				if (yych <= '9') goto yy438;
+				if (yych <= '@') goto yy86;
+				goto yy438;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy438;
+				goto yy86;
+			} else {
+				if (yych <= 'z') goto yy438;
+				if (yych <= 0x7F) goto yy86;
+				goto yy438;
+			}
+		}
+yy440:
+		YYDEBUG(440, *YYCURSOR);
+		++YYCURSOR;
+yy441:
+		YYDEBUG(441, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2599 "Zend/zend_language_scanner.l"
+		{
+	char *s;
+	unsigned char *saved_cursor;
+	int bprefix = (yytext[0] != '<') ? 1 : 0, spacing = 0, indentation = 0;
+	zend_heredoc_label *heredoc_label = emalloc(sizeof(zend_heredoc_label));
+	bool is_heredoc = 1;
+
+	CG(zend_lineno)++;
+	heredoc_label->length = yyleng-bprefix-3-1-(yytext[yyleng-2]=='\r'?1:0);
+	s = yytext+bprefix+3;
+	while ((*s == ' ') || (*s == '\t')) {
+		s++;
+		heredoc_label->length--;
+	}
+
+	if (*s == '\'') {
+		s++;
+		heredoc_label->length -= 2;
+		is_heredoc = 0;
+
+		BEGIN(ST_NOWDOC);
+	} else {
+		if (*s == '"') {
+			s++;
+			heredoc_label->length -= 2;
+		}
+
+		BEGIN(ST_HEREDOC);
+	}
+
+	heredoc_label->label = estrndup(s, heredoc_label->length);
+	heredoc_label->indentation_uses_spaces = 0;
+	heredoc_label->indentation = 0;
+	saved_cursor = YYCURSOR;
+
+	zend_ptr_stack_push(&SCNG(heredoc_label_stack), (void *) heredoc_label);
+
+	while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
+		if (*YYCURSOR == '\t') {
+			spacing |= HEREDOC_USING_TABS;
+		} else {
+			spacing |= HEREDOC_USING_SPACES;
+		}
+		++YYCURSOR;
+		++indentation;
+	}
+
+	if (YYCURSOR == YYLIMIT) {
+		YYCURSOR = saved_cursor;
+		RETURN_TOKEN(T_START_HEREDOC);
+	}
+
+	/* Check for ending label on the next line */
+	if (heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, s, heredoc_label->length)) {
+		if (!IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
+			if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
+				zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+				if (PARSER_MODE()) {
+					RETURN_TOKEN(T_ERROR);
+				}
+			}
+
+			YYCURSOR = saved_cursor;
+			heredoc_label->indentation = indentation;
+
+			BEGIN(ST_END_HEREDOC);
+			RETURN_TOKEN(T_START_HEREDOC);
+		}
+	}
+
+	YYCURSOR = saved_cursor;
+
+	if (is_heredoc && !SCNG(heredoc_scan_ahead)) {
+		zend_lex_state current_state;
+		zend_string *saved_doc_comment = CG(doc_comment);
+		int heredoc_nesting_level = 1;
+		int first_token = 0;
+		int error = 0;
+
+		zend_save_lexical_state(&current_state);
+
+		SCNG(heredoc_scan_ahead) = 1;
+		SCNG(heredoc_indentation) = 0;
+		SCNG(heredoc_indentation_uses_spaces) = 0;
+		LANG_SCNG(on_event) = NULL;
+		CG(doc_comment) = NULL;
+
+		zend_ptr_stack_reverse_apply(&current_state.heredoc_label_stack, copy_heredoc_label_stack);
+
+		zend_exception_save();
+		while (heredoc_nesting_level) {
+			zval zv;
+			int retval;
+
+			ZVAL_UNDEF(&zv);
+			retval = lex_scan(&zv, NULL);
+			zval_ptr_dtor_nogc(&zv);
+
+			if (EG(exception)) {
+				zend_clear_exception();
+				break;
+			}
+
+			if (!first_token) {
+				first_token = retval;
+			}
+
+			switch (retval) {
+				case T_START_HEREDOC:
+					++heredoc_nesting_level;
+					break;
+				case T_END_HEREDOC:
+					--heredoc_nesting_level;
+					break;
+				case END:
+					heredoc_nesting_level = 0;
+			}
+		}
+		zend_exception_restore();
+
+		if (
+		    (first_token == T_VARIABLE
+		     || first_token == T_DOLLAR_OPEN_CURLY_BRACES
+		     || first_token == T_CURLY_OPEN
+		    ) && SCNG(heredoc_indentation)) {
+			zend_throw_exception_ex(zend_ce_parse_error, 0, "Invalid body indentation level (expecting an indentation level of at least %d)", SCNG(heredoc_indentation));
+			error = 1;
+		}
+
+		heredoc_label->indentation = SCNG(heredoc_indentation);
+		heredoc_label->indentation_uses_spaces = SCNG(heredoc_indentation_uses_spaces);
+
+		zend_restore_lexical_state(&current_state);
+		SCNG(heredoc_scan_ahead) = 0;
+		CG(increment_lineno) = 0;
+		CG(doc_comment) = saved_doc_comment;
+
+		if (PARSER_MODE() && error) {
+			RETURN_TOKEN(T_ERROR);
+		}
+	}
+
+	RETURN_TOKEN(T_START_HEREDOC);
+}
+#line 5986 "Zend/zend_language_scanner.c"
+yy442:
+		YYDEBUG(442, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy440;
+		goto yy441;
+yy443:
+		YYDEBUG(443, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy535;
+		if (yych == 'a') goto yy535;
+		goto yy48;
+yy444:
+		YYDEBUG(444, *YYCURSOR);
+		yyaccept = 33;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy445:
+		YYDEBUG(445, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1751 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ARRAY);
+}
+#line 6014 "Zend/zend_language_scanner.c"
+yy446:
+		YYDEBUG(446, *YYCURSOR);
+		yyaccept = 34;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy447:
+		YYDEBUG(447, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1511 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_BREAK);
+}
+#line 6030 "Zend/zend_language_scanner.c"
+yy448:
+		YYDEBUG(448, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'B') goto yy536;
+		if (yych == 'b') goto yy536;
+		goto yy48;
+yy449:
+		YYDEBUG(449, *YYCURSOR);
+		yyaccept = 35;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy450:
+		YYDEBUG(450, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1419 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CATCH);
+}
+#line 6053 "Zend/zend_language_scanner.c"
+yy451:
+		YYDEBUG(451, *YYCURSOR);
+		yyaccept = 36;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy452:
+		YYDEBUG(452, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1531 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CLASS);
+}
+#line 6069 "Zend/zend_language_scanner.c"
+yy453:
+		YYDEBUG(453, *YYCURSOR);
+		yyaccept = 37;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy454:
+		YYDEBUG(454, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1613 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CLONE);
+}
+#line 6085 "Zend/zend_language_scanner.c"
+yy455:
+		YYDEBUG(455, *YYCURSOR);
+		yyaccept = 38;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy456:
+		YYDEBUG(456, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1392 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CONST);
+}
+#line 6101 "Zend/zend_language_scanner.c"
+yy457:
+		YYDEBUG(457, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy537;
+		if (yych == 'n') goto yy537;
+		goto yy48;
+yy458:
+		YYDEBUG(458, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy538;
+		if (yych == 'r') goto yy538;
+		goto yy48;
+yy459:
+		YYDEBUG(459, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy539;
+		if (yych == 'l') goto yy539;
+		goto yy48;
+yy460:
+		YYDEBUG(460, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy540;
+		if (yych == 'f') goto yy540;
+		goto yy48;
+yy461:
+		YYDEBUG(461, *YYCURSOR);
+		yyaccept = 39;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy462:
+		YYDEBUG(462, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1697 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_EMPTY);
+}
+#line 6145 "Zend/zend_language_scanner.c"
+yy463:
+		YYDEBUG(463, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy542;
+		if (yych == 'c') goto yy542;
+		goto yy48;
+yy464:
+		YYDEBUG(464, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy543;
+		if (yych == 'r') goto yy543;
+		goto yy48;
+yy465:
+		YYDEBUG(465, *YYCURSOR);
+		yyaccept = 40;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy466:
+		YYDEBUG(466, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1439 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDIF);
+}
+#line 6175 "Zend/zend_language_scanner.c"
+yy467:
+		YYDEBUG(467, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy545;
+		if (yych == 'i') goto yy545;
+		goto yy48;
+yy468:
+		YYDEBUG(468, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy546;
+		if (yych == 'i') goto yy546;
+		goto yy48;
+yy469:
+		YYDEBUG(469, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(10);
+		yych = *YYCURSOR;
+		YYDEBUG(470, *YYCURSOR);
+		if (yych <= 'I') {
+			if (yych <= 0x1F) {
+				if (yych <= '\n') {
+					if (yych <= 0x08) goto yy86;
+					goto yy469;
+				} else {
+					if (yych == '\r') goto yy469;
+					goto yy86;
+				}
+			} else {
+				if (yych <= 'D') {
+					if (yych <= ' ') goto yy469;
+					if (yych <= '@') goto yy86;
+					goto yy547;
+				} else {
+					if (yych <= 'E') goto yy549;
+					if (yych <= 'H') goto yy547;
+					goto yy550;
+				}
+			}
+		} else {
+			if (yych <= 'd') {
+				if (yych <= '^') {
+					if (yych <= 'Z') goto yy547;
+					goto yy86;
+				} else {
+					if (yych == '`') goto yy86;
+					goto yy547;
+				}
+			} else {
+				if (yych <= 'i') {
+					if (yych <= 'e') goto yy549;
+					if (yych <= 'h') goto yy547;
+					goto yy550;
+				} else {
+					if (yych <= 'z') goto yy547;
+					if (yych <= 0x7F) goto yy86;
+					goto yy547;
+				}
+			}
+		}
+yy471:
+		YYDEBUG(471, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy551;
+		if (yych == 'd') goto yy551;
+		goto yy48;
+yy472:
+		YYDEBUG(472, *YYCURSOR);
+		yyaccept = 41;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= 'K') {
+				if (yych <= '/') goto yy473;
+				if (yych <= '9') goto yy47;
+				if (yych >= 'A') goto yy47;
+			} else {
+				if (yych <= 'L') goto yy552;
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= 'k') {
+				if (yych == '_') goto yy47;
+				if (yych >= 'a') goto yy47;
+			} else {
+				if (yych <= 'l') goto yy552;
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy473:
+		YYDEBUG(473, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1713 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FINAL);
+}
+#line 6275 "Zend/zend_language_scanner.c"
+yy474:
+		YYDEBUG(474, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy553;
+		if (yych == 'c') goto yy553;
+		goto yy48;
+yy475:
+		YYDEBUG(475, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy554;
+		if (yych == 'i') goto yy554;
+		goto yy48;
+yy476:
+		YYDEBUG(476, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy555;
+		if (yych == 'l') goto yy555;
+		goto yy48;
+yy477:
+		YYDEBUG(477, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy557;
+		if (yych == 'm') goto yy557;
+		goto yy48;
+yy478:
+		YYDEBUG(478, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy558;
+		if (yych == 'd') goto yy558;
+		goto yy48;
+yy479:
+		YYDEBUG(479, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy559;
+		if (yych == 'n') goto yy559;
+		goto yy48;
+yy480:
+		YYDEBUG(480, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy560;
+		if (yych == 'a') goto yy560;
+		goto yy48;
+yy481:
+		YYDEBUG(481, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy561;
+		if (yych == 'f') goto yy561;
+		goto yy48;
+yy482:
+		YYDEBUG(482, *YYCURSOR);
+		yyaccept = 42;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy483:
+		YYDEBUG(483, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1693 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ISSET);
+}
+#line 6347 "Zend/zend_language_scanner.c"
+yy484:
+		YYDEBUG(484, *YYCURSOR);
+		yyaccept = 43;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy485:
+		YYDEBUG(485, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1495 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_MATCH);
+}
+#line 6363 "Zend/zend_language_scanner.c"
+yy486:
+		YYDEBUG(486, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'P') goto yy562;
+		if (yych == 'p') goto yy562;
+		goto yy48;
+yy487:
+		YYDEBUG(487, *YYCURSOR);
+		yyaccept = 44;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy488:
+		YYDEBUG(488, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1527 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_PRINT);
+}
+#line 6386 "Zend/zend_language_scanner.c"
+yy489:
+		YYDEBUG(489, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy563;
+		if (yych == 't') goto yy563;
+		goto yy48;
+yy490:
+		YYDEBUG(490, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy564;
+		if (yych == 'c') goto yy564;
+		goto yy48;
+yy491:
+		YYDEBUG(491, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy565;
+		if (yych == 'c') goto yy565;
+		goto yy48;
+yy492:
+		YYDEBUG(492, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy567;
+		if (yych == 'n') goto yy567;
+		goto yy48;
+yy493:
+		YYDEBUG(493, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy568;
+		if (yych == 'r') goto yy568;
+		goto yy48;
+yy494:
+		YYDEBUG(494, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy569;
+		if (yych == 'n') goto yy569;
+		goto yy48;
+yy495:
+		YYDEBUG(495, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy571;
+		if (yych == 'c') goto yy571;
+		goto yy48;
+yy496:
+		YYDEBUG(496, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy573;
+		if (yych == 'h') goto yy573;
+		goto yy48;
+yy497:
+		YYDEBUG(497, *YYCURSOR);
+		yyaccept = 45;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy498:
+		YYDEBUG(498, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1427 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_THROW);
+}
+#line 6458 "Zend/zend_language_scanner.c"
+yy499:
+		YYDEBUG(499, *YYCURSOR);
+		yyaccept = 46;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy500:
+		YYDEBUG(500, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1539 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_TRAIT);
+}
+#line 6474 "Zend/zend_language_scanner.c"
+yy501:
+		YYDEBUG(501, *YYCURSOR);
+		yyaccept = 47;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy502:
+		YYDEBUG(502, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1739 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_UNSET);
+}
+#line 6490 "Zend/zend_language_scanner.c"
+yy503:
+		YYDEBUG(503, *YYCURSOR);
+		yyaccept = 48;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy504:
+		YYDEBUG(504, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1447 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_WHILE);
+}
+#line 6506 "Zend/zend_language_scanner.c"
+yy505:
+		YYDEBUG(505, *YYCURSOR);
+		yyaccept = 49;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych <= '\r') {
+			if (yych <= 0x08) goto yy506;
+			if (yych <= '\n') goto yy575;
+			if (yych >= '\r') goto yy575;
+		} else {
+			if (yych <= ' ') {
+				if (yych >= ' ') goto yy575;
+			} else {
+				if (yych == '\\') goto yy161;
+			}
+		}
+yy506:
+		YYDEBUG(506, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1411 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_YIELD);
+}
+#line 6532 "Zend/zend_language_scanner.c"
+yy507:
+		YYDEBUG(507, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy577;
+		if (yych == 's') goto yy577;
+		goto yy48;
+yy508:
+		YYDEBUG(508, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy578;
+		goto yy48;
+yy509:
+		YYDEBUG(509, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy579;
+		if (yych == 'e') goto yy579;
+		goto yy48;
+yy510:
+		YYDEBUG(510, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy580;
+		if (yych == 'c') goto yy580;
+		goto yy48;
+yy511:
+		YYDEBUG(511, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy581;
+		if (yych == 't') goto yy581;
+		goto yy48;
+yy512:
+		YYDEBUG(512, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy582;
+		if (yych == 'e') goto yy582;
+		goto yy48;
+yy513:
+		YYDEBUG(513, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy583;
+		if (yych == 'h') goto yy583;
+		goto yy48;
+yy514:
+		YYDEBUG(514, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy584;
+		if (yych == 'e') goto yy584;
+		goto yy48;
+yy515:
+		YYDEBUG(515, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy585;
+		if (yych == 'i') goto yy585;
+		goto yy48;
+yy516:
+		YYDEBUG(516, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(517, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy516;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy516;
+			if (yych == ')') goto yy586;
+			goto yy86;
+		}
+yy518:
+		YYDEBUG(518, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'Y') goto yy588;
+		if (yych == 'y') goto yy588;
+		goto yy86;
+yy519:
+		YYDEBUG(519, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy520:
+		YYDEBUG(520, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy519;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy519;
+			if (yych != ')') goto yy86;
+		}
+		YYDEBUG(521, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(522, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1649 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_BOOL_CAST);
+}
+#line 6637 "Zend/zend_language_scanner.c"
+yy523:
+		YYDEBUG(523, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'A') goto yy590;
+		if (yych == 'a') goto yy590;
+		goto yy86;
+yy524:
+		YYDEBUG(524, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy525;
+		if (yych != 'e') goto yy86;
+yy525:
+		YYDEBUG(525, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(526, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy525;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy525;
+			if (yych == ')') goto yy591;
+			goto yy86;
+		}
+yy527:
+		YYDEBUG(527, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy593;
+		if (yych == 'e') goto yy593;
+		goto yy86;
+yy528:
+		YYDEBUG(528, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy594;
+		if (yych == 't') goto yy594;
+		goto yy86;
+yy529:
+		YYDEBUG(529, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(530, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1629 "Zend/zend_language_scanner.l"
+		{
+	if (PARSER_MODE()) {
+		zend_throw_exception(zend_ce_parse_error, "The (real) cast has been removed, use (float) instead", 0);
+		RETURN_TOKEN(T_ERROR);
+	}
+	RETURN_TOKEN(T_DOUBLE_CAST);
+}
+#line 6688 "Zend/zend_language_scanner.c"
+yy531:
+		YYDEBUG(531, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'G') goto yy588;
+		if (yych == 'g') goto yy588;
+		goto yy86;
+yy532:
+		YYDEBUG(532, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(533, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy532;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy532;
+			if (yych == ')') goto yy596;
+			goto yy86;
+		}
+yy534:
+		YYDEBUG(534, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\n') goto yy440;
+		if (yych == '\r') goto yy442;
+		goto yy86;
+yy535:
+		YYDEBUG(535, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy598;
+		if (yych == 'c') goto yy598;
+		goto yy48;
+yy536:
+		YYDEBUG(536, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy599;
+		if (yych == 'l') goto yy599;
+		goto yy48;
+yy537:
+		YYDEBUG(537, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy600;
+		if (yych == 'u') goto yy600;
+		goto yy48;
+yy538:
+		YYDEBUG(538, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy601;
+		if (yych == 'e') goto yy601;
+		goto yy48;
+yy539:
+		YYDEBUG(539, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy603;
+		if (yych == 't') goto yy603;
+		goto yy48;
+yy540:
+		YYDEBUG(540, *YYCURSOR);
+		yyaccept = 50;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy541:
+		YYDEBUG(541, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1435 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ELSEIF);
+}
+#line 6765 "Zend/zend_language_scanner.c"
+yy542:
+		YYDEBUG(542, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy605;
+		if (yych == 'l') goto yy605;
+		goto yy48;
+yy543:
+		YYDEBUG(543, *YYCURSOR);
+		yyaccept = 51;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= 'D') {
+				if (yych <= '/') goto yy544;
+				if (yych <= '9') goto yy47;
+				if (yych >= 'A') goto yy47;
+			} else {
+				if (yych <= 'E') goto yy606;
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= 'd') {
+				if (yych == '_') goto yy47;
+				if (yych >= 'a') goto yy47;
+			} else {
+				if (yych <= 'e') goto yy606;
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy544:
+		YYDEBUG(544, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1463 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDFOR);
+}
+#line 6804 "Zend/zend_language_scanner.c"
+yy545:
+		YYDEBUG(545, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy607;
+		if (yych == 't') goto yy607;
+		goto yy48;
+yy546:
+		YYDEBUG(546, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy608;
+		if (yych == 'l') goto yy608;
+		goto yy48;
+yy547:
+		YYDEBUG(547, *YYCURSOR);
+		++YYCURSOR;
+yy548:
+		YYDEBUG(548, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1551 "Zend/zend_language_scanner.l"
+		{
+	yyless(4);
+	RETURN_TOKEN_WITH_IDENT(T_ENUM);
+}
+#line 6830 "Zend/zend_language_scanner.c"
+yy549:
+		YYDEBUG(549, *YYCURSOR);
+		yyaccept = 52;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'X') goto yy609;
+		if (yych == 'x') goto yy609;
+		goto yy548;
+yy550:
+		YYDEBUG(550, *YYCURSOR);
+		yyaccept = 52;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy610;
+		if (yych == 'm') goto yy610;
+		goto yy548;
+yy551:
+		YYDEBUG(551, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy611;
+		if (yych == 's') goto yy611;
+		goto yy48;
+yy552:
+		YYDEBUG(552, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'Y') goto yy613;
+		if (yych == 'y') goto yy613;
+		goto yy48;
+yy553:
+		YYDEBUG(553, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy615;
+		if (yych == 'h') goto yy615;
+		goto yy48;
+yy554:
+		YYDEBUG(554, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy617;
+		if (yych == 'o') goto yy617;
+		goto yy48;
+yy555:
+		YYDEBUG(555, *YYCURSOR);
+		yyaccept = 53;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy556:
+		YYDEBUG(556, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1689 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_GLOBAL);
+}
+#line 6888 "Zend/zend_language_scanner.c"
+yy557:
+		YYDEBUG(557, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy618;
+		if (yych == 'e') goto yy618;
+		goto yy48;
+yy558:
+		YYDEBUG(558, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy619;
+		if (yych == 'e') goto yy619;
+		goto yy48;
+yy559:
+		YYDEBUG(559, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy621;
+		if (yych == 'c') goto yy621;
+		goto yy48;
+yy560:
+		YYDEBUG(560, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy622;
+		if (yych == 'd') goto yy622;
+		goto yy48;
+yy561:
+		YYDEBUG(561, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy623;
+		if (yych == 'a') goto yy623;
+		goto yy48;
+yy562:
+		YYDEBUG(562, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy624;
+		if (yych == 'a') goto yy624;
+		goto yy48;
+yy563:
+		YYDEBUG(563, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy625;
+		if (yych == 'e') goto yy625;
+		goto yy48;
+yy564:
+		YYDEBUG(564, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy627;
+		if (yych == 't') goto yy627;
+		goto yy48;
+yy565:
+		YYDEBUG(565, *YYCURSOR);
+		yyaccept = 54;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy566:
+		YYDEBUG(566, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1725 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_PUBLIC);
+}
+#line 6960 "Zend/zend_language_scanner.c"
+yy567:
+		YYDEBUG(567, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy628;
+		if (yych == 'l') goto yy628;
+		goto yy48;
+yy568:
+		YYDEBUG(568, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy629;
+		if (yych == 'e') goto yy629;
+		goto yy48;
+yy569:
+		YYDEBUG(569, *YYCURSOR);
+		yyaccept = 55;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy570:
+		YYDEBUG(570, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1396 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_RETURN);
+}
+#line 6990 "Zend/zend_language_scanner.c"
+yy571:
+		YYDEBUG(571, *YYCURSOR);
+		yyaccept = 56;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy572:
+		YYDEBUG(572, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1705 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_STATIC);
+}
+#line 7006 "Zend/zend_language_scanner.c"
+yy573:
+		YYDEBUG(573, *YYCURSOR);
+		yyaccept = 57;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy574:
+		YYDEBUG(574, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1491 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_SWITCH);
+}
+#line 7022 "Zend/zend_language_scanner.c"
+yy575:
+		YYDEBUG(575, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(5);
+		yych = *YYCURSOR;
+		YYDEBUG(576, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych <= '\n') {
+				if (yych <= 0x08) goto yy86;
+				goto yy575;
+			} else {
+				if (yych == '\r') goto yy575;
+				goto yy86;
+			}
+		} else {
+			if (yych <= 'F') {
+				if (yych <= ' ') goto yy575;
+				if (yych <= 'E') goto yy86;
+				goto yy631;
+			} else {
+				if (yych == 'f') goto yy631;
+				goto yy86;
+			}
+		}
+yy577:
+		YYDEBUG(577, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy632;
+		if (yych == 's') goto yy632;
+		goto yy48;
+yy578:
+		YYDEBUG(578, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy633;
+		goto yy48;
+yy579:
+		YYDEBUG(579, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy635;
+		goto yy48;
+yy580:
+		YYDEBUG(580, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy636;
+		if (yych == 't') goto yy636;
+		goto yy48;
+yy581:
+		YYDEBUG(581, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy637;
+		goto yy48;
+yy582:
+		YYDEBUG(582, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy638;
+		goto yy48;
+yy583:
+		YYDEBUG(583, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy639;
+		if (yych == 'o') goto yy639;
+		goto yy48;
+yy584:
+		YYDEBUG(584, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy640;
+		if (yych == 's') goto yy640;
+		goto yy48;
+yy585:
+		YYDEBUG(585, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy641;
+		if (yych == 't') goto yy641;
+		goto yy48;
+yy586:
+		YYDEBUG(586, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(587, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1641 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_ARRAY_CAST);
+}
+#line 7115 "Zend/zend_language_scanner.c"
+yy588:
+		YYDEBUG(588, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(589, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy588;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy588;
+			if (yych == ')') goto yy642;
+			goto yy86;
+		}
+yy590:
+		YYDEBUG(590, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy519;
+		if (yych == 'n') goto yy519;
+		goto yy86;
+yy591:
+		YYDEBUG(591, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(592, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1625 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_DOUBLE_CAST);
+}
+#line 7145 "Zend/zend_language_scanner.c"
+yy593:
+		YYDEBUG(593, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy426;
+		if (yych == 'r') goto yy426;
+		goto yy86;
+yy594:
+		YYDEBUG(594, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(595, *YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych == '\t') goto yy594;
+			goto yy86;
+		} else {
+			if (yych <= ' ') goto yy594;
+			if (yych == ')') goto yy644;
+			goto yy86;
+		}
+yy596:
+		YYDEBUG(596, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(597, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1653 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_UNSET_CAST);
+}
+#line 7175 "Zend/zend_language_scanner.c"
+yy598:
+		YYDEBUG(598, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy646;
+		if (yych == 't') goto yy646;
+		goto yy48;
+yy599:
+		YYDEBUG(599, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy648;
+		if (yych == 'e') goto yy648;
+		goto yy48;
+yy600:
+		YYDEBUG(600, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy650;
+		if (yych == 'e') goto yy650;
+		goto yy48;
+yy601:
+		YYDEBUG(601, *YYCURSOR);
+		yyaccept = 58;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy602:
+		YYDEBUG(602, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1475 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_DECLARE);
+}
+#line 7212 "Zend/zend_language_scanner.c"
+yy603:
+		YYDEBUG(603, *YYCURSOR);
+		yyaccept = 59;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy604:
+		YYDEBUG(604, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1507 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_DEFAULT);
+}
+#line 7228 "Zend/zend_language_scanner.c"
+yy605:
+		YYDEBUG(605, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy652;
+		if (yych == 'a') goto yy652;
+		goto yy48;
+yy606:
+		YYDEBUG(606, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy653;
+		if (yych == 'a') goto yy653;
+		goto yy48;
+yy607:
+		YYDEBUG(607, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy654;
+		if (yych == 'c') goto yy654;
+		goto yy48;
+yy608:
+		YYDEBUG(608, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy655;
+		if (yych == 'e') goto yy655;
+		goto yy48;
+yy609:
+		YYDEBUG(609, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy657;
+		if (yych == 't') goto yy657;
+		goto yy86;
+yy610:
+		YYDEBUG(610, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'P') goto yy658;
+		if (yych == 'p') goto yy658;
+		goto yy86;
+yy611:
+		YYDEBUG(611, *YYCURSOR);
+		yyaccept = 60;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy612:
+		YYDEBUG(612, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1556 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_EXTENDS);
+}
+#line 7284 "Zend/zend_language_scanner.c"
+yy613:
+		YYDEBUG(613, *YYCURSOR);
+		yyaccept = 61;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy614:
+		YYDEBUG(614, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1423 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FINALLY);
+}
+#line 7300 "Zend/zend_language_scanner.c"
+yy615:
+		YYDEBUG(615, *YYCURSOR);
+		yyaccept = 62;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy616:
+		YYDEBUG(616, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1467 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FOREACH);
+}
+#line 7316 "Zend/zend_language_scanner.c"
+yy617:
+		YYDEBUG(617, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy659;
+		if (yych == 'n') goto yy659;
+		goto yy48;
+yy618:
+		YYDEBUG(618, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy661;
+		if (yych == 'n') goto yy661;
+		goto yy48;
+yy619:
+		YYDEBUG(619, *YYCURSOR);
+		yyaccept = 63;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy620;
+				if (yych <= '9') goto yy47;
+			} else {
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy662;
+			} else {
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy620:
+		YYDEBUG(620, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1661 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_INCLUDE);
+}
+#line 7358 "Zend/zend_language_scanner.c"
+yy621:
+		YYDEBUG(621, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy663;
+		if (yych == 'e') goto yy663;
+		goto yy48;
+yy622:
+		YYDEBUG(622, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy664;
+		if (yych == 'o') goto yy664;
+		goto yy48;
+yy623:
+		YYDEBUG(623, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy665;
+		if (yych == 'c') goto yy665;
+		goto yy48;
+yy624:
+		YYDEBUG(624, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy666;
+		if (yych == 'c') goto yy666;
+		goto yy48;
+yy625:
+		YYDEBUG(625, *YYCURSOR);
+		yyaccept = 64;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy626:
+		YYDEBUG(626, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1717 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_PRIVATE);
+}
+#line 7402 "Zend/zend_language_scanner.c"
+yy627:
+		YYDEBUG(627, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy667;
+		if (yych == 'e') goto yy667;
+		goto yy48;
+yy628:
+		YYDEBUG(628, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'Y') goto yy668;
+		if (yych == 'y') goto yy668;
+		goto yy48;
+yy629:
+		YYDEBUG(629, *YYCURSOR);
+		yyaccept = 65;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy630;
+				if (yych <= '9') goto yy47;
+			} else {
+				if (yych <= 'Z') goto yy47;
+				if (yych >= '\\') goto yy161;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy670;
+			} else {
+				if (yych <= 'z') goto yy47;
+				if (yych >= 0x80) goto yy47;
+			}
+		}
+yy630:
+		YYDEBUG(630, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1669 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_REQUIRE);
+}
+#line 7444 "Zend/zend_language_scanner.c"
+yy631:
+		YYDEBUG(631, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'R') goto yy671;
+		if (yych == 'r') goto yy671;
+		goto yy86;
+yy632:
+		YYDEBUG(632, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy672;
+		goto yy48;
+yy633:
+		YYDEBUG(633, *YYCURSOR);
+		yyaccept = 66;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy634:
+		YYDEBUG(634, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2206 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_DIR);
+}
+#line 7472 "Zend/zend_language_scanner.c"
+yy635:
+		YYDEBUG(635, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy673;
+		goto yy48;
+yy636:
+		YYDEBUG(636, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy675;
+		if (yych == 'i') goto yy675;
+		goto yy48;
+yy637:
+		YYDEBUG(637, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy676;
+		if (yych == 'c') goto yy676;
+		goto yy48;
+yy638:
+		YYDEBUG(638, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy677;
+		goto yy48;
+yy639:
+		YYDEBUG(639, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy679;
+		if (yych == 'd') goto yy679;
+		goto yy48;
+yy640:
+		YYDEBUG(640, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'P') goto yy680;
+		if (yych == 'p') goto yy680;
+		goto yy48;
+yy641:
+		YYDEBUG(641, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy681;
+		goto yy48;
+yy642:
+		YYDEBUG(642, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(643, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1637 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_STRING_CAST);
+}
+#line 7528 "Zend/zend_language_scanner.c"
+yy644:
+		YYDEBUG(644, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(645, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1645 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_OBJECT_CAST);
+}
+#line 7538 "Zend/zend_language_scanner.c"
+yy646:
+		YYDEBUG(646, *YYCURSOR);
+		yyaccept = 67;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy647:
+		YYDEBUG(647, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1709 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ABSTRACT);
+}
+#line 7554 "Zend/zend_language_scanner.c"
+yy648:
+		YYDEBUG(648, *YYCURSOR);
+		yyaccept = 68;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy649:
+		YYDEBUG(649, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1755 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CALLABLE);
+}
+#line 7570 "Zend/zend_language_scanner.c"
+yy650:
+		YYDEBUG(650, *YYCURSOR);
+		yyaccept = 69;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy651:
+		YYDEBUG(651, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1515 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CONTINUE);
+}
+#line 7586 "Zend/zend_language_scanner.c"
+yy652:
+		YYDEBUG(652, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy682;
+		if (yych == 'r') goto yy682;
+		goto yy48;
+yy653:
+		YYDEBUG(653, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy683;
+		if (yych == 'c') goto yy683;
+		goto yy48;
+yy654:
+		YYDEBUG(654, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy684;
+		if (yych == 'h') goto yy684;
+		goto yy48;
+yy655:
+		YYDEBUG(655, *YYCURSOR);
+		yyaccept = 70;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy656:
+		YYDEBUG(656, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1451 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDWHILE);
+}
+#line 7623 "Zend/zend_language_scanner.c"
+yy657:
+		YYDEBUG(657, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy686;
+		if (yych == 'e') goto yy686;
+		goto yy86;
+yy658:
+		YYDEBUG(658, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'L') goto yy687;
+		if (yych == 'l') goto yy687;
+		goto yy86;
+yy659:
+		YYDEBUG(659, *YYCURSOR);
+		yyaccept = 71;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy660:
+		YYDEBUG(660, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1388 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FUNCTION);
+}
+#line 7651 "Zend/zend_language_scanner.c"
+yy661:
+		YYDEBUG(661, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'T') goto yy688;
+		if (yych == 't') goto yy688;
+		goto yy48;
+yy662:
+		YYDEBUG(662, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy689;
+		if (yych == 'o') goto yy689;
+		goto yy48;
+yy663:
+		YYDEBUG(663, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy690;
+		if (yych == 'o') goto yy690;
+		goto yy48;
+yy664:
+		YYDEBUG(664, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy691;
+		if (yych == 'f') goto yy691;
+		goto yy48;
+yy665:
+		YYDEBUG(665, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy693;
+		if (yych == 'e') goto yy693;
+		goto yy48;
+yy666:
+		YYDEBUG(666, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy695;
+		if (yych == 'e') goto yy695;
+		goto yy48;
+yy667:
+		YYDEBUG(667, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy697;
+		if (yych == 'd') goto yy697;
+		goto yy48;
+yy668:
+		YYDEBUG(668, *YYCURSOR);
+		yyaccept = 72;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych <= 0x1F) {
+			if (yych <= '\n') {
+				if (yych >= '\t') goto yy699;
+			} else {
+				if (yych == '\r') goto yy699;
+			}
+		} else {
+			if (yych <= '(') {
+				if (yych <= ' ') goto yy699;
+				if (yych >= '(') goto yy701;
+			} else {
+				if (yych == '\\') goto yy161;
+			}
+		}
+yy669:
+		YYDEBUG(669, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1729 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_READONLY);
+}
+#line 7729 "Zend/zend_language_scanner.c"
+yy670:
+		YYDEBUG(670, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy703;
+		if (yych == 'o') goto yy703;
+		goto yy48;
+yy671:
+		YYDEBUG(671, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'O') goto yy704;
+		if (yych == 'o') goto yy704;
+		goto yy86;
+yy672:
+		YYDEBUG(672, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy705;
+		goto yy48;
+yy673:
+		YYDEBUG(673, *YYCURSOR);
+		yyaccept = 73;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy674:
+		YYDEBUG(674, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2202 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FILE);
+}
+#line 7764 "Zend/zend_language_scanner.c"
+yy675:
+		YYDEBUG(675, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy707;
+		if (yych == 'o') goto yy707;
+		goto yy48;
+yy676:
+		YYDEBUG(676, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy708;
+		if (yych == 'o') goto yy708;
+		goto yy48;
+yy677:
+		YYDEBUG(677, *YYCURSOR);
+		yyaccept = 74;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy678:
+		YYDEBUG(678, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2198 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_LINE);
+}
+#line 7794 "Zend/zend_language_scanner.c"
+yy679:
+		YYDEBUG(679, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy709;
+		goto yy48;
+yy680:
+		YYDEBUG(680, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy710;
+		if (yych == 'a') goto yy710;
+		goto yy48;
+yy681:
+		YYDEBUG(681, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy711;
+		goto yy48;
+yy682:
+		YYDEBUG(682, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy713;
+		if (yych == 'e') goto yy713;
+		goto yy48;
+yy683:
+		YYDEBUG(683, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy715;
+		if (yych == 'h') goto yy715;
+		goto yy48;
+yy684:
+		YYDEBUG(684, *YYCURSOR);
+		yyaccept = 75;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy685:
+		YYDEBUG(685, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1499 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDSWITCH);
+}
+#line 7843 "Zend/zend_language_scanner.c"
+yy686:
+		YYDEBUG(686, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy717;
+		if (yych == 'n') goto yy717;
+		goto yy86;
+yy687:
+		YYDEBUG(687, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy718;
+		if (yych == 'e') goto yy718;
+		goto yy86;
+yy688:
+		YYDEBUG(688, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy719;
+		if (yych == 's') goto yy719;
+		goto yy48;
+yy689:
+		YYDEBUG(689, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy721;
+		if (yych == 'n') goto yy721;
+		goto yy48;
+yy690:
+		YYDEBUG(690, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy722;
+		if (yych == 'f') goto yy722;
+		goto yy48;
+yy691:
+		YYDEBUG(691, *YYCURSOR);
+		yyaccept = 76;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy692:
+		YYDEBUG(692, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1685 "Zend/zend_language_scanner.l"
+		{
+    RETURN_TOKEN_WITH_IDENT(T_INSTEADOF);
+}
+#line 7892 "Zend/zend_language_scanner.c"
+yy693:
+		YYDEBUG(693, *YYCURSOR);
+		yyaccept = 77;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy694:
+		YYDEBUG(694, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1535 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_INTERFACE);
+}
+#line 7908 "Zend/zend_language_scanner.c"
+yy695:
+		YYDEBUG(695, *YYCURSOR);
+		yyaccept = 78;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy724;
+yy696:
+		YYDEBUG(696, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1677 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_NAMESPACE);
+}
+#line 7924 "Zend/zend_language_scanner.c"
+yy697:
+		YYDEBUG(697, *YYCURSOR);
+		yyaccept = 79;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy698:
+		YYDEBUG(698, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1721 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_PROTECTED);
+}
+#line 7940 "Zend/zend_language_scanner.c"
+yy699:
+		YYDEBUG(699, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(700, *YYCURSOR);
+		if (yych <= '\r') {
+			if (yych <= 0x08) goto yy86;
+			if (yych <= '\n') goto yy699;
+			if (yych <= '\f') goto yy86;
+			goto yy699;
+		} else {
+			if (yych <= ' ') {
+				if (yych <= 0x1F) goto yy86;
+				goto yy699;
+			} else {
+				if (yych != '(') goto yy86;
+			}
+		}
+yy701:
+		YYDEBUG(701, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(702, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1734 "Zend/zend_language_scanner.l"
+		{
+	yyless(strlen("readonly"));
+	RETURN_TOKEN_WITH_STR(T_STRING, 0);
+}
+#line 7970 "Zend/zend_language_scanner.c"
+yy703:
+		YYDEBUG(703, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy725;
+		if (yych == 'n') goto yy725;
+		goto yy48;
+yy704:
+		YYDEBUG(704, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'M') goto yy726;
+		if (yych == 'm') goto yy726;
+		goto yy86;
+yy705:
+		YYDEBUG(705, *YYCURSOR);
+		yyaccept = 80;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy706:
+		YYDEBUG(706, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2182 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_CLASS_C);
+}
+#line 7999 "Zend/zend_language_scanner.c"
+yy707:
+		YYDEBUG(707, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy727;
+		if (yych == 'n') goto yy727;
+		goto yy48;
+yy708:
+		YYDEBUG(708, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'M') goto yy728;
+		if (yych == 'm') goto yy728;
+		goto yy48;
+yy709:
+		YYDEBUG(709, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy729;
+		goto yy48;
+yy710:
+		YYDEBUG(710, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy731;
+		if (yych == 'c') goto yy731;
+		goto yy48;
+yy711:
+		YYDEBUG(711, *YYCURSOR);
+		yyaccept = 81;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy712:
+		YYDEBUG(712, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2186 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_TRAIT_C);
+}
+#line 8042 "Zend/zend_language_scanner.c"
+yy713:
+		YYDEBUG(713, *YYCURSOR);
+		yyaccept = 82;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy714:
+		YYDEBUG(714, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1479 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDDECLARE);
+}
+#line 8058 "Zend/zend_language_scanner.c"
+yy715:
+		YYDEBUG(715, *YYCURSOR);
+		yyaccept = 83;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy716:
+		YYDEBUG(716, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1471 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_ENDFOREACH);
+}
+#line 8074 "Zend/zend_language_scanner.c"
+yy717:
+		YYDEBUG(717, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'D') goto yy732;
+		if (yych == 'd') goto yy732;
+		goto yy86;
+yy718:
+		YYDEBUG(718, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'M') goto yy733;
+		if (yych == 'm') goto yy733;
+		goto yy86;
+yy719:
+		YYDEBUG(719, *YYCURSOR);
+		yyaccept = 84;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy720:
+		YYDEBUG(720, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1560 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_IMPLEMENTS);
+}
+#line 8102 "Zend/zend_language_scanner.c"
+yy721:
+		YYDEBUG(721, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy734;
+		if (yych == 'c') goto yy734;
+		goto yy48;
+yy722:
+		YYDEBUG(722, *YYCURSOR);
+		yyaccept = 85;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy723:
+		YYDEBUG(723, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1483 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_INSTANCEOF);
+}
+#line 8125 "Zend/zend_language_scanner.c"
+yy724:
+		YYDEBUG(724, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy86;
+			if (yych <= 'Z') goto yy735;
+			if (yych <= '^') goto yy86;
+			goto yy735;
+		} else {
+			if (yych <= '`') goto yy86;
+			if (yych <= 'z') goto yy735;
+			if (yych <= 0x7F) goto yy86;
+			goto yy735;
+		}
+yy725:
+		YYDEBUG(725, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'C') goto yy738;
+		if (yych == 'c') goto yy738;
+		goto yy48;
+yy726:
+		YYDEBUG(726, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '^') {
+			if (yych <= '9') {
+				if (yych <= '/') goto yy739;
+				goto yy86;
+			} else {
+				if (yych <= '@') goto yy739;
+				if (yych <= 'Z') goto yy86;
+				goto yy739;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= '_') goto yy86;
+				goto yy739;
+			} else {
+				if (yych <= 'z') goto yy86;
+				if (yych <= 0x7F) goto yy739;
+				goto yy86;
+			}
+		}
+yy727:
+		YYDEBUG(727, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy741;
+		goto yy48;
+yy728:
+		YYDEBUG(728, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'P') goto yy742;
+		if (yych == 'p') goto yy742;
+		goto yy48;
+yy729:
+		YYDEBUG(729, *YYCURSOR);
+		yyaccept = 86;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy730:
+		YYDEBUG(730, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2194 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_METHOD_C);
+}
+#line 8199 "Zend/zend_language_scanner.c"
+yy731:
+		YYDEBUG(731, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy743;
+		if (yych == 'e') goto yy743;
+		goto yy48;
+yy732:
+		YYDEBUG(732, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'S') goto yy744;
+		if (yych == 's') goto yy744;
+		goto yy86;
+yy733:
+		YYDEBUG(733, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'E') goto yy746;
+		if (yych == 'e') goto yy746;
+		goto yy86;
+yy734:
+		YYDEBUG(734, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy747;
+		if (yych == 'e') goto yy747;
+		goto yy48;
+yy735:
+		YYDEBUG(735, *YYCURSOR);
+		yyaccept = 87;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(736, *YYCURSOR);
+		if (yych <= '\\') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy737;
+				if (yych <= '9') goto yy735;
+			} else {
+				if (yych <= 'Z') goto yy735;
+				if (yych >= '\\') goto yy724;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy735;
+			} else {
+				if (yych <= 'z') goto yy735;
+				if (yych >= 0x80) goto yy735;
+			}
+		}
+yy737:
+		YYDEBUG(737, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2364 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_NAME_RELATIVE, sizeof("namespace\\") - 1);
+}
+#line 8256 "Zend/zend_language_scanner.c"
+yy738:
+		YYDEBUG(738, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy749;
+		if (yych == 'e') goto yy749;
+		goto yy48;
+yy739:
+		YYDEBUG(739, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(740, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1405 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 1);
+	HANDLE_NEWLINES(yytext, yyleng);
+	RETURN_TOKEN_WITH_IDENT(T_YIELD_FROM);
+}
+#line 8275 "Zend/zend_language_scanner.c"
+yy741:
+		YYDEBUG(741, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy751;
+		goto yy48;
+yy742:
+		YYDEBUG(742, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy753;
+		if (yych == 'i') goto yy753;
+		goto yy48;
+yy743:
+		YYDEBUG(743, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy754;
+		goto yy48;
+yy744:
+		YYDEBUG(744, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(745, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1547 "Zend/zend_language_scanner.l"
+		{
+	yyless(4);
+	RETURN_TOKEN_WITH_STR(T_STRING, 0);
+}
+#line 8305 "Zend/zend_language_scanner.c"
+yy746:
+		YYDEBUG(746, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy755;
+		if (yych == 'n') goto yy755;
+		goto yy86;
+yy747:
+		YYDEBUG(747, *YYCURSOR);
+		yyaccept = 88;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy748:
+		YYDEBUG(748, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1665 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_INCLUDE_ONCE);
+}
+#line 8327 "Zend/zend_language_scanner.c"
+yy749:
+		YYDEBUG(749, *YYCURSOR);
+		yyaccept = 89;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy750:
+		YYDEBUG(750, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1673 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_REQUIRE_ONCE);
+}
+#line 8343 "Zend/zend_language_scanner.c"
+yy751:
+		YYDEBUG(751, *YYCURSOR);
+		yyaccept = 90;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy752:
+		YYDEBUG(752, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2190 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_FUNC_C);
+}
+#line 8359 "Zend/zend_language_scanner.c"
+yy753:
+		YYDEBUG(753, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy756;
+		if (yych == 'l') goto yy756;
+		goto yy48;
+yy754:
+		YYDEBUG(754, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy757;
+		goto yy48;
+yy755:
+		YYDEBUG(755, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'T') goto yy732;
+		if (yych == 't') goto yy732;
+		goto yy86;
+yy756:
+		YYDEBUG(756, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy759;
+		if (yych == 'e') goto yy759;
+		goto yy48;
+yy757:
+		YYDEBUG(757, *YYCURSOR);
+		yyaccept = 91;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy758:
+		YYDEBUG(758, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2210 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_NS_C);
+}
+#line 8401 "Zend/zend_language_scanner.c"
+yy759:
+		YYDEBUG(759, *YYCURSOR);
+		yyaccept = 4;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy760;
+		if (yych != 'r') goto yy48;
+yy760:
+		YYDEBUG(760, *YYCURSOR);
+		yyaccept = 92;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy47;
+		}
+		if (yych == '\\') goto yy161;
+yy761:
+		YYDEBUG(761, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1701 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_IDENT(T_HALT_COMPILER);
+}
+#line 8423 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_LOOKING_FOR_PROPERTY:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,  64,  64,   0,   0,  64,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			 64,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(762, *YYCURSOR);
+		YYFILL(3);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy766;
+		}
+		if (yych <= 'Z') {
+			if (yych <= '>') {
+				if (yych == '-') goto yy769;
+			} else {
+				if (yych <= '?') goto yy770;
+				if (yych >= 'A') goto yy771;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych == '_') goto yy771;
+			} else {
+				if (yych <= 'z') goto yy771;
+				if (yych >= 0x80) goto yy771;
+			}
+		}
+		YYDEBUG(764, *YYCURSOR);
+		++YYCURSOR;
+yy765:
+		YYDEBUG(765, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1591 "Zend/zend_language_scanner.l"
+		{
+	yyless(0);
+	yy_pop_state();
+	goto restart;
+}
+#line 8494 "Zend/zend_language_scanner.c"
+yy766:
+		YYDEBUG(766, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(767, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy766;
+		}
+		YYDEBUG(768, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1574 "Zend/zend_language_scanner.l"
+		{
+	goto return_whitespace;
+}
+#line 8510 "Zend/zend_language_scanner.c"
+yy769:
+		YYDEBUG(769, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy774;
+		goto yy765;
+yy770:
+		YYDEBUG(770, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '-') goto yy776;
+		goto yy765;
+yy771:
+		YYDEBUG(771, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(772, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy771;
+		}
+		YYDEBUG(773, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1586 "Zend/zend_language_scanner.l"
+		{
+	yy_pop_state();
+	RETURN_TOKEN_WITH_STR(T_STRING, 0);
+}
+#line 8537 "Zend/zend_language_scanner.c"
+yy774:
+		YYDEBUG(774, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(775, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1578 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_OBJECT_OPERATOR);
+}
+#line 8547 "Zend/zend_language_scanner.c"
+yy776:
+		YYDEBUG(776, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy778;
+		YYDEBUG(777, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy765;
+yy778:
+		YYDEBUG(778, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(779, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1582 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN(T_NULLSAFE_OBJECT_OPERATOR);
+}
+#line 8564 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_BACKQUOTE:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(780, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych <= '_') {
+			if (yych == '$') goto yy784;
+		} else {
+			if (yych <= '`') goto yy785;
+			if (yych == '{') goto yy787;
+		}
+		YYDEBUG(782, *YYCURSOR);
+		++YYCURSOR;
+yy783:
+		YYDEBUG(783, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2838 "Zend/zend_language_scanner.l"
+		{
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+	if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
+		YYCURSOR++;
+	}
+
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '`':
+				break;
+			case '$':
+				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
+					break;
+				}
+				continue;
+			case '{':
+				if (*YYCURSOR == '$') {
+					break;
+				}
+				continue;
+			case '\\':
+				if (YYCURSOR < YYLIMIT) {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		YYCURSOR--;
+		break;
+	}
+
+	yyleng = YYCURSOR - SCNG(yy_text);
+
+	if (EXPECTED(zend_scan_escape_string(zendlval, yytext, yyleng, '`') == SUCCESS)
+	 || !PARSER_MODE()) {
+		RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+	} else {
+		RETURN_TOKEN(T_ERROR);
+	}
+}
+#line 8662 "Zend/zend_language_scanner.c"
+yy784:
+		YYDEBUG(784, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy783;
+			if (yych <= 'Z') goto yy788;
+			if (yych <= '^') goto yy783;
+			goto yy788;
+		} else {
+			if (yych <= 'z') {
+				if (yych <= '`') goto yy783;
+				goto yy788;
+			} else {
+				if (yych <= '{') goto yy791;
+				if (yych <= 0x7F) goto yy783;
+				goto yy788;
+			}
+		}
+yy785:
+		YYDEBUG(785, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(786, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2778 "Zend/zend_language_scanner.l"
+		{
+	BEGIN(ST_IN_SCRIPTING);
+	RETURN_TOKEN('`');
+}
+#line 8691 "Zend/zend_language_scanner.c"
+yy787:
+		YYDEBUG(787, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '$') goto yy793;
+		goto yy783;
+yy788:
+		YYDEBUG(788, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(4);
+		yych = *YYCURSOR;
+		YYDEBUG(789, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy788;
+		}
+		if (yych <= '>') {
+			if (yych == '-') goto yy795;
+		} else {
+			if (yych <= '?') goto yy797;
+			if (yych <= '@') goto yy790;
+			if (yych <= '[') goto yy798;
+		}
+yy790:
+		YYDEBUG(790, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2342 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 8720 "Zend/zend_language_scanner.c"
+yy791:
+		YYDEBUG(791, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(792, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1910 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_LOOKING_FOR_VARNAME);
+	enter_nesting('{');
+	RETURN_TOKEN(T_DOLLAR_OPEN_CURLY_BRACES);
+}
+#line 8732 "Zend/zend_language_scanner.c"
+yy793:
+		YYDEBUG(793, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(794, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2765 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_IN_SCRIPTING);
+	yyless(1);
+	enter_nesting('{');
+	RETURN_TOKEN(T_CURLY_OPEN);
+}
+#line 8745 "Zend/zend_language_scanner.c"
+yy795:
+		YYDEBUG(795, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy800;
+yy796:
+		YYDEBUG(796, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy790;
+yy797:
+		YYDEBUG(797, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '-') goto yy801;
+		goto yy796;
+yy798:
+		YYDEBUG(798, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(799, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2336 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 1);
+	yy_push_state(ST_VAR_OFFSET);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 8770 "Zend/zend_language_scanner.c"
+yy800:
+		YYDEBUG(800, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy796;
+			if (yych <= 'Z') goto yy802;
+			if (yych <= '^') goto yy796;
+			goto yy802;
+		} else {
+			if (yych <= '`') goto yy796;
+			if (yych <= 'z') goto yy802;
+			if (yych <= 0x7F) goto yy796;
+			goto yy802;
+		}
+yy801:
+		YYDEBUG(801, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy804;
+		goto yy796;
+yy802:
+		YYDEBUG(802, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(803, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2322 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 3);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 8801 "Zend/zend_language_scanner.c"
+yy804:
+		YYDEBUG(804, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy796;
+			if (yych <= 'Z') goto yy805;
+			if (yych <= '^') goto yy796;
+		} else {
+			if (yych <= '`') goto yy796;
+			if (yych <= 'z') goto yy805;
+			if (yych <= 0x7F) goto yy796;
+		}
+yy805:
+		YYDEBUG(805, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(806, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2328 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 4);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 8825 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_DOUBLE_QUOTES:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(807, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych <= '#') {
+			if (yych == '"') goto yy811;
+		} else {
+			if (yych <= '$') goto yy813;
+			if (yych == '{') goto yy814;
+		}
+		YYDEBUG(809, *YYCURSOR);
+		++YYCURSOR;
+yy810:
+		YYDEBUG(810, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2784 "Zend/zend_language_scanner.l"
+		{
+	if (GET_DOUBLE_QUOTES_SCANNED_LENGTH()) {
+		YYCURSOR += GET_DOUBLE_QUOTES_SCANNED_LENGTH() - 1;
+		SET_DOUBLE_QUOTES_SCANNED_LENGTH(0);
+
+		goto double_quotes_scan_done;
+	}
+
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+	if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
+		YYCURSOR++;
+	}
+
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '"':
+				break;
+			case '$':
+				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
+					break;
+				}
+				continue;
+			case '{':
+				if (*YYCURSOR == '$') {
+					break;
+				}
+				continue;
+			case '\\':
+				if (YYCURSOR < YYLIMIT) {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		YYCURSOR--;
+		break;
+	}
+
+double_quotes_scan_done:
+	yyleng = YYCURSOR - SCNG(yy_text);
+
+	if (EXPECTED(zend_scan_escape_string(zendlval, yytext, yyleng, '"') == SUCCESS)
+	 || !PARSER_MODE()) {
+		RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+	} else {
+		RETURN_TOKEN(T_ERROR);
+	}
+}
+#line 8931 "Zend/zend_language_scanner.c"
+yy811:
+		YYDEBUG(811, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(812, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2773 "Zend/zend_language_scanner.l"
+		{
+	BEGIN(ST_IN_SCRIPTING);
+	RETURN_TOKEN('"');
+}
+#line 8942 "Zend/zend_language_scanner.c"
+yy813:
+		YYDEBUG(813, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy810;
+			if (yych <= 'Z') goto yy815;
+			if (yych <= '^') goto yy810;
+			goto yy815;
+		} else {
+			if (yych <= 'z') {
+				if (yych <= '`') goto yy810;
+				goto yy815;
+			} else {
+				if (yych <= '{') goto yy818;
+				if (yych <= 0x7F) goto yy810;
+				goto yy815;
+			}
+		}
+yy814:
+		YYDEBUG(814, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '$') goto yy820;
+		goto yy810;
+yy815:
+		YYDEBUG(815, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(4);
+		yych = *YYCURSOR;
+		YYDEBUG(816, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy815;
+		}
+		if (yych <= '>') {
+			if (yych == '-') goto yy822;
+		} else {
+			if (yych <= '?') goto yy824;
+			if (yych <= '@') goto yy817;
+			if (yych <= '[') goto yy825;
+		}
+yy817:
+		YYDEBUG(817, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2342 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 8989 "Zend/zend_language_scanner.c"
+yy818:
+		YYDEBUG(818, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(819, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1910 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_LOOKING_FOR_VARNAME);
+	enter_nesting('{');
+	RETURN_TOKEN(T_DOLLAR_OPEN_CURLY_BRACES);
+}
+#line 9001 "Zend/zend_language_scanner.c"
+yy820:
+		YYDEBUG(820, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(821, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2765 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_IN_SCRIPTING);
+	yyless(1);
+	enter_nesting('{');
+	RETURN_TOKEN(T_CURLY_OPEN);
+}
+#line 9014 "Zend/zend_language_scanner.c"
+yy822:
+		YYDEBUG(822, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy827;
+yy823:
+		YYDEBUG(823, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy817;
+yy824:
+		YYDEBUG(824, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '-') goto yy828;
+		goto yy823;
+yy825:
+		YYDEBUG(825, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(826, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2336 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 1);
+	yy_push_state(ST_VAR_OFFSET);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9039 "Zend/zend_language_scanner.c"
+yy827:
+		YYDEBUG(827, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy823;
+			if (yych <= 'Z') goto yy829;
+			if (yych <= '^') goto yy823;
+			goto yy829;
+		} else {
+			if (yych <= '`') goto yy823;
+			if (yych <= 'z') goto yy829;
+			if (yych <= 0x7F) goto yy823;
+			goto yy829;
+		}
+yy828:
+		YYDEBUG(828, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy831;
+		goto yy823;
+yy829:
+		YYDEBUG(829, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(830, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2322 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 3);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9070 "Zend/zend_language_scanner.c"
+yy831:
+		YYDEBUG(831, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy823;
+			if (yych <= 'Z') goto yy832;
+			if (yych <= '^') goto yy823;
+		} else {
+			if (yych <= '`') goto yy823;
+			if (yych <= 'z') goto yy832;
+			if (yych <= 0x7F) goto yy823;
+		}
+yy832:
+		YYDEBUG(832, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(833, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2328 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 4);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9094 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_HEREDOC:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(834, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych == '$') goto yy838;
+		if (yych == '{') goto yy839;
+		YYDEBUG(836, *YYCURSOR);
+		++YYCURSOR;
+yy837:
+		YYDEBUG(837, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2884 "Zend/zend_language_scanner.l"
+		{
+	zend_heredoc_label *heredoc_label = zend_ptr_stack_top(&SCNG(heredoc_label_stack));
+	int newline = 0, indentation = 0, spacing = 0;
+
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+
+	YYCURSOR--;
+
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '\r':
+				if (*YYCURSOR == '\n') {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			case '\n':
+				indentation = spacing = 0;
+
+				while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
+					if (*YYCURSOR == '\t') {
+						spacing |= HEREDOC_USING_TABS;
+					} else {
+						spacing |= HEREDOC_USING_SPACES;
+					}
+					++YYCURSOR;
+					++indentation;
+				}
+
+				if (YYCURSOR == YYLIMIT) {
+					yyleng = YYCURSOR - SCNG(yy_text);
+					HANDLE_NEWLINES(yytext, yyleng);
+					ZVAL_NULL(zendlval);
+					RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+				}
+
+				/* Check for ending label on the next line */
+				if (IS_LABEL_START(*YYCURSOR) && heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, heredoc_label->label, heredoc_label->length)) {
+					if (IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
+						continue;
+					}
+
+					if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
+						zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+						if (PARSER_MODE()) {
+							RETURN_TOKEN(T_ERROR);
+						}
+					}
+
+					/* newline before label will be subtracted from returned text, but
+					 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
+					if (YYCURSOR[-indentation - 2] == '\r' && YYCURSOR[-indentation - 1] == '\n') {
+						newline = 2; /* Windows newline */
+					} else {
+						newline = 1;
+					}
+
+					CG(increment_lineno) = 1; /* For newline before label */
+
+					if (SCNG(heredoc_scan_ahead)) {
+						SCNG(heredoc_indentation) = indentation;
+						SCNG(heredoc_indentation_uses_spaces) = (spacing == HEREDOC_USING_SPACES);
+					} else {
+						YYCURSOR -= indentation;
+					}
+
+					BEGIN(ST_END_HEREDOC);
+
+					goto heredoc_scan_done;
+				}
+				continue;
+			case '$':
+				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
+					break;
+				}
+				continue;
+			case '{':
+				if (*YYCURSOR == '$') {
+					break;
+				}
+				continue;
+			case '\\':
+				if (YYCURSOR < YYLIMIT && *YYCURSOR != '\n' && *YYCURSOR != '\r') {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+
+		YYCURSOR--;
+		break;
+	}
+
+heredoc_scan_done:
+
+	yyleng = YYCURSOR - SCNG(yy_text);
+	ZVAL_STRINGL(zendlval, yytext, yyleng - newline);
+
+	if (!SCNG(heredoc_scan_ahead) && !EG(exception) && PARSER_MODE()) {
+		bool newline_at_start = *(yytext - 1) == '\n' || *(yytext - 1) == '\r';
+		zend_string *copy = Z_STR_P(zendlval);
+
+		if (!strip_multiline_string_indentation(
+				zendlval, heredoc_label->indentation, heredoc_label->indentation_uses_spaces,
+				newline_at_start, newline != 0)) {
+			RETURN_TOKEN(T_ERROR);
+		}
+
+		if (UNEXPECTED(zend_scan_escape_string(zendlval, ZSTR_VAL(copy), ZSTR_LEN(copy), 0) != SUCCESS)) {
+			zend_string_efree(copy);
+			RETURN_TOKEN(T_ERROR);
+		}
+
+		zend_string_efree(copy);
+	} else {
+		HANDLE_NEWLINES(yytext, yyleng - newline);
+	}
+
+	RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+}
+#line 9266 "Zend/zend_language_scanner.c"
+yy838:
+		YYDEBUG(838, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy837;
+			if (yych <= 'Z') goto yy840;
+			if (yych <= '^') goto yy837;
+			goto yy840;
+		} else {
+			if (yych <= 'z') {
+				if (yych <= '`') goto yy837;
+				goto yy840;
+			} else {
+				if (yych <= '{') goto yy843;
+				if (yych <= 0x7F) goto yy837;
+				goto yy840;
+			}
+		}
+yy839:
+		YYDEBUG(839, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '$') goto yy845;
+		goto yy837;
+yy840:
+		YYDEBUG(840, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(4);
+		yych = *YYCURSOR;
+		YYDEBUG(841, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy840;
+		}
+		if (yych <= '>') {
+			if (yych == '-') goto yy847;
+		} else {
+			if (yych <= '?') goto yy849;
+			if (yych <= '@') goto yy842;
+			if (yych <= '[') goto yy850;
+		}
+yy842:
+		YYDEBUG(842, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2342 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9313 "Zend/zend_language_scanner.c"
+yy843:
+		YYDEBUG(843, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(844, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1910 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_LOOKING_FOR_VARNAME);
+	enter_nesting('{');
+	RETURN_TOKEN(T_DOLLAR_OPEN_CURLY_BRACES);
+}
+#line 9325 "Zend/zend_language_scanner.c"
+yy845:
+		YYDEBUG(845, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(846, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2765 "Zend/zend_language_scanner.l"
+		{
+	yy_push_state(ST_IN_SCRIPTING);
+	yyless(1);
+	enter_nesting('{');
+	RETURN_TOKEN(T_CURLY_OPEN);
+}
+#line 9338 "Zend/zend_language_scanner.c"
+yy847:
+		YYDEBUG(847, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy852;
+yy848:
+		YYDEBUG(848, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy842;
+yy849:
+		YYDEBUG(849, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '-') goto yy853;
+		goto yy848;
+yy850:
+		YYDEBUG(850, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(851, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2336 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 1);
+	yy_push_state(ST_VAR_OFFSET);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9363 "Zend/zend_language_scanner.c"
+yy852:
+		YYDEBUG(852, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy848;
+			if (yych <= 'Z') goto yy854;
+			if (yych <= '^') goto yy848;
+			goto yy854;
+		} else {
+			if (yych <= '`') goto yy848;
+			if (yych <= 'z') goto yy854;
+			if (yych <= 0x7F) goto yy848;
+			goto yy854;
+		}
+yy853:
+		YYDEBUG(853, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '>') goto yy856;
+		goto yy848;
+yy854:
+		YYDEBUG(854, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(855, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2322 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 3);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9394 "Zend/zend_language_scanner.c"
+yy856:
+		YYDEBUG(856, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy848;
+			if (yych <= 'Z') goto yy857;
+			if (yych <= '^') goto yy848;
+		} else {
+			if (yych <= '`') goto yy848;
+			if (yych <= 'z') goto yy857;
+			if (yych <= 0x7F) goto yy848;
+		}
+yy857:
+		YYDEBUG(857, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(858, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2328 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 4);
+	yy_push_state(ST_LOOKING_FOR_PROPERTY);
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9418 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_LOOKING_FOR_VARNAME:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0, 128, 
+			  0, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128,   0,   0,   0,   0,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(859, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy861;
+			if (yych <= 'Z') goto yy863;
+			if (yych >= '_') goto yy863;
+		} else {
+			if (yych <= '`') goto yy861;
+			if (yych <= 'z') goto yy863;
+			if (yych >= 0x80) goto yy863;
+		}
+yy861:
+		YYDEBUG(861, *YYCURSOR);
+		++YYCURSOR;
+yy862:
+		YYDEBUG(862, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1933 "Zend/zend_language_scanner.l"
+		{
+	yyless(0);
+	yy_pop_state();
+	yy_push_state(ST_IN_SCRIPTING);
+	goto restart;
+}
+#line 9482 "Zend/zend_language_scanner.c"
+yy863:
+		YYDEBUG(863, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '_') {
+			if (yych <= '@') {
+				if (yych <= '/') goto yy862;
+				if (yych <= '9') goto yy865;
+				goto yy862;
+			} else {
+				if (yych <= '[') goto yy865;
+				if (yych <= '^') goto yy862;
+				goto yy865;
+			}
+		} else {
+			if (yych <= '|') {
+				if (yych <= '`') goto yy862;
+				if (yych <= 'z') goto yy865;
+				goto yy862;
+			} else {
+				if (yych <= '}') goto yy865;
+				if (yych <= 0x7F) goto yy862;
+				goto yy865;
+			}
+		}
+yy864:
+		YYDEBUG(864, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy865:
+		YYDEBUG(865, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy864;
+		}
+		if (yych <= '@') goto yy866;
+		if (yych <= '[') goto yy867;
+		if (yych == '}') goto yy867;
+yy866:
+		YYDEBUG(866, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy862;
+yy867:
+		YYDEBUG(867, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(868, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 1925 "Zend/zend_language_scanner.l"
+		{
+	yyless(yyleng - 1);
+	yy_pop_state();
+	yy_push_state(ST_IN_SCRIPTING);
+	RETURN_TOKEN_WITH_STR(T_STRING_VARNAME, 0);
+}
+#line 9536 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_ST_VAR_OFFSET:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			248, 248, 216, 216, 216, 216, 216, 216, 
+			152, 152,   0,   0,   0,   0,   0,   0, 
+			  0, 144, 144, 144, 144, 144, 144,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,   0,   0,   0,   0,  16, 
+			  0, 144, 144, 144, 144, 144, 144,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,   0,   0,   0,   0,   0, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+			 16,  16,  16,  16,  16,  16,  16,  16, 
+		};
+		YYDEBUG(869, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych <= '0') {
+			if (yych <= ' ') {
+				if (yych <= '\f') {
+					if (yych <= 0x08) goto yy871;
+					if (yych <= '\n') goto yy873;
+				} else {
+					if (yych <= '\r') goto yy873;
+					if (yych >= ' ') goto yy873;
+				}
+			} else {
+				if (yych <= '$') {
+					if (yych <= '"') goto yy875;
+					if (yych <= '#') goto yy873;
+					goto yy877;
+				} else {
+					if (yych == '\'') goto yy873;
+					if (yych <= '/') goto yy875;
+					goto yy878;
+				}
+			}
+		} else {
+			if (yych <= ']') {
+				if (yych <= 'Z') {
+					if (yych <= '9') goto yy880;
+					if (yych <= '@') goto yy875;
+					goto yy882;
+				} else {
+					if (yych <= '[') goto yy875;
+					if (yych <= '\\') goto yy873;
+					goto yy885;
+				}
+			} else {
+				if (yych <= '`') {
+					if (yych == '_') goto yy882;
+					goto yy875;
+				} else {
+					if (yych <= 'z') goto yy882;
+					if (yych <= '~') goto yy875;
+					if (yych >= 0x80) goto yy882;
+				}
+			}
+		}
+yy871:
+		YYDEBUG(871, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(872, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 3099 "Zend/zend_language_scanner.l"
+		{
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+
+	RETURN_TOKEN(T_BAD_CHARACTER);
+}
+#line 9633 "Zend/zend_language_scanner.c"
+yy873:
+		YYDEBUG(873, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(874, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2356 "Zend/zend_language_scanner.l"
+		{
+	/* Invalid rule to return a more explicit parse error with proper line number */
+	yyless(0);
+	yy_pop_state();
+	ZVAL_NULL(zendlval);
+	RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+}
+#line 9647 "Zend/zend_language_scanner.c"
+yy875:
+		YYDEBUG(875, *YYCURSOR);
+		++YYCURSOR;
+yy876:
+		YYDEBUG(876, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2351 "Zend/zend_language_scanner.l"
+		{
+	/* Only '[' or '-' can be valid, but returning other tokens will allow a more explicit parse error */
+	RETURN_TOKEN(yytext[0]);
+}
+#line 9659 "Zend/zend_language_scanner.c"
+yy877:
+		YYDEBUG(877, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '_') {
+			if (yych <= '@') goto yy876;
+			if (yych <= 'Z') goto yy887;
+			if (yych <= '^') goto yy876;
+			goto yy887;
+		} else {
+			if (yych <= '`') goto yy876;
+			if (yych <= 'z') goto yy887;
+			if (yych <= 0x7F) goto yy876;
+			goto yy887;
+		}
+yy878:
+		YYDEBUG(878, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'X') {
+			if (yych <= 'B') {
+				if (yych <= '/') goto yy879;
+				if (yych <= '9') goto yy890;
+				if (yych >= 'B') goto yy893;
+			} else {
+				if (yych == 'O') goto yy895;
+				if (yych >= 'X') goto yy896;
+			}
+		} else {
+			if (yych <= 'b') {
+				if (yych == '_') goto yy897;
+				if (yych >= 'b') goto yy893;
+			} else {
+				if (yych <= 'o') {
+					if (yych >= 'o') goto yy895;
+				} else {
+					if (yych == 'x') goto yy896;
+				}
+			}
+		}
+yy879:
+		YYDEBUG(879, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2137 "Zend/zend_language_scanner.l"
+		{ /* Offset could be treated as a long */
+	if (yyleng < MAX_LENGTH_OF_LONG - 1 || (yyleng == MAX_LENGTH_OF_LONG - 1 && strcmp(yytext, long_min_digits) < 0)) {
+		char *end;
+		errno = 0;
+		ZVAL_LONG(zendlval, ZEND_STRTOL(yytext, &end, 10));
+		if (errno == ERANGE) {
+			goto string;
+		}
+		ZEND_ASSERT(end == yytext + yyleng);
+	} else {
+string:
+		ZVAL_STRINGL(zendlval, yytext, yyleng);
+	}
+	RETURN_TOKEN_WITH_VAL(T_NUM_STRING);
+}
+#line 9718 "Zend/zend_language_scanner.c"
+yy880:
+		YYDEBUG(880, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(881, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy880;
+		}
+		if (yych == '_') goto yy897;
+		goto yy879;
+yy882:
+		YYDEBUG(882, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(883, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy882;
+		}
+		YYDEBUG(884, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2380 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_STRING, 0);
+}
+#line 9746 "Zend/zend_language_scanner.c"
+yy885:
+		YYDEBUG(885, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(886, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2346 "Zend/zend_language_scanner.l"
+		{
+	yy_pop_state();
+	RETURN_TOKEN(']');
+}
+#line 9757 "Zend/zend_language_scanner.c"
+yy887:
+		YYDEBUG(887, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(888, *YYCURSOR);
+		if (yych <= '^') {
+			if (yych <= '9') {
+				if (yych >= '0') goto yy887;
+			} else {
+				if (yych <= '@') goto yy889;
+				if (yych <= 'Z') goto yy887;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= '_') goto yy887;
+			} else {
+				if (yych <= 'z') goto yy887;
+				if (yych >= 0x80) goto yy887;
+			}
+		}
+yy889:
+		YYDEBUG(889, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2342 "Zend/zend_language_scanner.l"
+		{
+	RETURN_TOKEN_WITH_STR(T_VARIABLE, 1);
+}
+#line 9786 "Zend/zend_language_scanner.c"
+yy890:
+		YYDEBUG(890, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(891, *YYCURSOR);
+		if (yych <= '/') goto yy892;
+		if (yych <= '9') goto yy890;
+		if (yych == '_') goto yy897;
+yy892:
+		YYDEBUG(892, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2153 "Zend/zend_language_scanner.l"
+		{ /* Offset must be treated as a string */
+	if (yyleng == 1) {
+		ZVAL_INTERNED_STR(zendlval, ZSTR_CHAR((zend_uchar)*(yytext)));
+	} else {
+		ZVAL_STRINGL(zendlval, yytext, yyleng);
+	}
+	RETURN_TOKEN_WITH_VAL(T_NUM_STRING);
+}
+#line 9809 "Zend/zend_language_scanner.c"
+yy893:
+		YYDEBUG(893, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 32) {
+			goto yy898;
+		}
+yy894:
+		YYDEBUG(894, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept == 0) {
+			goto yy879;
+		} else {
+			goto yy892;
+		}
+yy895:
+		YYDEBUG(895, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy900;
+		}
+		goto yy894;
+yy896:
+		YYDEBUG(896, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy902;
+		}
+		goto yy894;
+yy897:
+		YYDEBUG(897, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '/') goto yy894;
+		if (yych <= '9') goto yy890;
+		goto yy894;
+yy898:
+		YYDEBUG(898, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(899, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy898;
+		}
+		if (yych == '_') goto yy893;
+		goto yy892;
+yy900:
+		YYDEBUG(900, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(901, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy900;
+		}
+		if (yych == '_') goto yy895;
+		goto yy892;
+yy902:
+		YYDEBUG(902, *YYCURSOR);
+		yyaccept = 1;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(903, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy902;
+		}
+		if (yych == '_') goto yy896;
+		goto yy892;
+	}
+/* *********************************** */
+yyc_SHEBANG:
+	{
+		static const unsigned char yybm[] = {
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+		};
+		YYDEBUG(904, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych == '#') goto yy908;
+		YYDEBUG(906, *YYCURSOR);
+		++YYCURSOR;
+yy907:
+		YYDEBUG(907, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2220 "Zend/zend_language_scanner.l"
+		{
+	yyless(0);
+	BEGIN(INITIAL);
+	goto restart;
+}
+#line 9941 "Zend/zend_language_scanner.c"
+yy908:
+		YYDEBUG(908, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych != '!') goto yy907;
+yy909:
+		YYDEBUG(909, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(910, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy909;
+		}
+		YYDEBUG(911, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(912, *YYCURSOR);
+		yyleng = YYCURSOR - SCNG(yy_text);
+#line 2214 "Zend/zend_language_scanner.l"
+		{
+	CG(zend_lineno)++;
+	BEGIN(INITIAL);
+	goto restart;
+}
+#line 9965 "Zend/zend_language_scanner.c"
+	}
+/* *********************************** */
+yyc_INITIAL:
+	YYDEBUG(913, *YYCURSOR);
+	YYFILL(7);
+	yych = *YYCURSOR;
+	if (yych == '<') goto yy917;
+	YYDEBUG(915, *YYCURSOR);
+	++YYCURSOR;
+yy916:
+	YYDEBUG(916, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2266 "Zend/zend_language_scanner.l"
+	{
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+
+inline_char_handler:
+
+	while (1) {
+		YYCTYPE *ptr = memchr(YYCURSOR, '<', YYLIMIT - YYCURSOR);
+
+		YYCURSOR = ptr ? ptr + 1 : YYLIMIT;
+
+		if (YYCURSOR >= YYLIMIT) {
+			break;
+		}
+
+		if (*YYCURSOR == '?') {
+			if (CG(short_tags) /* <? */
+				|| (*(YYCURSOR + 1) == '=') /* <?= */
+				|| (!strncasecmp((char*)YYCURSOR + 1, "php", 3) && /* <?php[ \t\r\n] */
+					(YYCURSOR + 4 == YYLIMIT ||
+					YYCURSOR[4] == ' ' || YYCURSOR[4] == '\t' ||
+					YYCURSOR[4] == '\n' || YYCURSOR[4] == '\r'))
+			) {
+				YYCURSOR--;
+				break;
+			}
+		}
+	}
+
+	yyleng = YYCURSOR - SCNG(yy_text);
+
+	if (SCNG(output_filter)) {
+		size_t readsize;
+		char *s = NULL;
+		size_t sz = 0;
+		// TODO: avoid reallocation ???
+		readsize = SCNG(output_filter)((unsigned char **)&s, &sz, (unsigned char *)yytext, (size_t)yyleng);
+		ZVAL_STRINGL(zendlval, s, sz);
+		efree(s);
+		if (readsize < yyleng) {
+			yyless(readsize);
+		}
+	} else if (yyleng == 1) {
+		ZVAL_INTERNED_STR(zendlval, ZSTR_CHAR((zend_uchar)*yytext));
+	} else {
+		ZVAL_STRINGL(zendlval, yytext, yyleng);
+	}
+	HANDLE_NEWLINES(yytext, yyleng);
+	RETURN_TOKEN_WITH_VAL(T_INLINE_HTML);
+}
+#line 10030 "Zend/zend_language_scanner.c"
+yy917:
+	YYDEBUG(917, *YYCURSOR);
+	yych = *++YYCURSOR;
+	if (yych != '?') goto yy916;
+	YYDEBUG(918, *YYCURSOR);
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 'O') {
+		if (yych == '=') goto yy920;
+	} else {
+		if (yych <= 'P') goto yy922;
+		if (yych == 'p') goto yy922;
+	}
+yy919:
+	YYDEBUG(919, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2257 "Zend/zend_language_scanner.l"
+	{
+	if (CG(short_tags)) {
+		BEGIN(ST_IN_SCRIPTING);
+		RETURN_OR_SKIP_TOKEN(T_OPEN_TAG);
+	} else {
+		goto inline_char_handler;
+	}
+}
+#line 10055 "Zend/zend_language_scanner.c"
+yy920:
+	YYDEBUG(920, *YYCURSOR);
+	++YYCURSOR;
+	YYDEBUG(921, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2226 "Zend/zend_language_scanner.l"
+	{
+	BEGIN(ST_IN_SCRIPTING);
+	if (PARSER_MODE()) {
+		/* We'll reject this as an identifier in zend_lex_tstring. */
+		RETURN_TOKEN_WITH_IDENT(T_ECHO);
+	}
+	RETURN_TOKEN(T_OPEN_TAG_WITH_ECHO);
+}
+#line 10070 "Zend/zend_language_scanner.c"
+yy922:
+	YYDEBUG(922, *YYCURSOR);
+	yych = *++YYCURSOR;
+	if (yych == 'H') goto yy924;
+	if (yych == 'h') goto yy924;
+yy923:
+	YYDEBUG(923, *YYCURSOR);
+	YYCURSOR = YYMARKER;
+	goto yy919;
+yy924:
+	YYDEBUG(924, *YYCURSOR);
+	yych = *++YYCURSOR;
+	if (yych == 'P') goto yy925;
+	if (yych != 'p') goto yy923;
+yy925:
+	YYDEBUG(925, *YYCURSOR);
+	yych = *++YYCURSOR;
+	if (yych <= '\f') {
+		if (yych <= 0x08) goto yy926;
+		if (yych <= '\n') goto yy927;
+	} else {
+		if (yych <= '\r') goto yy929;
+		if (yych == ' ') goto yy927;
+	}
+yy926:
+	YYDEBUG(926, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2242 "Zend/zend_language_scanner.l"
+	{
+	/* Allow <?php followed by end of file. */
+	if (YYCURSOR == YYLIMIT) {
+		BEGIN(ST_IN_SCRIPTING);
+		RETURN_OR_SKIP_TOKEN(T_OPEN_TAG);
+	}
+	/* Degenerate case: <?phpX is interpreted as <? phpX with short tags. */
+	if (CG(short_tags)) {
+		yyless(2);
+		BEGIN(ST_IN_SCRIPTING);
+		RETURN_OR_SKIP_TOKEN(T_OPEN_TAG);
+	}
+	goto inline_char_handler;
+}
+#line 10113 "Zend/zend_language_scanner.c"
+yy927:
+	YYDEBUG(927, *YYCURSOR);
+	++YYCURSOR;
+yy928:
+	YYDEBUG(928, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2236 "Zend/zend_language_scanner.l"
+	{
+	HANDLE_NEWLINE(yytext[yyleng-1]);
+	BEGIN(ST_IN_SCRIPTING);
+	RETURN_OR_SKIP_TOKEN(T_OPEN_TAG);
+}
+#line 10126 "Zend/zend_language_scanner.c"
+yy929:
+	YYDEBUG(929, *YYCURSOR);
+	yych = *++YYCURSOR;
+	if (yych == '\n') goto yy927;
+	goto yy928;
+/* *********************************** */
+yyc_ST_END_HEREDOC:
+	YYDEBUG(930, *YYCURSOR);
+	YYFILL(1);
+	yych = *YYCURSOR;
+	YYDEBUG(932, *YYCURSOR);
+	++YYCURSOR;
+	YYDEBUG(933, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 2751 "Zend/zend_language_scanner.l"
+	{
+	zend_heredoc_label *heredoc_label = zend_ptr_stack_pop(&SCNG(heredoc_label_stack));
+
+	yyleng = heredoc_label->indentation + heredoc_label->length;
+	YYCURSOR += yyleng - 1;
+
+	heredoc_label_dtor(heredoc_label);
+	efree(heredoc_label);
+
+	BEGIN(ST_IN_SCRIPTING);
+	RETURN_TOKEN(T_END_HEREDOC);
+}
+#line 10154 "Zend/zend_language_scanner.c"
+/* *********************************** */
+yyc_ST_NOWDOC:
+	YYDEBUG(934, *YYCURSOR);
+	YYFILL(1);
+	yych = *YYCURSOR;
+	YYDEBUG(936, *YYCURSOR);
+	++YYCURSOR;
+	YYDEBUG(937, *YYCURSOR);
+	yyleng = YYCURSOR - SCNG(yy_text);
+#line 3008 "Zend/zend_language_scanner.l"
+	{
+	zend_heredoc_label *heredoc_label = zend_ptr_stack_top(&SCNG(heredoc_label_stack));
+	int newline = 0, indentation = 0, spacing = -1;
+
+	if (YYCURSOR > YYLIMIT) {
+		RETURN_END_TOKEN;
+	}
+
+	YYCURSOR--;
+
+	while (YYCURSOR < YYLIMIT) {
+		switch (*YYCURSOR++) {
+			case '\r':
+				if (*YYCURSOR == '\n') {
+					YYCURSOR++;
+				}
+				ZEND_FALLTHROUGH;
+			case '\n':
+				indentation = spacing = 0;
+
+				while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
+					if (*YYCURSOR == '\t') {
+						spacing |= HEREDOC_USING_TABS;
+					} else {
+						spacing |= HEREDOC_USING_SPACES;
+					}
+					++YYCURSOR;
+					++indentation;
+				}
+
+				if (YYCURSOR == YYLIMIT) {
+					yyleng = YYCURSOR - SCNG(yy_text);
+					HANDLE_NEWLINES(yytext, yyleng);
+					ZVAL_NULL(zendlval);
+					RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+				}
+
+				/* Check for ending label on the next line */
+				if (IS_LABEL_START(*YYCURSOR) && heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, heredoc_label->label, heredoc_label->length)) {
+					if (IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
+						continue;
+					}
+
+					if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
+						zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+						if (PARSER_MODE()) {
+							RETURN_TOKEN(T_ERROR);
+						}
+					}
+
+					/* newline before label will be subtracted from returned text, but
+					 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
+					if (YYCURSOR[-indentation - 2] == '\r' && YYCURSOR[-indentation - 1] == '\n') {
+						newline = 2; /* Windows newline */
+					} else {
+						newline = 1;
+					}
+
+					CG(increment_lineno) = 1; /* For newline before label */
+
+					YYCURSOR -= indentation;
+					heredoc_label->indentation = indentation;
+
+					BEGIN(ST_END_HEREDOC);
+
+					goto nowdoc_scan_done;
+				}
+				ZEND_FALLTHROUGH;
+			default:
+				continue;
+		}
+	}
+
+nowdoc_scan_done:
+	yyleng = YYCURSOR - SCNG(yy_text);
+	ZVAL_STRINGL(zendlval, yytext, yyleng - newline);
+
+	if (!EG(exception) && spacing != -1 && PARSER_MODE()) {
+		bool newline_at_start = *(yytext - 1) == '\n' || *(yytext - 1) == '\r';
+		if (!strip_multiline_string_indentation(
+				zendlval, indentation, spacing == HEREDOC_USING_SPACES,
+				newline_at_start, newline != 0)) {
+			RETURN_TOKEN(T_ERROR);
+		}
+	}
+
+	HANDLE_NEWLINES(yytext, yyleng - newline);
+	RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
+}
+#line 10254 "Zend/zend_language_scanner.c"
+}
+#line 3107 "Zend/zend_language_scanner.l"
+
+
+emit_token_with_str:
+	zend_copy_value(zendlval, (yytext + offset), (yyleng - offset));
+
+emit_token_with_val:
+	if (PARSER_MODE()) {
+		ZEND_ASSERT(Z_TYPE_P(zendlval) != IS_UNDEF);
+		elem->ast = zend_ast_create_zval_with_lineno(zendlval, start_line);
+	}
+
+emit_token:
+	if (SCNG(on_event)) {
+		SCNG(on_event)(ON_TOKEN, token, start_line, yytext, yyleng, SCNG(on_event_context));
+	}
+	return token;
+
+emit_token_with_ident:
+	if (PARSER_MODE()) {
+		elem->ident = SCNG(yy_text);
+	}
+	if (SCNG(on_event)) {
+		SCNG(on_event)(ON_TOKEN, token, start_line, yytext, yyleng, SCNG(on_event_context));
+	}
+	return token;
+
+return_whitespace:
+	HANDLE_NEWLINES(yytext, yyleng);
+	if (SCNG(on_event)) {
+		SCNG(on_event)(ON_TOKEN, T_WHITESPACE, start_line, yytext, yyleng, SCNG(on_event_context));
+	}
+	if (PARSER_MODE()) {
+		start_line = CG(zend_lineno);
+		goto restart;
+	} else {
+		return T_WHITESPACE;
+	}
+
+skip_token:
+	if (SCNG(on_event)) {
+		SCNG(on_event)(ON_TOKEN, token, start_line, yytext, yyleng, SCNG(on_event_context));
+	}
+	start_line = CG(zend_lineno);
+	goto restart;
+}
diff --git a/ext/json/json_parser.tab.c b/ext/json/json_parser.tab.c
new file mode 100644
index 0000000000..ae7013a721
--- /dev/null
+++ b/ext/json/json_parser.tab.c
@@ -0,0 +1,1912 @@
+/* A Bison parser, made by GNU Bison 3.5.1.  */
+
+/* Bison implementation for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "3.5.1"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 2
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* "%code top" blocks.  */
+
+/*
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author: Jakub Zelenka <bukka@php.net>                                |
+  +----------------------------------------------------------------------+
+*/
+
+#include "php.h"
+#include "php_json.h"
+#include "php_json_parser.h"
+
+#define YYDEBUG 0
+
+#if YYDEBUG
+int json_yydebug = 1;
+#endif
+
+#ifdef _MSC_VER
+#define YYMALLOC malloc
+#define YYFREE free
+#endif
+
+#define PHP_JSON_DEPTH_DEC --parser->depth
+#define PHP_JSON_DEPTH_INC \
+	if (parser->max_depth && parser->depth >= parser->max_depth) { \
+		parser->scanner.errcode = PHP_JSON_ERROR_DEPTH; \
+		YYERROR; \
+	} \
+	++parser->depth
+
+
+/* Substitute the type names.  */
+#define YYSTYPE         PHP_JSON_YYSTYPE
+/* Substitute the variable and function names.  */
+#define yyparse         php_json_yyparse
+#define yylex           php_json_yylex
+#define yyerror         php_json_yyerror
+#define yydebug         php_json_yydebug
+#define yynerrs         php_json_yynerrs
+
+
+# ifndef YY_CAST
+#  ifdef __cplusplus
+#   define YY_CAST(Type, Val) static_cast<Type> (Val)
+#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
+#  else
+#   define YY_CAST(Type, Val) ((Type) (Val))
+#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
+#  endif
+# endif
+# ifndef YY_NULLPTR
+#  if defined __cplusplus
+#   if 201103L <= __cplusplus
+#    define YY_NULLPTR nullptr
+#   else
+#    define YY_NULLPTR 0
+#   endif
+#  else
+#   define YY_NULLPTR ((void*)0)
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Use api.header.include to #include this header
+   instead of duplicating it here.  */
+#ifndef YY_PHP_JSON_YY_HOME_LUXE_DESKTOP_PHP_SRC_EXT_JSON_JSON_PARSER_TAB_H_INCLUDED
+# define YY_PHP_JSON_YY_HOME_LUXE_DESKTOP_PHP_SRC_EXT_JSON_JSON_PARSER_TAB_H_INCLUDED
+/* Debug traces.  */
+#ifndef PHP_JSON_YYDEBUG
+# if defined YYDEBUG
+#if YYDEBUG
+#   define PHP_JSON_YYDEBUG 1
+#  else
+#   define PHP_JSON_YYDEBUG 0
+#  endif
+# else /* ! defined YYDEBUG */
+#  define PHP_JSON_YYDEBUG 0
+# endif /* ! defined YYDEBUG */
+#endif  /* ! defined PHP_JSON_YYDEBUG */
+#if PHP_JSON_YYDEBUG
+extern int php_json_yydebug;
+#endif
+
+/* Token type.  */
+#ifndef PHP_JSON_YYTOKENTYPE
+# define PHP_JSON_YYTOKENTYPE
+  enum php_json_yytokentype
+  {
+    PHP_JSON_T_NUL = 258,
+    PHP_JSON_T_TRUE = 259,
+    PHP_JSON_T_FALSE = 260,
+    PHP_JSON_T_INT = 261,
+    PHP_JSON_T_DOUBLE = 262,
+    PHP_JSON_T_STRING = 263,
+    PHP_JSON_T_ESTRING = 264,
+    PHP_JSON_T_EOI = 265,
+    PHP_JSON_T_ERROR = 266
+  };
+#endif
+
+/* Value type.  */
+#if ! defined PHP_JSON_YYSTYPE && ! defined PHP_JSON_YYSTYPE_IS_DECLARED
+union PHP_JSON_YYSTYPE
+{
+
+	zval value;
+
+
+};
+typedef union PHP_JSON_YYSTYPE PHP_JSON_YYSTYPE;
+# define PHP_JSON_YYSTYPE_IS_TRIVIAL 1
+# define PHP_JSON_YYSTYPE_IS_DECLARED 1
+#endif
+
+
+
+int php_json_yyparse (php_json_parser *parser);
+
+#endif /* !YY_PHP_JSON_YY_HOME_LUXE_DESKTOP_PHP_SRC_EXT_JSON_JSON_PARSER_TAB_H_INCLUDED  */
+
+
+/* Unqualified %code blocks.  */
+
+static int php_json_yylex(union YYSTYPE *value, php_json_parser *parser);
+static void php_json_yyerror(php_json_parser *parser, char const *msg);
+static int php_json_parser_array_create(php_json_parser *parser, zval *array);
+static int php_json_parser_object_create(php_json_parser *parser, zval *array);
+
+
+
+#ifdef short
+# undef short
+#endif
+
+/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
+   <limits.h> and (if available) <stdint.h> are included
+   so that the code can choose integer types of a good width.  */
+
+#ifndef __PTRDIFF_MAX__
+# include <limits.h> /* INFRINGES ON USER NAME SPACE */
+# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
+#  define YY_STDINT_H
+# endif
+#endif
+
+/* Narrow types that promote to a signed type and that can represent a
+   signed or unsigned integer of at least N bits.  In tables they can
+   save space and decrease cache pressure.  Promoting to a signed type
+   helps avoid bugs in integer arithmetic.  */
+
+#ifdef __INT_LEAST8_MAX__
+typedef __INT_LEAST8_TYPE__ yytype_int8;
+#elif defined YY_STDINT_H
+typedef int_least8_t yytype_int8;
+#else
+typedef signed char yytype_int8;
+#endif
+
+#ifdef __INT_LEAST16_MAX__
+typedef __INT_LEAST16_TYPE__ yytype_int16;
+#elif defined YY_STDINT_H
+typedef int_least16_t yytype_int16;
+#else
+typedef short yytype_int16;
+#endif
+
+#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST8_TYPE__ yytype_uint8;
+#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST8_MAX <= INT_MAX)
+typedef uint_least8_t yytype_uint8;
+#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
+typedef unsigned char yytype_uint8;
+#else
+typedef short yytype_uint8;
+#endif
+
+#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST16_TYPE__ yytype_uint16;
+#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST16_MAX <= INT_MAX)
+typedef uint_least16_t yytype_uint16;
+#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
+typedef unsigned short yytype_uint16;
+#else
+typedef int yytype_uint16;
+#endif
+
+#ifndef YYPTRDIFF_T
+# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
+#  define YYPTRDIFF_T __PTRDIFF_TYPE__
+#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
+# elif defined PTRDIFF_MAX
+#  ifndef ptrdiff_t
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYPTRDIFF_T ptrdiff_t
+#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
+# else
+#  define YYPTRDIFF_T long
+#  define YYPTRDIFF_MAXIMUM LONG_MAX
+# endif
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM                                  \
+  YY_CAST (YYPTRDIFF_T,                                 \
+           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
+            ? YYPTRDIFF_MAXIMUM                         \
+            : YY_CAST (YYSIZE_T, -1)))
+
+#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
+
+/* Stored state numbers (used for stacks). */
+typedef yytype_int8 yy_state_t;
+
+/* State numbers in computations.  */
+typedef int yy_state_fast_t;
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_PURE
+# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
+# else
+#  define YY_ATTRIBUTE_PURE
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_UNUSED
+# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
+# else
+#  define YY_ATTRIBUTE_UNUSED
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
+
+#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
+    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
+    _Pragma ("GCC diagnostic pop")
+#else
+# define YY_INITIAL_VALUE(Value) Value
+#endif
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
+#endif
+
+#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
+# define YY_IGNORE_USELESS_CAST_BEGIN                          \
+    _Pragma ("GCC diagnostic push")                            \
+    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
+# define YY_IGNORE_USELESS_CAST_END            \
+    _Pragma ("GCC diagnostic pop")
+#endif
+#ifndef YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_END
+#endif
+
+
+#define YY_ASSERT(E) ((void) (0 && (E)))
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's 'empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+             && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+         || (defined PHP_JSON_YYSTYPE_IS_TRIVIAL && PHP_JSON_YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yy_state_t yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
+    do                                                                  \
+      {                                                                 \
+        YYPTRDIFF_T yynewbytes;                                         \
+        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
+        Stack = &yyptr->Stack_alloc;                                    \
+        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
+      }                                                                 \
+    while (0)
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYPTRDIFF_T yyi;                      \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (0)
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  16
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   26
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  18
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  14
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  29
+/* YYNSTATES -- Number of states.  */
+#define YYNSTATES  40
+
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   266
+
+
+/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, with out-of-bounds checking.  */
+#define YYTRANSLATE(YYX)                                                \
+  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex.  */
+static const yytype_int8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,    16,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    15,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,    17,     2,    14,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    12,     2,    13,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11
+};
+
+#if PHP_JSON_YYDEBUG
+  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+static const yytype_uint8 yyrline[] =
+{
+       0,    79,    79,    89,    88,   106,   107,   115,   123,   127,
+     134,   145,   144,   162,   163,   171,   179,   183,   188,   196,
+     197,   201,   202,   203,   204,   205,   206,   207,   208,   209
+};
+#endif
+
+#if PHP_JSON_YYDEBUG || YYERROR_VERBOSE || 0
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "PHP_JSON_T_NUL", "PHP_JSON_T_TRUE",
+  "PHP_JSON_T_FALSE", "PHP_JSON_T_INT", "PHP_JSON_T_DOUBLE",
+  "PHP_JSON_T_STRING", "PHP_JSON_T_ESTRING", "PHP_JSON_T_EOI",
+  "PHP_JSON_T_ERROR", "'{'", "'}'", "']'", "':'", "','", "'['", "$accept",
+  "start", "object", "$@1", "object_end", "members", "member", "array",
+  "$@2", "array_end", "elements", "element", "key", "value", YY_NULLPTR
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[NUM] -- (External) token number corresponding to the
+   (internal) symbol number NUM (which must be that of a token).  */
+static const yytype_int16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   123,   125,    93,    58,    44,    91
+};
+# endif
+
+#define YYPACT_NINF (-16)
+
+#define yypact_value_is_default(Yyn) \
+  ((Yyn) == YYPACT_NINF)
+
+#define YYTABLE_NINF (-1)
+
+#define yytable_value_is_error(Yyn) \
+  0
+
+  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+     STATE-NUM.  */
+static const yytype_int8 yypact[] =
+{
+      -1,   -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,
+      12,   -16,   -16,    -9,     1,    -1,   -16,   -16,   -16,   -16,
+       0,     5,     7,     4,     8,   -16,   -16,   -16,   -16,     1,
+      -1,   -16,   -16,   -16,    -1,    10,   -16,   -16,    -1,   -16
+};
+
+  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+     Performed when YYTABLE does not specify something else to do.  Zero
+     means the default is an error.  */
+static const yytype_int8 yydefact[] =
+{
+       0,    27,    28,    29,    25,    26,    23,    24,     3,    11,
+       0,    21,    22,     0,     7,    15,     1,     2,    19,    20,
+       0,     8,     0,     0,    16,    17,     5,     6,     4,     0,
+       0,    14,    13,    12,     0,     0,     9,    18,     0,    10
+};
+
+  /* YYPGOTO[NTERM-NUM].  */
+static const yytype_int8 yypgoto[] =
+{
+     -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,
+     -16,   -16,    -3,   -15
+};
+
+  /* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int8 yydefgoto[] =
+{
+      -1,    10,    11,    14,    28,    20,    21,    12,    15,    33,
+      23,    24,    22,    13
+};
+
+  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+     positive, shift that token.  If negative, reduce the rule whose
+     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+static const yytype_int8 yytable[] =
+{
+      25,    17,     1,     2,     3,     4,     5,     6,     7,    18,
+      19,     8,    16,    26,    27,    36,     9,    31,    32,    37,
+       0,    29,    30,    39,    34,    38,    35
+};
+
+static const yytype_int8 yycheck[] =
+{
+      15,    10,     3,     4,     5,     6,     7,     8,     9,     8,
+       9,    12,     0,    13,    14,    30,    17,    13,    14,    34,
+      -1,    16,    15,    38,    16,    15,    29
+};
+
+  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+     symbol of state STATE-NUM.  */
+static const yytype_int8 yystos[] =
+{
+       0,     3,     4,     5,     6,     7,     8,     9,    12,    17,
+      19,    20,    25,    31,    21,    26,     0,    10,     8,     9,
+      23,    24,    30,    28,    29,    31,    13,    14,    22,    16,
+      15,    13,    14,    27,    16,    30,    31,    31,    15,    31
+};
+
+  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_int8 yyr1[] =
+{
+       0,    18,    19,    21,    20,    22,    22,    23,    23,    24,
+      24,    26,    25,    27,    27,    28,    28,    29,    29,    30,
+      30,    31,    31,    31,    31,    31,    31,    31,    31,    31
+};
+
+  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+static const yytype_int8 yyr2[] =
+{
+       0,     2,     2,     0,     4,     1,     1,     0,     1,     3,
+       5,     0,     4,     1,     1,     0,     1,     1,     3,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1
+};
+
+
+#define yyerrok         (yyerrstatus = 0)
+#define yyclearin       (yychar = YYEMPTY)
+#define YYEMPTY         (-2)
+#define YYEOF           0
+
+#define YYACCEPT        goto yyacceptlab
+#define YYABORT         goto yyabortlab
+#define YYERROR         goto yyerrorlab
+
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)                                    \
+  do                                                              \
+    if (yychar == YYEMPTY)                                        \
+      {                                                           \
+        yychar = (Token);                                         \
+        yylval = (Value);                                         \
+        YYPOPSTACK (yylen);                                       \
+        yystate = *yyssp;                                         \
+        goto yybackup;                                            \
+      }                                                           \
+    else                                                          \
+      {                                                           \
+        yyerror (parser, YY_("syntax error: cannot back up")); \
+        YYERROR;                                                  \
+      }                                                           \
+  while (0)
+
+/* Error token number */
+#define YYTERROR        1
+#define YYERRCODE       256
+
+
+
+/* Enable debugging if requested.  */
+#if PHP_JSON_YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)                        \
+do {                                            \
+  if (yydebug)                                  \
+    YYFPRINTF Args;                             \
+} while (0)
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
+do {                                                                      \
+  if (yydebug)                                                            \
+    {                                                                     \
+      YYFPRINTF (stderr, "%s ", Title);                                   \
+      yy_symbol_print (stderr,                                            \
+                  Type, Value, parser); \
+      YYFPRINTF (stderr, "\n");                                           \
+    }                                                                     \
+} while (0)
+
+
+/*-----------------------------------.
+| Print this symbol's value on YYO.  |
+`-----------------------------------*/
+
+static void
+yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, php_json_parser *parser)
+{
+  FILE *yyoutput = yyo;
+  YYUSE (yyoutput);
+  YYUSE (parser);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
+# endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+/*---------------------------.
+| Print this symbol on YYO.  |
+`---------------------------*/
+
+static void
+yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, php_json_parser *parser)
+{
+  YYFPRINTF (yyo, "%s %s (",
+             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
+
+  yy_symbol_value_print (yyo, yytype, yyvaluep, parser);
+  YYFPRINTF (yyo, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+static void
+yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)                            \
+do {                                                            \
+  if (yydebug)                                                  \
+    yy_stack_print ((Bottom), (Top));                           \
+} while (0)
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+static void
+yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule, php_json_parser *parser)
+{
+  int yylno = yyrline[yyrule];
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
+             yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr,
+                       yystos[+yyssp[yyi + 1 - yynrhs]],
+                       &yyvsp[(yyi + 1) - (yynrhs)]
+                                              , parser);
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)          \
+do {                                    \
+  if (yydebug)                          \
+    yy_reduce_print (yyssp, yyvsp, Rule, parser); \
+} while (0)
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !PHP_JSON_YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !PHP_JSON_YYDEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
+#  else
+/* Return the length of YYSTR.  */
+static YYPTRDIFF_T
+yystrlen (const char *yystr)
+{
+  YYPTRDIFF_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYPTRDIFF_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYPTRDIFF_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+        switch (*++yyp)
+          {
+          case '\'':
+          case ',':
+            goto do_not_strip_quotes;
+
+          case '\\':
+            if (*++yyp != '\\')
+              goto do_not_strip_quotes;
+            else
+              goto append;
+
+          append:
+          default:
+            if (yyres)
+              yyres[yyn] = *yyp;
+            yyn++;
+            break;
+
+          case '"':
+            if (yyres)
+              yyres[yyn] = '\0';
+            return yyn;
+          }
+    do_not_strip_quotes: ;
+    }
+
+  if (yyres)
+    return yystpcpy (yyres, yystr) - yyres;
+  else
+    return yystrlen (yystr);
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
+                yy_state_t *yyssp, int yytoken)
+{
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULLPTR;
+  /* Arguments of yyformat: reported tokens (one for the "unexpected",
+     one per "expected"). */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Actual size of YYARG. */
+  int yycount = 0;
+  /* Cumulated lengths of YYARG.  */
+  YYPTRDIFF_T yysize = 0;
+
+  /* There are many possibilities here to consider:
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[+*yyssp];
+      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+      yysize = yysize0;
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYPTRDIFF_T yysize1
+                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+                    yysize = yysize1;
+                  else
+                    return 2;
+                }
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+    default: /* Avoid compiler warnings. */
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    /* Don't count the "%s"s in the final size, but reserve room for
+       the terminator.  */
+    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
+    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+      yysize = yysize1;
+    else
+      return 2;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          ++yyp;
+          ++yyformat;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, php_json_parser *parser)
+{
+  YYUSE (yyvaluep);
+  YYUSE (parser);
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  switch (yytype)
+    {
+    case 3: /* PHP_JSON_T_NUL  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 4: /* PHP_JSON_T_TRUE  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 5: /* PHP_JSON_T_FALSE  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 6: /* PHP_JSON_T_INT  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 7: /* PHP_JSON_T_DOUBLE  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 8: /* PHP_JSON_T_STRING  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 9: /* PHP_JSON_T_ESTRING  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 19: /* start  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 20: /* object  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 23: /* members  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 24: /* member  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 25: /* array  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 28: /* elements  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 29: /* element  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 30: /* key  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+    case 31: /* value  */
+            { zval_ptr_dtor_nogc(&((*yyvaluep).value)); }
+        break;
+
+      default:
+        break;
+    }
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+int
+yyparse (php_json_parser *parser)
+{
+/* The lookahead symbol.  */
+int yychar;
+
+
+/* The semantic value of the lookahead symbol.  */
+/* Default value used for initialization, for pacifying older GCCs
+   or non-GCC compilers.  */
+YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
+YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
+
+    /* Number of syntax errors so far.  */
+    int yynerrs;
+
+    yy_state_fast_t yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       'yyss': related to states.
+       'yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yy_state_t yyssa[YYINITDEPTH];
+    yy_state_t *yyss;
+    yy_state_t *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYPTRDIFF_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
+
+
+/*------------------------------------------------------------.
+| yynewstate -- push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+
+/*--------------------------------------------------------------------.
+| yysetstate -- set current state (the top of the stack) to yystate.  |
+`--------------------------------------------------------------------*/
+yysetstate:
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
+  YY_IGNORE_USELESS_CAST_BEGIN
+  *yyssp = YY_CAST (yy_state_t, yystate);
+  YY_IGNORE_USELESS_CAST_END
+
+  if (yyss + yystacksize - 1 <= yyssp)
+#if !defined yyoverflow && !defined YYSTACK_RELOCATE
+    goto yyexhaustedlab;
+#else
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYPTRDIFF_T yysize = yyssp - yyss + 1;
+
+# if defined yyoverflow
+      {
+        /* Give user a chance to reallocate the stack.  Use copies of
+           these so that the &'s don't force the real ones into
+           memory.  */
+        yy_state_t *yyss1 = yyss;
+        YYSTYPE *yyvs1 = yyvs;
+
+        /* Each stack pointer address is followed by the size of the
+           data in use in that stack, in bytes.  This used to be a
+           conditional around just the two extra args, but that might
+           be undefined if yyoverflow is a macro.  */
+        yyoverflow (YY_("memory exhausted"),
+                    &yyss1, yysize * YYSIZEOF (*yyssp),
+                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
+                    &yystacksize);
+        yyss = yyss1;
+        yyvs = yyvs1;
+      }
+# else /* defined YYSTACK_RELOCATE */
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+        goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+        yystacksize = YYMAXDEPTH;
+
+      {
+        yy_state_t *yyss1 = yyss;
+        union yyalloc *yyptr =
+          YY_CAST (union yyalloc *,
+                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
+        if (! yyptr)
+          goto yyexhaustedlab;
+        YYSTACK_RELOCATE (yyss_alloc, yyss);
+        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+# undef YYSTACK_RELOCATE
+        if (yyss1 != yyssa)
+          YYSTACK_FREE (yyss1);
+      }
+# endif
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YY_IGNORE_USELESS_CAST_BEGIN
+      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
+                  YY_CAST (long, yystacksize)));
+      YY_IGNORE_USELESS_CAST_END
+
+      if (yyss + yystacksize - 1 <= yyssp)
+        YYABORT;
+    }
+#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = yylex (&yylval, parser);
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     '$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+  case 2:
+                        {
+				ZVAL_COPY_VALUE(&(yyval.value), &(yyvsp[-1].value));
+				ZVAL_COPY_VALUE(parser->return_value, &(yyvsp[-1].value));
+				YYACCEPT;
+			}
+    break;
+
+  case 3:
+                        {
+				PHP_JSON_DEPTH_INC;
+				if (parser->methods.object_start && FAILURE == parser->methods.object_start(parser)) {
+					YYERROR;
+				}
+			}
+    break;
+
+  case 4:
+                        {
+				ZVAL_COPY_VALUE(&(yyval.value), &(yyvsp[-1].value));
+				PHP_JSON_DEPTH_DEC;
+				if (parser->methods.object_end && FAILURE == parser->methods.object_end(parser, &(yyval.value))) {
+					YYERROR;
+				}
+			}
+    break;
+
+  case 6:
+                        {
+				parser->scanner.errcode = PHP_JSON_ERROR_STATE_MISMATCH;
+				YYERROR;
+			}
+    break;
+
+  case 7:
+                        {
+				if ((parser->scanner.options & PHP_JSON_OBJECT_AS_ARRAY) && parser->methods.object_create == php_json_parser_object_create) {
+					ZVAL_EMPTY_ARRAY(&(yyval.value));
+				} else {
+					parser->methods.object_create(parser, &(yyval.value));
+				}
+			}
+    break;
+
+  case 9:
+                        {
+				parser->methods.object_create(parser, &(yyval.value));
+				if (parser->methods.object_update(parser, &(yyval.value), Z_STR((yyvsp[-2].value)), &(yyvsp[0].value)) == FAILURE) {
+					YYERROR;
+				}
+			}
+    break;
+
+  case 10:
+                        {
+				if (parser->methods.object_update(parser, &(yyvsp[-4].value), Z_STR((yyvsp[-2].value)), &(yyvsp[0].value)) == FAILURE) {
+					YYERROR;
+				}
+				ZVAL_COPY_VALUE(&(yyval.value), &(yyvsp[-4].value));
+			}
+    break;
+
+  case 11:
+                        {
+				PHP_JSON_DEPTH_INC;
+				if (parser->methods.array_start && FAILURE == parser->methods.array_start(parser)) {
+					YYERROR;
+				}
+			}
+    break;
+
+  case 12:
+                        {
+				ZVAL_COPY_VALUE(&(yyval.value), &(yyvsp[-1].value));
+				PHP_JSON_DEPTH_DEC;
+				if (parser->methods.array_end && FAILURE == parser->methods.array_end(parser, &(yyval.value))) {
+					YYERROR;
+				}
+			}
+    break;
+
+  case 14:
+                        {
+				parser->scanner.errcode = PHP_JSON_ERROR_STATE_MISMATCH;
+				YYERROR;
+			}
+    break;
+
+  case 15:
+                        {
+				if (parser->methods.array_create == php_json_parser_array_create) {
+					ZVAL_EMPTY_ARRAY(&(yyval.value));
+				} else {
+					parser->methods.array_create(parser, &(yyval.value));
+				}
+			}
+    break;
+
+  case 17:
+                        {
+				parser->methods.array_create(parser, &(yyval.value));
+				parser->methods.array_append(parser, &(yyval.value), &(yyvsp[0].value));
+			}
+    break;
+
+  case 18:
+                        {
+				parser->methods.array_append(parser, &(yyvsp[-2].value), &(yyvsp[0].value));
+				ZVAL_COPY_VALUE(&(yyval.value), &(yyvsp[-2].value));
+			}
+    break;
+
+
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now 'shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+  {
+    const int yylhs = yyr1[yyn] - YYNTOKENS;
+    const int yyi = yypgoto[yylhs] + *yyssp;
+    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
+               ? yytable[yyi]
+               : yydefgoto[yylhs]);
+  }
+
+  goto yynewstate;
+
+
+/*--------------------------------------.
+| yyerrlab -- here on detecting error.  |
+`--------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (parser, YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (parser, yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+         error, discard it.  */
+
+      if (yychar <= YYEOF)
+        {
+          /* Return failure if at end of input.  */
+          if (yychar == YYEOF)
+            YYABORT;
+        }
+      else
+        {
+          yydestruct ("Error: discarding",
+                      yytoken, &yylval, parser);
+          yychar = YYEMPTY;
+        }
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+  /* Pacify compilers when the user code never invokes YYERROR and the
+     label yyerrorlab therefore never appears in user code.  */
+  if (0)
+    YYERROR;
+
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+        {
+          yyn += YYTERROR;
+          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+            {
+              yyn = yytable[yyn];
+              if (0 < yyn)
+                break;
+            }
+        }
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+        YYABORT;
+
+
+      yydestruct ("Error: popping",
+                  yystos[yystate], yyvsp, parser);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (parser, YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+
+/*-----------------------------------------------------.
+| yyreturn -- parsing is finished, return the result.  |
+`-----------------------------------------------------*/
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval, parser);
+    }
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+                  yystos[+*yyssp], yyvsp, parser);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  return yyresult;
+}
+ /* Functions */
+
+static int php_json_parser_array_create(php_json_parser *parser, zval *array)
+{
+	array_init(array);
+	return SUCCESS;
+}
+
+static int php_json_parser_array_append(php_json_parser *parser, zval *array, zval *zvalue)
+{
+	zend_hash_next_index_insert(Z_ARRVAL_P(array), zvalue);
+	return SUCCESS;
+}
+
+static int php_json_parser_object_create(php_json_parser *parser, zval *object)
+{
+	if (parser->scanner.options & PHP_JSON_OBJECT_AS_ARRAY) {
+		array_init(object);
+	} else {
+		object_init(object);
+	}
+	return SUCCESS;
+}
+
+static int php_json_parser_object_update(php_json_parser *parser, zval *object, zend_string *key, zval *zvalue)
+{
+	/* if JSON_OBJECT_AS_ARRAY is set */
+	if (Z_TYPE_P(object) == IS_ARRAY) {
+		zend_symtable_update(Z_ARRVAL_P(object), key, zvalue);
+	} else {
+		if (ZSTR_LEN(key) > 0 && ZSTR_VAL(key)[0] == '\0') {
+			parser->scanner.errcode = PHP_JSON_ERROR_INVALID_PROPERTY_NAME;
+			zend_string_release_ex(key, 0);
+			zval_ptr_dtor_nogc(zvalue);
+			zval_ptr_dtor_nogc(object);
+			return FAILURE;
+		}
+		zend_std_write_property(Z_OBJ_P(object), key, zvalue, NULL);
+		Z_TRY_DELREF_P(zvalue);
+	}
+	zend_string_release_ex(key, 0);
+
+	return SUCCESS;
+}
+
+static int php_json_yylex(union YYSTYPE *value, php_json_parser *parser)
+{
+	int token = php_json_scan(&parser->scanner);
+	value->value = parser->scanner.value;
+	return token;
+}
+
+static void php_json_yyerror(php_json_parser *parser, char const *msg)
+{
+	if (!parser->scanner.errcode) {
+		parser->scanner.errcode = PHP_JSON_ERROR_SYNTAX;
+	}
+}
+
+PHP_JSON_API php_json_error_code php_json_parser_error_code(const php_json_parser *parser)
+{
+	return parser->scanner.errcode;
+}
+
+static const php_json_parser_methods default_parser_methods =
+{
+	php_json_parser_array_create,
+	php_json_parser_array_append,
+	NULL,
+	NULL,
+	php_json_parser_object_create,
+	php_json_parser_object_update,
+	NULL,
+	NULL,
+};
+
+PHP_JSON_API void php_json_parser_init_ex(php_json_parser *parser,
+		zval *return_value,
+		const char *str,
+		size_t str_len,
+		int options,
+		int max_depth,
+		const php_json_parser_methods *parser_methods)
+{
+	memset(parser, 0, sizeof(php_json_parser));
+	php_json_scanner_init(&parser->scanner, str, str_len, options);
+	parser->depth = 1;
+	parser->max_depth = max_depth;
+	parser->return_value = return_value;
+	memcpy(&parser->methods, parser_methods, sizeof(php_json_parser_methods));
+}
+
+PHP_JSON_API void php_json_parser_init(php_json_parser *parser,
+		zval *return_value,
+		const char *str,
+		size_t str_len,
+		int options,
+		int max_depth)
+{
+	php_json_parser_init_ex(
+			parser,
+			return_value,
+			str,
+			str_len,
+			options,
+			max_depth,
+			&default_parser_methods);
+}
+
+PHP_JSON_API int php_json_parse(php_json_parser *parser)
+{
+	return php_json_yyparse(parser);
+}
diff --git a/ext/json/json_scanner.c b/ext/json/json_scanner.c
new file mode 100644
index 0000000000..e8e9c1e37c
--- /dev/null
+++ b/ext/json/json_scanner.c
@@ -0,0 +1,1658 @@
+/* Generated by re2c 1.3 */
+/*
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author: Jakub Zelenka <bukka@php.net>                                |
+  +----------------------------------------------------------------------+
+*/
+
+#include "php.h"
+#include "php_json_scanner.h"
+#include "php_json_scanner_defs.h"
+#include "php_json_parser.h"
+#include "json_parser.tab.h"
+
+#define	YYCTYPE     php_json_ctype
+#define	YYCURSOR    s->cursor
+#define	YYLIMIT     s->limit
+#define	YYMARKER    s->marker
+#define	YYCTXMARKER s->ctxmarker
+
+#define YYGETCONDITION()        s->state
+#define YYSETCONDITION(yystate) s->state = yystate
+
+#define	YYFILL(n)
+
+#define PHP_JSON_CONDITION_SET(condition) YYSETCONDITION(yyc##condition)
+#define PHP_JSON_CONDITION_GOTO(condition) goto yyc_##condition
+#define PHP_JSON_CONDITION_SET_AND_GOTO(condition) \
+	PHP_JSON_CONDITION_SET(condition); \
+	PHP_JSON_CONDITION_GOTO(condition)
+#define PHP_JSON_CONDITION_GOTO_STR_P2() \
+	do { \
+		if (s->utf8_invalid) { \
+			PHP_JSON_CONDITION_GOTO(STR_P2_BIN); \
+		} else { \
+			PHP_JSON_CONDITION_GOTO(STR_P2_UTF); \
+		} \
+	} while(0)
+
+
+#define PHP_JSON_SCANNER_COPY_ESC() php_json_scanner_copy_string(s, 0)
+#define PHP_JSON_SCANNER_COPY_UTF() php_json_scanner_copy_string(s, 5)
+#define PHP_JSON_SCANNER_COPY_UTF_SP() php_json_scanner_copy_string(s, 11)
+
+#define PHP_JSON_INT_MAX_LENGTH (MAX_LENGTH_OF_LONG - 1)
+
+
+static void php_json_scanner_copy_string(php_json_scanner *s, int esc_size)
+{
+	size_t len = s->cursor - s->str_start - esc_size - 1;
+	if (len) {
+		memcpy(s->pstr, s->str_start, len);
+		s->pstr += len;
+	}
+}
+
+static int php_json_hex_to_int(char code)
+{
+	if (code >= '0' && code <= '9') {
+		return code - '0';
+	} else if (code >= 'A' && code <= 'F') {
+		return code - ('A' - 10);
+	} else if (code >= 'a' && code <= 'f') {
+		return code - ('a' - 10);
+	} else {
+		/* this should never happened (just to suppress compiler warning) */
+		return -1;
+	}
+}
+
+static int php_json_ucs2_to_int_ex(php_json_scanner *s, int size, int start)
+{
+	int i, code = 0;
+	php_json_ctype *pc = s->cursor - start;
+	for (i = 0; i < size; i++) {
+		code |= php_json_hex_to_int(*(pc--)) << (i * 4);
+	}
+	return code;
+}
+
+static int php_json_ucs2_to_int(php_json_scanner *s, int size)
+{
+	return php_json_ucs2_to_int_ex(s, size, 1);
+}
+
+void php_json_scanner_init(php_json_scanner *s, const char *str, size_t str_len, int options)
+{
+	s->cursor = (php_json_ctype *) str;
+	s->limit = (php_json_ctype *) str + str_len;
+	s->options = options;
+	PHP_JSON_CONDITION_SET(JS);
+}
+
+int php_json_scan(php_json_scanner *s)
+{
+	ZVAL_NULL(&s->value);
+
+std:
+	s->token = s->cursor;
+
+
+	{
+		YYCTYPE yych;
+		unsigned int yyaccept = 0;
+		if (YYGETCONDITION() < 2) {
+			if (YYGETCONDITION() < 1) {
+				goto yyc_JS;
+			} else {
+				goto yyc_STR_P1;
+			}
+		} else {
+			if (YYGETCONDITION() < 3) {
+				goto yyc_STR_P2_BIN;
+			} else {
+				goto yyc_STR_P2_UTF;
+			}
+		}
+/* *********************************** */
+yyc_JS:
+		{
+			static const unsigned char yybm[] = {
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,  64,   0,   0,   0,  64,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				 64,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				128, 128, 128, 128, 128, 128, 128, 128, 
+				128, 128,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+				  0,   0,   0,   0,   0,   0,   0,   0, 
+			};
+			yych = *YYCURSOR;
+			if (yych <= ']') {
+				if (yych <= '"') {
+					if (yych <= '\f') {
+						if (yych <= 0x08) {
+							if (yych >= 0x01) goto yy5;
+						} else {
+							if (yych <= '\t') goto yy7;
+							if (yych <= '\n') goto yy10;
+							goto yy5;
+						}
+					} else {
+						if (yych <= 0x1F) {
+							if (yych <= '\r') goto yy11;
+							goto yy5;
+						} else {
+							if (yych <= ' ') goto yy7;
+							if (yych <= '!') goto yy12;
+							goto yy14;
+						}
+					}
+				} else {
+					if (yych <= '0') {
+						if (yych <= ',') {
+							if (yych <= '+') goto yy12;
+							goto yy16;
+						} else {
+							if (yych <= '-') goto yy18;
+							if (yych <= '/') goto yy12;
+							goto yy19;
+						}
+					} else {
+						if (yych <= 'Z') {
+							if (yych <= '9') goto yy21;
+							if (yych <= ':') goto yy23;
+							goto yy12;
+						} else {
+							if (yych <= '[') goto yy25;
+							if (yych <= '\\') goto yy12;
+							goto yy27;
+						}
+					}
+				}
+			} else {
+				if (yych <= '}') {
+					if (yych <= 's') {
+						if (yych <= 'f') {
+							if (yych <= 'e') goto yy12;
+							goto yy29;
+						} else {
+							if (yych == 'n') goto yy30;
+							goto yy12;
+						}
+					} else {
+						if (yych <= 'z') {
+							if (yych <= 't') goto yy31;
+							goto yy12;
+						} else {
+							if (yych <= '{') goto yy32;
+							if (yych <= '|') goto yy12;
+							goto yy34;
+						}
+					}
+				} else {
+					if (yych <= 0xEC) {
+						if (yych <= 0xC1) {
+							if (yych <= 0x7F) goto yy12;
+							goto yy36;
+						} else {
+							if (yych <= 0xDF) goto yy38;
+							if (yych <= 0xE0) goto yy39;
+							goto yy40;
+						}
+					} else {
+						if (yych <= 0xF0) {
+							if (yych <= 0xED) goto yy41;
+							if (yych <= 0xEF) goto yy40;
+							goto yy42;
+						} else {
+							if (yych <= 0xF3) goto yy43;
+							if (yych <= 0xF4) goto yy44;
+							goto yy36;
+						}
+					}
+				}
+			}
+			++YYCURSOR;
+			{
+		if (s->limit < s->cursor) {
+			return PHP_JSON_T_EOI;
+		} else {
+			s->errcode = PHP_JSON_ERROR_CTRL_CHAR;
+			return PHP_JSON_T_ERROR;
+		}
+	}
+yy5:
+			++YYCURSOR;
+			{
+		s->errcode = PHP_JSON_ERROR_CTRL_CHAR;
+		return PHP_JSON_T_ERROR;
+	}
+yy7:
+			yych = *++YYCURSOR;
+yy8:
+			if (yybm[0+yych] & 64) {
+				goto yy7;
+			}
+yy9:
+			{ goto std; }
+yy10:
+			++YYCURSOR;
+			goto yy9;
+yy11:
+			yych = *++YYCURSOR;
+			if (yych == '\n') goto yy10;
+			goto yy8;
+yy12:
+			++YYCURSOR;
+yy13:
+			{
+		s->errcode = PHP_JSON_ERROR_SYNTAX;
+		return PHP_JSON_T_ERROR;
+	}
+yy14:
+			++YYCURSOR;
+			{
+		s->str_start = s->cursor;
+		s->str_esc = 0;
+		s->utf8_invalid = 0;
+		s->utf8_invalid_count = 0;
+		PHP_JSON_CONDITION_SET_AND_GOTO(STR_P1);
+	}
+yy16:
+			++YYCURSOR;
+			{ return ','; }
+yy18:
+			yych = *++YYCURSOR;
+			if (yych <= '/') goto yy13;
+			if (yych <= '0') goto yy19;
+			if (yych <= '9') goto yy21;
+			goto yy13;
+yy19:
+			yyaccept = 0;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 'D') {
+				if (yych == '.') goto yy45;
+			} else {
+				if (yych <= 'E') goto yy47;
+				if (yych == 'e') goto yy47;
+			}
+yy20:
+			{
+		bool bigint = 0, negative = s->token[0] == '-';
+		size_t digits = (size_t) (s->cursor - s->token - negative);
+		if (digits >= PHP_JSON_INT_MAX_LENGTH) {
+			if (digits == PHP_JSON_INT_MAX_LENGTH) {
+				int cmp = strncmp((char *) (s->token + negative), LONG_MIN_DIGITS, PHP_JSON_INT_MAX_LENGTH);
+				if (!(cmp < 0 || (cmp == 0 && negative))) {
+					bigint = 1;
+				}
+			} else {
+				bigint = 1;
+			}
+		}
+		if (!bigint) {
+			ZVAL_LONG(&s->value, ZEND_STRTOL((char *) s->token, NULL, 10));
+			return PHP_JSON_T_INT;
+		} else if (s->options & PHP_JSON_BIGINT_AS_STRING) {
+			ZVAL_STRINGL(&s->value, (char *) s->token, s->cursor - s->token);
+			return PHP_JSON_T_STRING;
+		} else {
+			ZVAL_DOUBLE(&s->value, zend_strtod((char *) s->token, NULL));
+			return PHP_JSON_T_DOUBLE;
+		}
+	}
+yy21:
+			yyaccept = 0;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yybm[0+yych] & 128) {
+				goto yy21;
+			}
+			if (yych <= 'D') {
+				if (yych == '.') goto yy45;
+				goto yy20;
+			} else {
+				if (yych <= 'E') goto yy47;
+				if (yych == 'e') goto yy47;
+				goto yy20;
+			}
+yy23:
+			++YYCURSOR;
+			{ return ':'; }
+yy25:
+			++YYCURSOR;
+			{ return '['; }
+yy27:
+			++YYCURSOR;
+			{ return ']'; }
+yy29:
+			yyaccept = 1;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych == 'a') goto yy48;
+			goto yy13;
+yy30:
+			yyaccept = 1;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych == 'u') goto yy49;
+			goto yy13;
+yy31:
+			yyaccept = 1;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych == 'r') goto yy50;
+			goto yy13;
+yy32:
+			++YYCURSOR;
+			{ return '{'; }
+yy34:
+			++YYCURSOR;
+			{ return '}'; }
+yy36:
+			++YYCURSOR;
+yy37:
+			{
+		s->errcode = PHP_JSON_ERROR_UTF8;
+		return PHP_JSON_T_ERROR;
+	}
+yy38:
+			yych = *++YYCURSOR;
+			if (yych <= 0x7F) goto yy37;
+			if (yych <= 0xBF) goto yy12;
+			goto yy37;
+yy39:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x9F) goto yy37;
+			if (yych <= 0xBF) goto yy51;
+			goto yy37;
+yy40:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x7F) goto yy37;
+			if (yych <= 0xBF) goto yy51;
+			goto yy37;
+yy41:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x7F) goto yy37;
+			if (yych <= 0x9F) goto yy51;
+			goto yy37;
+yy42:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x8F) goto yy37;
+			if (yych <= 0xBF) goto yy52;
+			goto yy37;
+yy43:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x7F) goto yy37;
+			if (yych <= 0xBF) goto yy52;
+			goto yy37;
+yy44:
+			yyaccept = 2;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 0x7F) goto yy37;
+			if (yych <= 0x8F) goto yy52;
+			goto yy37;
+yy45:
+			yych = *++YYCURSOR;
+			if (yych <= '/') goto yy46;
+			if (yych <= '9') goto yy53;
+yy46:
+			YYCURSOR = YYMARKER;
+			if (yyaccept <= 1) {
+				if (yyaccept == 0) {
+					goto yy20;
+				} else {
+					goto yy13;
+				}
+			} else {
+				if (yyaccept == 2) {
+					goto yy37;
+				} else {
+					goto yy55;
+				}
+			}
+yy47:
+			yych = *++YYCURSOR;
+			if (yych <= ',') {
+				if (yych == '+') goto yy56;
+				goto yy46;
+			} else {
+				if (yych <= '-') goto yy56;
+				if (yych <= '/') goto yy46;
+				if (yych <= '9') goto yy57;
+				goto yy46;
+			}
+yy48:
+			yych = *++YYCURSOR;
+			if (yych == 'l') goto yy59;
+			goto yy46;
+yy49:
+			yych = *++YYCURSOR;
+			if (yych == 'l') goto yy60;
+			goto yy46;
+yy50:
+			yych = *++YYCURSOR;
+			if (yych == 'u') goto yy61;
+			goto yy46;
+yy51:
+			yych = *++YYCURSOR;
+			if (yych <= 0x7F) goto yy46;
+			if (yych <= 0xBF) goto yy12;
+			goto yy46;
+yy52:
+			yych = *++YYCURSOR;
+			if (yych <= 0x7F) goto yy46;
+			if (yych <= 0xBF) goto yy51;
+			goto yy46;
+yy53:
+			yyaccept = 3;
+			yych = *(YYMARKER = ++YYCURSOR);
+			if (yych <= 'D') {
+				if (yych <= '/') goto yy55;
+				if (yych <= '9') goto yy53;
+			} else {
+				if (yych <= 'E') goto yy47;
+				if (yych == 'e') goto yy47;
+			}
+yy55:
+			{
+		ZVAL_DOUBLE(&s->value, zend_strtod((char *) s->token, NULL));
+		return PHP_JSON_T_DOUBLE;
+	}
+yy56:
+			yych = *++YYCURSOR;
+			if (yych <= '/') goto yy46;
+			if (yych >= ':') goto yy46;
+yy57:
+			yych = *++YYCURSOR;
+			if (yych <= '/') goto yy55;
+			if (yych <= '9') goto yy57;
+			goto yy55;
+yy59:
+			yych = *++YYCURSOR;
+			if (yych == 's') goto yy62;
+			goto yy46;
+yy60:
+			yych = *++YYCURSOR;
+			if (yych == 'l') goto yy63;
+			goto yy46;
+yy61:
+			yych = *++YYCURSOR;
+			if (yych == 'e') goto yy65;
+			goto yy46;
+yy62:
+			yych = *++YYCURSOR;
+			if (yych == 'e') goto yy67;
+			goto yy46;
+yy63:
+			++YYCURSOR;
+			{
+		ZVAL_NULL(&s->value);
+		return PHP_JSON_T_NUL;
+	}
+yy65:
+			++YYCURSOR;
+			{
+		ZVAL_TRUE(&s->value);
+		return PHP_JSON_T_TRUE;
+	}
+yy67:
+			++YYCURSOR;
+			{
+		ZVAL_FALSE(&s->value);
+		return PHP_JSON_T_FALSE;
+	}
+		}
+/* *********************************** */
+yyc_STR_P1:
+		yych = *YYCURSOR;
+		if (yych <= 0xDF) {
+			if (yych <= '[') {
+				if (yych <= 0x1F) goto yy71;
+				if (yych == '"') goto yy75;
+				goto yy73;
+			} else {
+				if (yych <= '\\') goto yy77;
+				if (yych <= 0x7F) goto yy73;
+				if (yych <= 0xC1) goto yy79;
+				goto yy81;
+			}
+		} else {
+			if (yych <= 0xEF) {
+				if (yych <= 0xE0) goto yy82;
+				if (yych == 0xED) goto yy84;
+				goto yy83;
+			} else {
+				if (yych <= 0xF0) goto yy85;
+				if (yych <= 0xF3) goto yy86;
+				if (yych <= 0xF4) goto yy87;
+				goto yy79;
+			}
+		}
+yy71:
+		++YYCURSOR;
+		{
+		s->errcode = PHP_JSON_ERROR_CTRL_CHAR;
+		return PHP_JSON_T_ERROR;
+	}
+yy73:
+		++YYCURSOR;
+		{ PHP_JSON_CONDITION_GOTO(STR_P1); }
+yy75:
+		++YYCURSOR;
+		{
+		zend_string *str;
+		size_t len = s->cursor - s->str_start - s->str_esc - 1 + s->utf8_invalid_count;
+		if (len == 0) {
+			PHP_JSON_CONDITION_SET(JS);
+			ZVAL_EMPTY_STRING(&s->value);
+			return PHP_JSON_T_ESTRING;
+		}
+		str = zend_string_alloc(len, 0);
+		ZSTR_VAL(str)[len] = '\0';
+		ZVAL_STR(&s->value, str);
+		if (s->str_esc || s->utf8_invalid) {
+			s->pstr = (php_json_ctype *) Z_STRVAL(s->value);
+			s->cursor = s->str_start;
+			PHP_JSON_CONDITION_GOTO_STR_P2();
+		} else {
+			memcpy(Z_STRVAL(s->value), s->str_start, len);
+			PHP_JSON_CONDITION_SET(JS);
+			return PHP_JSON_T_STRING;
+		}
+	}
+yy77:
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'e') {
+			if (yych <= '/') {
+				if (yych == '"') goto yy88;
+				if (yych >= '/') goto yy88;
+			} else {
+				if (yych <= '\\') {
+					if (yych >= '\\') goto yy88;
+				} else {
+					if (yych == 'b') goto yy88;
+				}
+			}
+		} else {
+			if (yych <= 'q') {
+				if (yych <= 'f') goto yy88;
+				if (yych == 'n') goto yy88;
+			} else {
+				if (yych <= 's') {
+					if (yych <= 'r') goto yy88;
+				} else {
+					if (yych <= 't') goto yy88;
+					if (yych <= 'u') goto yy90;
+				}
+			}
+		}
+yy78:
+		{
+		s->errcode = PHP_JSON_ERROR_SYNTAX;
+		return PHP_JSON_T_ERROR;
+	}
+yy79:
+		++YYCURSOR;
+yy80:
+		{
+		if (s->options & (PHP_JSON_INVALID_UTF8_IGNORE | PHP_JSON_INVALID_UTF8_SUBSTITUTE)) {
+			if (s->options & PHP_JSON_INVALID_UTF8_SUBSTITUTE) {
+				if (s->utf8_invalid_count > INT_MAX - 2) {
+					s->errcode = PHP_JSON_ERROR_UTF8;
+					return PHP_JSON_T_ERROR;
+				}
+				s->utf8_invalid_count += 2;
+			} else {
+				s->utf8_invalid_count--;
+			}
+			s->utf8_invalid = 1;
+			PHP_JSON_CONDITION_GOTO(STR_P1);
+		}
+		s->errcode = PHP_JSON_ERROR_UTF8;
+		return PHP_JSON_T_ERROR;
+	}
+yy81:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy80;
+		if (yych <= 0xBF) goto yy73;
+		goto yy80;
+yy82:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x9F) goto yy80;
+		if (yych <= 0xBF) goto yy92;
+		goto yy80;
+yy83:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy80;
+		if (yych <= 0xBF) goto yy92;
+		goto yy80;
+yy84:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy80;
+		if (yych <= 0x9F) goto yy92;
+		goto yy80;
+yy85:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x8F) goto yy80;
+		if (yych <= 0xBF) goto yy93;
+		goto yy80;
+yy86:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy80;
+		if (yych <= 0xBF) goto yy93;
+		goto yy80;
+yy87:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy80;
+		if (yych <= 0x8F) goto yy93;
+		goto yy80;
+yy88:
+		++YYCURSOR;
+		{
+		s->str_esc++;
+		PHP_JSON_CONDITION_GOTO(STR_P1);
+	}
+yy90:
+		yych = *++YYCURSOR;
+		if (yych <= 'D') {
+			if (yych <= '9') {
+				if (yych <= '/') goto yy91;
+				if (yych <= '0') goto yy94;
+				goto yy95;
+			} else {
+				if (yych <= '@') goto yy91;
+				if (yych <= 'C') goto yy95;
+				goto yy96;
+			}
+		} else {
+			if (yych <= 'c') {
+				if (yych <= 'F') goto yy95;
+				if (yych >= 'a') goto yy95;
+			} else {
+				if (yych <= 'd') goto yy96;
+				if (yych <= 'f') goto yy95;
+			}
+		}
+yy91:
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 1) {
+			if (yyaccept == 0) {
+				goto yy78;
+			} else {
+				goto yy80;
+			}
+		} else {
+			goto yy114;
+		}
+yy92:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy91;
+		if (yych <= 0xBF) goto yy73;
+		goto yy91;
+yy93:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy91;
+		if (yych <= 0xBF) goto yy92;
+		goto yy91;
+yy94:
+		yych = *++YYCURSOR;
+		if (yych <= '9') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '0') goto yy97;
+			if (yych <= '7') goto yy98;
+			goto yy99;
+		} else {
+			if (yych <= 'F') {
+				if (yych <= '@') goto yy91;
+				goto yy99;
+			} else {
+				if (yych <= '`') goto yy91;
+				if (yych <= 'f') goto yy99;
+				goto yy91;
+			}
+		}
+yy95:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy99;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy99;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy99;
+			goto yy91;
+		}
+yy96:
+		yych = *++YYCURSOR;
+		if (yych <= 'B') {
+			if (yych <= '7') {
+				if (yych <= '/') goto yy91;
+				goto yy99;
+			} else {
+				if (yych <= '9') goto yy100;
+				if (yych <= '@') goto yy91;
+				goto yy100;
+			}
+		} else {
+			if (yych <= '`') {
+				if (yych <= 'F') goto yy101;
+				goto yy91;
+			} else {
+				if (yych <= 'b') goto yy100;
+				if (yych <= 'f') goto yy101;
+				goto yy91;
+			}
+		}
+yy97:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '7') goto yy102;
+			if (yych <= '9') goto yy103;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy103;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy103;
+			goto yy91;
+		}
+yy98:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy103;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy103;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy103;
+			goto yy91;
+		}
+yy99:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy104;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy104;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy104;
+			goto yy91;
+		}
+yy100:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy105;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy105;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy105;
+			goto yy91;
+		}
+yy101:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy106;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy106;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy106;
+			goto yy91;
+		}
+yy102:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy107;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy107;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy107;
+			goto yy91;
+		}
+yy103:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy109;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy109;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy109;
+			goto yy91;
+		}
+yy104:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy111;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy111;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy111;
+			goto yy91;
+		}
+yy105:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy113;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy113;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy113;
+			goto yy91;
+		}
+yy106:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych <= '9') goto yy115;
+			goto yy91;
+		} else {
+			if (yych <= 'F') goto yy115;
+			if (yych <= '`') goto yy91;
+			if (yych <= 'f') goto yy115;
+			goto yy91;
+		}
+yy107:
+		++YYCURSOR;
+		{
+		s->str_esc += 5;
+		PHP_JSON_CONDITION_GOTO(STR_P1);
+	}
+yy109:
+		++YYCURSOR;
+		{
+		s->str_esc += 4;
+		PHP_JSON_CONDITION_GOTO(STR_P1);
+	}
+yy111:
+		++YYCURSOR;
+		{
+		s->str_esc += 3;
+		PHP_JSON_CONDITION_GOTO(STR_P1);
+	}
+yy113:
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '\\') goto yy116;
+yy114:
+		{
+		s->errcode = PHP_JSON_ERROR_UTF16;
+		return PHP_JSON_T_ERROR;
+	}
+yy115:
+		++YYCURSOR;
+		goto yy114;
+yy116:
+		yych = *++YYCURSOR;
+		if (yych != 'u') goto yy91;
+		yych = *++YYCURSOR;
+		if (yych == 'D') goto yy118;
+		if (yych != 'd') goto yy91;
+yy118:
+		yych = *++YYCURSOR;
+		if (yych <= 'B') goto yy91;
+		if (yych <= 'F') goto yy119;
+		if (yych <= 'b') goto yy91;
+		if (yych >= 'g') goto yy91;
+yy119:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych >= ':') goto yy91;
+		} else {
+			if (yych <= 'F') goto yy120;
+			if (yych <= '`') goto yy91;
+			if (yych >= 'g') goto yy91;
+		}
+yy120:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy91;
+			if (yych >= ':') goto yy91;
+		} else {
+			if (yych <= 'F') goto yy121;
+			if (yych <= '`') goto yy91;
+			if (yych >= 'g') goto yy91;
+		}
+yy121:
+		++YYCURSOR;
+		{
+		s->str_esc += 8;
+		PHP_JSON_CONDITION_GOTO(STR_P1);
+	}
+/* *********************************** */
+yyc_STR_P2_BIN:
+		yych = *YYCURSOR;
+		if (yych <= 0xDF) {
+			if (yych <= '[') {
+				if (yych == '"') goto yy127;
+			} else {
+				if (yych <= '\\') goto yy129;
+				if (yych <= 0x7F) goto yy125;
+				if (yych <= 0xC1) goto yy131;
+				goto yy133;
+			}
+		} else {
+			if (yych <= 0xEF) {
+				if (yych <= 0xE0) goto yy134;
+				if (yych == 0xED) goto yy136;
+				goto yy135;
+			} else {
+				if (yych <= 0xF0) goto yy137;
+				if (yych <= 0xF3) goto yy138;
+				if (yych <= 0xF4) goto yy139;
+				goto yy131;
+			}
+		}
+yy125:
+		++YYCURSOR;
+		{ PHP_JSON_CONDITION_GOTO(STR_P2_BIN); }
+yy127:
+		++YYCURSOR;
+		YYSETCONDITION(yycJS);
+		{
+		PHP_JSON_SCANNER_COPY_ESC();
+		return PHP_JSON_T_STRING;
+	}
+yy129:
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'u') goto yy140;
+yy130:
+		{
+		char esc;
+		PHP_JSON_SCANNER_COPY_ESC();
+		switch (*s->cursor) {
+			case 'b':
+				esc = '\b';
+				break;
+			case 'f':
+				esc = '\f';				break;
+			case 'n':
+				esc = '\n';
+				break;
+			case 'r':
+				esc = '\r';
+				break;
+			case 't':
+				esc = '\t';
+				break;
+			case '\\':
+			case '/':
+			case '"':
+				esc = *s->cursor;
+				break;
+			default:
+				s->errcode = PHP_JSON_ERROR_SYNTAX;
+				return PHP_JSON_T_ERROR;
+		}
+		*(s->pstr++) = esc;
+		++YYCURSOR;
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy131:
+		++YYCURSOR;
+yy132:
+		{
+		if (s->utf8_invalid) {
+			PHP_JSON_SCANNER_COPY_ESC();
+			if (s->options & PHP_JSON_INVALID_UTF8_SUBSTITUTE) {
+				*(s->pstr++) = (char) (0xe0 | (0xfffd >> 12));
+				*(s->pstr++) = (char) (0x80 | ((0xfffd >> 6) & 0x3f));
+				*(s->pstr++) = (char) (0x80 | (0xfffd & 0x3f));
+			}
+			s->str_start = s->cursor;
+		}
+		PHP_JSON_CONDITION_GOTO(STR_P2_BIN);
+	}
+yy133:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy132;
+		if (yych <= 0xBF) goto yy125;
+		goto yy132;
+yy134:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x9F) goto yy132;
+		if (yych <= 0xBF) goto yy142;
+		goto yy132;
+yy135:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy132;
+		if (yych <= 0xBF) goto yy142;
+		goto yy132;
+yy136:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy132;
+		if (yych <= 0x9F) goto yy142;
+		goto yy132;
+yy137:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x8F) goto yy132;
+		if (yych <= 0xBF) goto yy143;
+		goto yy132;
+yy138:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy132;
+		if (yych <= 0xBF) goto yy143;
+		goto yy132;
+yy139:
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x7F) goto yy132;
+		if (yych <= 0x8F) goto yy143;
+		goto yy132;
+yy140:
+		yych = *++YYCURSOR;
+		if (yych <= 'D') {
+			if (yych <= '9') {
+				if (yych <= '/') goto yy141;
+				if (yych <= '0') goto yy144;
+				goto yy145;
+			} else {
+				if (yych <= '@') goto yy141;
+				if (yych <= 'C') goto yy145;
+				goto yy146;
+			}
+		} else {
+			if (yych <= 'c') {
+				if (yych <= 'F') goto yy145;
+				if (yych >= 'a') goto yy145;
+			} else {
+				if (yych <= 'd') goto yy146;
+				if (yych <= 'f') goto yy145;
+			}
+		}
+yy141:
+		YYCURSOR = YYMARKER;
+		if (yyaccept == 0) {
+			goto yy130;
+		} else {
+			goto yy132;
+		}
+yy142:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy141;
+		if (yych <= 0xBF) goto yy125;
+		goto yy141;
+yy143:
+		yych = *++YYCURSOR;
+		if (yych <= 0x7F) goto yy141;
+		if (yych <= 0xBF) goto yy142;
+		goto yy141;
+yy144:
+		yych = *++YYCURSOR;
+		if (yych <= '9') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '0') goto yy147;
+			if (yych <= '7') goto yy148;
+			goto yy149;
+		} else {
+			if (yych <= 'F') {
+				if (yych <= '@') goto yy141;
+				goto yy149;
+			} else {
+				if (yych <= '`') goto yy141;
+				if (yych <= 'f') goto yy149;
+				goto yy141;
+			}
+		}
+yy145:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy149;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy149;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy149;
+			goto yy141;
+		}
+yy146:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '7') goto yy149;
+			if (yych <= '9') goto yy150;
+			goto yy141;
+		} else {
+			if (yych <= 'B') goto yy150;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'b') goto yy150;
+			goto yy141;
+		}
+yy147:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '7') goto yy151;
+			if (yych <= '9') goto yy152;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy152;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy152;
+			goto yy141;
+		}
+yy148:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy152;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy152;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy152;
+			goto yy141;
+		}
+yy149:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy153;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy153;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy153;
+			goto yy141;
+		}
+yy150:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy154;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy154;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy154;
+			goto yy141;
+		}
+yy151:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy155;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy155;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy155;
+			goto yy141;
+		}
+yy152:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy157;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy157;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy157;
+			goto yy141;
+		}
+yy153:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy159;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy159;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy159;
+			goto yy141;
+		}
+yy154:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych <= '9') goto yy161;
+			goto yy141;
+		} else {
+			if (yych <= 'F') goto yy161;
+			if (yych <= '`') goto yy141;
+			if (yych <= 'f') goto yy161;
+			goto yy141;
+		}
+yy155:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 2);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) utf16;
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy157:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 3);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) (0xc0 | (utf16 >> 6));
+		*(s->pstr++) = (char) (0x80 | (utf16 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy159:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 4);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) (0xe0 | (utf16 >> 12));
+		*(s->pstr++) = (char) (0x80 | ((utf16 >> 6) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | (utf16 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy161:
+		yych = *++YYCURSOR;
+		if (yych != '\\') goto yy141;
+		yych = *++YYCURSOR;
+		if (yych != 'u') goto yy141;
+		yych = *++YYCURSOR;
+		if (yych == 'D') goto yy164;
+		if (yych != 'd') goto yy141;
+yy164:
+		yych = *++YYCURSOR;
+		if (yych <= 'B') goto yy141;
+		if (yych <= 'F') goto yy165;
+		if (yych <= 'b') goto yy141;
+		if (yych >= 'g') goto yy141;
+yy165:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych >= ':') goto yy141;
+		} else {
+			if (yych <= 'F') goto yy166;
+			if (yych <= '`') goto yy141;
+			if (yych >= 'g') goto yy141;
+		}
+yy166:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy141;
+			if (yych >= ':') goto yy141;
+		} else {
+			if (yych <= 'F') goto yy167;
+			if (yych <= '`') goto yy141;
+			if (yych >= 'g') goto yy141;
+		}
+yy167:
+		++YYCURSOR;
+		{
+		int utf32, utf16_hi, utf16_lo;
+		utf16_hi = php_json_ucs2_to_int(s, 4);
+		utf16_lo = php_json_ucs2_to_int_ex(s, 4, 7);
+		utf32 = ((utf16_lo & 0x3FF) << 10) + (utf16_hi & 0x3FF) + 0x10000;
+		PHP_JSON_SCANNER_COPY_UTF_SP();
+		*(s->pstr++) = (char) (0xf0 | (utf32 >> 18));
+		*(s->pstr++) = (char) (0x80 | ((utf32 >> 12) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | ((utf32 >> 6) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | (utf32 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+/* *********************************** */
+yyc_STR_P2_UTF:
+		yych = *YYCURSOR;
+		if (yych == '"') goto yy173;
+		if (yych == '\\') goto yy175;
+		++YYCURSOR;
+		{ PHP_JSON_CONDITION_GOTO(STR_P2_UTF); }
+yy173:
+		++YYCURSOR;
+		YYSETCONDITION(yycJS);
+		{
+		PHP_JSON_SCANNER_COPY_ESC();
+		return PHP_JSON_T_STRING;
+	}
+yy175:
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'u') goto yy177;
+yy176:
+		{
+		char esc;
+		PHP_JSON_SCANNER_COPY_ESC();
+		switch (*s->cursor) {
+			case 'b':
+				esc = '\b';
+				break;
+			case 'f':
+				esc = '\f';				break;
+			case 'n':
+				esc = '\n';
+				break;
+			case 'r':
+				esc = '\r';
+				break;
+			case 't':
+				esc = '\t';
+				break;
+			case '\\':
+			case '/':
+			case '"':
+				esc = *s->cursor;
+				break;
+			default:
+				s->errcode = PHP_JSON_ERROR_SYNTAX;
+				return PHP_JSON_T_ERROR;
+		}
+		*(s->pstr++) = esc;
+		++YYCURSOR;
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy177:
+		yych = *++YYCURSOR;
+		if (yych <= 'D') {
+			if (yych <= '9') {
+				if (yych <= '/') goto yy178;
+				if (yych <= '0') goto yy179;
+				goto yy180;
+			} else {
+				if (yych <= '@') goto yy178;
+				if (yych <= 'C') goto yy180;
+				goto yy181;
+			}
+		} else {
+			if (yych <= 'c') {
+				if (yych <= 'F') goto yy180;
+				if (yych >= 'a') goto yy180;
+			} else {
+				if (yych <= 'd') goto yy181;
+				if (yych <= 'f') goto yy180;
+			}
+		}
+yy178:
+		YYCURSOR = YYMARKER;
+		goto yy176;
+yy179:
+		yych = *++YYCURSOR;
+		if (yych <= '9') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '0') goto yy182;
+			if (yych <= '7') goto yy183;
+			goto yy184;
+		} else {
+			if (yych <= 'F') {
+				if (yych <= '@') goto yy178;
+				goto yy184;
+			} else {
+				if (yych <= '`') goto yy178;
+				if (yych <= 'f') goto yy184;
+				goto yy178;
+			}
+		}
+yy180:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy184;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy184;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy184;
+			goto yy178;
+		}
+yy181:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '7') goto yy184;
+			if (yych <= '9') goto yy185;
+			goto yy178;
+		} else {
+			if (yych <= 'B') goto yy185;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'b') goto yy185;
+			goto yy178;
+		}
+yy182:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '7') goto yy186;
+			if (yych <= '9') goto yy187;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy187;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy187;
+			goto yy178;
+		}
+yy183:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy187;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy187;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy187;
+			goto yy178;
+		}
+yy184:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy188;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy188;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy188;
+			goto yy178;
+		}
+yy185:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy189;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy189;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy189;
+			goto yy178;
+		}
+yy186:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy190;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy190;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy190;
+			goto yy178;
+		}
+yy187:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy192;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy192;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy192;
+			goto yy178;
+		}
+yy188:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy194;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy194;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy194;
+			goto yy178;
+		}
+yy189:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych <= '9') goto yy196;
+			goto yy178;
+		} else {
+			if (yych <= 'F') goto yy196;
+			if (yych <= '`') goto yy178;
+			if (yych <= 'f') goto yy196;
+			goto yy178;
+		}
+yy190:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 2);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) utf16;
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy192:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 3);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) (0xc0 | (utf16 >> 6));
+		*(s->pstr++) = (char) (0x80 | (utf16 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy194:
+		++YYCURSOR;
+		{
+		int utf16 = php_json_ucs2_to_int(s, 4);
+		PHP_JSON_SCANNER_COPY_UTF();
+		*(s->pstr++) = (char) (0xe0 | (utf16 >> 12));
+		*(s->pstr++) = (char) (0x80 | ((utf16 >> 6) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | (utf16 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+yy196:
+		yych = *++YYCURSOR;
+		if (yych != '\\') goto yy178;
+		yych = *++YYCURSOR;
+		if (yych != 'u') goto yy178;
+		yych = *++YYCURSOR;
+		if (yych == 'D') goto yy199;
+		if (yych != 'd') goto yy178;
+yy199:
+		yych = *++YYCURSOR;
+		if (yych <= 'B') goto yy178;
+		if (yych <= 'F') goto yy200;
+		if (yych <= 'b') goto yy178;
+		if (yych >= 'g') goto yy178;
+yy200:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych >= ':') goto yy178;
+		} else {
+			if (yych <= 'F') goto yy201;
+			if (yych <= '`') goto yy178;
+			if (yych >= 'g') goto yy178;
+		}
+yy201:
+		yych = *++YYCURSOR;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy178;
+			if (yych >= ':') goto yy178;
+		} else {
+			if (yych <= 'F') goto yy202;
+			if (yych <= '`') goto yy178;
+			if (yych >= 'g') goto yy178;
+		}
+yy202:
+		++YYCURSOR;
+		{
+		int utf32, utf16_hi, utf16_lo;
+		utf16_hi = php_json_ucs2_to_int(s, 4);
+		utf16_lo = php_json_ucs2_to_int_ex(s, 4, 7);
+		utf32 = ((utf16_lo & 0x3FF) << 10) + (utf16_hi & 0x3FF) + 0x10000;
+		PHP_JSON_SCANNER_COPY_UTF_SP();
+		*(s->pstr++) = (char) (0xf0 | (utf32 >> 18));
+		*(s->pstr++) = (char) (0x80 | ((utf32 >> 12) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | ((utf32 >> 6) & 0x3f));
+		*(s->pstr++) = (char) (0x80 | (utf32 & 0x3f));
+		s->str_start = s->cursor;
+		PHP_JSON_CONDITION_GOTO_STR_P2();
+	}
+	}
+
+
+}
diff --git a/ext/opcache/jit/zend_jit_x86.c b/ext/opcache/jit/zend_jit_x86.c
new file mode 100644
index 0000000000..91c2cae26a
--- /dev/null
+++ b/ext/opcache/jit/zend_jit_x86.c
@@ -0,0 +1,50940 @@
+/*
+** This file has been pre-processed with DynASM.
+** https://luajit.org/dynasm.html
+** DynASM version 1.5.0, DynASM x64 version 1.5.0
+** DO NOT EDIT! The original file is in "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc".
+*/
+
+#line 1 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+/*
+ *  +----------------------------------------------------------------------+
+ *  | Zend JIT                                                             |
+ *  +----------------------------------------------------------------------+
+ *  | Copyright (c) The PHP Group                                          |
+ *  +----------------------------------------------------------------------+
+ *  | This source file is subject to version 3.01 of the PHP license,      |
+ *  | that is bundled with this package in the file LICENSE, and is        |
+ *  | available through the world-wide-web at the following url:           |
+ *  | https://www.php.net/license/3_01.txt                                 |
+ *  | If you did not receive a copy of the PHP license and are unable to   |
+ *  | obtain it through the world-wide-web, please send a note to          |
+ *  | license@php.net so we can mail you a copy immediately.               |
+ *  +----------------------------------------------------------------------+
+ *  | Authors: Dmitry Stogov <dmitry@php.net>                              |
+ *  |          Xinchen Hui <laruence@php.net>                              |
+ *  +----------------------------------------------------------------------+
+ */
+
+//|.if X64
+ //|.arch x64
+#if DASM_VERSION != 10500
+#error "Version mismatch between DynASM and included encoding engine"
+#endif
+#line 22 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.else
+ //|.arch x86
+//|.endif
+
+//|.if X64WIN
+ //|.define FP,      r14
+ //|.define IP,      r15
+ //|.define IPl,     r15d
+ //|.define RX,      r15       // the same as VM IP reused as a general purpose reg
+ //|.define CARG1,   rcx       // x64/POSIX C call arguments.
+ //|.define CARG2,   rdx
+ //|.define CARG3,   r8
+ //|.define CARG4,   r9
+ //|.define CARG1d,  ecx
+ //|.define CARG2d,  edx
+ //|.define CARG3d,  r8d
+ //|.define CARG4d,  r9d
+ //|.define FCARG1a, CARG1     // Simulate x86 fastcall.
+ //|.define FCARG2a, CARG2
+ //|.define FCARG1d, CARG1d
+ //|.define FCARG2d, CARG2d
+ //|.define SPAD,    0x58      // padding for CPU stack alignment
+ //|.define NR_SPAD, 0x58      // padding for CPU stack alignment
+ //|.define T3,      [r4+0x50] // Used to store old value of IP
+ //|.define T2,      [r4+0x48] // Used to store old value of FP
+ //|.define T1,      [r4+0x40]
+ //|.define A6,      [r4+0x28] // preallocated slot for 6-th argument
+ //|.define A5,      [r4+0x20] // preallocated slot for 5-th argument
+//|.elif X64
+ //|.define FP,      r14
+ //|.define IP,      r15
+ //|.define IPl,     r15d
+ //|.define RX,      r15       // the same as VM IP reused as a general purpose reg
+ //|.define CARG1,   rdi       // x64/POSIX C call arguments.
+ //|.define CARG2,   rsi
+ //|.define CARG3,   rdx
+ //|.define CARG4,   rcx
+ //|.define CARG5,   r8
+ //|.define CARG6,   r9
+ //|.define CARG1d,  edi
+ //|.define CARG2d,  esi
+ //|.define CARG3d,  edx
+ //|.define CARG4d,  ecx
+ //|.define CARG5d,  r8d
+ //|.define CARG6d,  r9d
+ //|.define FCARG1a, CARG1     // Simulate x86 fastcall.
+ //|.define FCARG2a, CARG2
+ //|.define FCARG1d, CARG1d
+ //|.define FCARG2d, CARG2d
+ //|.define SPAD,    0x18      // padding for CPU stack alignment
+ //|.define NR_SPAD, 0x28      // padding for CPU stack alignment
+ //|.define T3,      [r4+0x20] // Used to store old value of IP (CALL VM only)
+ //|.define T2,      [r4+0x18] // Used to store old value of FP (CALL VM only)
+ //|.define T1,      [r4]
+//|.else
+ //|.define FP,      esi
+ //|.define IP,      edi
+ //|.define IPl,     edi
+ //|.define RX,      edi       // the same as VM IP reused as a general purpose reg
+ //|.define FCARG1a, ecx       // x86 fastcall arguments.
+ //|.define FCARG2a, edx
+ //|.define FCARG1d, ecx
+ //|.define FCARG2d, edx
+ //|.define SPAD,    0x1c      // padding for CPU stack alignment
+ //|.define NR_SPAD, 0x1c      // padding for CPU stack alignment
+ //|.define T3,      [r4+0x18] // Used to store old value of IP (CALL VM only)
+ //|.define T2,      [r4+0x14] // Used to store old value of FP (CALL VM only)
+ //|.define T1,      [r4]
+ //|.define A4,      [r4+0xC]  // preallocated slots for arguments of "cdecl" functions (intersect with T1)
+ //|.define A3,      [r4+0x8]
+ //|.define A2,      [r4+0x4]
+ //|.define A1,      [r4]
+//|.endif
+
+//|.define HYBRID_SPAD, 16     // padding for stack alignment
+
+#ifdef _WIN64
+# define TMP_ZVAL_OFFSET 0x20
+#else
+# define TMP_ZVAL_OFFSET 0
+#endif
+
+#define DASM_ALIGNMENT 16
+
+/* According to x86 and x86_64 ABI, CPU stack has to be 16 byte aligned to
+ * guarantee proper alignment of 128-bit SSE data allocated on stack.
+ * With broken alignment any execution of SSE code, including calls to
+ * memcpy() and others, may lead to crash.
+ */
+
+const char* zend_reg_name[] = {
+#if defined(__x86_64__) || defined(_M_X64)
+	"rax", "rcx", "rdx", "rbx", "rsp", "rbp", "rsi", "rdi",
+	"r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
+	"xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6", "xmm7",
+	"xmm8", "xmm9", "xmm10", "xmm11", "xmm12", "xmm13", "xmm14", "xmm15"
+#else
+	"rax", "rcx", "rdx", "rbx", "rsp", "rbp", "rsi", "rdi",
+	"xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6", "xmm7"
+#endif
+};
+
+/* Simulate x86 fastcall */
+#ifdef _WIN64
+# define ZREG_FCARG1 ZREG_RCX
+# define ZREG_FCARG2 ZREG_RDX
+#elif defined(__x86_64__)
+# define ZREG_FCARG1 ZREG_RDI
+# define ZREG_FCARG2 ZREG_RSI
+#else
+# define ZREG_FCARG1 ZREG_RCX
+# define ZREG_FCARG2 ZREG_RDX
+#endif
+
+//|.type EX, zend_execute_data, FP
+#define Dt1(_V) (int)(ptrdiff_t)&(((zend_execute_data *)0)_V)
+#line 137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.type OP, zend_op
+#define Dt2(_V) (int)(ptrdiff_t)&(((zend_op *)0)_V)
+#line 138 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.type ZVAL, zval
+#define Dt3(_V) (int)(ptrdiff_t)&(((zval *)0)_V)
+#line 139 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.actionlist dasm_actions
+static const unsigned char dasm_actions[8450] = {
+  77,139,190,233,255,248,10,255,77,137,190,233,255,198,4,37,237,0,255,72,184,
+  237,237,198,0,0,255,128,60,37,237,0,255,72,184,237,237,128,56,0,255,15,132,
+  244,247,255,232,243,255,72,199,192,237,255,72,184,237,237,255,252,255,208,
+  255,248,1,255,76,137,252,247,255,76,139,52,37,237,255,72,184,237,237,76,139,
+  48,255,72,131,196,16,255,65,252,255,39,255,72,139,135,233,252,255,32,255,
+  72,131,196,24,255,76,139,116,36,24,76,139,124,36,32,72,131,196,40,72,199,
+  192,1,0,0,0,195,255,248,11,255,252,233,243,255,252,255,224,255,76,139,116,
+  36,24,76,139,124,36,32,72,131,196,40,133,192,15,140,244,247,72,199,192,1,
+  0,0,0,248,1,195,255,248,12,255,72,139,4,37,237,255,72,184,237,237,72,139,
+  0,255,252,246,128,233,235,15,132,244,247,139,128,233,65,199,132,253,6,233,
+  237,248,1,252,233,244,11,255,248,13,65,139,190,233,255,252,247,199,237,15,
+  133,244,247,255,76,137,252,246,76,139,116,36,24,76,139,124,36,32,72,131,196,
+  40,255,248,14,255,65,128,191,233,235,15,132,244,251,255,76,137,60,37,237,
+  255,72,184,237,237,76,137,56,255,248,5,255,73,199,199,237,255,73,191,237,
+  237,255,73,199,134,233,237,255,73,191,237,237,77,137,190,233,255,76,137,252,
+  255,255,73,139,190,233,255,72,137,60,37,237,255,72,184,237,237,72,137,56,
+  255,76,139,116,36,24,76,139,124,36,32,72,131,196,40,72,199,192,2,0,0,0,195,
+  255,248,15,77,139,190,233,65,128,191,233,235,15,132,244,247,255,248,16,73,
+  139,134,233,139,136,233,65,199,132,253,15,233,237,77,59,190,233,15,132,244,
+  247,73,139,142,233,73,137,143,233,77,137,190,233,248,1,73,137,199,139,184,
+  233,255,65,128,191,233,235,15,133,244,255,65,139,135,233,76,1,252,240,255,
+  64,252,246,128,253,240,11,233,235,15,133,244,247,254,1,64,252,246,128,253,
+  240,11,233,235,15,132,244,250,255,72,139,184,253,240,3,233,131,47,1,255,15,
+  133,244,249,255,15,133,244,250,255,72,184,237,237,73,137,134,233,255,252,
+  233,244,250,255,248,3,255,64,128,184,253,240,11,233,235,15,133,244,247,255,
+  72,139,184,253,240,3,233,248,1,255,252,247,71,4,237,15,133,244,250,255,252,
+  233,244,250,254,0,248,4,255,248,9,252,233,244,11,255,248,17,255,252,233,244,
+  18,255,248,18,72,131,252,236,8,73,139,134,233,139,136,233,128,184,233,235,
+  65,199,132,253,14,233,237,15,133,244,248,72,99,136,233,72,1,200,252,233,244,
+  249,248,2,139,128,233,76,1,252,240,248,3,72,199,199,237,255,72,199,198,237,
+  255,72,190,237,237,255,72,139,16,255,72,131,196,8,195,255,248,19,255,252,
+  233,244,20,255,248,20,72,131,252,236,8,73,139,134,233,139,136,233,128,184,
+  233,235,65,199,132,253,14,233,237,15,133,244,248,72,99,136,233,72,1,200,252,
+  233,244,249,248,2,139,128,233,76,1,252,240,248,3,72,199,199,237,255,72,139,
+  16,72,129,194,239,255,248,21,255,252,233,244,22,255,248,22,72,131,252,236,
+  8,73,139,134,233,128,184,233,235,15,132,244,247,139,128,233,65,199,132,253,
+  6,233,237,248,1,72,49,252,255,255,248,23,73,139,134,233,72,49,252,255,255,
+  72,99,144,233,72,139,20,16,72,129,194,239,255,248,24,73,139,134,233,252,246,
+  128,233,235,15,132,244,247,139,128,233,65,199,132,253,6,233,237,248,1,255,
+  72,191,237,237,255,248,25,73,139,134,233,252,246,128,233,235,15,132,244,247,
+  139,128,233,65,199,132,253,6,233,237,248,1,255,248,26,73,139,134,233,139,
+  128,233,65,199,132,253,6,233,237,72,49,252,255,255,248,27,0,0,0,0,0,0,252,
+  240,63,255,248,28,255,248,29,255,72,252,255,0,73,139,134,233,73,139,150,233,
+  72,139,128,233,72,252,255,130,233,252,255,160,233,255,248,30,102,199,2,236,
+  76,137,252,247,255,76,137,252,254,255,73,139,182,233,255,73,139,134,233,72,
+  139,136,233,72,139,145,233,102,129,42,238,15,142,244,30,255,76,137,252,250,
+  255,73,139,150,233,255,72,43,144,233,255,72,193,252,250,2,252,255,164,253,
+  17,233,255,248,31,255,248,32,255,248,33,102,199,2,236,76,137,252,247,255,
+  133,192,15,140,244,247,255,73,139,134,233,72,139,136,233,72,139,137,233,73,
+  139,148,253,15,233,102,129,42,238,15,142,244,33,65,252,255,36,15,255,248,
+  34,255,248,35,255,248,36,255,248,37,255,72,131,196,24,77,49,252,255,195,255,
+  76,139,116,36,24,76,139,124,36,32,72,131,196,40,72,199,192,252,255,252,255,
+  252,255,252,255,195,255,248,38,72,129,252,236,239,76,137,188,253,36,233,76,
+  137,156,253,36,233,76,137,148,253,36,233,76,137,140,253,36,233,76,137,132,
+  253,36,233,72,137,188,253,36,233,72,137,180,253,36,233,72,137,148,253,36,
+  233,72,137,140,253,36,233,72,137,132,253,36,233,72,139,188,253,36,233,72,
+  137,230,252,242,68,15,17,188,253,36,233,252,242,68,15,17,180,253,36,233,252,
+  242,68,15,17,172,253,36,233,252,242,68,15,17,164,253,36,233,252,242,68,15,
+  17,156,253,36,233,252,242,68,15,17,148,253,36,233,255,252,242,68,15,17,140,
+  253,36,233,252,242,68,15,17,132,253,36,233,252,242,15,17,188,253,36,233,252,
+  242,15,17,180,253,36,233,252,242,15,17,172,253,36,233,252,242,15,17,164,253,
+  36,233,252,242,15,17,156,253,36,233,252,242,15,17,148,253,36,233,252,242,
+  15,17,140,253,36,233,252,242,15,17,132,253,36,233,255,72,129,196,239,255,
+  133,192,15,133,244,247,255,248,1,15,140,244,37,255,15,133,244,10,255,73,139,
+  134,233,72,139,128,233,72,139,128,233,65,252,255,36,7,255,72,131,196,24,73,
+  139,134,233,72,139,128,233,72,139,128,233,65,252,255,36,7,255,77,139,190,
+  233,76,137,252,247,73,139,134,233,72,139,128,233,72,139,128,233,65,252,255,
+  20,7,133,192,15,140,244,37,76,139,116,36,24,76,139,124,36,32,72,131,196,40,
+  72,199,192,1,0,0,0,195,255,248,39,255,106,235,252,235,235,255,106,235,72,
+  129,4,253,36,239,252,233,244,38,255,248,40,88,255,72,131,196,24,65,252,255,
+  39,255,76,137,252,247,73,139,6,76,139,116,36,24,76,139,124,36,32,72,131,196,
+  40,252,255,32,255,248,41,72,131,252,236,8,255,248,42,72,131,252,236,8,255,
+  248,43,72,131,252,236,8,255,248,44,72,131,252,236,8,255,248,45,72,131,252,
+  236,8,255,204,255,250,15,255,72,131,252,236,16,255,72,131,252,236,24,255,
+  72,131,252,236,40,76,137,116,36,24,76,137,124,36,32,73,137,252,254,255,73,
+  199,135,233,0,0,0,0,255,73,139,134,233,73,137,135,233,255,73,129,199,239,
+  255,73,129,134,233,239,255,15,133,243,255,252,233,244,10,254,0,15,132,245,
+  252,233,243,255,252,233,245,255,72,131,60,37,237,0,255,72,184,237,237,72,
+  131,56,0,255,15,133,244,11,255,15,133,244,12,255,80,255,199,4,37,237,237,
+  255,72,184,237,237,199,0,237,255,72,184,240,34,237,237,64,199,128,253,240,
+  11,233,237,255,249,254,0,15,132,243,252,233,243,255,252,233,244,39,255,76,
+  137,252,247,73,139,134,233,72,139,128,233,72,139,128,233,65,252,255,20,7,
+  255,65,128,190,233,235,15,133,243,255,72,49,192,240,131,240,35,255,72,184,
+  240,34,237,237,255,72,199,192,240,35,237,255,72,139,128,253,240,131,240,3,
+  233,255,72,137,192,240,131,240,35,255,252,247,135,233,237,15,132,243,255,
+  252,247,135,233,237,15,133,243,255,72,185,237,237,72,131,57,0,255,72,185,
+  237,237,76,139,49,255,73,129,252,255,239,15,132,244,37,255,77,133,252,255,
+  15,132,244,37,255,133,192,15,140,244,37,255,252,233,244,37,255,65,129,252,
+  255,239,255,65,129,190,233,239,255,76,137,252,247,76,139,116,36,24,76,139,
+  124,36,32,72,131,196,40,255,15,133,245,255,232,244,40,255,15,132,245,232,
+  244,40,255,72,137,128,253,240,131,240,3,233,255,196,225,120,40,192,240,133,
+  240,45,255,64,15,40,192,240,132,240,52,255,196,225,252,251,17,128,253,240,
+  133,240,5,233,255,252,242,64,15,17,128,253,240,132,240,20,233,255,197,252,
+  251,16,4,240,132,37,237,255,252,242,64,15,16,4,240,140,37,237,255,197,252,
+  251,16,0,240,132,255,252,242,64,15,16,0,240,140,255,196,225,123,16,128,253,
+  240,133,240,13,233,255,252,242,64,15,16,128,253,240,132,240,20,233,255,252,
+  233,244,39,248,1,255,72,199,192,240,35,0,0,0,0,255,72,199,128,253,240,3,233,
+  0,0,0,0,255,64,199,128,253,240,11,233,0,0,224,195,255,64,199,128,253,240,
+  11,233,0,0,0,128,255,72,199,192,240,35,252,255,252,255,252,255,252,255,255,
+  72,199,128,253,240,3,233,252,255,252,255,252,255,252,255,255,64,199,128,253,
+  240,11,233,252,255,252,255,252,255,127,255,64,199,128,253,240,11,233,0,0,
+  224,67,255,64,252,246,128,253,240,11,233,235,15,132,244,247,255,72,139,136,
+  253,240,3,233,131,1,1,248,1,255,64,139,128,253,240,131,240,19,233,255,64,
+  137,128,253,240,131,240,19,233,255,132,252,237,15,132,244,247,255,131,2,1,
+  248,1,255,252,247,128,233,237,15,132,244,247,72,137,199,255,64,128,184,253,
+  240,11,233,235,15,133,244,248,255,72,129,128,253,240,3,233,239,255,72,129,
+  192,240,35,239,255,72,129,168,253,240,3,233,239,255,72,129,232,240,35,239,
+  255,15,128,243,255,15,128,244,247,255,72,137,192,240,35,255,72,137,128,253,
+  240,3,233,255,252,233,244,249,254,0,248,2,255,64,128,184,253,240,11,233,235,
+  15,133,244,248,191,237,255,72,141,184,253,240,3,233,255,72,137,199,240,131,
+  255,128,191,233,235,15,133,244,248,72,139,63,72,131,191,233,0,15,132,244,
+  247,255,72,141,176,253,240,3,233,255,72,137,198,240,131,255,72,49,252,246,
+  255,252,233,244,249,248,1,72,141,191,233,248,2,255,132,228,15,132,244,247,
+  255,197,252,251,240,160,88,5,240,132,244,27,255,252,242,64,15,88,5,240,140,
+  244,27,255,197,252,251,240,160,92,5,240,132,244,27,255,252,242,64,15,92,5,
+  240,140,244,27,255,72,141,132,253,240,131,0,240,68,240,36,233,255,72,1,192,
+  240,131,240,35,255,72,193,224,240,35,235,255,72,193,232,240,35,235,255,72,
+  141,128,253,240,131,240,3,233,255,72,41,192,240,131,240,35,255,72,15,175,
+  192,240,132,240,36,255,72,9,192,240,131,240,35,255,72,33,192,240,131,240,
+  35,255,72,184,237,237,72,1,192,240,35,255,72,185,237,237,72,1,200,240,35,
+  255,72,3,128,253,240,131,240,3,233,255,72,184,237,237,72,41,192,240,35,255,
+  72,185,237,237,72,41,200,240,35,255,72,43,128,253,240,131,240,3,233,255,72,
+  184,237,237,72,15,175,192,240,132,255,72,185,237,237,72,15,175,193,240,132,
+  255,72,105,192,240,131,240,35,239,255,72,15,175,128,253,240,132,240,4,233,
+  255,72,184,237,237,72,9,192,240,35,255,72,185,237,237,72,9,200,240,35,255,
+  72,129,200,240,35,239,255,72,11,128,253,240,131,240,3,233,255,72,184,237,
+  237,72,33,192,240,35,255,72,185,237,237,72,33,200,240,35,255,72,129,224,240,
+  35,239,255,72,35,128,253,240,131,240,3,233,255,72,184,237,237,72,49,192,240,
+  35,255,72,185,237,237,72,49,200,240,35,255,72,129,252,240,240,35,239,255,
+  72,51,128,253,240,131,240,3,233,255,15,129,243,255,15,129,244,247,255,102,
+  72,15,110,192,240,132,255,196,225,120,240,160,87,192,240,133,240,45,255,64,
+  15,87,192,240,132,240,52,255,196,225,120,240,160,87,192,240,133,240,45,196,
+  225,252,251,240,160,42,192,240,133,240,37,255,64,15,87,192,240,132,240,52,
+  252,242,72,15,42,192,240,132,240,36,255,196,225,120,240,160,87,192,240,133,
+  240,45,196,225,252,251,240,160,42,128,253,240,133,240,5,233,255,64,15,87,
+  192,240,132,240,52,252,242,72,15,42,128,253,240,132,240,4,233,255,196,225,
+  123,240,160,88,192,240,133,240,45,255,196,225,123,240,160,92,192,240,133,
+  240,45,255,196,225,123,240,160,89,192,240,133,240,45,255,196,225,123,240,
+  160,94,192,240,133,240,45,255,252,242,64,15,88,192,240,132,240,52,255,252,
+  242,64,15,92,192,240,132,240,52,255,252,242,64,15,89,192,240,132,240,52,255,
+  252,242,64,15,94,192,240,132,240,52,255,252,233,244,248,254,0,197,252,251,
+  240,160,88,4,240,132,37,237,255,72,185,237,237,197,252,251,240,160,88,1,240,
+  132,255,196,225,123,240,160,88,128,253,240,133,240,13,233,255,197,252,251,
+  240,160,92,4,240,132,37,237,255,72,185,237,237,197,252,251,240,160,92,1,240,
+  132,255,196,225,123,240,160,92,128,253,240,133,240,13,233,255,197,252,251,
+  240,160,89,4,240,132,37,237,255,72,185,237,237,197,252,251,240,160,89,1,240,
+  132,255,196,225,123,240,160,89,128,253,240,133,240,13,233,255,197,252,251,
+  240,160,94,4,240,132,37,237,255,72,185,237,237,197,252,251,240,160,94,1,240,
+  132,255,196,225,123,240,160,94,128,253,240,133,240,13,233,255,252,242,64,
+  15,88,4,240,140,37,237,255,72,185,237,237,252,242,64,15,88,1,240,140,255,
+  252,242,64,15,88,128,253,240,132,240,20,233,255,252,242,64,15,92,4,240,140,
+  37,237,255,72,185,237,237,252,242,64,15,92,1,240,140,255,252,242,64,15,92,
+  128,253,240,132,240,20,233,255,252,242,64,15,89,4,240,140,37,237,255,72,185,
+  237,237,252,242,64,15,89,1,240,140,255,252,242,64,15,89,128,253,240,132,240,
+  20,233,255,252,242,64,15,94,4,240,140,37,237,255,72,185,237,237,252,242,64,
+  15,94,1,240,140,255,252,242,64,15,94,128,253,240,132,240,20,233,255,72,184,
+  237,237,197,252,251,240,160,88,0,240,132,255,72,184,237,237,197,252,251,240,
+  160,92,0,240,132,255,72,184,237,237,197,252,251,240,160,89,0,240,132,255,
+  72,184,237,237,197,252,251,240,160,94,0,240,132,255,72,184,237,237,252,242,
+  64,15,88,0,240,140,255,72,184,237,237,252,242,64,15,92,0,240,140,255,72,184,
+  237,237,252,242,64,15,89,0,240,140,255,72,184,237,237,252,242,64,15,94,0,
+  240,140,255,64,128,184,253,240,11,233,235,15,133,244,249,255,64,128,184,253,
+  240,11,233,235,15,133,244,252,255,64,128,184,253,240,11,233,235,15,133,244,
+  247,254,1,252,233,244,251,254,0,252,233,244,251,255,248,6,255,72,199,194,
+  237,255,72,186,237,237,255,72,141,144,253,240,3,233,255,72,137,194,240,131,
+  255,252,233,244,5,254,0,72,137,198,255,72,137,4,36,255,252,233,244,24,255,
+  72,129,252,249,239,15,131,244,247,254,1,248,1,72,131,252,249,0,72,199,192,
+  240,35,0,0,0,0,15,143,244,247,255,252,233,244,24,254,0,72,211,224,240,35,
+  248,1,255,72,193,252,248,240,35,235,255,248,1,72,131,252,249,0,72,199,193,
+  237,15,143,244,247,255,248,1,72,211,252,248,240,35,255,252,233,244,25,255,
+  72,153,72,252,247,252,248,240,35,255,72,139,4,36,255,72,131,184,253,240,3,
+  233,0,255,72,133,192,240,131,240,35,255,15,132,244,247,254,1,252,233,244,
+  25,254,0,72,131,184,253,240,3,233,252,255,255,72,131,252,248,240,35,252,255,
+  255,72,153,255,72,252,247,184,253,240,3,233,255,252,247,135,233,237,15,132,
+  244,250,255,139,135,233,255,72,133,192,255,72,129,252,248,239,255,72,57,252,
+  240,255,15,134,243,255,15,134,244,255,255,15,134,244,253,255,15,134,244,248,
+  255,72,139,135,233,255,72,129,192,239,255,72,137,252,240,72,193,224,5,72,
+  3,135,233,255,15,132,244,255,255,252,233,244,255,255,128,184,233,235,15,133,
+  244,254,255,128,184,233,235,15,132,243,255,128,184,233,235,15,132,244,253,
+  255,128,184,233,235,15,132,244,248,255,252,233,244,253,255,252,233,244,248,
+  255,232,244,17,255,232,244,18,255,64,199,128,253,240,11,233,237,252,233,244,
+  255,255,248,2,248,4,255,15,133,244,254,252,233,243,254,0,252,233,244,254,
+  255,128,190,233,235,15,142,244,247,254,1,252,233,244,247,254,0,15,132,244,
+  248,254,1,232,244,19,255,232,244,20,255,128,184,233,235,15,133,244,247,72,
+  139,0,72,129,192,239,248,1,255,128,184,233,235,255,15,142,243,255,15,143,
+  243,255,15,142,244,255,255,15,133,244,254,252,233,244,255,255,72,133,192,
+  15,133,244,254,252,233,244,255,255,72,199,128,253,240,3,233,237,255,72,184,
+  240,34,237,237,64,131,128,253,240,11,233,1,255,131,4,37,237,1,255,72,184,
+  240,34,237,237,64,131,128,253,240,11,233,2,255,131,4,37,237,2,255,64,128,
+  184,253,240,11,233,235,15,132,244,247,254,1,72,137,60,36,255,72,184,240,34,
+  237,237,73,137,134,253,240,131,233,255,72,139,60,36,255,252,233,244,249,255,
+  128,186,233,235,15,133,244,247,72,139,18,72,129,194,239,248,1,255,72,139,
+  144,253,240,3,233,131,42,1,255,15,132,244,248,132,252,246,15,132,244,249,
+  255,252,233,244,249,248,2,255,132,252,246,15,132,244,248,64,131,128,253,240,
+  11,233,1,248,2,255,72,139,184,253,240,3,233,255,72,49,252,246,49,210,72,49,
+  201,77,49,192,255,132,252,246,15,132,244,247,255,64,131,128,253,240,11,233,
+  1,248,1,255,64,131,128,253,240,11,233,2,248,1,255,72,131,191,233,0,15,133,
+  244,248,254,1,15,132,244,254,252,233,244,12,255,64,128,184,253,240,11,233,
+  235,15,132,243,255,72,137,4,240,131,36,255,72,139,4,240,131,36,255,232,244,
+  41,252,233,244,255,254,0,232,244,42,255,232,244,41,255,232,244,43,255,232,
+  244,44,255,232,244,45,255,248,9,255,64,128,184,253,240,11,233,235,15,133,
+  244,249,72,139,184,253,240,3,233,255,72,141,135,253,240,131,233,248,3,255,
+  15,132,244,254,252,233,244,11,255,248,4,252,247,71,4,237,15,133,244,254,255,
+  64,252,246,128,253,240,11,233,235,15,132,244,251,255,72,139,184,253,240,3,
+  233,131,47,1,252,247,71,4,237,15,133,244,251,255,72,139,128,253,240,131,240,
+  3,233,64,131,168,253,240,11,233,1,255,248,8,255,128,191,233,235,15,133,244,
+  247,72,139,55,128,190,233,235,15,133,244,248,72,141,190,233,252,233,244,249,
+  254,1,72,133,192,72,137,199,15,133,244,247,252,233,244,12,254,0,64,128,184,
+  253,240,11,233,235,15,133,244,253,255,131,56,1,15,134,244,248,255,248,2,72,
+  137,199,255,131,63,1,255,15,135,244,247,254,1,64,252,246,128,253,240,11,233,
+  235,15,132,244,247,131,47,1,248,1,255,64,199,128,253,240,11,233,237,72,137,
+  199,255,64,128,184,253,240,11,233,235,15,143,244,253,255,72,133,192,15,132,
+  244,247,254,1,232,244,21,255,232,244,22,255,248,7,255,64,128,184,253,240,
+  11,233,235,15,143,244,248,255,64,199,128,253,240,11,233,237,72,137,199,252,
+  233,244,6,248,2,255,72,49,201,255,72,199,193,237,255,72,185,237,237,255,72,
+  141,136,253,240,3,233,255,72,137,193,240,131,255,128,184,233,235,15,133,243,
+  255,128,184,233,235,15,133,244,247,72,139,56,72,131,191,233,0,15,133,244,
+  248,72,141,135,233,254,1,128,191,233,235,15,133,244,247,72,139,63,72,131,
+  191,233,0,15,133,244,248,72,129,199,239,254,1,72,184,237,237,72,57,192,240,
+  35,255,72,185,237,237,72,57,200,240,35,255,72,129,252,248,240,35,239,255,
+  72,59,128,253,240,131,240,3,233,255,72,57,192,240,131,240,35,255,72,184,237,
+  237,72,57,128,253,240,3,233,255,72,129,184,253,240,3,233,239,255,15,148,208,
+  255,15,149,208,255,15,159,208,255,15,156,208,255,15,157,208,255,15,158,208,
+  255,15,182,192,141,128,233,255,64,137,128,253,240,11,233,255,15,132,245,255,
+  15,142,245,255,15,141,243,255,15,141,245,255,15,140,243,255,15,140,245,255,
+  15,143,245,255,15,182,192,131,192,2,255,15,133,243,15,138,243,255,15,133,
+  245,15,138,245,255,15,138,244,247,255,15,138,244,247,15,132,245,248,1,255,
+  15,134,245,255,15,131,243,15,138,243,255,15,131,245,15,138,245,255,15,130,
+  243,255,15,130,245,255,15,135,243,15,138,243,255,15,135,245,15,138,245,255,
+  15,138,244,247,15,132,243,248,1,255,15,135,243,255,15,135,245,255,15,131,
+  243,255,15,131,245,255,15,138,245,15,132,245,255,64,199,128,253,240,11,233,
+  237,15,133,245,15,138,245,255,64,199,128,253,240,11,233,237,15,132,245,248,
+  1,255,64,199,128,253,240,11,233,237,15,134,245,255,64,199,128,253,240,11,
+  233,237,15,131,245,15,138,245,255,64,199,128,253,240,11,233,237,15,130,245,
+  255,64,199,128,253,240,11,233,237,15,135,245,15,138,245,255,15,151,208,15,
+  182,192,141,128,233,255,64,137,128,253,240,11,233,15,135,245,255,64,199,128,
+  253,240,11,233,237,15,130,245,248,1,255,15,147,208,15,182,192,141,128,233,
+  255,64,137,128,253,240,11,233,15,131,245,255,64,199,128,253,240,11,233,237,
+  15,134,245,248,1,255,15,138,244,247,184,237,15,132,244,248,248,1,184,237,
+  248,2,255,15,151,208,15,182,192,131,192,2,255,15,138,244,247,184,237,15,130,
+  244,248,248,1,184,237,248,2,255,15,147,208,15,182,192,131,192,2,255,15,138,
+  244,247,184,237,15,134,244,248,248,1,184,237,248,2,255,197,252,249,46,4,240,
+  132,37,237,255,102,64,15,46,4,240,140,37,237,255,197,252,249,46,0,240,132,
+  255,102,64,15,46,0,240,140,255,196,225,121,46,128,253,240,133,240,13,233,
+  255,102,64,15,46,128,253,240,132,240,20,233,255,196,225,121,46,192,240,133,
+  240,45,255,102,64,15,46,192,240,132,240,52,255,64,128,184,253,240,11,233,
+  235,15,133,244,250,255,64,128,184,253,240,11,233,235,15,133,244,255,255,64,
+  128,184,253,240,11,233,235,15,133,244,249,254,1,252,233,244,252,254,0,64,
+  128,184,253,240,11,233,235,15,133,244,251,255,252,233,244,252,255,128,191,
+  233,235,15,133,244,247,72,199,199,237,255,64,128,184,253,240,11,233,235,15,
+  133,244,247,72,137,60,36,72,199,199,237,255,252,233,244,248,248,1,255,128,
+  191,233,235,15,132,244,247,254,1,128,190,233,235,15,132,244,247,254,1,72,
+  137,60,36,191,237,255,128,191,233,235,15,133,244,247,72,139,63,72,129,199,
+  239,248,1,255,128,190,233,235,15,133,244,247,72,139,54,72,129,198,239,248,
+  1,255,128,190,233,235,255,128,191,233,235,255,132,192,255,15,182,192,255,
+  252,247,216,141,128,233,255,64,128,184,253,240,11,233,235,255,15,140,244,
+  255,255,15,148,208,15,182,192,255,252,247,216,131,192,3,255,64,137,128,253,
+  240,11,233,15,132,244,247,255,64,128,184,253,240,11,233,235,15,132,244,247,
+  255,15,149,208,15,182,192,255,197,252,248,87,192,255,15,87,192,255,64,199,
+  128,253,240,11,233,237,15,133,243,248,1,255,64,199,128,253,240,11,233,237,
+  15,138,244,247,15,132,243,248,1,255,64,199,128,253,240,11,233,237,15,138,
+  244,247,15,132,245,255,64,199,128,253,240,11,233,237,248,1,255,64,199,128,
+  253,240,11,233,237,15,133,245,248,1,255,15,138,244,247,184,237,15,133,244,
+  248,248,1,184,237,248,2,255,15,138,244,247,15,133,243,248,1,255,64,252,246,
+  128,253,240,11,233,235,15,132,244,249,255,72,139,184,253,240,3,233,131,47,
+  1,15,133,244,249,72,137,4,36,255,72,139,4,36,248,3,255,72,139,12,37,237,255,
+  72,184,237,237,72,139,8,255,72,43,12,37,237,255,72,184,237,237,72,43,8,255,
+  72,129,252,249,239,15,130,243,255,252,246,128,233,1,72,199,199,237,15,133,
+  244,247,255,186,237,255,59,144,233,15,71,144,233,43,144,233,43,144,233,255,
+  193,226,4,72,99,210,72,41,215,248,1,255,76,139,60,37,237,255,73,191,237,237,
+  77,139,63,255,72,139,20,37,237,255,72,186,237,237,72,139,18,255,76,41,252,
+  250,255,72,129,252,250,239,255,72,57,252,250,255,15,130,244,247,254,1,72,
+  141,176,233,255,73,137,199,252,233,244,247,254,0,72,129,4,253,37,237,239,
+  255,72,186,237,237,72,129,2,239,255,72,1,60,37,237,255,72,186,237,237,72,
+  1,58,255,65,199,135,233,237,255,73,199,135,233,237,255,72,185,237,237,73,
+  137,143,233,255,72,141,136,233,73,137,143,233,255,72,139,12,36,73,137,143,
+  233,255,65,129,143,233,239,255,131,1,1,255,131,0,1,255,72,139,136,233,73,
+  137,143,233,139,144,233,129,226,239,129,202,239,128,184,233,235,15,132,244,
+  247,129,202,239,72,139,136,233,248,1,65,9,151,233,73,137,143,233,72,131,184,
+  233,0,15,133,244,247,72,141,184,233,255,73,139,142,233,255,72,139,137,233,
+  255,72,186,237,237,72,57,145,233,255,72,129,185,233,239,255,73,139,134,233,
+  255,73,139,150,233,72,139,130,233,72,133,192,15,132,244,247,254,1,72,137,
+  186,233,255,72,141,178,233,255,72,133,192,15,133,244,249,255,72,185,237,237,
+  72,57,136,233,255,72,129,184,233,239,255,72,185,237,237,72,57,200,255,252,
+  233,244,23,255,64,128,184,253,240,11,233,235,15,133,243,255,252,233,244,11,
+  254,0,73,139,134,233,72,139,128,233,72,133,192,15,132,244,247,255,73,139,
+  134,233,72,139,144,233,72,59,151,233,15,133,244,247,72,139,128,233,255,72,
+  141,20,36,255,72,133,192,15,133,244,248,252,233,244,11,254,0,252,247,128,
+  233,237,15,133,244,247,254,1,72,139,60,36,72,137,198,186,237,255,72,133,192,
+  15,132,244,11,255,73,137,199,255,72,139,128,253,240,3,233,255,72,191,237,
+  237,72,57,184,233,255,73,139,135,233,252,247,128,233,237,15,133,243,255,73,
+  199,134,233,0,0,0,0,255,73,139,135,233,73,137,134,233,255,77,137,183,233,
+  255,73,139,135,233,255,132,192,73,139,135,233,15,133,244,247,252,233,244,
+  11,254,0,132,192,15,132,244,11,255,73,137,151,233,255,73,139,150,233,73,137,
+  151,233,255,72,139,144,233,72,139,18,255,72,185,237,237,72,139,17,255,72,
+  139,146,233,255,72,139,144,233,255,72,3,20,37,237,255,72,185,237,237,72,3,
+  17,255,72,139,144,233,72,252,247,194,1,0,0,0,15,132,244,247,255,248,1,72,
+  139,18,255,72,185,237,237,76,137,57,255,77,137,252,254,255,76,139,184,233,
+  255,72,139,184,233,255,72,129,199,239,255,73,137,190,233,255,232,244,247,
+  254,1,248,1,88,252,233,245,254,0,72,139,184,233,73,137,190,233,255,65,139,
+  142,233,129,252,249,239,255,139,144,233,65,139,142,233,57,209,255,15,143,
+  244,247,254,1,65,139,142,233,252,233,244,247,254,0,252,247,128,233,237,15,
+  133,244,247,255,137,202,72,193,226,5,255,73,1,215,255,73,1,150,233,255,41,
+  202,15,142,244,249,255,72,193,225,4,73,141,140,253,14,233,248,2,199,129,233,
+  237,131,252,234,1,72,141,137,233,15,133,244,2,248,3,255,132,192,15,132,244,
+  11,73,139,135,233,255,252,255,144,233,255,76,137,52,37,237,255,72,184,237,
+  237,76,137,48,255,65,252,246,135,233,235,15,133,244,247,254,1,248,1,73,139,
+  191,233,255,248,1,73,139,191,233,64,131,168,253,240,11,233,1,15,133,244,247,
+  255,252,233,244,248,248,1,64,252,247,64,240,11,4,237,15,133,244,247,255,248,
+  1,252,233,244,248,254,0,248,1,76,137,252,255,255,15,133,244,15,255,73,139,
+  135,233,252,247,128,233,237,15,133,244,247,254,1,252,233,244,16,254,0,72,
+  184,237,237,131,0,1,255,73,139,190,233,252,246,135,233,235,15,133,244,247,
+  254,1,72,133,192,15,133,244,11,252,233,244,248,254,0,72,141,128,253,240,3,
+  233,255,72,137,192,240,131,255,128,184,233,235,15,133,244,247,72,139,0,248,
+  1,255,64,199,128,253,240,11,233,237,252,233,244,248,248,1,255,72,139,136,
+  253,240,3,233,131,1,1,255,72,137,136,253,240,3,233,255,64,199,128,253,240,
+  11,233,237,252,233,244,252,255,186,237,72,49,201,77,49,192,255,199,0,2,0,
+  0,0,199,128,233,237,72,199,128,233,0,0,0,0,255,72,139,12,36,255,252,233,244,
+  253,254,0,128,252,249,235,15,133,243,255,128,252,249,235,15,132,244,253,255,
+  252,247,128,233,237,15,133,244,253,255,65,252,247,135,233,237,15,133,244,
+  247,254,1,64,199,128,253,240,11,233,237,72,133,192,15,132,244,11,255,131,
+  47,1,15,132,244,247,132,228,15,132,244,248,131,2,1,252,233,244,248,248,1,
+  255,73,139,134,233,129,136,233,239,255,65,129,167,233,239,255,73,139,134,
+  233,129,160,233,239,255,248,1,65,129,143,233,239,252,233,244,247,254,0,65,
+  129,167,233,239,248,1,255,73,139,134,233,72,139,128,233,72,133,192,15,132,
+  244,247,72,169,1,0,0,0,15,133,244,250,254,1,72,139,60,37,237,255,72,191,237,
+  237,72,139,63,255,72,209,232,57,135,233,255,15,133,244,247,248,2,255,64,199,
+  128,253,240,11,233,237,252,233,244,249,255,138,128,233,255,65,138,134,233,
+  255,136,4,36,255,138,12,36,252,233,244,248,255,138,136,233,255,65,138,142,
+  233,255,184,1,0,0,0,211,224,169,237,255,15,132,245,252,233,245,255,15,149,
+  208,15,182,192,131,192,2,255,248,2,128,252,249,235,255,65,128,190,233,235,
+  255,15,133,245,252,233,245,255,72,137,4,37,237,255,72,186,237,237,72,137,
+  2,255,252,247,199,237,255,65,252,247,134,233,237,255,252,233,244,254,254,
+  0,15,133,244,13,255,73,139,190,233,72,129,252,239,239,64,131,168,253,240,
+  11,233,1,15,133,244,247,255,252,233,244,250,248,1,64,252,247,64,240,11,4,
+  237,15,133,244,247,255,248,1,248,4,255,252,247,199,237,15,132,244,250,73,
+  139,190,233,64,131,168,253,240,11,233,1,15,133,244,247,255,77,139,182,233,
+  255,15,133,244,14,255,15,133,244,39,255,65,252,255,55,195,255,76,137,252,
+  247,73,139,6,76,139,116,36,24,76,139,124,36,32,72,131,196,40,252,255,48,195,
+  255,72,133,210,255,72,133,201,255,64,252,246,128,253,240,11,233,235,15,132,
+  245,255,64,252,246,128,253,240,11,233,235,15,132,244,255,255,131,40,1,15,
+  132,244,248,255,132,252,246,15,132,245,255,132,252,246,15,132,244,255,255,
+  72,139,144,253,240,3,233,131,2,1,255,72,139,136,253,240,3,233,132,252,246,
+  15,132,244,248,128,252,250,235,15,133,244,247,139,145,233,72,139,137,233,
+  132,252,246,15,132,244,248,248,1,131,1,1,248,2,255,64,137,144,253,240,11,
+  233,255,64,128,184,253,240,11,233,235,15,133,244,247,191,237,255,64,128,184,
+  253,240,11,233,235,15,133,243,72,139,0,72,129,192,239,255,64,128,184,253,
+  240,11,233,235,15,132,244,247,252,233,243,254,0,64,139,144,253,240,11,233,
+  128,252,250,235,15,133,244,247,254,1,248,1,128,252,250,235,15,133,243,72,
+  139,0,72,129,192,239,255,64,139,144,253,240,11,233,128,252,250,235,15,132,
+  244,247,252,233,243,254,0,64,139,144,253,240,11,233,128,252,250,235,15,133,
+  243,255,64,199,128,253,240,11,233,237,252,233,244,254,254,0,72,133,192,15,
+  132,244,255,255,64,199,128,253,240,11,233,237,252,233,244,254,255,73,139,
+  182,233,72,139,134,233,72,131,232,1,255,72,185,237,237,139,9,255,72,193,225,
+  5,72,57,200,15,131,244,255,255,72,3,4,37,237,255,72,185,237,237,72,3,1,255,
+  128,184,233,235,15,133,244,255,255,15,133,244,255,72,139,0,131,0,1,248,1,
+  255,64,252,246,128,253,240,11,233,235,15,133,244,248,254,1,64,199,128,253,
+  240,11,233,237,131,47,1,255,248,3,252,247,71,4,237,15,133,244,251,255,252,
+  255,209,255,72,129,198,239,255,252,233,244,1,254,0,64,128,184,253,240,11,
+  233,235,15,133,244,247,72,139,128,253,240,131,240,3,233,72,129,192,240,35,
+  239,248,1,255,186,1,0,0,0,64,138,136,253,240,11,233,211,226,252,247,194,237,
+  15,132,244,247,255,65,129,190,233,239,15,130,243,255,65,129,190,233,239,15,
+  130,244,247,254,1,65,129,190,233,239,15,131,244,251,255,73,139,134,233,72,
+  139,176,233,255,132,192,15,133,244,247,254,1,64,199,128,253,240,11,233,237,
+  252,233,244,11,254,0,72,184,237,237,72,57,135,233,255,72,129,191,233,239,
+  255,128,191,233,235,15,133,244,247,72,139,63,248,1,255,73,139,134,233,72,
+  139,144,233,72,59,151,233,15,133,244,251,72,139,128,233,255,15,140,244,251,
+  255,15,140,244,254,255,139,148,253,7,233,132,210,15,132,244,251,72,1,199,
+  255,73,139,134,233,72,139,176,233,72,133,252,246,15,133,244,247,254,1,248,
+  1,252,247,134,233,237,15,132,244,249,128,191,233,235,15,133,244,248,72,139,
+  7,131,0,1,255,64,199,128,253,240,11,233,237,252,233,244,255,248,2,72,137,
+  252,247,255,64,199,128,253,240,11,233,237,252,233,244,255,248,3,255,139,151,
+  233,132,210,15,132,243,255,139,151,233,132,210,15,132,244,251,255,139,151,
+  233,255,128,252,250,235,15,133,244,250,255,72,139,128,253,240,3,233,131,0,
+  1,255,64,199,128,253,240,11,233,237,252,233,244,255,254,1,64,199,128,253,
+  240,11,233,237,252,233,244,255,254,0,128,252,250,235,15,142,244,247,254,1,
+  128,252,250,235,15,132,244,247,255,72,139,135,233,72,139,128,233,72,139,176,
+  233,255,252,233,244,255,248,1,255,72,137,184,253,240,3,233,255,128,252,250,
+  235,15,133,244,247,72,139,0,72,129,192,239,255,64,139,144,253,240,11,233,
+  255,248,1,128,252,250,235,15,133,243,255,248,8,72,137,198,255,72,139,184,
+  253,240,3,233,131,47,1,15,133,244,247,255,73,139,134,233,72,139,144,233,72,
+  59,151,233,15,133,244,253,255,72,131,184,233,0,15,133,244,253,255,72,139,
+  128,233,72,133,192,15,140,244,253,255,128,188,253,7,233,235,15,132,244,253,
+  255,128,191,233,235,15,132,243,255,128,191,233,235,15,132,244,253,255,72,
+  139,184,253,240,3,233,72,131,191,233,0,15,133,244,247,72,141,191,233,254,
+  1,15,128,244,249,255,73,139,150,233,72,129,194,239,255,72,139,184,253,240,
+  3,233,72,131,191,233,0,15,133,244,247,72,141,135,233,254,1,73,139,142,233,
+  72,129,193,239,255,73,199,192,237,255,73,184,237,237,255,73,139,134,233,72,
+  139,144,233,72,59,151,233,15,133,244,251,255,72,139,128,233,72,133,192,15,
+  140,244,251,128,188,253,7,233,235,15,132,244,251,72,1,199,255,76,141,128,
+  253,240,3,233,255,73,137,192,240,131,255,64,128,184,253,240,11,233,235,15,
+  132,244,253,255,65,139,190,233,131,252,255,252,255,15,132,244,253,255,72,
+  139,128,253,240,3,233,72,141,184,233,72,139,176,233,255,72,139,128,253,240,
+  131,240,3,233,72,139,128,253,240,131,240,3,233,255,72,139,128,253,240,3,233,
+  72,139,128,233,255,64,199,128,253,240,11,233,237,131,7,1,255,65,128,190,233,
+  235,15,133,244,247,254,1,252,233,244,26,254,0,72,43,135,233,72,199,199,237,
+  72,153,72,252,247,252,255,255,72,141,61,244,250,252,255,36,7,255,252,255,
+  160,246,250,255,254,2,250,7,248,4,255,246,249,255,72,139,176,253,240,3,233,
+  255,128,190,233,235,15,133,244,249,255,72,139,182,233,252,233,244,248,254,
+  0,72,129,252,254,239,255,15,131,244,249,255,72,141,5,244,250,252,255,36,252,
+  240,255,252,255,36,252,245,246,250,255,72,139,176,253,240,3,233,254,1,64,
+  128,184,253,240,11,233,235,15,133,245,255,186,1,0,0,0,255,64,138,136,253,
+  240,11,233,211,226,252,247,194,237,15,132,244,253,255,72,185,237,237,73,137,
+  142,233,255,64,128,184,253,240,11,233,235,15,133,244,254,72,199,199,237,255,
+  252,255,214,255,73,139,134,233,72,141,136,233,255,15,142,245,252,233,245,
+  255,15,159,208,15,182,192,141,128,233,255,131,7,1,248,1,255,65,199,134,233,
+  0,0,0,0,255,72,139,184,253,240,3,233,65,139,134,233,255,137,198,72,193,230,
+  5,72,3,183,233,248,1,57,135,233,255,15,134,244,249,255,131,192,1,255,72,129,
+  198,239,252,233,244,1,248,3,255,65,137,134,233,255,72,131,190,233,0,15,132,
+  244,248,255,72,139,134,233,255,72,137,128,253,240,3,233,252,247,128,233,237,
+  15,132,244,247,255,64,199,128,253,240,11,233,237,252,233,244,249,248,1,131,
+  0,1,255,73,139,190,233,72,139,135,233,72,133,192,15,132,244,255,255,72,169,
+  237,15,133,244,255,255,72,133,192,15,133,244,8,252,233,244,11,254,0,15,149,
+  208,15,182,192,141,128,233,255,72,139,136,253,240,3,233,73,137,142,233,255,
+  64,139,128,253,240,11,233,255,73,141,190,233,190,237,255,128,191,233,235,
+  15,133,243,255
+};
+
+#line 140 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.globals zend_lb
+enum {
+  zend_lbinterrupt_handler,
+  zend_lbexception_handler,
+  zend_lbexception_handler_undef,
+  zend_lbleave_function_handler,
+  zend_lbleave_throw_handler,
+  zend_lbicall_throw_handler,
+  zend_lbthrow_cannot_pass_by_ref,
+  zend_lbundefined_offset_ex,
+  zend_lbundefined_offset,
+  zend_lbundefined_index_ex,
+  zend_lbundefined_index,
+  zend_lbcannot_add_element_ex,
+  zend_lbcannot_add_element,
+  zend_lbundefined_function,
+  zend_lbnegative_shift,
+  zend_lbmod_by_zero,
+  zend_lbinvalid_this,
+  zend_lbone,
+  zend_lbhybrid_runtime_jit,
+  zend_lbhybrid_profile_jit,
+  zend_lbhybrid_hot_code,
+  zend_lbhybrid_func_hot_counter,
+  zend_lbhybrid_loop_hot_counter,
+  zend_lbhybrid_hot_trace,
+  zend_lbhybrid_func_trace_counter,
+  zend_lbhybrid_ret_trace_counter,
+  zend_lbhybrid_loop_trace_counter,
+  zend_lbtrace_halt,
+  zend_lbtrace_exit,
+  zend_lbtrace_escape,
+  zend_lbcontext_threaded_call,
+  zend_lbassign_const,
+  zend_lbassign_tmp,
+  zend_lbassign_var,
+  zend_lbassign_cv_noref,
+  zend_lbassign_cv,
+  zend_lb_MAX
+};
+#line 141 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//|.section code, cold_code, jmp_table
+#define DASM_SECTION_CODE	0
+#define DASM_SECTION_COLD_CODE	1
+#define DASM_SECTION_JMP_TABLE	2
+#define DASM_MAXSECTION		3
+#line 142 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+static void* dasm_labels[zend_lb_MAX];
+
+#if ZTS
+static size_t tsrm_ls_cache_tcb_offset = 0;
+static size_t tsrm_tls_index;
+static size_t tsrm_tls_offset;
+#endif
+
+#define IS_32BIT(addr) (((uintptr_t)(addr)) <= 0x7fffffff)
+
+#define IS_SIGNED_32BIT(val) ((((intptr_t)(val)) <= 0x7fffffff) && (((intptr_t)(val)) >= (-2147483647 - 1)))
+
+#define CAN_USE_AVX() (JIT_G(opt_flags) & allowed_opt_flags & ZEND_JIT_CPU_AVX)
+
+/* Not Implemented Yet */
+//|.macro NIY
+//||	//ZEND_ASSERT(0);
+//|	int3
+//|.endmacro
+
+//|.macro NIY_STUB
+//||	//ZEND_ASSERT(0);
+//|	int3
+//|.endmacro
+
+//|.macro ADD_HYBRID_SPAD
+//||#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+//|		add r4, HYBRID_SPAD
+//||#endif
+//|.endmacro
+
+//|.macro SUB_HYBRID_SPAD
+//||#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+//|		sub r4, HYBRID_SPAD
+//||#endif
+//|.endmacro
+
+//|.macro LOAD_ADDR, reg, addr
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			mov reg, ((ptrdiff_t)addr)    // 0x48 0xc7 0xc0 <imm-32-bit>
+//||		} else {
+//|			mov64 reg, ((ptrdiff_t)addr)  // 0x48 0xb8 <imm-64-bit>
+//||		}
+//|	.else
+//|		mov reg, ((ptrdiff_t)addr)
+//|	.endif
+//|.endmacro
+
+//|.macro LOAD_TSRM_CACHE, reg
+//|	.if X64WIN
+//|		gs
+//|		mov reg, aword [0x58]
+//|		mov reg, aword [reg+tsrm_tls_index]
+//|		mov reg, aword [reg+tsrm_tls_offset]
+//|	.elif WIN
+//|		fs
+//|		mov reg, aword [0x2c]
+//|		mov reg, aword [reg+tsrm_tls_index]
+//|		mov reg, aword [reg+tsrm_tls_offset]
+//|	.elif X64APPLE
+//|		gs
+//||		if (tsrm_ls_cache_tcb_offset) {
+//|			mov reg, aword [tsrm_ls_cache_tcb_offset]
+//||		} else {
+//|			mov reg, aword [tsrm_tls_index]
+//|			mov reg, aword [reg+tsrm_tls_offset]
+//||		}
+//|	.elif X64
+//|		fs
+//||		if (tsrm_ls_cache_tcb_offset) {
+//|			mov reg, aword [tsrm_ls_cache_tcb_offset]
+//||		} else {
+//|			mov reg, [0x8]
+//|			mov reg, aword [reg+tsrm_tls_index]
+//|			mov reg, aword [reg+tsrm_tls_offset]
+//||		}
+//|	.else
+//|		gs
+//||		if (tsrm_ls_cache_tcb_offset) {
+//|			mov reg, aword [tsrm_ls_cache_tcb_offset]
+//||		} else {
+//|			mov reg, [0x4]
+//|			mov reg, aword [reg+tsrm_tls_index]
+//|			mov reg, aword [reg+tsrm_tls_offset]
+//||		}
+//|	.endif
+//|.endmacro
+
+//|.macro LOAD_ADDR_ZTS, reg, struct, field
+//|	.if ZTS
+//|		LOAD_TSRM_CACHE reg
+//|		lea reg, aword [reg + (struct.._offset + offsetof(zend_..struct, field))]
+//|	.else
+//|		LOAD_ADDR reg, &struct.field
+//|	.endif
+//|.endmacro
+
+//|.macro PUSH_ADDR, addr, tmp_reg
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			push ((ptrdiff_t)addr)
+//||		} else {
+//|			mov64 tmp_reg, ((ptrdiff_t)addr)
+//|			push tmp_reg
+//||		}
+//|	.else
+//|		push ((ptrdiff_t)addr)
+//|	.endif
+//|.endmacro
+
+//|.macro ADDR_STORE, mem, addr, tmp_reg
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			mov mem, ((ptrdiff_t)addr)
+//||		} else {
+//|			mov64 tmp_reg, ((ptrdiff_t)addr)
+//|			mov mem, tmp_reg
+//||		}
+//|	.else
+//|		mov mem, ((ptrdiff_t)addr)
+//|	.endif
+//|.endmacro
+
+//|.macro ADDR_CMP, mem, addr, tmp_reg
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			cmp mem, ((ptrdiff_t)addr)
+//||		} else {
+//|			mov64 tmp_reg, ((ptrdiff_t)addr)
+//|			cmp mem, tmp_reg
+//||		}
+//|	.else
+//|		cmp mem, ((ptrdiff_t)addr)
+//|	.endif
+//|.endmacro
+
+//|.macro PUSH_ADDR_ZTS, struct, field, tmp_reg
+//|	.if ZTS
+//|		LOAD_TSRM_CACHE tmp_reg
+//|		lea tmp_reg, aword [tmp_reg + (struct.._offset + offsetof(zend_..struct, field))]
+//|		push tmp_reg
+//|	.else
+//|		PUSH_ADDR &struct.field, tmp_reg
+//|	.endif
+//|.endmacro
+
+//|.macro _MEM_OP, mem_ins, prefix, addr, op2, tmp_reg
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			mem_ins prefix [addr], op2
+//||		} else {
+//|			mov64 tmp_reg, ((ptrdiff_t)addr)
+//|			mem_ins prefix [tmp_reg], op2
+//||		}
+//|	.else
+//|		mem_ins prefix [addr], op2
+//|	.endif
+//|.endmacro
+
+//|.macro MEM_LOAD_OP, mem_ins, reg, prefix, addr, tmp_reg
+//|	.if X64
+//||		if (IS_SIGNED_32BIT(addr)) {
+//|			mem_ins reg, prefix [addr]
+//||		} else {
+//|			mov64 tmp_reg, ((ptrdiff_t)addr)
+//|			mem_ins reg, prefix [tmp_reg]
+//||		}
+//|	.else
+//|		mem_ins reg, prefix [addr]
+//|	.endif
+//|.endmacro
+
+//|.macro MEM_LOAD, op1, prefix, addr, tmp_reg
+//|	MEM_LOAD_OP mov, op1, prefix, addr, tmp_reg
+//|.endmacro
+
+//|.macro _MEM_OP_ZTS, mem_ins, prefix, struct, field, op2, tmp_reg
+//|	.if ZTS
+//|		LOAD_TSRM_CACHE tmp_reg
+//|		mem_ins prefix [tmp_reg+(struct.._offset+offsetof(zend_..struct, field))], op2
+//|	.else
+//|		_MEM_OP mem_ins, prefix, &struct.field, op2, tmp_reg
+//|	.endif
+//|.endmacro
+
+//|.macro MEM_STORE_ZTS, prefix, struct, field, op2, tmp_reg
+//|	_MEM_OP_ZTS mov, prefix, struct, field, op2, tmp_reg
+//|.endmacro
+
+//|.macro MEM_CMP_ZTS, prefix, struct, field, op2, tmp_reg
+//|	_MEM_OP_ZTS cmp, prefix, struct, field, op2, tmp_reg
+//|.endmacro
+
+//|.macro MEM_UPDATE_ZTS, mem_ins, prefix, struct, field, op2, tmp_reg
+//|	_MEM_OP_ZTS mem_ins, prefix, struct, field, op2, tmp_reg
+//|.endmacro
+
+//|.macro MEM_LOAD_OP_ZTS, mem_ins, reg, prefix, struct, field, tmp_reg
+//|	.if ZTS
+//|		LOAD_TSRM_CACHE tmp_reg
+//|		mem_ins reg, prefix [tmp_reg+(struct.._offset+offsetof(zend_..struct, field))]
+//|	.else
+//|		MEM_LOAD_OP mem_ins, reg, prefix, &struct.field, tmp_reg
+//|	.endif
+//|.endmacro
+
+//|.macro MEM_LOAD_ZTS, reg, prefix, struct, field, tmp_reg
+//|	MEM_LOAD_OP_ZTS mov, reg, prefix, struct, field, tmp_reg
+//|.endmacro
+
+//|.macro EXT_CALL, func, tmp_reg
+//|	.if X64
+//||		if (IS_32BIT(dasm_end) && IS_32BIT(func)) {
+//|			call qword &func
+//||		} else {
+//|			LOAD_ADDR tmp_reg, func
+//|			call tmp_reg
+//||		}
+//|	.else
+//|		call dword &func
+//|	.endif
+//|.endmacro
+
+//|.macro EXT_JMP, func, tmp_reg
+//|	.if X64
+//||		if (IS_32BIT(dasm_end) && IS_32BIT(func)) {
+//|			jmp qword &func
+//||		} else {
+//|			LOAD_ADDR tmp_reg, func
+//|			jmp tmp_reg
+//||		}
+//|	.else
+//|		jmp dword &func
+//|	.endif
+//|.endmacro
+
+//|.macro SAVE_IP
+//||	if (GCC_GLOBAL_REGS) {
+//|		mov aword EX->opline, IP
+//||	}
+//|.endmacro
+
+//|.macro LOAD_IP
+//||	if (GCC_GLOBAL_REGS) {
+//|		mov IP, aword EX->opline
+//||	}
+//|.endmacro
+
+//|.macro LOAD_IP_ADDR, addr
+//||	if (GCC_GLOBAL_REGS) {
+//|		LOAD_ADDR IP, addr
+//||	} else {
+//|		ADDR_STORE aword EX->opline, addr, RX
+//||	}
+//|.endmacro
+
+//|.macro LOAD_IP_ADDR_ZTS, struct, field
+//|	.if ZTS
+//||		if (GCC_GLOBAL_REGS) {
+//|			LOAD_TSRM_CACHE IP
+//|			mov IP, aword [IP + (struct.._offset + offsetof(zend_..struct, field))]
+//||		} else {
+//|			LOAD_TSRM_CACHE RX
+//|			lea RX, aword [RX + (struct.._offset + offsetof(zend_..struct, field))]
+//|			mov aword EX->opline, RX
+//||		}
+//|	.else
+//|		LOAD_IP_ADDR &struct.field
+//|	.endif
+//|.endmacro
+
+//|.macro GET_IP, reg
+//||	if (GCC_GLOBAL_REGS) {
+//|		mov reg, IP
+//||	} else {
+//|		mov reg, aword EX->opline
+//||	}
+//|.endmacro
+
+//|.macro ADD_IP, val
+//||	if (GCC_GLOBAL_REGS) {
+//|		add IP, val
+//||	} else {
+//|		add aword EX->opline, val
+//||	}
+//|.endmacro
+
+//|.macro JMP_IP
+//||	if (GCC_GLOBAL_REGS) {
+//|		jmp aword [IP]
+//||	} else {
+//|		mov r0, aword EX:FCARG1a->opline
+//|		jmp aword [r0]
+//||	}
+//|.endmacro
+
+/* In 64-bit build we compare only low 32-bits.
+ * x86_64 cmp instruction doesn't support immediate 64-bit operand, and full
+ * comparison would require an additional load of 64-bit address into register.
+ * This is not a problem at all, while JIT buffer size is less than 4GB.
+ */
+//|.macro CMP_IP, addr
+//||	if (GCC_GLOBAL_REGS) {
+//|		cmp IPl, addr
+//||	} else {
+//|		cmp dword EX->opline, addr
+//||	}
+//|.endmacro
+
+//|.macro LOAD_ZVAL_ADDR, reg, addr
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		LOAD_ADDR reg, Z_ZV(addr)
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//||		if (Z_OFFSET(addr)) {
+//|			lea reg, qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||		} else {
+//|			mov reg, Ra(Z_REG(addr))
+//||		}
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro PUSH_ZVAL_ADDR, addr, tmp_reg
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		PUSH_ADDR Z_ZV(addr), tmp_reg
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//||		if (Z_OFFSET(addr)) {
+//|			lea tmp_reg, qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//|			push tmp_reg
+//||		} else {
+//|			push Ra(Z_REG(addr))
+//||		}
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro GET_Z_TYPE_INFO, reg, zv
+//|	mov reg, dword [zv+offsetof(zval,u1.type_info)]
+//|.endmacro
+
+//|.macro SET_Z_TYPE_INFO, zv, type
+//|	mov dword [zv+offsetof(zval,u1.type_info)], type
+//|.endmacro
+
+//|.macro GET_ZVAL_TYPE, reg, addr
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov reg, byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval,u1.v.type)]
+//|.endmacro
+
+//|.macro GET_ZVAL_TYPE_INFO, reg, addr
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov reg, dword [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval,u1.type_info)]
+//|.endmacro
+
+//|.macro SET_ZVAL_TYPE_INFO, addr, type
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov dword [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval,u1.type_info)], type
+//|.endmacro
+
+//|.macro GET_Z_PTR, reg, zv
+//|	mov reg, aword [zv]
+//|.endmacro
+
+//|.macro GET_Z_W2, reg, zv
+//|	mov reg, dword [zv+4]
+//|.endmacro
+
+//|.macro SET_Z_W2, zv, reg
+//|	mov dword [zv+4], reg
+//|.endmacro
+
+//|.macro GET_ZVAL_PTR, reg, addr
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov reg, aword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//|.endmacro
+
+//|.macro SET_ZVAL_PTR, addr, val
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov aword [Ra(Z_REG(addr))+Z_OFFSET(addr)], val
+//|.endmacro
+
+//|.macro GET_ZVAL_W2, reg, addr
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov reg, dword [Ra(Z_REG(addr))+Z_OFFSET(addr)+4]
+//|.endmacro
+
+//|.macro SET_ZVAL_W2, addr, val
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	mov dword [Ra(Z_REG(addr))+Z_OFFSET(addr)+4], val
+//|.endmacro
+
+//|.macro UNDEF_OPLINE_RESULT
+//|	mov r0, EX->opline
+//|	mov eax, dword OP:r0->result.var
+//|	SET_Z_TYPE_INFO FP + r0, IS_UNDEF
+//|.endmacro
+
+//|.macro UNDEF_OPLINE_RESULT_IF_USED
+//|	mov r0, EX->opline
+//|	test byte OP:r0->result_type, (IS_TMP_VAR|IS_VAR)
+//|	jz >1
+//|	mov eax, dword OP:r0->result.var
+//|	SET_Z_TYPE_INFO FP + r0, IS_UNDEF
+//|1:
+//|.endmacro
+
+//|.macro SSE_AVX_INS, sse_ins, avx_ins, op1, op2
+//||	if (CAN_USE_AVX()) {
+//|		avx_ins op1, op2
+//||	} else {
+//|		sse_ins op1, op2
+//||	}
+//|.endmacro
+
+//|.macro SSE_OP, sse_ins, reg, addr, tmp_reg
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		MEM_LOAD_OP sse_ins, xmm(reg-ZREG_XMM0), qword, Z_ZV(addr), tmp_reg
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|		sse_ins xmm(reg-ZREG_XMM0), qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//|		sse_ins xmm(reg-ZREG_XMM0), xmm(Z_REG(addr)-ZREG_XMM0)
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro DOUBLE_CMP, reg, addr
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		.if X64
+//||			if (IS_SIGNED_32BIT(Z_ZV(addr))) {
+//|				SSE_AVX_INS ucomisd, vucomisd, xmm(reg-ZREG_XMM0), qword [Z_ZV(addr)]
+//||			} else {
+//|				LOAD_ADDR r0, Z_ZV(addr)
+//|				SSE_AVX_INS ucomisd, vucomisd, xmm(reg-ZREG_XMM0), qword [r0]
+//||			}
+//|		.else
+//|			SSE_AVX_INS ucomisd, vucomisd, xmm(reg-ZREG_XMM0), qword [Z_ZV(addr)]
+//|		.endif
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|		SSE_AVX_INS ucomisd, vucomisd, xmm(reg-ZREG_XMM0), qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//|		SSE_AVX_INS ucomisd, vucomisd, xmm(reg-ZREG_XMM0), xmm(Z_REG(addr)-ZREG_XMM0)
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro DOUBLE_GET_LONG, reg, lval, tmp_reg
+//||		if (lval == 0) {
+//||			if (CAN_USE_AVX()) {
+//|				vxorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//||			} else {
+//|				xorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//||			}
+//||		} else {
+//|.if X64
+//||			if (!IS_SIGNED_32BIT(lval)) {
+//|				mov64 Ra(tmp_reg), lval
+//||			} else {
+//|				mov Ra(tmp_reg), lval
+//||			}
+//|.else
+//|			mov Ra(tmp_reg), lval
+//|.endif
+//||			if (CAN_USE_AVX()) {
+//|				vxorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|				vcvtsi2sd, xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), Ra(tmp_reg)
+//||			} else {
+//|				xorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|				cvtsi2sd, xmm(reg-ZREG_XMM0), Ra(tmp_reg)
+//||			}
+//||		}
+//|.endmacro
+
+//|.macro DOUBLE_GET_ZVAL_LVAL, reg, addr, tmp_reg
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		DOUBLE_GET_LONG reg, Z_LVAL_P(Z_ZV(addr)), tmp_reg
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//||		if (CAN_USE_AVX()) {
+//|			vxorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|			vcvtsi2sd xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), aword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||		} else {
+//|			xorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|			cvtsi2sd xmm(reg-ZREG_XMM0), aword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||		}
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//||		if (CAN_USE_AVX()) {
+//|			vxorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|			vcvtsi2sd xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0), Ra(Z_REG(addr))
+//||		} else {
+//|			xorps xmm(reg-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//|			cvtsi2sd xmm(reg-ZREG_XMM0), Ra(Z_REG(addr))
+//||		}
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro DOUBLE_GET_ZVAL_DVAL, reg, addr
+//||	if (Z_MODE(addr) != IS_REG || reg != Z_REG(addr)) {
+//||		if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|			.if X64
+//||				if (IS_SIGNED_32BIT(Z_ZV(addr))) {
+//|					SSE_AVX_INS movsd, vmovsd, xmm(reg-ZREG_XMM0), qword [Z_ZV(addr)]
+//||				} else {
+//|					LOAD_ADDR r0, Z_ZV(addr)
+//|					SSE_AVX_INS movsd, vmovsd, xmm(reg-ZREG_XMM0), qword [r0]
+//||				}
+//|			.else
+//|				SSE_AVX_INS movsd, vmovsd, xmm(reg-ZREG_XMM0), qword [Z_ZV(addr)]
+//|			.endif
+//||		} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|			SSE_AVX_INS movsd, vmovsd, xmm(reg-ZREG_XMM0), qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||		} else if (Z_MODE(addr) == IS_REG) {
+//|			SSE_AVX_INS movaps, vmovaps, xmm(reg-ZREG_XMM0), xmm(Z_REG(addr)-ZREG_XMM0)
+//||		} else {
+//||			ZEND_UNREACHABLE();
+//||		}
+//||	}
+//|.endmacro
+
+//|.macro SSE_MATH, opcode, reg, addr, tmp_reg
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			SSE_OP addsd, reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_SUB:
+//|			SSE_OP subsd, reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_MUL:
+//|			SSE_OP mulsd, reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_DIV:
+//|			SSE_OP divsd, reg, addr, tmp_reg
+//||			break;
+//||	}
+//|.endmacro
+
+//|.macro SSE_MATH_REG, opcode, dst_reg, src_reg
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			addsd xmm(dst_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_SUB:
+//|			subsd xmm(dst_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_MUL:
+//|			mulsd xmm(dst_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_DIV:
+//|			divsd xmm(dst_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||	}
+//|.endmacro
+
+//|.macro DOUBLE_SET_ZVAL_DVAL, addr, reg
+//||	if (Z_MODE(addr) == IS_REG) {
+//||		if (reg != Z_REG(addr)) {
+//|			SSE_AVX_INS movaps, vmovaps, xmm(Z_REG(addr)-ZREG_XMM0), xmm(reg-ZREG_XMM0)
+//||		}
+//||	} else {
+//||		ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|		SSE_AVX_INS movsd, vmovsd, qword [Ra(Z_REG(addr))+Z_OFFSET(addr)], xmm(reg-ZREG_XMM0)
+//||	}
+//|.endmacro
+
+//|.macro AVX_OP, avx_ins, reg, op1_reg, addr, tmp_reg
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		.if X64
+//||			if (IS_SIGNED_32BIT(Z_ZV(addr))) {
+//|				avx_ins xmm(reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), qword [Z_ZV(addr)]
+//||			} else {
+//|				mov64 tmp_reg, ((ptrdiff_t)Z_ZV(addr))
+//|				avx_ins xmm(reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), qword [tmp_reg]
+//||			}
+//|		.else
+//|			avx_ins xmm(reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), qword [addr]
+//|		.endif
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|		avx_ins xmm(reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), qword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//|		avx_ins xmm(reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), xmm(Z_REG(addr)-ZREG_XMM0)
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro AVX_MATH, opcode, reg, op1_reg, addr, tmp_reg
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			AVX_OP vaddsd, reg, op1_reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_SUB:
+//|			AVX_OP vsubsd, reg, op1_reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_MUL:
+//|			AVX_OP vmulsd, reg, op1_reg, addr, tmp_reg
+//||			break;
+//||		case ZEND_DIV:
+//|			AVX_OP vdivsd, reg, op1_reg, addr, tmp_reg
+//||			break;
+//||	}
+//|.endmacro
+
+//|.macro AVX_MATH_REG, opcode, dst_reg, op1_reg, src_reg
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			vaddsd xmm(dst_reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_SUB:
+//|			vsubsd xmm(dst_reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_MUL:
+//|			vmulsd xmm(dst_reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||		case ZEND_DIV:
+//|			vdivsd xmm(dst_reg-ZREG_XMM0), xmm(op1_reg-ZREG_XMM0), xmm(src_reg-ZREG_XMM0)
+//||			break;
+//||	}
+//|.endmacro
+
+//|.macro LONG_OP, long_ins, reg, addr
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//|		.if X64
+//||			if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(addr)))) {
+//||				if (reg != ZREG_R0) {
+//|					mov64 r0, Z_LVAL_P(Z_ZV(addr))
+//|					long_ins Ra(reg), r0
+//||				} else {
+//|					mov64 r1, Z_LVAL_P(Z_ZV(addr))
+//|					long_ins Ra(reg), r1
+//||				}
+//||			} else {
+//|				long_ins Ra(reg), Z_LVAL_P(Z_ZV(addr))
+//||			}
+//|		.else
+//|			long_ins Ra(reg), Z_LVAL_P(Z_ZV(addr))
+//|		.endif
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|		long_ins Ra(reg), aword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//|		long_ins Ra(reg), Ra(Z_REG(addr))
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro LONG_OP_WITH_32BIT_CONST, long_ins, op1_addr, lval
+//||	if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+//|		long_ins aword [Ra(Z_REG(op1_addr))+Z_OFFSET(op1_addr)], lval
+//||	} else if (Z_MODE(op1_addr) == IS_REG) {
+//|		long_ins Ra(Z_REG(op1_addr)), lval
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro LONG_OP_WITH_CONST, long_ins, op1_addr, lval
+//||	if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+//|	   .if X64
+//||			if (!IS_SIGNED_32BIT(lval)) {
+//|				mov64 r0, lval
+//|				long_ins aword [Ra(Z_REG(op1_addr))+Z_OFFSET(op1_addr)], r0
+//||			} else {
+//|				long_ins aword [Ra(Z_REG(op1_addr))+Z_OFFSET(op1_addr)], lval
+//||			}
+//|		.else
+//|			long_ins aword [Ra(Z_REG(op1_addr))+Z_OFFSET(op1_addr)], lval
+//|		.endif
+//||	} else if (Z_MODE(op1_addr) == IS_REG) {
+//|	   .if X64
+//||			if (!IS_SIGNED_32BIT(lval)) {
+//|				mov64 r0, lval
+//|				long_ins Ra(Z_REG(op1_addr)), r0
+//||			} else {
+//|				long_ins Ra(Z_REG(op1_addr)), lval
+//||			}
+//|		.else
+//|			long_ins Ra(Z_REG(op1_addr)), lval
+//|		.endif
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro GET_ZVAL_LVAL, reg, addr
+//||	if (Z_MODE(addr) == IS_CONST_ZVAL) {
+//||		if (Z_LVAL_P(Z_ZV(addr)) == 0) {
+//|			xor Ra(reg), Ra(reg)
+//||		} else {
+//|			.if X64
+//||				if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(addr)))) {
+//|					mov64 Ra(reg), Z_LVAL_P(Z_ZV(addr))
+//||				} else {
+//|					mov Ra(reg), Z_LVAL_P(Z_ZV(addr))
+//||				}
+//|			.else
+//|				mov Ra(reg), Z_LVAL_P(Z_ZV(addr))
+//|			.endif
+//||		}
+//||	} else if (Z_MODE(addr) == IS_MEM_ZVAL) {
+//|		mov Ra(reg), aword [Ra(Z_REG(addr))+Z_OFFSET(addr)]
+//||	} else if (Z_MODE(addr) == IS_REG) {
+//||		if (reg != Z_REG(addr)) {
+//|			mov Ra(reg), Ra(Z_REG(addr))
+//||		}
+//||	} else {
+//||		ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro LONG_MATH, opcode, reg, addr
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			LONG_OP add, reg, addr
+//||			break;
+//||		case ZEND_SUB:
+//|			LONG_OP sub, reg, addr
+//||			break;
+//||		case ZEND_MUL:
+//|			LONG_OP imul, reg, addr
+//||			break;
+//||		case ZEND_BW_OR:
+//|			LONG_OP or, reg, addr
+//||			break;
+//||		case ZEND_BW_AND:
+//|			LONG_OP and, reg, addr
+//||			break;
+//||		case ZEND_BW_XOR:
+//|			LONG_OP xor, reg, addr
+//||			break;
+//||		default:
+//||			ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro LONG_MATH_REG, opcode, dst_reg, src_reg
+//||	switch (opcode) {
+//||		case ZEND_ADD:
+//|			add dst_reg, src_reg
+//||			break;
+//||		case ZEND_SUB:
+//|			sub dst_reg, src_reg
+//||			break;
+//||		case ZEND_MUL:
+//|			imul dst_reg, src_reg
+//||			break;
+//||		case ZEND_BW_OR:
+//|			or dst_reg, src_reg
+//||			break;
+//||		case ZEND_BW_AND:
+//|			and dst_reg, src_reg
+//||			break;
+//||		case ZEND_BW_XOR:
+//|			xor dst_reg, src_reg
+//||			break;
+//||		default:
+//||			ZEND_UNREACHABLE();
+//||	}
+//|.endmacro
+
+//|.macro SET_ZVAL_LVAL, addr, lval
+//||	if (Z_MODE(addr) == IS_REG) {
+//|		mov Ra(Z_REG(addr)), lval
+//||	} else {
+//||		ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|		mov aword [Ra(Z_REG(addr))+Z_OFFSET(addr)], lval
+//||	}
+//|.endmacro
+
+//|.macro ZVAL_COPY_CONST, dst_addr, dst_info, dst_def_info, zv, tmp_reg
+//||	if (Z_TYPE_P(zv) > IS_TRUE) {
+//||		if (Z_TYPE_P(zv) == IS_DOUBLE) {
+//||			zend_reg dst_reg = (Z_MODE(dst_addr) == IS_REG) ? Z_REG(dst_addr) : ZREG_XMM0;
+//||			if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+//||				if (CAN_USE_AVX()) {
+//|					vxorps xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0)
+//||				} else {
+//|					xorps xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0)
+//||				}
+//|			.if X64
+//||			} else if (!IS_SIGNED_32BIT(zv)) {
+//|				mov64 Ra(tmp_reg), ((uintptr_t)zv)
+//|				SSE_AVX_INS movsd, vmovsd, xmm(dst_reg-ZREG_XMM0), qword [Ra(tmp_reg)]
+//|			.endif
+//||			} else {
+//|				SSE_AVX_INS movsd, vmovsd, xmm(dst_reg-ZREG_XMM0), qword [((uint32_t)(uintptr_t)zv)]
+//||			}
+//|			DOUBLE_SET_ZVAL_DVAL dst_addr, dst_reg
+//||		} else if (Z_TYPE_P(zv) == IS_LONG && dst_def_info == MAY_BE_DOUBLE) {
+//||			zend_reg dst_reg = (Z_MODE(dst_addr) == IS_REG) ? Z_REG(dst_addr) : ZREG_XMM0;
+//|			DOUBLE_GET_LONG dst_reg, Z_LVAL_P(zv), ZREG_R0
+//|			DOUBLE_SET_ZVAL_DVAL dst_addr, dst_reg
+//||		} else if (Z_LVAL_P(zv) == 0 && Z_MODE(dst_addr) == IS_REG) {
+//|			xor Ra(Z_REG(dst_addr)), Ra(Z_REG(dst_addr))
+//||		} else {
+//|			.if X64
+//||				if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+//||					if (Z_MODE(dst_addr) == IS_REG) {
+//|						mov64 Ra(Z_REG(dst_addr)), ((uintptr_t)Z_LVAL_P(zv))
+//||					} else {
+//|						mov64 Ra(tmp_reg), ((uintptr_t)Z_LVAL_P(zv))
+//|						SET_ZVAL_LVAL dst_addr, Ra(tmp_reg)
+//||					}
+//||				} else {
+//|					SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//||				}
+//|			.else
+//|				SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//|			.endif
+//||		}
+//||	}
+//||	if (Z_MODE(dst_addr) == IS_MEM_ZVAL) {
+//||		if (dst_def_info == MAY_BE_DOUBLE) {
+//||			if ((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+//|				SET_ZVAL_TYPE_INFO dst_addr, IS_DOUBLE
+//||			}
+//||		} else if (((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (dst_info & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+//|			SET_ZVAL_TYPE_INFO dst_addr, Z_TYPE_INFO_P(zv)
+//||		}
+//||	}
+//|.endmacro
+
+//|.macro ZVAL_COPY_CONST_2, dst_addr, res_addr, dst_info, dst_def_info, zv, tmp_reg
+//||	if (Z_TYPE_P(zv) > IS_TRUE) {
+//||		if (Z_TYPE_P(zv) == IS_DOUBLE) {
+//||			zend_reg dst_reg = (Z_MODE(dst_addr) == IS_REG) ?
+//||				Z_REG(dst_addr) : ((Z_MODE(res_addr) == IS_REG) ? Z_MODE(res_addr) : ZREG_XMM0);
+//||			if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+//||				if (CAN_USE_AVX()) {
+//|					vxorps xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0)
+//||				} else {
+//|					xorps xmm(dst_reg-ZREG_XMM0), xmm(dst_reg-ZREG_XMM0)
+//||				}
+//|			.if X64
+//||			} else if (!IS_SIGNED_32BIT(zv)) {
+//|				mov64 Ra(tmp_reg), ((uintptr_t)zv)
+//|				SSE_AVX_INS movsd, vmovsd, xmm(dst_reg-ZREG_XMM0), qword [Ra(tmp_reg)]
+//|			.endif
+//||			} else {
+//|				SSE_AVX_INS movsd, vmovsd, xmm(dst_reg-ZREG_XMM0), qword [((uint32_t)(uintptr_t)zv)]
+//||			}
+//|			DOUBLE_SET_ZVAL_DVAL dst_addr, ZREG_XMM0
+//|			DOUBLE_SET_ZVAL_DVAL res_addr, ZREG_XMM0
+//||		} else if (Z_TYPE_P(zv) == IS_LONG && dst_def_info == MAY_BE_DOUBLE) {
+//||			if (Z_MODE(dst_addr) == IS_REG) {
+//|				DOUBLE_GET_LONG Z_REG(dst_addr), Z_LVAL_P(zv), ZREG_R0
+//|				DOUBLE_SET_ZVAL_DVAL res_addr, Z_REG(dst_addr)
+//||			} else if (Z_MODE(res_addr) == IS_REG) {
+//|				DOUBLE_GET_LONG Z_REG(res_addr), Z_LVAL_P(zv), ZREG_R0
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, Z_REG(res_addr)
+//||			} else {
+//|				DOUBLE_GET_LONG ZREG_XMM0, Z_LVAL_P(zv), ZREG_R0
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, ZREG_XMM0
+//|				DOUBLE_SET_ZVAL_DVAL res_addr, ZREG_XMM0
+//||			}
+//||		} else if (Z_LVAL_P(zv) == 0 && (Z_MODE(dst_addr) == IS_REG || Z_MODE(res_addr) == IS_REG)) {
+//||				if (Z_MODE(dst_addr) == IS_REG) {
+//|					xor Ra(Z_REG(dst_addr)), Ra(Z_REG(dst_addr))
+//|					SET_ZVAL_LVAL res_addr, Ra(Z_REG(dst_addr))
+//||				} else {
+//|					xor Ra(Z_REG(res_addr)), Ra(Z_REG(res_addr))
+//|					SET_ZVAL_LVAL dst_addr, Ra(Z_REG(res_addr))
+//||				}
+//||		} else {
+//|			.if X64
+//||				if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+//||					if (Z_MODE(dst_addr) == IS_REG) {
+//|						mov64 Ra(Z_REG(dst_addr)), ((uintptr_t)Z_LVAL_P(zv))
+//|						SET_ZVAL_LVAL res_addr, Ra(Z_REG(dst_addr))
+//||					} else if (Z_MODE(res_addr) == IS_REG) {
+//|						mov64 Ra(Z_REG(res_addr)), ((uintptr_t)Z_LVAL_P(zv))
+//|						SET_ZVAL_LVAL dst_addr, Ra(Z_REG(res_addr))
+//||					} else {
+//|						mov64 Ra(tmp_reg), ((uintptr_t)Z_LVAL_P(zv))
+//|						SET_ZVAL_LVAL dst_addr, Ra(tmp_reg)
+//|						SET_ZVAL_LVAL res_addr, Ra(tmp_reg)
+//||					}
+//||				} else if (Z_MODE(dst_addr) == IS_REG) {
+//|					SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL res_addr, Ra(Z_REG(dst_addr))
+//||				} else if (Z_MODE(res_addr) == IS_REG) {
+//|					SET_ZVAL_LVAL res_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL dst_addr, Ra(Z_REG(res_addr))
+//||				} else {
+//|					SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL res_addr, Z_LVAL_P(zv)
+//||				}
+//|			.else
+//||				if (Z_MODE(dst_addr) == IS_REG) {
+//|					SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL res_addr, Ra(Z_REG(dst_addr))
+//||				} else if (Z_MODE(res_addr) == IS_REG) {
+//|					SET_ZVAL_LVAL res_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL dst_addr, Ra(Z_REG(res_addr))
+//||				} else {
+//|					SET_ZVAL_LVAL dst_addr, Z_LVAL_P(zv)
+//|					SET_ZVAL_LVAL res_addr, Z_LVAL_P(zv)
+//||				}
+//|			.endif
+//||		}
+//||	}
+//||	if (Z_MODE(dst_addr) == IS_MEM_ZVAL) {
+//||		if (dst_def_info == MAY_BE_DOUBLE) {
+//||			if ((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+//|				SET_ZVAL_TYPE_INFO dst_addr, IS_DOUBLE
+//||			}
+//||		} else if (((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (dst_info & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+//|			SET_ZVAL_TYPE_INFO dst_addr, Z_TYPE_INFO_P(zv)
+//||		}
+//||	}
+//||	if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+//||		if (dst_def_info == MAY_BE_DOUBLE) {
+//|			SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+//||		} else {
+//|			SET_ZVAL_TYPE_INFO res_addr, Z_TYPE_INFO_P(zv)
+//||		}
+//||	}
+//|.endmacro
+
+/* the same as above, but "src" may overlap with "tmp_reg1" */
+//|.macro ZVAL_COPY_VALUE, dst_addr, dst_info, src_addr, src_info, tmp_reg1, tmp_reg2
+//|	ZVAL_COPY_VALUE_V dst_addr, dst_info, src_addr, src_info, tmp_reg1, tmp_reg2
+//||	if ((src_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+//||      !(src_info & MAY_BE_GUARD) &&
+//||		has_concrete_type(src_info & MAY_BE_ANY)) {
+//||		if (Z_MODE(dst_addr) == IS_MEM_ZVAL) {
+//||			if ((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (src_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+//||				zend_uchar type = concrete_type(src_info);
+//|				SET_ZVAL_TYPE_INFO dst_addr, type
+//||			}
+//||		}
+//||	} else {
+//|		GET_ZVAL_TYPE_INFO Rd(tmp_reg1), src_addr
+//|		SET_ZVAL_TYPE_INFO dst_addr, Rd(tmp_reg1)
+//||	}
+//|.endmacro
+
+//|.macro ZVAL_COPY_VALUE_V, dst_addr, dst_info, src_addr, src_info, tmp_reg1, tmp_reg2
+//||	if (src_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+//||		if ((src_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+//||			if (Z_MODE(src_addr) == IS_REG) {
+//||				if (Z_MODE(dst_addr) != IS_REG || Z_REG(dst_addr) != Z_REG(src_addr)) {
+//|					SET_ZVAL_LVAL dst_addr, Ra(Z_REG(src_addr))
+//||				}
+//||			} else if (Z_MODE(dst_addr) == IS_REG) {
+//|				GET_ZVAL_LVAL Z_REG(dst_addr), src_addr
+//||			} else {
+//|				GET_ZVAL_LVAL tmp_reg2, src_addr
+//|				SET_ZVAL_LVAL dst_addr, Ra(tmp_reg2)
+//||			}
+//||		} else if ((src_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+//||			if (Z_MODE(src_addr) == IS_REG) {
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, Z_REG(src_addr)
+//||			} else if (Z_MODE(dst_addr) == IS_REG) {
+//|				DOUBLE_GET_ZVAL_DVAL Z_REG(dst_addr), src_addr
+//||			} else {
+//|				DOUBLE_GET_ZVAL_DVAL ZREG_XMM0, src_addr
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, ZREG_XMM0
+//||			}
+//||		} else if (!(src_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+//|			GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|			SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//||		} else {
+//|			.if X64
+//|				GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|				SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|			.else
+//||				if ((tmp_reg1 == tmp_reg2 || tmp_reg1 == Z_REG(src_addr))) {
+//|					GET_ZVAL_W2 Ra(tmp_reg2), src_addr
+//|					SET_ZVAL_W2 dst_addr, Ra(tmp_reg2)
+//|					GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|					SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//||				} else {
+//|					GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|					GET_ZVAL_W2 Ra(tmp_reg1), src_addr
+//|					SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|					SET_ZVAL_W2 dst_addr, Ra(tmp_reg1)
+//||				}
+//|			.endif
+//||		}
+//||	}
+//|.endmacro
+
+//|.macro ZVAL_COPY_VALUE_2, dst_addr, dst_info, res_addr, src_addr, src_info, tmp_reg1, tmp_reg2
+//||	if (src_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+//||		if ((src_info & MAY_BE_ANY) == MAY_BE_LONG) {
+//||			if (Z_MODE(src_addr) == IS_REG) {
+//||				if (Z_MODE(dst_addr) != IS_REG || Z_REG(dst_addr) != Z_REG(src_addr)) {
+//|					SET_ZVAL_LVAL dst_addr, Ra(Z_REG(src_addr))
+//||				}
+//||				if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(src_addr)) {
+//|					SET_ZVAL_LVAL res_addr, Ra(Z_REG(src_addr))
+//||				}
+//||			} else if (Z_MODE(dst_addr) == IS_REG) {
+//|				GET_ZVAL_LVAL Z_REG(dst_addr), src_addr
+//||				if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(dst_addr)) {
+//|					SET_ZVAL_LVAL res_addr, Ra(Z_REG(dst_addr))
+//||				}
+//||			} else if (Z_MODE(res_addr) == IS_REG) {
+//|				GET_ZVAL_LVAL Z_REG(res_addr), src_addr
+//|				SET_ZVAL_LVAL dst_addr, Ra(Z_REG(res_addr))
+//||			} else {
+//|				GET_ZVAL_LVAL tmp_reg2, src_addr
+//|				SET_ZVAL_LVAL dst_addr, Ra(tmp_reg2)
+//|				SET_ZVAL_LVAL res_addr, Ra(tmp_reg2)
+//||			}
+//||		} else if ((src_info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+//||			if (Z_MODE(src_addr) == IS_REG) {
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, Z_REG(src_addr)
+//|				DOUBLE_SET_ZVAL_DVAL res_addr, Z_REG(src_addr)
+//||			} else if (Z_MODE(dst_addr) == IS_REG) {
+//|				DOUBLE_GET_ZVAL_DVAL Z_REG(dst_addr), src_addr
+//|				DOUBLE_SET_ZVAL_DVAL res_addr, Z_REG(dst_addr)
+//||			} else if (Z_MODE(res_addr) == IS_REG) {
+//|				DOUBLE_GET_ZVAL_DVAL Z_REG(res_addr), src_addr
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, Z_REG(res_addr)
+//||			} else {
+//|				DOUBLE_GET_ZVAL_DVAL ZREG_XMM0, src_addr
+//|				DOUBLE_SET_ZVAL_DVAL dst_addr, ZREG_XMM0
+//|				DOUBLE_SET_ZVAL_DVAL res_addr, ZREG_XMM0
+//||			}
+//||		} else if (!(src_info & MAY_BE_DOUBLE)) {
+//|			GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|			SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|			SET_ZVAL_PTR res_addr, Ra(tmp_reg2)
+//||		} else {
+//|			.if X64
+//|				GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|				SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|				SET_ZVAL_PTR res_addr, Ra(tmp_reg2)
+//|			.else
+//||				if (tmp_reg1 == tmp_reg2 || tmp_reg1 == Z_REG(src_addr)) {
+//|					GET_ZVAL_W2 Ra(tmp_reg2), src_addr
+//|					SET_ZVAL_W2 dst_addr, Ra(tmp_reg2)
+//|					SET_ZVAL_W2 res_addr, Ra(tmp_reg2)
+//|					GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|					SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|					SET_ZVAL_PTR res_addr, Ra(tmp_reg2)
+//||				} else {
+//|					GET_ZVAL_PTR Ra(tmp_reg2), src_addr
+//|					GET_ZVAL_W2 Ra(tmp_reg1), src_addr
+//|					SET_ZVAL_PTR dst_addr, Ra(tmp_reg2)
+//|					SET_ZVAL_PTR res_addr, Ra(tmp_reg2)
+//|					SET_ZVAL_W2 dst_addr, Ra(tmp_reg1)
+//|					SET_ZVAL_W2 res_addr, Ra(tmp_reg1)
+//||				}
+//|			.endif
+//||		}
+//||	}
+//||	if ((src_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+//||	    has_concrete_type(src_info & MAY_BE_ANY)) {
+//||		zend_uchar type = concrete_type(src_info);
+//||		if (Z_MODE(dst_addr) == IS_MEM_ZVAL) {
+//||			if ((dst_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (src_info & (MAY_BE_ANY|MAY_BE_UNDEF))) {
+//|				SET_ZVAL_TYPE_INFO dst_addr, type
+//||			}
+//||		}
+//||		if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+//|			SET_ZVAL_TYPE_INFO res_addr, type
+//||		}
+//||	} else {
+//|		GET_ZVAL_TYPE_INFO Rd(tmp_reg1), src_addr
+//|		SET_ZVAL_TYPE_INFO dst_addr, Rd(tmp_reg1)
+//|		SET_ZVAL_TYPE_INFO res_addr, Rd(tmp_reg1)
+//||	}
+//|.endmacro
+
+//|.macro IF_UNDEF, type_reg, label
+//|	test type_reg, type_reg
+//|	je label
+//|.endmacro
+
+//|.macro IF_TYPE, type, val, label
+//|	cmp type, val
+//|	je label
+//|.endmacro
+
+//|.macro IF_NOT_TYPE, type, val, label
+//|	cmp type, val
+//|	jne label
+//|.endmacro
+
+//|.macro IF_Z_TYPE, zv, val, label
+//|	IF_TYPE byte [zv+offsetof(zval, u1.v.type)], val, label
+//|.endmacro
+
+//|.macro IF_NOT_Z_TYPE, zv, val, label
+//|	IF_NOT_TYPE byte [zv+offsetof(zval, u1.v.type)], val, label
+//|.endmacro
+
+//|.macro CMP_ZVAL_TYPE, addr, val
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	cmp byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval, u1.v.type)], val
+//|.endmacro
+
+//|.macro IF_ZVAL_TYPE, addr, val, label
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	IF_TYPE byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval, u1.v.type)], val, label
+//|.endmacro
+
+//|.macro IF_NOT_ZVAL_TYPE, addr, val, label
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	IF_NOT_TYPE byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval, u1.v.type)], val, label
+//|.endmacro
+
+//|.macro IF_FLAGS, type_flags, mask, label
+//|	test type_flags, mask
+//|	jnz label
+//|.endmacro
+
+//|.macro IF_NOT_FLAGS, type_flags, mask, label
+//|	test type_flags, mask
+//|	jz label
+//|.endmacro
+
+//|.macro IF_REFCOUNTED, type_flags, label
+//|	IF_FLAGS type_flags, IS_TYPE_REFCOUNTED, label
+//|.endmacro
+
+//|.macro IF_NOT_REFCOUNTED, type_flags, label
+//|	//IF_NOT_FLAGS type_flags, IS_TYPE_REFCOUNTED, label
+//|	test type_flags, type_flags
+//|	jz label
+//|.endmacro
+
+//|.macro IF_ZVAL_FLAGS, addr, mask, label
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	IF_FLAGS byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval, u1.v.type_flags)], mask, label
+//|.endmacro
+
+//|.macro IF_NOT_ZVAL_FLAGS, addr, mask, label
+//||	ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+//|	IF_NOT_FLAGS byte [Ra(Z_REG(addr))+Z_OFFSET(addr)+offsetof(zval, u1.v.type_flags)], mask, label
+//|.endmacro
+
+//|.macro IF_ZVAL_REFCOUNTED, addr, label
+//|	IF_ZVAL_FLAGS addr, IS_TYPE_REFCOUNTED, label
+//|.endmacro
+
+//|.macro IF_NOT_ZVAL_REFCOUNTED, addr, label
+//|	IF_NOT_ZVAL_FLAGS addr, IS_TYPE_REFCOUNTED, label
+//|.endmacro
+
+//|.macro IF_NOT_ZVAL_COLLECTABLE, addr, label
+//|	IF_NOT_ZVAL_FLAGS addr, IS_TYPE_COLLECTABLE, label
+//|.endmacro
+
+//|.macro GC_ADDREF, zv
+//|	add dword [zv], 1
+//|.endmacro
+
+//|.macro GC_DELREF, zv
+//|	sub dword [zv], 1
+//|.endmacro
+
+//|.macro IF_GC_MAY_NOT_LEAK, ptr, label
+//|	test dword [ptr+4],(GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT))
+//|	jne label
+//|.endmacro
+
+//|.macro ADDREF_CONST, zv, tmp_reg
+//|	.if X64
+//||		if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+//|			mov64 tmp_reg, ((uintptr_t)Z_LVAL_P(zv))
+//|			add dword [tmp_reg], 1
+//||		} else {
+//|			add dword [Z_LVAL_P(zv)], 1
+//||		}
+//|	.else
+//|		add dword [Z_LVAL_P(zv)], 1
+//|	.endif
+//|.endmacro
+
+//|.macro ADDREF_CONST_2, zv, tmp_reg
+//|	.if X64
+//||		if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+//|			mov64 tmp_reg, ((uintptr_t)Z_LVAL_P(zv))
+//|			add dword [tmp_reg], 2
+//||		} else {
+//|			add dword [Z_LVAL_P(zv)], 2
+//||		}
+//|	.else
+//|		add dword [Z_LVAL_P(zv)], 2
+//|	.endif
+//|.endmacro
+
+//|.macro TRY_ADDREF, val_info, type_flags_reg, value_ptr_reg
+//||	if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+//||		if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+//|			IF_NOT_REFCOUNTED type_flags_reg, >1
+//||		}
+//|		GC_ADDREF value_ptr_reg
+//|1:
+//||	}
+//|.endmacro
+
+//|.macro TRY_ADDREF_2, val_info, type_flags_reg, value_ptr_reg
+//||	if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+//||		if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+//|			IF_NOT_REFCOUNTED type_flags_reg, >1
+//||		}
+//|		add dword [value_ptr_reg], 2
+//|1:
+//||	}
+//|.endmacro
+
+//|.macro ZVAL_DEREF, reg, info
+//||	if (info & MAY_BE_REF) {
+//|		IF_NOT_Z_TYPE, reg, IS_REFERENCE, >1
+//|		GET_Z_PTR reg, reg
+//|		add reg, offsetof(zend_reference, val)
+//|1:
+//||	}
+//|.endmacro
+
+//|.macro SET_EX_OPLINE, op, tmp_reg
+//||	if (op == last_valid_opline) {
+//||		zend_jit_use_last_valid_opline();
+//|		SAVE_IP
+//||	} else {
+//|		ADDR_STORE aword EX->opline, op, tmp_reg
+//||		if (!GCC_GLOBAL_REGS) {
+//||			zend_jit_reset_last_valid_opline();
+//||		}
+//||	}
+//|.endmacro
+
+// zval should be in FCARG1a
+//|.macro ZVAL_DTOR_FUNC, var_info, opline // arg1 must be in FCARG1a
+//||	do {
+//||		if (has_concrete_type((var_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+//||			zend_uchar type = concrete_type((var_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+//||			if (type == IS_STRING && !ZEND_DEBUG) {
+//|				EXT_CALL _efree, r0
+//||				break;
+//||			} else if (type == IS_ARRAY) {
+//||				if ((var_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+//||					if (opline && ((var_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+//|						SET_EX_OPLINE opline, r0
+//||					}
+//|					EXT_CALL zend_array_destroy, r0
+//||				} else {
+//|					EXT_CALL zend_jit_array_free, r0
+//||				}
+//||				break;
+//||			} else if (type == IS_OBJECT) {
+//||				if (opline) {
+//|					SET_EX_OPLINE opline, r0
+//||				}
+//|				EXT_CALL zend_objects_store_del, r0
+//||				break;
+//||			}
+//||		}
+//||		if (opline) {
+//|			SET_EX_OPLINE opline, r0
+//||		}
+//|		EXT_CALL rc_dtor_func, r0
+//||	} while(0);
+//|.endmacro
+
+//|.macro ZVAL_PTR_DTOR, addr, op_info, gc, cold, opline
+//||	if ((op_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+//||		if ((op_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+//|			// if (Z_REFCOUNTED_P(cv)) {
+//||			if (cold) {
+//|				IF_ZVAL_REFCOUNTED addr, >1
+//|.cold_code
+//|1:
+//||			} else {
+//|				IF_NOT_ZVAL_REFCOUNTED addr, >4
+//||			}
+//||		}
+//|		// if (!Z_DELREF_P(cv)) {
+//|		GET_ZVAL_PTR FCARG1a, addr
+//|		GC_DELREF FCARG1a
+//||		if (RC_MAY_BE_1(op_info)) {
+//||			if (RC_MAY_BE_N(op_info)) {
+//||				if (gc && RC_MAY_BE_N(op_info) && ((op_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+//|					jnz >3
+//||				} else {
+//|					jnz >4
+//||				}
+//||			}
+//|			// zval_dtor_func(r);
+//|			ZVAL_DTOR_FUNC op_info, opline
+//||			if (gc && RC_MAY_BE_N(op_info) && ((op_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+//|				jmp >4
+//||			}
+//|3:
+//||		}
+//||		if (gc && RC_MAY_BE_N(op_info) && ((op_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+//||			if ((op_info) & MAY_BE_REF) {
+//||				zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+//|				IF_NOT_ZVAL_TYPE addr, IS_REFERENCE, >1
+//|				IF_NOT_ZVAL_COLLECTABLE ref_addr, >4
+//|				GET_ZVAL_PTR FCARG1a, ref_addr
+//|1:
+//||			}
+//|			IF_GC_MAY_NOT_LEAK FCARG1a, >4
+//|			// gc_possible_root(Z_COUNTED_P(z))
+//|			EXT_CALL gc_possible_root, r0
+//||		}
+//||		if (cold && ((op_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+//|			jmp >4
+//|.code
+//||		}
+//|4:
+//||	}
+//|.endmacro
+
+//|.macro FREE_OP, op_type, op, op_info, cold, opline
+//||	if (op_type & (IS_VAR|IS_TMP_VAR)) {
+//|		ZVAL_PTR_DTOR ZEND_ADDR_MEM_ZVAL(ZREG_FP, op.var), op_info, 0, cold, opline
+//||	}
+//|.endmacro
+
+//|.macro SEPARATE_ARRAY, addr, op_info, cold
+//||	if (RC_MAY_BE_N(op_info)) {
+//||		if (Z_REG(addr) != ZREG_FP) {
+//|			GET_ZVAL_LVAL ZREG_R0, addr
+//||			if (RC_MAY_BE_1(op_info)) {
+//|				cmp dword [r0], 1 // if (GC_REFCOUNT() > 1)
+//|				jbe >2
+//||			}
+//||			if (Z_REG(addr) != ZREG_FCARG1 || Z_OFFSET(addr) != 0) {
+//|				LOAD_ZVAL_ADDR FCARG1a, addr
+//||			}
+//|			EXT_CALL zend_jit_zval_array_dup, r0
+//|2:
+//|			mov FCARG1a, r0
+//||		} else {
+//|			GET_ZVAL_LVAL ZREG_FCARG1, addr
+//||			if (RC_MAY_BE_1(op_info)) {
+//|				cmp dword [FCARG1a], 1 // if (GC_REFCOUNT() > 1)
+//||				if (cold) {
+//|					ja >1
+//|.cold_code
+//|1:
+//||				} else {
+//|					jbe >2
+//||				}
+//||			}
+//|			IF_NOT_ZVAL_REFCOUNTED addr, >1
+//|			GC_DELREF FCARG1a
+//|1:
+//|			EXT_CALL zend_array_dup, r0
+//|			SET_ZVAL_PTR addr, r0
+//|			SET_ZVAL_TYPE_INFO addr, IS_ARRAY_EX
+//|			mov FCARG1a, r0
+//||			if (RC_MAY_BE_1(op_info)) {
+//||				if (cold) {
+//|					jmp >2
+//|.code
+//||				}
+//||			}
+//|2:
+//||		}
+//||	} else {
+//|		GET_ZVAL_LVAL ZREG_FCARG1, addr
+//||	}
+//|.endmacro
+
+//|.macro EFREE_REG_REFERENCE
+//||#if ZEND_DEBUG
+//|		xor FCARG2a, FCARG2a // filename
+//|		.if X64WIN
+//|			xor CARG3d, CARG3d // lineno
+//|			xor CARG4, CARG4
+//|			mov aword A5, 0
+//|			EXT_CALL _efree, r0
+//|		.elif X64
+//|			xor CARG3d, CARG3d // lineno
+//|			xor CARG4, CARG4
+//|			xor CARG5, CARG5
+//|			EXT_CALL _efree, r0
+//|		.else
+//|			sub r4, 4
+//|			push 0
+//|			push 0
+//|			push 0 // lineno
+//|			EXT_CALL _efree, r0
+//|			add r4, 4
+//|		.endif
+//||#else
+//||#ifdef HAVE_BUILTIN_CONSTANT_P
+//|		EXT_CALL _efree_32, r0
+//||#else
+//|		EXT_CALL _efree, r0
+//||#endif
+//||#endif
+//|.endmacro
+
+//|.macro EFREE_REFERENCE, ptr
+//|	mov FCARG1a, ptr
+//|	EFREE_REG_REFERENCE
+//|.endmacro
+
+//|.macro EMALLOC, size, op_array, opline
+//||#if ZEND_DEBUG
+//||		const char *filename = op_array->filename ? op_array->filename->val : NULL;
+//|		mov FCARG1a, size
+//|		LOAD_ADDR FCARG2a, filename
+//|		.if X64WIN
+//|			mov CARG3d, opline->lineno
+//|			xor CARG4, CARG4
+//|			mov aword A5, 0
+//|			EXT_CALL _emalloc, r0
+//|		.elif X64
+//|			mov CARG3d, opline->lineno
+//|			xor CARG4, CARG4
+//|			xor CARG5, CARG5
+//|			EXT_CALL _emalloc, r0
+//|		.else
+//|			sub r4, 4
+//|			push 0
+//|			push 0
+//|			push opline->lineno
+//|			EXT_CALL _emalloc, r0
+//|			add r4, 4
+//|		.endif
+//||#else
+//||#ifdef HAVE_BUILTIN_CONSTANT_P
+//||	if (size > 24 && size <= 32) {
+//|		EXT_CALL _emalloc_32, r0
+//||	} else {
+//|		mov FCARG1a, size
+//|		EXT_CALL _emalloc, r0
+//||	}
+//||#else
+//|		mov FCARG1a, size
+//|		EXT_CALL _emalloc, r0
+//||#endif
+//||#endif
+//|.endmacro
+
+//|.macro OBJ_RELEASE, reg, exit_label
+//|	GC_DELREF Ra(reg)
+//|	jne >1
+//|	// zend_objects_store_del(obj);
+//||	if (reg != ZREG_FCARG1) {
+//|		mov FCARG1a, Ra(reg)
+//||	}
+//|	EXT_CALL zend_objects_store_del, r0
+//|	jmp exit_label
+//|1:
+//|	IF_GC_MAY_NOT_LEAK Ra(reg), >1
+//|	// gc_possible_root(obj)
+//||	if (reg != ZREG_FCARG1) {
+//|		mov FCARG1a, Ra(reg)
+//||	}
+//|	EXT_CALL gc_possible_root, r0
+//|1:
+//|.endmacro
+
+//|.macro UNDEFINED_OFFSET, opline
+//||	if (opline == last_valid_opline) {
+//||		zend_jit_use_last_valid_opline();
+//|		call ->undefined_offset_ex
+//||	} else {
+//|		SET_EX_OPLINE  opline, r0
+//|		call ->undefined_offset
+//||	}
+//|.endmacro
+
+//|.macro UNDEFINED_INDEX, opline
+//||	if (opline == last_valid_opline) {
+//||		zend_jit_use_last_valid_opline();
+//|		call ->undefined_index_ex
+//||	} else {
+//|		SET_EX_OPLINE opline, r0
+//|		call ->undefined_index
+//||	}
+//|.endmacro
+
+//|.macro CANNOT_ADD_ELEMENT, opline
+//||	if (opline == last_valid_opline) {
+//||		zend_jit_use_last_valid_opline();
+//|		call ->cannot_add_element_ex
+//||	} else {
+//|		SET_EX_OPLINE opline, r0
+//|		call ->cannot_add_element
+//||	}
+//|.endmacro
+
+static bool reuse_ip = 0;
+static bool delayed_call_chain = 0;
+static uint32_t  delayed_call_level = 0;
+static const zend_op *last_valid_opline = NULL;
+static bool use_last_vald_opline = 0;
+static bool track_last_valid_opline = 0;
+static int jit_return_label = -1;
+static uint32_t current_trace_num = 0;
+static uint32_t allowed_opt_flags = 0;
+
+static void zend_jit_track_last_valid_opline(void)
+{
+	use_last_vald_opline = 0;
+	track_last_valid_opline = 1;
+}
+
+static void zend_jit_use_last_valid_opline(void)
+{
+	if (track_last_valid_opline) {
+		use_last_vald_opline = 1;
+		track_last_valid_opline = 0;
+	}
+}
+
+static bool zend_jit_trace_uses_initial_ip(void)
+{
+	return use_last_vald_opline;
+}
+
+static void zend_jit_set_last_valid_opline(const zend_op *target_opline)
+{
+	if (!reuse_ip) {
+		track_last_valid_opline = 0;
+		last_valid_opline = target_opline;
+	}
+}
+
+static void zend_jit_reset_last_valid_opline(void)
+{
+	track_last_valid_opline = 0;
+	last_valid_opline = NULL;
+}
+
+static void zend_jit_start_reuse_ip(void)
+{
+	zend_jit_reset_last_valid_opline();
+	reuse_ip = 1;
+}
+
+static int zend_jit_reuse_ip(dasm_State **Dst)
+{
+	if (!reuse_ip) {
+		zend_jit_start_reuse_ip();
+		//|	// call = EX(call);
+		//|	mov RX, EX->call
+		dasm_put(Dst, 0, Dt1(->call));
+#line 1686 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static void zend_jit_stop_reuse_ip(void)
+{
+	reuse_ip = 0;
+}
+
+static int zend_jit_interrupt_handler_stub(dasm_State **Dst)
+{
+	//|->interrupt_handler:
+	//|	SAVE_IP
+	dasm_put(Dst, 5);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 1699 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	//EG(vm_interrupt) = 0;
+	//|	MEM_STORE_ZTS byte, executor_globals, vm_interrupt, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+	dasm_put(Dst, 13, &executor_globals.vm_interrupt);
+			} else {
+	dasm_put(Dst, 19, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+			}
+#line 1701 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	//if (EG(timed_out)) {
+	//|	MEM_CMP_ZTS byte, executor_globals, timed_out, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.timed_out)) {
+	dasm_put(Dst, 27, &executor_globals.timed_out);
+			} else {
+	dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.timed_out)), (unsigned int)((((ptrdiff_t)&executor_globals.timed_out))>>32));
+			}
+#line 1703 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	je >1
+	//|	//zend_timeout();
+	//|	EXT_CALL zend_timeout, r0
+	dasm_put(Dst, 41);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_timeout)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_timeout));
+			} else {
+			if (IS_SIGNED_32BIT(zend_timeout)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_timeout));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_timeout)), (unsigned int)((((ptrdiff_t)zend_timeout))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 1706 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|1:
+	//|	//} else if (zend_interrupt_function) {
+	dasm_put(Dst, 63);
+#line 1708 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_interrupt_function) {
+		//|	//zend_interrupt_function(execute_data);
+		//|.if X64
+			//|	mov CARG1, FP
+			//|	EXT_CALL zend_interrupt_function, r0
+			dasm_put(Dst, 66);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_interrupt_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_interrupt_function));
+					} else {
+					if (IS_SIGNED_32BIT(zend_interrupt_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_interrupt_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_interrupt_function)), (unsigned int)((((ptrdiff_t)zend_interrupt_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 1713 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	mov aword A1, FP
+			//|	EXT_CALL zend_interrupt_function, r0
+		//|.endif
+		//|	//ZEND_VM_ENTER();
+		//|	//execute_data = EG(current_execute_data);
+		//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r0
+				if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+		dasm_put(Dst, 71, &executor_globals.current_execute_data);
+				} else {
+		dasm_put(Dst, 77, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+				}
+#line 1720 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	LOAD_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 0, Dt1(->opline));
+			}
+#line 1721 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	//ZEND_VM_CONTINUE()
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 1725 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 1726 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	JMP_IP
+		dasm_put(Dst, 103);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 1729 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 1 // ZEND_VM_ENTER
+		//|	ret
+		dasm_put(Dst, 108);
+#line 1735 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_exception_handler_stub(dasm_State **Dst)
+{
+	//|->exception_handler:
+	dasm_put(Dst, 131);
+#line 1743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		const void *handler = zend_get_opcode_handler_func(EG(exception_op));
+
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 1747 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL handler, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(handler));
+				} else {
+				if (IS_SIGNED_32BIT(handler)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)handler));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 1748 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 1749 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		const void *handler = EG(exception_op)->handler;
+
+		if (GCC_GLOBAL_REGS) {
+			//|	add r4, SPAD // stack alignment
+			//|	EXT_JMP handler, r0
+			dasm_put(Dst, 103);
+					if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+			dasm_put(Dst, 134, (ptrdiff_t)(handler));
+					} else {
+					if (IS_SIGNED_32BIT(handler)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)handler));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+					}
+			dasm_put(Dst, 138);
+					}
+#line 1755 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov FCARG1a, FP
+			//|	EXT_CALL handler, r0
+			dasm_put(Dst, 66);
+					if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(handler));
+					} else {
+					if (IS_SIGNED_32BIT(handler)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)handler));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 1758 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FP, aword T2 // restore FP
+			//|	mov RX, aword T3 // restore IP
+			//|	add r4, NR_SPAD // stack alignment
+			//|	test eax, eax
+			//|	jl >1
+			//|	mov r0, 1 // ZEND_VM_ENTER
+			//|1:
+			//|	ret
+			dasm_put(Dst, 142);
+#line 1766 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_exception_handler_undef_stub(dasm_State **Dst)
+{
+	//|->exception_handler_undef:
+	//|	MEM_LOAD_ZTS r0, aword, executor_globals, opline_before_exception, r0
+	dasm_put(Dst, 173);
+			if (IS_SIGNED_32BIT(&executor_globals.opline_before_exception)) {
+	dasm_put(Dst, 176, &executor_globals.opline_before_exception);
+			} else {
+	dasm_put(Dst, 182, (unsigned int)(((ptrdiff_t)&executor_globals.opline_before_exception)), (unsigned int)((((ptrdiff_t)&executor_globals.opline_before_exception))>>32));
+			}
+#line 1776 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	test byte OP:r0->result_type, (IS_TMP_VAR|IS_VAR)
+	//|	jz >1
+	//|	mov eax, dword OP:r0->result.var
+	//|	SET_Z_TYPE_INFO FP + r0, IS_UNDEF
+	//|1:
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 190, Dt2(->result_type), (IS_TMP_VAR|IS_VAR), Dt2(->result.var), offsetof(zval,u1.type_info), IS_UNDEF);
+#line 1782 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_leave_function_stub(dasm_State **Dst)
+{
+	//|->leave_function_handler:
+	//|	mov FCARG1d, dword [FP + offsetof(zend_execute_data, This.u1.type_info)]
+	dasm_put(Dst, 216, offsetof(zend_execute_data, This.u1.type_info));
+#line 1790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	test FCARG1d, ZEND_CALL_TOP
+		//|	jnz >1
+		//|	EXT_CALL zend_jit_leave_nested_func_helper, r0
+		dasm_put(Dst, 223, ZEND_CALL_TOP);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_leave_nested_func_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_leave_nested_func_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_leave_nested_func_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_leave_nested_func_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_leave_nested_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_leave_nested_func_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 1794 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 1795 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 1796 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	EXT_CALL zend_jit_leave_top_func_helper, r0
+		dasm_put(Dst, 63);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_leave_top_func_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_leave_top_func_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_leave_top_func_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_leave_top_func_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_leave_top_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_leave_top_func_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 1798 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 1799 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 1800 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (GCC_GLOBAL_REGS) {
+			//|	add r4, SPAD
+			dasm_put(Dst, 103);
+#line 1803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov FCARG2a, FP
+			//|	mov FP, aword T2 // restore FP
+			//|	mov RX, aword T3 // restore IP
+			//|	add r4, NR_SPAD
+			dasm_put(Dst, 232);
+#line 1808 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	test FCARG1d, ZEND_CALL_TOP
+		//|	jnz >1
+		//|	EXT_JMP zend_jit_leave_nested_func_helper, r0
+		dasm_put(Dst, 223, ZEND_CALL_TOP);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_leave_nested_func_helper)) {
+		dasm_put(Dst, 134, (ptrdiff_t)(zend_jit_leave_nested_func_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_leave_nested_func_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_leave_nested_func_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_leave_nested_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_leave_nested_func_helper))>>32));
+				}
+		dasm_put(Dst, 138);
+				}
+#line 1812 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	EXT_JMP zend_jit_leave_top_func_helper, r0
+		dasm_put(Dst, 63);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_leave_top_func_helper)) {
+		dasm_put(Dst, 134, (ptrdiff_t)(zend_jit_leave_top_func_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_leave_top_func_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_leave_top_func_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_leave_top_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_leave_top_func_helper))>>32));
+				}
+		dasm_put(Dst, 138);
+				}
+#line 1814 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_leave_throw_stub(dasm_State **Dst)
+{
+	//|->leave_throw_handler:
+	//|	// if (opline->opcode != ZEND_HANDLE_EXCEPTION) {
+	dasm_put(Dst, 251);
+#line 1823 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (GCC_GLOBAL_REGS) {
+		//|	cmp byte OP:IP->opcode, ZEND_HANDLE_EXCEPTION
+		//|	je >5
+		//|	// EG(opline_before_exception) = opline;
+		//|	MEM_STORE_ZTS aword, executor_globals, opline_before_exception, IP, r0
+		dasm_put(Dst, 254, Dt2(->opcode), ZEND_HANDLE_EXCEPTION);
+				if (IS_SIGNED_32BIT(&executor_globals.opline_before_exception)) {
+		dasm_put(Dst, 264, &executor_globals.opline_before_exception);
+				} else {
+		dasm_put(Dst, 270, (unsigned int)(((ptrdiff_t)&executor_globals.opline_before_exception)), (unsigned int)((((ptrdiff_t)&executor_globals.opline_before_exception))>>32));
+				}
+#line 1828 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|5:
+		//|	// opline = EG(exception_op);
+		//|	LOAD_IP_ADDR_ZTS executor_globals, exception_op
+		dasm_put(Dst, 278);
+			if (GCC_GLOBAL_REGS) {
+				if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)&executor_globals.exception_op));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32));
+				}
+			} else {
+				if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)&executor_globals.exception_op));
+				} else {
+		dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32), Dt1(->opline));
+				}
+			}
+#line 1831 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// HANDLE_EXCEPTION()
+		//|	jmp ->exception_handler
+		dasm_put(Dst, 211);
+#line 1833 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_IP FCARG1a
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 306);
+			} else {
+		dasm_put(Dst, 311, Dt1(->opline));
+			}
+#line 1835 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	cmp byte OP:FCARG1a->opcode, ZEND_HANDLE_EXCEPTION
+		//|	je >5
+		//|	// EG(opline_before_exception) = opline;
+		//|	MEM_STORE_ZTS aword, executor_globals, opline_before_exception, FCARG1a, r0
+		dasm_put(Dst, 255, Dt2(->opcode), ZEND_HANDLE_EXCEPTION);
+				if (IS_SIGNED_32BIT(&executor_globals.opline_before_exception)) {
+		dasm_put(Dst, 316, &executor_globals.opline_before_exception);
+				} else {
+		dasm_put(Dst, 322, (unsigned int)(((ptrdiff_t)&executor_globals.opline_before_exception)), (unsigned int)((((ptrdiff_t)&executor_globals.opline_before_exception))>>32));
+				}
+#line 1839 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|5:
+		//|	// opline = EG(exception_op);
+		//|	LOAD_IP_ADDR_ZTS executor_globals, exception_op
+		dasm_put(Dst, 278);
+			if (GCC_GLOBAL_REGS) {
+				if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)&executor_globals.exception_op));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32));
+				}
+			} else {
+				if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)&executor_globals.exception_op));
+				} else {
+		dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32), Dt1(->opline));
+				}
+			}
+#line 1842 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 2 // ZEND_VM_LEAVE
+		//|	ret
+		dasm_put(Dst, 330);
+#line 1847 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_icall_throw_stub(dasm_State **Dst)
+{
+	//|->icall_throw_handler:
+	//|	// zend_rethrow_exception(zend_execute_data *execute_data)
+	//|	mov IP, aword EX->opline
+	//|	// if (EX(opline)->opcode != ZEND_HANDLE_EXCEPTION) {
+	//|	cmp byte OP:IP->opcode, ZEND_HANDLE_EXCEPTION
+	//|	je >1
+	//|	// EG(opline_before_exception) = opline;
+	//|	MEM_STORE_ZTS aword, executor_globals, opline_before_exception, IP, r0
+	dasm_put(Dst, 353, Dt1(->opline), Dt2(->opcode), ZEND_HANDLE_EXCEPTION);
+			if (IS_SIGNED_32BIT(&executor_globals.opline_before_exception)) {
+	dasm_put(Dst, 264, &executor_globals.opline_before_exception);
+			} else {
+	dasm_put(Dst, 270, (unsigned int)(((ptrdiff_t)&executor_globals.opline_before_exception)), (unsigned int)((((ptrdiff_t)&executor_globals.opline_before_exception))>>32));
+			}
+#line 1862 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|1:
+	//|	// opline = EG(exception_op);
+	//|	LOAD_IP_ADDR_ZTS executor_globals, exception_op
+	dasm_put(Dst, 63);
+		if (GCC_GLOBAL_REGS) {
+			if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+	dasm_put(Dst, 281, ((ptrdiff_t)&executor_globals.exception_op));
+			} else {
+	dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32));
+			}
+		} else {
+			if (IS_SIGNED_32BIT(&executor_globals.exception_op)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)&executor_globals.exception_op));
+			} else {
+	dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)&executor_globals.exception_op)), (unsigned int)((((ptrdiff_t)&executor_globals.exception_op))>>32), Dt1(->opline));
+			}
+		}
+#line 1865 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (GCC_GLOBAL_REGS) {
+	//|		mov aword EX->opline, IP
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 1868 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// HANDLE_EXCEPTION()
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 211);
+#line 1870 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_throw_cannot_pass_by_ref_stub(dasm_State **Dst)
+{
+	//|->throw_cannot_pass_by_ref:
+	//|	mov r0, EX->opline
+	//|	mov ecx, dword OP:r0->result.var
+	//|	SET_Z_TYPE_INFO RX+r1, IS_UNDEF
+	//|	// last EX(call) frame may be delayed
+	//|	cmp RX, EX->call
+	//|	je >1
+	//|	mov r1, EX->call
+	//|	mov EX:RX->prev_execute_data, r1
+	//|	mov EX->call, RX
+	//|1:
+	//|	mov RX, r0
+	//|	mov FCARG1d, dword OP:r0->op2.num
+	//|	EXT_CALL zend_cannot_pass_by_reference, r0
+	dasm_put(Dst, 369, Dt1(->opline), Dt2(->result.var), offsetof(zval,u1.type_info), IS_UNDEF, Dt1(->call), Dt1(->call), Dt1(->prev_execute_data), Dt1(->call), Dt2(->op2.num));
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_cannot_pass_by_reference)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_cannot_pass_by_reference));
+			} else {
+			if (IS_SIGNED_32BIT(zend_cannot_pass_by_reference)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_cannot_pass_by_reference));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_cannot_pass_by_reference)), (unsigned int)((((ptrdiff_t)zend_cannot_pass_by_reference))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 1890 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	cmp byte OP:RX->op1_type, IS_TMP_VAR
+	//|	jne >9
+	//|	mov eax, dword OP:RX->op1.var
+	//|	add r0, FP
+	//|	ZVAL_PTR_DTOR ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0), MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF, 0, 0, NULL
+	dasm_put(Dst, 414, Dt2(->op1_type), IS_TMP_VAR, Dt2(->op1.var));
+		if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0)));
+			if (RC_MAY_BE_1(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF)) {
+				if (RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF)) {
+					if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (NULL && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (NULL == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(NULL)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (NULL) {
+		if (NULL == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(NULL)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (NULL) {
+		if (NULL == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(NULL)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+#line 1895 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|9:
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 541);
+#line 1897 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_undefined_offset_ex_stub(dasm_State **Dst)
+{
+	//|->undefined_offset_ex:
+	//|	SAVE_IP
+	dasm_put(Dst, 548);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 1905 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jmp ->undefined_offset
+	dasm_put(Dst, 551);
+#line 1906 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_undefined_offset_stub(dasm_State **Dst)
+{
+	//|->undefined_offset:
+	//|.if X64WIN
+		//|	sub r4, 0x28
+	//|.elif X64
+		//|	sub r4, 8
+	//|.else
+		//|	sub r4, 12
+	//|.endif
+	//|	mov r0, EX->opline
+	//|	mov ecx, dword OP:r0->result.var
+	//|	cmp byte OP:r0->op2_type, IS_CONST
+	//|	SET_Z_TYPE_INFO FP + r1, IS_NULL
+	//|	jne >2
+	//|.if X64
+		//|	movsxd r1, dword OP:r0->op2.constant
+		//|	add r0, r1
+	//|.else
+		//|	mov r0, aword OP:r0->op2.zv
+	//|.endif
+	//|	jmp >3
+	//|2:
+	//|	mov eax, dword OP:r0->op2.var
+	//|	add r0, FP
+	//|3:
+	//|.if X64WIN
+		//|	mov CARG1, E_WARNING
+		//|	LOAD_ADDR CARG2, "Undefined array key " ZEND_LONG_FMT
+		//|	mov CARG3, aword [r0]
+		//|	EXT_CALL zend_error, r0
+		//|	add r4, 0x28 // stack alignment
+	//|.elif X64
+		//|	mov CARG1, E_WARNING
+		//|	LOAD_ADDR CARG2, "Undefined array key " ZEND_LONG_FMT
+		dasm_put(Dst, 556, Dt1(->opline), Dt2(->result.var), Dt2(->op2_type), IS_CONST, offsetof(zval,u1.type_info), IS_NULL, Dt2(->op2.constant), Dt2(->op2.var), E_WARNING);
+				if (IS_SIGNED_32BIT("Undefined array key " ZEND_LONG_FMT)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Undefined array key " ZEND_LONG_FMT));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Undefined array key " ZEND_LONG_FMT)), (unsigned int)((((ptrdiff_t)"Undefined array key " ZEND_LONG_FMT))>>32));
+				}
+#line 1945 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov CARG3, aword [r0]
+		//|	EXT_CALL zend_error, r0
+		dasm_put(Dst, 622);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_error)), (unsigned int)((((ptrdiff_t)zend_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 1947 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	add r4, 8 // stack alignment
+	//|.else
+		//|	sub r4, 4
+		//|	push aword [r0]
+		//|	push "Undefined array key " ZEND_LONG_FMT
+		//|	push E_WARNING
+		//|	EXT_CALL zend_error, r0
+		//|	add r4, 28
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 1957 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_undefined_index_ex_stub(dasm_State **Dst)
+{
+	//|->undefined_index_ex:
+	//|	SAVE_IP
+	dasm_put(Dst, 632);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 1965 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jmp ->undefined_index
+	dasm_put(Dst, 635);
+#line 1966 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_undefined_index_stub(dasm_State **Dst)
+{
+	//|->undefined_index:
+	//|.if X64WIN
+		//|	sub r4, 0x28
+	//|.elif X64
+		//|	sub r4, 8
+	//|.else
+		//|	sub r4, 12
+	//|.endif
+	//|	mov r0, EX->opline
+	//|	mov ecx, dword OP:r0->result.var
+	//|	cmp byte OP:r0->op2_type, IS_CONST
+	//|	SET_Z_TYPE_INFO FP + r1, IS_NULL
+	//|	jne >2
+	//|.if X64
+		//|	movsxd r1, dword OP:r0->op2.constant
+		//|   add r0, r1
+	//|.else
+		//|	mov r0, aword OP:r0->op2.zv
+	//|.endif
+	//|	jmp >3
+	//|2:
+	//|	mov eax, dword OP:r0->op2.var
+	//|	add r0, FP
+	//|3:
+	//|.if X64WIN
+		//|	mov CARG1, E_WARNING
+		//|	LOAD_ADDR CARG2, "Undefined array key \"%s\""
+		//|	mov CARG3, aword [r0]
+		//|	add CARG3, offsetof(zend_string, val)
+		//|	EXT_CALL zend_error, r0
+		//|	add r4, 0x28
+	//|.elif X64
+		//|	mov CARG1, E_WARNING
+		//|	LOAD_ADDR CARG2, "Undefined array key \"%s\""
+		dasm_put(Dst, 640, Dt1(->opline), Dt2(->result.var), Dt2(->op2_type), IS_CONST, offsetof(zval,u1.type_info), IS_NULL, Dt2(->op2.constant), Dt2(->op2.var), E_WARNING);
+				if (IS_SIGNED_32BIT("Undefined array key \"%s\"")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Undefined array key \"%s\""));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Undefined array key \"%s\"")), (unsigned int)((((ptrdiff_t)"Undefined array key \"%s\""))>>32));
+				}
+#line 2006 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov CARG3, aword [r0]
+		//|	add CARG3, offsetof(zend_string, val)
+		//|	EXT_CALL zend_error, r0
+		dasm_put(Dst, 696, offsetof(zend_string, val));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_error)), (unsigned int)((((ptrdiff_t)zend_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2009 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	add r4, 8
+	//|.else
+		//|	sub r4, 4
+		//|	mov r0, aword [r0]
+		//|	add r0, offsetof(zend_string, val)
+		//|	push r0
+		//|	push "Undefined array key \"%s\""
+		//|	push E_WARNING
+		//|	EXT_CALL zend_error, r0
+		//|	add r4, 28
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_cannot_add_element_ex_stub(dasm_State **Dst)
+{
+	//|->cannot_add_element_ex:
+	//|	SAVE_IP
+	dasm_put(Dst, 704);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 2029 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jmp ->cannot_add_element
+	dasm_put(Dst, 707);
+#line 2030 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_cannot_add_element_stub(dasm_State **Dst)
+{
+	//|->cannot_add_element:
+	//|.if X64WIN
+		//|	sub r4, 0x28
+	//|.elif X64
+		//|	sub r4, 8
+	//|.else
+		//|	sub r4, 12
+	//|.endif
+	//|	mov r0, EX->opline
+	//|	cmp byte OP:r0->result_type, IS_UNUSED
+	//|	jz >1
+	//|	mov eax, dword OP:r0->result.var
+	//|	SET_Z_TYPE_INFO FP + r0, IS_NULL
+	//|1:
+	//|.if X64WIN
+		//|	xor CARG1, CARG1
+		//|	LOAD_ADDR CARG2, "Cannot add element to the array as the next element is already occupied"
+		//|	EXT_CALL zend_throw_error, r0
+		//|	add r4, 0x28
+	//|.elif X64
+		//|	xor CARG1, CARG1
+		//|	LOAD_ADDR CARG2, "Cannot add element to the array as the next element is already occupied"
+		dasm_put(Dst, 712, Dt1(->opline), Dt2(->result_type), IS_UNUSED, Dt2(->result.var), offsetof(zval,u1.type_info), IS_NULL);
+				if (IS_SIGNED_32BIT("Cannot add element to the array as the next element is already occupied")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Cannot add element to the array as the next element is already occupied"));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Cannot add element to the array as the next element is already occupied")), (unsigned int)((((ptrdiff_t)"Cannot add element to the array as the next element is already occupied"))>>32));
+				}
+#line 2058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_throw_error, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_throw_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_throw_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_throw_error)), (unsigned int)((((ptrdiff_t)zend_throw_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2059 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	add r4, 8
+	//|.else
+		//|	sub r4, 8
+		//|	push "Cannot add element to the array as the next element is already occupied"
+		//|	push 0
+		//|	EXT_CALL zend_throw_error, r0
+		//|	add r4, 28
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2068 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_undefined_function_stub(dasm_State **Dst)
+{
+	//|->undefined_function:
+	//|	mov r0, aword EX->opline
+	//|.if X64
+		//|	xor CARG1, CARG1
+		//|	LOAD_ADDR CARG2, "Call to undefined function %s()"
+		dasm_put(Dst, 748, Dt1(->opline));
+				if (IS_SIGNED_32BIT("Call to undefined function %s()")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Call to undefined function %s()"));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Call to undefined function %s()")), (unsigned int)((((ptrdiff_t)"Call to undefined function %s()"))>>32));
+				}
+#line 2079 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	movsxd CARG3, dword [r0 + offsetof(zend_op, op2.constant)]
+		//|	mov CARG3, aword [r0 + CARG3]
+		//|	add CARG3, offsetof(zend_string, val)
+		//|	EXT_CALL zend_throw_error, r0
+		dasm_put(Dst, 759, offsetof(zend_op, op2.constant), offsetof(zend_string, val));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_throw_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_throw_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_throw_error)), (unsigned int)((((ptrdiff_t)zend_throw_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.else
+		//|	mov r0, aword [r0 + offsetof(zend_op, op2.zv)]
+		//|	mov r0, aword [r0]
+		//|	add r0, offsetof(zend_string, val)
+		//|	mov aword A3, r0
+		//|	mov aword A2, "Call to undefined function %s()"
+		//|	mov aword A1, 0
+		//|	EXT_CALL zend_throw_error, r0
+	//|.endif
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 211);
+#line 2093 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_negative_shift_stub(dasm_State **Dst)
+{
+	//|->negative_shift:
+	//|	UNDEF_OPLINE_RESULT_IF_USED
+	//|.if X64
+		//|.if WIN
+		//|	LOAD_ADDR CARG1, &zend_ce_arithmetic_error
+		//|	mov CARG1, aword [CARG1]
+		//|.else
+		//|	LOAD_ADDR CARG1, zend_ce_arithmetic_error
+		dasm_put(Dst, 772, Dt1(->opline), Dt2(->result_type), (IS_TMP_VAR|IS_VAR), Dt2(->result.var), offsetof(zval,u1.type_info), IS_UNDEF);
+				if (IS_SIGNED_32BIT(zend_ce_arithmetic_error)) {
+		dasm_put(Dst, 607, ((ptrdiff_t)zend_ce_arithmetic_error));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)zend_ce_arithmetic_error)), (unsigned int)((((ptrdiff_t)zend_ce_arithmetic_error))>>32));
+				}
+#line 2106 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.endif
+		//|	LOAD_ADDR CARG2, "Bit shift by negative number"
+				if (IS_SIGNED_32BIT("Bit shift by negative number")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Bit shift by negative number"));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Bit shift by negative number")), (unsigned int)((((ptrdiff_t)"Bit shift by negative number"))>>32));
+				}
+#line 2108 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_throw_error, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_throw_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_throw_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_throw_error)), (unsigned int)((((ptrdiff_t)zend_throw_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2109 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.else
+		//|	sub r4, 8
+		//|	push "Bit shift by negative number"
+		//|.if WIN
+		//|	LOAD_ADDR r0, &zend_ce_arithmetic_error
+		//|	push aword [r0]
+		//|.else
+		//|	PUSH_ADDR zend_ce_arithmetic_error, r0
+		//|.endif
+		//|	EXT_CALL zend_throw_error, r0
+		//|	add r4, 16
+	//|.endif
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 211);
+#line 2122 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_mod_by_zero_stub(dasm_State **Dst)
+{
+	//|->mod_by_zero:
+	//|	UNDEF_OPLINE_RESULT_IF_USED
+	//|.if X64
+		//|.if WIN
+		//|	LOAD_ADDR CARG1, &zend_ce_division_by_zero_error
+		//|	mov CARG1, aword [CARG1]
+		//|.else
+		//|	LOAD_ADDR CARG1, zend_ce_division_by_zero_error
+		dasm_put(Dst, 805, Dt1(->opline), Dt2(->result_type), (IS_TMP_VAR|IS_VAR), Dt2(->result.var), offsetof(zval,u1.type_info), IS_UNDEF);
+				if (IS_SIGNED_32BIT(zend_ce_division_by_zero_error)) {
+		dasm_put(Dst, 607, ((ptrdiff_t)zend_ce_division_by_zero_error));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)zend_ce_division_by_zero_error)), (unsigned int)((((ptrdiff_t)zend_ce_division_by_zero_error))>>32));
+				}
+#line 2135 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.endif
+		//|	LOAD_ADDR CARG2, "Modulo by zero"
+				if (IS_SIGNED_32BIT("Modulo by zero")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Modulo by zero"));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Modulo by zero")), (unsigned int)((((ptrdiff_t)"Modulo by zero"))>>32));
+				}
+#line 2137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_throw_error, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_throw_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_throw_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_throw_error)), (unsigned int)((((ptrdiff_t)zend_throw_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2138 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.else
+		//|	sub r4, 8
+		//|	push "Modulo by zero"
+		//|.if WIN
+		//|	LOAD_ADDR r0, &zend_ce_division_by_zero_error
+		//|	push aword [r0]
+		//|.else
+		//|	PUSH_ADDR zend_ce_division_by_zero_error, r0
+		//|.endif
+		//|	EXT_CALL zend_throw_error, r0
+		//|	add r4, 16
+	//|.endif
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 211);
+#line 2151 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_invalid_this_stub(dasm_State **Dst)
+{
+	//|->invalid_this:
+	//|	UNDEF_OPLINE_RESULT
+	//|.if X64
+		//|	xor CARG1, CARG1
+		//|	LOAD_ADDR CARG2, "Using $this when not in object context"
+		dasm_put(Dst, 833, Dt1(->opline), Dt2(->result.var), offsetof(zval,u1.type_info), IS_UNDEF);
+				if (IS_SIGNED_32BIT("Using $this when not in object context")) {
+		dasm_put(Dst, 612, ((ptrdiff_t)"Using $this when not in object context"));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)"Using $this when not in object context")), (unsigned int)((((ptrdiff_t)"Using $this when not in object context"))>>32));
+				}
+#line 2161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_throw_error, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_throw_error));
+				} else {
+				if (IS_SIGNED_32BIT(zend_throw_error)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_throw_error));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_throw_error)), (unsigned int)((((ptrdiff_t)zend_throw_error))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 2162 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.else
+		//|	sub r4, 8
+		//|	push "Using $this when not in object context"
+		//|	push 0
+		//|	EXT_CALL zend_throw_error, r0
+		//|	add r4, 16
+	//|.endif
+	//|	jmp ->exception_handler
+	dasm_put(Dst, 211);
+#line 2170 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_double_one_stub(dasm_State **Dst)
+{
+	//|->one:
+	//|.dword 0, 0x3ff00000
+	dasm_put(Dst, 854);
+#line 2177 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_runtime_jit_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID) {
+		return 1;
+	}
+
+	//|->hybrid_runtime_jit:
+	//|	EXT_CALL zend_runtime_jit, r0
+	dasm_put(Dst, 866);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_runtime_jit)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_runtime_jit));
+			} else {
+			if (IS_SIGNED_32BIT(zend_runtime_jit)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_runtime_jit));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_runtime_jit)), (unsigned int)((((ptrdiff_t)zend_runtime_jit))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 2188 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	JMP_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 90);
+		} else {
+	dasm_put(Dst, 95, Dt1(->opline));
+		}
+#line 2189 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_profile_jit_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID) {
+		return 1;
+	}
+
+	//|->hybrid_profile_jit:
+	//|	// ++zend_jit_profile_counter;
+	//|	.if X64
+	//|		LOAD_ADDR r0, &zend_jit_profile_counter
+	dasm_put(Dst, 869);
+			if (IS_SIGNED_32BIT(&zend_jit_profile_counter)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)&zend_jit_profile_counter));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)&zend_jit_profile_counter)), (unsigned int)((((ptrdiff_t)&zend_jit_profile_counter))>>32));
+			}
+#line 2202 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|		inc aword [r0]
+	//|	.else
+	//|		inc aword [&zend_jit_profile_counter]
+	//|	.endif
+	//|	// op_array = (zend_op_array*)EX(func);
+	//|	mov r0, EX->func
+	//|	// run_time_cache = EX(run_time_cache);
+	//|	mov r2, EX->run_time_cache
+	//|	// jit_extension = (const void*)ZEND_FUNC_INFO(op_array);
+	//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+	//|	// ++ZEND_COUNTER_INFO(op_array)
+	//|	inc aword [r2 + zend_jit_profile_counter_rid * sizeof(void*)]
+	//|	// return ((zend_vm_opcode_handler_t)jit_extension->orig_handler)()
+	//|	jmp aword [r0 + offsetof(zend_jit_op_array_extension, orig_handler)]
+	dasm_put(Dst, 872, Dt1(->func), Dt1(->run_time_cache), offsetof(zend_op_array, reserved[zend_func_info_rid]), zend_jit_profile_counter_rid * sizeof(void*), offsetof(zend_jit_op_array_extension, orig_handler));
+#line 2216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_hot_code_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID) {
+		return 1;
+	}
+
+	//|->hybrid_hot_code:
+	//|	mov word [r2], ZEND_JIT_COUNTER_INIT
+	//|	mov FCARG1a, FP
+	//|	GET_IP FCARG2a
+	dasm_put(Dst, 898, ZEND_JIT_COUNTER_INIT);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 909);
+		} else {
+	dasm_put(Dst, 914, Dt1(->opline));
+		}
+#line 2229 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	EXT_CALL zend_jit_hot_func, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_hot_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_hot_func));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_hot_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_hot_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_hot_func)), (unsigned int)((((ptrdiff_t)zend_jit_hot_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 2230 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	JMP_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 90);
+		} else {
+	dasm_put(Dst, 95, Dt1(->opline));
+		}
+#line 2231 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+/*
+ * This code is based Mike Pall's "Hashed profile counters" idea, implemented
+ * in LuaJIT. The full description may be found in "LuaJIT 2.0 intellectual
+ * property disclosure and research opportunities" email
+ * at http://lua-users.org/lists/lua-l/2009-11/msg00089.html
+ *
+ * In addition we use a variation of Knuth's multiplicative hash function
+ * described at https://code.i-harness.com/en/q/a21ce
+ *
+ * uint64_t hash(uint64_t x) {
+ *    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
+ *    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
+ *    x = x ^ (x >> 31);
+ *    return x;
+ * }
+ *
+ * uint_32_t hash(uint32_t x) {
+ *    x = ((x >> 16) ^ x) * 0x45d9f3b;
+ *    x = ((x >> 16) ^ x) * 0x45d9f3b;
+ *    x = (x >> 16) ^ x;
+ *    return x;
+ * }
+ *
+ */
+static int zend_jit_hybrid_hot_counter_stub(dasm_State **Dst, uint32_t cost)
+{
+	//|	mov r0, EX->func
+	//|	mov r1, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+	//|	mov r2, aword [r1 + offsetof(zend_jit_op_array_hot_extension, counter)]
+	//|	sub word [r2], cost
+	//|	jle ->hybrid_hot_code
+	//|	GET_IP r2
+	dasm_put(Dst, 919, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_hot_extension, counter), cost);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 940);
+		} else {
+	dasm_put(Dst, 945, Dt1(->opline));
+		}
+#line 2266 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	sub r2, aword [r0 + offsetof(zend_op_array, opcodes)]
+	//|	// divide by sizeof(zend_op)
+	//|	.if X64
+	dasm_put(Dst, 950, offsetof(zend_op_array, opcodes));
+			ZEND_ASSERT(sizeof(zend_op) == 32);
+#line 2270 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|		sar r2, 2
+	//|	.else
+#line 2273 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|		imul r2, 0xb6db6db7
+	//|	.endif
+	//|	.if X64
+	//|		jmp aword [r1+r2+offsetof(zend_jit_op_array_hot_extension, orig_handlers)]
+	//|	.else
+	//|		jmp aword [r1+r2+offsetof(zend_jit_op_array_hot_extension, orig_handlers)]
+	//|	.endif
+	dasm_put(Dst, 955, offsetof(zend_jit_op_array_hot_extension, orig_handlers));
+#line 2280 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_func_hot_counter_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID || !JIT_G(hot_func)) {
+		return 1;
+	}
+
+	//|->hybrid_func_hot_counter:
+	dasm_put(Dst, 967);
+#line 2290 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_hybrid_hot_counter_stub(Dst,
+		((ZEND_JIT_COUNTER_INIT + JIT_G(hot_func) - 1) / JIT_G(hot_func)));
+}
+
+static int zend_jit_hybrid_loop_hot_counter_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID || !JIT_G(hot_loop)) {
+		return 1;
+	}
+
+	//|->hybrid_loop_hot_counter:
+	dasm_put(Dst, 970);
+#line 2302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_hybrid_hot_counter_stub(Dst,
+		((ZEND_JIT_COUNTER_INIT + JIT_G(hot_loop) - 1) / JIT_G(hot_loop)));
+}
+
+static int zend_jit_hybrid_hot_trace_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID) {
+		return 1;
+	}
+
+	//|->hybrid_hot_trace:
+	//|	mov word [r2], ZEND_JIT_COUNTER_INIT
+	//|	mov FCARG1a, FP
+	//|	GET_IP FCARG2a
+	dasm_put(Dst, 973, ZEND_JIT_COUNTER_INIT);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 909);
+		} else {
+	dasm_put(Dst, 914, Dt1(->opline));
+		}
+#line 2317 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	EXT_CALL zend_jit_trace_hot_root, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_trace_hot_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_trace_hot_root));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_trace_hot_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_trace_hot_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_trace_hot_root)), (unsigned int)((((ptrdiff_t)zend_jit_trace_hot_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 2318 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	test eax, eax // TODO : remove this check at least for HYBRID VM ???
+	//|	jl >1
+	//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r0
+	dasm_put(Dst, 984);
+			if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+	dasm_put(Dst, 71, &executor_globals.current_execute_data);
+			} else {
+	dasm_put(Dst, 77, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+			}
+#line 2321 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	LOAD_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 0, Dt1(->opline));
+		}
+#line 2322 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	JMP_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 90);
+		} else {
+	dasm_put(Dst, 95, Dt1(->opline));
+		}
+#line 2323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|1:
+	//|	EXT_JMP zend_jit_halt_op->handler, r0
+	dasm_put(Dst, 63);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_halt_op->handler)) {
+	dasm_put(Dst, 134, (ptrdiff_t)(zend_jit_halt_op->handler));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_halt_op->handler)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_halt_op->handler));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_halt_op->handler)), (unsigned int)((((ptrdiff_t)zend_jit_halt_op->handler))>>32));
+			}
+	dasm_put(Dst, 138);
+			}
+#line 2325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_trace_counter_stub(dasm_State **Dst, uint32_t cost)
+{
+	//|	mov r0, EX->func
+	//|	mov r1, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+	//|	mov r1, aword [r1 + offsetof(zend_jit_op_array_trace_extension, offset)]
+	//|	mov r2, aword [IP + r1 + offsetof(zend_op_trace_info, counter)]
+	//|	sub word [r2], cost
+	//|	jle ->hybrid_hot_trace
+	//|	jmp aword [IP + r1]
+	dasm_put(Dst, 991, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset), offsetof(zend_op_trace_info, counter), cost);
+#line 2337 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_hybrid_func_trace_counter_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID || !JIT_G(hot_func)) {
+		return 1;
+	}
+
+	//|->hybrid_func_trace_counter:
+	dasm_put(Dst, 1023);
+#line 2347 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_hybrid_trace_counter_stub(Dst,
+		((ZEND_JIT_COUNTER_INIT + JIT_G(hot_func) - 1)  / JIT_G(hot_func)));
+}
+
+static int zend_jit_hybrid_ret_trace_counter_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID || !JIT_G(hot_return)) {
+		return 1;
+	}
+
+	//|->hybrid_ret_trace_counter:
+	dasm_put(Dst, 1026);
+#line 2359 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_hybrid_trace_counter_stub(Dst,
+		((ZEND_JIT_COUNTER_INIT + JIT_G(hot_return) - 1) / JIT_G(hot_return)));
+}
+
+static int zend_jit_hybrid_loop_trace_counter_stub(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind != ZEND_VM_KIND_HYBRID || !JIT_G(hot_loop)) {
+		return 1;
+	}
+
+	//|->hybrid_loop_trace_counter:
+	dasm_put(Dst, 1029);
+#line 2371 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_hybrid_trace_counter_stub(Dst,
+		((ZEND_JIT_COUNTER_INIT + JIT_G(hot_loop) - 1) / JIT_G(hot_loop)));
+}
+
+static int zend_jit_trace_halt_stub(dasm_State **Dst)
+{
+	//|->trace_halt:
+	dasm_put(Dst, 1032);
+#line 2379 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 2381 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_JMP zend_jit_halt_op->handler, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_halt_op->handler)) {
+		dasm_put(Dst, 134, (ptrdiff_t)(zend_jit_halt_op->handler));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_halt_op->handler)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_halt_op->handler));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_halt_op->handler)), (unsigned int)((((ptrdiff_t)zend_jit_halt_op->handler))>>32));
+				}
+		dasm_put(Dst, 138);
+				}
+#line 2382 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	xor IP, IP // PC must be zero
+		//|	ret
+		dasm_put(Dst, 1035);
+#line 2386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, -1 // ZEND_VM_RETURN
+		//|	ret
+		dasm_put(Dst, 1045);
+#line 2392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_trace_exit_stub(dasm_State **Dst)
+{
+	//|->trace_exit:
+	//|
+	//|	// Save CPU registers
+	//|.if X64
+	//|	sub r4, 16*8+16*8-8 /* CPU regs + SSE regs */
+	//|	mov aword [r4+15*8], r15
+	//|	mov aword [r4+11*8], r11
+	//|	mov aword [r4+10*8], r10
+	//|	mov aword [r4+9*8], r9
+	//|	mov aword [r4+8*8], r8
+	//|	mov aword [r4+7*8], rdi
+	//|	mov aword [r4+6*8], rsi
+	//|	mov aword [r4+2*8], rdx
+	//|	mov aword [r4+1*8], rcx
+	//|	mov aword [r4+0*8], rax
+	//|	mov FCARG1a, aword [r4+16*8+16*8-8] // exit_num = POP
+	//|	mov FCARG2a, r4
+	//|	movsd qword [r4+16*8+15*8], xmm15
+	//|	movsd qword [r4+16*8+14*8], xmm14
+	//|	movsd qword [r4+16*8+13*8], xmm13
+	//|	movsd qword [r4+16*8+12*8], xmm12
+	//|	movsd qword [r4+16*8+11*8], xmm11
+	//|	movsd qword [r4+16*8+10*8], xmm10
+	//|	movsd qword [r4+16*8+9*8], xmm9
+	dasm_put(Dst, 1072, 16*8+16*8-8 /* CPU regs + SSE regs */, 15*8, 11*8, 10*8, 9*8, 8*8, 7*8, 6*8, 2*8, 1*8, 0*8, 16*8+16*8-8, 16*8+15*8, 16*8+14*8, 16*8+13*8, 16*8+12*8, 16*8+11*8, 16*8+10*8);
+#line 2422 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	movsd qword [r4+16*8+8*8], xmm8
+	//|	movsd qword [r4+16*8+7*8], xmm7
+	//|	movsd qword [r4+16*8+6*8], xmm6
+	//|	movsd qword [r4+16*8+5*8], xmm5
+	//|	movsd qword [r4+16*8+4*8], xmm4
+	//|	movsd qword [r4+16*8+3*8], xmm3
+	//|	movsd qword [r4+16*8+2*8], xmm2
+	//|	movsd qword [r4+16*8+1*8], xmm1
+	//|	movsd qword [r4+16*8+0*8], xmm0
+	//|.if X64WIN
+	//|	sub r4, 32 /* shadow space */
+	//|.endif
+	//|.else
+	//|	sub r4, 8*4+8*8-4 /* CPU regs + SSE regs */
+	//|	mov aword [r4+7*4], edi
+	//|	mov aword [r4+2*4], edx
+	//|	mov aword [r4+1*4], ecx
+	//|	mov aword [r4+0*4], eax
+	//|	mov FCARG1a, aword [r4+8*4+8*8-4] // exit_num = POP
+	//|	mov FCARG2a, r4
+	//|	movsd qword [r4+8*4+7*8], xmm7
+	//|	movsd qword [r4+8*4+6*8], xmm6
+	//|	movsd qword [r4+8*4+5*8], xmm5
+	//|	movsd qword [r4+8*4+4*8], xmm4
+	//|	movsd qword [r4+8*4+3*8], xmm3
+	//|	movsd qword [r4+8*4+2*8], xmm2
+	//|	movsd qword [r4+8*4+1*8], xmm1
+	//|	movsd qword [r4+8*4+0*8], xmm0
+	//|.endif
+	//|
+	//|	// EX(opline) = opline
+	//|	SAVE_IP
+	dasm_put(Dst, 1203, 16*8+9*8, 16*8+8*8, 16*8+7*8, 16*8+6*8, 16*8+5*8, 16*8+4*8, 16*8+3*8, 16*8+2*8, 16*8+1*8, 16*8+0*8);
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+#line 2454 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// zend_jit_trace_exit(trace_num, exit_num)
+	//|	EXT_CALL zend_jit_trace_exit, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_trace_exit)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_trace_exit));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_trace_exit)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_trace_exit));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_trace_exit)), (unsigned int)((((ptrdiff_t)zend_jit_trace_exit))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 2456 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.if X64WIN
+	//|	add r4, 16*8+16*8+32 /* CPU regs + SSE regs + shadow space */
+	//|.elif X64
+	//|	add r4, 16*8+16*8 /* CPU regs + SSE regs */
+	//|.else
+	//|	add r4, 8*4+8*8 /* CPU regs + SSE regs */
+	//|.endif
+	dasm_put(Dst, 1286, 16*8+16*8 /* CPU regs + SSE regs */);
+#line 2463 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	//|	test eax, eax
+	//|	jne >1
+	dasm_put(Dst, 1291);
+#line 2466 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	//|	// execute_data = EG(current_execute_data)
+	//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r0
+			if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+	dasm_put(Dst, 71, &executor_globals.current_execute_data);
+			} else {
+	dasm_put(Dst, 77, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+			}
+#line 2469 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// opline = EX(opline)
+	//|	LOAD_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 0, Dt1(->opline));
+		}
+#line 2471 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 2474 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 2475 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	JMP_IP
+		dasm_put(Dst, 103);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 2478 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 1 // ZEND_VM_ENTER
+		//|	ret
+		dasm_put(Dst, 108);
+#line 2484 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|1:
+	//|	jl ->trace_halt
+	dasm_put(Dst, 1298);
+#line 2488 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	//|	// execute_data = EG(current_execute_data)
+	//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r0
+			if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+	dasm_put(Dst, 71, &executor_globals.current_execute_data);
+			} else {
+	dasm_put(Dst, 77, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+			}
+#line 2491 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// opline = EX(opline)
+	//|	LOAD_IP
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 0, Dt1(->opline));
+		}
+#line 2493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	//|	// check for interrupt (try to avoid this ???)
+	//|	MEM_CMP_ZTS byte, executor_globals, vm_interrupt, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+	dasm_put(Dst, 27, &executor_globals.vm_interrupt);
+			} else {
+	dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+			}
+#line 2496 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne ->interrupt_handler
+	dasm_put(Dst, 1305);
+#line 2497 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 2500 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov r0, EX->func
+		//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+		//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+		//|	jmp aword [IP + r0]
+		dasm_put(Dst, 1310, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 2504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	mov r0, EX->func
+		//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+		//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+		//|	jmp aword [IP + r0]
+		dasm_put(Dst, 1328, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 2510 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov IP, aword EX->opline
+		//|	mov FCARG1a, FP
+		//|	mov r0, EX->func
+		//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+		//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+		//|	call aword [IP + r0]
+		//|	test eax, eax
+		//|	jl ->trace_halt
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 1 // ZEND_VM_ENTER
+		//|	ret
+		dasm_put(Dst, 1350, Dt1(->opline), Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 2524 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_trace_escape_stub(dasm_State **Dst)
+{
+	//|->trace_escape:
+	//|
+	dasm_put(Dst, 1404);
+#line 2533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 2535 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 2536 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	JMP_IP
+		dasm_put(Dst, 103);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 2539 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 1 // ZEND_VM_ENTER
+		//|	ret
+		dasm_put(Dst, 108);
+#line 2545 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+/* Keep 32 exit points in a single code block */
+#define ZEND_JIT_EXIT_POINTS_SPACING   4  // push byte + short jmp = bytes
+#define ZEND_JIT_EXIT_POINTS_PER_GROUP 32 // number of continuous exit points
+
+static int zend_jit_trace_exit_group_stub(dasm_State **Dst, uint32_t n)
+{
+	uint32_t i;
+
+	for (i = 0; i < ZEND_JIT_EXIT_POINTS_PER_GROUP - 1; i++) {
+		//|	push byte i
+		//|	.byte 0xeb, (4*(ZEND_JIT_EXIT_POINTS_PER_GROUP-i)-6) // jmp >1
+		dasm_put(Dst, 1407, i, (4*(ZEND_JIT_EXIT_POINTS_PER_GROUP-i)-6));
+#line 2561 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	push byte i
+	//|// 1:
+	//|	add aword [r4], n
+	//|	jmp ->trace_exit
+	dasm_put(Dst, 1413, i, n);
+#line 2566 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+#ifdef CONTEXT_THREADED_JIT
+static int zend_jit_context_threaded_call_stub(dasm_State **Dst)
+{
+	//|->context_threaded_call:
+	//|	pop r0
+	dasm_put(Dst, 1426);
+#line 2575 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 2577 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp aword [IP]
+		dasm_put(Dst, 90);
+#line 2578 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		//|	jmp aword [IP]
+		dasm_put(Dst, 1430);
+#line 2581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		ZEND_UNREACHABLE();
+		// TODO: context threading can't work without GLOBAL REGS because we have to change
+		//       the value of execute_data in execute_ex()
+		//|	mov FCARG1a, FP
+		//|	mov r0, aword [FP]
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	jmp aword [r0]
+		dasm_put(Dst, 1439);
+#line 2591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+#endif
+
+static int zend_jit_assign_const_stub(dasm_State **Dst)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+	uint32_t val_info = MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN;
+
+	//|->assign_const:
+	//|.if X64WIN
+	//|	sub r4, 0x28
+	//|.elif X64
+	//|	sub r4, 8
+	//|.else
+	//|	sub r4, 12
+	//|.endif
+	dasm_put(Dst, 1464);
+#line 2610 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_assign_to_variable(
+			Dst, NULL,
+			var_addr, var_addr, -1, -1,
+			IS_CONST, val_addr, val_info,
+			0, 0)) {
+		return 0;
+	}
+	//|.if X64WIN
+	//|	add r4, 0x28
+	//|.elif X64
+	//|	add r4, 8
+	//|.else
+	//|	add r4, 12
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2625 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_assign_tmp_stub(dasm_State **Dst)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+	uint32_t val_info = MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN;
+
+	//|->assign_tmp:
+	//|.if X64WIN
+	//|	sub r4, 0x28
+	//|.elif X64
+	//|	sub r4, 8
+	//|.else
+	//|	sub r4, 12
+	//|.endif
+	dasm_put(Dst, 1472);
+#line 2642 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_assign_to_variable(
+			Dst, NULL,
+			var_addr, var_addr, -1, -1,
+			IS_TMP_VAR, val_addr, val_info,
+			0, 0)) {
+		return 0;
+	}
+	//|.if X64WIN
+	//|	add r4, 0x28
+	//|.elif X64
+	//|	add r4, 8
+	//|.else
+	//|	add r4, 12
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2657 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_assign_var_stub(dasm_State **Dst)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+	uint32_t val_info = MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF;
+
+	//|->assign_var:
+	//|.if X64WIN
+	//|	sub r4, 0x28
+	//|.elif X64
+	//|	sub r4, 8
+	//|.else
+	//|	sub r4, 12
+	//|.endif
+	dasm_put(Dst, 1480);
+#line 2674 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_assign_to_variable(
+			Dst, NULL,
+			var_addr, var_addr, -1, -1,
+			IS_VAR, val_addr, val_info,
+			0, 0)) {
+		return 0;
+	}
+	//|.if X64WIN
+	//|	add r4, 0x28
+	//|.elif X64
+	//|	add r4, 8
+	//|.else
+	//|	add r4, 12
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2689 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_assign_cv_noref_stub(dasm_State **Dst)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+	uint32_t val_info = MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN/*|MAY_BE_UNDEF*/;
+
+	//|->assign_cv_noref:
+	//|.if X64WIN
+	//|	sub r4, 0x28
+	//|.elif X64
+	//|	sub r4, 8
+	//|.else
+	//|	sub r4, 12
+	//|.endif
+	dasm_put(Dst, 1488);
+#line 2706 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_assign_to_variable(
+			Dst, NULL,
+			var_addr, var_addr, -1, -1,
+			IS_CV, val_addr, val_info,
+			0, 0)) {
+		return 0;
+	}
+	//|.if X64WIN
+	//|	add r4, 0x28
+	//|.elif X64
+	//|	add r4, 8
+	//|.else
+	//|	add r4, 12
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2721 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_assign_cv_stub(dasm_State **Dst)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+	uint32_t val_info = MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN|MAY_BE_REF/*|MAY_BE_UNDEF*/;
+
+	//|->assign_cv:
+	//|.if X64WIN
+	//|	sub r4, 0x28
+	//|.elif X64
+	//|	sub r4, 8
+	//|.else
+	//|	sub r4, 12
+	//|.endif
+	dasm_put(Dst, 1496);
+#line 2738 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_assign_to_variable(
+			Dst, NULL,
+			var_addr, var_addr, -1, -1,
+			IS_CV, val_addr, val_info,
+			0, 0)) {
+		return 0;
+	}
+	//|.if X64WIN
+	//|	add r4, 0x28
+	//|.elif X64
+	//|	add r4, 8
+	//|.else
+	//|	add r4, 12
+	//|.endif
+	//|	ret
+	dasm_put(Dst, 626);
+#line 2753 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static const zend_jit_stub zend_jit_stubs[] = {
+	JIT_STUB(interrupt_handler,         SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(exception_handler,         SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(exception_handler_undef,   SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(leave_function,            SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(leave_throw,               SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(icall_throw,               SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(throw_cannot_pass_by_ref,  SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(undefined_offset,          SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(undefined_index,           SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(cannot_add_element,        SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(undefined_offset_ex,       SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(undefined_index_ex,        SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(cannot_add_element_ex,     SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(undefined_function,        SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(negative_shift,            SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(mod_by_zero,               SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(invalid_this,              SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(trace_halt,                SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(trace_exit,                SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(trace_escape,              SP_ADJ_JIT,  SP_ADJ_VM),
+	JIT_STUB(hybrid_runtime_jit,        SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_profile_jit,        SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_hot_code,           SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_func_hot_counter,   SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_loop_hot_counter,   SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_hot_trace,          SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_func_trace_counter, SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_ret_trace_counter,  SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(hybrid_loop_trace_counter, SP_ADJ_VM,   SP_ADJ_NONE),
+	JIT_STUB(assign_const,              SP_ADJ_RET,  SP_ADJ_ASSIGN),
+	JIT_STUB(assign_tmp,                SP_ADJ_RET,  SP_ADJ_ASSIGN),
+	JIT_STUB(assign_var,                SP_ADJ_RET,  SP_ADJ_ASSIGN),
+	JIT_STUB(assign_cv_noref,           SP_ADJ_RET,  SP_ADJ_ASSIGN),
+	JIT_STUB(assign_cv,                 SP_ADJ_RET,  SP_ADJ_ASSIGN),
+	JIT_STUB(double_one,                SP_ADJ_NONE, SP_ADJ_NONE),
+#ifdef CONTEXT_THREADED_JIT
+	JIT_STUB(context_threaded_call,     SP_ADJ_RET,  SP_ADJ_NONE),
+#endif
+};
+
+#if ZTS && defined(ZEND_WIN32)
+extern uint32_t _tls_index;
+extern char *_tls_start;
+extern char *_tls_end;
+#endif
+
+#ifdef HAVE_GDB
+typedef struct _Unwind_Context _Unwind_Context;
+typedef int (*_Unwind_Trace_Fn)(_Unwind_Context *, void *);
+extern int _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
+extern uintptr_t _Unwind_GetCFA(_Unwind_Context *);
+
+typedef struct _zend_jit_unwind_arg {
+	int cnt;
+	uintptr_t cfa[3];
+} zend_jit_unwind_arg;
+
+static int zend_jit_unwind_cb(_Unwind_Context *ctx, void *a)
+{
+	zend_jit_unwind_arg *arg = (zend_jit_unwind_arg*)a;
+	arg->cfa[arg->cnt] = _Unwind_GetCFA(ctx);
+	arg->cnt++;
+	if (arg->cnt == 3) {
+		return 5; // _URC_END_OF_STACK
+	}
+	return 0; // _URC_NO_REASON;
+}
+
+static void ZEND_FASTCALL zend_jit_touch_vm_stack_data(void *vm_stack_data)
+{
+	zend_jit_unwind_arg arg;
+
+	memset(&arg, 0, sizeof(arg));
+	_Unwind_Backtrace(zend_jit_unwind_cb, &arg);
+	if (arg.cnt == 3) {
+		sp_adj[SP_ADJ_VM] = arg.cfa[2] - arg.cfa[1];
+	}
+}
+
+extern void (ZEND_FASTCALL *zend_touch_vm_stack_data)(void *vm_stack_data);
+
+static zend_never_inline void zend_jit_set_sp_adj_vm(void)
+{
+	void (ZEND_FASTCALL *orig_zend_touch_vm_stack_data)(void *);
+
+	orig_zend_touch_vm_stack_data = zend_touch_vm_stack_data;
+	zend_touch_vm_stack_data = zend_jit_touch_vm_stack_data;
+	execute_ex(NULL);                                        // set sp_adj[SP_ADJ_VM]
+	zend_touch_vm_stack_data = orig_zend_touch_vm_stack_data;
+}
+#endif
+
+static int zend_jit_setup(void)
+{
+	if (!zend_cpu_supports_sse2()) {
+		zend_error(E_CORE_ERROR, "CPU doesn't support SSE2");
+		return FAILURE;
+	}
+	allowed_opt_flags = 0;
+	if (zend_cpu_supports_avx()) {
+		allowed_opt_flags |= ZEND_JIT_CPU_AVX;
+	}
+
+#if ZTS
+# ifdef _WIN64
+	tsrm_tls_index  = _tls_index * sizeof(void*);
+
+	/* To find offset of "_tsrm_ls_cache" in TLS segment we perform a linear scan of local TLS memory */
+	/* Probably, it might be better solution */
+	do {
+		void ***tls_mem = ((void**)__readgsqword(0x58))[_tls_index];
+		void *val = _tsrm_ls_cache;
+		size_t offset = 0;
+		size_t size = (char*)&_tls_end - (char*)&_tls_start;
+
+		while (offset < size) {
+			if (*tls_mem == val) {
+				tsrm_tls_offset = offset;
+				break;
+			}
+			tls_mem++;
+			offset += sizeof(void*);
+		}
+		if (offset >= size) {
+			// TODO: error message ???
+			return FAILURE;
+		}
+	} while(0);
+# elif ZEND_WIN32
+	tsrm_tls_index  = _tls_index * sizeof(void*);
+
+	/* To find offset of "_tsrm_ls_cache" in TLS segment we perform a linear scan of local TLS memory */
+	/* Probably, it might be better solution */
+	do {
+		void ***tls_mem = ((void***)__readfsdword(0x2c))[_tls_index];
+		void *val = _tsrm_ls_cache;
+		size_t offset = 0;
+		size_t size = (char*)&_tls_end - (char*)&_tls_start;
+
+		while (offset < size) {
+			if (*tls_mem == val) {
+				tsrm_tls_offset = offset;
+				break;
+			}
+			tls_mem++;
+			offset += sizeof(void*);
+		}
+		if (offset >= size) {
+			// TODO: error message ???
+			return FAILURE;
+		}
+	} while(0);
+# elif defined(__APPLE__) && defined(__x86_64__)
+	tsrm_ls_cache_tcb_offset = tsrm_get_ls_cache_tcb_offset();
+	if (tsrm_ls_cache_tcb_offset == 0) {
+		size_t *ti;
+		__asm__(
+			"leaq __tsrm_ls_cache(%%rip),%0"
+			: "=r" (ti));
+		tsrm_tls_offset = ti[2];
+		tsrm_tls_index = ti[1] * 8;
+	}
+# elif defined(__GNUC__) && defined(__x86_64__)
+	tsrm_ls_cache_tcb_offset = tsrm_get_ls_cache_tcb_offset();
+	if (tsrm_ls_cache_tcb_offset == 0) {
+#if defined(__has_attribute) && __has_attribute(tls_model) && !defined(__FreeBSD__)
+		size_t ret;
+
+		asm ("movq _tsrm_ls_cache@gottpoff(%%rip),%0"
+			: "=r" (ret));
+		tsrm_ls_cache_tcb_offset = ret;
+#else
+		size_t *ti;
+
+		__asm__(
+			"leaq _tsrm_ls_cache@tlsgd(%%rip), %0\n"
+			: "=a" (ti));
+		tsrm_tls_offset = ti[1];
+		tsrm_tls_index = ti[0] * 16;
+#endif
+	}
+# elif defined(__GNUC__) && defined(__i386__)
+	tsrm_ls_cache_tcb_offset = tsrm_get_ls_cache_tcb_offset();
+	if (tsrm_ls_cache_tcb_offset == 0) {
+#if !defined(__FreeBSD__)
+		size_t ret;
+
+		asm ("leal _tsrm_ls_cache@ntpoff,%0\n"
+			: "=a" (ret));
+		tsrm_ls_cache_tcb_offset = ret;
+#else
+		size_t *ti, _ebx, _ecx, _edx;
+
+		__asm__(
+			"call 1f\n"
+			".subsection 1\n"
+			"1:\tmovl (%%esp), %%ebx\n\t"
+			"ret\n"
+			".previous\n\t"
+			"addl $_GLOBAL_OFFSET_TABLE_, %%ebx\n\t"
+			"leal _tsrm_ls_cache@tlsldm(%%ebx), %0\n\t"
+			"call ___tls_get_addr@plt\n\t"
+			"leal _tsrm_ls_cache@tlsldm(%%ebx), %0\n"
+			: "=a" (ti), "=&b" (_ebx), "=&c" (_ecx), "=&d" (_edx));
+		tsrm_tls_offset = ti[1];
+		tsrm_tls_index = ti[0] * 8;
+#endif
+	}
+# endif
+#endif
+
+    memset(sp_adj, 0, sizeof(sp_adj));
+#ifdef HAVE_GDB
+	sp_adj[SP_ADJ_RET] = sizeof(void*);
+	//|.if X64WIN
+#line 2973 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.elif X64
+		sp_adj[SP_ADJ_ASSIGN] = sp_adj[SP_ADJ_RET] + 8;          // sub @q4, 8
+	//|.else
+#line 2977 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.endif
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		zend_jit_set_sp_adj_vm();                                // set sp_adj[SP_ADJ_VM]
+#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		 sp_adj[SP_ADJ_JIT] = sp_adj[SP_ADJ_VM] + 16; // sub @q4, 16
+#else
+		 sp_adj[SP_ADJ_JIT] = sp_adj[SP_ADJ_VM];
+#endif
+	} else if (GCC_GLOBAL_REGS) {
+		 sp_adj[SP_ADJ_JIT] = sp_adj[SP_ADJ_RET] + 0x18;       // sub @q4, 0x18
+	} else {
+		 sp_adj[SP_ADJ_JIT] = sp_adj[SP_ADJ_RET] + 0x28;    // sub @q4, 0x28
+	}
+#endif
+
+	return SUCCESS;
+}
+
+static ZEND_ATTRIBUTE_UNUSED int zend_jit_trap(dasm_State **Dst)
+{
+	//|	int3
+	dasm_put(Dst, 1504);
+#line 2998 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_align_func(dasm_State **Dst)
+{
+	reuse_ip = 0;
+	delayed_call_chain = 0;
+	last_valid_opline = NULL;
+	use_last_vald_opline = 0;
+	track_last_valid_opline = 0;
+	jit_return_label = -1;
+	//|.align 16
+	dasm_put(Dst, 1506);
+#line 3010 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_prologue(dasm_State **Dst)
+{
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	SUB_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 1509);
+		#endif
+#line 3017 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (GCC_GLOBAL_REGS) {
+		//|	sub r4, SPAD // stack alignment
+		dasm_put(Dst, 1515);
+#line 3019 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	sub r4, NR_SPAD // stack alignment
+		//|	mov aword T2, FP // save FP
+		//|	mov aword T3, RX // save IP
+		//|	mov FP, FCARG1a
+		dasm_put(Dst, 1521);
+#line 3024 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_label(dasm_State **Dst, unsigned int label)
+{
+	//|=>label:
+	dasm_put(Dst, 475, label);
+#line 3031 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_save_call_chain(dasm_State **Dst, uint32_t call_level)
+{
+	//|	// call->prev_execute_data = EX(call);
+	if (call_level == 1) {
+		//|	mov aword EX:RX->prev_execute_data, 0
+		dasm_put(Dst, 1541, Dt1(->prev_execute_data));
+#line 3039 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	mov r0, EX->call
+		//|	mov EX:RX->prev_execute_data, r0
+		dasm_put(Dst, 1550, Dt1(->call), Dt1(->prev_execute_data));
+#line 3042 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	// EX(call) = call;
+	//|	mov EX->call, RX
+	dasm_put(Dst, 8, Dt1(->call));
+#line 3045 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	delayed_call_chain = 0;
+
+	return 1;
+}
+
+static int zend_jit_set_ip(dasm_State **Dst, const zend_op *opline)
+{
+	if (last_valid_opline == opline) {
+		zend_jit_use_last_valid_opline();
+	} else if (GCC_GLOBAL_REGS && last_valid_opline) {
+		zend_jit_use_last_valid_opline();
+		//|	ADD_IP (opline - last_valid_opline) * sizeof(zend_op);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 1559, (opline - last_valid_opline) * sizeof(zend_op));
+			} else {
+		dasm_put(Dst, 1564, Dt1(->opline), (opline - last_valid_opline) * sizeof(zend_op));
+			}
+#line 3058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	LOAD_IP_ADDR opline
+			if (GCC_GLOBAL_REGS) {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32));
+				}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+			}
+#line 3060 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	zend_jit_set_last_valid_opline(opline);
+
+	return 1;
+}
+
+static int zend_jit_set_ip_ex(dasm_State **Dst, const zend_op *opline, bool set_ip_reg)
+{
+	if (last_valid_opline == opline) {
+		zend_jit_use_last_valid_opline();
+	} else if (GCC_GLOBAL_REGS && last_valid_opline) {
+		zend_jit_use_last_valid_opline();
+		//|	ADD_IP (opline - last_valid_opline) * sizeof(zend_op);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 1559, (opline - last_valid_opline) * sizeof(zend_op));
+			} else {
+		dasm_put(Dst, 1564, Dt1(->opline), (opline - last_valid_opline) * sizeof(zend_op));
+			}
+#line 3073 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (!GCC_GLOBAL_REGS && set_ip_reg) {
+		//|	LOAD_ADDR RX, opline
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32));
+				}
+#line 3075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov aword EX->opline, RX
+		dasm_put(Dst, 8, Dt1(->opline));
+#line 3076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	LOAD_IP_ADDR opline
+			if (GCC_GLOBAL_REGS) {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32));
+				}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+			}
+#line 3078 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	zend_jit_set_last_valid_opline(opline);
+
+	return 1;
+}
+
+static int zend_jit_set_valid_ip(dasm_State **Dst, const zend_op *opline)
+{
+	if (delayed_call_chain) {
+		if (!zend_jit_save_call_chain(Dst, delayed_call_level)) {
+			return 0;
+		}
+	}
+	if (!zend_jit_set_ip(Dst, opline)) {
+		return 0;
+	}
+	reuse_ip = 0;
+	return 1;
+}
+
+static int zend_jit_check_timeout(dasm_State **Dst, const zend_op *opline, const void *exit_addr)
+{
+#if 0
+	if (!zend_jit_set_valid_ip(Dst, opline)) {
+		return 0;
+	}
+	//|	MEM_CMP_ZTS byte, executor_globals, vm_interrupt, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+	dasm_put(Dst, 27, &executor_globals.vm_interrupt);
+			} else {
+	dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+			}
+#line 3105 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne ->interrupt_handler
+	dasm_put(Dst, 1305);
+#line 3106 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+	//|	MEM_CMP_ZTS byte, executor_globals, vm_interrupt, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+	dasm_put(Dst, 27, &executor_globals.vm_interrupt);
+			} else {
+	dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+			}
+#line 3108 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (exit_addr) {
+		//|	jne &exit_addr
+		dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 3110 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (last_valid_opline == opline) {
+				zend_jit_use_last_valid_opline();
+		//|	jne ->interrupt_handler
+		dasm_put(Dst, 1305);
+#line 3113 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jne >1
+		//|.cold_code
+		dasm_put(Dst, 441);
+#line 3116 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	LOAD_IP_ADDR opline
+		dasm_put(Dst, 63);
+			if (GCC_GLOBAL_REGS) {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 281, ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32));
+				}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+			}
+#line 3118 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp ->interrupt_handler
+		//|.code
+		dasm_put(Dst, 1574);
+#line 3120 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+#endif
+	return 1;
+}
+
+static int zend_jit_trace_end_loop(dasm_State **Dst, int loop_label, const void *timeout_exit_addr)
+{
+	if (timeout_exit_addr) {
+		//|	MEM_CMP_ZTS byte, executor_globals, vm_interrupt, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+		dasm_put(Dst, 27, &executor_globals.vm_interrupt);
+				} else {
+		dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+				}
+#line 3129 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	je =>loop_label
+		//|	jmp &timeout_exit_addr
+		dasm_put(Dst, 1580, loop_label, (ptrdiff_t)(timeout_exit_addr));
+#line 3131 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jmp =>loop_label
+		dasm_put(Dst, 1587, loop_label);
+#line 3133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_check_exception(dasm_State **Dst)
+{
+	//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+			if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+	dasm_put(Dst, 1591, &executor_globals.exception);
+			} else {
+	dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+			}
+#line 3140 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne ->exception_handler
+	dasm_put(Dst, 1607);
+#line 3141 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_check_exception_undef_result(dasm_State **Dst, const zend_op *opline)
+{
+	if (opline->result_type & (IS_TMP_VAR|IS_VAR)) {
+		//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+		dasm_put(Dst, 1591, &executor_globals.exception);
+				} else {
+		dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+				}
+#line 3148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jne ->exception_handler_undef
+		dasm_put(Dst, 1612);
+#line 3149 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		return 1;
+	}
+	return zend_jit_check_exception(Dst);
+}
+
+static int zend_jit_trace_begin(dasm_State **Dst, uint32_t trace_num, zend_jit_trace_info *parent, uint32_t exit_num)
+{
+	zend_regset regset = ZEND_REGSET_SCRATCH;
+
+#if ZTS
+	if (1) {
+#else
+	if ((sizeof(void*) == 8 && !IS_SIGNED_32BIT(&EG(jit_trace_num)))) {
+#endif
+		/* assignment to EG(jit_trace_num) shouldn't clober CPU register used by deoptimizer */
+		if (parent) {
+			int i;
+			int parent_vars_count = parent->exit_info[exit_num].stack_size;
+			zend_jit_trace_stack *parent_stack =
+				parent->stack_map +
+				parent->exit_info[exit_num].stack_offset;
+
+			for (i = 0; i < parent_vars_count; i++) {
+				if (STACK_REG(parent_stack, i) != ZREG_NONE) {
+					if (STACK_REG(parent_stack, i) < ZREG_NUM) {
+						ZEND_REGSET_EXCL(regset, STACK_REG(parent_stack, i));
+					} else if (STACK_REG(parent_stack, i) == ZREG_ZVAL_COPY_GPR0) {
+						ZEND_REGSET_EXCL(regset, ZREG_R0);
+					}
+				}
+			}
+		}
+	}
+
+	if (parent && parent->exit_info[exit_num].flags & ZEND_JIT_EXIT_METHOD_CALL) {
+		ZEND_REGSET_EXCL(regset, ZREG_R0);
+	}
+
+	current_trace_num = trace_num;
+
+	//|	// EG(jit_trace_num) = trace_num;
+	if (regset == ZEND_REGSET_EMPTY) {
+		//|	push r0
+		//|	MEM_STORE_ZTS dword, executor_globals, jit_trace_num, trace_num, r0
+		dasm_put(Dst, 1617);
+				if (IS_SIGNED_32BIT(&executor_globals.jit_trace_num)) {
+		dasm_put(Dst, 1619, &executor_globals.jit_trace_num, trace_num);
+				} else {
+		dasm_put(Dst, 1625, (unsigned int)(((ptrdiff_t)&executor_globals.jit_trace_num)), (unsigned int)((((ptrdiff_t)&executor_globals.jit_trace_num))>>32), trace_num);
+				}
+#line 3193 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	pop r0
+		dasm_put(Dst, 1428);
+#line 3194 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		zend_reg tmp = ZEND_REGSET_FIRST(regset);
+
+		//|	MEM_STORE_ZTS dword, executor_globals, jit_trace_num, trace_num, Ra(tmp)
+				if (IS_SIGNED_32BIT(&executor_globals.jit_trace_num)) {
+		dasm_put(Dst, 1619, &executor_globals.jit_trace_num, trace_num);
+				} else {
+		dasm_put(Dst, 1633, (tmp), (unsigned int)(((ptrdiff_t)&executor_globals.jit_trace_num)), (unsigned int)((((ptrdiff_t)&executor_globals.jit_trace_num))>>32), (tmp), 0, trace_num);
+				}
+#line 3198 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		(void)tmp;
+	}
+
+	return 1;
+}
+
+static int zend_jit_trace_end(dasm_State **Dst, zend_jit_trace_info *t)
+{
+	//|.cold_code
+	dasm_put(Dst, 445);
+#line 3207 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|=>1: // end of the code
+	//|.code
+	dasm_put(Dst, 1648, 1);
+#line 3209 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+/* This taken from LuaJIT. Thanks to Mike Pall. */
+static uint32_t _asm_x86_inslen(const uint8_t* p)
+{
+	static const uint8_t map_op1[256] = {
+		0x92,0x92,0x92,0x92,0x52,0x45,0x51,0x51,0x92,0x92,0x92,0x92,0x52,0x45,0x51,0x20,
+		0x92,0x92,0x92,0x92,0x52,0x45,0x51,0x51,0x92,0x92,0x92,0x92,0x52,0x45,0x51,0x51,
+		0x92,0x92,0x92,0x92,0x52,0x45,0x10,0x51,0x92,0x92,0x92,0x92,0x52,0x45,0x10,0x51,
+		0x92,0x92,0x92,0x92,0x52,0x45,0x10,0x51,0x92,0x92,0x92,0x92,0x52,0x45,0x10,0x51,
+#if defined(__x86_64__) || defined(_M_X64)
+		0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,
+#else
+		0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,
+#endif
+		0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,
+		0x51,0x51,0x92,0x92,0x10,0x10,0x12,0x11,0x45,0x86,0x52,0x93,0x51,0x51,0x51,0x51,
+		0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,
+		0x93,0x86,0x93,0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+		0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0x47,0x51,0x51,0x51,0x51,0x51,
+#if defined(__x86_64__) || defined(_M_X64)
+		0x59,0x59,0x59,0x59,0x51,0x51,0x51,0x51,0x52,0x45,0x51,0x51,0x51,0x51,0x51,0x51,
+#else
+		0x55,0x55,0x55,0x55,0x51,0x51,0x51,0x51,0x52,0x45,0x51,0x51,0x51,0x51,0x51,0x51,
+#endif
+		0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,
+		0x93,0x93,0x53,0x51,0x70,0x71,0x93,0x86,0x54,0x51,0x53,0x51,0x51,0x52,0x51,0x51,
+		0x92,0x92,0x92,0x92,0x52,0x52,0x51,0x51,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+		0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x45,0x45,0x47,0x52,0x51,0x51,0x51,0x51,
+		0x10,0x51,0x10,0x10,0x51,0x51,0x63,0x66,0x51,0x51,0x51,0x51,0x51,0x51,0x92,0x92
+	};
+	static const uint8_t map_op2[256] = {
+		0x93,0x93,0x93,0x93,0x52,0x52,0x52,0x52,0x52,0x52,0x51,0x52,0x51,0x93,0x52,0x94,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x53,0x53,0x53,0x53,0x53,0x53,0x53,0x53,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x34,0x51,0x35,0x51,0x51,0x51,0x51,0x51,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x53,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x94,0x54,0x54,0x54,0x93,0x93,0x93,0x52,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,0x46,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x52,0x52,0x52,0x93,0x94,0x93,0x51,0x51,0x52,0x52,0x52,0x93,0x94,0x93,0x93,0x93,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x94,0x93,0x93,0x93,0x93,0x93,
+		0x93,0x93,0x94,0x93,0x94,0x94,0x94,0x93,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,
+		0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x52
+	};
+	uint32_t result = 0;
+	uint32_t prefixes = 0;
+	uint32_t x = map_op1[*p];
+
+	for (;;) {
+		switch (x >> 4) {
+			case 0:
+				return result + x + (prefixes & 4);
+			case 1:
+				prefixes |= x;
+				x = map_op1[*++p];
+				result++;
+				break;
+			case 2:
+				x = map_op2[*++p];
+				break;
+			case 3:
+				p++;
+				goto mrm;
+			case 4:
+				result -= (prefixes & 2);
+				/* fallthrough */
+			case 5:
+				return result + (x & 15);
+			case 6: /* Group 3. */
+				if (p[1] & 0x38) {
+					x = 2;
+				} else if ((prefixes & 2) && (x == 0x66)) {
+					x = 4;
+				}
+				goto mrm;
+			case 7: /* VEX c4/c5. */
+#if !defined(__x86_64__) && !defined(_M_X64)
+				if (p[1] < 0xc0) {
+					x = 2;
+					goto mrm;
+				}
+#endif
+				if (x == 0x70) {
+					x = *++p & 0x1f;
+					result++;
+					if (x >= 2) {
+						p += 2;
+						result += 2;
+						goto mrm;
+					}
+				}
+				p++;
+				result++;
+				x = map_op2[*++p];
+				break;
+			case 8:
+				result -= (prefixes & 2);
+				/* fallthrough */
+			case 9:
+mrm:
+				/* ModR/M and possibly SIB. */
+				result += (x & 15);
+				x = *++p;
+				switch (x >> 6) {
+					case 0:
+						if ((x & 7) == 5) {
+							return result + 4;
+						}
+						break;
+					case 1:
+						result++;
+						break;
+					case 2:
+						result += 4;
+						break;
+					case 3:
+						return result;
+				}
+				if ((x & 7) == 4) {
+					result++;
+					if (x < 0x40 && (p[1] & 7) == 5) {
+						result += 4;
+					}
+				}
+				return result;
+		}
+	}
+}
+
+typedef ZEND_SET_ALIGNED(1, uint16_t unaligned_uint16_t);
+typedef ZEND_SET_ALIGNED(1, int32_t unaligned_int32_t);
+
+static int zend_jit_patch(const void *code, size_t size, uint32_t jmp_table_size, const void *from_addr, const void *to_addr)
+{
+	int ret = 0;
+	uint8_t *p, *end;
+
+	if (jmp_table_size) {
+		const void **jmp_slot = (const void **)((char*)code + ZEND_MM_ALIGNED_SIZE_EX(size, sizeof(void*)));
+
+		do {
+			if (*jmp_slot == from_addr) {
+				*jmp_slot = to_addr;
+				ret++;
+			}
+			jmp_slot++;
+		} while (--jmp_table_size);
+	}
+
+	p = (uint8_t*)code;
+	end = p + size - 5;
+	while (p < end) {
+		if ((*(unaligned_uint16_t*)p & 0xf0ff) == 0x800f && p + *(unaligned_int32_t*)(p+2) == (uint8_t*)from_addr - 6) {
+			*(unaligned_int32_t*)(p+2) = ((uint8_t*)to_addr - (p + 6));
+			ret++;
+		} else if (*p == 0xe9 && p + *(unaligned_int32_t*)(p+1) == (uint8_t*)from_addr - 5) {
+			*(unaligned_int32_t*)(p+1) = ((uint8_t*)to_addr - (p + 5));
+			ret++;
+		}
+		p += _asm_x86_inslen(p);
+	}
+#ifdef HAVE_VALGRIND
+	VALGRIND_DISCARD_TRANSLATIONS(code, size);
+#endif
+	return ret;
+}
+
+static int zend_jit_link_side_trace(const void *code, size_t size, uint32_t jmp_table_size, uint32_t exit_num, const void *addr)
+{
+	return zend_jit_patch(code, size, jmp_table_size, zend_jit_trace_get_exit_addr(exit_num), addr);
+}
+
+static int zend_jit_trace_link_to_root(dasm_State **Dst, zend_jit_trace_info *t, const void *timeout_exit_addr)
+{
+	const void *link_addr;
+	size_t prologue_size;
+
+	/* Skip prologue. */
+	// TODO: don't hardcode this ???
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+#ifdef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		prologue_size = 0;
+#elif defined(__x86_64__) || defined(_M_X64)
+		// sub r4, HYBRID_SPAD
+		prologue_size = 4;
+#else
+		// sub r4, HYBRID_SPAD
+		prologue_size = 3;
+#endif
+	} else if (GCC_GLOBAL_REGS) {
+		// sub r4, SPAD // stack alignment
+#if defined(__x86_64__) || defined(_M_X64)
+		prologue_size = 4;
+#else
+		prologue_size = 3;
+#endif
+	} else {
+		// sub r4, NR_SPAD // stack alignment
+		// mov aword T2, FP // save FP
+		// mov aword T3, RX // save IP
+		// mov FP, FCARG1a
+#if defined(__x86_64__) || defined(_M_X64)
+		prologue_size = 17;
+#else
+		prologue_size = 12;
+#endif
+	}
+	link_addr = (const void*)((const char*)t->code_start + prologue_size);
+
+	if (timeout_exit_addr) {
+		/* Check timeout for links to LOOP */
+		//|	MEM_CMP_ZTS byte, executor_globals, vm_interrupt, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.vm_interrupt)) {
+		dasm_put(Dst, 27, &executor_globals.vm_interrupt);
+				} else {
+		dasm_put(Dst, 33, (unsigned int)(((ptrdiff_t)&executor_globals.vm_interrupt)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_interrupt))>>32));
+				}
+#line 3427 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	je &link_addr
+		//|	jmp &timeout_exit_addr
+		dasm_put(Dst, 1651, (ptrdiff_t)(link_addr), (ptrdiff_t)(timeout_exit_addr));
+#line 3429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jmp &link_addr
+		dasm_put(Dst, 134, (ptrdiff_t)(link_addr));
+#line 3431 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_trace_return(dasm_State **Dst, bool original_handler)
+{
+#if 0
+	//|	jmp ->trace_escape
+	dasm_put(Dst, 1658);
+#line 3439 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 3442 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!original_handler) {
+			//|	JMP_IP
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 90);
+				} else {
+			dasm_put(Dst, 95, Dt1(->opline));
+				}
+#line 3444 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov r0, EX->func
+			//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+			//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+			//|	jmp aword [IP + r0]
+			dasm_put(Dst, 1310, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 3449 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		dasm_put(Dst, 103);
+#line 3452 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!original_handler) {
+			//|	JMP_IP
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 90);
+				} else {
+			dasm_put(Dst, 95, Dt1(->opline));
+				}
+#line 3454 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov r0, EX->func
+			//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+			//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+			//|	jmp aword [IP + r0]
+			dasm_put(Dst, 1310, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 3459 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		if (original_handler) {
+			//|	mov FCARG1a, FP
+			//|	mov r0, EX->func
+			//|	mov r0, aword [r0 + offsetof(zend_op_array, reserved[zend_func_info_rid])]
+			//|	mov r0, aword [r0 + offsetof(zend_jit_op_array_trace_extension, offset)]
+			//|	call aword [IP + r0]
+			dasm_put(Dst, 1663, Dt1(->func), offsetof(zend_op_array, reserved[zend_func_info_rid]), offsetof(zend_jit_op_array_trace_extension, offset));
+#line 3467 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 2 // ZEND_VM_LEAVE
+		//|	ret
+		dasm_put(Dst, 330);
+#line 3473 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+#endif
+	return 1;
+}
+
+static int zend_jit_type_guard(dasm_State **Dst, const zend_op *opline, uint32_t var, uint8_t type)
+{
+	int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+	//|	IF_NOT_Z_TYPE FP + var, type, &exit_addr
+	dasm_put(Dst, 1685, var+offsetof(zval, u1.v.type), type, (ptrdiff_t)(exit_addr));
+#line 3487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_packed_guard(dasm_State **Dst, const zend_op *opline, uint32_t var, uint32_t op_info)
+{
+	int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_PACKED_GUARD);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+
+	//|	GET_ZVAL_LVAL ZREG_FCARG1, ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)
+		if (Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)) == IS_CONST_ZVAL) {
+			if (Z_LVAL_P(Z_ZV(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))) == 0) {
+	dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+			} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))))) {
+	dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)))), (unsigned int)((Z_LVAL_P(Z_ZV(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))))>>32));
+					} else {
+	dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))));
+					}
+			}
+		} else if (Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)) == IS_MEM_ZVAL) {
+	dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)));
+		} else if (Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var)) == IS_REG) {
+			if (ZREG_FCARG1 != Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))) {
+	dasm_put(Dst, 1726, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var))), (ZREG_FCARG1));
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 3501 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (op_info & MAY_BE_ARRAY_PACKED) {
+		//|	test dword [FCARG1a + offsetof(zend_array, u.flags)], HASH_FLAG_PACKED
+		//|	jz &exit_addr
+		dasm_put(Dst, 1734, offsetof(zend_array, u.flags), HASH_FLAG_PACKED, (ptrdiff_t)(exit_addr));
+#line 3504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	test dword [FCARG1a + offsetof(zend_array, u.flags)], HASH_FLAG_PACKED
+		//|	jnz &exit_addr
+		dasm_put(Dst, 1743, offsetof(zend_array, u.flags), HASH_FLAG_PACKED, (ptrdiff_t)(exit_addr));
+#line 3507 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_trace_handler(dasm_State **Dst, const zend_op_array *op_array, const zend_op *opline, int may_throw, zend_jit_trace_rec *trace)
+{
+	zend_jit_op_array_trace_extension *jit_extension =
+		(zend_jit_op_array_trace_extension*)ZEND_FUNC_INFO(op_array);
+	size_t offset = jit_extension->offset;
+	const void *handler =
+		(zend_vm_opcode_handler_t)ZEND_OP_TRACE_INFO(opline, offset)->call_handler;
+
+	if (!zend_jit_set_valid_ip(Dst, opline)) {
+		return 0;
+	}
+	if (!GCC_GLOBAL_REGS) {
+		//|	mov FCARG1a, FP
+		dasm_put(Dst, 66);
+#line 3525 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	EXT_CALL handler, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(handler));
+			} else {
+			if (IS_SIGNED_32BIT(handler)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)handler));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 3527 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (may_throw
+	 && opline->opcode != ZEND_RETURN
+	 && opline->opcode != ZEND_RETURN_BY_REF) {
+		//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r1
+				if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+		dasm_put(Dst, 1591, &executor_globals.exception);
+				} else {
+		dasm_put(Dst, 1752, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+				}
+#line 3531 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jne ->exception_handler
+		dasm_put(Dst, 1607);
+#line 3532 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	while (trace->op != ZEND_JIT_TRACE_VM && trace->op != ZEND_JIT_TRACE_END) {
+		trace++;
+	}
+
+	if (!GCC_GLOBAL_REGS
+	 && (trace->op != ZEND_JIT_TRACE_END || trace->stop != ZEND_JIT_TRACE_STOP_RETURN)) {
+		if (opline->opcode == ZEND_RETURN ||
+		    opline->opcode == ZEND_RETURN_BY_REF ||
+		    opline->opcode == ZEND_DO_UCALL ||
+		    opline->opcode == ZEND_DO_FCALL_BY_NAME ||
+		    opline->opcode == ZEND_DO_FCALL ||
+		    opline->opcode == ZEND_GENERATOR_CREATE) {
+			//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r1
+					if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+			dasm_put(Dst, 71, &executor_globals.current_execute_data);
+					} else {
+			dasm_put(Dst, 1761, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+					}
+#line 3547 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (zend_jit_trace_may_exit(op_array, opline)) {
+		if (opline->opcode == ZEND_RETURN ||
+		    opline->opcode == ZEND_RETURN_BY_REF ||
+		    opline->opcode == ZEND_GENERATOR_CREATE) {
+
+			if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+#if 0
+				/* this check should be handled by the following OPLINE guard or jmp [IP] */
+				//|	cmp IP, zend_jit_halt_op
+				//|	je ->trace_halt
+				dasm_put(Dst, 1769, zend_jit_halt_op);
+#line 3560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+			} else if (GCC_GLOBAL_REGS) {
+				//|	test IP, IP
+				//|	je ->trace_halt
+				dasm_put(Dst, 1779);
+#line 3564 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	test eax, eax
+				//|	jl ->trace_halt
+				dasm_put(Dst, 1788);
+#line 3567 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (opline->opcode == ZEND_EXIT ||
+		           opline->opcode == ZEND_GENERATOR_RETURN ||
+		           opline->opcode == ZEND_YIELD ||
+		           opline->opcode == ZEND_YIELD_FROM) {
+			//|	jmp ->trace_halt
+			dasm_put(Dst, 1795);
+#line 3573 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (trace->op != ZEND_JIT_TRACE_END ||
+		    (trace->stop != ZEND_JIT_TRACE_STOP_RETURN &&
+		     trace->stop != ZEND_JIT_TRACE_STOP_INTERPRETER)) {
+
+			const zend_op *next_opline = trace->opline;
+			const zend_op *exit_opline = NULL;
+			uint32_t exit_point;
+			const void *exit_addr;
+			uint32_t old_info = 0;
+			uint32_t old_res_info = 0;
+			zend_jit_trace_stack *stack = JIT_G(current_frame)->stack;
+
+			if (zend_is_smart_branch(opline)) {
+				bool exit_if_true = 0;
+				exit_opline = zend_jit_trace_get_exit_opline(trace, opline + 1, &exit_if_true);
+			} else {
+				switch (opline->opcode) {
+					case ZEND_JMPZ:
+					case ZEND_JMPNZ:
+					case ZEND_JMPZ_EX:
+					case ZEND_JMPNZ_EX:
+					case ZEND_JMP_SET:
+					case ZEND_COALESCE:
+					case ZEND_JMP_NULL:
+					case ZEND_FE_RESET_R:
+					case ZEND_FE_RESET_RW:
+						exit_opline = (trace->opline == opline + 1) ?
+							OP_JMP_ADDR(opline, opline->op2) :
+							opline + 1;
+						break;
+					case ZEND_JMPZNZ:
+						exit_opline = (trace->opline == OP_JMP_ADDR(opline, opline->op2)) ?
+							ZEND_OFFSET_TO_OPLINE(opline, opline->extended_value) :
+							OP_JMP_ADDR(opline, opline->op2);
+						break;
+					case ZEND_FE_FETCH_R:
+					case ZEND_FE_FETCH_RW:
+						if (opline->op2_type == IS_CV) {
+							old_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->op2.var));
+							SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->op2.var), IS_UNKNOWN, 1);
+						}
+						exit_opline = (trace->opline == opline + 1) ?
+							ZEND_OFFSET_TO_OPLINE(opline, opline->extended_value) :
+							opline + 1;
+						break;
+
+				}
+			}
+
+			if (opline->result_type == IS_VAR || opline->result_type == IS_TMP_VAR) {
+				old_res_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_UNKNOWN, 1);
+			}
+			exit_point = zend_jit_trace_get_exit_point(exit_opline, 0);
+			exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			if (opline->result_type == IS_VAR || opline->result_type == IS_TMP_VAR) {
+				SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_res_info);
+			}
+			switch (opline->opcode) {
+				case ZEND_FE_FETCH_R:
+				case ZEND_FE_FETCH_RW:
+					if (opline->op2_type == IS_CV) {
+						SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->op2.var), old_info);
+					}
+					break;
+			}
+
+			if (!exit_addr) {
+				return 0;
+			}
+			//|	CMP_IP next_opline
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 1800, next_opline);
+				} else {
+			dasm_put(Dst, 1806, Dt1(->opline), next_opline);
+				}
+#line 3646 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jne &exit_addr
+			dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 3647 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	zend_jit_set_last_valid_opline(trace->opline);
+
+	return 1;
+}
+
+static int zend_jit_handler(dasm_State **Dst, const zend_op *opline, int may_throw)
+{
+	const void *handler;
+
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		handler = zend_get_opcode_handler_func(opline);
+	} else {
+		handler = opline->handler;
+	}
+
+	if (!zend_jit_set_valid_ip(Dst, opline)) {
+		return 0;
+	}
+	if (!GCC_GLOBAL_REGS) {
+		//|	mov FCARG1a, FP
+		dasm_put(Dst, 66);
+#line 3670 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	EXT_CALL handler, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(handler));
+			} else {
+			if (IS_SIGNED_32BIT(handler)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)handler));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 3672 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (may_throw) {
+		zend_jit_check_exception(Dst);
+	}
+
+	/* Skip the following OP_DATA */
+	switch (opline->opcode) {
+		case ZEND_ASSIGN_DIM:
+		case ZEND_ASSIGN_OBJ:
+		case ZEND_ASSIGN_STATIC_PROP:
+		case ZEND_ASSIGN_DIM_OP:
+		case ZEND_ASSIGN_OBJ_OP:
+		case ZEND_ASSIGN_STATIC_PROP_OP:
+		case ZEND_ASSIGN_STATIC_PROP_REF:
+		case ZEND_ASSIGN_OBJ_REF:
+			zend_jit_set_last_valid_opline(opline + 2);
+			break;
+		default:
+			zend_jit_set_last_valid_opline(opline + 1);
+			break;
+	}
+
+	return 1;
+}
+
+static int zend_jit_tail_handler(dasm_State **Dst, const zend_op *opline)
+{
+	if (!zend_jit_set_valid_ip(Dst, opline)) {
+		return 0;
+	}
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		if (opline->opcode == ZEND_DO_UCALL ||
+		    opline->opcode == ZEND_DO_FCALL_BY_NAME ||
+		    opline->opcode == ZEND_DO_FCALL ||
+		    opline->opcode == ZEND_RETURN) {
+
+			/* Use inlined HYBRID VM handler */
+			const void *handler = opline->handler;
+
+			//|	ADD_HYBRID_SPAD
+			#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+			dasm_put(Dst, 85);
+			#endif
+#line 3711 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_JMP handler, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+			dasm_put(Dst, 134, (ptrdiff_t)(handler));
+					} else {
+					if (IS_SIGNED_32BIT(handler)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)handler));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+					}
+			dasm_put(Dst, 138);
+					}
+#line 3712 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			const void *handler = zend_get_opcode_handler_func(opline);
+
+			//|	EXT_CALL handler, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(handler));
+					} else {
+					if (IS_SIGNED_32BIT(handler)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)handler));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 3716 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	ADD_HYBRID_SPAD
+			#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+			dasm_put(Dst, 85);
+			#endif
+#line 3717 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	JMP_IP
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 90);
+				} else {
+			dasm_put(Dst, 95, Dt1(->opline));
+				}
+#line 3718 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		const void *handler = opline->handler;
+
+		if (GCC_GLOBAL_REGS) {
+			//|	add r4, SPAD // stack alignment
+			dasm_put(Dst, 103);
+#line 3724 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov FCARG1a, FP
+			//|	mov FP, aword T2 // restore FP
+			//|	mov RX, aword T3 // restore IP
+			//|	add r4, NR_SPAD // stack alignment
+			dasm_put(Dst, 1812);
+#line 3729 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EXT_JMP handler, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(handler)) {
+		dasm_put(Dst, 134, (ptrdiff_t)(handler));
+				} else {
+				if (IS_SIGNED_32BIT(handler)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)handler));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)handler)), (unsigned int)((((ptrdiff_t)handler))>>32));
+				}
+		dasm_put(Dst, 138);
+				}
+#line 3731 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	zend_jit_reset_last_valid_opline();
+	return 1;
+}
+
+static int zend_jit_trace_opline_guard(dasm_State **Dst, const zend_op *opline)
+{
+	uint32_t exit_point = zend_jit_trace_get_exit_point(NULL, 0);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+	//|	CMP_IP opline
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 1800, opline);
+		} else {
+	dasm_put(Dst, 1806, Dt1(->opline), opline);
+		}
+#line 3745 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne &exit_addr
+	dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 3746 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	zend_jit_set_last_valid_opline(opline);
+
+	return 1;
+}
+
+static int zend_jit_jmp(dasm_State **Dst, unsigned int target_label)
+{
+	//|	jmp =>target_label
+	dasm_put(Dst, 1587, target_label);
+#line 3755 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_cond_jmp(dasm_State **Dst, const zend_op *next_opline, unsigned int target_label)
+{
+	//|	CMP_IP next_opline
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 1800, next_opline);
+		} else {
+	dasm_put(Dst, 1806, Dt1(->opline), next_opline);
+		}
+#line 3761 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne =>target_label
+	dasm_put(Dst, 1831, target_label);
+#line 3762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	zend_jit_set_last_valid_opline(next_opline);
+
+	return 1;
+}
+
+#ifdef CONTEXT_THREADED_JIT
+static int zend_jit_context_threaded_call(dasm_State **Dst, const zend_op *opline, unsigned int next_block)
+{
+	if (!zend_jit_handler(Dst, opline, 1)) return 0;
+	if (opline->opcode == ZEND_DO_UCALL) {
+		//|	call ->context_threaded_call
+		dasm_put(Dst, 1835);
+#line 3774 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		const zend_op *next_opline = opline + 1;
+
+		//|	CMP_IP next_opline
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 1800, next_opline);
+			} else {
+		dasm_put(Dst, 1806, Dt1(->opline), next_opline);
+			}
+#line 3778 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	je =>next_block
+		//|	call ->context_threaded_call
+		dasm_put(Dst, 1839, next_block);
+#line 3780 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+#endif
+
+static int zend_jit_call(dasm_State **Dst, const zend_op *opline, unsigned int next_block)
+{
+#ifdef CONTEXT_THREADED_JIT
+	return zend_jit_context_threaded_call(Dst, opline, next_block);
+#else
+	return zend_jit_tail_handler(Dst, opline);
+#endif
+}
+
+static int zend_jit_spill_store(dasm_State **Dst, zend_jit_addr src, zend_jit_addr dst, uint32_t info, bool set_type)
+{
+	ZEND_ASSERT(Z_MODE(src) == IS_REG);
+	ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+
+	if ((info & MAY_BE_ANY) == MAY_BE_LONG) {
+		//|	SET_ZVAL_LVAL dst, Ra(Z_REG(src))
+			if (Z_MODE(dst) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(src)), (Z_REG(dst)));
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(src)), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+#line 3801 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (set_type) {
+			//|	SET_ZVAL_TYPE_INFO dst, IS_LONG
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_LONG);
+#line 3803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if ((info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+		//|	DOUBLE_SET_ZVAL_DVAL dst, Z_REG(src)
+			if (Z_MODE(dst) == IS_REG) {
+				if (Z_REG(src) != Z_REG(dst)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(src)-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(src)-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+			}
+#line 3806 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (set_type) {
+			//|	SET_ZVAL_TYPE_INFO dst, IS_DOUBLE
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 3808 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		ZEND_UNREACHABLE();
+	}
+	return 1;
+}
+
+static int zend_jit_load_reg(dasm_State **Dst, zend_jit_addr src, zend_jit_addr dst, uint32_t info)
+{
+	ZEND_ASSERT(Z_MODE(src) == IS_MEM_ZVAL);
+	ZEND_ASSERT(Z_MODE(dst) == IS_REG);
+
+	if ((info & MAY_BE_ANY) == MAY_BE_LONG) {
+		//|	GET_ZVAL_LVAL Z_REG(dst), src
+			if (Z_MODE(src) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(src)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(dst)), (Z_REG(dst)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(src)))) {
+		dasm_put(Dst, 1702, (Z_REG(dst)), (unsigned int)(Z_LVAL_P(Z_ZV(src))), (unsigned int)((Z_LVAL_P(Z_ZV(src)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(dst)), Z_LVAL_P(Z_ZV(src)));
+						}
+				}
+			} else if (Z_MODE(src) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(dst)), (Z_REG(src)), Z_OFFSET(src));
+			} else if (Z_MODE(src) == IS_REG) {
+				if (Z_REG(dst) != Z_REG(src)) {
+		dasm_put(Dst, 1726, (Z_REG(src)), (Z_REG(dst)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 3822 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if ((info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+		//|	DOUBLE_GET_ZVAL_DVAL Z_REG(dst), src
+			if (Z_MODE(src) != IS_REG || Z_REG(dst) != Z_REG(src)) {
+				if (Z_MODE(src) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(src))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(dst)-ZREG_XMM0), Z_ZV(src));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(dst)-ZREG_XMM0), Z_ZV(src));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(src))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(src)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(src))), (unsigned int)((((ptrdiff_t)Z_ZV(src)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(dst)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(dst)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(src) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)), Z_OFFSET(src));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)), Z_OFFSET(src));
+			}
+				} else if (Z_MODE(src) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+#line 3824 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		ZEND_UNREACHABLE();
+	}
+	return 1;
+}
+
+static int zend_jit_store_var(dasm_State **Dst, uint32_t info, int var, zend_reg reg, bool set_type)
+{
+	zend_jit_addr src = ZEND_ADDR_REG(reg);
+	zend_jit_addr dst = ZEND_ADDR_MEM_ZVAL(ZREG_FP, EX_NUM_TO_VAR(var));
+
+	return zend_jit_spill_store(Dst, src, dst, info, set_type);
+}
+
+static int zend_jit_store_var_if_necessary(dasm_State **Dst, int var, zend_jit_addr src, uint32_t info)
+{
+	if (Z_MODE(src) == IS_REG && Z_STORE(src)) {
+		zend_jit_addr dst = ZEND_ADDR_MEM_ZVAL(ZREG_FP, var);
+		return zend_jit_spill_store(Dst, src, dst, info, 1);
+	}
+	return 1;
+}
+
+static int zend_jit_store_var_if_necessary_ex(dasm_State **Dst, int var, zend_jit_addr src, uint32_t info, zend_jit_addr old, uint32_t old_info)
+{
+	if (Z_MODE(src) == IS_REG && Z_STORE(src)) {
+		zend_jit_addr dst = ZEND_ADDR_MEM_ZVAL(ZREG_FP, var);
+		bool set_type = 1;
+
+		if ((info & (MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)) ==
+		    (old_info & (MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF))) {
+			if (Z_MODE(old) != IS_REG || Z_LOAD(old) || Z_STORE(old)) {
+				set_type = 0;
+			}
+		}
+		return zend_jit_spill_store(Dst, src, dst, info, set_type);
+	}
+	return 1;
+}
+
+static int zend_jit_load_var(dasm_State **Dst, uint32_t info, int var, zend_reg reg)
+{
+	zend_jit_addr src = ZEND_ADDR_MEM_ZVAL(ZREG_FP, EX_NUM_TO_VAR(var));
+	zend_jit_addr dst = ZEND_ADDR_REG(reg);
+
+	return zend_jit_load_reg(Dst, src, dst, info);
+}
+
+static int zend_jit_update_regs(dasm_State **Dst, uint32_t var, zend_jit_addr src, zend_jit_addr dst, uint32_t info)
+{
+	if (!zend_jit_same_addr(src, dst)) {
+		if (Z_MODE(src) == IS_REG) {
+			if (Z_MODE(dst) == IS_REG) {
+				if ((info & MAY_BE_ANY) == MAY_BE_LONG) {
+					//|	mov Ra(Z_REG(dst)), Ra(Z_REG(src))
+					dasm_put(Dst, 1726, (Z_REG(src)), (Z_REG(dst)));
+#line 3879 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if ((info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+					//|	SSE_AVX_INS movaps, vmovaps, xmm(Z_REG(dst)-ZREG_XMM0), xmm(Z_REG(src)-ZREG_XMM0)
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (Z_REG(src)-ZREG_XMM0));
+						}
+#line 3881 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			} else if (Z_MODE(dst) == IS_MEM_ZVAL) {
+				if (!Z_LOAD(src) && !Z_STORE(src)) {
+					if (!zend_jit_spill_store(Dst, src, dst, info,
+							JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+							JIT_G(current_frame) == NULL ||
+							STACK_MEM_TYPE(JIT_G(current_frame)->stack, EX_VAR_TO_NUM(var)) == IS_UNKNOWN ||
+							(1 << STACK_MEM_TYPE(JIT_G(current_frame)->stack, EX_VAR_TO_NUM(var))) != (info & MAY_BE_ANY)
+					)) {
+						return 0;
+					}
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else if (Z_MODE(src) == IS_MEM_ZVAL) {
+			if (Z_MODE(dst) == IS_REG) {
+				if (!zend_jit_load_reg(Dst, src, dst, info)) {
+					return 0;
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	}
+	return 1;
+}
+
+static int zend_jit_escape_if_undef_r0(dasm_State **Dst, int var, uint32_t flags, const zend_op *opline)
+{
+	zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+	//|	IF_NOT_ZVAL_TYPE val_addr, IS_UNDEF, >1
+		ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 3918 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (flags & ZEND_JIT_EXIT_RESTORE_CALL) {
+		if (!zend_jit_save_call_chain(Dst, -1)) {
+			return 0;
+		}
+	}
+
+	ZEND_ASSERT(opline);
+
+	//|	LOAD_IP_ADDR (opline - 1)
+		if (GCC_GLOBAL_REGS) {
+			if (IS_SIGNED_32BIT((opline - 1))) {
+	dasm_put(Dst, 281, ((ptrdiff_t)(opline - 1)));
+			} else {
+	dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(opline - 1))), (unsigned int)((((ptrdiff_t)(opline - 1)))>>32));
+			}
+		} else {
+			if (IS_SIGNED_32BIT((opline - 1))) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(opline - 1)));
+			} else {
+	dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(opline - 1))), (unsigned int)((((ptrdiff_t)(opline - 1)))>>32), Dt1(->opline));
+			}
+		}
+#line 3928 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jmp ->trace_escape
+	//|1:
+	dasm_put(Dst, 1964);
+#line 3930 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_store_const(dasm_State **Dst, int var, zend_reg reg)
+{
+	zend_jit_addr dst = ZEND_ADDR_MEM_ZVAL(ZREG_FP, EX_NUM_TO_VAR(var));
+
+	if (reg == ZREG_LONG_MIN_MINUS_1) {
+		//|.if X64
+			//|	SET_ZVAL_LVAL dst, 0x00000000
+				if (Z_MODE(dst) == IS_REG) {
+			dasm_put(Dst, 1971, (Z_REG(dst)));
+				} else {
+					ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1981, (Z_REG(dst)), Z_OFFSET(dst));
+				}
+#line 3941 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_W2 dst, 0xc3e00000
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3942 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	SET_ZVAL_LVAL dst, 0x00200000
+			//|	SET_ZVAL_W2 dst, 0xc1e00000
+		//|.endif
+		//|	SET_ZVAL_TYPE_INFO dst, IS_DOUBLE
+		dasm_put(Dst, 1993, (Z_REG(dst)), Z_OFFSET(dst)+4);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 3947 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_LONG_MIN) {
+		//|.if X64
+			//|	SET_ZVAL_LVAL dst, 0x00000000
+				if (Z_MODE(dst) == IS_REG) {
+			dasm_put(Dst, 1971, (Z_REG(dst)));
+				} else {
+					ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1981, (Z_REG(dst)), Z_OFFSET(dst));
+				}
+#line 3950 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_W2 dst, 0x80000000
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3951 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	SET_ZVAL_LVAL dst, ZEND_LONG_MIN
+		//|.endif
+		//|	SET_ZVAL_TYPE_INFO dst, IS_LONG
+		dasm_put(Dst, 2005, (Z_REG(dst)), Z_OFFSET(dst)+4);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_LONG);
+#line 3955 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_LONG_MAX) {
+		//|.if X64
+			//|	SET_ZVAL_LVAL dst, 0xffffffff
+				if (Z_MODE(dst) == IS_REG) {
+			dasm_put(Dst, 2017, (Z_REG(dst)));
+				} else {
+					ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2031, (Z_REG(dst)), Z_OFFSET(dst));
+				}
+#line 3958 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_W2 dst, 0x7fffffff
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3959 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	SET_ZVAL_LVAL dst, ZEND_LONG_MAX
+		//|.endif
+		//|	SET_ZVAL_TYPE_INFO dst, IS_LONG
+		dasm_put(Dst, 2047, (Z_REG(dst)), Z_OFFSET(dst)+4);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_LONG);
+#line 3963 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_LONG_MAX_PLUS_1) {
+		//|.if X64
+			//|	SET_ZVAL_LVAL dst, 0
+				if (Z_MODE(dst) == IS_REG) {
+			dasm_put(Dst, 1971, (Z_REG(dst)));
+				} else {
+					ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1981, (Z_REG(dst)), Z_OFFSET(dst));
+				}
+#line 3966 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_W2 dst, 0x43e00000
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3967 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	SET_ZVAL_LVAL dst, 0
+			//|	SET_ZVAL_W2 dst, 0x41e00000
+		//|.endif
+		//|	SET_ZVAL_TYPE_INFO dst, IS_DOUBLE
+		dasm_put(Dst, 2062, (Z_REG(dst)), Z_OFFSET(dst)+4);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 3972 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_NULL) {
+		//|	SET_ZVAL_TYPE_INFO dst, IS_NULL
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), IS_NULL);
+#line 3974 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_ZVAL_TRY_ADDREF) {
+		//|	IF_NOT_ZVAL_REFCOUNTED dst, >1
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3976 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_PTR r1, dst
+		dasm_put(Dst, 2074, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+#line 3977 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GC_ADDREF r1
+		//|1:
+		dasm_put(Dst, 2088, (Z_REG(dst)), Z_OFFSET(dst));
+#line 3979 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (reg == ZREG_ZVAL_COPY_GPR0) {
+		zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+		//|	ZVAL_COPY_VALUE dst, -1, val_addr, -1, ZREG_R1, ZREG_R2
+			if (-1 & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((-1 & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(val_addr) == IS_REG) {
+						if (Z_MODE(dst) != IS_REG || Z_REG(dst) != Z_REG(val_addr)) {
+			if (Z_MODE(dst) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(dst)));
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+						}
+					} else if (Z_MODE(dst) == IS_REG) {
+			if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(dst)), (Z_REG(dst)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(dst)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(dst)), Z_LVAL_P(Z_ZV(val_addr)));
+						}
+				}
+			} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(dst)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			} else if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_REG(dst) != Z_REG(val_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(dst)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(val_addr)));
+						}
+				}
+			} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			} else if (Z_MODE(val_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(val_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(dst) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(dst)));
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+					}
+				} else if ((-1 & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(val_addr) == IS_REG) {
+			if (Z_MODE(dst) == IS_REG) {
+				if (Z_REG(val_addr) != Z_REG(dst)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+			}
+					} else if (Z_MODE(dst) == IS_REG) {
+			if (Z_MODE(val_addr) != IS_REG || Z_REG(dst) != Z_REG(val_addr)) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(dst)-ZREG_XMM0), Z_ZV(val_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(dst)-ZREG_XMM0), Z_ZV(val_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(dst)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(dst)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			}
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			}
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(dst) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(dst)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(dst)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(dst)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(dst)), Z_OFFSET(dst));
+			}
+			}
+					}
+				} else if (!(-1 & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(dst)), Z_OFFSET(dst));
+				} else {
+			ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(dst)), Z_OFFSET(dst));
+				}
+			}
+			if ((-1 & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(-1 & MAY_BE_GUARD) &&
+				has_concrete_type(-1 & MAY_BE_ANY)) {
+				if (Z_MODE(dst) == IS_MEM_ZVAL) {
+					if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(-1);
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(dst) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(dst)), Z_OFFSET(dst)+offsetof(zval,u1.type_info));
+			}
+#line 3983 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	TRY_ADDREF -1, ch, r2
+			if (-1 & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				if (-1 & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		dasm_put(Dst, 2121);
+				}
+		dasm_put(Dst, 2129);
+			}
+#line 3984 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		ZEND_UNREACHABLE();
+	}
+	return 1;
+}
+
+static int zend_jit_free_trampoline(dasm_State **Dst)
+{
+	//|	/// if (UNEXPECTED(func->common.fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE))
+	//|	test dword [r0 + offsetof(zend_function, common.fn_flags)], ZEND_ACC_CALL_VIA_TRAMPOLINE
+	//|	jz >1
+	//|	mov FCARG1a, r0
+	//|	EXT_CALL zend_jit_free_trampoline_helper, r0
+	dasm_put(Dst, 2135, offsetof(zend_function, common.fn_flags), ZEND_ACC_CALL_VIA_TRAMPOLINE);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_free_trampoline_helper)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_free_trampoline_helper));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_free_trampoline_helper)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_free_trampoline_helper));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_free_trampoline_helper)), (unsigned int)((((ptrdiff_t)zend_jit_free_trampoline_helper))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 3997 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|1:
+	dasm_put(Dst, 63);
+#line 3998 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_inc_dec(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, uint32_t op1_def_info, zend_jit_addr op1_def_addr, uint32_t res_use_info, uint32_t res_info, zend_jit_addr res_addr, int may_overflow, int may_throw)
+{
+	if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)-MAY_BE_LONG)) {
+		//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >2
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2148, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4005 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline->opcode == ZEND_POST_INC || opline->opcode == ZEND_POST_DEC) {
+		//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_addr, MAY_BE_LONG, ZREG_R0, ZREG_R1
+			if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+						}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(res_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+					}
+				} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					}
+				} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+			}
+			if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+				has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(MAY_BE_LONG);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+			}
+#line 4008 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (!zend_jit_update_regs(Dst, opline->op1.var, op1_addr, op1_def_addr, MAY_BE_LONG)) {
+		return 0;
+	}
+	if (opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_POST_INC) {
+		//|	LONG_OP_WITH_32BIT_CONST add, op1_def_addr, Z_L(1)
+			if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2161, (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr), Z_L(1));
+			} else if (Z_MODE(op1_def_addr) == IS_REG) {
+		dasm_put(Dst, 2170, (Z_REG(op1_def_addr)), Z_L(1));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	LONG_OP_WITH_32BIT_CONST sub, op1_def_addr, Z_L(1)
+			if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2177, (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr), Z_L(1));
+			} else if (Z_MODE(op1_def_addr) == IS_REG) {
+		dasm_put(Dst, 2186, (Z_REG(op1_def_addr)), Z_L(1));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4016 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (may_overflow &&
+	    (((op1_def_info & MAY_BE_GUARD) && (op1_def_info & MAY_BE_LONG)) ||
+	     ((opline->result_type != IS_UNUSED && (res_info & MAY_BE_GUARD) && (res_info & MAY_BE_LONG))))) {
+		int32_t exit_point;
+		const void *exit_addr;
+		zend_jit_trace_stack *stack;
+		uint32_t old_op1_info, old_res_info = 0;
+
+		stack = JIT_G(current_frame)->stack;
+		old_op1_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->op1.var));
+		SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->op1.var), IS_DOUBLE, 0);
+		if (opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_POST_INC) {
+			SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->op1.var), ZREG_LONG_MAX_PLUS_1);
+		} else {
+			SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->op1.var), ZREG_LONG_MIN_MINUS_1);
+		}
+		if (opline->result_type != IS_UNUSED) {
+			old_res_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+			if (opline->opcode == ZEND_PRE_INC) {
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_DOUBLE, 0);
+				SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_LONG_MAX_PLUS_1);
+			} else if (opline->opcode == ZEND_PRE_DEC) {
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_DOUBLE, 0);
+				SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_LONG_MIN_MINUS_1);
+			} else if (opline->opcode == ZEND_POST_INC) {
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_LONG, 0);
+				SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_LONG_MAX);
+			} else if (opline->opcode == ZEND_POST_DEC) {
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_LONG, 0);
+				SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_LONG_MIN);
+			}
+		}
+
+		exit_point = zend_jit_trace_get_exit_point(opline + 1, 0);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		//|	jo &exit_addr
+		dasm_put(Dst, 2193, (ptrdiff_t)(exit_addr));
+#line 4054 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if ((opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_PRE_DEC) &&
+		    opline->result_type != IS_UNUSED) {
+			//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_def_addr, MAY_BE_LONG, ZREG_R0, ZREG_R1
+				if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_def_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(op1_def_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+					has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(MAY_BE_LONG);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 4058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->op1.var), old_op1_info);
+		if (opline->result_type != IS_UNUSED) {
+			SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_res_info);
+		}
+	} else if (may_overflow) {
+		//|	jo >1
+		dasm_put(Dst, 2197);
+#line 4066 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_PRE_DEC) &&
+		    opline->result_type != IS_UNUSED) {
+			//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_def_addr, MAY_BE_LONG, ZREG_R0, ZREG_R1
+				if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_def_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(op1_def_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+					has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(MAY_BE_LONG);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 4069 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 4071 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 4072 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_POST_INC) {
+			//|.if X64
+				//|	mov64 rax, 0x43e0000000000000
+				//|	SET_ZVAL_LVAL op1_def_addr, rax
+				dasm_put(Dst, 54, (unsigned int)(0x43e0000000000000), (unsigned int)((0x43e0000000000000)>>32));
+					if (Z_MODE(op1_def_addr) == IS_REG) {
+				dasm_put(Dst, 2202, (Z_REG(op1_def_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2208, (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+					}
+#line 4076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	SET_ZVAL_LVAL op1_def_addr, 0
+				//|	SET_ZVAL_W2 op1_def_addr, 0x41e00000
+			//|.endif
+		} else {
+			//|.if X64
+				//|	mov64 rax, 0xc3e0000000000000
+				//|	SET_ZVAL_LVAL op1_def_addr, rax
+				dasm_put(Dst, 54, (unsigned int)(0xc3e0000000000000), (unsigned int)((0xc3e0000000000000)>>32));
+					if (Z_MODE(op1_def_addr) == IS_REG) {
+				dasm_put(Dst, 2202, (Z_REG(op1_def_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2208, (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+					}
+#line 4084 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	SET_ZVAL_LVAL op1_def_addr, 0x00200000
+				//|	SET_ZVAL_W2 op1_def_addr, 0xc1e00000
+			//|.endif
+		}
+		if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			//|	SET_ZVAL_TYPE_INFO op1_def_addr, IS_DOUBLE
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 4091 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if ((opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_PRE_DEC) &&
+		    opline->result_type != IS_UNUSED) {
+			//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_def_addr, MAY_BE_DOUBLE, ZREG_R0, ZREG_R1
+				if (MAY_BE_DOUBLE & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_def_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(op1_def_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(MAY_BE_DOUBLE & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((MAY_BE_DOUBLE & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(MAY_BE_DOUBLE & MAY_BE_GUARD) &&
+					has_concrete_type(MAY_BE_DOUBLE & MAY_BE_ANY)) {
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(MAY_BE_DOUBLE);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 4095 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	jmp >3
+		//|.code
+		dasm_put(Dst, 2216);
+#line 4098 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if ((opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_PRE_DEC) &&
+		    opline->result_type != IS_UNUSED) {
+			//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_def_addr, MAY_BE_LONG, ZREG_R0, ZREG_R1
+				if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_def_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_def_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_def_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_def_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_def_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_def_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(op1_def_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_def_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(op1_def_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_def_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(op1_def_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_def_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_def_addr)) {
+					if (Z_MODE(op1_def_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_def_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_def_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_def_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_def_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_def_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_def_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+					} else if (Z_MODE(op1_def_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_def_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+					has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(MAY_BE_LONG);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 4102 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) {
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 4106 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		dasm_put(Dst, 2222);
+#line 4107 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 4109 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & MAY_BE_UNDEF) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >2
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 4111 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+				//|	mov FCARG1d, opline->op1.var
+				//|	SET_ZVAL_TYPE_INFO op1_addr, IS_NULL
+				dasm_put(Dst, 2225, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF, opline->op1.var);
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 4114 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 1639, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_NULL);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 4115 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				op1_info |= MAY_BE_NULL;
+			}
+			//|2:
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			dasm_put(Dst, 2222);
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4119 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			//|	// ZVAL_DEREF(var_ptr);
+			if (op1_info & MAY_BE_REF) {
+				//|	IF_NOT_Z_TYPE, FCARG1a, IS_REFERENCE, >2
+				//|	GET_Z_PTR FCARG1a, FCARG1a
+				//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+				//|	jz >1
+				dasm_put(Dst, 2254, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, sources.ptr));
+#line 4126 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (RETURN_VALUE_USED(opline)) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 4128 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	xor FCARG2a, FCARG2a
+					dasm_put(Dst, 2289);
+#line 4130 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (opline->opcode == ZEND_PRE_INC) {
+					//|	EXT_CALL zend_jit_pre_inc_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_inc_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (opline->opcode == ZEND_PRE_DEC) {
+					//|	EXT_CALL zend_jit_pre_dec_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_dec_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4135 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (opline->opcode == ZEND_POST_INC) {
+					//|	EXT_CALL zend_jit_post_inc_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_inc_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_inc_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_post_inc_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_inc_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_inc_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_post_inc_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (opline->opcode == ZEND_POST_DEC) {
+					//|	EXT_CALL zend_jit_post_dec_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_dec_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_dec_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_post_dec_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_dec_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_dec_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_post_dec_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4139 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				zend_jit_check_exception(Dst);
+				//|	jmp >3
+				//|1:
+				//|	lea FCARG1a, [FCARG1a + offsetof(zend_reference, val)]
+				//|2:
+				dasm_put(Dst, 2294, offsetof(zend_reference, val));
+#line 4147 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			if (opline->opcode == ZEND_POST_INC || opline->opcode == ZEND_POST_DEC) {
+				zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+
+				//|	ZVAL_COPY_VALUE res_addr, res_use_info, val_addr, op1_info, ZREG_R0, ZREG_R2
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(val_addr) == IS_REG) {
+								if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+								}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+								}
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else if (Z_MODE(val_addr) == IS_REG) {
+						if (Z_REG(res_addr) != Z_REG(val_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(val_addr)));
+								}
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else if (Z_MODE(val_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(val_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+							}
+						} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_REG(val_addr) != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(val_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+						if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					}
+						} else if (Z_MODE(val_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+						if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					}
+						} else if (Z_MODE(val_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							}
+						} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+					}
+					if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_info & MAY_BE_ANY)) {
+						if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_info);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+					}
+#line 4153 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	TRY_ADDREF op1_info, ah, r2
+					if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (op1_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2129);
+					}
+#line 4154 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_POST_INC) {
+				if (opline->opcode == ZEND_PRE_INC && opline->result_type != IS_UNUSED) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 4158 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_pre_inc, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_inc)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL increment_function, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(increment_function)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(increment_function));
+							} else {
+							if (IS_SIGNED_32BIT(increment_function)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)increment_function));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)increment_function)), (unsigned int)((((ptrdiff_t)increment_function))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (opline->opcode == ZEND_PRE_DEC && opline->result_type != IS_UNUSED) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 4165 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_pre_dec, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_dec)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4166 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL decrement_function, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(decrement_function)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(decrement_function));
+							} else {
+							if (IS_SIGNED_32BIT(decrement_function)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)decrement_function));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)decrement_function)), (unsigned int)((((ptrdiff_t)decrement_function))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 4168 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (may_throw) {
+				zend_jit_check_exception(Dst);
+			}
+		} else {
+			zend_reg tmp_reg;
+
+			if (opline->opcode == ZEND_POST_INC || opline->opcode == ZEND_POST_DEC) {
+				//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_addr, MAY_BE_DOUBLE, ZREG_R0, ZREG_R2
+					if (MAY_BE_DOUBLE & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+								if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+								}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_REG(res_addr) != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+							}
+						} else if ((MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_REG(op1_addr) != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							}
+						} else if (!(MAY_BE_DOUBLE & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+					}
+					if ((MAY_BE_DOUBLE & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(MAY_BE_DOUBLE & MAY_BE_GUARD) &&
+						has_concrete_type(MAY_BE_DOUBLE & MAY_BE_ANY)) {
+						if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_DOUBLE & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(MAY_BE_DOUBLE);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+					}
+#line 4178 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_MODE(op1_def_addr) == IS_REG) {
+				tmp_reg = Z_REG(op1_def_addr);
+			} else if (Z_MODE(op1_addr) == IS_REG && Z_LAST_USE(op1_addr)) {
+				tmp_reg = Z_REG(op1_addr);
+			} else {
+				tmp_reg = ZREG_XMM0;
+			}
+			//|	DOUBLE_GET_ZVAL_DVAL tmp_reg, op1_addr
+				if (Z_MODE(op1_addr) != IS_REG || tmp_reg != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (tmp_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (tmp_reg-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+#line 4187 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_POST_INC) {
+				if (CAN_USE_AVX()) {
+					//|	vaddsd xmm(tmp_reg-ZREG_XMM0), xmm(tmp_reg-ZREG_XMM0), qword [->one]
+					dasm_put(Dst, 2314, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+#line 4190 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	addsd xmm(tmp_reg-ZREG_XMM0), qword [->one]
+					dasm_put(Dst, 2326, (tmp_reg-ZREG_XMM0));
+#line 4192 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (CAN_USE_AVX()) {
+					//|	vsubsd xmm(tmp_reg-ZREG_XMM0), xmm(tmp_reg-ZREG_XMM0), qword [->one]
+					dasm_put(Dst, 2337, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+#line 4196 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	subsd xmm(tmp_reg-ZREG_XMM0), qword [->one]
+					dasm_put(Dst, 2349, (tmp_reg-ZREG_XMM0));
+#line 4198 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|	DOUBLE_SET_ZVAL_DVAL op1_def_addr, tmp_reg
+				if (Z_MODE(op1_def_addr) == IS_REG) {
+					if (tmp_reg != Z_REG(op1_def_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(op1_def_addr)-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(op1_def_addr)-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(op1_def_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (tmp_reg-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				} else {
+			dasm_put(Dst, 1888, (tmp_reg-ZREG_XMM0), (Z_REG(op1_def_addr)), Z_OFFSET(op1_def_addr));
+				}
+				}
+#line 4201 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if ((opline->opcode == ZEND_PRE_INC || opline->opcode == ZEND_PRE_DEC) &&
+			    opline->result_type != IS_UNUSED) {
+				//|	ZVAL_COPY_VALUE res_addr, res_use_info, op1_addr, op1_def_info, ZREG_R0, ZREG_R1
+					if (op1_def_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_def_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+								if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+								}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_REG(res_addr) != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (ZREG_R1 != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R1));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+							}
+						} else if ((op1_def_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_REG(op1_addr) != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							}
+						} else if (!(op1_def_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+					}
+					if ((op1_def_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_def_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_def_info & MAY_BE_ANY)) {
+						if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_def_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_def_info);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+					}
+#line 4204 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	TRY_ADDREF op1_def_info, ah, r1
+					if (op1_def_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (op1_def_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2095);
+					}
+#line 4205 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	jmp >3
+		//|.code
+		dasm_put(Dst, 2216);
+#line 4209 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|3:
+	dasm_put(Dst, 496);
+#line 4211 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_store_var_if_necessary_ex(Dst, opline->op1.var, op1_def_addr, op1_def_info, op1_addr, op1_info)) {
+		return 0;
+	}
+	if (opline->result_type != IS_UNUSED) {
+		if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+			return 0;
+		}
+	}
+	return 1;
+}
+
+static int zend_jit_opline_uses_reg(const zend_op  *opline, int8_t reg)
+{
+	if ((opline+1)->opcode == ZEND_OP_DATA
+	 && ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR|IS_CV))
+	 && JIT_G(current_frame)->stack[EX_VAR_TO_NUM((opline+1)->op1.var)].reg == reg) {
+		return 1;
+	}
+	return
+		((opline->result_type & (IS_VAR|IS_TMP_VAR|IS_CV)) &&
+			JIT_G(current_frame)->stack[EX_VAR_TO_NUM(opline->result.var)].reg == reg) ||
+		((opline->op1_type & (IS_VAR|IS_TMP_VAR|IS_CV)) &&
+			JIT_G(current_frame)->stack[EX_VAR_TO_NUM(opline->op1.var)].reg == reg) ||
+		((opline->op2_type & (IS_VAR|IS_TMP_VAR|IS_CV)) &&
+			JIT_G(current_frame)->stack[EX_VAR_TO_NUM(opline->op2.var)].reg == reg);
+}
+
+static int zend_jit_math_long_long(dasm_State    **Dst,
+                                   const zend_op  *opline,
+                                   zend_uchar      opcode,
+                                   zend_jit_addr   op1_addr,
+                                   zend_jit_addr   op2_addr,
+                                   zend_jit_addr   res_addr,
+                                   uint32_t        res_info,
+                                   uint32_t        res_use_info,
+                                   int             may_overflow)
+{
+	bool same_ops = zend_jit_same_addr(op1_addr, op2_addr);
+	zend_reg result_reg;
+	zend_reg tmp_reg = ZREG_R0;
+
+	if (Z_MODE(res_addr) == IS_REG && (res_info & MAY_BE_LONG)) {
+		if (may_overflow && (res_info & MAY_BE_GUARD)
+		 && JIT_G(current_frame)
+		 && zend_jit_opline_uses_reg(opline, Z_REG(res_addr))) {
+			result_reg = ZREG_R0;
+		} else {
+			result_reg = Z_REG(res_addr);
+		}
+	} else if (Z_MODE(op1_addr) == IS_REG && Z_LAST_USE(op1_addr) && !may_overflow) {
+		result_reg = Z_REG(op1_addr);
+	} else if (Z_REG(res_addr) != ZREG_R0) {
+		result_reg = ZREG_R0;
+	} else {
+		/* ASSIGN_DIM_OP */
+		result_reg = ZREG_FCARG1;
+		tmp_reg = ZREG_FCARG1;
+	}
+
+	if (opcode == ZEND_MUL &&
+			Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+			Z_LVAL_P(Z_ZV(op2_addr)) == 2) {
+		if (Z_MODE(op1_addr) == IS_REG && !may_overflow) {
+			//|	lea Ra(result_reg), [Ra(Z_REG(op1_addr))+Ra(Z_REG(op1_addr))]
+			dasm_put(Dst, 2360, (result_reg), (Z_REG(op1_addr)), (Z_REG(op1_addr)), 0);
+#line 4275 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	GET_ZVAL_LVAL result_reg, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (result_reg), (result_reg));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (result_reg != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4277 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	add Ra(result_reg), Ra(result_reg)
+			dasm_put(Dst, 2373, (result_reg), (result_reg));
+#line 4278 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opcode == ZEND_MUL &&
+			Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+			!may_overflow &&
+			Z_LVAL_P(Z_ZV(op2_addr)) > 0 &&
+			zend_long_is_power_of_two(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4285 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	shl Ra(result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op2_addr)))
+		dasm_put(Dst, 2381, (result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op2_addr))));
+#line 4286 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opcode == ZEND_MUL &&
+			Z_MODE(op1_addr) == IS_CONST_ZVAL &&
+			Z_LVAL_P(Z_ZV(op1_addr)) == 2) {
+		if (Z_MODE(op2_addr) == IS_REG && !may_overflow) {
+			//|	lea Ra(result_reg), [Ra(Z_REG(op2_addr))+Ra(Z_REG(op2_addr))]
+			dasm_put(Dst, 2360, (result_reg), (Z_REG(op2_addr)), (Z_REG(op2_addr)), 0);
+#line 4291 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	GET_ZVAL_LVAL result_reg, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+			dasm_put(Dst, 1694, (result_reg), (result_reg));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+			dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+							}
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+					if (result_reg != Z_REG(op2_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op2_addr)), (result_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	add Ra(result_reg), Ra(result_reg)
+			dasm_put(Dst, 2373, (result_reg), (result_reg));
+#line 4294 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opcode == ZEND_MUL &&
+			Z_MODE(op1_addr) == IS_CONST_ZVAL &&
+			!may_overflow &&
+			Z_LVAL_P(Z_ZV(op1_addr)) > 0 &&
+			zend_long_is_power_of_two(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		//|	GET_ZVAL_LVAL result_reg, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (result_reg != Z_REG(op2_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op2_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4301 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	shl Ra(result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op1_addr)))
+		dasm_put(Dst, 2381, (result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op1_addr))));
+#line 4302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opcode == ZEND_DIV &&
+			(Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+			zend_long_is_power_of_two(Z_LVAL_P(Z_ZV(op2_addr))))) {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4306 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	shr Ra(result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op2_addr)))
+		dasm_put(Dst, 2388, (result_reg), zend_long_floor_log2(Z_LVAL_P(Z_ZV(op2_addr))));
+#line 4307 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opcode == ZEND_ADD &&
+			!may_overflow &&
+			Z_MODE(op1_addr) == IS_REG &&
+			Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+			IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		//|	lea Ra(result_reg), [Ra(Z_REG(op1_addr))+Z_LVAL_P(Z_ZV(op2_addr))]
+		dasm_put(Dst, 2395, (result_reg), (Z_REG(op1_addr)), Z_LVAL_P(Z_ZV(op2_addr)));
+#line 4313 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opcode == ZEND_ADD &&
+			!may_overflow &&
+			Z_MODE(op2_addr) == IS_REG &&
+			Z_MODE(op1_addr) == IS_CONST_ZVAL &&
+			IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		//|	lea Ra(result_reg), [Ra(Z_REG(op2_addr))+Z_LVAL_P(Z_ZV(op1_addr))]
+		dasm_put(Dst, 2395, (result_reg), (Z_REG(op2_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+#line 4319 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opcode == ZEND_SUB &&
+			!may_overflow &&
+			Z_MODE(op1_addr) == IS_REG &&
+			Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+			IS_SIGNED_32BIT(-Z_LVAL_P(Z_ZV(op2_addr)))) {
+		//|	lea Ra(result_reg), [Ra(Z_REG(op1_addr))-Z_LVAL_P(Z_ZV(op2_addr))]
+		dasm_put(Dst, 2395, (result_reg), (Z_REG(op1_addr)), -Z_LVAL_P(Z_ZV(op2_addr)));
+#line 4325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4327 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((opcode == ZEND_ADD || opcode == ZEND_SUB)
+		 && Z_MODE(op2_addr) == IS_CONST_ZVAL
+		 && Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+			/* +/- 0 */
+			may_overflow = 0;
+		} else if (same_ops && opcode != ZEND_DIV) {
+			//|	LONG_MATH_REG opcode, Ra(result_reg), Ra(result_reg)
+				switch (opcode) {
+					case ZEND_ADD:
+			dasm_put(Dst, 2373, (result_reg), (result_reg));
+						break;
+					case ZEND_SUB:
+			dasm_put(Dst, 2405, (result_reg), (result_reg));
+						break;
+					case ZEND_MUL:
+			dasm_put(Dst, 2413, (result_reg), (result_reg));
+						break;
+					case ZEND_BW_OR:
+			dasm_put(Dst, 2422, (result_reg), (result_reg));
+						break;
+					case ZEND_BW_AND:
+			dasm_put(Dst, 2430, (result_reg), (result_reg));
+						break;
+					case ZEND_BW_XOR:
+			dasm_put(Dst, 1694, (result_reg), (result_reg));
+						break;
+					default:
+						ZEND_UNREACHABLE();
+				}
+#line 4334 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LONG_MATH opcode, result_reg, op2_addr
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2438, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2448, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2170, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2458, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2373, (Z_REG(op2_addr)), (result_reg));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2468, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2478, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2186, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2488, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2405, (Z_REG(op2_addr)), (result_reg));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2498, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2509, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2520, (result_reg), (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2529, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2413, (result_reg), (Z_REG(op2_addr)));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_BW_OR:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2540, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2550, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2560, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2567, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2422, (Z_REG(op2_addr)), (result_reg));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_BW_AND:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2577, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2587, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2597, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2604, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2430, (Z_REG(op2_addr)), (result_reg));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_BW_XOR:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (result_reg != ZREG_R0) {
+			dasm_put(Dst, 2614, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							} else {
+			dasm_put(Dst, 2624, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+							}
+						} else {
+			dasm_put(Dst, 2634, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2642, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 1694, (Z_REG(op2_addr)), (result_reg));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					default:
+						ZEND_UNREACHABLE();
+				}
+#line 4336 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	if (may_overflow) {
+		if (res_info & MAY_BE_GUARD) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if ((res_info & MAY_BE_ANY) == MAY_BE_LONG) {
+				//|	jo &exit_addr
+				dasm_put(Dst, 2193, (ptrdiff_t)(exit_addr));
+#line 4344 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_MODE(res_addr) == IS_REG && result_reg != Z_REG(res_addr)) {
+					//|	mov Ra(Z_REG(res_addr)), Ra(result_reg)
+					dasm_put(Dst, 1726, (result_reg), (Z_REG(res_addr)));
+#line 4346 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if ((res_info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+				//|	jno &exit_addr
+				dasm_put(Dst, 2652, (ptrdiff_t)(exit_addr));
+#line 4349 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else {
+			if (res_info & MAY_BE_LONG) {
+				//|	jo >1
+				dasm_put(Dst, 2197);
+#line 4355 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jno >1
+				dasm_put(Dst, 2656);
+#line 4357 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL && (res_info & MAY_BE_LONG)) {
+		//|	SET_ZVAL_LVAL res_addr, Ra(result_reg)
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (result_reg), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (result_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+#line 4363 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != Z_REG(res_addr) || Z_OFFSET(op1_addr) != Z_OFFSET(res_addr)) {
+			if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_LONG) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 4366 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if (may_overflow && (!(res_info & MAY_BE_GUARD) || (res_info & MAY_BE_ANY) == MAY_BE_DOUBLE)) {
+		zend_reg tmp_reg1 = ZREG_XMM0;
+		zend_reg tmp_reg2 = ZREG_XMM1;
+
+		if (res_info & MAY_BE_LONG) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 4376 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 4377 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		do {
+			if ((sizeof(void*) == 8 || Z_MODE(res_addr) != IS_REG) &&
+			    ((Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_LVAL_P(Z_ZV(op1_addr)) == 1) ||
+			     (Z_MODE(op2_addr) == IS_CONST_ZVAL && Z_LVAL_P(Z_ZV(op2_addr)) == 1))) {
+				if (opcode == ZEND_ADD) {
+					//|.if X64
+						//|	mov64 rax, 0x43e0000000000000
+						dasm_put(Dst, 54, (unsigned int)(0x43e0000000000000), (unsigned int)((0x43e0000000000000)>>32));
+#line 4386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (Z_MODE(res_addr) == IS_REG) {
+							//|	movd xmm(Z_REG(res_addr)-ZREG_XMM0), rax
+							dasm_put(Dst, 2661, (Z_REG(res_addr)-ZREG_XMM0));
+#line 4388 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	SET_ZVAL_LVAL res_addr, rax
+								if (Z_MODE(res_addr) == IS_REG) {
+							dasm_put(Dst, 2202, (Z_REG(res_addr)));
+								} else {
+									ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+								}
+#line 4390 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					//|.else
+						//|	SET_ZVAL_LVAL res_addr, 0
+						//|	SET_ZVAL_W2 res_addr, 0x41e00000
+					//|.endif
+					break;
+				} else if (opcode == ZEND_SUB) {
+					//|.if X64
+						//|	mov64 rax, 0xc3e0000000000000
+						dasm_put(Dst, 54, (unsigned int)(0xc3e0000000000000), (unsigned int)((0xc3e0000000000000)>>32));
+#line 4399 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (Z_MODE(res_addr) == IS_REG) {
+							//|	movd xmm(Z_REG(res_addr)-ZREG_XMM0), rax
+							dasm_put(Dst, 2661, (Z_REG(res_addr)-ZREG_XMM0));
+#line 4401 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	SET_ZVAL_LVAL res_addr, rax
+								if (Z_MODE(res_addr) == IS_REG) {
+							dasm_put(Dst, 2202, (Z_REG(res_addr)));
+								} else {
+									ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+								}
+#line 4403 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					//|.else
+						//|	SET_ZVAL_LVAL res_addr, 0x00200000
+						//|	SET_ZVAL_W2 res_addr, 0xc1e00000
+					//|.endif
+					break;
+				}
+			}
+
+			//|	DOUBLE_GET_ZVAL_LVAL tmp_reg1, op1_addr, tmp_reg
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+			dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg));
+						} else {
+			dasm_put(Dst, 2714, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg));
+						}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2733, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2759, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (Z_REG(op1_addr)));
+					} else {
+			dasm_put(Dst, 2714, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4413 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	DOUBLE_GET_ZVAL_LVAL tmp_reg2, op2_addr, tmp_reg
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+			dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg));
+						} else {
+			dasm_put(Dst, 2714, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg));
+						}
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2733, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2759, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					}
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (Z_REG(op2_addr)));
+					} else {
+			dasm_put(Dst, 2714, (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (tmp_reg2-ZREG_XMM0), (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4414 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (CAN_USE_AVX()) {
+				//|	AVX_MATH_REG opcode, tmp_reg1, tmp_reg1, tmp_reg2
+					switch (opcode) {
+						case ZEND_ADD:
+				dasm_put(Dst, 2780, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_SUB:
+				dasm_put(Dst, 2792, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_MUL:
+				dasm_put(Dst, 2804, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_DIV:
+				dasm_put(Dst, 2816, (tmp_reg1-ZREG_XMM0), (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+					}
+#line 4416 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	SSE_MATH_REG opcode, tmp_reg1, tmp_reg2
+					switch (opcode) {
+						case ZEND_ADD:
+				dasm_put(Dst, 2828, (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_SUB:
+				dasm_put(Dst, 2839, (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_MUL:
+				dasm_put(Dst, 2850, (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+						case ZEND_DIV:
+				dasm_put(Dst, 2861, (tmp_reg1-ZREG_XMM0), (tmp_reg2-ZREG_XMM0));
+							break;
+					}
+#line 4418 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	DOUBLE_SET_ZVAL_DVAL res_addr, tmp_reg1
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (tmp_reg1 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (tmp_reg1-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (tmp_reg1-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (tmp_reg1-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (tmp_reg1-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+#line 4420 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} while (0);
+
+		if (Z_MODE(res_addr) == IS_MEM_ZVAL
+		 && (res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 4425 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (res_info & MAY_BE_LONG) {
+			//|	jmp >2
+			//|.code
+			dasm_put(Dst, 2872);
+#line 4429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|2:
+		dasm_put(Dst, 2222);
+#line 4431 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_math_long_double(dasm_State    **Dst,
+                                     zend_uchar      opcode,
+                                     zend_jit_addr   op1_addr,
+                                     zend_jit_addr   op2_addr,
+                                     zend_jit_addr   res_addr,
+                                     uint32_t        res_use_info)
+{
+	zend_reg result_reg =
+		(Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+	zend_reg tmp_reg;
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+		/* ASSIGN_DIM_OP */
+		tmp_reg = ZREG_R1;
+	} else {
+		tmp_reg = ZREG_R0;
+	}
+
+	//|	DOUBLE_GET_ZVAL_LVAL result_reg, op1_addr, tmp_reg
+		if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+			if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2669, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+				} else {
+	dasm_put(Dst, 2681, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+				}
+			} else {
+				if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+	dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+				} else {
+	dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+				}
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg));
+				} else {
+	dasm_put(Dst, 2714, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg));
+				}
+			}
+		} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2733, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+	dasm_put(Dst, 2759, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+		} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)));
+			} else {
+	dasm_put(Dst, 2714, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)));
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 4455 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+		/* ASSIGN_DIM_OP */
+		if (CAN_USE_AVX()) {
+			//|	AVX_MATH opcode, result_reg, result_reg, op2_addr, r1
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2878, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 2890, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2904, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2780, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2918, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 2930, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2944, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2792, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2958, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 2970, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2984, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2804, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2998, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 3010, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3024, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2816, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4460 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	SSE_MATH opcode, result_reg, op2_addr, r1
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3049, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3086, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3123, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3160, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4462 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		if (CAN_USE_AVX()) {
+			//|	AVX_MATH opcode, result_reg, result_reg, op2_addr, r0
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2878, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 3186, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2904, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2780, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2918, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 3200, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2944, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2792, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2958, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 3214, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2984, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2804, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 2998, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+						} else {
+			dasm_put(Dst, 3228, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3024, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2816, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4466 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	SSE_MATH opcode, result_reg, op2_addr, r0
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3242, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3255, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3268, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+					} else {
+			dasm_put(Dst, 3281, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4468 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|	DOUBLE_SET_ZVAL_DVAL res_addr, result_reg
+		if (Z_MODE(res_addr) == IS_REG) {
+			if (result_reg != Z_REG(res_addr)) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		}
+			}
+		} else {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1875, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		} else {
+	dasm_put(Dst, 1888, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		}
+		}
+#line 4471 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+		if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 4475 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_math_double_long(dasm_State    **Dst,
+                                     zend_uchar      opcode,
+                                     zend_jit_addr   op1_addr,
+                                     zend_jit_addr   op2_addr,
+                                     zend_jit_addr   res_addr,
+                                     uint32_t        res_use_info)
+{
+	zend_reg result_reg, tmp_reg_gp;
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+		/* ASSIGN_DIM_OP */
+		tmp_reg_gp = ZREG_R1;
+	} else {
+		tmp_reg_gp = ZREG_R0;
+	}
+
+	if (zend_is_commutative(opcode)
+	 && (Z_MODE(res_addr) != IS_REG || Z_MODE(op1_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr))) {
+		if (Z_MODE(res_addr) == IS_REG) {
+			result_reg = Z_REG(res_addr);
+		} else {
+			result_reg = ZREG_XMM0;
+		}
+		//|	DOUBLE_GET_ZVAL_LVAL result_reg, op2_addr, tmp_reg_gp
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+					} else {
+		dasm_put(Dst, 2681, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+					}
+				} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (tmp_reg_gp), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+					} else {
+		dasm_put(Dst, 1709, (tmp_reg_gp), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg_gp));
+					} else {
+		dasm_put(Dst, 2714, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg_gp));
+					}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2733, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+		dasm_put(Dst, 2759, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				}
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+				} else {
+		dasm_put(Dst, 2714, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4505 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+			/* ASSIGN_DIM_OP */
+			if (CAN_USE_AVX()) {
+				//|	AVX_MATH opcode, result_reg, result_reg, op1_addr, r1
+					switch (opcode) {
+						case ZEND_ADD:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2878, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 2890, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2904, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2780, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_SUB:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2918, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 2930, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2944, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2792, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_MUL:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2958, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 2970, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2984, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2804, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_DIV:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2998, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 3010, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3024, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2816, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+					}
+#line 4509 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	SSE_MATH opcode, result_reg, op1_addr, r1
+					switch (opcode) {
+						case ZEND_ADD:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3049, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_SUB:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3086, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_MUL:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3123, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_DIV:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3160, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+					}
+#line 4511 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (CAN_USE_AVX()) {
+				//|	AVX_MATH opcode, result_reg, result_reg, op1_addr, r0
+					switch (opcode) {
+						case ZEND_ADD:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2878, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 3186, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2904, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2780, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_SUB:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2918, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 3200, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2944, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2792, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_MUL:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2958, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 3214, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2984, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2804, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_DIV:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 2998, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+							} else {
+				dasm_put(Dst, 3228, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3024, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2816, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+					}
+#line 4515 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	SSE_MATH opcode, result_reg, op1_addr, r0
+					switch (opcode) {
+						case ZEND_ADD:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3242, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_SUB:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3255, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_MUL:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3268, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+						case ZEND_DIV:
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+						} else {
+				dasm_put(Dst, 3281, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32), (result_reg-ZREG_XMM0));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							break;
+					}
+#line 4517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		zend_reg tmp_reg;
+
+		if (Z_MODE(res_addr) == IS_REG) {
+			result_reg = Z_REG(res_addr);
+			tmp_reg = (result_reg == ZREG_XMM0) ? ZREG_XMM1 : ZREG_XMM0;
+		} else if (Z_MODE(op1_addr) == IS_REG && Z_LAST_USE(op1_addr)) {
+			result_reg = Z_REG(op1_addr);
+			tmp_reg = ZREG_XMM0;
+		} else {
+			result_reg = ZREG_XMM0;
+			tmp_reg = ZREG_XMM1;
+		}
+		if (CAN_USE_AVX()) {
+			zend_reg op1_reg;
+
+			if (Z_MODE(op1_addr) == IS_REG) {
+				op1_reg = Z_REG(op1_addr);
+			} else {
+				//|	DOUBLE_GET_ZVAL_DVAL result_reg, op1_addr
+					if (Z_MODE(op1_addr) != IS_REG || result_reg != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (result_reg-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (result_reg-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+#line 4539 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				op1_reg = result_reg;
+			}
+			if ((opcode == ZEND_ADD || opcode == ZEND_SUB)
+			 && Z_MODE(op2_addr) == IS_CONST_ZVAL
+			 && Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+				/* +/- 0 */
+			} else {
+				//|	DOUBLE_GET_ZVAL_LVAL tmp_reg, op2_addr, tmp_reg_gp
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+							if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2669, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							} else {
+				dasm_put(Dst, 2681, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							}
+						} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+				dasm_put(Dst, 1702, (tmp_reg_gp), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+							} else {
+				dasm_put(Dst, 1709, (tmp_reg_gp), Z_LVAL_P(Z_ZV(op2_addr)));
+							}
+							if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg_gp));
+							} else {
+				dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg_gp));
+							}
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2733, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2759, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						}
+					} else if (Z_MODE(op2_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+						} else {
+				dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4547 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	AVX_MATH_REG opcode, result_reg, op1_reg, tmp_reg
+					switch (opcode) {
+						case ZEND_ADD:
+				dasm_put(Dst, 2780, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_SUB:
+				dasm_put(Dst, 2792, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_MUL:
+				dasm_put(Dst, 2804, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_DIV:
+				dasm_put(Dst, 2816, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+					}
+#line 4548 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	DOUBLE_GET_ZVAL_DVAL result_reg, op1_addr
+				if (Z_MODE(op1_addr) != IS_REG || result_reg != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (result_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (result_reg-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+#line 4551 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if ((opcode == ZEND_ADD || opcode == ZEND_SUB)
+			 && Z_MODE(op2_addr) == IS_CONST_ZVAL
+			 && Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+				/* +/- 0 */
+			} else {
+				//|	DOUBLE_GET_ZVAL_LVAL tmp_reg, op2_addr, tmp_reg_gp
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+							if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2669, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							} else {
+				dasm_put(Dst, 2681, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							}
+						} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+				dasm_put(Dst, 1702, (tmp_reg_gp), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+							} else {
+				dasm_put(Dst, 1709, (tmp_reg_gp), Z_LVAL_P(Z_ZV(op2_addr)));
+							}
+							if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg_gp));
+							} else {
+				dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg_gp));
+							}
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2733, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2759, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						}
+					} else if (Z_MODE(op2_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+				dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+						} else {
+				dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4557 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SSE_MATH_REG opcode, result_reg, tmp_reg
+					switch (opcode) {
+						case ZEND_ADD:
+				dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_SUB:
+				dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_MUL:
+				dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+						case ZEND_DIV:
+				dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+							break;
+					}
+#line 4558 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+	//|	DOUBLE_SET_ZVAL_DVAL res_addr, result_reg
+		if (Z_MODE(res_addr) == IS_REG) {
+			if (result_reg != Z_REG(res_addr)) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		}
+			}
+		} else {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1875, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		} else {
+	dasm_put(Dst, 1888, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		}
+		}
+#line 4562 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != Z_REG(res_addr) || Z_OFFSET(op1_addr) != Z_OFFSET(res_addr)) {
+			if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 4567 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_math_double_double(dasm_State    **Dst,
+                                       zend_uchar      opcode,
+                                       zend_jit_addr   op1_addr,
+                                       zend_jit_addr   op2_addr,
+                                       zend_jit_addr   res_addr,
+                                       uint32_t        res_use_info)
+{
+	bool same_ops = zend_jit_same_addr(op1_addr, op2_addr);
+	zend_reg result_reg;
+
+	if (Z_MODE(res_addr) == IS_REG) {
+		result_reg = Z_REG(res_addr);
+	} else if (Z_MODE(op1_addr) == IS_REG && Z_LAST_USE(op1_addr)) {
+		result_reg = Z_REG(op1_addr);
+	} else if (zend_is_commutative(opcode) && Z_MODE(op2_addr) == IS_REG && Z_LAST_USE(op2_addr)) {
+		result_reg = Z_REG(op2_addr);
+	} else {
+		result_reg = ZREG_XMM0;
+	}
+
+	if (CAN_USE_AVX()) {
+		zend_reg op1_reg;
+		zend_jit_addr val_addr;
+
+		if (Z_MODE(op1_addr) == IS_REG) {
+			op1_reg = Z_REG(op1_addr);
+			val_addr = op2_addr;
+		} else if (Z_MODE(op2_addr) == IS_REG && zend_is_commutative(opcode)) {
+			op1_reg = Z_REG(op2_addr);
+			val_addr = op1_addr;
+		} else {
+			//|	DOUBLE_GET_ZVAL_DVAL result_reg, op1_addr
+				if (Z_MODE(op1_addr) != IS_REG || result_reg != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (result_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (result_reg-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+#line 4606 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_reg = result_reg;
+			val_addr = op2_addr;
+		}
+		if ((opcode == ZEND_MUL) &&
+			Z_MODE(val_addr) == IS_CONST_ZVAL && Z_DVAL_P(Z_ZV(val_addr)) == 2.0) {
+			//|	AVX_MATH_REG ZEND_ADD, result_reg, op1_reg, op1_reg
+				switch (ZEND_ADD) {
+					case ZEND_ADD:
+			dasm_put(Dst, 2780, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (op1_reg-ZREG_XMM0));
+						break;
+					case ZEND_SUB:
+			dasm_put(Dst, 2792, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (op1_reg-ZREG_XMM0));
+						break;
+					case ZEND_MUL:
+			dasm_put(Dst, 2804, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (op1_reg-ZREG_XMM0));
+						break;
+					case ZEND_DIV:
+			dasm_put(Dst, 2816, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (op1_reg-ZREG_XMM0));
+						break;
+				}
+#line 4612 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+			/* ASSIGN_DIM_OP */
+			//|	AVX_MATH opcode, result_reg, op1_reg, val_addr, r1
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2878, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 2890, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2904, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2780, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2918, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 2930, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2944, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2792, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2958, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 2970, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2984, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2804, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2998, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 3010, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3024, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2816, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4615 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	AVX_MATH opcode, result_reg, op1_reg, val_addr, r0
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2878, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 3186, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2904, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2780, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2918, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 3200, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2944, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2792, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2958, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 3214, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 2984, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2804, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 2998, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+						} else {
+			dasm_put(Dst, 3228, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3024, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2816, (op1_reg-ZREG_XMM0), (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4617 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		zend_jit_addr val_addr;
+
+		if (Z_MODE(op1_addr) != IS_REG && Z_MODE(op2_addr) == IS_REG && zend_is_commutative(opcode)) {
+			//|	DOUBLE_GET_ZVAL_DVAL result_reg, op2_addr
+				if (Z_MODE(op2_addr) != IS_REG || result_reg != Z_REG(op2_addr)) {
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+				} else {
+			dasm_put(Dst, 1911, (result_reg-ZREG_XMM0), Z_ZV(op2_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (result_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (result_reg-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+			dasm_put(Dst, 1951, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				}
+					} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (result_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+#line 4623 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			val_addr = op1_addr;
+		} else {
+			//|	DOUBLE_GET_ZVAL_DVAL result_reg, op1_addr
+				if (Z_MODE(op1_addr) != IS_REG || result_reg != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (result_reg-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (result_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (result_reg-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (result_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+#line 4626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			val_addr = op2_addr;
+		}
+		if (same_ops) {
+			//|	SSE_MATH_REG opcode, result_reg, result_reg
+				switch (opcode) {
+					case ZEND_ADD:
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_SUB:
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_MUL:
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_DIV:
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+				}
+#line 4630 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if ((opcode == ZEND_MUL) &&
+			Z_MODE(val_addr) == IS_CONST_ZVAL && Z_DVAL_P(Z_ZV(val_addr)) == 2.0) {
+			//|	SSE_MATH_REG ZEND_ADD, result_reg, result_reg
+				switch (ZEND_ADD) {
+					case ZEND_ADD:
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_SUB:
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_MUL:
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+					case ZEND_DIV:
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (result_reg-ZREG_XMM0));
+						break;
+				}
+#line 4633 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_R0) {
+			/* ASSIGN_DIM_OP */
+			//|	SSE_MATH opcode, result_reg, val_addr, r1
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3049, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3086, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3123, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3160, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4636 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	SSE_MATH opcode, result_reg, val_addr, r0
+				switch (opcode) {
+					case ZEND_ADD:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3038, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3242, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3062, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2828, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_SUB:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3075, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3255, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3099, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2839, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_MUL:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3112, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3268, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3136, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2850, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+					case ZEND_DIV:
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3149, (result_reg-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+			dasm_put(Dst, 3281, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32), (result_reg-ZREG_XMM0));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 3173, (result_reg-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+			dasm_put(Dst, 2861, (result_reg-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						break;
+				}
+#line 4638 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|	DOUBLE_SET_ZVAL_DVAL res_addr, result_reg
+		if (Z_MODE(res_addr) == IS_REG) {
+			if (result_reg != Z_REG(res_addr)) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (result_reg-ZREG_XMM0));
+		}
+			}
+		} else {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 1875, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		} else {
+	dasm_put(Dst, 1888, (result_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		}
+		}
+#line 4641 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != Z_REG(res_addr) || Z_OFFSET(op1_addr) != Z_OFFSET(res_addr)) {
+			if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 4646 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_math_helper(dasm_State    **Dst,
+                                const zend_op  *opline,
+                                zend_uchar      opcode,
+                                zend_uchar      op1_type,
+                                znode_op        op1,
+                                zend_jit_addr   op1_addr,
+                                uint32_t        op1_info,
+                                zend_uchar      op2_type,
+                                znode_op        op2,
+                                zend_jit_addr   op2_addr,
+                                uint32_t        op2_info,
+                                uint32_t        res_var,
+                                zend_jit_addr   res_addr,
+                                uint32_t        res_info,
+                                uint32_t        res_use_info,
+                                int             may_overflow,
+                                int             may_throw)
+/* Labels: 1,2,3,4,5,6 */
+{
+	bool same_ops = zend_jit_same_addr(op1_addr, op2_addr);
+
+	if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_LONG)) {
+		if (op1_info & (MAY_BE_ANY-MAY_BE_LONG)) {
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >3
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4678 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >6
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4680 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (!same_ops && (op2_info & (MAY_BE_ANY-MAY_BE_LONG))) {
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >1
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 4685 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3320, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4686 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 4687 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op2_info & (MAY_BE_ANY-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >6
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4689 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!zend_jit_math_long_double(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+					return 0;
+				}
+				//|	jmp >5
+				//|.code
+				dasm_put(Dst, 3334);
+#line 4695 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >6
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4697 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (!zend_jit_math_long_long(Dst, opline, opcode, op1_addr, op2_addr, res_addr, res_info, res_use_info, may_overflow)) {
+			return 0;
+		}
+		if (op1_info & MAY_BE_DOUBLE) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 4704 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|3:
+			dasm_put(Dst, 496);
+#line 4705 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >6
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4707 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (op2_info & MAY_BE_DOUBLE) {
+				if (!same_ops && (op2_info & (MAY_BE_ANY-MAY_BE_DOUBLE))) {
+					if (!same_ops) {
+						//|	IF_NOT_ZVAL_TYPE, op2_addr, IS_DOUBLE, >1
+							ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 499, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4712 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_ZVAL_TYPE, op2_addr, IS_DOUBLE, >6
+							ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4714 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!zend_jit_math_double_double(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+					return 0;
+				}
+				//|	jmp >5
+				dasm_put(Dst, 3340);
+#line 4720 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!same_ops) {
+				//|1:
+				dasm_put(Dst, 63);
+#line 4723 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op2_info & (MAY_BE_ANY-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >6
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4725 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!zend_jit_math_double_long(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+					return 0;
+				}
+				//|	jmp >5
+				dasm_put(Dst, 3340);
+#line 4730 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 4732 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if ((op1_info & MAY_BE_DOUBLE) &&
+	           !(op1_info & MAY_BE_LONG) &&
+	           (op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+		if (op1_info & (MAY_BE_ANY-MAY_BE_DOUBLE)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >6
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4738 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op2_info & MAY_BE_DOUBLE) {
+			if (!same_ops && (op2_info & (MAY_BE_ANY-MAY_BE_DOUBLE))) {
+				if (!same_ops && (op2_info & MAY_BE_LONG)) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >1
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >6
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4745 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (!zend_jit_math_double_double(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+				return 0;
+			}
+		}
+		if (!same_ops && (op2_info & MAY_BE_LONG)) {
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 4754 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		    //|1:
+		    dasm_put(Dst, 63);
+#line 4756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op2_info & (MAY_BE_ANY-(MAY_BE_DOUBLE|MAY_BE_LONG))) {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >6
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4758 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!zend_jit_math_double_long(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+				return 0;
+			}
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|	jmp >5
+				//|.code
+				dasm_put(Dst, 3334);
+#line 4765 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if ((op2_info & MAY_BE_DOUBLE) &&
+	           !(op2_info & MAY_BE_LONG) &&
+	           (op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+		if (op2_info & (MAY_BE_ANY-MAY_BE_DOUBLE)) {
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >6
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4772 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & MAY_BE_DOUBLE) {
+			if (!same_ops && (op1_info & (MAY_BE_ANY-MAY_BE_DOUBLE))) {
+				if (!same_ops && (op1_info & MAY_BE_LONG)) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4777 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >6
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 4779 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (!zend_jit_math_double_double(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+				return 0;
+			}
+		}
+		if (!same_ops && (op1_info & MAY_BE_LONG)) {
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 4788 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|1:
+			dasm_put(Dst, 63);
+#line 4790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_DOUBLE|MAY_BE_LONG))) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >6
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4792 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!zend_jit_math_long_double(Dst, opcode, op1_addr, op2_addr, res_addr, res_use_info)) {
+				return 0;
+			}
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|	jmp >5
+				//|.code
+				dasm_put(Dst, 3334);
+#line 4799 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	//|5:
+	dasm_put(Dst, 278);
+#line 4804 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if ((op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) ||
+		(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+		if ((op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		    (op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 4810 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|6:
+		dasm_put(Dst, 3345);
+#line 4812 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != ZREG_FCARG1) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+				//|	LOAD_ZVAL_ADDR FCARG1a, real_addr
+					if (Z_MODE(real_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(real_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(real_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(real_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(real_addr)))>>32));
+						}
+					} else if (Z_MODE(real_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(real_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(real_addr)), Z_OFFSET(real_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(real_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4816 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4818 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_MODE(op1_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var);
+				if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+					return 0;
+				}
+				op1_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4827 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			if (Z_MODE(op1_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var);
+				if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+					return 0;
+				}
+				op1_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(res_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+				//|	LOAD_ZVAL_ADDR FCARG1a, real_addr
+					if (Z_MODE(real_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(real_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(real_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(real_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(real_addr)))>>32));
+						}
+					} else if (Z_MODE(real_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(real_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(real_addr)), Z_OFFSET(real_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(real_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4839 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 4841 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		if (Z_MODE(op2_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var);
+			if (!zend_jit_spill_store(Dst, op2_addr, real_addr, op2_info, 1)) {
+				return 0;
+			}
+			op2_addr = real_addr;
+		}
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 4853 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 12
+			//|	PUSH_ZVAL_ADDR op2_addr, r0
+		//|.endif
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 4858 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opcode == ZEND_ADD) {
+			//|	EXT_CALL add_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(add_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(add_function));
+					} else {
+					if (IS_SIGNED_32BIT(add_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)add_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)add_function)), (unsigned int)((((ptrdiff_t)add_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 4860 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_SUB) {
+			//|	EXT_CALL sub_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(sub_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(sub_function));
+					} else {
+					if (IS_SIGNED_32BIT(sub_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)sub_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)sub_function)), (unsigned int)((((ptrdiff_t)sub_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 4862 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_MUL) {
+			//|	EXT_CALL mul_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(mul_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(mul_function));
+					} else {
+					if (IS_SIGNED_32BIT(mul_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)mul_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)mul_function)), (unsigned int)((((ptrdiff_t)mul_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 4864 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_DIV) {
+			//|	EXT_CALL div_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(div_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(div_function));
+					} else {
+					if (IS_SIGNED_32BIT(div_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)div_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)div_function)), (unsigned int)((((ptrdiff_t)div_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 4866 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		//|	FREE_OP op1_type, op1, op1_info, 0, NULL
+			if (op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 4873 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	FREE_OP op2_type, op2, op2_info, 0, NULL
+			if (op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 4874 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RX) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			} else {
+				zend_jit_check_exception(Dst);
+			}
+		}
+		if (Z_MODE(res_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+			if (!zend_jit_load_reg(Dst, real_addr, res_addr, res_info)) {
+				return 0;
+			}
+		}
+		if ((op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		    (op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+			//|	jmp <5
+			//|.code
+			dasm_put(Dst, 3372);
+#line 4891 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_math(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, uint32_t op2_info, zend_jit_addr op2_addr, uint32_t res_use_info, uint32_t res_info, zend_jit_addr res_addr, int may_overflow, int may_throw)
+{
+	ZEND_ASSERT(!(op1_info & MAY_BE_UNDEF) && !(op2_info & MAY_BE_UNDEF));
+	ZEND_ASSERT((op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+	    (op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE)));
+
+	if (!zend_jit_math_helper(Dst, opline, opline->opcode, opline->op1_type, opline->op1, op1_addr, op1_info, opline->op2_type, opline->op2, op2_addr, op2_info, opline->result.var, res_addr, res_info, res_use_info, may_overflow, may_throw)) {
+		return 0;
+	}
+	if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+		return 0;
+	}
+	return 1;
+}
+
+static int zend_jit_add_arrays(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, uint32_t op2_info, zend_jit_addr op2_addr, zend_jit_addr res_addr)
+{
+	if (Z_MODE(op2_addr) != IS_MEM_ZVAL || Z_REG(op2_addr) != ZREG_FCARG1) {
+		//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4916 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4917 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != ZREG_FCARG2) {
+		//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4919 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4920 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_ZVAL_LVAL ZREG_R0, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R0), (ZREG_R0));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (ZREG_R0 != Z_REG(op2_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_R0));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4922 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 4923 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG2a, r0
+		dasm_put(Dst, 3378);
+#line 4924 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	EXT_CALL zend_jit_add_arrays_helper, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_add_arrays_helper)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_add_arrays_helper));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_add_arrays_helper)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_add_arrays_helper));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_add_arrays_helper)), (unsigned int)((((ptrdiff_t)zend_jit_add_arrays_helper))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 4926 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	SET_ZVAL_PTR res_addr, r0
+		ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 4927 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	SET_ZVAL_TYPE_INFO res_addr, IS_ARRAY_EX
+	dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 4928 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+	dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+		if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+			if (RC_MAY_BE_1(op1_info)) {
+				if (RC_MAY_BE_N(op1_info)) {
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op1_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 4929 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+		if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+			if (RC_MAY_BE_1(op2_info)) {
+				if (RC_MAY_BE_N(op2_info)) {
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op2_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 4930 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_long_math_helper(dasm_State    **Dst,
+                                     const zend_op  *opline,
+                                     zend_uchar      opcode,
+                                     zend_uchar      op1_type,
+                                     znode_op        op1,
+                                     zend_jit_addr   op1_addr,
+                                     uint32_t        op1_info,
+                                     zend_ssa_range *op1_range,
+                                     zend_uchar      op2_type,
+                                     znode_op        op2,
+                                     zend_jit_addr   op2_addr,
+                                     uint32_t        op2_info,
+                                     zend_ssa_range *op2_range,
+                                     uint32_t        res_var,
+                                     zend_jit_addr   res_addr,
+                                     uint32_t        res_info,
+                                     uint32_t        res_use_info,
+                                     int             may_throw)
+/* Labels: 6 */
+{
+	bool same_ops = zend_jit_same_addr(op1_addr, op2_addr);
+	zend_reg result_reg;
+	zval tmp;
+
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) {
+		//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >6
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4959 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (!same_ops && (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+		//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >6
+			ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 4962 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (opcode == ZEND_MOD && Z_MODE(op2_addr) == IS_CONST_ZVAL &&
+	    op1_range &&
+	    op1_range->min >= 0) {
+		zend_long l = Z_LVAL_P(Z_ZV(op2_addr));
+
+		if (zend_long_is_power_of_two(l)) {
+			/* Optimisation for mod of power of 2 */
+			opcode = ZEND_BW_AND;
+			ZVAL_LONG(&tmp, l - 1);
+			op2_addr = ZEND_ADDR_CONST_ZVAL(&tmp);
+		}
+	}
+
+	if (opcode == ZEND_MOD) {
+		result_reg = ZREG_RAX;
+		if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RAX) {
+			//|	mov aword T1, r0 // save
+			dasm_put(Dst, 3382);
+#line 4981 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (Z_MODE(res_addr) == IS_REG) {
+		if ((opline->opcode == ZEND_SL || opline->opcode == ZEND_SR)
+		 && opline->op2_type != IS_CONST) {
+			result_reg = ZREG_R0;
+		} else {
+			result_reg = Z_REG(res_addr);
+		}
+	} else if (Z_MODE(op1_addr) == IS_REG && Z_LAST_USE(op1_addr)) {
+		result_reg = Z_REG(op1_addr);
+	} else if (Z_REG(res_addr) != ZREG_R0) {
+		result_reg = ZREG_R0;
+	} else {
+		/* ASSIGN_DIM_OP */
+		if (sizeof(void*) == 4
+		 && (opcode == ZEND_SL || opcode == ZEND_SR)
+		 && Z_MODE(op2_addr) != IS_CONST_ZVAL) {
+			result_reg = ZREG_R2;
+		} else {
+			result_reg = ZREG_FCARG1;
+		}
+	}
+
+	if (opcode == ZEND_SL) {
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+			zend_long op2_lval = Z_LVAL_P(Z_ZV(op2_addr));
+
+			if (UNEXPECTED((zend_ulong)op2_lval >= SIZEOF_ZEND_LONG * 8)) {
+				if (EXPECTED(op2_lval > 0)) {
+					//|	xor Ra(result_reg), Ra(result_reg)
+					dasm_put(Dst, 1694, (result_reg), (result_reg));
+#line 5011 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 5013 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp ->negative_shift
+					dasm_put(Dst, 3387);
+#line 5014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (Z_MODE(op1_addr) == IS_REG && op2_lval == 1) {
+				//|	lea Ra(result_reg), [Ra(Z_REG(op1_addr))+Ra(Z_REG(op1_addr))]
+				dasm_put(Dst, 2360, (result_reg), (Z_REG(op1_addr)), (Z_REG(op1_addr)), 0);
+#line 5017 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	GET_ZVAL_LVAL result_reg, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (result_reg), (result_reg));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (result_reg != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5019 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	shl Ra(result_reg), op2_lval
+				dasm_put(Dst, 2381, (result_reg), op2_lval);
+#line 5020 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (Z_MODE(op2_addr) != IS_REG || Z_REG(op2_addr) != ZREG_RCX) {
+				//|	GET_ZVAL_LVAL ZREG_RCX, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_RCX), (ZREG_RCX));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_RCX), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_RCX), Z_LVAL_P(Z_ZV(op2_addr)));
+								}
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_RCX), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else if (Z_MODE(op2_addr) == IS_REG) {
+						if (ZREG_RCX != Z_REG(op2_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_RCX));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5024 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!op2_range ||
+			     op2_range->min < 0 ||
+			     op2_range->max >= SIZEOF_ZEND_LONG * 8) {
+				//|	cmp r1, (SIZEOF_ZEND_LONG*8)
+				//|	jae >1
+				//|.cold_code
+				dasm_put(Dst, 3392, (SIZEOF_ZEND_LONG*8));
+#line 5031 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	cmp r1, 0
+				//|	mov Ra(result_reg), 0
+				//|	jg >1
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 3403, (result_reg));
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5036 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->negative_shift
+				//|.code
+				dasm_put(Dst, 3424);
+#line 5038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	GET_ZVAL_LVAL result_reg, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (result_reg), (result_reg));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (result_reg != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5040 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	shl Ra(result_reg), cl
+			//|1:
+			dasm_put(Dst, 3430, (result_reg));
+#line 5042 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opcode == ZEND_SR) {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 5045 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+			zend_long op2_lval = Z_LVAL_P(Z_ZV(op2_addr));
+
+			if (UNEXPECTED((zend_ulong)op2_lval >= SIZEOF_ZEND_LONG * 8)) {
+				if (EXPECTED(op2_lval > 0)) {
+					//|	sar Ra(result_reg), (SIZEOF_ZEND_LONG * 8) - 1
+					dasm_put(Dst, 3438, (result_reg), (SIZEOF_ZEND_LONG * 8) - 1);
+#line 5051 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 5053 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp ->negative_shift
+					dasm_put(Dst, 3387);
+#line 5054 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	sar Ra(result_reg), op2_lval
+				dasm_put(Dst, 3438, (result_reg), op2_lval);
+#line 5057 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (Z_MODE(op2_addr) != IS_REG || Z_REG(op2_addr) != ZREG_RCX) {
+				//|	GET_ZVAL_LVAL ZREG_RCX, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_RCX), (ZREG_RCX));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_RCX), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_RCX), Z_LVAL_P(Z_ZV(op2_addr)));
+								}
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_RCX), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else if (Z_MODE(op2_addr) == IS_REG) {
+						if (ZREG_RCX != Z_REG(op2_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_RCX));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5061 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!op2_range ||
+			     op2_range->min < 0 ||
+			     op2_range->max >= SIZEOF_ZEND_LONG * 8) {
+				//|	cmp r1, (SIZEOF_ZEND_LONG*8)
+				//|	jae >1
+				//|.cold_code
+				dasm_put(Dst, 3392, (SIZEOF_ZEND_LONG*8));
+#line 5068 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	cmp r1, 0
+				//|	mov r1, (SIZEOF_ZEND_LONG * 8) - 1
+				//|	jg >1
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 3446, (SIZEOF_ZEND_LONG * 8) - 1);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5073 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->negative_shift
+				//|.code
+				dasm_put(Dst, 3424);
+#line 5075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|1:
+			//|	sar Ra(result_reg), cl
+			dasm_put(Dst, 3462, (result_reg));
+#line 5078 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opcode == ZEND_MOD) {
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+			zend_long op2_lval = Z_LVAL_P(Z_ZV(op2_addr));
+
+			if (op2_lval == 0) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5085 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->mod_by_zero
+				dasm_put(Dst, 3471);
+#line 5086 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				result_reg = ZREG_RDX;
+				if (op2_lval == -1) {
+					//|	xor Ra(result_reg), Ra(result_reg)
+					dasm_put(Dst, 1694, (result_reg), (result_reg));
+#line 5090 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	GET_ZVAL_LVAL ZREG_RAX, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_RAX), (ZREG_RAX));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_RAX), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_RAX), Z_LVAL_P(Z_ZV(op1_addr)));
+									}
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_RAX), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+							if (ZREG_RAX != Z_REG(op1_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_RAX));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5092 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GET_ZVAL_LVAL ZREG_RCX, op2_addr
+						if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_RCX), (ZREG_RCX));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_RCX), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_RCX), Z_LVAL_P(Z_ZV(op2_addr)));
+									}
+							}
+						} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_RCX), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else if (Z_MODE(op2_addr) == IS_REG) {
+							if (ZREG_RCX != Z_REG(op2_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_RCX));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5093 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.if X64
+					//|	cqo
+					//|.else
+					//|	cdq
+					//|.endif
+					//|	idiv Ra(ZREG_RCX)
+					dasm_put(Dst, 3476, (ZREG_RCX));
+#line 5099 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RAX) {
+					//|	mov r0, aword T1 // restore
+					dasm_put(Dst, 3486);
+#line 5102 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		} else {
+			if (!op2_range || (op2_range->min <= 0 && op2_range->max >= 0)) {
+				if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					//|	cmp aword [Ra(Z_REG(op2_addr))+Z_OFFSET(op2_addr)], 0
+					dasm_put(Dst, 3491, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+#line 5108 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+					//|	test Ra(Z_REG(op2_addr)), Ra(Z_REG(op2_addr))
+					dasm_put(Dst, 3500, (Z_REG(op2_addr)), (Z_REG(op2_addr)));
+#line 5110 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	jz >1
+				//|.cold_code
+				dasm_put(Dst, 3508);
+#line 5113 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 63);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5115 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->mod_by_zero
+				//|.code
+				dasm_put(Dst, 3514);
+#line 5117 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			/* Prevent overflow error/crash if op1 == LONG_MIN and op2 == -1 */
+			if (!op2_range || (op2_range->min <= -1 && op2_range->max >= -1)) {
+				if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					//|	cmp aword [Ra(Z_REG(op2_addr))+Z_OFFSET(op2_addr)], -1
+					dasm_put(Dst, 3520, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+#line 5123 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+					//|	cmp Ra(Z_REG(op2_addr)), -1
+					dasm_put(Dst, 3530, (Z_REG(op2_addr)));
+#line 5125 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	jz >1
+				//|.cold_code
+				dasm_put(Dst, 3508);
+#line 5128 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	SET_ZVAL_LVAL res_addr, 0
+				dasm_put(Dst, 63);
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1971, (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1981, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+#line 5130 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != Z_REG(res_addr) || Z_OFFSET(op1_addr) != Z_OFFSET(res_addr)) {
+						if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_LONG) {
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 5134 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+				}
+				//|	jmp >5
+				//|.code
+				dasm_put(Dst, 3334);
+#line 5139 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			result_reg = ZREG_RDX;
+			//|	GET_ZVAL_LVAL ZREG_RAX, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_RAX), (ZREG_RAX));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_RAX), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_RAX), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_RAX), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (ZREG_RAX != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_RAX));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5143 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+			//|	cqo
+			//|.else
+			//|	cdq
+			//|.endif
+			dasm_put(Dst, 3539);
+#line 5148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				//|	idiv aword [Ra(Z_REG(op2_addr))+Z_OFFSET(op2_addr)]
+				dasm_put(Dst, 3542, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+#line 5150 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				//|	idiv Ra(Z_REG(op2_addr))
+				dasm_put(Dst, 3478, (Z_REG(op2_addr)));
+#line 5152 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RAX) {
+				//|	mov r0, aword T1 // restore
+				dasm_put(Dst, 3486);
+#line 5155 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if (same_ops) {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 5159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	LONG_MATH_REG opcode, Ra(result_reg), Ra(result_reg)
+			switch (opcode) {
+				case ZEND_ADD:
+		dasm_put(Dst, 2373, (result_reg), (result_reg));
+					break;
+				case ZEND_SUB:
+		dasm_put(Dst, 2405, (result_reg), (result_reg));
+					break;
+				case ZEND_MUL:
+		dasm_put(Dst, 2413, (result_reg), (result_reg));
+					break;
+				case ZEND_BW_OR:
+		dasm_put(Dst, 2422, (result_reg), (result_reg));
+					break;
+				case ZEND_BW_AND:
+		dasm_put(Dst, 2430, (result_reg), (result_reg));
+					break;
+				case ZEND_BW_XOR:
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+#line 5160 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_ZVAL_LVAL result_reg, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (result_reg), (result_reg));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (result_reg), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (result_reg), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (result_reg), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (result_reg != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (result_reg));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 5162 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	LONG_MATH opcode, result_reg, op2_addr
+			switch (opcode) {
+				case ZEND_ADD:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2438, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2448, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2170, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2458, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 2373, (Z_REG(op2_addr)), (result_reg));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				case ZEND_SUB:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2468, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2478, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2186, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2488, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 2405, (Z_REG(op2_addr)), (result_reg));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				case ZEND_MUL:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2498, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2509, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2520, (result_reg), (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2529, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 2413, (result_reg), (Z_REG(op2_addr)));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				case ZEND_BW_OR:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2540, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2550, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2560, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2567, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 2422, (Z_REG(op2_addr)), (result_reg));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				case ZEND_BW_AND:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2577, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2587, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2597, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2604, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 2430, (Z_REG(op2_addr)), (result_reg));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				case ZEND_BW_XOR:
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						if (result_reg != ZREG_R0) {
+		dasm_put(Dst, 2614, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						} else {
+		dasm_put(Dst, 2624, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (result_reg));
+						}
+					} else {
+		dasm_put(Dst, 2634, (result_reg), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 2642, (result_reg), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+		dasm_put(Dst, 1694, (Z_REG(op2_addr)), (result_reg));
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+#line 5163 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != result_reg) {
+		//|	SET_ZVAL_LVAL res_addr, Ra(result_reg)
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (result_reg), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (result_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+#line 5167 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != Z_REG(res_addr) || Z_OFFSET(op1_addr) != Z_OFFSET(res_addr)) {
+			if ((res_use_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF|MAY_BE_GUARD)) != MAY_BE_LONG) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 5172 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if ((op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) ||
+		(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+		if ((op1_info & MAY_BE_LONG) &&
+		    (op2_info & MAY_BE_LONG)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 5181 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|6:
+		dasm_put(Dst, 3345);
+#line 5183 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != ZREG_FCARG1) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+				//|	LOAD_ZVAL_ADDR FCARG1a, real_addr
+					if (Z_MODE(real_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(real_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(real_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(real_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(real_addr)))>>32));
+						}
+					} else if (Z_MODE(real_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(real_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(real_addr)), Z_OFFSET(real_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(real_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5187 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5189 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_MODE(op1_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var);
+				if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+					return 0;
+				}
+				op1_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5198 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			if (Z_MODE(op1_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var);
+				if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+					return 0;
+				}
+				op1_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5207 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(res_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+				//|	LOAD_ZVAL_ADDR FCARG1a, real_addr
+					if (Z_MODE(real_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(real_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(real_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(real_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(real_addr)))>>32));
+						}
+					} else if (Z_MODE(real_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(real_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(real_addr)), Z_OFFSET(real_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(real_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5210 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5212 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (Z_MODE(op2_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var);
+			if (!zend_jit_spill_store(Dst, op2_addr, real_addr, op2_info, 1)) {
+				return 0;
+			}
+			op2_addr = real_addr;
+		}
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5223 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 12
+			//|	PUSH_ZVAL_ADDR op2_addr, r0
+		//|.endif
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 5228 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opcode == ZEND_BW_OR) {
+			//|	EXT_CALL bitwise_or_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(bitwise_or_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(bitwise_or_function));
+					} else {
+					if (IS_SIGNED_32BIT(bitwise_or_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)bitwise_or_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)bitwise_or_function)), (unsigned int)((((ptrdiff_t)bitwise_or_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5230 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_BW_AND) {
+			//|	EXT_CALL bitwise_and_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(bitwise_and_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(bitwise_and_function));
+					} else {
+					if (IS_SIGNED_32BIT(bitwise_and_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)bitwise_and_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)bitwise_and_function)), (unsigned int)((((ptrdiff_t)bitwise_and_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5232 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_BW_XOR) {
+			//|	EXT_CALL bitwise_xor_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(bitwise_xor_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(bitwise_xor_function));
+					} else {
+					if (IS_SIGNED_32BIT(bitwise_xor_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)bitwise_xor_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)bitwise_xor_function)), (unsigned int)((((ptrdiff_t)bitwise_xor_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5234 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_SL) {
+			//|	EXT_CALL shift_left_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(shift_left_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(shift_left_function));
+					} else {
+					if (IS_SIGNED_32BIT(shift_left_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)shift_left_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)shift_left_function)), (unsigned int)((((ptrdiff_t)shift_left_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5236 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_SR) {
+			//|	EXT_CALL shift_right_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(shift_right_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(shift_right_function));
+					} else {
+					if (IS_SIGNED_32BIT(shift_right_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)shift_right_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)shift_right_function)), (unsigned int)((((ptrdiff_t)shift_right_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5238 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opcode == ZEND_MOD) {
+			//|	EXT_CALL mod_function, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(mod_function)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(mod_function));
+					} else {
+					if (IS_SIGNED_32BIT(mod_function)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)mod_function));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)mod_function)), (unsigned int)((((ptrdiff_t)mod_function))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5240 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		//|	FREE_OP op1_type, op1, op1_info, 0, NULL
+			if (op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 5247 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	FREE_OP op2_type, op2, op2_info, 0, NULL
+			if (op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 5248 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RX) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			} else {
+				zend_jit_check_exception(Dst);
+			}
+		}
+		if (Z_MODE(res_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, res_var);
+			if (!zend_jit_load_reg(Dst, real_addr, res_addr, res_info)) {
+				return 0;
+			}
+		}
+		if ((op1_info & MAY_BE_LONG) &&
+		    (op2_info & MAY_BE_LONG)) {
+			//|	jmp >5
+			//|.code
+			dasm_put(Dst, 3334);
+#line 5265 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|5:
+	dasm_put(Dst, 278);
+#line 5268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_long_math(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_ssa_range *op1_range, zend_jit_addr op1_addr, uint32_t op2_info, zend_ssa_range *op2_range, zend_jit_addr op2_addr, uint32_t res_use_info, uint32_t res_info, zend_jit_addr res_addr, int may_throw)
+{
+	ZEND_ASSERT(!(op1_info & MAY_BE_UNDEF) && !(op2_info & MAY_BE_UNDEF));
+	ZEND_ASSERT((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_LONG));
+
+	if (!zend_jit_long_math_helper(Dst, opline, opline->opcode,
+			opline->op1_type, opline->op1, op1_addr, op1_info, op1_range,
+			opline->op2_type, opline->op2, op2_addr, op2_info, op2_range,
+			opline->result.var, res_addr, res_info, res_use_info, may_throw)) {
+		return 0;
+	}
+	if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+		return 0;
+	}
+	return 1;
+}
+
+static int zend_jit_concat_helper(dasm_State    **Dst,
+                                  const zend_op  *opline,
+                                  zend_uchar      op1_type,
+                                  znode_op        op1,
+                                  zend_jit_addr   op1_addr,
+                                  uint32_t        op1_info,
+                                  zend_uchar      op2_type,
+                                  znode_op        op2,
+                                  zend_jit_addr   op2_addr,
+                                  uint32_t        op2_info,
+                                  zend_jit_addr   res_addr,
+                                  int             may_throw)
+{
+#if 1
+	if ((op1_info & MAY_BE_STRING) && (op2_info & MAY_BE_STRING)) {
+		if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF) - MAY_BE_STRING)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >6
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 5306 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op2_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF) - MAY_BE_STRING)) {
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_STRING, >6
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3307, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 5309 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_MODE(op1_addr) == IS_MEM_ZVAL && Z_REG(op1_addr) == Z_REG(res_addr) && Z_OFFSET(op1_addr) == Z_OFFSET(res_addr)) {
+			if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5313 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5315 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_jit_fast_assign_concat_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fast_assign_concat_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fast_assign_concat_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fast_assign_concat_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fast_assign_concat_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fast_assign_concat_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fast_assign_concat_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5316 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5319 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5321 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+				//|	LOAD_ZVAL_ADDR CARG3, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op2_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op2_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	sub r4, 12
+				//|	PUSH_ZVAL_ADDR op2_addr, r0
+			//|.endif
+			if (op1_type == IS_CV || op1_type == IS_CONST) {
+				//|	EXT_CALL zend_jit_fast_concat_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fast_concat_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fast_concat_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fast_concat_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fast_concat_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fast_concat_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fast_concat_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5329 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	EXT_CALL zend_jit_fast_concat_tmp_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fast_concat_tmp_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fast_concat_tmp_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fast_concat_tmp_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fast_concat_tmp_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fast_concat_tmp_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fast_concat_tmp_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5331 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if not(X64)
+			//|	add r4, 12
+			//|.endif
+		}
+		/* concatination with empty string may increase refcount */
+		op2_info |= MAY_BE_RCN;
+		//|	FREE_OP op2_type, op2, op2_info, 0, opline
+			if (op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 5339 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|5:
+		dasm_put(Dst, 278);
+#line 5340 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if ((op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF) - MAY_BE_STRING)) ||
+	    (op2_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF) - MAY_BE_STRING))) {
+		if ((op1_info & MAY_BE_STRING) && (op2_info & MAY_BE_STRING)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 5345 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|6:
+			dasm_put(Dst, 3345);
+#line 5346 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+#endif
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != ZREG_FCARG1) {
+			if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5351 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5353 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5355 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 5357 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5361 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 12
+			//|	PUSH_ZVAL_ADDR op2_addr, r0
+		//|.endif
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 5366 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL concat_function, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(concat_function)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(concat_function));
+				} else {
+				if (IS_SIGNED_32BIT(concat_function)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)concat_function));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)concat_function)), (unsigned int)((((ptrdiff_t)concat_function))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 5367 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		/* concatination with empty string may increase refcount */
+		op1_info |= MAY_BE_RCN;
+		op2_info |= MAY_BE_RCN;
+		//|	FREE_OP op1_type, op1, op1_info, 0, NULL
+			if (op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 5374 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	FREE_OP op2_type, op2, op2_info, 0, NULL
+			if (op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 5375 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL && Z_REG(res_addr) == ZREG_RX) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			} else {
+				zend_jit_check_exception(Dst);
+			}
+		}
+#if 1
+		if ((op1_info & MAY_BE_STRING) && (op2_info & MAY_BE_STRING)) {
+			//|	jmp <5
+			//|.code
+			dasm_put(Dst, 3372);
+#line 5386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+#endif
+
+	return 1;
+}
+
+static int zend_jit_concat(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, uint32_t op2_info, zend_jit_addr res_addr, int may_throw)
+{
+	zend_jit_addr op1_addr, op2_addr;
+
+	ZEND_ASSERT(!(op1_info & MAY_BE_UNDEF) && !(op2_info & MAY_BE_UNDEF));
+	ZEND_ASSERT((op1_info & MAY_BE_STRING) && (op2_info & MAY_BE_STRING));
+
+	op1_addr = OP1_ADDR();
+	op2_addr = OP2_ADDR();
+
+	return zend_jit_concat_helper(Dst, opline, opline->op1_type, opline->op1, op1_addr, op1_info, opline->op2_type, opline->op2, op2_addr, op2_info, res_addr, may_throw);
+}
+
+static int zend_jit_fetch_dimension_address_inner(dasm_State **Dst, const zend_op *opline, uint32_t type, uint32_t op1_info, uint32_t op2_info, uint8_t dim_type, const void *found_exit_addr, const void *not_found_exit_addr, const void *exit_addr)
+/* Labels: 1,2,3,4,5 */
+{
+	zend_jit_addr op2_addr = OP2_ADDR();
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+	 && type == BP_VAR_R
+	 && !exit_addr) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+	}
+
+	if (op2_info & MAY_BE_LONG) {
+		bool op2_loaded = 0;
+		bool packed_loaded = 0;
+
+		if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_LONG)) {
+			//|	// if (EXPECTED(Z_TYPE_P(dim) == IS_LONG))
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >3
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3294, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 5429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & MAY_BE_PACKED_GUARD) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_PACKED_GUARD);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			if (!exit_addr) {
+				return 0;
+			}
+			if (op1_info & MAY_BE_ARRAY_PACKED) {
+				//|	test dword [FCARG1a + offsetof(zend_array, u.flags)], HASH_FLAG_PACKED
+				//|	jz &exit_addr
+				dasm_put(Dst, 1734, offsetof(zend_array, u.flags), HASH_FLAG_PACKED, (ptrdiff_t)(exit_addr));
+#line 5440 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	test dword [FCARG1a + offsetof(zend_array, u.flags)], HASH_FLAG_PACKED
+				//|	jnz &exit_addr
+				dasm_put(Dst, 1743, offsetof(zend_array, u.flags), HASH_FLAG_PACKED, (ptrdiff_t)(exit_addr));
+#line 5443 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (type == BP_VAR_W) {
+			//|	// hval = Z_LVAL_P(dim);
+			//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+							}
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+					if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 5448 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op2_loaded = 1;
+		}
+		if (op1_info & MAY_BE_ARRAY_PACKED) {
+			zend_long val = -1;
+
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				val = Z_LVAL_P(Z_ZV(op2_addr));
+				if (val >= 0 && val < HT_MAX_SIZE) {
+					packed_loaded = 1;
+				}
+			} else {
+				if (!op2_loaded) {
+					//|	// hval = Z_LVAL_P(dim);
+					//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+						if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+									}
+							}
+						} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else if (Z_MODE(op2_addr) == IS_REG) {
+							if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5462 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					op2_loaded = 1;
+				}
+				packed_loaded = 1;
+			}
+
+			if (dim_type == IS_UNDEF && type == BP_VAR_W && packed_loaded) {
+				/* don't generate "fast" code for packed array */
+				packed_loaded = 0;
+			}
+
+			if (packed_loaded) {
+				//|	// ZEND_HASH_INDEX_FIND(ht, hval, retval, num_undef);
+				if (op1_info & MAY_BE_ARRAY_NUMERIC_HASH) {
+					//|	test dword [FCARG1a + offsetof(zend_array, u.flags)], HASH_FLAG_PACKED
+					//|	jz >4 // HASH_FIND
+					dasm_put(Dst, 3551, offsetof(zend_array, u.flags), HASH_FLAG_PACKED);
+#line 5477 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	// if (EXPECTED((zend_ulong)(_h) < (zend_ulong)(_ht)->nNumUsed))
+				//|.if X64
+					//|	mov eax, dword [FCARG1a + offsetof(zend_array, nNumUsed)]
+					dasm_put(Dst, 3561, offsetof(zend_array, nNumUsed));
+#line 5481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (val == 0) {
+						//|	test r0, r0
+						dasm_put(Dst, 3565);
+#line 5483 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (val > 0 && !op2_loaded) {
+						//|	cmp r0, val
+						dasm_put(Dst, 3569, val);
+#line 5485 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	cmp r0, FCARG2a
+						dasm_put(Dst, 3575);
+#line 5487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				//|.else
+					if (val >= 0 && !op2_loaded) {
+						//|	cmp dword [FCARG1a + offsetof(zend_array, nNumUsed)], val
+					} else {
+						//|	cmp dword [FCARG1a + offsetof(zend_array, nNumUsed)], FCARG2a
+					}
+				//|.endif
+				if (type == BP_JIT_IS) {
+					if (not_found_exit_addr) {
+						//|	jbe &not_found_exit_addr
+						dasm_put(Dst, 3580, (ptrdiff_t)(not_found_exit_addr));
+#line 5498 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jbe >9 // NOT_FOUND
+						dasm_put(Dst, 3584);
+#line 5500 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && type == BP_VAR_R) {
+					//|	jbe &exit_addr
+					dasm_put(Dst, 3580, (ptrdiff_t)(exit_addr));
+#line 5503 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (type == BP_VAR_IS && not_found_exit_addr) {
+					//|	jbe &not_found_exit_addr
+					dasm_put(Dst, 3580, (ptrdiff_t)(not_found_exit_addr));
+#line 5505 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (type == BP_VAR_RW && not_found_exit_addr) {
+					//|	jbe &not_found_exit_addr
+					dasm_put(Dst, 3580, (ptrdiff_t)(not_found_exit_addr));
+#line 5507 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (type == BP_VAR_IS && found_exit_addr) {
+					//|	jbe >7 // NOT_FOUND
+					dasm_put(Dst, 3589);
+#line 5509 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jbe >2 // NOT_FOUND
+					dasm_put(Dst, 3594);
+#line 5511 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	// _ret = &_ht->arData[_h].val;
+				if (val >= 0) {
+					//|	mov r0, aword [FCARG1a + offsetof(zend_array, arData)]
+					dasm_put(Dst, 3599, offsetof(zend_array, arData));
+#line 5515 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (val != 0) {
+						//|	add r0, val * sizeof(Bucket)
+						dasm_put(Dst, 3604, val * sizeof(Bucket));
+#line 5517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|.if X64
+						//|	mov r0, FCARG2a
+						//|	shl r0, 5
+					//|.else
+						//|	imul r0, FCARG2a, sizeof(Bucket)
+					//|.endif
+					//|	add r0, aword [FCARG1a + offsetof(zend_array, arData)]
+					dasm_put(Dst, 3609, offsetof(zend_array, arData));
+#line 5526 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		}
+		switch (type) {
+			case BP_JIT_IS:
+				if (op1_info & MAY_BE_ARRAY_NUMERIC_HASH) {
+					if (packed_loaded) {
+						//|	jmp >5
+						dasm_put(Dst, 3340);
+#line 5534 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|4:
+					dasm_put(Dst, 538);
+#line 5536 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!op2_loaded) {
+						//|	// hval = Z_LVAL_P(dim);
+						//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+							if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+								if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+						dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+								} else {
+										if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+										} else {
+						dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+										}
+								}
+							} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+							} else if (Z_MODE(op2_addr) == IS_REG) {
+								if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+						dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 5539 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					if (packed_loaded) {
+						//|	EXT_CALL _zend_hash_index_find, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(_zend_hash_index_find)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(_zend_hash_index_find));
+								} else {
+								if (IS_SIGNED_32BIT(_zend_hash_index_find)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)_zend_hash_index_find));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_hash_index_find)), (unsigned int)((((ptrdiff_t)_zend_hash_index_find))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5542 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	EXT_CALL zend_hash_index_find, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_index_find)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_index_find));
+								} else {
+								if (IS_SIGNED_32BIT(zend_hash_index_find)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_index_find));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_index_find)), (unsigned int)((((ptrdiff_t)zend_hash_index_find))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5544 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	test r0, r0
+					dasm_put(Dst, 3565);
+#line 5546 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (not_found_exit_addr) {
+						//|	jz &not_found_exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5548 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jz >9 // NOT_FOUND
+						dasm_put(Dst, 3622);
+#line 5550 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					if (op2_info & MAY_BE_STRING) {
+						//|	jmp >5
+						dasm_put(Dst, 3340);
+#line 5553 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (packed_loaded) {
+					if (op2_info & MAY_BE_STRING) {
+						//|	jmp >5
+						dasm_put(Dst, 3340);
+#line 5557 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (not_found_exit_addr) {
+					//|	jmp &not_found_exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(not_found_exit_addr));
+#line 5560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9 // NOT_FOUND
+					dasm_put(Dst, 3627);
+#line 5562 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case BP_VAR_R:
+			case BP_VAR_IS:
+			case BP_VAR_UNSET:
+				if (packed_loaded) {
+					if (op1_info & MAY_BE_ARRAY_NUMERIC_HASH) {
+						//|	IF_NOT_Z_TYPE r0, IS_UNDEF, >8
+						dasm_put(Dst, 3632, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5570 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && type == BP_VAR_R) {
+						/* perform IS_UNDEF check only after result type guard (during deoptimization) */
+						if (!found_exit_addr || (op1_info & MAY_BE_ARRAY_NUMERIC_HASH)) {
+							//|	IF_Z_TYPE r0, IS_UNDEF, &exit_addr
+							dasm_put(Dst, 3641, offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 5574 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else if (type == BP_VAR_IS && not_found_exit_addr) {
+						//|	IF_Z_TYPE r0, IS_UNDEF, &not_found_exit_addr
+						dasm_put(Dst, 3641, offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(not_found_exit_addr));
+#line 5577 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (type == BP_VAR_IS && found_exit_addr) {
+						//|	IF_Z_TYPE r0, IS_UNDEF, >7 // NOT_FOUND
+						dasm_put(Dst, 3649, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5579 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_Z_TYPE r0, IS_UNDEF, >2 // NOT_FOUND
+						dasm_put(Dst, 3658, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!(op1_info & MAY_BE_ARRAY_KEY_LONG) || (packed_loaded && (op1_info & MAY_BE_ARRAY_NUMERIC_HASH))) {
+					if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && type == BP_VAR_R) {
+						//|	jmp &exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 5586 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (type == BP_VAR_IS && not_found_exit_addr) {
+						//|	jmp &not_found_exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(not_found_exit_addr));
+#line 5588 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (type == BP_VAR_IS && found_exit_addr) {
+						//|	jmp >7 // NOT_FOUND
+						dasm_put(Dst, 3667);
+#line 5590 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jmp >2 // NOT_FOUND
+						dasm_put(Dst, 3672);
+#line 5592 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!packed_loaded || (op1_info & MAY_BE_ARRAY_NUMERIC_HASH)) {
+					//|4:
+					dasm_put(Dst, 538);
+#line 5596 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!op2_loaded) {
+						//|	// hval = Z_LVAL_P(dim);
+						//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+							if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+								if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+						dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+								} else {
+										if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+										} else {
+						dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+										}
+								}
+							} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+							} else if (Z_MODE(op2_addr) == IS_REG) {
+								if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+						dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 5599 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					if (packed_loaded) {
+						//|	EXT_CALL _zend_hash_index_find, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(_zend_hash_index_find)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(_zend_hash_index_find));
+								} else {
+								if (IS_SIGNED_32BIT(_zend_hash_index_find)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)_zend_hash_index_find));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_hash_index_find)), (unsigned int)((((ptrdiff_t)_zend_hash_index_find))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5602 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	EXT_CALL zend_hash_index_find, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_index_find)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_index_find));
+								} else {
+								if (IS_SIGNED_32BIT(zend_hash_index_find)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_index_find));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_index_find)), (unsigned int)((((ptrdiff_t)zend_hash_index_find))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5604 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	test r0, r0
+					dasm_put(Dst, 3565);
+#line 5606 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && type == BP_VAR_R) {
+						//|	jz &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 5608 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (type == BP_VAR_IS && not_found_exit_addr) {
+						//|	jz &not_found_exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5610 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (type == BP_VAR_IS && found_exit_addr) {
+						//|	jz >7 // NOT_FOUND
+						dasm_put(Dst, 3653);
+#line 5612 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jz >2 // NOT_FOUND
+						dasm_put(Dst, 3662);
+#line 5614 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 5617 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|2:
+				dasm_put(Dst, 2222);
+#line 5618 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				switch (type) {
+					case BP_VAR_R:
+						if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE) {
+							//|	// zend_error(E_WARNING,"Undefined array key " ZEND_LONG_FMT, hval);
+							//|	// retval = &EG(uninitialized_zval);
+							//|	UNDEFINED_OFFSET opline
+								if (opline == last_valid_opline) {
+									zend_jit_use_last_valid_opline();
+							dasm_put(Dst, 3677);
+								} else {
+								if (opline == last_valid_opline) {
+									zend_jit_use_last_valid_opline();
+								if (GCC_GLOBAL_REGS) {
+							dasm_put(Dst, 8, Dt1(->opline));
+								}
+								} else {
+									if (IS_SIGNED_32BIT(opline)) {
+							dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+									} else {
+							dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+									}
+									if (!GCC_GLOBAL_REGS) {
+										zend_jit_reset_last_valid_opline();
+									}
+								}
+							dasm_put(Dst, 3681);
+								}
+#line 5624 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							//|	jmp >9
+							dasm_put(Dst, 3627);
+#line 5625 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						break;
+					case BP_VAR_IS:
+					case BP_VAR_UNSET:
+						if (!not_found_exit_addr && !found_exit_addr) {
+							//|	// retval = &EG(uninitialized_zval);
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 5632 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							//|	jmp >9
+							dasm_put(Dst, 3685, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 5633 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						break;
+					default:
+						ZEND_UNREACHABLE();
+				}
+				//|.code
+				dasm_put(Dst, 536);
+#line 5639 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case BP_VAR_RW:
+				if (packed_loaded && !not_found_exit_addr) {
+					//|	IF_NOT_Z_TYPE r0, IS_UNDEF, >8
+					dasm_put(Dst, 3632, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5643 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!packed_loaded ||
+						!not_found_exit_addr ||
+						(op1_info & MAY_BE_ARRAY_NUMERIC_HASH)) {
+					if (packed_loaded && not_found_exit_addr) {
+						//|.cold_code
+						dasm_put(Dst, 445);
+#line 5649 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|2:
+					//|4:
+					dasm_put(Dst, 3698);
+#line 5652 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!op2_loaded) {
+						//|	// hval = Z_LVAL_P(dim);
+						//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+							if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+								if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+						dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+								} else {
+										if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+										} else {
+						dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+										}
+								}
+							} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+							} else if (Z_MODE(op2_addr) == IS_REG) {
+								if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+						dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 5655 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 5657 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (packed_loaded) {
+						//|	EXT_CALL zend_jit_hash_index_lookup_rw_no_packed, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_hash_index_lookup_rw_no_packed)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_hash_index_lookup_rw_no_packed));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_hash_index_lookup_rw_no_packed)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_hash_index_lookup_rw_no_packed));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_hash_index_lookup_rw_no_packed)), (unsigned int)((((ptrdiff_t)zend_jit_hash_index_lookup_rw_no_packed))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5659 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	EXT_CALL zend_jit_hash_index_lookup_rw, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_hash_index_lookup_rw)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_hash_index_lookup_rw));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_hash_index_lookup_rw)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_hash_index_lookup_rw));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_hash_index_lookup_rw)), (unsigned int)((((ptrdiff_t)zend_jit_hash_index_lookup_rw))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 5661 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	test r0, r0
+					dasm_put(Dst, 3565);
+#line 5663 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (not_found_exit_addr) {
+						if (packed_loaded) {
+							//|	jnz >8
+							//|	jmp &not_found_exit_addr
+							//|.code
+							dasm_put(Dst, 3703, (ptrdiff_t)(not_found_exit_addr));
+#line 5668 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	jz &not_found_exit_addr
+							dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5670 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						//|	jz >9
+						dasm_put(Dst, 3622);
+#line 5673 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				break;
+			case BP_VAR_W:
+				if (packed_loaded) {
+					//|	IF_NOT_Z_TYPE r0, IS_UNDEF, >8
+					dasm_put(Dst, 3632, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5679 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!(op1_info & MAY_BE_ARRAY_KEY_LONG) || (op1_info & MAY_BE_ARRAY_NUMERIC_HASH) || packed_loaded || dim_type == IS_UNDEF) {
+					//|2:
+					//|4:
+					dasm_put(Dst, 3698);
+#line 5683 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!op2_loaded) {
+						//|	// hval = Z_LVAL_P(dim);
+						//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+							if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+								if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+						dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+								} else {
+										if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+						dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+										} else {
+						dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+										}
+								}
+							} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+							} else if (Z_MODE(op2_addr) == IS_REG) {
+								if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+						dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 5686 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	EXT_CALL zend_hash_index_lookup, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_index_lookup)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_index_lookup));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_index_lookup)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_index_lookup));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_index_lookup)), (unsigned int)((((ptrdiff_t)zend_hash_index_lookup))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5688 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+
+		if (type != BP_JIT_IS && (op2_info & MAY_BE_STRING)) {
+			//|	jmp >8
+			dasm_put(Dst, 3712);
+#line 5696 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op2_info & MAY_BE_STRING) {
+		//|3:
+		dasm_put(Dst, 496);
+#line 5701 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING))) {
+			//|	// if (EXPECTED(Z_TYPE_P(dim) == IS_STRING))
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_STRING, >3
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3294, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 5704 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// offset_key = Z_STR_P(dim);
+		//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+				if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 5707 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// retval = zend_hash_find(ht, offset_key);
+		switch (type) {
+			case BP_JIT_IS:
+				if (opline->op2_type != IS_CONST) {
+					//|	cmp byte [FCARG2a + offsetof(zend_string, val)], '9'
+					//|	jle >1
+					//|.cold_code
+					dasm_put(Dst, 3717, offsetof(zend_string, val), '9');
+#line 5714 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	EXT_CALL zend_jit_symtable_find, r0
+					dasm_put(Dst, 63);
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_symtable_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_symtable_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_symtable_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_symtable_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_symtable_find)), (unsigned int)((((ptrdiff_t)zend_jit_symtable_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5716 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp >1
+					//|.code
+					dasm_put(Dst, 3727);
+#line 5718 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_hash_find, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find)), (unsigned int)((((ptrdiff_t)zend_hash_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5719 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 5720 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL zend_hash_find_known_hash, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find_known_hash)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find_known_hash));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_find_known_hash)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find_known_hash));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find_known_hash)), (unsigned int)((((ptrdiff_t)zend_hash_find_known_hash))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5722 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	test r0, r0
+				dasm_put(Dst, 3565);
+#line 5724 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (not_found_exit_addr) {
+					//|	jz &not_found_exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5726 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jz >9 // NOT_FOUND
+					dasm_put(Dst, 3622);
+#line 5728 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case BP_VAR_R:
+			case BP_VAR_IS:
+			case BP_VAR_UNSET:
+				if (opline->op2_type != IS_CONST) {
+					//|	cmp byte [FCARG2a + offsetof(zend_string, val)], '9'
+					//|	jle >1
+					//|.cold_code
+					dasm_put(Dst, 3717, offsetof(zend_string, val), '9');
+#line 5737 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	EXT_CALL zend_jit_symtable_find, r0
+					dasm_put(Dst, 63);
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_symtable_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_symtable_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_symtable_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_symtable_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_symtable_find)), (unsigned int)((((ptrdiff_t)zend_jit_symtable_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5739 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp >1
+					//|.code
+					dasm_put(Dst, 3727);
+#line 5741 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_hash_find, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find)), (unsigned int)((((ptrdiff_t)zend_hash_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5742 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 5743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL zend_hash_find_known_hash, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find_known_hash)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find_known_hash));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_find_known_hash)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find_known_hash));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find_known_hash)), (unsigned int)((((ptrdiff_t)zend_hash_find_known_hash))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5745 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	test r0, r0
+				dasm_put(Dst, 3565);
+#line 5747 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && type == BP_VAR_R) {
+					//|	jz &exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 5749 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (type == BP_VAR_IS && not_found_exit_addr) {
+					//|	jz &not_found_exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5751 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (type == BP_VAR_IS && found_exit_addr) {
+					//|	jz >7 // NOT_FOUND
+					dasm_put(Dst, 3653);
+#line 5753 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jz >2 // NOT_FOUND
+					//|.cold_code
+					dasm_put(Dst, 3733);
+#line 5756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|2:
+					dasm_put(Dst, 2222);
+#line 5757 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					switch (type) {
+						case BP_VAR_R:
+							// zend_error(E_WARNING, "Undefined array key \"%s\"", ZSTR_VAL(offset_key));
+							//|	UNDEFINED_INDEX opline
+								if (opline == last_valid_opline) {
+									zend_jit_use_last_valid_opline();
+							dasm_put(Dst, 3739);
+								} else {
+								if (opline == last_valid_opline) {
+									zend_jit_use_last_valid_opline();
+								if (GCC_GLOBAL_REGS) {
+							dasm_put(Dst, 8, Dt1(->opline));
+								}
+								} else {
+									if (IS_SIGNED_32BIT(opline)) {
+							dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+									} else {
+							dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+									}
+									if (!GCC_GLOBAL_REGS) {
+										zend_jit_reset_last_valid_opline();
+									}
+								}
+							dasm_put(Dst, 3743);
+								}
+#line 5761 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							//|	jmp >9
+							dasm_put(Dst, 3627);
+#line 5762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							break;
+						case BP_VAR_IS:
+						case BP_VAR_UNSET:
+							//|	// retval = &EG(uninitialized_zval);
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 5767 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							//|	jmp >9
+							dasm_put(Dst, 3685, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 5768 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							break;
+						default:
+							ZEND_UNREACHABLE();
+					}
+					//|.code
+					dasm_put(Dst, 536);
+#line 5773 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case BP_VAR_RW:
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5777 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (opline->op2_type != IS_CONST) {
+					//|	EXT_CALL zend_jit_symtable_lookup_rw, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_symtable_lookup_rw)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_symtable_lookup_rw));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_symtable_lookup_rw)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_symtable_lookup_rw));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_symtable_lookup_rw)), (unsigned int)((((ptrdiff_t)zend_jit_symtable_lookup_rw))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5779 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL zend_jit_hash_lookup_rw, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_hash_lookup_rw)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_hash_lookup_rw));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_hash_lookup_rw)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_hash_lookup_rw));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_hash_lookup_rw)), (unsigned int)((((ptrdiff_t)zend_jit_hash_lookup_rw))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5781 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	test r0, r0
+				dasm_put(Dst, 3565);
+#line 5783 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (not_found_exit_addr) {
+					//|	jz &not_found_exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5785 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jz >9
+					dasm_put(Dst, 3622);
+#line 5787 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case BP_VAR_W:
+				if (opline->op2_type != IS_CONST) {
+					//|	EXT_CALL zend_jit_symtable_lookup_w, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_symtable_lookup_w)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_symtable_lookup_w));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_symtable_lookup_w)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_symtable_lookup_w));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_symtable_lookup_w)), (unsigned int)((((ptrdiff_t)zend_jit_symtable_lookup_w))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5792 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL zend_hash_lookup, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_lookup)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_lookup));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_lookup)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_lookup));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_lookup)), (unsigned int)((((ptrdiff_t)zend_hash_lookup))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 5794 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+	}
+
+	if (type == BP_JIT_IS && (op2_info & (MAY_BE_LONG|MAY_BE_STRING))) {
+	    //|5:
+	    dasm_put(Dst, 278);
+#line 5803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & MAY_BE_ARRAY_OF_REF) {
+			//|	ZVAL_DEREF r0, MAY_BE_REF
+				if (MAY_BE_REF & MAY_BE_REF) {
+			dasm_put(Dst, 3747, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 5805 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	cmp byte [r0 + 8], IS_NULL
+		dasm_put(Dst, 3765, 8, IS_NULL);
+#line 5807 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (not_found_exit_addr) {
+			//|	jle &not_found_exit_addr
+			dasm_put(Dst, 3770, (ptrdiff_t)(not_found_exit_addr));
+#line 5809 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (found_exit_addr) {
+			//|	jg &found_exit_addr
+			dasm_put(Dst, 3774, (ptrdiff_t)(found_exit_addr));
+#line 5811 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jle >9 // NOT FOUND
+			dasm_put(Dst, 3778);
+#line 5813 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING))) {
+		if (op2_info & (MAY_BE_LONG|MAY_BE_STRING)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 5819 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|3:
+			dasm_put(Dst, 496);
+#line 5820 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 5822 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op2_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 5823 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		switch (type) {
+			case BP_VAR_R:
+				//|.if X64
+					//|   LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5827 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|   PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				//|	EXT_CALL zend_jit_fetch_dim_r_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_r_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_r_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_r_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_r_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_r_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_r_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5832 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 5836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case BP_JIT_IS:
+				//|	EXT_CALL zend_jit_fetch_dim_isset_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_isset_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_isset_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_isset_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_isset_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_isset_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_isset_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5839 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test r0, r0
+				dasm_put(Dst, 3565);
+#line 5840 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (not_found_exit_addr) {
+					//|	je &not_found_exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(not_found_exit_addr));
+#line 5842 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op2_info & (MAY_BE_LONG|MAY_BE_STRING)) {
+						//|	jmp >8
+						dasm_put(Dst, 3712);
+#line 5844 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (found_exit_addr) {
+					//|	jne &found_exit_addr
+					dasm_put(Dst, 1570, (ptrdiff_t)(found_exit_addr));
+#line 5847 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op2_info & (MAY_BE_LONG|MAY_BE_STRING)) {
+						//|	jmp >9
+						dasm_put(Dst, 3627);
+#line 5849 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	jne >8
+					//|	jmp >9
+					dasm_put(Dst, 3783);
+#line 5853 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case BP_VAR_IS:
+			case BP_VAR_UNSET:
+				//|.if X64
+					//|   LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5859 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|   PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				//|	EXT_CALL zend_jit_fetch_dim_is_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_is_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_is_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_is_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_is_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_is_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_is_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5864 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 5868 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case BP_VAR_RW:
+				//|	EXT_CALL zend_jit_fetch_dim_rw_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_rw_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_rw_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_rw_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_rw_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_rw_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_rw_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5871 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test r0, r0
+				//|	jne >8
+				//|	jmp >9
+				dasm_put(Dst, 3792);
+#line 5874 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case BP_VAR_W:
+				//|	EXT_CALL zend_jit_fetch_dim_w_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_w_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_w_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_w_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_w_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_w_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_w_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 5877 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test r0, r0
+				//|	jne >8
+				//|	jmp >9
+				dasm_put(Dst, 3792);
+#line 5880 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+		if (op2_info & (MAY_BE_LONG|MAY_BE_STRING)) {
+			//|.code
+			dasm_put(Dst, 536);
+#line 5886 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_simple_assign(dasm_State    **Dst,
+                                  const zend_op  *opline,
+                                  zend_jit_addr   var_addr,
+                                  uint32_t        var_info,
+                                  uint32_t        var_def_info,
+                                  zend_uchar      val_type,
+                                  zend_jit_addr   val_addr,
+                                  uint32_t        val_info,
+                                  zend_jit_addr   res_addr,
+                                  int             in_cold,
+                                  int             save_r1)
+/* Labels: 1,2,3 */
+{
+	zend_reg tmp_reg;
+
+	if (Z_MODE(var_addr) == IS_REG || Z_REG(var_addr) != ZREG_R0) {
+		tmp_reg = ZREG_R0;
+	} else {
+		/* ASSIGN_DIM */
+		tmp_reg = ZREG_FCARG1;
+	}
+
+	if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+		zval *zv = Z_ZV(val_addr);
+
+		if (!res_addr) {
+			//|	ZVAL_COPY_CONST var_addr, var_info, var_def_info, zv, tmp_reg
+				if (Z_TYPE_P(zv) > IS_TRUE) {
+					if (Z_TYPE_P(zv) == IS_DOUBLE) {
+						zend_reg dst_reg = (Z_MODE(var_addr) == IS_REG) ? Z_REG(var_addr) : ZREG_XMM0;
+						if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+							if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							} else {
+			dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							}
+						} else if (!IS_SIGNED_32BIT(zv)) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (tmp_reg), 0);
+				} else {
+			dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (tmp_reg), 0);
+				}
+						} else {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				} else {
+			dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				}
+						}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (dst_reg != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+					} else if (Z_TYPE_P(zv) == IS_LONG && var_def_info == MAY_BE_DOUBLE) {
+						zend_reg dst_reg = (Z_MODE(var_addr) == IS_REG) ? Z_REG(var_addr) : ZREG_XMM0;
+					if (Z_LVAL_P(zv) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+						} else {
+			dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+						} else {
+			dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+						}
+					}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (dst_reg != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+					} else if (Z_LVAL_P(zv) == 0 && Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+								if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+								} else {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+								}
+							} else {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(var_addr)), Z_OFFSET(var_addr), Z_LVAL_P(zv));
+				}
+							}
+					}
+				}
+				if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					if (var_def_info == MAY_BE_DOUBLE) {
+						if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+						}
+					} else if (((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (var_info & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+					}
+				}
+#line 5919 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	ZVAL_COPY_CONST_2 var_addr, res_addr, var_info, var_def_info, zv, tmp_reg
+				if (Z_TYPE_P(zv) > IS_TRUE) {
+					if (Z_TYPE_P(zv) == IS_DOUBLE) {
+						zend_reg dst_reg = (Z_MODE(var_addr) == IS_REG) ?
+							Z_REG(var_addr) : ((Z_MODE(res_addr) == IS_REG) ? Z_MODE(res_addr) : ZREG_XMM0);
+						if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+							if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							} else {
+			dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							}
+						} else if (!IS_SIGNED_32BIT(zv)) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (tmp_reg), 0);
+				} else {
+			dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (tmp_reg), 0);
+				}
+						} else {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				} else {
+			dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				}
+						}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+					} else if (Z_TYPE_P(zv) == IS_LONG && var_def_info == MAY_BE_DOUBLE) {
+						if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_LVAL_P(zv) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+						} else {
+			dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (ZREG_R0));
+						} else {
+			dasm_put(Dst, 2714, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0), (ZREG_R0));
+						}
+					}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(var_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_LVAL_P(zv) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+						} else {
+			dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (ZREG_R0));
+						} else {
+			dasm_put(Dst, 2714, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0), (ZREG_R0));
+						}
+					}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						} else {
+					if (Z_LVAL_P(zv) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+						} else {
+			dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_R0));
+						} else {
+			dasm_put(Dst, 2714, (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0), (ZREG_R0));
+						}
+					}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (Z_LVAL_P(zv) == 0 && (Z_MODE(var_addr) == IS_REG || Z_MODE(res_addr) == IS_REG)) {
+							if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							} else {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(res_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+							}
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+								if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(res_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+								} else {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+								}
+							} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(var_addr)), Z_OFFSET(var_addr), Z_LVAL_P(zv));
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), Z_LVAL_P(zv));
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(res_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+							} else {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(var_addr)), Z_OFFSET(var_addr), Z_LVAL_P(zv));
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), Z_LVAL_P(zv));
+				}
+							}
+					}
+				}
+				if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					if (var_def_info == MAY_BE_DOUBLE) {
+						if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+						}
+					} else if (((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (var_info & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+					}
+				}
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (var_def_info == MAY_BE_DOUBLE) {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+					} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+					}
+				}
+#line 5921 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_REFCOUNTED_P(zv)) {
+			if (!res_addr) {
+				//|	ADDREF_CONST zv, Ra(tmp_reg)
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+				dasm_put(Dst, 3813, (tmp_reg), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32), (tmp_reg), 0);
+						} else {
+				dasm_put(Dst, 3828, Z_LVAL_P(zv));
+						}
+#line 5925 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	ADDREF_CONST_2 zv, Ra(tmp_reg)
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+				dasm_put(Dst, 3834, (tmp_reg), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32), (tmp_reg), 0);
+						} else {
+				dasm_put(Dst, 3849, Z_LVAL_P(zv));
+						}
+#line 5927 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		if (val_info & MAY_BE_UNDEF) {
+			if (in_cold) {
+				//|	IF_NOT_ZVAL_TYPE val_addr, IS_UNDEF, >2
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2148, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5933 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_ZVAL_TYPE val_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 5935 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3855, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 5936 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 5937 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+			if (save_r1) {
+				//|	mov aword T1, FCARG1a // save
+				dasm_put(Dst, 3869);
+#line 5941 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_TYPE_INFO var_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 5943 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (res_addr) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 5945 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline) {
+				//|	SET_EX_OPLINE opline, Ra(tmp_reg)
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 3874, (tmp_reg), (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), (tmp_reg), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 5948 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL && Z_REG(val_addr) == ZREG_FP);
+			//|	mov FCARG1d, Z_OFFSET(val_addr)
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 2237, Z_OFFSET(val_addr));
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 5952 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (save_r1) {
+				//|	mov FCARG1a, aword T1 // restore
+				dasm_put(Dst, 3888);
+#line 5954 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	jmp >3
+			dasm_put(Dst, 3893);
+#line 5956 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (in_cold) {
+				//|2:
+				dasm_put(Dst, 2222);
+#line 5958 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|.code
+				dasm_put(Dst, 536);
+#line 5960 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (val_info & MAY_BE_REF) {
+			if (val_type == IS_CV) {
+				ZEND_ASSERT(Z_REG(var_addr) != ZREG_R2);
+				if (Z_MODE(val_addr) != IS_MEM_ZVAL || Z_REG(val_addr) != ZREG_R2 || Z_OFFSET(val_addr) != 0) {
+					//|	LOAD_ZVAL_ADDR r2, val_addr
+						if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+							}
+						} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(val_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(val_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 5967 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	ZVAL_DEREF r2, val_info
+					if (val_info & MAY_BE_REF) {
+				dasm_put(Dst, 3898, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+					}
+#line 5969 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R2, 0);
+			} else {
+				zend_jit_addr ref_addr;
+
+				if (in_cold) {
+					//|	IF_NOT_ZVAL_TYPE val_addr, IS_REFERENCE, >1
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 5975 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_ZVAL_TYPE val_addr, IS_REFERENCE, >1
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 5977 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.cold_code
+					dasm_put(Dst, 3855, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 5978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 5979 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	// zend_refcounted *ref = Z_COUNTED_P(retval_ptr);
+				//|	GET_ZVAL_PTR r2, val_addr
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 5982 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	GC_DELREF r2
+				//|	// ZVAL_COPY_VALUE(return_value, &ref->value);
+				dasm_put(Dst, 3916, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+#line 5984 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R2, 8);
+				if (!res_addr) {
+					//|	ZVAL_COPY_VALUE var_addr, var_info, ref_addr, val_info, ZREG_R2, tmp_reg
+						if (val_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+							if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+								if (Z_MODE(ref_addr) == IS_REG) {
+									if (Z_MODE(var_addr) != IS_REG || Z_REG(var_addr) != Z_REG(ref_addr)) {
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(ref_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+									}
+								} else if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+					dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+					dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(Z_ZV(ref_addr)));
+									}
+							}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (Z_REG(var_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+							if (Z_REG(var_addr) != Z_REG(ref_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(var_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+								} else {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+					dasm_put(Dst, 1694, (tmp_reg), (tmp_reg));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+					dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(ref_addr)));
+									}
+							}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+							if (tmp_reg != Z_REG(ref_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (tmp_reg));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+								}
+							} else if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+								if (Z_MODE(ref_addr) == IS_REG) {
+						if (Z_MODE(var_addr) == IS_REG) {
+							if (Z_REG(ref_addr) != Z_REG(var_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						}
+								} else if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) != IS_REG || Z_REG(var_addr) != Z_REG(ref_addr)) {
+							if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						} else {
+					dasm_put(Dst, 1911, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (Z_REG(var_addr)-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else {
+					dasm_put(Dst, 1951, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+							} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+								} else {
+						if (Z_MODE(ref_addr) != IS_REG || ZREG_XMM0 != Z_REG(ref_addr)) {
+							if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+						} else {
+					dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else {
+					dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+							} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+							if (ZREG_XMM0 != Z_REG(var_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						}
+								}
+							} else if (!(val_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+							} else {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+							}
+						}
+						if ((val_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+					      !(val_info & MAY_BE_GUARD) &&
+							has_concrete_type(val_info & MAY_BE_ANY)) {
+							if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+								if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (val_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+									zend_uchar type = concrete_type(val_info);
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), type);
+								}
+							}
+						} else {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+						}
+#line 5987 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	ZVAL_COPY_VALUE_2 var_addr, var_info, res_addr, ref_addr, val_info, ZREG_R2, tmp_reg
+						if (val_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+							if ((val_info & MAY_BE_ANY) == MAY_BE_LONG) {
+								if (Z_MODE(ref_addr) == IS_REG) {
+									if (Z_MODE(var_addr) != IS_REG || Z_REG(var_addr) != Z_REG(ref_addr)) {
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(ref_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+									}
+									if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(ref_addr)) {
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(ref_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+									}
+								} else if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+					dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+					dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(Z_ZV(ref_addr)));
+									}
+							}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (Z_REG(var_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+							if (Z_REG(var_addr) != Z_REG(ref_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(var_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+									if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+									}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+					dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+					dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(ref_addr)));
+									}
+							}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+							if (Z_REG(res_addr) != Z_REG(ref_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(res_addr)), (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+								} else {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+					dasm_put(Dst, 1694, (tmp_reg), (tmp_reg));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+					dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(ref_addr)));
+									}
+							}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+							if (tmp_reg != Z_REG(ref_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(ref_addr)), (tmp_reg));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (tmp_reg), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+								}
+							} else if ((val_info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+								if (Z_MODE(ref_addr) == IS_REG) {
+						if (Z_MODE(var_addr) == IS_REG) {
+							if (Z_REG(ref_addr) != Z_REG(var_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (Z_REG(ref_addr) != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								} else if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) != IS_REG || Z_REG(var_addr) != Z_REG(ref_addr)) {
+							if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						} else {
+					dasm_put(Dst, 1911, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (Z_REG(var_addr)-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else {
+					dasm_put(Dst, 1951, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+							} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (Z_REG(var_addr) != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(ref_addr) != IS_REG || Z_REG(res_addr) != Z_REG(ref_addr)) {
+							if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						} else {
+					dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else {
+					dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+							} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+							if (Z_REG(res_addr) != Z_REG(var_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						}
+								} else {
+						if (Z_MODE(ref_addr) != IS_REG || ZREG_XMM0 != Z_REG(ref_addr)) {
+							if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+						} else {
+					dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						} else {
+					dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+							} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(var_addr) == IS_REG) {
+							if (ZREG_XMM0 != Z_REG(var_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (ZREG_XMM0 != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								}
+							} else if (!(val_info & MAY_BE_DOUBLE)) {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (tmp_reg), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							}
+						}
+						if ((val_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+						    has_concrete_type(val_info & MAY_BE_ANY)) {
+							zend_uchar type = concrete_type(val_info);
+							if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+								if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (val_info & (MAY_BE_ANY|MAY_BE_UNDEF))) {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), type);
+								}
+							}
+							if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+							}
+						} else {
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+						}
+#line 5989 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	je >2
+				//|	IF_NOT_REFCOUNTED dh, >3
+				dasm_put(Dst, 3927);
+#line 5992 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!res_addr) {
+					//|	GC_ADDREF Ra(tmp_reg)
+					dasm_put(Dst, 3819, (tmp_reg), 0);
+#line 5994 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	add dword [Ra(tmp_reg)], 2
+					dasm_put(Dst, 3840, (tmp_reg), 0);
+#line 5996 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	jmp >3
+				//|2:
+				dasm_put(Dst, 3939);
+#line 5999 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (res_addr) {
+					//|	IF_NOT_REFCOUNTED dh, >2
+					//|	GC_ADDREF Ra(tmp_reg)
+					//|2:
+					dasm_put(Dst, 3946, (tmp_reg), 0);
+#line 6003 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (save_r1) {
+					//|	mov aword T1, FCARG1a // save
+					dasm_put(Dst, 3869);
+#line 6006 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	EFREE_REFERENCE aword [Ra(Z_REG(val_addr))+Z_OFFSET(val_addr)]
+				dasm_put(Dst, 3964, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				#if ZEND_DEBUG
+				dasm_put(Dst, 3972);
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#else
+				#ifdef HAVE_BUILTIN_CONSTANT_P
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree_32)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree_32));
+						} else {
+						if (IS_SIGNED_32BIT(_efree_32)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree_32));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree_32)), (unsigned int)((((ptrdiff_t)_efree_32))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#else
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#endif
+				#endif
+#line 6008 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (save_r1) {
+					//|	mov FCARG1a, aword T1 // restore
+					dasm_put(Dst, 3888);
+#line 6010 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	jmp >3
+				dasm_put(Dst, 3893);
+#line 6012 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (in_cold) {
+					//|1:
+					dasm_put(Dst, 63);
+#line 6014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|.code
+					dasm_put(Dst, 536);
+#line 6016 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		}
+
+		if (!res_addr) {
+			//|	ZVAL_COPY_VALUE var_addr, var_info, val_addr, val_info, ZREG_R2, tmp_reg
+				if (val_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(var_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+							}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(var_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(var_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (tmp_reg), (tmp_reg));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (tmp_reg != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (tmp_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+						}
+					} else if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(var_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(var_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						}
+					} else if (!(val_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					}
+				}
+				if ((val_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(val_info & MAY_BE_GUARD) &&
+					has_concrete_type(val_info & MAY_BE_ANY)) {
+					if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (val_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(val_info);
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+				}
+#line 6022 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	ZVAL_COPY_VALUE_2 var_addr, var_info, res_addr, val_addr, val_info, ZREG_R2, tmp_reg
+				if (val_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((val_info & MAY_BE_ANY) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(var_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+							}
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(var_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(var_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(res_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (tmp_reg), (tmp_reg));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (tmp_reg), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (tmp_reg != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (tmp_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (tmp_reg), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((val_info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(var_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(var_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(var_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(val_info & MAY_BE_DOUBLE)) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((val_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				    has_concrete_type(val_info & MAY_BE_ANY)) {
+					zend_uchar type = concrete_type(val_info);
+					if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if ((var_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (val_info & (MAY_BE_ANY|MAY_BE_UNDEF))) {
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 6024 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (val_type == IS_CV) {
+			if (!res_addr) {
+				//|	TRY_ADDREF val_info, dh, Ra(tmp_reg)
+					if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 3985);
+						}
+				dasm_put(Dst, 3993, (tmp_reg), 0);
+					}
+#line 6029 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	TRY_ADDREF_2 val_info, dh, Ra(tmp_reg)
+					if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 3985);
+						}
+				dasm_put(Dst, 4004, (tmp_reg), 0);
+					}
+#line 6031 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (res_addr) {
+				//|	TRY_ADDREF val_info, dh, Ra(tmp_reg)
+					if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 3985);
+						}
+				dasm_put(Dst, 3993, (tmp_reg), 0);
+					}
+#line 6035 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|3:
+		dasm_put(Dst, 496);
+#line 6038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_assign_to_typed_ref(dasm_State         **Dst,
+                                       const zend_op        *opline,
+                                       zend_uchar            val_type,
+                                       zend_jit_addr         val_addr,
+                                       zend_jit_addr         res_addr,
+                                       bool                  check_exception)
+{
+	//|	// if (UNEXPECTED(ZEND_REF_HAS_TYPE_SOURCES(Z_REF_P(variable_ptr)))) {
+	//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+	//|	jnz >2
+	//|.cold_code
+	dasm_put(Dst, 4015, offsetof(zend_reference, sources.ptr));
+#line 6053 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|2:
+	dasm_put(Dst, 2222);
+#line 6054 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (Z_MODE(val_addr) != IS_MEM_ZVAL || Z_REG(val_addr) != ZREG_FCARG2 || Z_OFFSET(val_addr) != 0) {
+		//|	LOAD_ZVAL_ADDR FCARG2a, val_addr
+			if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(val_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+				}
+			} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(val_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(val_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6056 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline) {
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6059 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (val_type == IS_CONST) {
+		//|	EXT_CALL zend_jit_assign_const_to_typed_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_const_to_typed_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_const_to_typed_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_const_to_typed_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_const_to_typed_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_const_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_const_to_typed_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6062 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_TMP_VAR) {
+		//|	EXT_CALL zend_jit_assign_tmp_to_typed_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_tmp_to_typed_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_tmp_to_typed_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_tmp_to_typed_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_tmp_to_typed_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_tmp_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_tmp_to_typed_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6064 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_VAR) {
+		//|	EXT_CALL zend_jit_assign_var_to_typed_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_var_to_typed_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_var_to_typed_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_var_to_typed_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_var_to_typed_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_var_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_var_to_typed_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6066 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_CV) {
+		//|	EXT_CALL zend_jit_assign_cv_to_typed_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_cv_to_typed_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_cv_to_typed_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_cv_to_typed_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_cv_to_typed_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_cv_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_cv_to_typed_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6068 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		ZEND_UNREACHABLE();
+	}
+	if (res_addr) {
+		zend_jit_addr ret_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+		//|	ZVAL_COPY_VALUE res_addr, -1, ret_addr, -1, ZREG_R1, ZREG_R2
+			if (-1 & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((-1 & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(ret_addr) == IS_REG) {
+						if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(ret_addr)) {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(ret_addr)), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(ret_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+						}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(ret_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(ret_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ret_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ret_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ret_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(ret_addr)));
+						}
+				}
+			} else if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_REG(res_addr) != Z_REG(ret_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(ret_addr)), (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(ret_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(ret_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ret_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(ret_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ret_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(ret_addr)));
+						}
+				}
+			} else if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else if (Z_MODE(ret_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(ret_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(ret_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+					}
+				} else if ((-1 & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_REG(ret_addr) != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(ret_addr) != IS_REG || Z_REG(res_addr) != Z_REG(ret_addr)) {
+				if (Z_MODE(ret_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(ret_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(ret_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(ret_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(ret_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ret_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ret_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ret_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+				} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(ret_addr) != IS_REG || ZREG_XMM0 != Z_REG(ret_addr)) {
+				if (Z_MODE(ret_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(ret_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ret_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ret_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(ret_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ret_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ret_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ret_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+				} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					}
+				} else if (!(-1 & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+			}
+			if ((-1 & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(-1 & MAY_BE_GUARD) &&
+				has_concrete_type(-1 & MAY_BE_ANY)) {
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(-1);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+			}
+#line 6075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	TRY_ADDREF -1, ch, r2
+			if (-1 & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				if (-1 & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		dasm_put(Dst, 2121);
+				}
+		dasm_put(Dst, 2129);
+			}
+#line 6076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (check_exception) {
+		//|	// if (UNEXPECTED(EG(exception) != NULL)) {
+		//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+		dasm_put(Dst, 1591, &executor_globals.exception);
+				} else {
+		dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+				}
+#line 6080 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	je >8  // END OF zend_jit_assign_to_variable()
+		//|	jmp ->exception_handler_undef
+		dasm_put(Dst, 4026);
+#line 6082 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jmp >8
+		dasm_put(Dst, 3712);
+#line 6084 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|.code
+	dasm_put(Dst, 536);
+#line 6086 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_assign_to_variable_call(dasm_State    **Dst,
+                                            const zend_op  *opline,
+                                            zend_jit_addr   __var_use_addr,
+                                            zend_jit_addr   var_addr,
+                                            uint32_t        __var_info,
+                                            uint32_t        __var_def_info,
+                                            zend_uchar      val_type,
+                                            zend_jit_addr   val_addr,
+                                            uint32_t        val_info,
+                                            zend_jit_addr   __res_addr,
+                                            bool       __check_exception)
+{
+	if (val_info & MAY_BE_UNDEF) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			if (!exit_addr) {
+				return 0;
+			}
+
+			//|	IF_ZVAL_TYPE val_addr, IS_UNDEF, &exit_addr
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4035, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 6112 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	IF_ZVAL_TYPE val_addr, IS_UNDEF, >1
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 6114 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 3855, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 6115 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 6116 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			ZEND_ASSERT(Z_REG(val_addr) == ZREG_FP);
+			if (Z_REG(var_addr) != ZREG_FP) {
+				//|	mov aword T1, Ra(Z_REG(var_addr)) // save
+				dasm_put(Dst, 4047, (Z_REG(var_addr)));
+#line 6119 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 6121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1d, Z_OFFSET(val_addr)
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 2237, Z_OFFSET(val_addr));
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6123 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_REG(var_addr) != ZREG_FP) {
+				//|	mov Ra(Z_REG(var_addr)), aword T1 // restore
+				dasm_put(Dst, 4054, (Z_REG(var_addr)));
+#line 6125 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_MODE(var_addr) != IS_MEM_ZVAL || Z_REG(var_addr) != ZREG_FCARG1 || Z_OFFSET(var_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, var_addr
+					if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(var_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+						}
+					} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(var_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(var_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 6128 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 6130 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	call ->assign_const
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4061);
+#line 6133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	if (Z_MODE(var_addr) != IS_MEM_ZVAL || Z_REG(var_addr) != ZREG_FCARG1 || Z_OFFSET(var_addr) != 0) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, var_addr
+			if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(var_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+				}
+			} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(var_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(var_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (Z_MODE(val_addr) != IS_MEM_ZVAL || Z_REG(val_addr) != ZREG_FCARG2 || Z_OFFSET(val_addr) != 0) {
+		//|	LOAD_ZVAL_ADDR FCARG2a, val_addr
+			if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(val_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+				}
+			} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(val_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(val_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6140 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline) {
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6143 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (!(val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) {
+		//|	call ->assign_tmp
+		dasm_put(Dst, 4070);
+#line 6146 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_CONST) {
+		//|	call ->assign_const
+		dasm_put(Dst, 4074);
+#line 6148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_TMP_VAR) {
+		//|	call ->assign_tmp
+		dasm_put(Dst, 4070);
+#line 6150 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (val_type == IS_VAR) {
+		if (!(val_info & MAY_BE_REF)) {
+			//|	call ->assign_tmp
+			dasm_put(Dst, 4070);
+#line 6153 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	call ->assign_var
+			dasm_put(Dst, 4078);
+#line 6155 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (val_type == IS_CV) {
+		if (!(val_info & MAY_BE_REF)) {
+			//|	call ->assign_cv_noref
+			dasm_put(Dst, 4082);
+#line 6159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	call ->assign_cv
+			dasm_put(Dst, 4086);
+#line 6161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if ((val_info & MAY_BE_UNDEF) && JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE) {
+			//|9:
+			dasm_put(Dst, 4090);
+#line 6164 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		ZEND_UNREACHABLE();
+	}
+
+	return 1;
+}
+
+static int zend_jit_assign_to_variable(dasm_State    **Dst,
+                                       const zend_op  *opline,
+                                       zend_jit_addr   var_use_addr,
+                                       zend_jit_addr   var_addr,
+                                       uint32_t        var_info,
+                                       uint32_t        var_def_info,
+                                       zend_uchar      val_type,
+                                       zend_jit_addr   val_addr,
+                                       uint32_t        val_info,
+                                       zend_jit_addr   res_addr,
+                                       bool       check_exception)
+/* Labels: 1,2,3,4,5,8 */
+{
+	int done = 0;
+	zend_reg ref_reg, tmp_reg;
+
+	if (Z_MODE(var_addr) == IS_REG || Z_REG(var_use_addr) != ZREG_R0) {
+		ref_reg = ZREG_FCARG1;
+		tmp_reg = ZREG_R0;
+	} else {
+		/* ASSIGN_DIM */
+		ref_reg = ZREG_R0;
+		tmp_reg = ZREG_FCARG1;
+	}
+
+	if (var_info & MAY_BE_REF) {
+		if (Z_MODE(var_use_addr) != IS_MEM_ZVAL || Z_REG(var_use_addr) != ref_reg || Z_OFFSET(var_use_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR Ra(ref_reg), var_use_addr
+				if (Z_MODE(var_use_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(var_use_addr))) {
+			dasm_put(Dst, 1709, (ref_reg), ((ptrdiff_t)Z_ZV(var_use_addr)));
+					} else {
+			dasm_put(Dst, 1702, (ref_reg), (unsigned int)(((ptrdiff_t)Z_ZV(var_use_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_use_addr)))>>32));
+					}
+				} else if (Z_MODE(var_use_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(var_use_addr)) {
+			dasm_put(Dst, 2395, (ref_reg), (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr));
+					} else {
+			dasm_put(Dst, 1726, (Z_REG(var_use_addr)), (ref_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6200 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			var_addr = var_use_addr = ZEND_ADDR_MEM_ZVAL(ref_reg, 0);
+		}
+		//|	// if (Z_ISREF_P(variable_ptr)) {
+		//|	IF_NOT_Z_TYPE, Ra(ref_reg), IS_REFERENCE, >3
+		//|	// if (UNEXPECTED(ZEND_REF_HAS_TYPE_SOURCES(Z_REF_P(variable_ptr)))) {
+		//|	GET_Z_PTR FCARG1a, Ra(ref_reg)
+		dasm_put(Dst, 4093, (ref_reg), offsetof(zval, u1.v.type), IS_REFERENCE, (ref_reg), 0);
+#line 6206 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!zend_jit_assign_to_typed_ref(Dst, opline, val_type, val_addr, res_addr, check_exception)) {
+			return 0;
+		}
+		//|	lea Ra(ref_reg), [FCARG1a + offsetof(zend_reference, val)]
+		//|3:
+		dasm_put(Dst, 4113, (ref_reg), offsetof(zend_reference, val));
+#line 6211 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (var_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+		if (RC_MAY_BE_1(var_info)) {
+			int in_cold = 0;
+
+			if (var_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				//|	IF_ZVAL_REFCOUNTED var_use_addr, >1
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+#line 6218 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 432, (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 6219 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 6220 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				in_cold = 1;
+			}
+			if (Z_REG(var_use_addr) == ZREG_FCARG1 || Z_REG(var_use_addr) == ZREG_R0) {
+				bool keep_gc = 0;
+
+				//|	GET_ZVAL_PTR Ra(tmp_reg), var_use_addr
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (tmp_reg), (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr));
+#line 6226 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (tmp_reg == ZREG_FCARG1) {
+					if (Z_MODE(val_addr) == IS_REG) {
+						keep_gc = 1;
+					} else if ((val_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_GUARD)-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) == 0) {
+						keep_gc = 1;
+					} else if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (sizeof(void*) == 4) {
+							keep_gc = 1;
+						} else {
+							zval *zv = Z_ZV(val_addr);
+
+							if (Z_TYPE_P(zv) == IS_DOUBLE) {
+								if (Z_DVAL_P(zv) == 0 || IS_SIGNED_32BIT(zv)) {
+									keep_gc = 1;
+								}
+							} else if (IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+								keep_gc = 1;
+							}
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if ((val_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							keep_gc = 1;
+						}
+					}
+				}
+				if (!keep_gc) {
+					//|	mov aword T1, Ra(tmp_reg) // save
+					dasm_put(Dst, 4047, (tmp_reg));
+#line 6253 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!zend_jit_simple_assign(Dst, opline, var_addr, var_info, var_def_info, val_type, val_addr, val_info, res_addr, in_cold, 0)) {
+					return 0;
+				}
+				if (!keep_gc) {
+					//|	mov FCARG1a, aword T1 // restore
+					dasm_put(Dst, 3888);
+#line 6259 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	GET_ZVAL_PTR FCARG1a, var_use_addr
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 3964, (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr));
+#line 6262 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!zend_jit_simple_assign(Dst, opline, var_addr, var_info, var_def_info, val_type, val_addr, val_info, res_addr, in_cold, 1)) {
+					return 0;
+				}
+			}
+			//|	GC_DELREF FCARG1a
+			dasm_put(Dst, 468);
+#line 6267 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (RC_MAY_BE_N(var_info) && (var_info & (MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				//|	jnz >4
+				dasm_put(Dst, 477);
+#line 6269 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jnz >8
+				dasm_put(Dst, 3636);
+#line 6271 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	ZVAL_DTOR_FUNC var_info, opline
+				do {
+					if (has_concrete_type((var_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((var_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((var_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((var_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+#line 6273 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (in_cold || (RC_MAY_BE_N(var_info) && (var_info & (MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0)) {
+				if (check_exception) {
+					//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+							if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+					dasm_put(Dst, 1591, &executor_globals.exception);
+							} else {
+					dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+							}
+#line 6276 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	je >8
+					//|	jmp ->exception_handler
+					dasm_put(Dst, 4123);
+#line 6278 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >8
+					dasm_put(Dst, 3712);
+#line 6280 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (RC_MAY_BE_N(var_info) && (var_info & (MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				//|4:
+				//|	IF_GC_MAY_NOT_LEAK FCARG1a, >8
+				//|	EXT_CALL gc_possible_root, r0
+				dasm_put(Dst, 4132, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 6286 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (in_cold) {
+					//|	jmp >8
+					dasm_put(Dst, 3712);
+#line 6288 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (in_cold) {
+				//|.code
+				dasm_put(Dst, 536);
+#line 6292 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				done = 1;
+			}
+		} else /* if (RC_MAY_BE_N(var_info)) */ {
+			if (var_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				//|	IF_NOT_ZVAL_REFCOUNTED var_use_addr, >5
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 4144, (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 6298 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (var_info & (MAY_BE_ARRAY|MAY_BE_OBJECT)) {
+				if (Z_REG(var_use_addr) != ZREG_FP) {
+					//|	mov T1, Ra(Z_REG(var_use_addr)) // save
+					dasm_put(Dst, 4047, (Z_REG(var_use_addr)));
+#line 6302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	GET_ZVAL_PTR FCARG1a, var_use_addr
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+#line 6304 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	GC_DELREF FCARG1a
+				//|	IF_GC_MAY_NOT_LEAK FCARG1a, >5
+				//|	EXT_CALL gc_possible_root, r0
+				dasm_put(Dst, 4158, (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr), (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 6307 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_REG(var_use_addr) != ZREG_FP) {
+					//|	mov Ra(Z_REG(var_use_addr)), T1 // restore
+					dasm_put(Dst, 4054, (Z_REG(var_use_addr)));
+#line 6309 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	GET_ZVAL_PTR Ra(tmp_reg), var_use_addr
+					ZEND_ASSERT(Z_MODE(var_use_addr) == IS_MEM_ZVAL);
+#line 6312 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	GC_DELREF Ra(tmp_reg)
+				dasm_put(Dst, 4178, (tmp_reg), (Z_REG(var_use_addr)), Z_OFFSET(var_use_addr), (tmp_reg), 0);
+#line 6313 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|5:
+			dasm_put(Dst, 278);
+#line 6315 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	    }
+	}
+
+	if (!done && !zend_jit_simple_assign(Dst, opline, var_addr, var_info, var_def_info, val_type, val_addr, val_info, res_addr, 0, 0)) {
+		return 0;
+	}
+
+	//|8:
+	dasm_put(Dst, 4196);
+#line 6323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_assign_dim(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, uint32_t op2_info, uint32_t val_info, uint8_t dim_type, int may_throw)
+{
+	zend_jit_addr op2_addr, op3_addr, res_addr;
+
+	op2_addr = (opline->op2_type != IS_UNUSED) ? OP2_ADDR() : 0;
+	op3_addr = OP1_DATA_ADDR();
+	if (opline->result_type == IS_UNUSED) {
+		res_addr = 0;
+	} else {
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	}
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && (val_info & MAY_BE_UNDEF)) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+		const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+		if (!exit_addr) {
+			return 0;
+		}
+
+		//|	IF_ZVAL_TYPE op3_addr, IS_UNDEF, &exit_addr
+			ZEND_ASSERT(Z_MODE(op3_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4035, (Z_REG(op3_addr)), Z_OFFSET(op3_addr)+offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 6348 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		val_info &= ~MAY_BE_UNDEF;
+	}
+
+	if (op1_info & MAY_BE_REF) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6354 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_NOT_Z_TYPE FCARG1a, IS_REFERENCE, >1
+		//|	GET_Z_PTR FCARG2a, FCARG1a
+		//|	IF_NOT_TYPE byte [FCARG2a + offsetof(zend_reference, val) + offsetof(zval, u1.v.type)], IS_ARRAY, >2
+		//|	lea FCARG1a, [FCARG2a + offsetof(zend_reference, val)]
+		//|	jmp >3
+		//|.cold_code
+		dasm_put(Dst, 4199, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val) + offsetof(zval, u1.v.type), IS_ARRAY, offsetof(zend_reference, val));
+#line 6360 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 2222);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6362 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_jit_prepare_assign_dim_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_prepare_assign_dim_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_prepare_assign_dim_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_prepare_assign_dim_ref)), (unsigned int)((((ptrdiff_t)zend_jit_prepare_assign_dim_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6363 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	test r0, r0
+		//|	mov FCARG1a, r0
+		//|	jne >1
+		//|	jmp ->exception_handler_undef
+		//|.code
+		dasm_put(Dst, 4228);
+#line 6368 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 6369 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 6375 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|3:
+		//|	SEPARATE_ARRAY op1_addr, op1_info, 1
+		dasm_put(Dst, 496);
+			if (RC_MAY_BE_N(op1_info)) {
+				if (Z_REG(op1_addr) != ZREG_FP) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R0), (ZREG_R0));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R0 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R0));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4257);
+					}
+					if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_zval_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_zval_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_zval_array_dup)), (unsigned int)((((ptrdiff_t)zend_jit_zval_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		dasm_put(Dst, 4265);
+				} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4271);
+						if (1) {
+		dasm_put(Dst, 4275);
+		dasm_put(Dst, 63);
+						} else {
+		dasm_put(Dst, 3594);
+						}
+					}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4281, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_dup)), (unsigned int)((((ptrdiff_t)zend_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+					if (RC_MAY_BE_1(op1_info)) {
+						if (1) {
+		dasm_put(Dst, 2872);
+						}
+					}
+		dasm_put(Dst, 2222);
+				}
+			} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			}
+#line 6378 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL)) {
+		if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+			//|	CMP_ZVAL_TYPE op1_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6381 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jg >7
+			dasm_put(Dst, 4312, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_NULL);
+#line 6382 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// ZVAL_ARR(container, zend_new_array(8));
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov T1, Ra(Z_REG(op1_addr)) // save
+			dasm_put(Dst, 4047, (Z_REG(op1_addr)));
+#line 6386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EXT_CALL _zend_new_array_0, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_zend_new_array_0));
+				} else {
+				if (IS_SIGNED_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_zend_new_array_0));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_new_array_0)), (unsigned int)((((ptrdiff_t)_zend_new_array_0))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6388 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov Ra(Z_REG(op1_addr)), T1 // restore
+			dasm_put(Dst, 4054, (Z_REG(op1_addr)));
+#line 6390 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_ZVAL_LVAL op1_addr, r0
+			if (Z_MODE(op1_addr) == IS_REG) {
+		dasm_put(Dst, 2202, (Z_REG(op1_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+#line 6392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO op1_addr, IS_ARRAY_EX
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6393 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1a, r0
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+#line 6394 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+		//|6:
+		dasm_put(Dst, 3345);
+#line 6398 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op2_type == IS_UNUSED) {
+			uint32_t var_info = MAY_BE_NULL;
+			zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+			//|	// var_ptr = zend_hash_next_index_insert(Z_ARRVAL_P(container), &EG(uninitialized_zval));
+			//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 6404 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_hash_next_index_insert, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_next_index_insert));
+					} else {
+					if (IS_SIGNED_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_next_index_insert));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_next_index_insert)), (unsigned int)((((ptrdiff_t)zend_hash_next_index_insert))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6405 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	// if (UNEXPECTED(!var_ptr)) {
+			//|	test r0, r0
+			//|	jz >1
+			//|.cold_code
+			dasm_put(Dst, 4325);
+#line 6409 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	// zend_throw_error(NULL, "Cannot add element to the array as the next element is already occupied");
+			//|	CANNOT_ADD_ELEMENT opline
+			dasm_put(Dst, 63);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+			dasm_put(Dst, 4334);
+				} else {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+			dasm_put(Dst, 4338);
+				}
+#line 6412 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	//ZEND_VM_C_GOTO(assign_dim_op_ret_null);
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 6415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			if (!zend_jit_simple_assign(Dst, opline, var_addr, var_info, -1, (opline+1)->op1_type, op3_addr, val_info, res_addr, 0, 0)) {
+				return 0;
+			}
+		} else {
+			uint32_t var_info = zend_array_element_type(op1_info, opline->op1_type, 0, 0);
+			zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+			if (!zend_jit_fetch_dimension_address_inner(Dst, opline, BP_VAR_W, op1_info, op2_info, dim_type, NULL, NULL, NULL)) {
+				return 0;
+			}
+
+			if (op1_info & (MAY_BE_ARRAY_OF_REF|MAY_BE_OBJECT)) {
+				var_info |= MAY_BE_REF;
+			}
+			if (var_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				var_info |= MAY_BE_RC1;
+			}
+
+			//|8:
+			//|	// value = zend_assign_to_variable(variable_ptr, value, OP_DATA_TYPE);
+			dasm_put(Dst, 4196);
+#line 6436 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->op1_type == IS_VAR) {
+				ZEND_ASSERT(opline->result_type == IS_UNUSED);
+				if (!zend_jit_assign_to_variable_call(Dst, opline, var_addr, var_addr, var_info, -1, (opline+1)->op1_type, op3_addr, val_info, res_addr, 0)) {
+					return 0;
+				}
+			} else {
+				if (!zend_jit_assign_to_variable(Dst, opline, var_addr, var_addr, var_info, -1, (opline+1)->op1_type, op3_addr, val_info, res_addr, 0)) {
+					return 0;
+				}
+			}
+		}
+	}
+
+	if (((op1_info & MAY_BE_ARRAY) &&
+	     (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL))) ||
+	    (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY)))) {
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 6454 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 6455 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if ((op1_info & (MAY_BE_UNDEF|MAY_BE_NULL)) &&
+		    (op1_info & MAY_BE_ARRAY)) {
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+				//|	CMP_ZVAL_TYPE op1_addr, IS_NULL
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6461 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jg >2
+				dasm_put(Dst, 4345, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_NULL);
+#line 6462 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	// ZVAL_ARR(container, zend_new_array(8));
+			if (Z_REG(op1_addr) != ZREG_FP) {
+				//|	mov T1, Ra(Z_REG(op1_addr)) // save
+				dasm_put(Dst, 4047, (Z_REG(op1_addr)));
+#line 6466 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	EXT_CALL _zend_new_array_0, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(_zend_new_array_0)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_zend_new_array_0));
+					} else {
+					if (IS_SIGNED_32BIT(_zend_new_array_0)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_zend_new_array_0));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_new_array_0)), (unsigned int)((((ptrdiff_t)_zend_new_array_0))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6468 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_REG(op1_addr) != ZREG_FP) {
+				//|	mov Ra(Z_REG(op1_addr)), T1 // restore
+				dasm_put(Dst, 4054, (Z_REG(op1_addr)));
+#line 6470 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_LVAL op1_addr, r0
+				if (Z_MODE(op1_addr) == IS_REG) {
+			dasm_put(Dst, 2202, (Z_REG(op1_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+#line 6472 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO op1_addr, IS_ARRAY_EX
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6473 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, r0
+			//|	// ZEND_VM_C_GOTO(assign_dim_op_new_array);
+			//|	jmp <6
+			//|2:
+			dasm_put(Dst, 4358, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+#line 6477 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 6481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		    if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 6483 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		    if (opline->op2_type == IS_UNUSED) {
+				//|	xor FCARG2a, FCARG2a
+				dasm_put(Dst, 2289);
+#line 6486 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (opline->op2_type == IS_CONST && Z_EXTRA_P(RT_CONSTANT(opline, opline->op2)) == ZEND_EXTRA_VALUE) {
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_CONST_ZVAL);
+				//|	LOAD_ADDR FCARG2a, (Z_ZV(op2_addr) + 1)
+						if (IS_SIGNED_32BIT((Z_ZV(op2_addr) + 1))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)(Z_ZV(op2_addr) + 1)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(Z_ZV(op2_addr) + 1))), (unsigned int)((((ptrdiff_t)(Z_ZV(op2_addr) + 1)))>>32));
+						}
+#line 6489 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op2_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 6491 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if not(X64)
+			//|	sub r4, 8
+			//|.endif
+			if (opline->result_type == IS_UNUSED) {
+				//|.if X64
+					//|	xor CARG4, CARG4
+				//|.else
+					//|	push 0
+				//|.endif
+				dasm_put(Dst, 4376);
+#line 6501 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|.if X64
+					//|	LOAD_ZVAL_ADDR CARG4, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 4380, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 4390, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 4398, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 6504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+			}
+			//|.if X64
+				//|	LOAD_ZVAL_ADDR CARG3, op3_addr
+					if (Z_MODE(op3_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op3_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op3_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op3_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op3_addr)))>>32));
+						}
+					} else if (Z_MODE(op3_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op3_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(op3_addr)), Z_OFFSET(op3_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(op3_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 6510 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	PUSH_ZVAL_ADDR op3_addr, r0
+			//|.endif
+			//|	EXT_CALL zend_jit_assign_dim_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_dim_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_dim_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_dim_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_dim_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_dim_helper)), (unsigned int)((((ptrdiff_t)zend_jit_assign_dim_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6514 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if not(X64)
+			//|	add r4, 8
+			//|.endif
+
+#ifdef ZEND_JIT_USE_RC_INFERENCE
+			if (((opline+1)->op1_type & (IS_TMP_VAR|IS_VAR)) && (val_info & MAY_BE_RC1)) {
+				/* ASSIGN_DIM may increase refcount of the value */
+				val_info |= MAY_BE_RCN;
+			}
+#endif
+
+			//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, val_info, 0, NULL
+				if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+					if (RC_MAY_BE_1(val_info)) {
+						if (RC_MAY_BE_N(val_info)) {
+							if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((val_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (NULL && ((val_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((val_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 6526 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+				//|	jmp >9 // END
+				dasm_put(Dst, 3627);
+#line 6531 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 6533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+#ifdef ZEND_JIT_USE_RC_INFERENCE
+	if ((opline->op2_type & (IS_TMP_VAR|IS_VAR)) && (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_ARRAY|MAY_BE_OBJECT))) {
+		/* ASSIGN_DIM may increase refcount of the key */
+		op2_info |= MAY_BE_RCN;
+	}
+#endif
+
+	//|9:
+	//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+	dasm_put(Dst, 4090);
+		if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+			if (RC_MAY_BE_1(op2_info)) {
+				if (RC_MAY_BE_N(op2_info)) {
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op2_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 6545 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (may_throw) {
+		zend_jit_check_exception(Dst);
+	}
+
+	return 1;
+}
+
+static int zend_jit_assign_dim_op(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, uint32_t op1_def_info, zend_jit_addr op1_addr, uint32_t op2_info, uint32_t op1_data_info, zend_ssa_range *op1_data_range, uint8_t dim_type, int may_throw)
+{
+	zend_jit_addr op2_addr, op3_addr, var_addr;
+	const void *not_found_exit_addr = NULL;
+	uint32_t var_info = MAY_BE_NULL;
+
+	ZEND_ASSERT(opline->result_type == IS_UNUSED);
+
+	op2_addr = (opline->op2_type != IS_UNUSED) ? OP2_ADDR() : 0;
+	op3_addr = OP1_DATA_ADDR();
+
+	if (op1_info & MAY_BE_REF) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6566 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_NOT_Z_TYPE FCARG1a, IS_REFERENCE, >1
+		//|	GET_Z_PTR FCARG2a, FCARG1a
+		//|	IF_NOT_TYPE byte [FCARG2a + offsetof(zend_reference, val) + offsetof(zval, u1.v.type)], IS_ARRAY, >2
+		//|	lea FCARG1a, [FCARG2a + offsetof(zend_reference, val)]
+		//|	jmp >3
+		//|.cold_code
+		dasm_put(Dst, 4199, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val) + offsetof(zval, u1.v.type), IS_ARRAY, offsetof(zend_reference, val));
+#line 6572 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 2222);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6574 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_jit_prepare_assign_dim_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_prepare_assign_dim_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_prepare_assign_dim_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_prepare_assign_dim_ref)), (unsigned int)((((ptrdiff_t)zend_jit_prepare_assign_dim_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6575 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	test r0, r0
+		//|	mov FCARG1a, r0
+		//|	jne >1
+		//|	jmp ->exception_handler_undef
+		//|.code
+		dasm_put(Dst, 4228);
+#line 6580 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 6581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 6587 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|3:
+		//|	SEPARATE_ARRAY op1_addr, op1_info, 1
+		dasm_put(Dst, 496);
+			if (RC_MAY_BE_N(op1_info)) {
+				if (Z_REG(op1_addr) != ZREG_FP) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R0), (ZREG_R0));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R0 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R0));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4257);
+					}
+					if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_zval_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_zval_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_zval_array_dup)), (unsigned int)((((ptrdiff_t)zend_jit_zval_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		dasm_put(Dst, 4265);
+				} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4271);
+						if (1) {
+		dasm_put(Dst, 4275);
+		dasm_put(Dst, 63);
+						} else {
+		dasm_put(Dst, 3594);
+						}
+					}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4281, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_dup)), (unsigned int)((((ptrdiff_t)zend_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+					if (RC_MAY_BE_1(op1_info)) {
+						if (1) {
+		dasm_put(Dst, 2872);
+						}
+					}
+		dasm_put(Dst, 2222);
+				}
+			} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			}
+#line 6590 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL)) {
+		if (op1_info & MAY_BE_ARRAY) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 6594 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 6595 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+			//|	CMP_ZVAL_TYPE op1_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6598 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jg >7
+			dasm_put(Dst, 4312, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_NULL);
+#line 6599 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov T1, Ra(Z_REG(op1_addr)) // save
+			dasm_put(Dst, 4047, (Z_REG(op1_addr)));
+#line 6602 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & MAY_BE_UNDEF) {
+			if (op1_info & MAY_BE_NULL) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 6606 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 6608 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, opline->op1.var
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 607, opline->op1.var);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6610 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 6611 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// ZVAL_ARR(container, zend_new_array(8));
+		//|	EXT_CALL _zend_new_array_0, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_zend_new_array_0));
+				} else {
+				if (IS_SIGNED_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_zend_new_array_0));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_new_array_0)), (unsigned int)((((ptrdiff_t)_zend_new_array_0))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6614 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov Ra(Z_REG(op1_addr)), T1 // restore
+			dasm_put(Dst, 4054, (Z_REG(op1_addr)));
+#line 6616 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_ZVAL_LVAL op1_addr, r0
+			if (Z_MODE(op1_addr) == IS_REG) {
+		dasm_put(Dst, 2202, (Z_REG(op1_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+#line 6618 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO op1_addr, IS_ARRAY_EX
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 6619 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1a, r0
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+#line 6620 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & MAY_BE_ARRAY) {
+			//|	jmp >1
+			//|.code
+			dasm_put(Dst, 3727);
+#line 6623 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 6624 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+		uint32_t var_def_info = zend_array_element_type(op1_def_info, opline->op1_type, 1, 0);
+
+		//|6:
+		dasm_put(Dst, 3345);
+#line 6631 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op2_type == IS_UNUSED) {
+			var_info = MAY_BE_NULL;
+
+			//|	// var_ptr = zend_hash_next_index_insert(Z_ARRVAL_P(container), &EG(uninitialized_zval));
+			//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 6636 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_hash_next_index_insert, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_next_index_insert));
+					} else {
+					if (IS_SIGNED_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_next_index_insert));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_next_index_insert)), (unsigned int)((((ptrdiff_t)zend_hash_next_index_insert))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 6637 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	// if (UNEXPECTED(!var_ptr)) {
+			//|	test r0, r0
+			//|	jz >1
+			//|.cold_code
+			dasm_put(Dst, 4325);
+#line 6641 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	// zend_throw_error(NULL, "Cannot add element to the array as the next element is already occupied");
+			//|	CANNOT_ADD_ELEMENT opline
+			dasm_put(Dst, 63);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+			dasm_put(Dst, 4334);
+				} else {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+			dasm_put(Dst, 4338);
+				}
+#line 6644 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	//ZEND_VM_C_GOTO(assign_dim_op_ret_null);
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 6647 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			var_info = zend_array_element_type(op1_info, opline->op1_type, 0, 0);
+			if (op1_info & (MAY_BE_ARRAY_OF_REF|MAY_BE_OBJECT)) {
+				var_info |= MAY_BE_REF;
+			}
+			if (var_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				var_info |= MAY_BE_RC1;
+			}
+
+			if (dim_type != IS_UNKNOWN
+			 && dim_type != IS_UNDEF
+			 && (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_ARRAY
+			 && (op2_info & (MAY_BE_LONG|MAY_BE_STRING))
+			 && !(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING)))) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+				not_found_exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			}
+
+			if (!zend_jit_fetch_dimension_address_inner(Dst, opline, BP_VAR_RW, op1_info, op2_info, dim_type, NULL, not_found_exit_addr, NULL)) {
+				return 0;
+			}
+
+			//|8:
+			dasm_put(Dst, 4196);
+#line 6670 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (not_found_exit_addr && dim_type != IS_REFERENCE) {
+				//|	IF_NOT_Z_TYPE, r0, dim_type, &not_found_exit_addr
+				dasm_put(Dst, 4404, offsetof(zval, u1.v.type), dim_type, (ptrdiff_t)(not_found_exit_addr));
+#line 6672 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				var_info = (1 << dim_type) | (var_info & ~(MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF));
+			}
+			if (var_info & MAY_BE_REF) {
+				binary_op_type binary_op = get_binary_op(opline->extended_value);
+				//|	IF_NOT_Z_TYPE, r0, IS_REFERENCE, >1
+				//|	GET_Z_PTR FCARG1a, r0
+				//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+				//|	jnz >2
+				//|	lea r0, aword [FCARG1a + offsetof(zend_reference, val)]
+				//|.cold_code
+				dasm_put(Dst, 4412, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, sources.ptr), offsetof(zend_reference, val));
+#line 6682 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|2:
+				//|	LOAD_ZVAL_ADDR FCARG2a, op3_addr
+				dasm_put(Dst, 2222);
+					if (Z_MODE(op3_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op3_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op3_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op3_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op3_addr)))>>32));
+						}
+					} else if (Z_MODE(op3_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op3_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(op3_addr)), Z_OFFSET(op3_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(op3_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 6684 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if X64
+					//|	LOAD_ADDR CARG3, binary_op
+							if (IS_SIGNED_32BIT(binary_op)) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)binary_op));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+							}
+#line 6686 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|	PUSH_ADDR binary_op, r0
+				//|.endif
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 6691 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_assign_op_to_typed_ref, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_op_to_typed_ref)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_op_to_typed_ref));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_assign_op_to_typed_ref)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_op_to_typed_ref));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_op_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_op_to_typed_ref))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 6692 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+				//|	jmp >9
+				//|.code
+				dasm_put(Dst, 4064);
+#line 6697 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 6698 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+		switch (opline->extended_value) {
+			case ZEND_ADD:
+			case ZEND_SUB:
+			case ZEND_MUL:
+			case ZEND_DIV:
+				if (!zend_jit_math_helper(Dst, opline, opline->extended_value, IS_CV, opline->op1, var_addr, var_info, (opline+1)->op1_type, (opline+1)->op1, op3_addr, op1_data_info, 0, var_addr, var_def_info, var_info,
+						1 /* may overflow */, may_throw)) {
+					return 0;
+				}
+				break;
+			case ZEND_BW_OR:
+			case ZEND_BW_AND:
+			case ZEND_BW_XOR:
+			case ZEND_SL:
+			case ZEND_SR:
+			case ZEND_MOD:
+				if (!zend_jit_long_math_helper(Dst, opline, opline->extended_value,
+						IS_CV, opline->op1, var_addr, var_info, NULL,
+						(opline+1)->op1_type, (opline+1)->op1, op3_addr, op1_data_info,
+						op1_data_range,
+						0, var_addr, var_def_info, var_info, may_throw)) {
+					return 0;
+				}
+				break;
+			case ZEND_CONCAT:
+				if (!zend_jit_concat_helper(Dst, opline, IS_CV, opline->op1, var_addr, var_info, (opline+1)->op1_type, (opline+1)->op1, op3_addr, op1_data_info, var_addr,
+						may_throw)) {
+					return 0;
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+		//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+			if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 6736 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+		binary_op_type binary_op;
+
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 6743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 6744 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6747 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6749 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	    if (opline->op2_type == IS_UNUSED) {
+			//|	xor FCARG2a, FCARG2a
+			dasm_put(Dst, 2289);
+#line 6752 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opline->op2_type == IS_CONST && Z_EXTRA_P(RT_CONSTANT(opline, opline->op2)) == ZEND_EXTRA_VALUE) {
+			ZEND_ASSERT(Z_MODE(op2_addr) == IS_CONST_ZVAL);
+			//|	LOAD_ADDR FCARG2a, (Z_ZV(op2_addr) + 1)
+					if (IS_SIGNED_32BIT((Z_ZV(op2_addr) + 1))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)(Z_ZV(op2_addr) + 1)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(Z_ZV(op2_addr) + 1))), (unsigned int)((((ptrdiff_t)(Z_ZV(op2_addr) + 1)))>>32));
+					}
+#line 6755 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6757 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		binary_op = get_binary_op(opline->extended_value);
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, op3_addr
+				if (Z_MODE(op3_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op3_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(op3_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(op3_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op3_addr)))>>32));
+					}
+				} else if (Z_MODE(op3_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op3_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(op3_addr)), Z_OFFSET(op3_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(op3_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6761 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	LOAD_ADDR CARG4, binary_op
+					if (IS_SIGNED_32BIT(binary_op)) {
+			dasm_put(Dst, 4380, ((ptrdiff_t)binary_op));
+					} else {
+			dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+					}
+#line 6762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 8
+			//|	PUSH_ADDR binary_op, r0
+			//|	PUSH_ZVAL_ADDR op3_addr, r0
+		//|.endif
+		//|	EXT_CALL zend_jit_assign_dim_op_helper, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_dim_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_dim_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_dim_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_dim_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_dim_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_assign_dim_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6768 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if not(X64)
+		//|	add r4, 8
+		//|.endif
+
+		//|9:
+		//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, op1_data_info, 0, NULL
+		dasm_put(Dst, 4090);
+			if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_data_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+				if (RC_MAY_BE_1(op1_data_info)) {
+					if (RC_MAY_BE_N(op1_data_info)) {
+						if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_data_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op1_data_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_data_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_data_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 6774 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, NULL
+			if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 6775 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception(Dst);
+		}
+
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			//|	jmp >9 // END
+			//|.code
+			dasm_put(Dst, 4064);
+#line 6782 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|9:
+			dasm_put(Dst, 4090);
+#line 6783 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if ((op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY))
+			&& (!not_found_exit_addr || (var_info & MAY_BE_REF))) {
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 6787 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|9:
+		//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, op1_data_info, 0, opline
+		dasm_put(Dst, 4090);
+			if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_data_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+				if (RC_MAY_BE_1(op1_data_info)) {
+					if (RC_MAY_BE_N(op1_data_info)) {
+						if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_data_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_data_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_data_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_data_info) && ((op1_data_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_data_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_data_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 6789 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+			if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 6790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception(Dst);
+		}
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 6795 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|9:
+		dasm_put(Dst, 4090);
+#line 6796 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_assign_op(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, uint32_t op1_def_info, zend_ssa_range *op1_range, uint32_t op2_info, zend_ssa_range *op2_range, int may_overflow, int may_throw)
+{
+	zend_jit_addr op1_addr, op2_addr;
+
+	ZEND_ASSERT(opline->op1_type == IS_CV && opline->result_type == IS_UNUSED);
+	ZEND_ASSERT(!(op1_info & MAY_BE_UNDEF) && !(op2_info & MAY_BE_UNDEF));
+
+	op1_addr = OP1_ADDR();
+	op2_addr = OP2_ADDR();
+
+	if (op1_info & MAY_BE_REF) {
+		binary_op_type binary_op = get_binary_op(opline->extended_value);
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6814 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_NOT_Z_TYPE, FCARG1a, IS_REFERENCE, >1
+		//|	GET_Z_PTR FCARG1a, FCARG1a
+		//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+		//|	jnz >2
+		//|	add FCARG1a, offsetof(zend_reference, val)
+		//|.cold_code
+		dasm_put(Dst, 4438, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, sources.ptr), offsetof(zend_reference, val));
+#line 6820 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+		dasm_put(Dst, 2222);
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op2_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6822 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+			//|	LOAD_ADDR CARG3, binary_op
+					if (IS_SIGNED_32BIT(binary_op)) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)binary_op));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+					}
+#line 6824 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 12
+			//|	PUSH_ADDR binary_op, r0
+		//|.endif
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 6829 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_jit_assign_op_to_typed_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_op_to_typed_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_op_to_typed_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_op_to_typed_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_op_to_typed_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_op_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_op_to_typed_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 6830 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		zend_jit_check_exception(Dst);
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 6836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 6837 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	int result;
+	switch (opline->extended_value) {
+		case ZEND_ADD:
+		case ZEND_SUB:
+		case ZEND_MUL:
+		case ZEND_DIV:
+			result = zend_jit_math_helper(Dst, opline, opline->extended_value, opline->op1_type, opline->op1, op1_addr, op1_info, opline->op2_type, opline->op2, op2_addr, op2_info, opline->op1.var, op1_addr, op1_def_info, op1_info, may_overflow, may_throw);
+			break;
+		case ZEND_BW_OR:
+		case ZEND_BW_AND:
+		case ZEND_BW_XOR:
+		case ZEND_SL:
+		case ZEND_SR:
+		case ZEND_MOD:
+			result = zend_jit_long_math_helper(Dst, opline, opline->extended_value,
+				opline->op1_type, opline->op1, op1_addr, op1_info, op1_range,
+				opline->op2_type, opline->op2, op2_addr, op2_info, op2_range,
+				opline->op1.var, op1_addr, op1_def_info, op1_info, may_throw);
+			break;
+		case ZEND_CONCAT:
+			result = zend_jit_concat_helper(Dst, opline, opline->op1_type, opline->op1, op1_addr, op1_info, opline->op2_type, opline->op2, op2_addr, op2_info, op1_addr, may_throw);
+			break;
+		default:
+			ZEND_UNREACHABLE();
+	}
+	//|9:
+	dasm_put(Dst, 4090);
+#line 6866 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return result;
+}
+
+static int zend_jit_cmp_long_long(dasm_State    **Dst,
+                                  const zend_op  *opline,
+                                  zend_ssa_range *op1_range,
+                                  zend_jit_addr   op1_addr,
+                                  zend_ssa_range *op2_range,
+                                  zend_jit_addr   op2_addr,
+                                  zend_jit_addr   res_addr,
+                                  zend_uchar      smart_branch_opcode,
+                                  uint32_t        target_label,
+                                  uint32_t        target_label2,
+                                  const void     *exit_addr,
+                                  bool       skip_comparison)
+{
+	bool swap = 0;
+	bool result;
+
+	if (zend_jit_is_constant_cmp_long_long(opline, op1_range, op1_addr, op2_range, op2_addr, &result)) {
+		if (!smart_branch_opcode ||
+		    smart_branch_opcode == ZEND_JMPZ_EX ||
+		    smart_branch_opcode == ZEND_JMPNZ_EX) {
+			//|	SET_ZVAL_TYPE_INFO res_addr, (result ? IS_TRUE : IS_FALSE)
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), (result ? IS_TRUE : IS_FALSE));
+#line 6890 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (smart_branch_opcode && !exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPZ ||
+			    smart_branch_opcode == ZEND_JMPZ_EX) {
+				if (!result) {
+					//| jmp => target_label
+					dasm_put(Dst, 1587,  target_label);
+#line 6896 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (smart_branch_opcode == ZEND_JMPNZ ||
+			           smart_branch_opcode == ZEND_JMPNZ_EX) {
+				if (result) {
+					//| jmp => target_label
+					dasm_put(Dst, 1587,  target_label);
+#line 6901 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				if (!result) {
+					//| jmp => target_label
+					dasm_put(Dst, 1587,  target_label);
+#line 6905 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//| jmp => target_label2
+					dasm_put(Dst, 1587,  target_label2);
+#line 6907 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		}
+		return 1;
+	}
+
+	if (skip_comparison) {
+		if (Z_MODE(op1_addr) != IS_REG &&
+		    (Z_MODE(op2_addr) == IS_REG ||
+		     (Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_MODE(op2_addr) != IS_CONST_ZVAL))) {
+			swap = 1;
+		}
+	} else if (Z_MODE(op1_addr) == IS_REG) {
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL && Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+			//|	test Ra(Z_REG(op1_addr)), Ra(Z_REG(op1_addr))
+			dasm_put(Dst, 3500, (Z_REG(op1_addr)), (Z_REG(op1_addr)));
+#line 6924 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LONG_OP cmp, Z_REG(op1_addr), op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (Z_REG(op1_addr) != ZREG_R0) {
+			dasm_put(Dst, 4464, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (Z_REG(op1_addr)));
+							} else {
+			dasm_put(Dst, 4474, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (Z_REG(op1_addr)));
+							}
+						} else {
+			dasm_put(Dst, 4484, (Z_REG(op1_addr)), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 4492, (Z_REG(op1_addr)), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 4502, (Z_REG(op2_addr)), (Z_REG(op1_addr)));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6926 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (Z_MODE(op2_addr) == IS_REG) {
+		if (Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			//|	test Ra(Z_REG(op2_addr)), Ra(Z_REG(op2_addr))
+			dasm_put(Dst, 3500, (Z_REG(op2_addr)), (Z_REG(op2_addr)));
+#line 6930 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LONG_OP cmp, Z_REG(op2_addr), op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+							if (Z_REG(op2_addr) != ZREG_R0) {
+			dasm_put(Dst, 4464, (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32), (Z_REG(op2_addr)));
+							} else {
+			dasm_put(Dst, 4474, (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32), (Z_REG(op2_addr)));
+							}
+						} else {
+			dasm_put(Dst, 4484, (Z_REG(op2_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 4492, (Z_REG(op2_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			dasm_put(Dst, 4502, (Z_REG(op1_addr)), (Z_REG(op2_addr)));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6932 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		swap = 1;
+	} else if (Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_MODE(op2_addr) != IS_CONST_ZVAL) {
+		//|	LONG_OP_WITH_CONST cmp, op2_addr, Z_LVAL_P(Z_ZV(op1_addr))
+			if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 4510, (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+		dasm_put(Dst, 4522, (Z_REG(op2_addr)), Z_OFFSET(op2_addr), Z_LVAL_P(Z_ZV(op1_addr)));
+					}
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 4464, (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32), (Z_REG(op2_addr)));
+					} else {
+		dasm_put(Dst, 4484, (Z_REG(op2_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+					}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6936 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		swap = 1;
+	} else if (Z_MODE(op2_addr) == IS_CONST_ZVAL && Z_MODE(op1_addr) != IS_CONST_ZVAL) {
+		//|	LONG_OP_WITH_CONST cmp, op1_addr, Z_LVAL_P(Z_ZV(op2_addr))
+			if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 4510, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+		dasm_put(Dst, 4522, (Z_REG(op1_addr)), Z_OFFSET(op1_addr), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+		dasm_put(Dst, 4464, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (Z_REG(op1_addr)));
+					} else {
+		dasm_put(Dst, 4484, (Z_REG(op1_addr)), Z_LVAL_P(Z_ZV(op2_addr)));
+					}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6939 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_ZVAL_LVAL ZREG_R0, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R0), (ZREG_R0));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R0 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R0));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 6941 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL && Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+			//|	test r0, r0
+			dasm_put(Dst, 3565);
+#line 6943 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LONG_OP cmp, ZREG_R0, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+							if (ZREG_R0 != ZREG_R0) {
+			dasm_put(Dst, 4464, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (ZREG_R0));
+							} else {
+			dasm_put(Dst, 4474, (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32), (ZREG_R0));
+							}
+						} else {
+			dasm_put(Dst, 4484, (ZREG_R0), Z_LVAL_P(Z_ZV(op2_addr)));
+						}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 4492, (ZREG_R0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else if (Z_MODE(op2_addr) == IS_REG) {
+			dasm_put(Dst, 4502, (Z_REG(op2_addr)), (ZREG_R0));
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 6945 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ_EX ||
+		    smart_branch_opcode == ZEND_JMPNZ_EX) {
+
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//|	sete al
+					dasm_put(Dst, 4531);
+#line 6958 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+				case ZEND_IS_NOT_IDENTICAL:
+					//|	setne al
+					dasm_put(Dst, 4535);
+#line 6962 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						//|	setg al
+						dasm_put(Dst, 4539);
+#line 6966 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	setl al
+						dasm_put(Dst, 4543);
+#line 6968 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						//|	setge al
+						dasm_put(Dst, 4547);
+#line 6973 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	setle al
+						dasm_put(Dst, 4551);
+#line 6975 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//|	movzx eax, al
+			//|	lea eax, [eax + 2]
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			dasm_put(Dst, 4555, 2);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 6983 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (smart_branch_opcode == ZEND_JMPZ ||
+		    smart_branch_opcode == ZEND_JMPZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					if (exit_addr) {
+						//| jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 6993 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						dasm_put(Dst, 1831,  target_label);
+#line 6995 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7000 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7002 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_IDENTICAL:
+					if (exit_addr) {
+						//| jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 7007 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7009 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						if (exit_addr) {
+							//| jle &exit_addr
+							dasm_put(Dst, 3770, (ptrdiff_t)(exit_addr));
+#line 7015 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jle => target_label
+							dasm_put(Dst, 4574,  target_label);
+#line 7017 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| jge &exit_addr
+							dasm_put(Dst, 4578, (ptrdiff_t)(exit_addr));
+#line 7021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jge => target_label
+							dasm_put(Dst, 4582,  target_label);
+#line 7023 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						if (exit_addr) {
+							//| jl &exit_addr
+							dasm_put(Dst, 4586, (ptrdiff_t)(exit_addr));
+#line 7030 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jl => target_label
+							dasm_put(Dst, 4590,  target_label);
+#line 7032 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| jg &exit_addr
+							dasm_put(Dst, 3774, (ptrdiff_t)(exit_addr));
+#line 7036 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jg => target_label
+							dasm_put(Dst, 4594,  target_label);
+#line 7038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPNZ ||
+		           smart_branch_opcode == ZEND_JMPNZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7053 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7055 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					if (exit_addr) {
+						//| jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 7060 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						dasm_put(Dst, 1831,  target_label);
+#line 7062 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_IDENTICAL:
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7067 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						dasm_put(Dst, 1831,  target_label);
+#line 7069 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						if (exit_addr) {
+							//| jg &exit_addr
+							dasm_put(Dst, 3774, (ptrdiff_t)(exit_addr));
+#line 7075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jg => target_label
+							dasm_put(Dst, 4594,  target_label);
+#line 7077 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| jl &exit_addr
+							dasm_put(Dst, 4586, (ptrdiff_t)(exit_addr));
+#line 7081 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jl => target_label
+							dasm_put(Dst, 4590,  target_label);
+#line 7083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						if (exit_addr) {
+							//| jge &exit_addr
+							dasm_put(Dst, 4578, (ptrdiff_t)(exit_addr));
+#line 7090 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jge => target_label
+							dasm_put(Dst, 4582,  target_label);
+#line 7092 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| jle &exit_addr
+							dasm_put(Dst, 3770, (ptrdiff_t)(exit_addr));
+#line 7096 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jle => target_label
+							dasm_put(Dst, 4574,  target_label);
+#line 7098 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//| jne => target_label
+					dasm_put(Dst, 1831,  target_label);
+#line 7111 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+				case ZEND_IS_NOT_IDENTICAL:
+					//| je => target_label
+					dasm_put(Dst, 4570,  target_label);
+#line 7115 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+				    if (swap) {
+						//| jle => target_label
+						dasm_put(Dst, 4574,  target_label);
+#line 7119 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				    } else {
+						//| jge => target_label
+						dasm_put(Dst, 4582,  target_label);
+#line 7121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						//| jl => target_label
+						dasm_put(Dst, 4590,  target_label);
+#line 7126 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jg => target_label
+						dasm_put(Dst, 4594,  target_label);
+#line 7128 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//| jmp => target_label2
+			dasm_put(Dst, 1587,  target_label2);
+#line 7134 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		switch (opline->opcode) {
+			case ZEND_IS_EQUAL:
+			case ZEND_IS_IDENTICAL:
+			case ZEND_CASE:
+			case ZEND_CASE_STRICT:
+				//|	sete al
+				dasm_put(Dst, 4531);
+#line 7144 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_NOT_EQUAL:
+			case ZEND_IS_NOT_IDENTICAL:
+				//|	setne al
+				dasm_put(Dst, 4535);
+#line 7148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_SMALLER:
+				if (swap) {
+					//|	setg al
+					dasm_put(Dst, 4539);
+#line 7152 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	setl al
+					dasm_put(Dst, 4543);
+#line 7154 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case ZEND_IS_SMALLER_OR_EQUAL:
+				if (swap) {
+					//|	setge al
+					dasm_put(Dst, 4547);
+#line 7159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	setle al
+					dasm_put(Dst, 4551);
+#line 7161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+		//|	movzx eax, al
+		//|	add eax, 2
+		//|	SET_ZVAL_TYPE_INFO res_addr, eax
+		dasm_put(Dst, 4598);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 7169 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_cmp_double_common(dasm_State **Dst, const zend_op *opline, zend_jit_addr res_addr, bool swap, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					if (exit_addr) {
+						//| jne &exit_addr
+						//| jp &exit_addr
+						dasm_put(Dst, 4605, (ptrdiff_t)(exit_addr), (ptrdiff_t)(exit_addr));
+#line 7186 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						//| jp => target_label
+						dasm_put(Dst, 4612,  target_label,  target_label);
+#line 7189 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					//| jp >1
+					dasm_put(Dst, 4619);
+#line 7193 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7195 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7197 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|1:
+					dasm_put(Dst, 63);
+#line 7199 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_IDENTICAL:
+					if (exit_addr) {
+						//| jne &exit_addr
+						//| jp &exit_addr
+						dasm_put(Dst, 4605, (ptrdiff_t)(exit_addr), (ptrdiff_t)(exit_addr));
+#line 7204 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jp >1
+						//| je => target_label
+						//|1:
+						dasm_put(Dst, 4624,  target_label);
+#line 7208 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						if (exit_addr) {
+							//| jbe &exit_addr
+							dasm_put(Dst, 3580, (ptrdiff_t)(exit_addr));
+#line 7214 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jbe => target_label
+							dasm_put(Dst, 4634,  target_label);
+#line 7216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| jae &exit_addr
+							//| jp &exit_addr
+							dasm_put(Dst, 4638, (ptrdiff_t)(exit_addr), (ptrdiff_t)(exit_addr));
+#line 7221 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jae => target_label
+							//| jp => target_label
+							dasm_put(Dst, 4645,  target_label,  target_label);
+#line 7224 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						if (exit_addr) {
+							//| jb &exit_addr
+							dasm_put(Dst, 4652, (ptrdiff_t)(exit_addr));
+#line 7231 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jb => target_label
+							dasm_put(Dst, 4656,  target_label);
+#line 7233 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (exit_addr) {
+							//| ja &exit_addr
+							//| jp &exit_addr
+							dasm_put(Dst, 4660, (ptrdiff_t)(exit_addr), (ptrdiff_t)(exit_addr));
+#line 7238 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| ja => target_label
+							//| jp => target_label
+							dasm_put(Dst, 4667,  target_label,  target_label);
+#line 7241 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//| jp >1
+					dasm_put(Dst, 4619);
+#line 7254 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7256 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7258 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|1:
+					dasm_put(Dst, 63);
+#line 7260 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					if (exit_addr) {
+						//| jne &exit_addr
+						//| jp &exit_addr
+						dasm_put(Dst, 4605, (ptrdiff_t)(exit_addr), (ptrdiff_t)(exit_addr));
+#line 7265 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						//| jp => target_label
+						dasm_put(Dst, 4612,  target_label,  target_label);
+#line 7268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_IDENTICAL:
+					if (exit_addr) {
+						//| jp >1
+						//| je &exit_addr
+						//|1:
+						dasm_put(Dst, 4674, (ptrdiff_t)(exit_addr));
+#line 7275 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						//| jp => target_label
+						dasm_put(Dst, 4612,  target_label,  target_label);
+#line 7278 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						if (exit_addr) {
+							//| ja &exit_addr
+							dasm_put(Dst, 4684, (ptrdiff_t)(exit_addr));
+#line 7284 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| ja => target_label
+							dasm_put(Dst, 4688,  target_label);
+#line 7286 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						//| jp >1
+						dasm_put(Dst, 4619);
+#line 7289 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (exit_addr) {
+							//| jb &exit_addr
+							dasm_put(Dst, 4652, (ptrdiff_t)(exit_addr));
+#line 7291 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jb => target_label
+							dasm_put(Dst, 4656,  target_label);
+#line 7293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|1:
+						dasm_put(Dst, 63);
+#line 7295 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						if (exit_addr) {
+							//| jae &exit_addr
+							dasm_put(Dst, 4692, (ptrdiff_t)(exit_addr));
+#line 7301 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jae => target_label
+							dasm_put(Dst, 4696,  target_label);
+#line 7303 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						//| jp >1
+						dasm_put(Dst, 4619);
+#line 7306 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (exit_addr) {
+							//| jbe &exit_addr
+							dasm_put(Dst, 3580, (ptrdiff_t)(exit_addr));
+#line 7308 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//| jbe => target_label
+							dasm_put(Dst, 4634,  target_label);
+#line 7310 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|1:
+						dasm_put(Dst, 63);
+#line 7312 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//| jne => target_label
+					//| jp => target_label
+					dasm_put(Dst, 4612,  target_label,  target_label);
+#line 7325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+				case ZEND_IS_NOT_IDENTICAL:
+					//| jp => target_label2
+					//| je => target_label
+					dasm_put(Dst, 4700,  target_label2,  target_label);
+#line 7330 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						//| jbe => target_label
+						dasm_put(Dst, 4634,  target_label);
+#line 7334 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jae => target_label
+						//| jp => target_label
+						dasm_put(Dst, 4645,  target_label,  target_label);
+#line 7337 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						//| jb => target_label
+						dasm_put(Dst, 4656,  target_label);
+#line 7342 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| ja => target_label
+						//| jp => target_label
+						dasm_put(Dst, 4667,  target_label,  target_label);
+#line 7345 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//| jmp => target_label2
+			dasm_put(Dst, 1587,  target_label2);
+#line 7351 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (smart_branch_opcode == ZEND_JMPZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7358 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jne => target_label
+					//|	jp => target_label
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					dasm_put(Dst, 4707, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label,  target_label);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7361 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+				case ZEND_IS_NOT_IDENTICAL:
+					//|	jp >1
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+					dasm_put(Dst, 4619);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7366 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	je => target_label
+					//|1:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					dasm_put(Dst, 4722, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7369 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7373 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jbe => target_label
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4736, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7375 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7377 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jae => target_label
+						//|	jp => target_label
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4748, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7380 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7385 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jb => target_label
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4763, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7389 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	ja => target_label
+						//|	jp => target_label
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4775, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  target_label,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 7392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPNZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_IS_IDENTICAL:
+				case ZEND_CASE:
+				case ZEND_CASE_STRICT:
+					//|	jp >1
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					dasm_put(Dst, 4619);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7405 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	je => target_label
+					//|1:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+					dasm_put(Dst, 4722, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE,  target_label);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 7408 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+				case ZEND_IS_NOT_IDENTICAL:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7412 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jne => target_label
+					//|	jp => target_label
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+					dasm_put(Dst, 4707, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE,  target_label,  target_label);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 7415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					if (swap) {
+						//|	seta al
+						//|	movzx eax, al
+						//|	lea eax, [eax + 2]
+						//|	SET_ZVAL_TYPE_INFO res_addr, eax
+						dasm_put(Dst, 4790, 2);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7422 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	ja => target_label
+						dasm_put(Dst, 4800, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info),  target_label);
+#line 7423 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jp >1
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4619);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7426 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jb => target_label
+						//|1:
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						dasm_put(Dst, 4811, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 7429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (swap) {
+						//|	setae al
+						//|	movzx eax, al
+						//|	lea eax, [eax + 2]
+						//|	SET_ZVAL_TYPE_INFO res_addr, eax
+						dasm_put(Dst, 4825, 2);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7437 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jae => target_label
+						dasm_put(Dst, 4835, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info),  target_label);
+#line 7438 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jp >1
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						dasm_put(Dst, 4619);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 7441 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jbe => target_label
+						//|1:
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						dasm_put(Dst, 4846, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE,  target_label);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 7444 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		switch (opline->opcode) {
+			case ZEND_IS_EQUAL:
+			case ZEND_IS_IDENTICAL:
+			case ZEND_CASE:
+			case ZEND_CASE_STRICT:
+				//|	jp >1
+				//|	mov eax, IS_TRUE
+				//|	je >2
+				//|1:
+				//|	mov eax, IS_FALSE
+				//|2:
+				dasm_put(Dst, 4860, IS_TRUE, IS_FALSE);
+#line 7464 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_NOT_EQUAL:
+			case ZEND_IS_NOT_IDENTICAL:
+				//|	jp >1
+				//|	mov eax, IS_FALSE
+				//|	je >2
+				//|1:
+				//|	mov eax, IS_TRUE
+				//|2:
+				dasm_put(Dst, 4860, IS_FALSE, IS_TRUE);
+#line 7473 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_SMALLER:
+				if (swap) {
+					//|	seta al
+					//|	movzx eax, al
+					//|	add eax, 2
+					dasm_put(Dst, 4877);
+#line 7479 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jp >1
+					//|	mov eax, IS_TRUE
+					//|	jb >2
+					//|1:
+					//|	mov eax, IS_FALSE
+					//|2:
+					dasm_put(Dst, 4887, IS_TRUE, IS_FALSE);
+#line 7486 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			case ZEND_IS_SMALLER_OR_EQUAL:
+				if (swap) {
+					//|	setae al
+					//|	movzx eax, al
+					//|	add eax, 2
+					dasm_put(Dst, 4904);
+#line 7493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jp >1
+					//|	mov eax, IS_TRUE
+					//|	jbe >2
+					//|1:
+					//|	mov eax, IS_FALSE
+					//|2:
+					dasm_put(Dst, 4914, IS_TRUE, IS_FALSE);
+#line 7500 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+		//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 7506 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_cmp_long_double(dasm_State **Dst, const zend_op *opline, zend_jit_addr op1_addr, zend_jit_addr op2_addr, zend_jit_addr res_addr, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	zend_reg tmp_reg = ZREG_XMM0;
+
+	//|	DOUBLE_GET_ZVAL_LVAL tmp_reg, op1_addr, ZREG_R0
+		if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+			if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2669, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				} else {
+	dasm_put(Dst, 2681, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				}
+			} else {
+				if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+	dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+				} else {
+	dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op1_addr)));
+				}
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (ZREG_R0));
+				} else {
+	dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (ZREG_R0));
+				}
+			}
+		} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2733, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+	dasm_put(Dst, 2759, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+		} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)));
+			} else {
+	dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)));
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 7516 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	DOUBLE_CMP tmp_reg, op2_addr
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4931, (tmp_reg-ZREG_XMM0), Z_ZV(op2_addr));
+		} else {
+	dasm_put(Dst, 4941, (tmp_reg-ZREG_XMM0), Z_ZV(op2_addr));
+		}
+				} else {
+			if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+	dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op2_addr)));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+			}
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4951, (tmp_reg-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 4959, (tmp_reg-ZREG_XMM0));
+		}
+				}
+		} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4967, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+		} else {
+	dasm_put(Dst, 4979, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+		}
+		} else if (Z_MODE(op2_addr) == IS_REG) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4991, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 5001, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+		}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 7517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_cmp_double_common(Dst, opline, res_addr, 0, smart_branch_opcode, target_label, target_label2, exit_addr);
+}
+
+static int zend_jit_cmp_double_long(dasm_State **Dst, const zend_op *opline, zend_jit_addr op1_addr, zend_jit_addr op2_addr, zend_jit_addr res_addr, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	zend_reg tmp_reg = ZREG_XMM0;
+
+	//|	DOUBLE_GET_ZVAL_LVAL tmp_reg, op2_addr, ZREG_R0
+		if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+			if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2669, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				} else {
+	dasm_put(Dst, 2681, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0));
+				}
+			} else {
+				if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+	dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+				} else {
+	dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op2_addr)));
+				}
+				if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (ZREG_R0));
+				} else {
+	dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (ZREG_R0));
+				}
+			}
+		} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2733, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else {
+	dasm_put(Dst, 2759, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			}
+		} else if (Z_MODE(op2_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+	dasm_put(Dst, 2690, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+			} else {
+	dasm_put(Dst, 2714, (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)));
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 7526 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	DOUBLE_CMP tmp_reg, op1_addr
+		if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4931, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+		} else {
+	dasm_put(Dst, 4941, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+		}
+				} else {
+			if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+	dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+			}
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4951, (tmp_reg-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 4959, (tmp_reg-ZREG_XMM0));
+		}
+				}
+		} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4967, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+		} else {
+	dasm_put(Dst, 4979, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+		}
+		} else if (Z_MODE(op1_addr) == IS_REG) {
+		if (CAN_USE_AVX()) {
+	dasm_put(Dst, 4991, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+		} else {
+	dasm_put(Dst, 5001, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+		}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+#line 7527 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return zend_jit_cmp_double_common(Dst, opline, res_addr, /* swap */ 1, smart_branch_opcode, target_label, target_label2, exit_addr);
+}
+
+static int zend_jit_cmp_double_double(dasm_State **Dst, const zend_op *opline, zend_jit_addr op1_addr, zend_jit_addr op2_addr, zend_jit_addr res_addr, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	bool swap = 0;
+
+	if (Z_MODE(op1_addr) == IS_REG) {
+		//|	DOUBLE_CMP Z_REG(op1_addr), op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4931, (Z_REG(op1_addr)-ZREG_XMM0), Z_ZV(op2_addr));
+			} else {
+		dasm_put(Dst, 4941, (Z_REG(op1_addr)-ZREG_XMM0), Z_ZV(op2_addr));
+			}
+					} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4951, (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 4959, (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4967, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else {
+		dasm_put(Dst, 4979, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			}
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4991, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 5001, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+			}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 7537 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (Z_MODE(op2_addr) == IS_REG) {
+		//|	DOUBLE_CMP Z_REG(op2_addr), op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4931, (Z_REG(op2_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 4941, (Z_REG(op2_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+					} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4951, (Z_REG(op2_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 4959, (Z_REG(op2_addr)-ZREG_XMM0));
+			}
+					}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4967, (Z_REG(op2_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 4979, (Z_REG(op2_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4991, (Z_REG(op2_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 5001, (Z_REG(op2_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 7539 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		swap = 1;
+	} else {
+		zend_reg tmp_reg = ZREG_XMM0;
+
+		//|	DOUBLE_GET_ZVAL_DVAL tmp_reg, op1_addr
+			if (Z_MODE(op1_addr) != IS_REG || tmp_reg != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (tmp_reg-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (tmp_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (tmp_reg-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (tmp_reg-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+#line 7544 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	DOUBLE_CMP tmp_reg, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4931, (tmp_reg-ZREG_XMM0), Z_ZV(op2_addr));
+			} else {
+		dasm_put(Dst, 4941, (tmp_reg-ZREG_XMM0), Z_ZV(op2_addr));
+			}
+					} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4951, (tmp_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 4959, (tmp_reg-ZREG_XMM0));
+			}
+					}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4967, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			} else {
+		dasm_put(Dst, 4979, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+			}
+			} else if (Z_MODE(op2_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4991, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 5001, (tmp_reg-ZREG_XMM0), (Z_REG(op2_addr)-ZREG_XMM0));
+			}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 7545 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return zend_jit_cmp_double_common(Dst, opline, res_addr, swap, smart_branch_opcode, target_label, target_label2, exit_addr);
+}
+
+static int zend_jit_cmp_slow(dasm_State **Dst, const zend_op *opline, zend_jit_addr res_addr, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	//|	test, eax, eax
+	dasm_put(Dst, 3566);
+#line 7553 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ_EX ||
+		    smart_branch_opcode == ZEND_JMPNZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_CASE:
+					//|	sete al
+					dasm_put(Dst, 4531);
+#line 7560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					//|	setne al
+					dasm_put(Dst, 4535);
+#line 7563 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					//|	setl al
+					dasm_put(Dst, 4543);
+#line 7566 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					//|	setle al
+					dasm_put(Dst, 4551);
+#line 7569 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//|	movzx eax, al
+			//|	lea eax, [eax + 2]
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			dasm_put(Dst, 4555, 2);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 7576 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (smart_branch_opcode == ZEND_JMPZ ||
+		    smart_branch_opcode == ZEND_JMPZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_CASE:
+					if (exit_addr) {
+						//| jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 7584 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						dasm_put(Dst, 1831,  target_label);
+#line 7586 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7593 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (exit_addr) {
+						//| jge &exit_addr
+						dasm_put(Dst, 4578, (ptrdiff_t)(exit_addr));
+#line 7598 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jge => target_label
+						dasm_put(Dst, 4582,  target_label);
+#line 7600 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (exit_addr) {
+						//| jg &exit_addr
+						dasm_put(Dst, 3774, (ptrdiff_t)(exit_addr));
+#line 7605 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jg => target_label
+						dasm_put(Dst, 4594,  target_label);
+#line 7607 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPNZ ||
+		           smart_branch_opcode == ZEND_JMPNZ_EX) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_CASE:
+					if (exit_addr) {
+						//| je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 7619 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| je => target_label
+						dasm_put(Dst, 4570,  target_label);
+#line 7621 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					if (exit_addr) {
+						//| jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 7626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jne => target_label
+						dasm_put(Dst, 1831,  target_label);
+#line 7628 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER:
+					if (exit_addr) {
+						//| jl &exit_addr
+						dasm_put(Dst, 4586, (ptrdiff_t)(exit_addr));
+#line 7633 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jl => target_label
+						dasm_put(Dst, 4590,  target_label);
+#line 7635 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					if (exit_addr) {
+						//| jle &exit_addr
+						dasm_put(Dst, 3770, (ptrdiff_t)(exit_addr));
+#line 7640 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//| jle => target_label
+						dasm_put(Dst, 4574,  target_label);
+#line 7642 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			switch (opline->opcode) {
+				case ZEND_IS_EQUAL:
+				case ZEND_CASE:
+					//| jne => target_label
+					dasm_put(Dst, 1831,  target_label);
+#line 7652 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_NOT_EQUAL:
+					//| je => target_label
+					dasm_put(Dst, 4570,  target_label);
+#line 7655 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER:
+					//| jge => target_label
+					dasm_put(Dst, 4582,  target_label);
+#line 7658 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_IS_SMALLER_OR_EQUAL:
+					//| jg => target_label
+					dasm_put(Dst, 4594,  target_label);
+#line 7661 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//| jmp => target_label2
+			dasm_put(Dst, 1587,  target_label2);
+#line 7666 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		switch (opline->opcode) {
+			case ZEND_IS_EQUAL:
+			case ZEND_CASE:
+				//|	sete al
+				dasm_put(Dst, 4531);
+#line 7674 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_NOT_EQUAL:
+				//|	setne al
+				dasm_put(Dst, 4535);
+#line 7677 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_SMALLER:
+				//|	setl al
+				dasm_put(Dst, 4543);
+#line 7680 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_IS_SMALLER_OR_EQUAL:
+				//|	setle al
+				dasm_put(Dst, 4551);
+#line 7683 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+		//|	movzx eax, al
+		//|	add eax, 2
+		//|	SET_ZVAL_TYPE_INFO res_addr, eax
+		dasm_put(Dst, 4598);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 7690 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_cmp(dasm_State    **Dst,
+                        const zend_op  *opline,
+                        uint32_t        op1_info,
+                        zend_ssa_range *op1_range,
+                        zend_jit_addr   op1_addr,
+                        uint32_t        op2_info,
+                        zend_ssa_range *op2_range,
+                        zend_jit_addr   op2_addr,
+                        zend_jit_addr   res_addr,
+                        int             may_throw,
+                        zend_uchar      smart_branch_opcode,
+                        uint32_t        target_label,
+                        uint32_t        target_label2,
+                        const void     *exit_addr,
+                        bool       skip_comparison)
+{
+	bool same_ops = (opline->op1_type == opline->op2_type) && (opline->op1.var == opline->op2.var);
+	bool has_slow;
+
+	has_slow =
+		(op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		(op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		((op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) ||
+		 (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))));
+
+	if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_LONG)) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) {
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >4
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5011, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7724 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >9
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5024, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7726 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (!same_ops && (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >3
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 7731 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 5037, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7732 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|3:
+				dasm_put(Dst, 496);
+#line 7733 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >9
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7735 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!zend_jit_cmp_long_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+					return 0;
+				}
+				//|	jmp >6
+				//|.code
+				dasm_put(Dst, 5051);
+#line 7741 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >9
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (!zend_jit_cmp_long_long(Dst, opline, op1_range, op1_addr, op2_range, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr, skip_comparison)) {
+			return 0;
+		}
+		if (op1_info & MAY_BE_DOUBLE) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 7750 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|4:
+			dasm_put(Dst, 538);
+#line 7751 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >9
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5024, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7753 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (op2_info & MAY_BE_DOUBLE) {
+				if (!same_ops && (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_DOUBLE))) {
+					if (!same_ops) {
+						//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >5
+							ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5057, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7758 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >9
+							ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7760 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!zend_jit_cmp_double_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+					return 0;
+				}
+				//|	jmp >6
+				dasm_put(Dst, 5070);
+#line 7766 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!same_ops) {
+				//|5:
+				dasm_put(Dst, 278);
+#line 7769 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >9
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7771 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (!zend_jit_cmp_double_long(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+					return 0;
+				}
+				//|	jmp >6
+				dasm_put(Dst, 5070);
+#line 7776 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 7778 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if ((op1_info & MAY_BE_DOUBLE) &&
+	           !(op1_info & MAY_BE_LONG) &&
+	           (op2_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_DOUBLE)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >9
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5024, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7784 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op2_info & MAY_BE_DOUBLE) {
+			if (!same_ops && (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_DOUBLE))) {
+				if (!same_ops && (op2_info & MAY_BE_LONG)) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >3
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3294, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7789 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >9
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7791 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (!zend_jit_cmp_double_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+				return 0;
+			}
+		}
+		if (!same_ops && (op2_info & MAY_BE_LONG)) {
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 7800 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		    //|3:
+		    dasm_put(Dst, 496);
+#line 7802 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_DOUBLE|MAY_BE_LONG))) {
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_LONG, >9
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7804 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!zend_jit_cmp_double_long(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+				return 0;
+			}
+			if (op2_info & MAY_BE_DOUBLE) {
+				//|	jmp >6
+				//|.code
+				dasm_put(Dst, 5051);
+#line 7811 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if ((op2_info & MAY_BE_DOUBLE) &&
+	           !(op2_info & MAY_BE_LONG) &&
+	           (op1_info & (MAY_BE_LONG|MAY_BE_DOUBLE))) {
+		if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_DOUBLE)) {
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_DOUBLE, >9
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5024, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7818 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & MAY_BE_DOUBLE) {
+			if (!same_ops && (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_DOUBLE))) {
+				if (!same_ops && (op1_info & MAY_BE_LONG)) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >3
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7823 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_DOUBLE, >9
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5024, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_DOUBLE);
+#line 7825 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (!zend_jit_cmp_double_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+				return 0;
+			}
+		}
+		if (!same_ops && (op1_info & MAY_BE_LONG)) {
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 7834 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|3:
+			dasm_put(Dst, 496);
+#line 7836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_DOUBLE|MAY_BE_LONG))) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >9
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5024, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 7838 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (!zend_jit_cmp_long_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+				return 0;
+			}
+			if (op1_info & MAY_BE_DOUBLE) {
+				//|	jmp >6
+				//|.code
+				dasm_put(Dst, 5051);
+#line 7845 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if (has_slow ||
+	    (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) ||
+	    (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+		if (has_slow) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 7854 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|9:
+			dasm_put(Dst, 4090);
+#line 7855 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 7857 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(op1_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+			if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+				return 0;
+			}
+			op1_addr = real_addr;
+		}
+		if (Z_MODE(op2_addr) == IS_REG) {
+			zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var);
+			if (!zend_jit_spill_store(Dst, op2_addr, real_addr, op2_info, 1)) {
+				return 0;
+			}
+			op2_addr = real_addr;
+		}
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 7872 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op1_type == IS_CV && (op1_info & MAY_BE_UNDEF)) {
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_UNDEF, >1
+			//|	mov FCARG1a, opline->op1.var
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 5075, offsetof(zval, u1.v.type), IS_UNDEF, opline->op1.var);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 7876 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	LOAD_ADDR_ZTS FCARG1a, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 607, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 7877 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 7878 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->op2_type == IS_CV && (op2_info & MAY_BE_UNDEF)) {
+			//|	IF_NOT_ZVAL_TYPE op2_addr, IS_UNDEF, >1
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 7881 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov T1, FCARG1a // save
+			//|	mov FCARG1a, opline->op2.var
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 5088, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_UNDEF, opline->op2.var);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 7884 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, T1 // restore
+			//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+			dasm_put(Dst, 3888);
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 7886 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >2
+			//|1:
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+			dasm_put(Dst, 5109);
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 7889 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 7890 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 7892 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EXT_CALL zend_compare, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_compare)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_compare));
+				} else {
+				if (IS_SIGNED_32BIT(zend_compare)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_compare));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_compare)), (unsigned int)((((ptrdiff_t)zend_compare))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 7894 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((opline->opcode != ZEND_CASE &&
+		     (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+		     (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) ||
+		    ((opline->op2_type & (IS_VAR|IS_TMP_VAR)) &&
+		     (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)))) {
+			//|	mov dword T1, eax // save
+			dasm_put(Dst, 3383);
+#line 7900 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode != ZEND_CASE) {
+				//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, NULL
+					if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+					if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (0) {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+						if (RC_MAY_BE_1(op1_info)) {
+							if (RC_MAY_BE_N(op1_info)) {
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (NULL && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (NULL == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(NULL)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (NULL) {
+					if (NULL == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(NULL)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (NULL) {
+					if (NULL == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(NULL)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((op1_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+					}
+#line 7902 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, NULL
+				if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+					if (RC_MAY_BE_1(op2_info)) {
+						if (RC_MAY_BE_N(op2_info)) {
+							if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (NULL && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op2_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 7904 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (may_throw) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			}
+			//|	mov eax, dword T1 // restore
+			dasm_put(Dst, 3487);
+#line 7908 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (may_throw) {
+#if ZTS
+			//|	mov dword T1, eax // save
+			dasm_put(Dst, 3383);
+#line 7911 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+			if ((sizeof(void*) == 8 && !IS_SIGNED_32BIT(&EG(exception)))) {
+				//|	mov dword T1, eax // save
+				dasm_put(Dst, 3383);
+#line 7914 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+#endif
+			zend_jit_check_exception_undef_result(Dst, opline);
+#if ZTS
+			//|	mov eax, dword T1 // restore
+			dasm_put(Dst, 3487);
+#line 7919 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+			if ((sizeof(void*) == 8 && !IS_SIGNED_32BIT(&EG(exception)))) {
+				//|	mov eax, dword T1 // restore
+				dasm_put(Dst, 3487);
+#line 7922 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+#endif
+		}
+		if (!zend_jit_cmp_slow(Dst, opline, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+			return 0;
+		}
+		if (has_slow) {
+			//|	jmp >6
+			//|.code
+			dasm_put(Dst, 5051);
+#line 7931 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	//|6:
+	dasm_put(Dst, 3345);
+#line 7935 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_identical(dasm_State    **Dst,
+                              const zend_op  *opline,
+                              uint32_t        op1_info,
+                              zend_ssa_range *op1_range,
+                              zend_jit_addr   op1_addr,
+                              uint32_t        op2_info,
+                              zend_ssa_range *op2_range,
+                              zend_jit_addr   op2_addr,
+                              zend_jit_addr   res_addr,
+                              int             may_throw,
+                              zend_uchar      smart_branch_opcode,
+                              uint32_t        target_label,
+                              uint32_t        target_label2,
+                              const void     *exit_addr,
+                              bool       skip_comparison)
+{
+	uint32_t identical_label = (uint32_t)-1;
+	uint32_t not_identical_label = (uint32_t)-1;
+
+	if (smart_branch_opcode && !exit_addr) {
+		if (opline->opcode != ZEND_IS_NOT_IDENTICAL) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				not_identical_label = target_label;
+			} else if (smart_branch_opcode == ZEND_JMPNZ) {
+				identical_label = target_label;
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				not_identical_label = target_label;
+				identical_label = target_label2;
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				identical_label = target_label;
+			} else if (smart_branch_opcode == ZEND_JMPNZ) {
+				not_identical_label = target_label;
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				identical_label = target_label;
+				not_identical_label = target_label2;
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		}
+	}
+
+	if ((op1_info & (MAY_BE_REF|MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_LONG &&
+	    (op2_info & (MAY_BE_REF|MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_LONG) {
+		if (!zend_jit_cmp_long_long(Dst, opline, op1_range, op1_addr, op2_range, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr, skip_comparison)) {
+			return 0;
+		}
+		return 1;
+	} else if ((op1_info & (MAY_BE_REF|MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_DOUBLE &&
+	           (op2_info & (MAY_BE_REF|MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_DOUBLE) {
+		if (!zend_jit_cmp_double_double(Dst, opline, op1_addr, op2_addr, res_addr, smart_branch_opcode, target_label, target_label2, exit_addr)) {
+			return 0;
+		}
+		return 1;
+	}
+
+	if ((op1_info & MAY_BE_UNDEF) && (op2_info & MAY_BE_UNDEF)) {
+		op1_info |= MAY_BE_NULL;
+		op2_info |= MAY_BE_NULL;
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8002 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_Z_TYPE FCARG1a, IS_UNDEF, >1
+		//|.cold_code
+		dasm_put(Dst, 5116, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 8004 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 63);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 8007 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1d, opline->op1.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 2237, opline->op1.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8009 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception_undef_result(Dst, opline);
+		}
+		//|	LOAD_ADDR_ZTS FCARG1a, executor_globals, uninitialized_zval
+				if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+		dasm_put(Dst, 607, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+				}
+#line 8013 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 3727);
+#line 8015 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+		dasm_put(Dst, 63);
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op2_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8017 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_Z_TYPE FCARG2a, IS_UNDEF, >1
+		//|.cold_code
+		dasm_put(Dst, 5126, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 8019 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 63);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 8022 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov aword T1, FCARG1a // save
+		//|	mov FCARG1d, opline->op2.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 5136, opline->op2.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8025 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception_undef_result(Dst, opline);
+		}
+		//|	mov FCARG1a, aword T1 // restore
+		//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+		dasm_put(Dst, 3888);
+				if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+				}
+#line 8030 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 3727);
+#line 8032 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 8033 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (op1_info & MAY_BE_UNDEF) {
+		op1_info |= MAY_BE_NULL;
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8036 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_Z_TYPE FCARG1a, IS_UNDEF, >1
+		//|.cold_code
+		dasm_put(Dst, 5116, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 8038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 63);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 8041 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1d, opline->op1.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 2237, opline->op1.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8043 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception_undef_result(Dst, opline);
+		}
+		//|	LOAD_ADDR_ZTS FCARG1a, executor_globals, uninitialized_zval
+				if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+		dasm_put(Dst, 607, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+				}
+#line 8047 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 3727);
+#line 8049 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 8050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op2_type != IS_CONST) {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8052 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (op2_info & MAY_BE_UNDEF) {
+		op2_info |= MAY_BE_NULL;
+		//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+			if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+				}
+			} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op2_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8056 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_Z_TYPE FCARG2a, IS_UNDEF, >1
+		//|.cold_code
+		dasm_put(Dst, 5126, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 8058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 63);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 8061 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1d, opline->op2.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 2237, opline->op2.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8063 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			zend_jit_check_exception_undef_result(Dst, opline);
+		}
+		//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+				if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+				}
+#line 8067 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 3727);
+#line 8069 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 8070 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op1_type != IS_CONST) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8072 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if ((op1_info & op2_info & MAY_BE_ANY) != 0) {
+		if (opline->op1_type != IS_CONST) {
+			if (Z_MODE(op1_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+				if (!zend_jit_spill_store(Dst, op1_addr, real_addr, op1_info, 1)) {
+					return 0;
+				}
+				op1_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->op2_type != IS_CONST) {
+			if (Z_MODE(op2_addr) == IS_REG) {
+				zend_jit_addr real_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var);
+				if (!zend_jit_spill_store(Dst, op2_addr, real_addr, op2_info, 1)) {
+					return 0;
+				}
+				op2_addr = real_addr;
+			}
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8093 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if ((op1_info & op2_info & MAY_BE_ANY) == 0) {
+		if ((opline->opcode != ZEND_CASE_STRICT &&
+		     (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+		     (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) ||
+		    ((opline->op2_type & (IS_VAR|IS_TMP_VAR)) &&
+		     (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)))) {
+			if (opline->opcode != ZEND_CASE_STRICT) {
+				//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+					if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+					if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (1) {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+						if (RC_MAY_BE_1(op1_info)) {
+							if (RC_MAY_BE_N(op1_info)) {
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((op1_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+					}
+#line 8104 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	FREE_OP opline->op2_type, opline->op2, op2_info, 1, opline
+				if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+					if (RC_MAY_BE_1(op2_info)) {
+						if (RC_MAY_BE_N(op2_info)) {
+							if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op2_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 8106 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (smart_branch_opcode) {
+			if (may_throw) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			}
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8114 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (not_identical_label != (uint32_t)-1) {
+				//|	jmp =>not_identical_label
+				dasm_put(Dst, 1587, not_identical_label);
+#line 8117 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_FALSE : IS_TRUE)
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_FALSE : IS_TRUE));
+#line 8120 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (may_throw) {
+				zend_jit_check_exception(Dst);
+			}
+		}
+		return 1;
+	}
+
+	if (opline->op1_type & (IS_CV|IS_VAR)) {
+		//|	ZVAL_DEREF FCARG1a, op1_info
+			if (op1_info & MAY_BE_REF) {
+		dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 8129 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline->op2_type & (IS_CV|IS_VAR)) {
+		//|	ZVAL_DEREF FCARG2a, op2_info
+			if (op2_info & MAY_BE_REF) {
+		dasm_put(Dst, 5161, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 8132 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (has_concrete_type(op1_info)
+	 && has_concrete_type(op2_info)
+	 && concrete_type(op1_info) == concrete_type(op2_info)
+	 && concrete_type(op1_info) <= IS_TRUE) {
+		if (smart_branch_opcode) {
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8142 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (identical_label != (uint32_t)-1) {
+				//|	jmp =>identical_label
+				dasm_put(Dst, 1587, identical_label);
+#line 8145 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_TRUE : IS_FALSE)
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_TRUE : IS_FALSE));
+#line 8148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+		if (zend_is_identical(Z_ZV(op1_addr), Z_ZV(op2_addr))) {
+			if (smart_branch_opcode) {
+				if (exit_addr) {
+					if (smart_branch_opcode == ZEND_JMPNZ) {
+						//|	jmp &exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8155 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (identical_label != (uint32_t)-1) {
+					//|	jmp =>identical_label
+					dasm_put(Dst, 1587, identical_label);
+#line 8158 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	SET_ZVAL_TYPE_INFO res_addr, (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_TRUE : IS_FALSE)
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_TRUE : IS_FALSE));
+#line 8161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (smart_branch_opcode) {
+				if (exit_addr) {
+					if (smart_branch_opcode == ZEND_JMPZ) {
+						//|	jmp &exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8167 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (not_identical_label != (uint32_t)-1) {
+					//|	jmp =>not_identical_label
+					dasm_put(Dst, 1587, not_identical_label);
+#line 8170 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	SET_ZVAL_TYPE_INFO res_addr, (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_FALSE : IS_TRUE)
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), (opline->opcode != ZEND_IS_NOT_IDENTICAL ? IS_FALSE : IS_TRUE));
+#line 8173 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if (Z_MODE(op1_addr) == IS_CONST_ZVAL && Z_TYPE_P(Z_ZV(op1_addr)) <= IS_TRUE) {
+		zval *val = Z_ZV(op1_addr);
+
+		//|	cmp byte [FCARG2a + offsetof(zval, u1.v.type)], Z_TYPE_P(val)
+		dasm_put(Dst, 5179, offsetof(zval, u1.v.type), Z_TYPE_P(val));
+#line 8179 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (smart_branch_opcode) {
+			if (opline->op2_type == IS_VAR && (op2_info & MAY_BE_REF)) {
+				//|	jne >8
+				//|	FREE_OP opline->op2_type, opline->op2, op2_info, 1, opline
+				dasm_put(Dst, 3636);
+					if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+					if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (1) {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+						if (RC_MAY_BE_1(op2_info)) {
+							if (RC_MAY_BE_N(op2_info)) {
+								if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((op2_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (1 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+					}
+#line 8183 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (may_throw) {
+					zend_jit_check_exception_undef_result(Dst, opline);
+				}
+				if (exit_addr && smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8188 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (identical_label != (uint32_t)-1) {
+					//|	jmp =>identical_label
+					dasm_put(Dst, 1587, identical_label);
+#line 8190 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 8192 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|8:
+				dasm_put(Dst, 4196);
+#line 8194 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (exit_addr && smart_branch_opcode == ZEND_JMPNZ) {
+				//|	je &exit_addr
+				dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8196 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (identical_label != (uint32_t)-1) {
+				//|	je =>identical_label
+				dasm_put(Dst, 4570, identical_label);
+#line 8198 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	je >9
+				dasm_put(Dst, 3622);
+#line 8200 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (opline->opcode != ZEND_IS_NOT_IDENTICAL) {
+				//|	sete al
+				dasm_put(Dst, 4531);
+#line 8204 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	setne al
+				dasm_put(Dst, 4535);
+#line 8206 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	movzx eax, al
+			//|	lea eax, [eax + 2]
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			dasm_put(Dst, 4555, 2);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8210 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if ((opline->op2_type & (IS_VAR|IS_TMP_VAR)) &&
+		    (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) {
+			//|	FREE_OP opline->op2_type, opline->op2, op2_info, 1, opline
+				if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+					if (RC_MAY_BE_1(op2_info)) {
+						if (RC_MAY_BE_N(op2_info)) {
+							if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op2_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 8214 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (may_throw) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			}
+		}
+		if (exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				//|	jmp &exit_addr
+				dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8221 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (smart_branch_opcode && not_identical_label != (uint32_t)-1) {
+			//|	jmp =>not_identical_label
+			dasm_put(Dst, 1587, not_identical_label);
+#line 8224 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (Z_MODE(op2_addr) == IS_CONST_ZVAL && Z_TYPE_P(Z_ZV(op2_addr)) <= IS_TRUE) {
+		zval *val = Z_ZV(op2_addr);
+
+		//|	cmp byte [FCARG1a + offsetof(zval, u1.v.type)], Z_TYPE_P(val)
+		dasm_put(Dst, 5184, offsetof(zval, u1.v.type), Z_TYPE_P(val));
+#line 8229 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (smart_branch_opcode) {
+			if (opline->opcode != ZEND_CASE_STRICT
+			 && opline->op1_type == IS_VAR && (op1_info & MAY_BE_REF)) {
+				//|	jne >8
+				//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+				dasm_put(Dst, 3636);
+					if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+					if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (1) {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+						if (RC_MAY_BE_1(op1_info)) {
+							if (RC_MAY_BE_N(op1_info)) {
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((op1_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+					}
+#line 8234 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (may_throw) {
+					zend_jit_check_exception_undef_result(Dst, opline);
+				}
+				if (exit_addr && smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8239 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (identical_label != (uint32_t)-1) {
+					//|	jmp =>identical_label
+					dasm_put(Dst, 1587, identical_label);
+#line 8241 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 8243 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|8:
+				dasm_put(Dst, 4196);
+#line 8245 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (exit_addr && smart_branch_opcode == ZEND_JMPNZ) {
+				//|	je &exit_addr
+				dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8247 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (identical_label != (uint32_t)-1) {
+				//|	je =>identical_label
+				dasm_put(Dst, 4570, identical_label);
+#line 8249 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	je >9
+				dasm_put(Dst, 3622);
+#line 8251 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (opline->opcode != ZEND_IS_NOT_IDENTICAL) {
+				//|	sete al
+				dasm_put(Dst, 4531);
+#line 8255 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	setne al
+				dasm_put(Dst, 4535);
+#line 8257 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	movzx eax, al
+			//|	lea eax, [eax + 2]
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			dasm_put(Dst, 4555, 2);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8261 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->opcode != ZEND_CASE_STRICT
+		 && (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+		    (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) {
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 8266 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (may_throw) {
+				zend_jit_check_exception_undef_result(Dst, opline);
+			}
+		}
+		if (smart_branch_opcode) {
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8274 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (not_identical_label != (uint32_t)-1) {
+				//|	jmp =>not_identical_label
+				dasm_put(Dst, 1587, not_identical_label);
+#line 8277 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		if (opline->op1_type == IS_CONST) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8282 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->op2_type == IS_CONST) {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8285 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EXT_CALL zend_is_identical, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_is_identical)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_is_identical));
+				} else {
+				if (IS_SIGNED_32BIT(zend_is_identical)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_is_identical));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_is_identical)), (unsigned int)((((ptrdiff_t)zend_is_identical))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8287 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if ((opline->opcode != ZEND_CASE_STRICT &&
+			     (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+			     (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) ||
+			    ((opline->op2_type & (IS_VAR|IS_TMP_VAR)) &&
+			     (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)))) {
+				//|	mov aword T1, r0 // save
+				dasm_put(Dst, 3382);
+#line 8293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (opline->opcode != ZEND_CASE_STRICT) {
+					//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+						if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+						if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+							if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+								if (1) {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					dasm_put(Dst, 63);
+								} else {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+								}
+							}
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+							if (RC_MAY_BE_1(op1_info)) {
+								if (RC_MAY_BE_N(op1_info)) {
+									if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 472);
+									} else {
+					dasm_put(Dst, 477);
+									}
+								}
+						do {
+							if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+								zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+								if (type == IS_STRING && !ZEND_DEBUG) {
+							if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+							} else {
+							if (IS_SIGNED_32BIT(_efree)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								} else if (type == IS_ARRAY) {
+									if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+										if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+										}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+							} else {
+							if (IS_SIGNED_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									} else {
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									}
+									break;
+								} else if (type == IS_OBJECT) {
+									if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+									}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+							} else {
+							if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								}
+							}
+							if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+							}
+							if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+							} else {
+							if (IS_SIGNED_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+						} while(0);
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 491);
+								}
+					dasm_put(Dst, 496);
+							}
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+								if ((op1_info) & MAY_BE_REF) {
+									zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+								}
+					dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+							if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+							} else {
+							if (IS_SIGNED_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+							}
+							if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+					dasm_put(Dst, 532);
+							}
+					dasm_put(Dst, 538);
+						}
+						}
+#line 8295 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	FREE_OP opline->op2_type, opline->op2, op2_info, 1, opline
+					if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+					if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (1) {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+						if (RC_MAY_BE_1(op2_info)) {
+							if (RC_MAY_BE_N(op2_info)) {
+								if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((op2_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (1 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+					}
+#line 8297 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (may_throw) {
+					zend_jit_check_exception_undef_result(Dst, opline);
+				}
+				//|	mov r0, aword T1 // restore
+				dasm_put(Dst, 3486);
+#line 8301 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		if (smart_branch_opcode) {
+			//|	test al, al
+			dasm_put(Dst, 5189);
+#line 8304 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jnz &exit_addr
+					dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8307 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jz &exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8309 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (not_identical_label != (uint32_t)-1) {
+				//|	jz =>not_identical_label
+				dasm_put(Dst, 4570, not_identical_label);
+#line 8312 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (identical_label != (uint32_t)-1) {
+					//|	jmp =>identical_label
+					dasm_put(Dst, 1587, identical_label);
+#line 8314 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (identical_label != (uint32_t)-1) {
+				//|	jnz =>identical_label
+				dasm_put(Dst, 1831, identical_label);
+#line 8317 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	movzx eax, al
+			dasm_put(Dst, 5192);
+#line 8320 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode != ZEND_IS_NOT_IDENTICAL) {
+				//|	lea eax, [eax + 2]
+				dasm_put(Dst, 4558, 2);
+#line 8322 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	neg eax
+				//|	lea eax, [eax + 3]
+				dasm_put(Dst, 5196, 3);
+#line 8325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8327 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 8331 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (may_throw) {
+		zend_jit_check_exception(Dst);
+	}
+	return 1;
+}
+
+static int zend_jit_bool_jmpznz(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, zend_jit_addr res_addr, uint32_t target_label, uint32_t target_label2, int may_throw, zend_uchar branch_opcode, const void *exit_addr)
+{
+	uint32_t true_label = -1;
+	uint32_t false_label = -1;
+	bool set_bool = 0;
+	bool set_bool_not = 0;
+	bool set_delayed = 0;
+	bool jmp_done = 0;
+
+	if (branch_opcode == ZEND_BOOL) {
+		set_bool = 1;
+	} else if (branch_opcode == ZEND_BOOL_NOT) {
+		set_bool = 1;
+		set_bool_not = 1;
+	} else if (branch_opcode == ZEND_JMPZ) {
+		false_label = target_label;
+	} else if (branch_opcode == ZEND_JMPNZ) {
+		true_label = target_label;
+	} else if (branch_opcode == ZEND_JMPZNZ) {
+		true_label = target_label2;
+		false_label = target_label;
+	} else if (branch_opcode == ZEND_JMPZ_EX) {
+		set_bool = 1;
+		false_label = target_label;
+	} else if (branch_opcode == ZEND_JMPNZ_EX) {
+		set_bool = 1;
+		true_label = target_label;
+	} else {
+		ZEND_UNREACHABLE();
+	}
+
+	if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+		if (zend_is_true(Z_ZV(op1_addr))) {
+			/* Always TRUE */
+			if (set_bool) {
+				if (set_bool_not) {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8374 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8376 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (true_label != (uint32_t)-1) {
+				//|	jmp =>true_label;
+				dasm_put(Dst, 1587, true_label);
+#line 8380 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			/* Always FALSE */
+			if (set_bool) {
+				if (set_bool_not) {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8388 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (false_label != (uint32_t)-1) {
+				//|	jmp =>false_label;
+				dasm_put(Dst, 1587, false_label);
+#line 8392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		return 1;
+	}
+
+	if (opline->op1_type == IS_CV && (op1_info & MAY_BE_REF)) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8399 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	ZVAL_DEREF FCARG1a, op1_info
+			if (op1_info & MAY_BE_REF) {
+		dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 8400 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE)) {
+		if (!(op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)-MAY_BE_TRUE))) {
+			/* Always TRUE */
+			if (set_bool) {
+				if (set_bool_not) {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8409 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8411 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (true_label != (uint32_t)-1) {
+				//|	jmp =>true_label;
+				dasm_put(Dst, 1587, true_label);
+#line 8415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (!(op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE)))) {
+				/* Always FALSE */
+				if (set_bool) {
+					if (set_bool_not) {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8422 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8424 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+			} else {
+				//|	CMP_ZVAL_TYPE op1_addr, IS_TRUE
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5203, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_TRUE);
+#line 8428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				    if ((op1_info & MAY_BE_LONG) &&
+				        !(op1_info & MAY_BE_UNDEF) &&
+				        !set_bool) {
+						if (exit_addr) {
+							if (branch_opcode == ZEND_JMPNZ) {
+								//|	jl >9
+								dasm_put(Dst, 5212);
+#line 8435 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								//|	jl &exit_addr
+								dasm_put(Dst, 4586, (ptrdiff_t)(exit_addr));
+#line 8437 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						} else if (false_label != (uint32_t)-1) {
+							//|	jl =>false_label
+							dasm_put(Dst, 4590, false_label);
+#line 8440 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	jl >9
+							dasm_put(Dst, 5212);
+#line 8442 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						jmp_done = 1;
+					} else {
+						//|	jg >2
+						dasm_put(Dst, 4353);
+#line 8446 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!(op1_info & MAY_BE_TRUE)) {
+					/* It's FALSE */
+					if (set_bool) {
+						if (set_bool_not) {
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8453 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8455 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+				} else {
+					if (exit_addr) {
+						if (set_bool) {
+							//|	jne >1
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+							dasm_put(Dst, 227);
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8462 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+								//|	jmp &exit_addr
+								dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8464 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								//|	jmp >9
+								dasm_put(Dst, 3627);
+#line 8466 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+							//|1:
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							dasm_put(Dst, 63);
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8469 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							if (branch_opcode == ZEND_JMPZ || branch_opcode == ZEND_JMPZ_EX) {
+								if (!(op1_info & (MAY_BE_UNDEF|MAY_BE_LONG))) {
+									//|	jne &exit_addr
+									dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8472 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+								}
+							}
+						} else {
+							if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+								//|	je &exit_addr
+								dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8477 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else if (!(op1_info & (MAY_BE_UNDEF|MAY_BE_LONG))) {
+								//|	jne &exit_addr
+								dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8479 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								//|	je >9
+								dasm_put(Dst, 3622);
+#line 8481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						}
+					} else if (true_label != (uint32_t)-1 || false_label != (uint32_t)-1) {
+						if (set_bool) {
+							//|	jne >1
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+							dasm_put(Dst, 227);
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							if (true_label != (uint32_t)-1) {
+								//|	jmp =>true_label
+								dasm_put(Dst, 1587, true_label);
+#line 8489 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								//|	jmp >9
+								dasm_put(Dst, 3627);
+#line 8491 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+							//|1:
+							//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+							dasm_put(Dst, 63);
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8494 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							if (true_label != (uint32_t)-1) {
+								//|	je =>true_label
+								dasm_put(Dst, 4570, true_label);
+#line 8497 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else if (!(op1_info & (MAY_BE_UNDEF|MAY_BE_LONG))) {
+								//|	jne =>false_label
+								dasm_put(Dst, 1831, false_label);
+#line 8499 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+								jmp_done = 1;
+							} else {
+								//|	je >9
+								dasm_put(Dst, 3622);
+#line 8502 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						}
+					} else if (set_bool) {
+						//|	sete al
+						//|	movzx eax, al
+						dasm_put(Dst, 5217);
+#line 8507 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (set_bool_not) {
+							//|	neg eax
+							//|	add eax, 3
+							dasm_put(Dst, 5224);
+#line 8510 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	add eax, 2
+							dasm_put(Dst, 4601);
+#line 8512 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						if ((op1_info & MAY_BE_UNDEF) && (op1_info & MAY_BE_ANY)) {
+							set_delayed = 1;
+						} else {
+							//|	SET_ZVAL_TYPE_INFO res_addr, eax
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+				}
+			}
+
+			/* It's FALSE, but may be UNDEF */
+			if (op1_info & MAY_BE_UNDEF) {
+				if (op1_info & MAY_BE_ANY) {
+					if (set_delayed) {
+						//|	CMP_ZVAL_TYPE op1_addr, IS_UNDEF
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 8527 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	SET_ZVAL_TYPE_INFO res_addr, eax
+						dasm_put(Dst, 5203, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8528 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	jz >1
+						dasm_put(Dst, 5231, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8529 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5243, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 8531 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|.cold_code
+					dasm_put(Dst, 445);
+#line 8533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 8534 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	mov FCARG1d, opline->op1.var
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 2237, opline->op1.var);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 8537 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 8538 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+				if (may_throw) {
+					if (!zend_jit_check_exception_undef_result(Dst, opline)) {
+						return 0;
+					}
+				}
+
+				if (exit_addr) {
+					if (branch_opcode == ZEND_JMPZ || branch_opcode == ZEND_JMPZ_EX) {
+						//|	jmp &exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8548 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (false_label != (uint32_t)-1) {
+					//|	jmp =>false_label
+					dasm_put(Dst, 1587, false_label);
+#line 8551 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (op1_info & MAY_BE_ANY) {
+					if (exit_addr) {
+						if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+							//|	jmp >9
+							dasm_put(Dst, 3627);
+#line 8556 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else if (false_label == (uint32_t)-1) {
+						//|	jmp >9
+						dasm_put(Dst, 3627);
+#line 8559 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|.code
+					dasm_put(Dst, 536);
+#line 8561 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+
+			if (!jmp_done) {
+				if (exit_addr) {
+					if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+						if (op1_info & MAY_BE_LONG) {
+							//|	jmp >9
+							dasm_put(Dst, 3627);
+#line 8569 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else if (op1_info & MAY_BE_LONG) {
+						//|	jmp &exit_addr
+						dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 8572 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (false_label != (uint32_t)-1) {
+					//|	jmp =>false_label
+					dasm_put(Dst, 1587, false_label);
+#line 8575 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (op1_info & MAY_BE_LONG) {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 8577 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		}
+	}
+
+	if (op1_info & MAY_BE_LONG) {
+		//|2:
+		dasm_put(Dst, 2222);
+#line 8584 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG))) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >2
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2148, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 8586 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_MODE(op1_addr) == IS_REG) {
+			//|	test Ra(Z_REG(op1_addr)), Ra(Z_REG(op1_addr))
+			dasm_put(Dst, 3500, (Z_REG(op1_addr)), (Z_REG(op1_addr)));
+#line 8589 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LONG_OP_WITH_CONST, cmp, op1_addr, Z_L(0)
+				if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (!IS_SIGNED_32BIT(Z_L(0))) {
+			dasm_put(Dst, 4510, (unsigned int)(Z_L(0)), (unsigned int)((Z_L(0))>>32), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+			dasm_put(Dst, 4522, (Z_REG(op1_addr)), Z_OFFSET(op1_addr), Z_L(0));
+						}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (!IS_SIGNED_32BIT(Z_L(0))) {
+			dasm_put(Dst, 4464, (unsigned int)(Z_L(0)), (unsigned int)((Z_L(0))>>32), (Z_REG(op1_addr)));
+						} else {
+			dasm_put(Dst, 4484, (Z_REG(op1_addr)), Z_L(0));
+						}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (set_bool) {
+			//|	setne al
+			//|	movzx eax, al
+			dasm_put(Dst, 5256);
+#line 8595 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (set_bool_not) {
+				//|	neg eax
+				//|	add eax, 3
+				dasm_put(Dst, 5224);
+#line 8598 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	lea eax, [eax + 2]
+				dasm_put(Dst, 4558, 2);
+#line 8600 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8602 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (exit_addr) {
+			if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+				//|	jne &exit_addr
+				dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8606 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	je &exit_addr
+				dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8608 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (true_label != (uint32_t)-1 || false_label != (uint32_t)-1) {
+			if (true_label != (uint32_t)-1) {
+				//|	jne =>true_label
+				dasm_put(Dst, 1831, true_label);
+#line 8612 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (false_label != (uint32_t)-1) {
+					//|	jmp =>false_label
+					dasm_put(Dst, 1587, false_label);
+#line 8614 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	je =>false_label
+				dasm_put(Dst, 4570, false_label);
+#line 8617 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if ((op1_info & MAY_BE_ANY) == MAY_BE_DOUBLE) {
+		if (CAN_USE_AVX()) {
+			//|	vxorps xmm0, xmm0, xmm0
+			dasm_put(Dst, 5263);
+#line 8624 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	xorps xmm0, xmm0
+			dasm_put(Dst, 5269);
+#line 8626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	DOUBLE_CMP ZREG_XMM0, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4931, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 4941, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+					} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4951, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 4959, (ZREG_XMM0-ZREG_XMM0));
+			}
+					}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4967, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 4979, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 4991, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 5001, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 8628 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (set_bool) {
+			if (exit_addr) {
+				if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+					//|	jp >1
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					dasm_put(Dst, 4619);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8634 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jne &exit_addr
+					//|1:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+					dasm_put(Dst, 5273, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE, (ptrdiff_t)(exit_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8637 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8639 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jp >1
+					//|	je &exit_addr
+					//|1:
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					dasm_put(Dst, 5287, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE, (ptrdiff_t)(exit_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8643 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (false_label != (uint32_t)-1) { // JMPZ_EX
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8646 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jp >1
+				//|	je => false_label
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+				dasm_put(Dst, 5305, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE,  false_label);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8649 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 5321, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 8650 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (true_label != (uint32_t)-1) { // JMPNZ_EX
+				//|	jp >1
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+				dasm_put(Dst, 4619);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 8653 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jne => true_label
+				//|1:
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+				dasm_put(Dst, 5332, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE,  true_label);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 8656 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (set_bool_not) { // BOOL_NOT
+				//|	jp >1
+				//|	mov eax, IS_TRUE
+				//|	je >2
+				//|1:
+				//|	mov eax, IS_FALSE
+				//|2:
+				//|	SET_ZVAL_TYPE_INFO res_addr, eax
+				dasm_put(Dst, 4860, IS_TRUE, IS_FALSE);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8664 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else { // BOOL
+				//|	jp >1
+				//|	mov eax, IS_TRUE
+				//|	jne >2
+				//|1:
+				//|	mov eax, IS_FALSE
+				//|2:
+				//|	SET_ZVAL_TYPE_INFO res_addr, eax
+				dasm_put(Dst, 5346, IS_TRUE, IS_FALSE);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8672 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (exit_addr) {
+				if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+					//|	jp >1
+					//|	jne &exit_addr
+					//|1:
+					dasm_put(Dst, 5363, (ptrdiff_t)(exit_addr));
+#line 8679 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jp >1
+					//|	je &exit_addr
+					//|1:
+					dasm_put(Dst, 4674, (ptrdiff_t)(exit_addr));
+#line 8683 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				ZEND_ASSERT(true_label != (uint32_t)-1 || false_label != (uint32_t)-1);
+				if (false_label != (uint32_t)-1) {
+					//|	jp =>false_label
+					dasm_put(Dst, 4615, false_label);
+#line 8688 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jp >1
+					dasm_put(Dst, 4619);
+#line 8690 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (true_label != (uint32_t)-1) {
+					//|	jne =>true_label
+					dasm_put(Dst, 1831, true_label);
+#line 8693 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (false_label != (uint32_t)-1) {
+						//|	jmp =>false_label
+						dasm_put(Dst, 1587, false_label);
+#line 8695 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	je =>false_label
+					dasm_put(Dst, 4570, false_label);
+#line 8698 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|1:
+				dasm_put(Dst, 63);
+#line 8700 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if (op1_info & (MAY_BE_ANY - (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG))) {
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 8705 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 8706 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 8709 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 8711 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_is_true, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_is_true)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_is_true));
+				} else {
+				if (IS_SIGNED_32BIT(zend_is_true)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_is_true));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_is_true)), (unsigned int)((((ptrdiff_t)zend_is_true))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 8712 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if ((opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+			(op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+
+			if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				//|	IF_NOT_ZVAL_REFCOUNTED op1_addr, >3
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5373, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 8719 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	GET_ZVAL_PTR FCARG1a, op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 8721 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_DELREF FCARG1a
+			//|	jnz >3
+			//|	mov aword T1, r0 // save
+			//|	ZVAL_DTOR_FUNC op1_info, opline
+			dasm_put(Dst, 5387, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+#line 8725 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov r0, aword T1 // restore
+			//|3:
+			dasm_put(Dst, 5406);
+#line 8727 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (may_throw) {
+			//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r1
+					if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+			dasm_put(Dst, 1591, &executor_globals.exception);
+					} else {
+			dasm_put(Dst, 1752, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+					}
+#line 8730 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jne ->exception_handler_undef
+			dasm_put(Dst, 1612);
+#line 8731 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (set_bool) {
+			if (set_bool_not) {
+				//|	neg eax
+				//|	add eax, 3
+				dasm_put(Dst, 5224);
+#line 8737 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	add eax, 2
+				dasm_put(Dst, 4601);
+#line 8739 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 8741 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (exit_addr) {
+				//|	CMP_ZVAL_TYPE res_addr, IS_FALSE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5203, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), IS_FALSE);
+#line 8743 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+					//|	jne &exit_addr
+					dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8745 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	je &exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8747 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (true_label != (uint32_t)-1 || false_label != (uint32_t)-1) {
+				//|	CMP_ZVAL_TYPE res_addr, IS_FALSE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5203, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), IS_FALSE);
+#line 8750 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (true_label != (uint32_t)-1) {
+					//|	jne =>true_label
+					dasm_put(Dst, 1831, true_label);
+#line 8752 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (false_label != (uint32_t)-1) {
+						//|	jmp =>false_label
+						dasm_put(Dst, 1587, false_label);
+#line 8754 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+						//|	jmp >9
+						dasm_put(Dst, 3627);
+#line 8756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	je =>false_label
+					dasm_put(Dst, 4570, false_label);
+#line 8759 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+				//|	jmp >9
+				//|.code
+				dasm_put(Dst, 4064);
+#line 8764 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	test r0, r0
+			dasm_put(Dst, 3565);
+#line 8767 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (exit_addr) {
+				if (branch_opcode == ZEND_JMPNZ || branch_opcode == ZEND_JMPNZ_EX) {
+					//|	jne &exit_addr
+					dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 8770 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+						//|	jmp >9
+						dasm_put(Dst, 3627);
+#line 8772 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	je &exit_addr
+					dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 8775 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+						//|	jmp >9
+						dasm_put(Dst, 3627);
+#line 8777 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+			} else if (true_label != (uint32_t)-1) {
+				//|	jne =>true_label
+				dasm_put(Dst, 1831, true_label);
+#line 8781 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (false_label != (uint32_t)-1) {
+					//|	jmp =>false_label
+					dasm_put(Dst, 1587, false_label);
+#line 8783 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 8785 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	je =>false_label
+				dasm_put(Dst, 4570, false_label);
+#line 8788 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 8790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+
+			if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG)) {
+				//|.code
+				dasm_put(Dst, 536);
+#line 8795 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 8800 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_qm_assign(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, zend_jit_addr op1_def_addr, uint32_t res_use_info, uint32_t res_info, zend_jit_addr res_addr)
+{
+	if (op1_addr != op1_def_addr) {
+		if (!zend_jit_update_regs(Dst, opline->op1.var, op1_addr, op1_def_addr, op1_info)) {
+			return 0;
+		}
+		if (Z_MODE(op1_def_addr) == IS_REG && Z_MODE(op1_addr) != IS_REG) {
+			op1_addr = op1_def_addr;
+		}
+	}
+
+	if (!zend_jit_simple_assign(Dst, opline, res_addr, res_use_info, res_info, opline->op1_type, op1_addr, op1_info, 0, 0, 0)) {
+		return 0;
+	}
+	if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+		return 0;
+	}
+	if (op1_info & MAY_BE_UNDEF) {
+		zend_jit_check_exception(Dst);
+	}
+	return 1;
+}
+
+static int zend_jit_assign(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_use_addr, uint32_t op1_def_info, zend_jit_addr op1_addr, uint32_t op2_info, zend_jit_addr op2_addr, zend_jit_addr op2_def_addr, uint32_t res_info, zend_jit_addr res_addr, int may_throw)
+{
+	ZEND_ASSERT(opline->op1_type == IS_CV);
+
+	if (op2_addr != op2_def_addr) {
+		if (!zend_jit_update_regs(Dst, opline->op2.var, op2_addr, op2_def_addr, op2_info)) {
+			return 0;
+		}
+		if (Z_MODE(op2_def_addr) == IS_REG && Z_MODE(op2_addr) != IS_REG) {
+			op2_addr = op2_def_addr;
+		}
+	}
+
+	if (Z_MODE(op1_addr) != IS_REG
+	 && Z_MODE(op1_use_addr) == IS_REG
+	 && !Z_LOAD(op1_use_addr)
+	 && !Z_STORE(op1_use_addr)) {
+		/* Force type update */
+		op1_info |= MAY_BE_UNDEF;
+	}
+	if (!zend_jit_assign_to_variable(Dst, opline, op1_use_addr, op1_addr, op1_info, op1_def_info, opline->op2_type, op2_addr, op2_info, res_addr,
+			may_throw)) {
+		return 0;
+	}
+	if (!zend_jit_store_var_if_necessary_ex(Dst, opline->op1.var, op1_addr, op1_def_info, op1_use_addr, op1_info)) {
+		return 0;
+	}
+	if (opline->result_type != IS_UNUSED) {
+		if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+/* copy of hidden zend_closure */
+typedef struct _zend_closure {
+	zend_object       std;
+	zend_function     func;
+	zval              this_ptr;
+	zend_class_entry *called_scope;
+	zif_handler       orig_internal_handler;
+} zend_closure;
+
+static int zend_jit_stack_check(dasm_State **Dst, const zend_op *opline, uint32_t used_stack)
+{
+	int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+
+	//|	// Check Stack Overflow
+	//|	MEM_LOAD_ZTS r1, aword, executor_globals, vm_stack_end, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_stack_end)) {
+	dasm_put(Dst, 5413, &executor_globals.vm_stack_end);
+			} else {
+	dasm_put(Dst, 5419, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_end)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_end))>>32));
+			}
+#line 8883 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	MEM_LOAD_OP_ZTS sub, r1, aword, executor_globals, vm_stack_top, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+	dasm_put(Dst, 5427, &executor_globals.vm_stack_top);
+			} else {
+	dasm_put(Dst, 5433, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32));
+			}
+#line 8884 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	cmp r1, used_stack
+	//|	jb &exit_addr
+	dasm_put(Dst, 5441, used_stack, (ptrdiff_t)(exit_addr));
+#line 8886 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_push_call_frame(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, zend_function *func, bool is_closure, bool delayed_fetch_this, int checked_stack)
+{
+	uint32_t used_stack;
+	bool stack_check = 1;
+
+	if (func) {
+		used_stack = zend_vm_calc_used_stack(opline->extended_value, func);
+		if ((int)used_stack <= checked_stack) {
+			stack_check = 0;
+		}
+	} else {
+		used_stack = (ZEND_CALL_FRAME_SLOT + opline->extended_value) * sizeof(zval);
+
+		//|	// if (EXPECTED(ZEND_USER_CODE(func->type))) {
+		if (!is_closure) {
+			//|	test byte [r0 + offsetof(zend_function, type)], 1
+			//|	mov FCARG1a, used_stack
+			//|	jnz >1
+			dasm_put(Dst, 5450, offsetof(zend_function, type), used_stack);
+#line 8908 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov FCARG1a, used_stack
+			dasm_put(Dst, 607, used_stack);
+#line 8910 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// used_stack += (func->op_array.last_var + func->op_array.T - MIN(func->op_array.num_args, num_args)) * sizeof(zval);
+		//|	mov edx, opline->extended_value
+		dasm_put(Dst, 5464, opline->extended_value);
+#line 8913 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!is_closure) {
+			//|	cmp edx, dword [r0 + offsetof(zend_function, op_array.num_args)]
+			//|	cmova edx, dword [r0 + offsetof(zend_function, op_array.num_args)]
+			//|	sub edx, dword [r0 + offsetof(zend_function, op_array.last_var)]
+			//|	sub edx, dword [r0 + offsetof(zend_function, op_array.T)]
+			dasm_put(Dst, 5467, offsetof(zend_function, op_array.num_args), offsetof(zend_function, op_array.num_args), offsetof(zend_function, op_array.last_var), offsetof(zend_function, op_array.T));
+#line 8918 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	cmp edx, dword [r0 + offsetof(zend_closure, func.op_array.num_args)]
+			//|	cmova edx, dword [r0 + offsetof(zend_closure, func.op_array.num_args)]
+			//|	sub edx, dword [r0 + offsetof(zend_closure, func.op_array.last_var)]
+			//|	sub edx, dword [r0 + offsetof(zend_closure, func.op_array.T)]
+			dasm_put(Dst, 5467, offsetof(zend_closure, func.op_array.num_args), offsetof(zend_closure, func.op_array.num_args), offsetof(zend_closure, func.op_array.last_var), offsetof(zend_closure, func.op_array.T));
+#line 8923 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	shl edx, 4
+		//|.if X64
+			//|	movsxd r2, edx
+		//|.endif
+		//|	sub FCARG1a, r2
+		//|1:
+		dasm_put(Dst, 5481);
+#line 8930 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	zend_jit_start_reuse_ip();
+
+	//|	// if (UNEXPECTED(used_stack > (size_t)(((char*)EG(vm_stack_end)) - (char*)call))) {
+	//|	MEM_LOAD_ZTS RX, aword, executor_globals, vm_stack_top, RX
+			if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+	dasm_put(Dst, 5493, &executor_globals.vm_stack_top);
+			} else {
+	dasm_put(Dst, 5499, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32));
+			}
+#line 8936 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (stack_check) {
+		//|	// Check Stack Overflow
+		//|	MEM_LOAD_ZTS r2, aword, executor_globals, vm_stack_end, r2
+				if (IS_SIGNED_32BIT(&executor_globals.vm_stack_end)) {
+		dasm_put(Dst, 5507, &executor_globals.vm_stack_end);
+				} else {
+		dasm_put(Dst, 5513, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_end)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_end))>>32));
+				}
+#line 8940 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	sub r2, RX
+		dasm_put(Dst, 5521);
+#line 8941 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (func) {
+			//|	cmp r2, used_stack
+			dasm_put(Dst, 5526, used_stack);
+#line 8943 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	cmp r2, FCARG1a
+			dasm_put(Dst, 5532);
+#line 8945 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			if (!exit_addr) {
+				return 0;
+			}
+
+			//|	jb &exit_addr
+			dasm_put(Dst, 4652, (ptrdiff_t)(exit_addr));
+#line 8956 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jb >1
+			//|	// EG(vm_stack_top) = (zval*)((char*)call + used_stack);
+			//|.cold_code
+			dasm_put(Dst, 5537);
+#line 8960 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 8961 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (func) {
+				//|	mov FCARG1d, used_stack
+				dasm_put(Dst, 2237, used_stack);
+#line 8963 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+#ifdef _WIN32
+			if (0) {
+#else
+			if (opline->opcode == ZEND_INIT_FCALL && func && func->type == ZEND_INTERNAL_FUNCTION) {
+#endif
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 8970 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_int_extend_stack_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_int_extend_stack_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_int_extend_stack_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_int_extend_stack_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_int_extend_stack_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_int_extend_stack_helper)), (unsigned int)((((ptrdiff_t)zend_jit_int_extend_stack_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 8971 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				if (!is_closure) {
+					if (func
+					 && op_array == &func->op_array
+					 && (func->op_array.fn_flags & ZEND_ACC_IMMUTABLE)
+					 && (sizeof(void*) != 8 || IS_SIGNED_32BIT(func))) {
+						//|	LOAD_ADDR FCARG2a, func
+								if (IS_SIGNED_32BIT(func)) {
+						dasm_put(Dst, 612, ((ptrdiff_t)func));
+								} else {
+						dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32));
+								}
+#line 8978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov FCARG2a, r0
+						dasm_put(Dst, 3378);
+#line 8980 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	lea FCARG2a, aword [r0 + offsetof(zend_closure, func)]
+					dasm_put(Dst, 5543, offsetof(zend_closure, func));
+#line 8983 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 8985 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_extend_stack_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_extend_stack_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_extend_stack_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_extend_stack_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_extend_stack_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_extend_stack_helper)), (unsigned int)((((ptrdiff_t)zend_jit_extend_stack_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 8986 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	mov RX, r0
+			//|	jmp >1
+			//|.code
+			dasm_put(Dst, 5548);
+#line 8990 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (func) {
+		//|	MEM_UPDATE_ZTS add, aword, executor_globals, vm_stack_top, used_stack, r2
+				if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+		dasm_put(Dst, 5557, &executor_globals.vm_stack_top, used_stack);
+				} else {
+		dasm_put(Dst, 5565, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32), used_stack);
+				}
+#line 8995 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	MEM_UPDATE_ZTS add, aword, executor_globals, vm_stack_top, FCARG1a, r2
+				if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+		dasm_put(Dst, 5574, &executor_globals.vm_stack_top);
+				} else {
+		dasm_put(Dst, 5580, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32));
+				}
+#line 8997 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	// zend_vm_init_call_frame(call, call_info, func, num_args, called_scope, object);
+	if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE || opline->opcode != ZEND_INIT_METHOD_CALL) {
+		//|	// ZEND_SET_CALL_INFO(call, 0, call_info);
+		//|	mov dword EX:RX->This.u1.type_info, (IS_UNDEF | ZEND_CALL_NESTED_FUNCTION)
+		dasm_put(Dst, 5588, Dt1(->This.u1.type_info), (IS_UNDEF | ZEND_CALL_NESTED_FUNCTION));
+#line 9002 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+#ifdef _WIN32
+	if (0) {
+#else
+	if (opline->opcode == ZEND_INIT_FCALL && func && func->type == ZEND_INTERNAL_FUNCTION) {
+#endif
+		//|	// call->func = func;
+		//|1:
+		//|	ADDR_STORE aword EX:RX->func, func, r1
+		dasm_put(Dst, 63);
+				if (IS_SIGNED_32BIT(func)) {
+		dasm_put(Dst, 5594, Dt1(->func), ((ptrdiff_t)func));
+				} else {
+		dasm_put(Dst, 5600, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32), Dt1(->func));
+				}
+#line 9011 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (!is_closure) {
+			//|	// call->func = func;
+			if (func
+			 && op_array == &func->op_array
+			 && (func->op_array.fn_flags & ZEND_ACC_IMMUTABLE)
+			 && (sizeof(void*) != 8 || IS_SIGNED_32BIT(func))) {
+				//|	ADDR_STORE aword EX:RX->func, func, r1
+						if (IS_SIGNED_32BIT(func)) {
+				dasm_put(Dst, 5594, Dt1(->func), ((ptrdiff_t)func));
+						} else {
+				dasm_put(Dst, 5600, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32), Dt1(->func));
+						}
+#line 9019 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	mov aword EX:RX->func, r0
+				dasm_put(Dst, 1554, Dt1(->func));
+#line 9021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	// call->func = &closure->func;
+			//|	lea r1, aword [r0 + offsetof(zend_closure, func)]
+			//|	mov aword EX:RX->func, r1
+			dasm_put(Dst, 5609, offsetof(zend_closure, func), Dt1(->func));
+#line 9026 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|1:
+		dasm_put(Dst, 63);
+#line 9028 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline->opcode == ZEND_INIT_METHOD_CALL) {
+		//|	// Z_PTR(call->This) = obj;
+		//|	mov r1, aword T1
+		//|	mov aword EX:RX->This.value.ptr, r1
+		dasm_put(Dst, 5618, Dt1(->This.value.ptr));
+#line 9033 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	    if (opline->op1_type == IS_UNUSED || delayed_fetch_this) {
+			//|	// call->call_info |= ZEND_CALL_HAS_THIS;
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				//|	mov dword EX:RX->This.u1.type_info, ZEND_CALL_HAS_THIS
+				dasm_put(Dst, 5588, Dt1(->This.u1.type_info), ZEND_CALL_HAS_THIS);
+#line 9037 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	or dword EX:RX->This.u1.type_info, ZEND_CALL_HAS_THIS
+				dasm_put(Dst, 5627, Dt1(->This.u1.type_info), ZEND_CALL_HAS_THIS);
+#line 9039 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+	    } else {
+			if (opline->op1_type == IS_CV) {
+				//|	// GC_ADDREF(obj);
+				//|	add dword [r1], 1
+				dasm_put(Dst, 5633);
+#line 9044 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	// call->call_info |= ZEND_CALL_HAS_THIS | ZEND_CALL_RELEASE_THIS;
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				//|	mov dword EX:RX->This.u1.type_info, (ZEND_CALL_HAS_THIS | ZEND_CALL_RELEASE_THIS)
+				dasm_put(Dst, 5588, Dt1(->This.u1.type_info), (ZEND_CALL_HAS_THIS | ZEND_CALL_RELEASE_THIS));
+#line 9048 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	or dword EX:RX->This.u1.type_info, (ZEND_CALL_HAS_THIS | ZEND_CALL_RELEASE_THIS)
+				dasm_put(Dst, 5627, Dt1(->This.u1.type_info), (ZEND_CALL_HAS_THIS | ZEND_CALL_RELEASE_THIS));
+#line 9050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+	    }
+	} else if (!is_closure) {
+		//|	// Z_CE(call->This) = called_scope;
+		//|	mov aword EX:RX->This.value.ptr, 0
+		dasm_put(Dst, 1541, Dt1(->This.value.ptr));
+#line 9055 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (opline->op2_type == IS_CV) {
+			//|	// GC_ADDREF(closure);
+			//|	add dword [r0], 1
+			dasm_put(Dst, 5637);
+#line 9059 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	//	object_or_called_scope = closure->called_scope;
+		//|	mov r1, aword [r0 + offsetof(zend_closure, called_scope)]
+		//|	mov aword EX:RX->This.value.ptr, r1
+		//|	// call_info = ZEND_CALL_NESTED_FUNCTION | ZEND_CALL_DYNAMIC | ZEND_CALL_CLOSURE |
+		//|	//	(closure->func->common.fn_flags & ZEND_ACC_FAKE_CLOSURE);
+		//|	mov edx, dword [r0 + offsetof(zend_closure, func.common.fn_flags)]
+		//|	and edx, ZEND_ACC_FAKE_CLOSURE
+		//|	or edx, (ZEND_CALL_NESTED_FUNCTION | ZEND_CALL_DYNAMIC | ZEND_CALL_CLOSURE)
+		//|	//	if (Z_TYPE(closure->this_ptr) != IS_UNDEF) {
+		//|	cmp byte [r0 + offsetof(zend_closure, this_ptr.u1.v.type)], IS_UNDEF
+		//|	jz >1
+		//|	//	call_info |= ZEND_CALL_HAS_THIS;
+		//|	or edx, ZEND_CALL_HAS_THIS
+		//|	//	object_or_called_scope = Z_OBJ(closure->this_ptr);
+		//|	mov r1, aword [r0 + offsetof(zend_closure, this_ptr.value.ptr)]
+	    //|1:
+		//|	// ZEND_SET_CALL_INFO(call, 0, call_info);
+		//|	or dword EX:RX->This.u1.type_info, edx
+		//|	// Z_PTR(call->This) = object_or_called_scope;
+		//|	mov aword EX:RX->This.value.ptr, r1
+		//|	cmp aword [r0 + offsetof(zend_closure, func.op_array.run_time_cache__ptr)], 0
+		//|	jnz >1
+		//|	lea FCARG1a, aword [r0 + offsetof(zend_closure, func)]
+		//|	EXT_CALL zend_jit_init_func_run_time_cache_helper, r0
+		dasm_put(Dst, 5641, offsetof(zend_closure, called_scope), Dt1(->This.value.ptr), offsetof(zend_closure, func.common.fn_flags), ZEND_ACC_FAKE_CLOSURE, (ZEND_CALL_NESTED_FUNCTION | ZEND_CALL_DYNAMIC | ZEND_CALL_CLOSURE), offsetof(zend_closure, this_ptr.u1.v.type), IS_UNDEF, ZEND_CALL_HAS_THIS, offsetof(zend_closure, this_ptr.value.ptr), Dt1(->This.u1.type_info), Dt1(->This.value.ptr), offsetof(zend_closure, func.op_array.run_time_cache__ptr), offsetof(zend_closure, func));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_init_func_run_time_cache_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_init_func_run_time_cache_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_init_func_run_time_cache_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_init_func_run_time_cache_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_init_func_run_time_cache_helper)), (unsigned int)((((ptrdiff_t)zend_jit_init_func_run_time_cache_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 9084 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 9085 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	// ZEND_CALL_NUM_ARGS(call) = num_args;
+	//|	mov dword EX:RX->This.u2.num_args, opline->extended_value
+	dasm_put(Dst, 5588, Dt1(->This.u2.num_args), opline->extended_value);
+#line 9088 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_init_fcall_guard(dasm_State **Dst, uint32_t level, const zend_function *func, const zend_op *to_opline)
+{
+	int32_t exit_point;
+	const void *exit_addr;
+
+	if (func->type == ZEND_INTERNAL_FUNCTION) {
+#ifdef ZEND_WIN32
+		// TODO: ASLR may cause different addresses in different workers ???
+		return 0;
+#endif
+	} else if (func->type == ZEND_USER_FUNCTION) {
+		if (!zend_accel_in_shm(func->op_array.opcodes)) {
+			/* op_array and op_array->opcodes are not persistent. We can't link. */
+			return 0;
+		}
+	} else {
+		ZEND_UNREACHABLE();
+		return 0;
+	}
+
+	exit_point = zend_jit_trace_get_exit_point(to_opline, ZEND_JIT_EXIT_POLYMORPHISM);
+	exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+	if (!exit_addr) {
+		return 0;
+	}
+
+	//|	// call = EX(call);
+	//|	mov r1, EX->call
+	dasm_put(Dst, 5697, Dt1(->call));
+#line 9119 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	while (level > 0) {
+		//|	mov r1, EX:r1->prev_execute_data
+		dasm_put(Dst, 5702, Dt1(->prev_execute_data));
+#line 9121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		level--;
+	}
+
+	if (func->type == ZEND_USER_FUNCTION &&
+	    (!(func->common.fn_flags & ZEND_ACC_IMMUTABLE) ||
+	     (func->common.fn_flags & ZEND_ACC_CLOSURE) ||
+	     !func->common.function_name)) {
+		const zend_op *opcodes = func->op_array.opcodes;
+
+		//|	mov r1, aword EX:r1->func
+		//|   .if X64
+		dasm_put(Dst, 5702, Dt1(->func));
+				if (!IS_SIGNED_32BIT(opcodes)) {
+#line 9133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|			mov64 r2, ((ptrdiff_t)opcodes)
+		//|			cmp aword [r1 + offsetof(zend_op_array, opcodes)], r2
+		dasm_put(Dst, 5707, (unsigned int)(((ptrdiff_t)opcodes)), (unsigned int)((((ptrdiff_t)opcodes))>>32), offsetof(zend_op_array, opcodes));
+				} else {
+#line 9136 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|			cmp aword [r1 + offsetof(zend_op_array, opcodes)], opcodes
+		dasm_put(Dst, 5716, offsetof(zend_op_array, opcodes), opcodes);
+				}
+#line 9138 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	.else
+		//|		cmp aword [r1 + offsetof(zend_op_array, opcodes)], opcodes
+		//|	.endif
+		//|	jne &exit_addr
+		dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9142 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|   .if X64
+				if (!IS_SIGNED_32BIT(func)) {
+		//|			mov64 r2, ((ptrdiff_t)func)
+		//|			cmp aword EX:r1->func, r2
+		dasm_put(Dst, 5707, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32), Dt1(->func));
+				} else {
+#line 9148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|			cmp aword EX:r1->func, func
+		dasm_put(Dst, 5716, Dt1(->func), func);
+				}
+#line 9150 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	.else
+		//|		cmp aword EX:r1->func, func
+		//|	.endif
+		//|	jne &exit_addr
+		dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9154 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_init_fcall(dasm_State **Dst, const zend_op *opline, uint32_t b, const zend_op_array *op_array, zend_ssa *ssa, const zend_ssa_op *ssa_op, int call_level, zend_jit_trace_rec *trace, int checked_stack)
+{
+	zend_func_info *info = ZEND_FUNC_INFO(op_array);
+	zend_call_info *call_info = NULL;
+	zend_function *func = NULL;
+
+	if (delayed_call_chain) {
+		if (!zend_jit_save_call_chain(Dst, delayed_call_level)) {
+			return 0;
+		}
+	}
+
+	if (info) {
+		call_info = info->callee_info;
+		while (call_info && call_info->caller_init_opline != opline) {
+			call_info = call_info->next_callee;
+		}
+		if (call_info && call_info->callee_func && !call_info->is_prototype) {
+			func = call_info->callee_func;
+		}
+	}
+
+	if (!func
+	 && trace
+	 && trace->op == ZEND_JIT_TRACE_INIT_CALL) {
+#ifdef _WIN32
+		/* ASLR */
+		if (trace->func->type != ZEND_INTERNAL_FUNCTION) {
+			func = (zend_function*)trace->func;
+		}
+#else
+		func = (zend_function*)trace->func;
+#endif
+	}
+
+#ifdef _WIN32
+	if (0) {
+#else
+	if (opline->opcode == ZEND_INIT_FCALL
+	 && func
+	 && func->type == ZEND_INTERNAL_FUNCTION) {
+#endif
+		/* load constant address later */
+	} else if (func && op_array == &func->op_array) {
+		/* recursive call */
+		if (!(func->op_array.fn_flags & ZEND_ACC_IMMUTABLE) ||
+		    (sizeof(void*) == 8 && !IS_SIGNED_32BIT(func))) {
+			//|	mov r0, EX->func
+			dasm_put(Dst, 5722, Dt1(->func));
+#line 9207 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	// if (CACHED_PTR(opline->result.num))
+		//|	mov r2, EX->run_time_cache
+		//|	mov r0, aword [r2 + opline->result.num]
+		//|	test r0, r0
+		//|	jz >1
+		//|.cold_code
+		dasm_put(Dst, 5727, Dt1(->run_time_cache), opline->result.num);
+#line 9215 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 9216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode == ZEND_INIT_FCALL
+		 && func
+		 && func->type == ZEND_USER_FUNCTION
+		 && (func->op_array.fn_flags & ZEND_ACC_IMMUTABLE)) {
+			//|	LOAD_ADDR FCARG1a, func
+					if (IS_SIGNED_32BIT(func)) {
+			dasm_put(Dst, 607, ((ptrdiff_t)func));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32));
+					}
+#line 9221 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov aword [r2 + opline->result.num], FCARG1a
+			//|	EXT_CALL zend_jit_init_func_run_time_cache_helper, r0
+			dasm_put(Dst, 5744, opline->result.num);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_init_func_run_time_cache_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_init_func_run_time_cache_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_init_func_run_time_cache_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_init_func_run_time_cache_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_init_func_run_time_cache_helper)), (unsigned int)((((ptrdiff_t)zend_jit_init_func_run_time_cache_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9223 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >3
+			dasm_put(Dst, 3893);
+#line 9224 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			zval *zv = RT_CONSTANT(opline, opline->op2);
+
+			if (opline->opcode == ZEND_INIT_FCALL) {
+				//|	LOAD_ADDR FCARG1a, Z_STR_P(zv);
+						if (IS_SIGNED_32BIT(Z_STR_P(zv))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_STR_P(zv)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_STR_P(zv))), (unsigned int)((((ptrdiff_t)Z_STR_P(zv)))>>32));
+						}
+#line 9229 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	lea FCARG2a, aword [r2 + opline->result.num]
+				//|	EXT_CALL zend_jit_find_func_helper, r0
+				dasm_put(Dst, 5749, opline->result.num);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_find_func_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_find_func_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_find_func_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_find_func_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_find_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_find_func_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 9231 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (opline->opcode == ZEND_INIT_FCALL_BY_NAME) {
+				//|	LOAD_ADDR FCARG1a, Z_STR_P(zv + 1);
+						if (IS_SIGNED_32BIT(Z_STR_P(zv + 1))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_STR_P(zv + 1)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_STR_P(zv + 1))), (unsigned int)((((ptrdiff_t)Z_STR_P(zv + 1)))>>32));
+						}
+#line 9233 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	lea FCARG2a, aword [r2 + opline->result.num]
+				//|	EXT_CALL zend_jit_find_func_helper, r0
+				dasm_put(Dst, 5749, opline->result.num);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_find_func_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_find_func_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_find_func_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_find_func_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_find_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_find_func_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 9235 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (opline->opcode == ZEND_INIT_NS_FCALL_BY_NAME) {
+				//|	LOAD_ADDR FCARG1a, zv;
+						if (IS_SIGNED_32BIT(zv)) {
+				dasm_put(Dst, 607, ((ptrdiff_t)zv));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)zv)), (unsigned int)((((ptrdiff_t)zv))>>32));
+						}
+#line 9237 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	lea FCARG2a, aword [r2 + opline->result.num]
+				//|	EXT_CALL zend_jit_find_ns_func_helper, r0
+				dasm_put(Dst, 5749, opline->result.num);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_find_ns_func_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_find_ns_func_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_find_ns_func_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_find_ns_func_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_find_ns_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_find_ns_func_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 9239 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+
+				if (!func || opline->opcode == ZEND_INIT_FCALL) {
+					//|	test r0, r0
+					//|	jnz >3
+					dasm_put(Dst, 5754);
+#line 9253 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (func->type == ZEND_USER_FUNCTION
+					 && !(func->common.fn_flags & ZEND_ACC_IMMUTABLE)) {
+					const zend_op *opcodes = func->op_array.opcodes;
+
+					//|   .if X64
+							if (!IS_SIGNED_32BIT(opcodes)) {
+					//|			mov64 r1, ((ptrdiff_t)opcodes)
+					//|			cmp aword [r0 + offsetof(zend_op_array, opcodes)], r1
+					dasm_put(Dst, 5762, (unsigned int)(((ptrdiff_t)opcodes)), (unsigned int)((((ptrdiff_t)opcodes))>>32), offsetof(zend_op_array, opcodes));
+							} else {
+#line 9262 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|			cmp aword [r0 + offsetof(zend_op_array, opcodes)], opcodes
+					dasm_put(Dst, 5771, offsetof(zend_op_array, opcodes), opcodes);
+							}
+#line 9264 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	.else
+					//|		cmp aword [r0 + offsetof(zend_op_array, opcodes)], opcodes
+					//|	.endif
+					//|	jz >3
+					dasm_put(Dst, 3934);
+#line 9268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|   .if X64
+							if (!IS_SIGNED_32BIT(func)) {
+					//|			mov64 r1, ((ptrdiff_t)func)
+					//|			cmp r0, r1
+					dasm_put(Dst, 5777, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32));
+							} else {
+#line 9274 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|			cmp r0, func
+					dasm_put(Dst, 3569, func);
+							}
+#line 9276 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	.else
+					//|		cmp r0, func
+					//|	.endif
+					//|	jz >3
+					dasm_put(Dst, 3934);
+#line 9280 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	jmp &exit_addr
+				dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 9282 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	test r0, r0
+				//|	jnz >3
+				//|	// SAVE_OPLINE();
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 5754);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 9287 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->undefined_function
+				dasm_put(Dst, 5785);
+#line 9288 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|.code
+		dasm_put(Dst, 536);
+#line 9291 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|3:
+		dasm_put(Dst, 496);
+#line 9292 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!zend_jit_push_call_frame(Dst, opline, op_array, func, 0, 0, checked_stack)) {
+		return 0;
+	}
+
+	if (zend_jit_needs_call_chain(call_info, b, op_array, ssa, ssa_op, opline, call_level, trace)) {
+		if (!zend_jit_save_call_chain(Dst, call_level)) {
+			return 0;
+		}
+	} else {
+		delayed_call_chain = 1;
+		delayed_call_level = call_level;
+	}
+
+	return 1;
+}
+
+static int zend_jit_init_method_call(dasm_State          **Dst,
+                                     const zend_op        *opline,
+                                     uint32_t              b,
+                                     const zend_op_array  *op_array,
+                                     zend_ssa             *ssa,
+                                     const zend_ssa_op    *ssa_op,
+                                     int                   call_level,
+                                     uint32_t              op1_info,
+                                     zend_jit_addr         op1_addr,
+                                     zend_class_entry     *ce,
+                                     bool                  ce_is_instanceof,
+                                     bool                  on_this,
+                                     bool                  delayed_fetch_this,
+                                     zend_class_entry     *trace_ce,
+                                     zend_jit_trace_rec   *trace,
+                                     int                   checked_stack,
+                                     bool                  polymorphic_side_trace)
+{
+	zend_func_info *info = ZEND_FUNC_INFO(op_array);
+	zend_call_info *call_info = NULL;
+	zend_function *func = NULL;
+	zval *function_name;
+
+	ZEND_ASSERT(opline->op2_type == IS_CONST);
+	ZEND_ASSERT(op1_info & MAY_BE_OBJECT);
+
+	function_name = RT_CONSTANT(opline, opline->op2);
+
+	if (info) {
+		call_info = info->callee_info;
+		while (call_info && call_info->caller_init_opline != opline) {
+			call_info = call_info->next_callee;
+		}
+		if (call_info && call_info->callee_func && !call_info->is_prototype) {
+			func = call_info->callee_func;
+		}
+	}
+
+	if (polymorphic_side_trace) {
+		/* function is passed in r0 from parent_trace */
+	} else {
+		if (on_this) {
+			zend_jit_addr this_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, offsetof(zend_execute_data, This));
+
+			//|	GET_ZVAL_PTR FCARG1a, this_addr
+				ZEND_ASSERT(Z_MODE(this_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3964, (Z_REG(this_addr)), Z_OFFSET(this_addr));
+#line 9355 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+		    if (op1_info & MAY_BE_REF) {
+				if (opline->op1_type == IS_CV) {
+					if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+						//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+							if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+						dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+								} else {
+						dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+								}
+							} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+								if (Z_OFFSET(op1_addr)) {
+						dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+								} else {
+						dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 9360 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	ZVAL_DEREF FCARG1a, op1_info
+						if (op1_info & MAY_BE_REF) {
+					dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+						}
+#line 9362 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+				} else {
+					/* Hack: Convert reference to regular value to simplify JIT code */
+					ZEND_ASSERT(Z_REG(op1_addr) == ZREG_FP);
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 9367 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op1_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 9368 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_unref_helper, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_unref_helper)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_unref_helper));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_unref_helper)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_unref_helper));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_unref_helper)), (unsigned int)((((ptrdiff_t)zend_jit_unref_helper))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 9369 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 9370 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)- MAY_BE_OBJECT)) {
+				if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+					int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+					const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+					if (!exit_addr) {
+						return 0;
+					}
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 9381 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 9383 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.cold_code
+					dasm_put(Dst, 3320, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 9384 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 9385 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+						//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+							if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+						dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+								} else {
+						dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+								}
+							} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+								if (Z_OFFSET(op1_addr)) {
+						dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+								} else {
+						dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 9387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 9389 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if ((opline->op1_type & (IS_VAR|IS_TMP_VAR)) && !delayed_fetch_this) {
+						//|	EXT_CALL zend_jit_invalid_method_call_tmp, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_method_call_tmp)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_method_call_tmp));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_invalid_method_call_tmp)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_method_call_tmp));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_method_call_tmp)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_method_call_tmp))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 9391 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	EXT_CALL zend_jit_invalid_method_call, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_method_call)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_method_call));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_invalid_method_call)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_method_call));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_method_call)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_method_call))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 9393 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	jmp ->exception_handler
+					//|.code
+					dasm_put(Dst, 5802);
+#line 9396 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|	GET_ZVAL_PTR FCARG1a, op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 9399 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (delayed_call_chain) {
+			if (!zend_jit_save_call_chain(Dst, delayed_call_level)) {
+				return 0;
+			}
+		}
+
+		//|	mov aword T1, FCARG1a // save
+		dasm_put(Dst, 3869);
+#line 9408 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (func) {
+			//|	// fbc = CACHED_PTR(opline->result.num + sizeof(void*));
+			//|	mov r0, EX->run_time_cache
+			//|	mov r0, aword [r0 + opline->result.num + sizeof(void*)]
+			//|	test r0, r0
+			//|	jz >1
+			dasm_put(Dst, 5808, Dt1(->run_time_cache), opline->result.num + sizeof(void*));
+#line 9415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	// if (CACHED_PTR(opline->result.num) == obj->ce)) {
+			//|	mov r0, EX->run_time_cache
+			//|	mov r2, aword [r0 + opline->result.num]
+			//|	cmp r2, [FCARG1a + offsetof(zend_object, ce)]
+			//|	jnz >1
+			//|	// fbc = CACHED_PTR(opline->result.num + sizeof(void*));
+			//|	mov r0, aword [r0 + opline->result.num + sizeof(void*)]
+			dasm_put(Dst, 5824, Dt1(->run_time_cache), opline->result.num, offsetof(zend_object, ce), opline->result.num + sizeof(void*));
+#line 9423 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 9426 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	LOAD_ADDR FCARG2a, function_name
+		dasm_put(Dst, 63);
+				if (IS_SIGNED_32BIT(function_name)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)function_name));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)function_name)), (unsigned int)((((ptrdiff_t)function_name))>>32));
+				}
+#line 9428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+		//|	lea CARG3, aword T1
+		//|.else
+		//|	lea r0, aword T1
+		//|	sub r4, 12
+		//|	push r0
+		//|.endif
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 5845);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 9436 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((opline->op1_type & (IS_VAR|IS_TMP_VAR)) && !delayed_fetch_this) {
+			//|	EXT_CALL zend_jit_find_method_tmp_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_find_method_tmp_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_find_method_tmp_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_find_method_tmp_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_find_method_tmp_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_find_method_tmp_helper)), (unsigned int)((((ptrdiff_t)zend_jit_find_method_tmp_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9438 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	EXT_CALL zend_jit_find_method_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_find_method_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_find_method_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_find_method_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_find_method_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_find_method_helper)), (unsigned int)((((ptrdiff_t)zend_jit_find_method_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9440 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		//|	test r0, r0
+		//|	jnz >2
+		//|	jmp ->exception_handler
+		//|.code
+		dasm_put(Dst, 5850);
+#line 9448 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		dasm_put(Dst, 2222);
+#line 9449 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!func
+	 && trace
+	 && trace->op == ZEND_JIT_TRACE_INIT_CALL
+	 && trace->func
+#ifdef _WIN32
+	 && trace->func->type != ZEND_INTERNAL_FUNCTION
+#endif
+	) {
+		int32_t exit_point;
+		const void *exit_addr;
+
+		exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_METHOD_CALL);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+
+		func = (zend_function*)trace->func;
+
+		if (func->type == ZEND_USER_FUNCTION &&
+		    (!(func->common.fn_flags & ZEND_ACC_IMMUTABLE) ||
+		     (func->common.fn_flags & ZEND_ACC_CLOSURE) ||
+		     !func->common.function_name)) {
+			const zend_op *opcodes = func->op_array.opcodes;
+
+			//|   .if X64
+					if (!IS_SIGNED_32BIT(opcodes)) {
+			//|			mov64 r1, ((ptrdiff_t)opcodes)
+			//|			cmp aword [r0 + offsetof(zend_op_array, opcodes)], r1
+			dasm_put(Dst, 5762, (unsigned int)(((ptrdiff_t)opcodes)), (unsigned int)((((ptrdiff_t)opcodes))>>32), offsetof(zend_op_array, opcodes));
+					} else {
+#line 9481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|			cmp aword [r0 + offsetof(zend_op_array, opcodes)], opcodes
+			dasm_put(Dst, 5771, offsetof(zend_op_array, opcodes), opcodes);
+					}
+#line 9483 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	.else
+			//|		cmp aword [r0 + offsetof(zend_op_array, opcodes)], opcodes
+			//|	.endif
+			//|	jne &exit_addr
+			dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|   .if X64
+					if (!IS_SIGNED_32BIT(func)) {
+			//|			mov64 r1, ((ptrdiff_t)func)
+			//|			cmp r0, r1
+			dasm_put(Dst, 5777, (unsigned int)(((ptrdiff_t)func)), (unsigned int)((((ptrdiff_t)func))>>32));
+					} else {
+#line 9493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|			cmp r0, func
+			dasm_put(Dst, 3569, func);
+					}
+#line 9495 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	.else
+			//|		cmp r0, func
+			//|	.endif
+			//|	jne &exit_addr
+			dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9499 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!func) {
+		//|	// if (fbc->common.fn_flags & ZEND_ACC_STATIC) {
+		//|	test dword [r0 + offsetof(zend_function, common.fn_flags)], ZEND_ACC_STATIC
+		//|	jnz >1
+		//|.cold_code
+		dasm_put(Dst, 5863, offsetof(zend_function, common.fn_flags), ZEND_ACC_STATIC);
+#line 9507 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 9508 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!func || (func->common.fn_flags & ZEND_ACC_STATIC) != 0) {
+		//|	mov FCARG1a, aword T1 // restore
+		//|	mov FCARG2a, r0
+		//|.if X64
+		//|	mov CARG3d, opline->extended_value
+		//|.else
+		//|	sub r4, 12
+		//|	push opline->extended_value
+		//|.endif
+		dasm_put(Dst, 5874, opline->extended_value);
+#line 9519 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((opline->op1_type & (IS_VAR|IS_TMP_VAR)) && !delayed_fetch_this) {
+			//|	EXT_CALL zend_jit_push_static_metod_call_frame_tmp, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_push_static_metod_call_frame_tmp)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_push_static_metod_call_frame_tmp));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_push_static_metod_call_frame_tmp)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_push_static_metod_call_frame_tmp));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_push_static_metod_call_frame_tmp)), (unsigned int)((((ptrdiff_t)zend_jit_push_static_metod_call_frame_tmp))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9521 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	EXT_CALL zend_jit_push_static_metod_call_frame, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_push_static_metod_call_frame)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_push_static_metod_call_frame));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_push_static_metod_call_frame)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_push_static_metod_call_frame));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_push_static_metod_call_frame)), (unsigned int)((((ptrdiff_t)zend_jit_push_static_metod_call_frame))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9523 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+		if ((opline->op1_type & (IS_VAR|IS_TMP_VAR) && !delayed_fetch_this)) {
+			//|	test r0, r0
+			//|	jz ->exception_handler
+			dasm_put(Dst, 5884);
+#line 9530 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	mov RX, r0
+		dasm_put(Dst, 5892);
+#line 9532 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!func) {
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 9537 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!func || (func->common.fn_flags & ZEND_ACC_STATIC) == 0) {
+		if (!zend_jit_push_call_frame(Dst, opline, NULL, func, 0, delayed_fetch_this, checked_stack)) {
+			return 0;
+		}
+	}
+
+	if (!func) {
+		//|9:
+		dasm_put(Dst, 4090);
+#line 9547 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	zend_jit_start_reuse_ip();
+
+	if (zend_jit_needs_call_chain(call_info, b, op_array, ssa, ssa_op, opline, call_level, trace)) {
+		if (!zend_jit_save_call_chain(Dst, call_level)) {
+			return 0;
+		}
+	} else {
+		delayed_call_chain = 1;
+		delayed_call_level = call_level;
+	}
+
+	return 1;
+}
+
+static int zend_jit_init_closure_call(dasm_State          **Dst,
+                                      const zend_op        *opline,
+                                      uint32_t              b,
+                                      const zend_op_array  *op_array,
+                                      zend_ssa             *ssa,
+                                      const zend_ssa_op    *ssa_op,
+                                      int                   call_level,
+                                      zend_jit_trace_rec   *trace,
+                                      int                   checked_stack)
+{
+	zend_function *func = NULL;
+	zend_jit_addr op2_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var);
+
+	//|	GET_ZVAL_PTR r0, op2_addr
+		ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 5896, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+#line 9576 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (ssa->var_info[ssa_op->op2_use].ce != zend_ce_closure
+	 && !(ssa->var_info[ssa_op->op2_use].type & MAY_BE_CLASS_GUARD)) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+		const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+		if (!exit_addr) {
+			return 0;
+		}
+
+		//|.if X64
+			if (!IS_SIGNED_32BIT(zend_ce_closure)) {
+		//|		mov64 FCARG1a, ((ptrdiff_t)zend_ce_closure)
+		//|		cmp aword [r0 + offsetof(zend_object, ce)], FCARG1a
+		dasm_put(Dst, 5904, (unsigned int)(((ptrdiff_t)zend_ce_closure)), (unsigned int)((((ptrdiff_t)zend_ce_closure))>>32), offsetof(zend_object, ce));
+			} else {
+#line 9591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|		cmp aword [r0 + offsetof(zend_object, ce)], zend_ce_closure
+		dasm_put(Dst, 5771, offsetof(zend_object, ce), zend_ce_closure);
+			}
+#line 9593 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+		//|	cmp aword [r0 + offsetof(zend_object, ce)], zend_ce_closure
+		//|.endif
+		//|	jne &exit_addr
+		dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9597 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (ssa->var_info && ssa_op->op2_use >= 0) {
+			ssa->var_info[ssa_op->op2_use].type |= MAY_BE_CLASS_GUARD;
+			ssa->var_info[ssa_op->op2_use].ce = zend_ce_closure;
+			ssa->var_info[ssa_op->op2_use].is_instanceof = 0;
+		}
+	}
+
+	if (trace
+	 && trace->op == ZEND_JIT_TRACE_INIT_CALL
+	 && trace->func
+	 && trace->func->type == ZEND_USER_FUNCTION) {
+		const zend_op *opcodes;
+		int32_t exit_point;
+		const void *exit_addr;
+
+		func = (zend_function*)trace->func;
+		opcodes = func->op_array.opcodes;
+		exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_CLOSURE_CALL);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+
+		//|   .if X64
+				if (!IS_SIGNED_32BIT(opcodes)) {
+		//|			mov64 FCARG1a, ((ptrdiff_t)opcodes)
+		//|			cmp aword [r0 + offsetof(zend_closure, func.op_array.opcodes)], FCARG1a
+		dasm_put(Dst, 5904, (unsigned int)(((ptrdiff_t)opcodes)), (unsigned int)((((ptrdiff_t)opcodes))>>32), offsetof(zend_closure, func.op_array.opcodes));
+				} else {
+#line 9625 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|			cmp aword [r0 + offsetof(zend_closure, func.op_array.opcodes)], opcodes
+		dasm_put(Dst, 5771, offsetof(zend_closure, func.op_array.opcodes), opcodes);
+				}
+#line 9627 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	.else
+		//|		cmp aword [r0 + offsetof(zend_closure, func.op_array.opcodes)], opcodes
+		//|	.endif
+		//|	jne &exit_addr
+		dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 9631 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (delayed_call_chain) {
+		if (!zend_jit_save_call_chain(Dst, delayed_call_level)) {
+			return 0;
+		}
+	}
+
+	if (!zend_jit_push_call_frame(Dst, opline, NULL, func, 1, 0, checked_stack)) {
+		return 0;
+	}
+
+	if (zend_jit_needs_call_chain(NULL, b, op_array, ssa, ssa_op, opline, call_level, trace)) {
+		if (!zend_jit_save_call_chain(Dst, call_level)) {
+			return 0;
+		}
+	} else {
+		delayed_call_chain = 1;
+		delayed_call_level = call_level;
+	}
+
+	if (trace
+	 && trace->op == ZEND_JIT_TRACE_END
+	 && trace->stop == ZEND_JIT_TRACE_STOP_INTERPRETER) {
+		if (!zend_jit_set_valid_ip(Dst, opline + 1)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_do_fcall(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, zend_ssa *ssa, int call_level, unsigned int next_block, zend_jit_trace_rec *trace)
+{
+	zend_func_info *info = ZEND_FUNC_INFO(op_array);
+	zend_call_info *call_info = NULL;
+	const zend_function *func = NULL;
+	uint32_t i;
+	zend_jit_addr res_addr;
+	uint32_t call_num_args = 0;
+	bool unknown_num_args = 0;
+	const void *exit_addr = NULL;
+	const zend_op *prev_opline;
+
+	if (RETURN_VALUE_USED(opline)) {
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	} else {
+		/* CPU stack allocated temporary zval */
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R4, TMP_ZVAL_OFFSET);
+	}
+
+	prev_opline = opline - 1;
+	while (prev_opline->opcode == ZEND_EXT_FCALL_BEGIN || prev_opline->opcode == ZEND_TICKS) {
+		prev_opline--;
+	}
+	if (prev_opline->opcode == ZEND_SEND_UNPACK || prev_opline->opcode == ZEND_SEND_ARRAY ||
+			prev_opline->opcode == ZEND_CHECK_UNDEF_ARGS) {
+		unknown_num_args = 1;
+	}
+
+	if (info) {
+		call_info = info->callee_info;
+		while (call_info && call_info->caller_call_opline != opline) {
+			call_info = call_info->next_callee;
+		}
+		if (call_info && call_info->callee_func && !call_info->is_prototype) {
+			func = call_info->callee_func;
+		}
+		if ((op_array->fn_flags & ZEND_ACC_TRAIT_CLONE)
+		 && JIT_G(current_frame)
+		 && JIT_G(current_frame)->call
+		 && !JIT_G(current_frame)->call->func) {
+			call_info = NULL; func = NULL; /* megamorphic call from trait */
+		}
+	}
+	if (!func) {
+		/* resolve function at run time */
+	} else if (func->type == ZEND_USER_FUNCTION) {
+		ZEND_ASSERT(opline->opcode != ZEND_DO_ICALL);
+		call_num_args = call_info->num_args;
+	} else if (func->type == ZEND_INTERNAL_FUNCTION) {
+		ZEND_ASSERT(opline->opcode != ZEND_DO_UCALL);
+		call_num_args = call_info->num_args;
+	} else {
+		ZEND_UNREACHABLE();
+	}
+
+	if (trace && !func) {
+		if (trace->op == ZEND_JIT_TRACE_DO_ICALL) {
+			ZEND_ASSERT(trace->func->type == ZEND_INTERNAL_FUNCTION);
+#ifndef ZEND_WIN32
+			// TODO: ASLR may cause different addresses in different workers ???
+			func = trace->func;
+			if (JIT_G(current_frame) &&
+			    JIT_G(current_frame)->call &&
+			    TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)->call) >= 0) {
+				call_num_args = TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)->call);
+			} else {
+				unknown_num_args = 1;
+			}
+#endif
+		} else if (trace->op == ZEND_JIT_TRACE_ENTER) {
+			ZEND_ASSERT(trace->func->type == ZEND_USER_FUNCTION);
+			if (zend_accel_in_shm(trace->func->op_array.opcodes)) {
+				func = trace->func;
+				if (JIT_G(current_frame) &&
+				    JIT_G(current_frame)->call &&
+				    TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)->call) >= 0) {
+					call_num_args = TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)->call);
+				} else {
+					unknown_num_args = 1;
+				}
+			}
+		}
+	}
+
+	bool may_have_extra_named_params =
+		opline->extended_value == ZEND_FCALL_MAY_HAVE_EXTRA_NAMED_PARAMS &&
+		(!func || func->common.fn_flags & ZEND_ACC_VARIADIC);
+
+	if (!reuse_ip) {
+		zend_jit_start_reuse_ip();
+		//|	// call = EX(call);
+		//|	mov RX, EX->call
+		dasm_put(Dst, 0, Dt1(->call));
+#line 9755 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	zend_jit_stop_reuse_ip();
+
+	//|	// fbc = call->func;
+	//|	// mov r2, EX:RX->func ???
+	//|	// SAVE_OPLINE();
+	//|	SET_EX_OPLINE opline, r0
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+#line 9762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (opline->opcode == ZEND_DO_FCALL) {
+		if (!func) {
+			if (trace) {
+				uint32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+
+				exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	mov r0, EX:RX->func
+				//|	test dword [r0 + offsetof(zend_op_array, fn_flags)], ZEND_ACC_DEPRECATED
+				//|	jnz &exit_addr
+				dasm_put(Dst, 5913, Dt1(->func), offsetof(zend_op_array, fn_flags), ZEND_ACC_DEPRECATED, (ptrdiff_t)(exit_addr));
+#line 9775 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if (!delayed_call_chain) {
+		if (call_level == 1) {
+			//|	mov aword EX->call, 0
+			dasm_put(Dst, 5926, Dt1(->call));
+#line 9782 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	//EX(call) = call->prev_execute_data;
+			//|	mov r0, EX:RX->prev_execute_data
+			//|	mov EX->call, r0
+			dasm_put(Dst, 5935, Dt1(->prev_execute_data), Dt1(->call));
+#line 9786 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	delayed_call_chain = 0;
+
+	//|	//call->prev_execute_data = execute_data;
+	//|	mov EX:RX->prev_execute_data, EX
+	dasm_put(Dst, 5944, Dt1(->prev_execute_data));
+#line 9792 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (!func) {
+		//|	mov r0, EX:RX->func
+		dasm_put(Dst, 5949, Dt1(->func));
+#line 9795 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (opline->opcode == ZEND_DO_FCALL) {
+		if (!func) {
+			if (!trace) {
+				//|	test dword [r0 + offsetof(zend_op_array, fn_flags)], ZEND_ACC_DEPRECATED
+				//|	jnz >1
+				//|.cold_code
+				dasm_put(Dst, 5863, offsetof(zend_op_array, fn_flags), ZEND_ACC_DEPRECATED);
+#line 9803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 9804 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!GCC_GLOBAL_REGS) {
+					//|	mov FCARG1a, RX
+					dasm_put(Dst, 306);
+#line 9806 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	EXT_CALL zend_jit_deprecated_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_deprecated_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_deprecated_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_deprecated_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_deprecated_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_deprecated_helper)), (unsigned int)((((ptrdiff_t)zend_jit_deprecated_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 9808 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test al, al
+				//|	mov r0, EX:RX->func // reload
+				//|	jne >1
+				//|	jmp ->exception_handler
+				//|.code
+				dasm_put(Dst, 5954, Dt1(->func));
+#line 9813 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 9814 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (func->common.fn_flags & ZEND_ACC_DEPRECATED) {
+			if (!GCC_GLOBAL_REGS) {
+				//|	mov FCARG1a, RX
+				dasm_put(Dst, 306);
+#line 9818 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	EXT_CALL zend_jit_deprecated_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_deprecated_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_deprecated_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_deprecated_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_deprecated_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_deprecated_helper)), (unsigned int)((((ptrdiff_t)zend_jit_deprecated_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 9820 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	test al, al
+			//|	je ->exception_handler
+			dasm_put(Dst, 5970);
+#line 9822 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!func
+	 && opline->opcode != ZEND_DO_UCALL
+	 && opline->opcode != ZEND_DO_ICALL) {
+		//|	cmp byte [r0 + offsetof(zend_function, type)], ZEND_USER_FUNCTION
+		//|	jne >8
+		dasm_put(Dst, 3632, offsetof(zend_function, type), ZEND_USER_FUNCTION);
+#line 9830 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if ((!func || func->type == ZEND_USER_FUNCTION)
+	 && opline->opcode != ZEND_DO_ICALL) {
+		//|	// EX(call) = NULL;
+		//|	mov aword EX:RX->call, 0
+		dasm_put(Dst, 1541, Dt1(->call));
+#line 9836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (RETURN_VALUE_USED(opline)) {
+			//|	// EX(return_value) = EX_VAR(opline->result.var);
+			//|	LOAD_ZVAL_ADDR r2, res_addr
+				if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+					}
+				} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(res_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 9840 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov aword EX:RX->return_value, r2
+			dasm_put(Dst, 5977, Dt1(->return_value));
+#line 9841 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	// EX(return_value) = 0;
+			//|	mov aword EX:RX->return_value, 0
+			dasm_put(Dst, 1541, Dt1(->return_value));
+#line 9844 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//EX_LOAD_RUN_TIME_CACHE(op_array);
+		if (!func || func->op_array.cache_size) {
+			if (func && op_array == &func->op_array) {
+				/* recursive call */
+				if (trace || func->op_array.cache_size > sizeof(void*)) {
+					//|	mov r2, EX->run_time_cache
+					//|	mov EX:RX->run_time_cache, r2
+					dasm_put(Dst, 5982, Dt1(->run_time_cache), Dt1(->run_time_cache));
+#line 9853 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+#if ZEND_MAP_PTR_KIND == ZEND_MAP_PTR_KIND_PTR
+				if (func) {
+					//|	mov r0, EX:RX->func
+					dasm_put(Dst, 5949, Dt1(->func));
+#line 9858 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	mov r2, aword [r0 + offsetof(zend_op_array, run_time_cache__ptr)]
+				//|	mov r2, aword [r2]
+				dasm_put(Dst, 5991, offsetof(zend_op_array, run_time_cache__ptr));
+#line 9861 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#elif ZEND_MAP_PTR_KIND == ZEND_MAP_PTR_KIND_PTR_OR_OFFSET
+				if (func && !(func->op_array.fn_flags & ZEND_ACC_CLOSURE)) {
+					if (ZEND_MAP_PTR_IS_OFFSET(func->op_array.run_time_cache)) {
+						//|	MEM_LOAD_ZTS r2, aword, compiler_globals, map_ptr_base, r1
+								if (IS_SIGNED_32BIT(&compiler_globals.map_ptr_base)) {
+						dasm_put(Dst, 5507, &compiler_globals.map_ptr_base);
+								} else {
+						dasm_put(Dst, 5999, (unsigned int)(((ptrdiff_t)&compiler_globals.map_ptr_base)), (unsigned int)((((ptrdiff_t)&compiler_globals.map_ptr_base))>>32));
+								}
+#line 9865 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	mov r2, aword [r2 + (uintptr_t)ZEND_MAP_PTR(func->op_array.run_time_cache)]
+						dasm_put(Dst, 6007, (uintptr_t)ZEND_MAP_PTR(func->op_array.run_time_cache));
+#line 9866 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if ((func->op_array.fn_flags & ZEND_ACC_IMMUTABLE)
+					        && (!func->op_array.scope || (func->op_array.scope->ce_flags & ZEND_ACC_LINKED))) {
+						if (func) {
+							//|	mov r0, EX:RX->func
+							dasm_put(Dst, 5949, Dt1(->func));
+#line 9870 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|	mov r2, aword [r0 + offsetof(zend_op_array, run_time_cache__ptr)]
+						//|	MEM_LOAD_OP_ZTS add, r2, aword, compiler_globals, map_ptr_base, r1
+						dasm_put(Dst, 6012, offsetof(zend_op_array, run_time_cache__ptr));
+								if (IS_SIGNED_32BIT(&compiler_globals.map_ptr_base)) {
+						dasm_put(Dst, 6017, &compiler_globals.map_ptr_base);
+								} else {
+						dasm_put(Dst, 6023, (unsigned int)(((ptrdiff_t)&compiler_globals.map_ptr_base)), (unsigned int)((((ptrdiff_t)&compiler_globals.map_ptr_base))>>32));
+								}
+#line 9873 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	mov r2, aword [r2]
+						dasm_put(Dst, 5517);
+#line 9874 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						/* the called op_array may be not persisted yet */
+						if (func) {
+							//|	mov r0, EX:RX->func
+							dasm_put(Dst, 5949, Dt1(->func));
+#line 9878 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|	mov r2, aword [r0 + offsetof(zend_op_array, run_time_cache__ptr)]
+						//|	test r2, 1
+						//|	jz >1
+						//|	MEM_LOAD_OP_ZTS add, r2, aword, compiler_globals, map_ptr_base, r1
+						dasm_put(Dst, 6031, offsetof(zend_op_array, run_time_cache__ptr));
+								if (IS_SIGNED_32BIT(&compiler_globals.map_ptr_base)) {
+						dasm_put(Dst, 6017, &compiler_globals.map_ptr_base);
+								} else {
+						dasm_put(Dst, 6023, (unsigned int)(((ptrdiff_t)&compiler_globals.map_ptr_base)), (unsigned int)((((ptrdiff_t)&compiler_globals.map_ptr_base))>>32));
+								}
+#line 9883 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|1:
+						//|	mov r2, aword [r2]
+						dasm_put(Dst, 6048);
+#line 9885 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					if (func) {
+						//|	mov r0, EX:RX->func
+						dasm_put(Dst, 5949, Dt1(->func));
+#line 9889 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	mov r2, aword [r0 + offsetof(zend_op_array, run_time_cache__ptr)]
+					//|	test r2, 1
+					//|	jz >1
+					//|	MEM_LOAD_OP_ZTS add, r2, aword, compiler_globals, map_ptr_base, r1
+					dasm_put(Dst, 6031, offsetof(zend_op_array, run_time_cache__ptr));
+							if (IS_SIGNED_32BIT(&compiler_globals.map_ptr_base)) {
+					dasm_put(Dst, 6017, &compiler_globals.map_ptr_base);
+							} else {
+					dasm_put(Dst, 6023, (unsigned int)(((ptrdiff_t)&compiler_globals.map_ptr_base)), (unsigned int)((((ptrdiff_t)&compiler_globals.map_ptr_base))>>32));
+							}
+#line 9894 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	mov r2, aword [r2]
+					dasm_put(Dst, 6048);
+#line 9896 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+#else
+# error "Unknown ZEND_MAP_PTR_KIND"
+#endif
+				//|	mov EX:RX->run_time_cache, r2
+				dasm_put(Dst, 5977, Dt1(->run_time_cache));
+#line 9901 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		//|	// EG(current_execute_data) = execute_data;
+		//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, RX, r1
+				if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+		dasm_put(Dst, 264, &executor_globals.current_execute_data);
+				} else {
+		dasm_put(Dst, 6054, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+				}
+#line 9906 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FP, RX
+		dasm_put(Dst, 6062);
+#line 9907 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//|	// opline = op_array->opcodes;
+		if (func && !unknown_num_args) {
+
+			for (i = call_num_args; i < func->op_array.last_var; i++) {
+				uint32_t n = EX_NUM_TO_VAR(i);
+				//|	SET_Z_TYPE_INFO RX + n, IS_UNDEF
+				dasm_put(Dst, 5588, n+offsetof(zval,u1.type_info), IS_UNDEF);
+#line 9914 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			if (call_num_args <= func->op_array.num_args) {
+				if (!trace || (trace->op == ZEND_JIT_TRACE_END
+				 && trace->stop == ZEND_JIT_TRACE_STOP_INTERPRETER)) {
+					uint32_t num_args;
+
+					if ((func->op_array.fn_flags & ZEND_ACC_HAS_TYPE_HINTS) != 0) {
+						if (trace) {
+							num_args = 0;
+						} else if (call_info) {
+							num_args = skip_valid_arguments(op_array, ssa, call_info);
+						} else {
+							num_args = call_num_args;
+						}
+					} else {
+						num_args = call_num_args;
+					}
+					if (zend_accel_in_shm(func->op_array.opcodes)) {
+						//|	LOAD_IP_ADDR (func->op_array.opcodes + num_args)
+							if (GCC_GLOBAL_REGS) {
+								if (IS_SIGNED_32BIT((func->op_array.opcodes + num_args))) {
+						dasm_put(Dst, 281, ((ptrdiff_t)(func->op_array.opcodes + num_args)));
+								} else {
+						dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes + num_args))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes + num_args)))>>32));
+								}
+							} else {
+								if (IS_SIGNED_32BIT((func->op_array.opcodes + num_args))) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(func->op_array.opcodes + num_args)));
+								} else {
+						dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes + num_args))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes + num_args)))>>32), Dt1(->opline));
+								}
+							}
+#line 9934 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov r0, EX->func
+						dasm_put(Dst, 5722, Dt1(->func));
+#line 9936 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						if (GCC_GLOBAL_REGS) {
+							//|	mov IP, aword [r0 + offsetof(zend_op_array, opcodes)]
+							dasm_put(Dst, 6067, offsetof(zend_op_array, opcodes));
+#line 9938 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							if (num_args) {
+								//|	add IP, (num_args * sizeof(zend_op))
+								dasm_put(Dst, 1559, (num_args * sizeof(zend_op)));
+#line 9940 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						} else {
+							//|	mov FCARG1a, aword [r0 + offsetof(zend_op_array, opcodes)]
+							dasm_put(Dst, 6072, offsetof(zend_op_array, opcodes));
+#line 9943 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							if (num_args) {
+								//|	add FCARG1a, (num_args * sizeof(zend_op))
+								dasm_put(Dst, 6077, (num_args * sizeof(zend_op)));
+#line 9945 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+							//|	mov aword EX->opline, FCARG1a
+							dasm_put(Dst, 6082, Dt1(->opline));
+#line 9947 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+
+					if (GCC_GLOBAL_REGS && !trace && op_array == &func->op_array
+							&& num_args >= op_array->required_num_args) {
+						/* recursive call */
+						if (ZEND_OBSERVER_ENABLED) {
+							//|	SAVE_IP
+								if (GCC_GLOBAL_REGS) {
+							dasm_put(Dst, 8, Dt1(->opline));
+								}
+#line 9955 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							//|	mov FCARG1a, FP
+							//|	EXT_CALL zend_observer_fcall_begin, r0
+							dasm_put(Dst, 66);
+									if (IS_32BIT(dasm_end) && IS_32BIT(zend_observer_fcall_begin)) {
+							dasm_put(Dst, 46, (ptrdiff_t)(zend_observer_fcall_begin));
+									} else {
+									if (IS_SIGNED_32BIT(zend_observer_fcall_begin)) {
+							dasm_put(Dst, 49, ((ptrdiff_t)zend_observer_fcall_begin));
+									} else {
+							dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_observer_fcall_begin)), (unsigned int)((((ptrdiff_t)zend_observer_fcall_begin))>>32));
+									}
+							dasm_put(Dst, 59);
+									}
+#line 9957 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+#ifdef CONTEXT_THREADED_JIT
+						//|	call >1
+						//|.cold_code
+						dasm_put(Dst, 6087);
+#line 9961 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|1:
+						//|	pop r0
+						//|	jmp =>num_args
+						//|.code
+						dasm_put(Dst, 6092, num_args);
+#line 9965 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+						//|	jmp =>num_args
+						dasm_put(Dst, 1587, num_args);
+#line 9967 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+						return 1;
+					}
+				}
+			} else {
+				if (!trace || (trace->op == ZEND_JIT_TRACE_END
+				 && trace->stop == ZEND_JIT_TRACE_STOP_INTERPRETER)) {
+					if (func && zend_accel_in_shm(func->op_array.opcodes)) {
+						//|	LOAD_IP_ADDR (func->op_array.opcodes)
+							if (GCC_GLOBAL_REGS) {
+								if (IS_SIGNED_32BIT((func->op_array.opcodes))) {
+						dasm_put(Dst, 281, ((ptrdiff_t)(func->op_array.opcodes)));
+								} else {
+						dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes)))>>32));
+								}
+							} else {
+								if (IS_SIGNED_32BIT((func->op_array.opcodes))) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(func->op_array.opcodes)));
+								} else {
+						dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes)))>>32), Dt1(->opline));
+								}
+							}
+#line 9976 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (GCC_GLOBAL_REGS) {
+						//|	mov IP, aword [r0 + offsetof(zend_op_array, opcodes)]
+						dasm_put(Dst, 6067, offsetof(zend_op_array, opcodes));
+#line 9978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov FCARG1a, aword [r0 + offsetof(zend_op_array, opcodes)]
+						//|	mov aword EX->opline, FCARG1a
+						dasm_put(Dst, 6100, offsetof(zend_op_array, opcodes), Dt1(->opline));
+#line 9981 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (!GCC_GLOBAL_REGS) {
+					//|	mov FCARG1a, FP
+					dasm_put(Dst, 66);
+#line 9985 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	EXT_CALL zend_jit_copy_extra_args_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_copy_extra_args_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_copy_extra_args_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_copy_extra_args_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_copy_extra_args_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_copy_extra_args_helper)), (unsigned int)((((ptrdiff_t)zend_jit_copy_extra_args_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 9987 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	// opline = op_array->opcodes
+			if (func && zend_accel_in_shm(func->op_array.opcodes)) {
+				//|	LOAD_IP_ADDR (func->op_array.opcodes)
+					if (GCC_GLOBAL_REGS) {
+						if (IS_SIGNED_32BIT((func->op_array.opcodes))) {
+				dasm_put(Dst, 281, ((ptrdiff_t)(func->op_array.opcodes)));
+						} else {
+				dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes)))>>32));
+						}
+					} else {
+						if (IS_SIGNED_32BIT((func->op_array.opcodes))) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(func->op_array.opcodes)));
+						} else {
+				dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(func->op_array.opcodes))), (unsigned int)((((ptrdiff_t)(func->op_array.opcodes)))>>32), Dt1(->opline));
+						}
+					}
+#line 9992 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (GCC_GLOBAL_REGS) {
+				//|	mov IP, aword [r0 + offsetof(zend_op_array, opcodes)]
+				dasm_put(Dst, 6067, offsetof(zend_op_array, opcodes));
+#line 9994 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	mov FCARG1a, aword [r0 + offsetof(zend_op_array, opcodes)]
+				//|	mov aword EX->opline, FCARG1a
+				dasm_put(Dst, 6100, offsetof(zend_op_array, opcodes), Dt1(->opline));
+#line 9997 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (func) {
+				//|	// num_args = EX_NUM_ARGS();
+				//|	mov ecx, dword [FP + offsetof(zend_execute_data, This.u2.num_args)]
+				//|	// if (UNEXPECTED(num_args > first_extra_arg))
+				//|	cmp ecx, (func->op_array.num_args)
+				dasm_put(Dst, 6109, offsetof(zend_execute_data, This.u2.num_args), (func->op_array.num_args));
+#line 10003 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	// first_extra_arg = op_array->num_args;
+				//|	mov edx, dword [r0 + offsetof(zend_op_array, num_args)]
+				//|	// num_args = EX_NUM_ARGS();
+				//|	mov ecx, dword [FP + offsetof(zend_execute_data, This.u2.num_args)]
+				//|	// if (UNEXPECTED(num_args > first_extra_arg))
+				//|	cmp ecx, edx
+				dasm_put(Dst, 6118, offsetof(zend_op_array, num_args), offsetof(zend_execute_data, This.u2.num_args));
+#line 10010 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	jg >1
+			//|.cold_code
+			dasm_put(Dst, 6128);
+#line 10013 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!GCC_GLOBAL_REGS) {
+				//|	mov FCARG1a, FP
+				dasm_put(Dst, 66);
+#line 10016 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	EXT_CALL zend_jit_copy_extra_args_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_copy_extra_args_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_copy_extra_args_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_copy_extra_args_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_copy_extra_args_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_copy_extra_args_helper)), (unsigned int)((((ptrdiff_t)zend_jit_copy_extra_args_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10018 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!func) {
+				//|	mov r0, EX->func // reload
+				dasm_put(Dst, 5722, Dt1(->func));
+#line 10020 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	mov ecx, dword [FP + offsetof(zend_execute_data, This.u2.num_args)] // reload
+			//|	jmp >1
+			//|.code
+			dasm_put(Dst, 6134, offsetof(zend_execute_data, This.u2.num_args));
+#line 10024 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!func || (func->op_array.fn_flags & ZEND_ACC_HAS_TYPE_HINTS) == 0) {
+				if (!func) {
+					//|	// if (EXPECTED((op_array->fn_flags & ZEND_ACC_HAS_TYPE_HINTS) == 0))
+					//|	test dword [r0 + offsetof(zend_op_array, fn_flags)], ZEND_ACC_HAS_TYPE_HINTS
+					//|	jnz >1
+					dasm_put(Dst, 6144, offsetof(zend_op_array, fn_flags), ZEND_ACC_HAS_TYPE_HINTS);
+#line 10029 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	// opline += num_args;
+				//|.if X64
+						ZEND_ASSERT(sizeof(zend_op) == 32);
+					//|	mov edx, ecx
+					//|	shl r2, 5
+				//|.else
+					//|	imul r2, ecx, sizeof(zend_op)
+				//|.endif
+				//|	ADD_IP r2
+				dasm_put(Dst, 6154);
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 6161);
+					} else {
+				dasm_put(Dst, 6165, Dt1(->opline));
+					}
+#line 10039 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|1:
+			//|	// if (EXPECTED((int)num_args < op_array->last_var)) {
+			dasm_put(Dst, 63);
+#line 10042 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (func) {
+				//|	mov edx, (func->op_array.last_var)
+				dasm_put(Dst, 5464, (func->op_array.last_var));
+#line 10044 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	mov edx, dword [r0 + offsetof(zend_op_array, last_var)]
+				dasm_put(Dst, 6013, offsetof(zend_op_array, last_var));
+#line 10046 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	sub edx, ecx
+			//|	jle >3 //???
+			//|	// zval *var = EX_VAR_NUM(num_args);
+			dasm_put(Dst, 6170);
+#line 10050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+//			|.if X64
+//				|	movsxd r1, ecx
+//			|.endif
+			//|	shl r1, 4
+			//|	lea r1, [FP + r1 + (ZEND_CALL_FRAME_SLOT * sizeof(zval))]
+			//|2:
+			//|	SET_Z_TYPE_INFO r1, IS_UNDEF
+			//|	sub edx, 1
+			//|	lea r1, [r1 + 16]
+			//|	jne <2
+			//|3:
+			dasm_put(Dst, 6177, (ZEND_CALL_FRAME_SLOT * sizeof(zval)), offsetof(zval,u1.type_info), IS_UNDEF, 16);
+#line 10061 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (ZEND_OBSERVER_ENABLED) {
+			//|	SAVE_IP
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+#line 10065 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, FP
+			//|	EXT_CALL zend_observer_fcall_begin, r0
+			dasm_put(Dst, 66);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_observer_fcall_begin)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_observer_fcall_begin));
+					} else {
+					if (IS_SIGNED_32BIT(zend_observer_fcall_begin)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_observer_fcall_begin));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_observer_fcall_begin)), (unsigned int)((((ptrdiff_t)zend_observer_fcall_begin))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10067 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (trace) {
+			if (!func && (opline->opcode != ZEND_DO_UCALL)) {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 10072 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+#ifdef CONTEXT_THREADED_JIT
+			//|	call ->context_threaded_call
+			dasm_put(Dst, 1835);
+#line 10076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!func && (opline->opcode != ZEND_DO_UCALL)) {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 10078 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	call ->context_threaded_call
+			dasm_put(Dst, 1835);
+#line 10080 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!func) {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 10082 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+#else
+			if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+				//|	ADD_HYBRID_SPAD
+				#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+				dasm_put(Dst, 85);
+				#endif
+#line 10086 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	JMP_IP
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 90);
+					} else {
+				dasm_put(Dst, 95, Dt1(->opline));
+					}
+#line 10087 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (GCC_GLOBAL_REGS) {
+				//|	add r4, SPAD // stack alignment
+				//|	JMP_IP
+				dasm_put(Dst, 103);
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 90);
+					} else {
+				dasm_put(Dst, 95, Dt1(->opline));
+					}
+#line 10090 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	mov FP, aword T2 // restore FP
+				//|	mov RX, aword T3 // restore IP
+				//|	add r4, NR_SPAD // stack alignment
+				//|	mov r0, 1 // ZEND_VM_ENTER
+				//|	ret
+				dasm_put(Dst, 108);
+#line 10096 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+#endif
+	}
+
+	if ((!func || func->type == ZEND_INTERNAL_FUNCTION)
+	 && (opline->opcode != ZEND_DO_UCALL)) {
+		if (!func && (opline->opcode != ZEND_DO_ICALL)) {
+			//|8:
+			dasm_put(Dst, 4196);
+#line 10105 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->opcode == ZEND_DO_FCALL_BY_NAME) {
+			if (!func) {
+				if (trace) {
+					uint32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+
+					exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+					if (!exit_addr) {
+						return 0;
+					}
+					//|	test dword [r0 + offsetof(zend_op_array, fn_flags)], ZEND_ACC_DEPRECATED
+					//|	jnz &exit_addr
+					dasm_put(Dst, 5917, offsetof(zend_op_array, fn_flags), ZEND_ACC_DEPRECATED, (ptrdiff_t)(exit_addr));
+#line 10117 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	test dword [r0 + offsetof(zend_op_array, fn_flags)], ZEND_ACC_DEPRECATED
+					//|	jnz >1
+						//|.cold_code
+						dasm_put(Dst, 5863, offsetof(zend_op_array, fn_flags), ZEND_ACC_DEPRECATED);
+#line 10121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 10122 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!GCC_GLOBAL_REGS) {
+						//|	mov FCARG1a, RX
+						dasm_put(Dst, 306);
+#line 10124 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	EXT_CALL zend_jit_deprecated_helper, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_deprecated_helper)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_deprecated_helper));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_deprecated_helper)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_deprecated_helper));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_deprecated_helper)), (unsigned int)((((ptrdiff_t)zend_jit_deprecated_helper))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 10126 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	test al, al
+					//|	mov r0, EX:RX->func // reload
+					//|	jne >1
+					//|	jmp ->exception_handler
+					//|.code
+					dasm_put(Dst, 5954, Dt1(->func));
+#line 10131 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 10132 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (func->common.fn_flags & ZEND_ACC_DEPRECATED) {
+				if (!GCC_GLOBAL_REGS) {
+					//|	mov FCARG1a, RX
+					dasm_put(Dst, 306);
+#line 10136 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	EXT_CALL zend_jit_deprecated_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_deprecated_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_deprecated_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_deprecated_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_deprecated_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_deprecated_helper)), (unsigned int)((((ptrdiff_t)zend_jit_deprecated_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 10138 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test al, al
+				//|	je ->exception_handler
+				//|	mov r0, EX:RX->func // reload
+				dasm_put(Dst, 6208, Dt1(->func));
+#line 10141 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		//|	// ZVAL_NULL(EX_VAR(opline->result.var));
+		//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+			if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+				}
+			} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(res_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 10146 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_Z_TYPE_INFO FCARG2a, IS_NULL
+		dasm_put(Dst, 292, offsetof(zval,u1.type_info), IS_NULL);
+#line 10147 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//|	// EG(current_execute_data) = execute_data;
+		//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, RX, r1
+				if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+		dasm_put(Dst, 264, &executor_globals.current_execute_data);
+				} else {
+		dasm_put(Dst, 6054, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+				}
+#line 10150 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		zend_jit_reset_last_valid_opline();
+
+		//|	// fbc->internal_function.handler(call, ret);
+		//|	mov FCARG1a, RX
+		dasm_put(Dst, 306);
+#line 10155 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (func) {
+			//|	EXT_CALL func->internal_function.handler, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(func->internal_function.handler)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(func->internal_function.handler));
+					} else {
+					if (IS_SIGNED_32BIT(func->internal_function.handler)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)func->internal_function.handler));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)func->internal_function.handler)), (unsigned int)((((ptrdiff_t)func->internal_function.handler))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10157 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	call aword [r0 + offsetof(zend_internal_function, handler)]
+			dasm_put(Dst, 6219, offsetof(zend_internal_function, handler));
+#line 10159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|	// EG(current_execute_data) = execute_data;
+		//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, FP, r0
+				if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+		dasm_put(Dst, 6224, &executor_globals.current_execute_data);
+				} else {
+		dasm_put(Dst, 6230, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+				}
+#line 10163 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//|	// zend_vm_stack_free_args(call);
+		if (func && !unknown_num_args) {
+			for (i = 0; i < call_num_args; i++ ) {
+				if (zend_jit_needs_arg_dtor(func, i, call_info)) {
+					uint32_t offset = EX_NUM_TO_VAR(i);
+					//|	ZVAL_PTR_DTOR ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset), MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN, 0, 1, opline
+						if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+							if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+								if (1) {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					dasm_put(Dst, 63);
+								} else {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+								}
+							}
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset)));
+							if (RC_MAY_BE_1(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN)) {
+								if (RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN)) {
+									if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 472);
+									} else {
+					dasm_put(Dst, 477);
+									}
+								}
+						do {
+							if (has_concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+								zend_uchar type = concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+								if (type == IS_STRING && !ZEND_DEBUG) {
+							if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+							} else {
+							if (IS_SIGNED_32BIT(_efree)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								} else if (type == IS_ARRAY) {
+									if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+										if (opline && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+										}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+							} else {
+							if (IS_SIGNED_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									} else {
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									}
+									break;
+								} else if (type == IS_OBJECT) {
+									if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+									}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+							} else {
+							if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								}
+							}
+							if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+							}
+							if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+							} else {
+							if (IS_SIGNED_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+						} while(0);
+								if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 491);
+								}
+					dasm_put(Dst, 496);
+							}
+							if (0 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+								if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & MAY_BE_REF) {
+									zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_RX, offset))+offsetof(zval, u1.v.type), IS_REFERENCE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+								}
+					dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+							if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+							} else {
+							if (IS_SIGNED_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+							}
+							if (1 && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+					dasm_put(Dst, 532);
+							}
+					dasm_put(Dst, 538);
+						}
+#line 10170 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		} else {
+			//|	mov FCARG1a, RX
+			//|	EXT_CALL zend_jit_vm_stack_free_args_helper, r0
+			dasm_put(Dst, 306);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_vm_stack_free_args_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_vm_stack_free_args_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_vm_stack_free_args_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_vm_stack_free_args_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_vm_stack_free_args_helper)), (unsigned int)((((ptrdiff_t)zend_jit_vm_stack_free_args_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10175 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (may_have_extra_named_params) {
+			//|	test byte [RX + offsetof(zend_execute_data, This.u1.type_info) + 3], (ZEND_CALL_HAS_EXTRA_NAMED_PARAMS >> 24)
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6238, offsetof(zend_execute_data, This.u1.type_info) + 3, (ZEND_CALL_HAS_EXTRA_NAMED_PARAMS >> 24));
+#line 10180 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	mov FCARG1a, aword [RX + offsetof(zend_execute_data, extra_named_params)]
+			//|	EXT_CALL zend_free_extra_named_params, r0
+			dasm_put(Dst, 6250, offsetof(zend_execute_data, extra_named_params));
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_free_extra_named_params)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_free_extra_named_params));
+					} else {
+					if (IS_SIGNED_32BIT(zend_free_extra_named_params)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_free_extra_named_params));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_free_extra_named_params)), (unsigned int)((((ptrdiff_t)zend_free_extra_named_params))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10183 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >2
+			//|.code
+			dasm_put(Dst, 2872);
+#line 10185 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 10186 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|8:
+		dasm_put(Dst, 4196);
+#line 10189 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode == ZEND_DO_FCALL) {
+			// TODO: optimize ???
+			//|	// if (UNEXPECTED(ZEND_CALL_INFO(call) & ZEND_CALL_RELEASE_THIS))
+			//|	test byte [RX + offsetof(zend_execute_data, This.u1.type_info) + 2], (ZEND_CALL_RELEASE_THIS >> 16)
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6238, offsetof(zend_execute_data, This.u1.type_info) + 2, (ZEND_CALL_RELEASE_THIS >> 16));
+#line 10195 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	GET_Z_PTR FCARG1a, RX + offsetof(zend_execute_data, This)
+			//|	// OBJ_RELEASE(object);
+			//|	OBJ_RELEASE ZREG_FCARG1, >2
+			dasm_put(Dst, 6257, offsetof(zend_execute_data, This), (ZREG_FCARG1), 0);
+				if (ZREG_FCARG1 != ZREG_FCARG1) {
+			dasm_put(Dst, 2248, (ZREG_FCARG1));
+				}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+			dasm_put(Dst, 6276, (ZREG_FCARG1), (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (ZREG_FCARG1 != ZREG_FCARG1) {
+			dasm_put(Dst, 2248, (ZREG_FCARG1));
+				}
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10199 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >2
+			//|.code
+			dasm_put(Dst, 6295);
+#line 10201 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 10202 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+		    !JIT_G(current_frame) ||
+		    !JIT_G(current_frame)->call ||
+		    !TRACE_FRAME_IS_NESTED(JIT_G(current_frame)->call) ||
+		    prev_opline->opcode == ZEND_SEND_UNPACK ||
+		    prev_opline->opcode == ZEND_SEND_ARRAY ||
+			prev_opline->opcode == ZEND_CHECK_UNDEF_ARGS) {
+
+			//|	// zend_vm_stack_free_call_frame(call);
+			//|	test byte [RX + offsetof(zend_execute_data, This.u1.type_info) + 2], (ZEND_CALL_ALLOCATED >> 16)
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6238, offsetof(zend_execute_data, This.u1.type_info) + 2, (ZEND_CALL_ALLOCATED >> 16));
+#line 10216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	mov FCARG1a, RX
+			//|	EXT_CALL zend_jit_free_call_frame, r0
+			dasm_put(Dst, 6303);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_free_call_frame)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_free_call_frame));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_free_call_frame)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_free_call_frame));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_free_call_frame)), (unsigned int)((((ptrdiff_t)zend_jit_free_call_frame))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10219 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >1
+			//|.code
+			dasm_put(Dst, 3727);
+#line 10221 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	MEM_STORE_ZTS aword, executor_globals, vm_stack_top, RX, r0
+				if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+		dasm_put(Dst, 264, &executor_globals.vm_stack_top);
+				} else {
+		dasm_put(Dst, 270, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32));
+				}
+#line 10223 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 10224 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (!RETURN_VALUE_USED(opline)) {
+			zend_class_entry *ce;
+			bool ce_is_instanceof;
+			uint32_t func_info = call_info ?
+				zend_get_func_info(call_info, ssa, &ce, &ce_is_instanceof) :
+				(MAY_BE_ANY|MAY_BE_REF|MAY_BE_RC1|MAY_BE_RCN);
+
+			/* If an exception is thrown, the return_value may stay at the
+			 * original value of null. */
+			func_info |= MAY_BE_NULL;
+
+			if (func_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				//|	ZVAL_PTR_DTOR res_addr, func_info, 1, 1, opline
+					if ((func_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+						if ((func_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+							if (1) {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 432, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				dasm_put(Dst, 63);
+							} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+							}
+						}
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 461, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						if (RC_MAY_BE_1(func_info)) {
+							if (RC_MAY_BE_N(func_info)) {
+								if (1 && RC_MAY_BE_N(func_info) && ((func_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 472);
+								} else {
+				dasm_put(Dst, 477);
+								}
+							}
+					do {
+						if (has_concrete_type((func_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((func_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((func_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((func_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+							if (1 && RC_MAY_BE_N(func_info) && ((func_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				dasm_put(Dst, 491);
+							}
+				dasm_put(Dst, 496);
+						}
+						if (1 && RC_MAY_BE_N(func_info) && ((func_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+							if ((func_info) & MAY_BE_REF) {
+								zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+							}
+				dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+						if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+						} else {
+						if (IS_SIGNED_32BIT(gc_possible_root)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+						}
+						if (1 && ((func_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+				dasm_put(Dst, 532);
+						}
+				dasm_put(Dst, 538);
+					}
+#line 10238 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		//|	// if (UNEXPECTED(EG(exception) != NULL)) {
+		//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+		dasm_put(Dst, 1591, &executor_globals.exception);
+				} else {
+		dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+				}
+#line 10243 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jne ->icall_throw_handler
+		dasm_put(Dst, 6310);
+#line 10244 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		// TODO: Can we avoid checking for interrupts after each call ???
+		if (trace && last_valid_opline != opline) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline + 1, ZEND_JIT_EXIT_TO_VM);
+
+			exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if (!exit_addr) {
+				return 0;
+			}
+		} else {
+			exit_addr = NULL;
+		}
+		if (!zend_jit_check_timeout(Dst, opline + 1, exit_addr)) {
+			return 0;
+		}
+
+		if ((!trace || !func) && opline->opcode != ZEND_DO_ICALL) {
+			//|	LOAD_IP_ADDR (opline + 1)
+				if (GCC_GLOBAL_REGS) {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 281, ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32));
+					}
+				} else {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32), Dt1(->opline));
+					}
+				}
+#line 10262 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (trace
+		 && trace->op == ZEND_JIT_TRACE_END
+		 && trace->stop == ZEND_JIT_TRACE_STOP_INTERPRETER) {
+			//|	LOAD_IP_ADDR (opline + 1)
+				if (GCC_GLOBAL_REGS) {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 281, ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32));
+					}
+				} else {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32), Dt1(->opline));
+					}
+				}
+#line 10266 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!func) {
+		//|9:
+		dasm_put(Dst, 4090);
+#line 10271 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_send_val(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr)
+{
+	uint32_t arg_num = opline->op2.num;
+	zend_jit_addr arg_addr;
+
+	ZEND_ASSERT(opline->opcode == ZEND_SEND_VAL || arg_num <= MAX_ARG_FLAG_NUM);
+
+	if (!zend_jit_reuse_ip(Dst)) {
+		return 0;
+	}
+
+	if (opline->opcode == ZEND_SEND_VAL_EX) {
+		uint32_t mask = ZEND_SEND_BY_REF << ((arg_num + 3) * 2);
+
+		ZEND_ASSERT(arg_num <= MAX_ARG_FLAG_NUM);
+
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+		 && JIT_G(current_frame)
+		 && JIT_G(current_frame)->call
+		 && JIT_G(current_frame)->call->func) {
+			if (ARG_MUST_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+				/* Don't generate code that always throws exception */
+				return 0;
+			}
+		} else if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if (!exit_addr) {
+				return 0;
+			}
+			//|	mov r0, EX:RX->func
+			//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+			//|	jnz &exit_addr
+			dasm_put(Dst, 5913, Dt1(->func), offsetof(zend_function, quick_arg_flags), mask, (ptrdiff_t)(exit_addr));
+#line 10309 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov r0, EX:RX->func
+			//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6315, Dt1(->func), offsetof(zend_function, quick_arg_flags), mask);
+#line 10314 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10315 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(op1_addr) == IS_REG) {
+				/* set type to avoid zval_ptr_dtor() on uninitialized value */
+				zend_jit_addr addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+				//|	SET_ZVAL_TYPE_INFO addr, IS_UNDEF
+					ZEND_ASSERT(Z_MODE(addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(addr)), Z_OFFSET(addr)+offsetof(zval,u1.type_info), IS_UNDEF);
+#line 10319 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 10321 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp ->throw_cannot_pass_by_ref
+			//|.code
+			dasm_put(Dst, 6330);
+#line 10323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		}
+	}
+
+	arg_addr = ZEND_ADDR_MEM_ZVAL(ZREG_RX, opline->result.var);
+
+	if (opline->op1_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, opline->op1);
+
+		//|	ZVAL_COPY_CONST arg_addr, MAY_BE_ANY, MAY_BE_ANY, zv, ZREG_R0
+			if (Z_TYPE_P(zv) > IS_TRUE) {
+				if (Z_TYPE_P(zv) == IS_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(arg_addr) == IS_REG) ? Z_REG(arg_addr) : ZREG_XMM0;
+					if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+						if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else if (!IS_SIGNED_32BIT(zv)) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			} else {
+		dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			}
+					} else {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			} else {
+		dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			}
+					}
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (dst_reg != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+				} else if (Z_TYPE_P(zv) == IS_LONG && MAY_BE_ANY == MAY_BE_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(arg_addr) == IS_REG) ? Z_REG(arg_addr) : ZREG_XMM0;
+				if (Z_LVAL_P(zv) == 0) {
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					}
+				} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+					} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+					}
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					} else {
+		dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					}
+				}
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (dst_reg != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+				} else if (Z_LVAL_P(zv) == 0 && Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+							if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+							} else {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R0), (Z_REG(arg_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+							}
+						} else {
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(zv));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(arg_addr)), Z_OFFSET(arg_addr), Z_LVAL_P(zv));
+			}
+						}
+				}
+			}
+			if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+				if (MAY_BE_ANY == MAY_BE_DOUBLE) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+					}
+				} else if (((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (MAY_BE_ANY & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+				}
+			}
+#line 10333 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REFCOUNTED_P(zv)) {
+			//|	ADDREF_CONST zv, r0
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 6336, (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+					} else {
+			dasm_put(Dst, 3828, Z_LVAL_P(zv));
+					}
+#line 10335 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+						}
+					} else if (Z_MODE(arg_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+					} else if (Z_MODE(arg_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+			}
+#line 10338 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_check_undef_args(dasm_State **Dst, const zend_op *opline)
+{
+	//|	mov FCARG1a, EX->call
+	//|	test byte [FCARG1a + offsetof(zend_execute_data, This.u1.type_info) + 3], (ZEND_CALL_MAY_HAVE_UNDEF >> 24)
+	//|	jnz >1
+	//|.cold_code
+	dasm_put(Dst, 6344, Dt1(->call), offsetof(zend_execute_data, This.u1.type_info) + 3, (ZEND_CALL_MAY_HAVE_UNDEF >> 24));
+#line 10349 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|1:
+	//|	SET_EX_OPLINE opline, r0
+	dasm_put(Dst, 63);
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+#line 10351 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	EXT_CALL zend_handle_undef_args, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_handle_undef_args)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_handle_undef_args));
+			} else {
+			if (IS_SIGNED_32BIT(zend_handle_undef_args)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_handle_undef_args));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_handle_undef_args)), (unsigned int)((((ptrdiff_t)zend_handle_undef_args))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 10352 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	test r0, r0
+	//|	jnz ->exception_handler
+	//|	jmp >2
+	//|.code
+	dasm_put(Dst, 6359);
+#line 10356 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|2:
+	dasm_put(Dst, 2222);
+#line 10357 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_send_ref(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, uint32_t op1_info, int cold)
+{
+	zend_jit_addr op1_addr, arg_addr, ref_addr;
+
+	op1_addr = OP1_ADDR();
+	arg_addr = ZEND_ADDR_MEM_ZVAL(ZREG_RX, opline->result.var);
+
+	if (!zend_jit_reuse_ip(Dst)) {
+		return 0;
+	}
+
+	if (opline->op1_type == IS_VAR) {
+		if (op1_info & MAY_BE_INDIRECT) {
+			//|	LOAD_ZVAL_ADDR r0, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 6372, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 6380, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 10375 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	// if (EXPECTED(Z_TYPE_P(ret) == IS_INDIRECT)) {
+			//|	IF_NOT_Z_TYPE r0, IS_INDIRECT, >1
+			//|	// ret = Z_INDIRECT_P(ret);
+			//|	GET_Z_PTR r0, r0
+			//|1:
+			dasm_put(Dst, 6386, offsetof(zval, u1.v.type), IS_INDIRECT);
+#line 10380 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+		}
+	} else if (opline->op1_type == IS_CV) {
+		if (op1_info & MAY_BE_UNDEF) {
+			if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SET_ZVAL_TYPE_INFO op1_addr, IS_NULL
+				dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >2
+				//|1:
+				dasm_put(Dst, 6400, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 10389 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			op1_info &= ~MAY_BE_UNDEF;
+			op1_info |= MAY_BE_NULL;
+		}
+	} else {
+		ZEND_UNREACHABLE();
+	}
+
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)) {
+		if (op1_info & MAY_BE_REF) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, >2
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10400 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GET_ZVAL_PTR r1, op1_addr
+			dasm_put(Dst, 2148, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10401 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_ADDREF r1
+			//|	SET_ZVAL_PTR arg_addr, r1
+			dasm_put(Dst, 6415, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+#line 10403 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO arg_addr, IS_REFERENCE_EX
+			dasm_put(Dst, 6426, (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+#line 10404 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >6
+			dasm_put(Dst, 6434, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 10405 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|2:
+		//|	// ZVAL_NEW_REF(arg, varptr);
+		dasm_put(Dst, 2222);
+#line 10408 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op1_type == IS_VAR) {
+			if (Z_REG(op1_addr) != ZREG_R0 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR r0, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 6372, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 6380, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 10411 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	mov aword T1, r0 // save
+			dasm_put(Dst, 3382);
+#line 10413 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EMALLOC sizeof(zend_reference), op_array, opline
+		#if ZEND_DEBUG
+				const char *filename = op_array->filename ? op_array->filename->val : NULL;
+		dasm_put(Dst, 607, sizeof(zend_reference));
+				if (IS_SIGNED_32BIT(filename)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)filename));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)filename)), (unsigned int)((((ptrdiff_t)filename))>>32));
+				}
+		dasm_put(Dst, 6447, opline->lineno);
+				if (IS_32BIT(dasm_end) && IS_32BIT(_emalloc)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_emalloc));
+				} else {
+				if (IS_SIGNED_32BIT(_emalloc)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_emalloc));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_emalloc)), (unsigned int)((((ptrdiff_t)_emalloc))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		#else
+		#ifdef HAVE_BUILTIN_CONSTANT_P
+			if (sizeof(zend_reference) > 24 && sizeof(zend_reference) <= 32) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_emalloc_32)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_emalloc_32));
+				} else {
+				if (IS_SIGNED_32BIT(_emalloc_32)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_emalloc_32));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_emalloc_32)), (unsigned int)((((ptrdiff_t)_emalloc_32))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} else {
+		dasm_put(Dst, 607, sizeof(zend_reference));
+				if (IS_32BIT(dasm_end) && IS_32BIT(_emalloc)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_emalloc));
+				} else {
+				if (IS_SIGNED_32BIT(_emalloc)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_emalloc));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_emalloc)), (unsigned int)((((ptrdiff_t)_emalloc))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			}
+		#else
+		dasm_put(Dst, 607, sizeof(zend_reference));
+				if (IS_32BIT(dasm_end) && IS_32BIT(_emalloc)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_emalloc));
+				} else {
+				if (IS_SIGNED_32BIT(_emalloc)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_emalloc));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_emalloc)), (unsigned int)((((ptrdiff_t)_emalloc))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		#endif
+		#endif
+#line 10415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov dword [r0], 2
+		//|	mov dword [r0 + offsetof(zend_reference, gc.u.type_info)], GC_REFERENCE
+		//|	mov aword [r0 + offsetof(zend_reference, sources.ptr)], 0
+		dasm_put(Dst, 6456, offsetof(zend_reference, gc.u.type_info), GC_REFERENCE, offsetof(zend_reference, sources.ptr));
+#line 10418 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, offsetof(zend_reference, val));
+		if (opline->op1_type == IS_VAR) {
+			zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R1, 0);
+
+			//|	mov r1, aword T1 // restore
+			//|	ZVAL_COPY_VALUE ref_addr, MAY_BE_ANY, val_addr, op1_info, ZREG_R2, ZREG_R2
+			dasm_put(Dst, 6475);
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(ref_addr) != IS_REG || Z_REG(ref_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(ref_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(ref_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+							}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(ref_addr)), (Z_REG(ref_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(ref_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(ref_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(ref_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(ref_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(ref_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(ref_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ref_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+						}
+					} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(ref_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(ref_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+				}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(ref_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(ref_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(ref_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(ref_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(ref_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(ref_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(ref_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+				}
+						}
+					} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+				}
+				if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(op1_info & MAY_BE_GUARD) &&
+					has_concrete_type(op1_info & MAY_BE_ANY)) {
+					if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(op1_info);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+				}
+#line 10424 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_PTR val_addr, r0
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 10425 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO val_addr, IS_REFERENCE_EX
+			dasm_put(Dst, 2208, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 10426 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	ZVAL_COPY_VALUE ref_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R1, ZREG_R2
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+							if (Z_MODE(ref_addr) != IS_REG || Z_REG(ref_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(ref_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ref_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+							}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(ref_addr)), (Z_REG(ref_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(ref_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(ref_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(ref_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_REG(ref_addr) != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ref_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(ref_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ref_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+						}
+					} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_MODE(ref_addr) == IS_REG) {
+					if (Z_REG(op1_addr) != Z_REG(ref_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+				}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) != IS_REG || Z_REG(ref_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(ref_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(ref_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(ref_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(ref_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(ref_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(ref_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ref_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ref_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+				}
+						}
+					} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+				}
+				if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(op1_info & MAY_BE_GUARD) &&
+					has_concrete_type(op1_info & MAY_BE_ANY)) {
+					if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(op1_info);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+				}
+#line 10428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_PTR op1_addr, r0
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX
+			dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 10430 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_ZVAL_PTR arg_addr, r0
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+#line 10432 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO arg_addr, IS_REFERENCE_EX
+		dasm_put(Dst, 2208, (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 10433 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|6:
+	//|	FREE_OP opline->op1_type, opline->op1, op1_info, !cold, opline
+	dasm_put(Dst, 3345);
+		if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (!cold) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+			if (RC_MAY_BE_1(op1_info)) {
+				if (RC_MAY_BE_N(op1_info)) {
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op1_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (!cold && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 10437 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|7:
+	dasm_put(Dst, 4342);
+#line 10438 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_send_var(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, uint32_t op1_info, zend_jit_addr op1_addr, zend_jit_addr op1_def_addr)
+{
+	uint32_t arg_num = opline->op2.num;
+	zend_jit_addr arg_addr;
+
+	ZEND_ASSERT((opline->opcode != ZEND_SEND_VAR_EX &&
+	     opline->opcode != ZEND_SEND_VAR_NO_REF_EX) ||
+	    arg_num <= MAX_ARG_FLAG_NUM);
+
+	arg_addr = ZEND_ADDR_MEM_ZVAL(ZREG_RX, opline->result.var);
+
+	if (!zend_jit_reuse_ip(Dst)) {
+		return 0;
+	}
+
+	if (opline->opcode == ZEND_SEND_VAR_EX) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+		 && JIT_G(current_frame)
+		 && JIT_G(current_frame)->call
+		 && JIT_G(current_frame)->call->func) {
+			if (ARG_SHOULD_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+				if (!zend_jit_send_ref(Dst, opline, op_array, op1_info, 0)) {
+					return 0;
+				}
+				return 1;
+			}
+		} else {
+			uint32_t mask = (ZEND_SEND_BY_REF|ZEND_SEND_PREFER_REF) << ((arg_num + 3) * 2);
+
+			//|	mov r0, EX:RX->func
+			//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6315, Dt1(->func), offsetof(zend_function, quick_arg_flags), mask);
+#line 10475 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10476 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_send_ref(Dst, opline, op_array, op1_info, 1)) {
+				return 0;
+			}
+			//|	jmp >7
+			//|.code
+			dasm_put(Dst, 6480);
+#line 10481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opline->opcode == ZEND_SEND_VAR_NO_REF_EX) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+		 && JIT_G(current_frame)
+		 && JIT_G(current_frame)->call
+		 && JIT_G(current_frame)->call->func) {
+			if (ARG_SHOULD_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+
+				//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R1, ZREG_R2
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+								if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+								}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+							}
+						} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							}
+						} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						}
+					}
+					if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_info & MAY_BE_ANY)) {
+						if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+							if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_info);
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+					}
+#line 10490 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+				if (!ARG_MAY_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+					if (!(op1_info & MAY_BE_REF)) {
+						/* Don't generate code that always throws exception */
+						return 0;
+					} else {
+						int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+						const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+						if (!exit_addr) {
+							return 0;
+						}
+						//|	cmp cl, IS_REFERENCE
+						//|	jne &exit_addr
+						dasm_put(Dst, 6486, IS_REFERENCE, (ptrdiff_t)(exit_addr));
+#line 10503 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				return 1;
+			}
+		} else {
+			uint32_t mask = (ZEND_SEND_BY_REF|ZEND_SEND_PREFER_REF) << ((arg_num + 3) * 2);
+
+			//|	mov r0, EX:RX->func
+			//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6315, Dt1(->func), offsetof(zend_function, quick_arg_flags), mask);
+#line 10514 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10515 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			mask = ZEND_SEND_PREFER_REF << ((arg_num + 3) * 2);
+
+			//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R1, ZREG_R2
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+							if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(arg_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+							}
+						} else if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(arg_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+						}
+					} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+				}
+						} else if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(arg_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(arg_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+				}
+						}
+					} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+				}
+				if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(op1_info & MAY_BE_GUARD) &&
+					has_concrete_type(op1_info & MAY_BE_ANY)) {
+					if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(op1_info);
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+				}
+#line 10519 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & MAY_BE_REF) {
+				//|	cmp cl, IS_REFERENCE
+				//|	je >7
+				dasm_put(Dst, 6494, IS_REFERENCE);
+#line 10522 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+			//|	jnz >7
+			dasm_put(Dst, 6503, offsetof(zend_function, quick_arg_flags), mask);
+#line 10525 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	jmp &exit_addr
+				dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10532 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 10534 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	LOAD_ZVAL_ADDR FCARG1a, arg_addr
+					if (Z_MODE(arg_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(arg_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(arg_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(arg_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(arg_addr)))>>32));
+						}
+					} else if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(arg_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(arg_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 10535 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_only_vars_by_reference, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_only_vars_by_reference)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_only_vars_by_reference));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_only_vars_by_reference)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_only_vars_by_reference));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_only_vars_by_reference)), (unsigned int)((((ptrdiff_t)zend_jit_only_vars_by_reference))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 10536 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!zend_jit_check_exception(Dst)) {
+					return 0;
+				}
+				//|	jmp >7
+				dasm_put(Dst, 3667);
+#line 10540 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			//|.code
+			dasm_put(Dst, 536);
+#line 10543 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opline->opcode == ZEND_SEND_FUNC_ARG) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+		 && JIT_G(current_frame)
+		 && JIT_G(current_frame)->call
+		 && JIT_G(current_frame)->call->func) {
+			if (ARG_SHOULD_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+				if (!zend_jit_send_ref(Dst, opline, op_array, op1_info, 0)) {
+					return 0;
+				}
+				return 1;
+			}
+		} else {
+			//|	test dword [RX + offsetof(zend_execute_data, This.u1.type_info)], ZEND_CALL_SEND_ARG_BY_REF
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 6513, offsetof(zend_execute_data, This.u1.type_info), ZEND_CALL_SEND_ARG_BY_REF);
+#line 10559 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_send_ref(Dst, opline, op_array, op1_info, 1)) {
+				return 0;
+			}
+			//|	jmp >7
+			//|.code
+			dasm_put(Dst, 6480);
+#line 10565 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & MAY_BE_UNDEF) {
+		if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+			//|	IF_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10571 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 3855, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 10572 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10573 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 10576 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1d, opline->op1.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 2237, opline->op1.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 10578 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO arg_addr, IS_NULL
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+#line 10579 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	test r0, r0
+		//|	jz ->exception_handler
+		dasm_put(Dst, 6525, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 10581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+			//|	jmp >7
+			//|.code
+			dasm_put(Dst, 6480);
+#line 10585 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|7:
+			dasm_put(Dst, 4342);
+#line 10587 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			return 1;
+		}
+	}
+
+	if (opline->opcode == ZEND_SEND_VAR_NO_REF) {
+		//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R1, ZREG_R2
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+						}
+					} else if (Z_MODE(arg_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(arg_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+					} else if (Z_MODE(arg_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(arg_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(arg_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+			}
+#line 10593 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & MAY_BE_REF) {
+			//|	cmp cl, IS_REFERENCE
+			//|	je >7
+			dasm_put(Dst, 6494, IS_REFERENCE);
+#line 10596 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if (!exit_addr) {
+				return 0;
+			}
+			//|	jmp &exit_addr
+			dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10604 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 10606 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	LOAD_ZVAL_ADDR FCARG1a, arg_addr
+				if (Z_MODE(arg_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(arg_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(arg_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(arg_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(arg_addr)))>>32));
+					}
+				} else if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(arg_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(arg_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 10607 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_jit_only_vars_by_reference, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_only_vars_by_reference)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_only_vars_by_reference));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_only_vars_by_reference)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_only_vars_by_reference));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_only_vars_by_reference)), (unsigned int)((((ptrdiff_t)zend_jit_only_vars_by_reference))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 10608 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_check_exception(Dst)) {
+				return 0;
+			}
+		}
+	} else {
+		if (op1_info & MAY_BE_REF) {
+			if (opline->op1_type == IS_CV) {
+				zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 10618 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	ZVAL_DEREF FCARG1a, op1_info
+					if (op1_info & MAY_BE_REF) {
+				dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+					}
+#line 10619 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, val_addr, op1_info, ZREG_R0, ZREG_R2
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(val_addr) == IS_REG) {
+								if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+								}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+								}
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else if (Z_MODE(val_addr) == IS_REG) {
+						if (Z_REG(arg_addr) != Z_REG(val_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(arg_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(val_addr)));
+								}
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else if (Z_MODE(val_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(val_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+							}
+						} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (Z_REG(val_addr) != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(val_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(val_addr)) {
+						if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(val_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					}
+						} else if (Z_MODE(val_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+						if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					}
+						} else if (Z_MODE(val_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							}
+						} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						}
+					}
+					if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_info & MAY_BE_ANY)) {
+						if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+							if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_info);
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+					}
+#line 10620 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	TRY_ADDREF op1_info, ah, r2
+					if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (op1_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2129);
+					}
+#line 10621 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 8);
+
+				//|	IF_ZVAL_TYPE op1_addr, IS_REFERENCE, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10625 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3855, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 10626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	// zend_refcounted *ref = Z_COUNTED_P(retval_ptr);
+				//|	GET_ZVAL_PTR FCARG1a, op1_addr
+				dasm_put(Dst, 63);
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10629 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	// ZVAL_COPY_VALUE(return_value, &ref->value);
+				//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, ref_addr, op1_info, ZREG_R0, ZREG_R2
+				dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(ref_addr) == IS_REG) {
+								if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(ref_addr)) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(ref_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+								}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(ref_addr)));
+								}
+						}
+					} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (Z_REG(arg_addr) != Z_REG(ref_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(arg_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(ref_addr)));
+								}
+						}
+					} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else if (Z_MODE(ref_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(ref_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(ref_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+							}
+						} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(ref_addr) == IS_REG) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (Z_REG(ref_addr) != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(ref_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(ref_addr)) {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(ref_addr) != IS_REG || ZREG_XMM0 != Z_REG(ref_addr)) {
+						if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+						} else if (Z_MODE(ref_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							}
+						} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						}
+					}
+					if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_info & MAY_BE_ANY)) {
+						if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+							if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_info);
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+					}
+#line 10631 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	GC_DELREF FCARG1a
+				//|	je >1
+				//|	IF_NOT_REFCOUNTED ah, >2
+				//|	GC_ADDREF r2
+				//|	jmp >2
+				//|1:
+				//|	EFREE_REG_REFERENCE
+				dasm_put(Dst, 6541);
+				#if ZEND_DEBUG
+				dasm_put(Dst, 3972);
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#else
+				#ifdef HAVE_BUILTIN_CONSTANT_P
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree_32)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree_32));
+						} else {
+						if (IS_SIGNED_32BIT(_efree_32)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree_32));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree_32)), (unsigned int)((((ptrdiff_t)_efree_32))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#else
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+				#endif
+				#endif
+#line 10638 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >2
+				//|.code
+				dasm_put(Dst, 2872);
+#line 10640 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+								if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+								}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+								}
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(op1_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+							}
+						} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							} else if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					}
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(arg_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(arg_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+					}
+							}
+						} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+						}
+					}
+					if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(op1_info & MAY_BE_GUARD) &&
+						has_concrete_type(op1_info & MAY_BE_ANY)) {
+						if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+							if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(op1_info);
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+					}
+#line 10641 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|2:
+				dasm_put(Dst, 2222);
+#line 10642 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (op1_addr != op1_def_addr) {
+				if (!zend_jit_update_regs(Dst, opline->op1.var, op1_addr, op1_def_addr, op1_info)) {
+					return 0;
+				}
+				if (Z_MODE(op1_def_addr) == IS_REG && Z_MODE(op1_addr) != IS_REG) {
+					op1_addr= op1_def_addr;
+				}
+			}
+			//|	ZVAL_COPY_VALUE arg_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+							if (Z_MODE(arg_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(arg_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+							}
+						} else if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(arg_addr)), (Z_REG(arg_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(arg_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(arg_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(arg_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (Z_REG(arg_addr) != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(arg_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(arg_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(arg_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+						}
+					} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_MODE(arg_addr) == IS_REG) {
+					if (Z_REG(op1_addr) != Z_REG(arg_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+				}
+						} else if (Z_MODE(arg_addr) == IS_REG) {
+				if (Z_MODE(op1_addr) != IS_REG || Z_REG(arg_addr) != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(arg_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(arg_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(arg_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				}
+					} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(arg_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(arg_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(arg_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+				}
+				}
+						}
+					} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(arg_addr)), Z_OFFSET(arg_addr));
+					}
+				}
+				if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(op1_info & MAY_BE_GUARD) &&
+					has_concrete_type(op1_info & MAY_BE_ANY)) {
+					if (Z_MODE(arg_addr) == IS_MEM_ZVAL) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(op1_info);
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(arg_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(arg_addr)), Z_OFFSET(arg_addr)+offsetof(zval,u1.type_info));
+				}
+#line 10653 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->op1_type == IS_CV) {
+				//|	TRY_ADDREF op1_info, ah, r2
+					if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (op1_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2129);
+					}
+#line 10655 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+	//|7:
+	dasm_put(Dst, 4342);
+#line 10659 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_check_func_arg(dasm_State **Dst, const zend_op *opline)
+{
+	uint32_t arg_num = opline->op2.num;
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+	 && JIT_G(current_frame)
+	 && JIT_G(current_frame)->call
+	 && JIT_G(current_frame)->call->func) {
+		if (ARG_SHOULD_BE_SENT_BY_REF(JIT_G(current_frame)->call->func, arg_num)) {
+			if (!TRACE_FRAME_IS_LAST_SEND_BY_REF(JIT_G(current_frame)->call)) {
+				TRACE_FRAME_SET_LAST_SEND_BY_REF(JIT_G(current_frame)->call);
+				//|	// ZEND_ADD_CALL_FLAG(EX(call), ZEND_CALL_SEND_ARG_BY_REF);
+					if (reuse_ip) {
+				//|		or dword [RX + offsetof(zend_execute_data, This.u1.type_info)], ZEND_CALL_SEND_ARG_BY_REF
+				dasm_put(Dst, 5627, offsetof(zend_execute_data, This.u1.type_info), ZEND_CALL_SEND_ARG_BY_REF);
+					} else {
+#line 10678 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|		mov r0, EX->call
+				//|		or dword [r0 + offsetof(zend_execute_data, This.u1.type_info)], ZEND_CALL_SEND_ARG_BY_REF
+				dasm_put(Dst, 6564, Dt1(->call), offsetof(zend_execute_data, This.u1.type_info), ZEND_CALL_SEND_ARG_BY_REF);
+					}
+#line 10681 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (!TRACE_FRAME_IS_LAST_SEND_BY_VAL(JIT_G(current_frame)->call)) {
+				TRACE_FRAME_SET_LAST_SEND_BY_VAL(JIT_G(current_frame)->call);
+				//|	// ZEND_DEL_CALL_FLAG(EX(call), ZEND_CALL_SEND_ARG_BY_REF);
+					if (reuse_ip) {
+				//|		and dword [RX + offsetof(zend_execute_data, This.u1.type_info)], ~ZEND_CALL_SEND_ARG_BY_REF
+				dasm_put(Dst, 6573, offsetof(zend_execute_data, This.u1.type_info), ~ZEND_CALL_SEND_ARG_BY_REF);
+					} else {
+#line 10689 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|		mov r0, EX->call
+				//|		and dword [r0 + offsetof(zend_execute_data, This.u1.type_info)], ~ZEND_CALL_SEND_ARG_BY_REF
+				dasm_put(Dst, 6579, Dt1(->call), offsetof(zend_execute_data, This.u1.type_info), ~ZEND_CALL_SEND_ARG_BY_REF);
+					}
+#line 10692 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		// if (QUICK_ARG_SHOULD_BE_SENT_BY_REF(EX(call)->func, arg_num)) {
+		uint32_t mask = (ZEND_SEND_BY_REF|ZEND_SEND_PREFER_REF) << ((arg_num + 3) * 2);
+
+		if (!zend_jit_reuse_ip(Dst)) {
+			return 0;
+		}
+
+		//|	mov r0, EX:RX->func
+		//|	test dword [r0 + offsetof(zend_function, quick_arg_flags)], mask
+		//|	jnz >1
+		//|.cold_code
+		dasm_put(Dst, 6315, Dt1(->func), offsetof(zend_function, quick_arg_flags), mask);
+#line 10706 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	// ZEND_ADD_CALL_FLAG(EX(call), ZEND_CALL_SEND_ARG_BY_REF);
+		//|	or dword [RX + offsetof(zend_execute_data, This.u1.type_info)], ZEND_CALL_SEND_ARG_BY_REF
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 6588, offsetof(zend_execute_data, This.u1.type_info), ZEND_CALL_SEND_ARG_BY_REF);
+#line 10711 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// ZEND_DEL_CALL_FLAG(EX(call), ZEND_CALL_SEND_ARG_BY_REF);
+		//|	and dword [RX + offsetof(zend_execute_data, This.u1.type_info)], ~ZEND_CALL_SEND_ARG_BY_REF
+		//|1:
+		dasm_put(Dst, 6601, offsetof(zend_execute_data, This.u1.type_info), ~ZEND_CALL_SEND_ARG_BY_REF);
+#line 10714 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_smart_true(dasm_State **Dst, const zend_op *opline, int jmp, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2)
+{
+	if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			if (jmp) {
+				//|	jmp >7
+				dasm_put(Dst, 3667);
+#line 10725 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			//|	jmp =>target_label
+			dasm_put(Dst, 1587, target_label);
+#line 10728 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			//|	jmp =>target_label2
+			dasm_put(Dst, 1587, target_label2);
+#line 10730 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 10737 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (jmp) {
+			//|	jmp >7
+			dasm_put(Dst, 3667);
+#line 10739 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_smart_false(dasm_State **Dst, const zend_op *opline, int jmp, zend_uchar smart_branch_opcode, uint32_t target_label)
+{
+	if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			//|	jmp =>target_label
+			dasm_put(Dst, 1587, target_label);
+#line 10750 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			if (jmp) {
+				//|	jmp >7
+				dasm_put(Dst, 3667);
+#line 10753 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			//|	jmp =>target_label
+			dasm_put(Dst, 1587, target_label);
+#line 10756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 10763 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (jmp) {
+			//|	jmp >7
+			dasm_put(Dst, 3667);
+#line 10765 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_defined(dasm_State **Dst, const zend_op *opline, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	uint32_t defined_label = (uint32_t)-1;
+	uint32_t undefined_label = (uint32_t)-1;
+	zval *zv = RT_CONSTANT(opline, opline->op1);
+	zend_jit_addr res_addr = 0;
+
+	if (smart_branch_opcode && !exit_addr) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			undefined_label = target_label;
+		} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			defined_label = target_label;
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			undefined_label = target_label;
+			defined_label = target_label2;
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	}
+
+	//|	// if (CACHED_PTR(opline->extended_value)) {
+	//|	mov r0, EX->run_time_cache
+	//|	mov r0, aword [r0 + opline->extended_value]
+	//|	test r0, r0
+	//|	jz >1
+	//|	test r0, 0x1
+	//|	jnz >4
+	//|.cold_code
+	dasm_put(Dst, 6609, Dt1(->run_time_cache), opline->extended_value);
+#line 10799 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|4:
+	//|	MEM_LOAD_ZTS FCARG1a, aword, executor_globals, zend_constants, FCARG1a
+	dasm_put(Dst, 538);
+			if (IS_SIGNED_32BIT(&executor_globals.zend_constants)) {
+	dasm_put(Dst, 6636, &executor_globals.zend_constants);
+			} else {
+	dasm_put(Dst, 6642, (unsigned int)(((ptrdiff_t)&executor_globals.zend_constants)), (unsigned int)((((ptrdiff_t)&executor_globals.zend_constants))>>32));
+			}
+#line 10801 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	shr r0, 1
+	//|	cmp dword [FCARG1a + offsetof(HashTable, nNumOfElements)], eax
+	dasm_put(Dst, 6650, offsetof(HashTable, nNumOfElements));
+#line 10803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (smart_branch_opcode) {
+		if (exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				//|	jz &exit_addr
+				dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 10808 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jz >3
+				dasm_put(Dst, 3934);
+#line 10810 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (undefined_label != (uint32_t)-1) {
+			//|	jz =>undefined_label
+			dasm_put(Dst, 4570, undefined_label);
+#line 10813 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jz >3
+			dasm_put(Dst, 3934);
+#line 10815 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	jz >2
+		dasm_put(Dst, 3662);
+#line 10818 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|1:
+	//|	SET_EX_OPLINE opline, r0
+	dasm_put(Dst, 63);
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+#line 10821 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	LOAD_ADDR FCARG1a, zv
+			if (IS_SIGNED_32BIT(zv)) {
+	dasm_put(Dst, 607, ((ptrdiff_t)zv));
+			} else {
+	dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)zv)), (unsigned int)((((ptrdiff_t)zv))>>32));
+			}
+#line 10822 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	EXT_CALL zend_jit_check_constant, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_check_constant)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_check_constant));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_check_constant)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_check_constant));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_check_constant)), (unsigned int)((((ptrdiff_t)zend_jit_check_constant))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 10823 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	test r0, r0
+	dasm_put(Dst, 3565);
+#line 10824 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (exit_addr) {
+		if (smart_branch_opcode == ZEND_JMPNZ) {
+			//|	jz >3
+			dasm_put(Dst, 3934);
+#line 10827 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jnz >3
+			dasm_put(Dst, 472);
+#line 10829 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	jmp &exit_addr
+		dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10831 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (smart_branch_opcode) {
+		if (undefined_label != (uint32_t)-1) {
+			//|	jz =>undefined_label
+			dasm_put(Dst, 4570, undefined_label);
+#line 10834 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jz >3
+			dasm_put(Dst, 3934);
+#line 10836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (defined_label != (uint32_t)-1) {
+			//|	jmp =>defined_label
+			dasm_put(Dst, 1587, defined_label);
+#line 10839 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jmp >3
+			dasm_put(Dst, 3893);
+#line 10841 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+		//|	jnz >1
+		//|2:
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+		dasm_put(Dst, 6657);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 10847 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >3
+		dasm_put(Dst, 6664, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 10848 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|.code
+	dasm_put(Dst, 536);
+#line 10850 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (smart_branch_opcode) {
+		if (exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPNZ) {
+				//|	jmp &exit_addr
+				dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10854 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (defined_label != (uint32_t)-1) {
+			//|	jmp =>defined_label
+			dasm_put(Dst, 1587, defined_label);
+#line 10857 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|1:
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+		dasm_put(Dst, 63);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 10861 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|3:
+	dasm_put(Dst, 496);
+#line 10863 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_type_check(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	uint32_t  mask;
+	zend_jit_addr op1_addr = OP1_ADDR();
+
+	// TODO: support for is_resource() ???
+	ZEND_ASSERT(opline->extended_value != MAY_BE_RESOURCE);
+
+	if (op1_info & MAY_BE_UNDEF) {
+		if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+			//|	IF_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10878 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 3855, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 10879 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 10880 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 10882 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1d, opline->op1.var
+		//|	EXT_CALL zend_jit_undefined_op_helper, r0
+		dasm_put(Dst, 2237, opline->op1.var);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 10884 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		zend_jit_check_exception_undef_result(Dst, opline);
+		if (opline->extended_value & MAY_BE_NULL) {
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10889 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) != 0) {
+					//|	jmp >7
+					dasm_put(Dst, 3667);
+#line 10891 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (!zend_jit_smart_true(Dst, opline, (op1_info & (MAY_BE_ANY|MAY_BE_REF)) != 0, smart_branch_opcode, target_label, target_label2)) {
+				return 0;
+			}
+		} else {
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10899 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) != 0) {
+					//|	jmp >7
+					dasm_put(Dst, 3667);
+#line 10901 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (!zend_jit_smart_false(Dst, opline, (op1_info & (MAY_BE_ANY|MAY_BE_REF)) != 0, smart_branch_opcode, target_label)) {
+				return 0;
+			}
+		}
+		if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+			//|.code
+			dasm_put(Dst, 536);
+#line 10908 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & (MAY_BE_ANY|MAY_BE_REF)) {
+		mask = opline->extended_value;
+		if (!(op1_info & MAY_BE_GUARD) && !(op1_info & (MAY_BE_ANY - mask))) {
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 10915 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10918 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (!zend_jit_smart_true(Dst, opline, 0, smart_branch_opcode, target_label, target_label2)) {
+				return 0;
+			}
+	    } else if (!(op1_info & MAY_BE_GUARD) && !(op1_info & mask)) {
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 10924 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 10927 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (!zend_jit_smart_false(Dst, opline, 0, smart_branch_opcode, target_label)) {
+				return 0;
+			}
+		} else {
+			bool invert = 0;
+			zend_uchar type;
+
+			switch (mask) {
+				case MAY_BE_NULL:   type = IS_NULL;   break;
+				case MAY_BE_FALSE:  type = IS_FALSE;  break;
+				case MAY_BE_TRUE:   type = IS_TRUE;   break;
+				case MAY_BE_LONG:   type = IS_LONG;   break;
+				case MAY_BE_DOUBLE: type = IS_DOUBLE; break;
+				case MAY_BE_STRING: type = IS_STRING; break;
+				case MAY_BE_ARRAY:  type = IS_ARRAY;  break;
+				case MAY_BE_OBJECT: type = IS_OBJECT; break;
+				case MAY_BE_ANY - MAY_BE_NULL:     type = IS_NULL;   invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_FALSE:    type = IS_FALSE;  invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_TRUE:     type = IS_TRUE;   invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_LONG:     type = IS_LONG;   invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_DOUBLE:   type = IS_DOUBLE; invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_STRING:   type = IS_STRING; invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_ARRAY:    type = IS_ARRAY;  invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_OBJECT:   type = IS_OBJECT; invert = 1; break;
+				case MAY_BE_ANY - MAY_BE_RESOURCE: type = IS_OBJECT; invert = 1; break;
+				default:
+					type = 0;
+			}
+
+			if (op1_info & MAY_BE_REF) {
+				//|	LOAD_ZVAL_ADDR r0, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 6372, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 6380, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 10959 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	ZVAL_DEREF r0, op1_info
+					if (op1_info & MAY_BE_REF) {
+				dasm_put(Dst, 3747, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+					}
+#line 10960 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (type == 0) {
+				if (smart_branch_opcode &&
+				    (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+				    (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if ((op1_info) & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						//|	// if (Z_REFCOUNTED_P(cv)) {
+						//|	IF_ZVAL_REFCOUNTED op1_addr, >1
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10968 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|.cold_code
+						dasm_put(Dst, 432, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 10969 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|1:
+						dasm_put(Dst, 63);
+#line 10970 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	// if (!Z_DELREF_P(cv)) {
+					//|	GET_ZVAL_PTR FCARG1a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 10973 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GC_DELREF FCARG1a
+					dasm_put(Dst, 461, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 10974 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							//|	jnz >3
+							dasm_put(Dst, 472);
+#line 10977 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						if (op1_info & MAY_BE_REF) {
+							//|	mov al, byte [r0 + 8]
+							dasm_put(Dst, 6677, 8);
+#line 10980 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	mov al, byte [FP + opline->op1.var + 8]
+							dasm_put(Dst, 6681, opline->op1.var + 8);
+#line 10982 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|	mov byte T1, al // save
+						//|	// zval_dtor_func(r);
+						//|	ZVAL_DTOR_FUNC op1_info, opline
+						dasm_put(Dst, 6686);
+							do {
+								if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+									zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+									if (type == IS_STRING && !ZEND_DEBUG) {
+								if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+								} else {
+								if (IS_SIGNED_32BIT(_efree)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										break;
+									} else if (type == IS_ARRAY) {
+										if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+											if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+											}
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+								} else {
+								if (IS_SIGNED_32BIT(zend_array_destroy)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										} else {
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										}
+										break;
+									} else if (type == IS_OBJECT) {
+										if (opline) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+										}
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+								} else {
+								if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										break;
+									}
+								}
+								if (opline) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+								}
+								if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+								} else {
+								if (IS_SIGNED_32BIT(rc_dtor_func)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+							} while(0);
+#line 10986 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	mov cl, byte T1 // restore
+						//|jmp >2
+						dasm_put(Dst, 6690);
+#line 10988 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					if ((op1_info) & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (!RC_MAY_BE_1(op1_info)) {
+							//|	jmp >3
+							dasm_put(Dst, 3893);
+#line 10992 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|.code
+						dasm_put(Dst, 536);
+#line 10994 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|3:
+					dasm_put(Dst, 496);
+#line 10996 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & MAY_BE_REF) {
+						//|	mov cl, byte [r0 + 8]
+						dasm_put(Dst, 6698, 8);
+#line 10998 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov cl, byte [FP + opline->op1.var + 8]
+						dasm_put(Dst, 6702, opline->op1.var + 8);
+#line 11000 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|2:
+					dasm_put(Dst, 2222);
+#line 11002 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					if (op1_info & MAY_BE_REF) {
+						//|	mov cl, byte [r0 + 8]
+						dasm_put(Dst, 6698, 8);
+#line 11005 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov cl, byte [FP + opline->op1.var + 8]
+						dasm_put(Dst, 6702, opline->op1.var + 8);
+#line 11007 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				//|	mov eax, 1
+				//|	shl eax, cl
+				//|	test eax, mask
+				dasm_put(Dst, 6707, mask);
+#line 11012 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (exit_addr) {
+					if (smart_branch_opcode == ZEND_JMPNZ) {
+						//|	jne &exit_addr
+						dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 11015 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	je &exit_addr
+						dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 11017 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else if (smart_branch_opcode) {
+					if (smart_branch_opcode == ZEND_JMPZ) {
+						//|	je =>target_label
+						dasm_put(Dst, 4570, target_label);
+#line 11021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (smart_branch_opcode == ZEND_JMPNZ) {
+						//|	jne =>target_label
+						dasm_put(Dst, 1831, target_label);
+#line 11023 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+						//|	je =>target_label
+						//|	jmp =>target_label2
+						dasm_put(Dst, 6717, target_label, target_label2);
+#line 11026 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				} else {
+					zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+					//|	setne al
+					//|	movzx eax, al
+					//|	add eax, 2
+					//|	SET_ZVAL_TYPE_INFO res_addr, eax
+					dasm_put(Dst, 6724);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 11036 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+					dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+						if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+						if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+							if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+								if (1) {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					dasm_put(Dst, 63);
+								} else {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+								}
+							}
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+							if (RC_MAY_BE_1(op1_info)) {
+								if (RC_MAY_BE_N(op1_info)) {
+									if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 472);
+									} else {
+					dasm_put(Dst, 477);
+									}
+								}
+						do {
+							if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+								zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+								if (type == IS_STRING && !ZEND_DEBUG) {
+							if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+							} else {
+							if (IS_SIGNED_32BIT(_efree)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								} else if (type == IS_ARRAY) {
+									if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+										if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+										}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+							} else {
+							if (IS_SIGNED_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									} else {
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									}
+									break;
+								} else if (type == IS_OBJECT) {
+									if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+									}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+							} else {
+							if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								}
+							}
+							if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+							}
+							if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+							} else {
+							if (IS_SIGNED_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+						} while(0);
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 491);
+								}
+					dasm_put(Dst, 496);
+							}
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+								if ((op1_info) & MAY_BE_REF) {
+									zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+								}
+					dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+							if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+							} else {
+							if (IS_SIGNED_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+							}
+							if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+					dasm_put(Dst, 532);
+							}
+					dasm_put(Dst, 538);
+						}
+						}
+#line 11037 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (smart_branch_opcode &&
+				    (opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+				    (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if ((op1_info) & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						//|	// if (Z_REFCOUNTED_P(cv)) {
+						//|	IF_ZVAL_REFCOUNTED op1_addr, >1
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11045 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|.cold_code
+						dasm_put(Dst, 432, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 11046 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|1:
+						dasm_put(Dst, 63);
+#line 11047 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	// if (!Z_DELREF_P(cv)) {
+					//|	GET_ZVAL_PTR FCARG1a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GC_DELREF FCARG1a
+					dasm_put(Dst, 461, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 11051 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							//|	jnz >3
+							dasm_put(Dst, 472);
+#line 11054 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						if (op1_info & MAY_BE_REF) {
+							//|	mov al, byte [r0 + 8]
+							dasm_put(Dst, 6677, 8);
+#line 11057 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	mov al, byte [FP + opline->op1.var + 8]
+							dasm_put(Dst, 6681, opline->op1.var + 8);
+#line 11059 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|	mov byte T1, al // save
+						//|	// zval_dtor_func(r);
+						//|	ZVAL_DTOR_FUNC op1_info, opline
+						dasm_put(Dst, 6686);
+							do {
+								if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+									zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+									if (type == IS_STRING && !ZEND_DEBUG) {
+								if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+								} else {
+								if (IS_SIGNED_32BIT(_efree)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										break;
+									} else if (type == IS_ARRAY) {
+										if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+											if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+											}
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+								} else {
+								if (IS_SIGNED_32BIT(zend_array_destroy)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										} else {
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										}
+										break;
+									} else if (type == IS_OBJECT) {
+										if (opline) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+										}
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+								} else {
+								if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+										break;
+									}
+								}
+								if (opline) {
+							if (opline == last_valid_opline) {
+								zend_jit_use_last_valid_opline();
+							if (GCC_GLOBAL_REGS) {
+						dasm_put(Dst, 8, Dt1(->opline));
+							}
+							} else {
+								if (IS_SIGNED_32BIT(opline)) {
+						dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+								} else {
+						dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+								}
+								if (!GCC_GLOBAL_REGS) {
+									zend_jit_reset_last_valid_opline();
+								}
+							}
+								}
+								if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+								} else {
+								if (IS_SIGNED_32BIT(rc_dtor_func)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+							} while(0);
+#line 11063 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	mov cl, byte T1 // restore
+						//|jmp >2
+						dasm_put(Dst, 6690);
+#line 11065 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					if ((op1_info) & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (!RC_MAY_BE_1(op1_info)) {
+							//|	jmp >3
+							dasm_put(Dst, 3893);
+#line 11069 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+						//|.code
+						dasm_put(Dst, 536);
+#line 11071 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|3:
+					dasm_put(Dst, 496);
+#line 11073 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & MAY_BE_REF) {
+						//|	mov cl, byte [r0 + 8]
+						dasm_put(Dst, 6698, 8);
+#line 11075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	mov cl, byte [FP + opline->op1.var + 8]
+						dasm_put(Dst, 6702, opline->op1.var + 8);
+#line 11077 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|2:
+					//|	cmp cl, type
+					dasm_put(Dst, 6734, type);
+#line 11080 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					if (op1_info & MAY_BE_REF) {
+						//|	cmp byte [r0 + 8], type
+						dasm_put(Dst, 3765, 8, type);
+#line 11083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	cmp byte [FP + opline->op1.var + 8], type
+						dasm_put(Dst, 6741, opline->op1.var + 8, type);
+#line 11085 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (exit_addr) {
+					if (invert) {
+						if (smart_branch_opcode == ZEND_JMPNZ) {
+							//|	jne &exit_addr
+							dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 11091 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	je &exit_addr
+							dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 11093 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					} else {
+						if (smart_branch_opcode == ZEND_JMPNZ) {
+							//|	je &exit_addr
+							dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 11097 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	jne &exit_addr
+							dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 11099 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+				} else if (smart_branch_opcode) {
+					if (invert) {
+						if (smart_branch_opcode == ZEND_JMPZ) {
+							//|	je =>target_label
+							dasm_put(Dst, 4570, target_label);
+#line 11105 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (smart_branch_opcode == ZEND_JMPNZ) {
+							//|	jne =>target_label
+							dasm_put(Dst, 1831, target_label);
+#line 11107 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+							//|	je =>target_label
+							//|	jmp =>target_label2
+							dasm_put(Dst, 6717, target_label, target_label2);
+#line 11110 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					} else {
+						if (smart_branch_opcode == ZEND_JMPZ) {
+							//|	jne =>target_label
+							dasm_put(Dst, 1831, target_label);
+#line 11116 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (smart_branch_opcode == ZEND_JMPNZ) {
+							//|	je =>target_label
+							dasm_put(Dst, 4570, target_label);
+#line 11118 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+							//|	jne =>target_label
+							//|	jmp =>target_label2
+							dasm_put(Dst, 6747, target_label, target_label2);
+#line 11121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+				} else {
+					zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+					if (invert) {
+						//|	setne al
+						dasm_put(Dst, 4535);
+#line 11130 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	sete al
+						dasm_put(Dst, 4531);
+#line 11132 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	movzx eax, al
+					//|	add eax, 2
+					//|	SET_ZVAL_TYPE_INFO res_addr, eax
+					dasm_put(Dst, 4598);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 11136 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+					dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+						if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+						if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+							if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+								if (1) {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					dasm_put(Dst, 63);
+								} else {
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+								}
+							}
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+							if (RC_MAY_BE_1(op1_info)) {
+								if (RC_MAY_BE_N(op1_info)) {
+									if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 472);
+									} else {
+					dasm_put(Dst, 477);
+									}
+								}
+						do {
+							if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+								zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+								if (type == IS_STRING && !ZEND_DEBUG) {
+							if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+							} else {
+							if (IS_SIGNED_32BIT(_efree)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								} else if (type == IS_ARRAY) {
+									if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+										if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+										}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+							} else {
+							if (IS_SIGNED_32BIT(zend_array_destroy)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									} else {
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									}
+									break;
+								} else if (type == IS_OBJECT) {
+									if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+									}
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+							} else {
+							if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+									break;
+								}
+							}
+							if (opline) {
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+							}
+							if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+							} else {
+							if (IS_SIGNED_32BIT(rc_dtor_func)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+						} while(0);
+								if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					dasm_put(Dst, 491);
+								}
+					dasm_put(Dst, 496);
+							}
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+								if ((op1_info) & MAY_BE_REF) {
+									zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+						ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+								}
+					dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+							if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+							} else {
+							if (IS_SIGNED_32BIT(gc_possible_root)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+							}
+							if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+					dasm_put(Dst, 532);
+							}
+					dasm_put(Dst, 538);
+						}
+						}
+#line 11137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+	    }
+	}
+
+	//|7:
+	dasm_put(Dst, 4342);
+#line 11143 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_leave_frame(dasm_State **Dst)
+{
+	//|	// EG(current_execute_data) = EX(prev_execute_data);
+	//|	mov r0, EX->prev_execute_data
+	//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, r0, r2
+	dasm_put(Dst, 5722, Dt1(->prev_execute_data));
+			if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+	dasm_put(Dst, 6754, &executor_globals.current_execute_data);
+			} else {
+	dasm_put(Dst, 6760, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+			}
+#line 11152 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_free_cvs(dasm_State **Dst)
+{
+	//|	// EG(current_execute_data) = EX(prev_execute_data);
+	//|	mov FCARG1a, EX->prev_execute_data
+	//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, FCARG1a, r0
+	dasm_put(Dst, 311, Dt1(->prev_execute_data));
+			if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+	dasm_put(Dst, 316, &executor_globals.current_execute_data);
+			} else {
+	dasm_put(Dst, 322, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+			}
+#line 11160 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// zend_free_compiled_variables(execute_data);
+	//|	mov FCARG1a, FP
+	//|	EXT_CALL zend_free_compiled_variables, r0
+	dasm_put(Dst, 66);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_free_compiled_variables)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_free_compiled_variables));
+			} else {
+			if (IS_SIGNED_32BIT(zend_free_compiled_variables)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_free_compiled_variables));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_free_compiled_variables)), (unsigned int)((((ptrdiff_t)zend_free_compiled_variables))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 11163 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_free_cv(dasm_State **Dst, uint32_t info, uint32_t var)
+{
+	if (info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+		uint32_t offset = EX_NUM_TO_VAR(var);
+		//| ZVAL_PTR_DTOR ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset), info, 1, 1, NULL
+			if ((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (1) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset)));
+				if (RC_MAY_BE_1(info)) {
+					if (RC_MAY_BE_N(info)) {
+						if (1 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (NULL && ((info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (NULL) {
+			if (NULL == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(NULL)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (1 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (1 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, offset))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (1 && ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+#line 11171 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_free_op(dasm_State **Dst, const zend_op *opline, uint32_t info, uint32_t var_offset)
+{
+	if (info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+		//| ZVAL_PTR_DTOR ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset), info, 0, 1, opline
+			if ((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (1) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset)));
+				if (RC_MAY_BE_1(info)) {
+					if (RC_MAY_BE_N(info)) {
+						if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, var_offset))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (1 && ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+#line 11179 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_leave_func(dasm_State          **Dst,
+                               const zend_op_array  *op_array,
+                               const zend_op        *opline,
+                               uint32_t              op1_info,
+                               bool             left_frame,
+                               zend_jit_trace_rec   *trace,
+                               zend_jit_trace_info  *trace_info,
+                               int                   indirect_var_access,
+                               int                   may_throw)
+{
+	bool may_be_top_frame =
+		JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+		!JIT_G(current_frame) ||
+		!TRACE_FRAME_IS_NESTED(JIT_G(current_frame));
+	bool may_need_call_helper =
+		indirect_var_access || /* may have symbol table */
+		!op_array->function_name || /* may have symbol table */
+		may_be_top_frame ||
+		(op_array->fn_flags & ZEND_ACC_VARIADIC) || /* may have extra named args */
+		JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+		!JIT_G(current_frame) ||
+		TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)) == -1 || /* unknown number of args */
+		(uint32_t)TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)) > op_array->num_args; /* extra args */
+	bool may_need_release_this =
+		!(op_array->fn_flags & ZEND_ACC_CLOSURE) &&
+		op_array->scope &&
+		!(op_array->fn_flags & ZEND_ACC_STATIC) &&
+		(JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+		 !JIT_G(current_frame) ||
+		 !TRACE_FRAME_NO_NEED_RELEASE_THIS(JIT_G(current_frame)));
+
+	if (may_need_release_this) {
+		//|	mov FCARG1d, dword [FP + offsetof(zend_execute_data, This.u1.type_info)]
+		dasm_put(Dst, 218, offsetof(zend_execute_data, This.u1.type_info));
+#line 11216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (may_need_call_helper) {
+		if (!left_frame) {
+			left_frame = 1;
+		    if (!zend_jit_leave_frame(Dst)) {
+				return 0;
+		    }
+		}
+		/* ZEND_CALL_FAKE_CLOSURE handled on slow path to eliminate check for ZEND_CALL_CLOSURE on fast path */
+		if (may_need_release_this) {
+			//|	test FCARG1d, (ZEND_CALL_TOP|ZEND_CALL_HAS_SYMBOL_TABLE|ZEND_CALL_FREE_EXTRA_ARGS|ZEND_CALL_ALLOCATED|ZEND_CALL_HAS_EXTRA_NAMED_PARAMS|ZEND_CALL_FAKE_CLOSURE)
+			dasm_put(Dst, 6768, (ZEND_CALL_TOP|ZEND_CALL_HAS_SYMBOL_TABLE|ZEND_CALL_FREE_EXTRA_ARGS|ZEND_CALL_ALLOCATED|ZEND_CALL_HAS_EXTRA_NAMED_PARAMS|ZEND_CALL_FAKE_CLOSURE));
+#line 11227 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	test dword [FP + offsetof(zend_execute_data, This.u1.type_info)], (ZEND_CALL_TOP|ZEND_CALL_HAS_SYMBOL_TABLE|ZEND_CALL_FREE_EXTRA_ARGS|ZEND_CALL_ALLOCATED|ZEND_CALL_HAS_EXTRA_NAMED_PARAMS|ZEND_CALL_FAKE_CLOSURE)
+			dasm_put(Dst, 6773, offsetof(zend_execute_data, This.u1.type_info), (ZEND_CALL_TOP|ZEND_CALL_HAS_SYMBOL_TABLE|ZEND_CALL_FREE_EXTRA_ARGS|ZEND_CALL_ALLOCATED|ZEND_CALL_HAS_EXTRA_NAMED_PARAMS|ZEND_CALL_FAKE_CLOSURE));
+#line 11229 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (trace && trace->op != ZEND_JIT_TRACE_END) {
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 441);
+#line 11233 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 11234 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!GCC_GLOBAL_REGS) {
+				//|	mov FCARG1a, FP
+				dasm_put(Dst, 66);
+#line 11236 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	EXT_CALL zend_jit_leave_func_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_leave_func_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_leave_func_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_leave_func_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_leave_func_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_leave_func_helper)), (unsigned int)((((ptrdiff_t)zend_jit_leave_func_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 11238 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			if (may_be_top_frame) {
+				// TODO: try to avoid this check ???
+				if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+#if 0
+					/* this check should be handled by the following OPLINE guard */
+					//|	cmp IP, zend_jit_halt_op
+					//|	je ->trace_halt
+					dasm_put(Dst, 1769, zend_jit_halt_op);
+#line 11246 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+				} else if (GCC_GLOBAL_REGS) {
+					//|	test IP, IP
+					//|	je ->trace_halt
+					dasm_put(Dst, 1779);
+#line 11250 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	test eax, eax
+					//|	jl ->trace_halt
+					dasm_put(Dst, 1788);
+#line 11253 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+
+			if (!GCC_GLOBAL_REGS) {
+				//|	// execute_data = EG(current_execute_data)
+				//|	MEM_LOAD_ZTS FP, aword, executor_globals, current_execute_data, r0
+						if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+				dasm_put(Dst, 71, &executor_globals.current_execute_data);
+						} else {
+				dasm_put(Dst, 77, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+						}
+#line 11259 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	jmp >8
+			//|.code
+			dasm_put(Dst, 6780);
+#line 11262 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jnz ->leave_function_handler
+			dasm_put(Dst, 6786);
+#line 11264 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op_array->fn_flags & ZEND_ACC_CLOSURE) {
+		if (!left_frame) {
+			left_frame = 1;
+		    if (!zend_jit_leave_frame(Dst)) {
+				return 0;
+		    }
+		}
+		//|	// OBJ_RELEASE(ZEND_CLOSURE_OBJECT(EX(func)));
+		//|	mov FCARG1a, EX->func
+		//|	sub FCARG1a, sizeof(zend_object)
+		//|	OBJ_RELEASE ZREG_FCARG1, >4
+		dasm_put(Dst, 6791, Dt1(->func), sizeof(zend_object), (ZREG_FCARG1), 0);
+			if (ZREG_FCARG1 != ZREG_FCARG1) {
+		dasm_put(Dst, 2248, (ZREG_FCARG1));
+			}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		dasm_put(Dst, 6813, (ZREG_FCARG1), (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (ZREG_FCARG1 != ZREG_FCARG1) {
+		dasm_put(Dst, 2248, (ZREG_FCARG1));
+			}
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 11278 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|4:
+		dasm_put(Dst, 6832);
+#line 11279 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (may_need_release_this) {
+		if (!left_frame) {
+			left_frame = 1;
+		    if (!zend_jit_leave_frame(Dst)) {
+				return 0;
+		    }
+		}
+		//|	// if (call_info & ZEND_CALL_RELEASE_THIS)
+		//|	test FCARG1d, ZEND_CALL_RELEASE_THIS
+		//|	je >4
+		//|	// zend_object *object = Z_OBJ(execute_data->This);
+		//|	mov FCARG1a, EX->This.value.obj
+		//|	// OBJ_RELEASE(object);
+		//|	OBJ_RELEASE ZREG_FCARG1, >4
+		dasm_put(Dst, 6837, ZEND_CALL_RELEASE_THIS, Dt1(->This.value.obj), (ZREG_FCARG1), 0);
+			if (ZREG_FCARG1 != ZREG_FCARG1) {
+		dasm_put(Dst, 2248, (ZREG_FCARG1));
+			}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		dasm_put(Dst, 6813, (ZREG_FCARG1), (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (ZREG_FCARG1 != ZREG_FCARG1) {
+		dasm_put(Dst, 2248, (ZREG_FCARG1));
+			}
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 11293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|4:
+		dasm_put(Dst, 6832);
+#line 11294 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		// TODO: avoid EG(excption) check for $this->foo() calls
+		may_throw = 1;
+	}
+
+	//|	// EG(vm_stack_top) = (zval*)execute_data;
+	//|	MEM_STORE_ZTS aword, executor_globals, vm_stack_top, FP, r0
+			if (IS_SIGNED_32BIT(&executor_globals.vm_stack_top)) {
+	dasm_put(Dst, 6224, &executor_globals.vm_stack_top);
+			} else {
+	dasm_put(Dst, 6230, (unsigned int)(((ptrdiff_t)&executor_globals.vm_stack_top)), (unsigned int)((((ptrdiff_t)&executor_globals.vm_stack_top))>>32));
+			}
+#line 11300 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// execute_data = EX(prev_execute_data);
+	//|	mov FP, EX->prev_execute_data
+	dasm_put(Dst, 6862, Dt1(->prev_execute_data));
+#line 11302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (!left_frame) {
+		//|	// EG(current_execute_data) = execute_data;
+		//|	MEM_STORE_ZTS aword, executor_globals, current_execute_data, FP, r0
+				if (IS_SIGNED_32BIT(&executor_globals.current_execute_data)) {
+		dasm_put(Dst, 6224, &executor_globals.current_execute_data);
+				} else {
+		dasm_put(Dst, 6230, (unsigned int)(((ptrdiff_t)&executor_globals.current_execute_data)), (unsigned int)((((ptrdiff_t)&executor_globals.current_execute_data))>>32));
+				}
+#line 11306 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 11309 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (trace) {
+		if (trace->op != ZEND_JIT_TRACE_END
+		 && (JIT_G(current_frame) && !TRACE_FRAME_IS_UNKNOWN_RETURN(JIT_G(current_frame)))) {
+			zend_jit_reset_last_valid_opline();
+		} else {
+			//|	LOAD_IP
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 0, Dt1(->opline));
+				}
+#line 11315 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	ADD_IP sizeof(zend_op)
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 1559, sizeof(zend_op));
+				} else {
+			dasm_put(Dst, 1564, Dt1(->opline), sizeof(zend_op));
+				}
+#line 11316 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|8:
+		dasm_put(Dst, 4196);
+#line 11319 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (trace->op == ZEND_JIT_TRACE_BACK
+		 && (!JIT_G(current_frame) || TRACE_FRAME_IS_UNKNOWN_RETURN(JIT_G(current_frame)))) {
+			const zend_op *next_opline = trace->opline;
+
+			if ((opline->op1_type & (IS_VAR|IS_TMP_VAR))
+			 && (op1_info & MAY_BE_RC1)
+			 && (op1_info & (MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_ARRAY))) {
+				/* exception might be thrown during destruction of unused return value */
+				//|	// if (EG(exception))
+				//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+						if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+				dasm_put(Dst, 1591, &executor_globals.exception);
+						} else {
+				dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+						}
+#line 11330 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jne ->leave_throw_handler
+				dasm_put(Dst, 6867);
+#line 11331 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			do {
+				trace++;
+			} while (trace->op == ZEND_JIT_TRACE_INIT_CALL);
+			ZEND_ASSERT(trace->op == ZEND_JIT_TRACE_VM || trace->op == ZEND_JIT_TRACE_END);
+			next_opline = trace->opline;
+			ZEND_ASSERT(next_opline != NULL);
+
+			if (trace->op == ZEND_JIT_TRACE_END
+			 && trace->stop == ZEND_JIT_TRACE_STOP_RECURSIVE_RET) {
+				trace_info->flags |= ZEND_JIT_TRACE_LOOP;
+				//|	CMP_IP next_opline
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 1800, next_opline);
+					} else {
+				dasm_put(Dst, 1806, Dt1(->opline), next_opline);
+					}
+#line 11343 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	je =>0 // LOOP
+				dasm_put(Dst, 4570, 0);
+#line 11344 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#ifdef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+				//|	JMP_IP
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 90);
+					} else {
+				dasm_put(Dst, 95, Dt1(->opline));
+					}
+#line 11346 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+				//|	jmp ->trace_escape
+				dasm_put(Dst, 1658);
+#line 11348 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+			} else {
+				//|	CMP_IP next_opline
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 1800, next_opline);
+					} else {
+				dasm_put(Dst, 1806, Dt1(->opline), next_opline);
+					}
+#line 11351 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jne ->trace_escape
+				dasm_put(Dst, 6872);
+#line 11352 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			zend_jit_set_last_valid_opline(trace->opline);
+
+			return 1;
+		} else if (may_throw ||
+				(((opline->op1_type & (IS_VAR|IS_TMP_VAR))
+				  && (op1_info & MAY_BE_RC1)
+				  && (op1_info & (MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_ARRAY)))
+				 && (!JIT_G(current_frame) || TRACE_FRAME_IS_RETURN_VALUE_UNUSED(JIT_G(current_frame))))) {
+			//|	// if (EG(exception))
+			//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+					if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+			dasm_put(Dst, 1591, &executor_globals.exception);
+					} else {
+			dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+					}
+#line 11364 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jne ->leave_throw_handler
+			dasm_put(Dst, 6867);
+#line 11365 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		return 1;
+	} else {
+		//|	// if (EG(exception))
+		//|	MEM_CMP_ZTS aword, executor_globals, exception, 0, r0
+				if (IS_SIGNED_32BIT(&executor_globals.exception)) {
+		dasm_put(Dst, 1591, &executor_globals.exception);
+				} else {
+		dasm_put(Dst, 1598, (unsigned int)(((ptrdiff_t)&executor_globals.exception)), (unsigned int)((((ptrdiff_t)&executor_globals.exception))>>32));
+				}
+#line 11371 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	LOAD_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 0, Dt1(->opline));
+			}
+#line 11372 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jne ->leave_throw_handler
+		//|	// opline = EX(opline) + 1
+		//|	ADD_IP sizeof(zend_op)
+		dasm_put(Dst, 6867);
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 1559, sizeof(zend_op));
+			} else {
+		dasm_put(Dst, 1564, Dt1(->opline), sizeof(zend_op));
+			}
+#line 11375 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (zend_jit_vm_kind == ZEND_VM_KIND_HYBRID) {
+		//|	ADD_HYBRID_SPAD
+		#ifndef ZEND_VM_HYBRID_JIT_RED_ZONE_SIZE
+		dasm_put(Dst, 85);
+		#endif
+#line 11379 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#ifdef CONTEXT_THREADED_JIT
+		//|	push aword [IP]
+		//|	ret
+		dasm_put(Dst, 6877);
+#line 11382 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 11384 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+	} else if (GCC_GLOBAL_REGS) {
+		//|	add r4, SPAD // stack alignment
+		dasm_put(Dst, 103);
+#line 11387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#ifdef CONTEXT_THREADED_JIT
+		//|	push aword [IP]
+		//|	ret
+		dasm_put(Dst, 6877);
+#line 11390 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+		//|	JMP_IP
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 90);
+			} else {
+		dasm_put(Dst, 95, Dt1(->opline));
+			}
+#line 11392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+	} else {
+#ifdef CONTEXT_THREADED_JIT
+		ZEND_UNREACHABLE();
+		// TODO: context threading can't work without GLOBAL REGS because we have to change
+		//       the value of execute_data in execute_ex()
+		//|	mov FCARG1a, FP
+		//|	mov r0, aword [FP]
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	push aword [r0]
+		//|	ret
+		dasm_put(Dst, 6883);
+#line 11405 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#else
+		//|	mov FP, aword T2 // restore FP
+		//|	mov RX, aword T3 // restore IP
+		//|	add r4, NR_SPAD // stack alignment
+		//|	mov r0, 2 // ZEND_VM_LEAVE
+		//|	ret
+		dasm_put(Dst, 330);
+#line 11411 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+#endif
+	}
+
+	return 1;
+}
+
+static int zend_jit_return(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, uint32_t op1_info, zend_jit_addr op1_addr)
+{
+	zend_jit_addr ret_addr;
+	int8_t return_value_used;
+
+	ZEND_ASSERT(op_array->type != ZEND_EVAL_CODE && op_array->function_name);
+	ZEND_ASSERT(!(op1_info & MAY_BE_UNDEF));
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && JIT_G(current_frame)) {
+		if (TRACE_FRAME_IS_RETURN_VALUE_USED(JIT_G(current_frame))) {
+			return_value_used = 1;
+		} else if (TRACE_FRAME_IS_RETURN_VALUE_UNUSED(JIT_G(current_frame))) {
+			return_value_used = 0;
+		} else {
+			return_value_used = -1;
+		}
+	} else {
+		return_value_used = -1;
+	}
+
+	if (ZEND_OBSERVER_ENABLED) {
+		if (Z_MODE(op1_addr) == IS_REG) {
+			zend_jit_addr dst = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+
+			if (!zend_jit_spill_store(Dst, op1_addr, dst, op1_info, 1)) {
+				return 0;
+			}
+			op1_addr = dst;
+		}
+		//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 11447 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1a, FP
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 66);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 11449 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_observer_fcall_end, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_observer_fcall_end)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_observer_fcall_end));
+				} else {
+				if (IS_SIGNED_32BIT(zend_observer_fcall_end)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_observer_fcall_end));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_observer_fcall_end)), (unsigned int)((((ptrdiff_t)zend_observer_fcall_end))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 11450 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	// if (!EX(return_value))
+	if (Z_MODE(op1_addr) == IS_REG && Z_REG(op1_addr) == ZREG_R1) {
+		if (return_value_used != 0) {
+			//|	mov r2, EX->return_value
+			dasm_put(Dst, 945, Dt1(->return_value));
+#line 11456 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (return_value_used == -1) {
+			//|	test r2, r2
+			dasm_put(Dst, 6909);
+#line 11459 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		ret_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R2, 0);
+	} else {
+		if (return_value_used != 0) {
+			//|	mov r1, EX->return_value
+			dasm_put(Dst, 5697, Dt1(->return_value));
+#line 11464 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (return_value_used == -1) {
+			//|	test r1, r1
+			dasm_put(Dst, 6913);
+#line 11467 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		ret_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R1, 0);
+	}
+	if ((opline->op1_type & (IS_VAR|IS_TMP_VAR)) &&
+	    (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		if (return_value_used == -1) {
+			//|	jz >1
+			//|.cold_code
+			dasm_put(Dst, 3508);
+#line 11475 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 11476 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (return_value_used != 1) {
+			if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (jit_return_label >= 0) {
+					//|	IF_NOT_ZVAL_REFCOUNTED op1_addr, =>jit_return_label
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 6917, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED, jit_return_label);
+#line 11481 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_REFCOUNTED op1_addr, >9
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 6930, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 11483 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|	GET_ZVAL_PTR FCARG1a, op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11486 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_DELREF FCARG1a
+			dasm_put(Dst, 461, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 11487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (RC_MAY_BE_1(op1_info)) {
+				if (RC_MAY_BE_N(op1_info)) {
+					if (jit_return_label >= 0) {
+						//|	jnz =>jit_return_label
+						dasm_put(Dst, 1831, jit_return_label);
+#line 11491 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jnz >9
+						dasm_put(Dst, 5032);
+#line 11493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				//|	//SAVE_OPLINE()
+				//|	ZVAL_DTOR_FUNC op1_info, opline
+					do {
+						if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+							zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+							if (type == IS_STRING && !ZEND_DEBUG) {
+						if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+						} else {
+						if (IS_SIGNED_32BIT(_efree)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							} else if (type == IS_ARRAY) {
+								if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+									if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+									}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+						} else {
+						if (IS_SIGNED_32BIT(zend_array_destroy)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								} else {
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								}
+								break;
+							} else if (type == IS_OBJECT) {
+								if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+								}
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+						} else {
+						if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+								break;
+							}
+						}
+						if (opline) {
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+						}
+						if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+						} else {
+						if (IS_SIGNED_32BIT(rc_dtor_func)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+					} while(0);
+#line 11497 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	//????mov r1, EX->return_value // reload ???
+			}
+			if (return_value_used == -1) {
+				if (jit_return_label >= 0) {
+					//|	jmp =>jit_return_label
+					dasm_put(Dst, 1587, jit_return_label);
+#line 11502 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 11504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|.code
+				dasm_put(Dst, 536);
+#line 11506 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else if (return_value_used == -1) {
+		if (jit_return_label >= 0) {
+			//|	jz =>jit_return_label
+			dasm_put(Dst, 4570, jit_return_label);
+#line 11511 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jz >9
+			dasm_put(Dst, 3622);
+#line 11513 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (return_value_used == 0) {
+		//|9:
+		dasm_put(Dst, 4090);
+#line 11518 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		return 1;
+	}
+
+	if (opline->op1_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, opline->op1);
+		//|	ZVAL_COPY_CONST ret_addr, MAY_BE_ANY, MAY_BE_ANY, zv, ZREG_R0
+			if (Z_TYPE_P(zv) > IS_TRUE) {
+				if (Z_TYPE_P(zv) == IS_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(ret_addr) == IS_REG) ? Z_REG(ret_addr) : ZREG_XMM0;
+					if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+						if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else if (!IS_SIGNED_32BIT(zv)) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			} else {
+		dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			}
+					} else {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			} else {
+		dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			}
+					}
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (dst_reg != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+				} else if (Z_TYPE_P(zv) == IS_LONG && MAY_BE_ANY == MAY_BE_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(ret_addr) == IS_REG) ? Z_REG(ret_addr) : ZREG_XMM0;
+				if (Z_LVAL_P(zv) == 0) {
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					}
+				} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+					} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+					}
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					} else {
+		dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					}
+				}
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (dst_reg != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+				} else if (Z_LVAL_P(zv) == 0 && Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1694, (Z_REG(ret_addr)), (Z_REG(ret_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+							if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1702, (Z_REG(ret_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+							} else {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R0), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+							}
+						} else {
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(ret_addr)), Z_LVAL_P(zv));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(ret_addr)), Z_OFFSET(ret_addr), Z_LVAL_P(zv));
+			}
+						}
+				}
+			}
+			if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+				if (MAY_BE_ANY == MAY_BE_DOUBLE) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+					}
+				} else if (((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (MAY_BE_ANY & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+				}
+			}
+#line 11524 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REFCOUNTED_P(zv)) {
+			//|	ADDREF_CONST zv, r0
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 6336, (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+					} else {
+			dasm_put(Dst, 3828, Z_LVAL_P(zv));
+					}
+#line 11526 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (opline->op1_type == IS_TMP_VAR) {
+		//|	ZVAL_COPY_VALUE ret_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(ret_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+						}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(ret_addr)), (Z_REG(ret_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(ret_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(ret_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(ret_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(ret_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info));
+			}
+#line 11529 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (opline->op1_type == IS_CV) {
+		if (op1_info & MAY_BE_REF) {
+			//|	LOAD_ZVAL_ADDR r0, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 6372, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 6380, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 11532 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	ZVAL_DEREF r0, op1_info
+				if (op1_info & MAY_BE_REF) {
+			dasm_put(Dst, 3747, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 11533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+		}
+		//|	ZVAL_COPY_VALUE ret_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(ret_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+						}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(ret_addr)), (Z_REG(ret_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(ret_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(ret_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(ret_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(ret_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info));
+			}
+#line 11536 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+			if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+			    (op1_info & (MAY_BE_REF|MAY_BE_OBJECT)) ||
+			    !op_array->function_name) {
+				//|	TRY_ADDREF op1_info, ah, r2
+					if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (op1_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2129);
+					}
+#line 11541 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (return_value_used != 1) {
+				//|	// if (EXPECTED(!(EX_CALL_INFO() & ZEND_CALL_CODE))) ZVAL_NULL(retval_ptr);
+				//|	SET_ZVAL_TYPE_INFO op1_addr, IS_NULL
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 11544 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		if (op1_info & MAY_BE_REF) {
+			zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, offsetof(zend_reference, val));
+
+			//|	IF_ZVAL_TYPE op1_addr, IS_REFERENCE, >1
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11551 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 3855, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 11552 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	// zend_refcounted *ref = Z_COUNTED_P(retval_ptr);
+			//|	GET_ZVAL_PTR r0, op1_addr
+			dasm_put(Dst, 63);
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11555 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	// ZVAL_COPY_VALUE(return_value, &ref->value);
+			//|	ZVAL_COPY_VALUE ret_addr, MAY_BE_ANY, ref_addr, op1_info, ZREG_R2, ZREG_R2
+			dasm_put(Dst, 5896, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(ref_addr) == IS_REG) {
+							if (Z_MODE(ret_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(ref_addr)) {
+				if (Z_MODE(ret_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(ret_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(ref_addr)), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+							}
+						} else if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(ret_addr)), (Z_REG(ret_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(ret_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(ret_addr)), Z_LVAL_P(Z_ZV(ref_addr)));
+							}
+					}
+				} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(ret_addr)), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else if (Z_MODE(ref_addr) == IS_REG) {
+					if (Z_REG(ret_addr) != Z_REG(ref_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(ref_addr)), (Z_REG(ret_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(ref_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(ref_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(ref_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(ref_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(ref_addr)));
+							}
+					}
+				} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else if (Z_MODE(ref_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(ref_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(ref_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(ret_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ret_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+						}
+					} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(ref_addr) == IS_REG) {
+				if (Z_MODE(ret_addr) == IS_REG) {
+					if (Z_REG(ref_addr) != Z_REG(ret_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(ref_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+				}
+						} else if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_MODE(ref_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(ref_addr)) {
+					if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(ref_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(ret_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(ret_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+					} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(ref_addr) != IS_REG || ZREG_XMM0 != Z_REG(ref_addr)) {
+					if (Z_MODE(ref_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(ref_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(ref_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(ref_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(ref_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(ref_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(ref_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+					} else if (Z_MODE(ref_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ref_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(ret_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(ret_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+				}
+						}
+					} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+					}
+				}
+				if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(op1_info & MAY_BE_GUARD) &&
+					has_concrete_type(op1_info & MAY_BE_ANY)) {
+					if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(op1_info);
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info));
+				}
+#line 11557 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_DELREF r0
+			//|	je >2
+			//|	// if (IS_REFCOUNTED())
+			dasm_put(Dst, 6944);
+#line 11560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (jit_return_label >= 0) {
+				//|	IF_NOT_REFCOUNTED dh, =>jit_return_label
+				dasm_put(Dst, 6952, jit_return_label);
+#line 11562 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_REFCOUNTED dh, >9
+				dasm_put(Dst, 6959);
+#line 11564 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	// ADDREF
+			//|	GET_ZVAL_PTR r2, ret_addr // reload
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+#line 11567 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_ADDREF r2
+			dasm_put(Dst, 6967, (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+#line 11568 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (jit_return_label >= 0) {
+				//|	jmp =>jit_return_label
+				dasm_put(Dst, 1587, jit_return_label);
+#line 11570 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 11572 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|2:
+			//|	EFREE_REFERENCE r0
+			dasm_put(Dst, 4265);
+			#if ZEND_DEBUG
+			dasm_put(Dst, 3972);
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+			#else
+			#ifdef HAVE_BUILTIN_CONSTANT_P
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree_32)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree_32));
+					} else {
+					if (IS_SIGNED_32BIT(_efree_32)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree_32));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree_32)), (unsigned int)((((ptrdiff_t)_efree_32))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+			#else
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+			#endif
+			#endif
+#line 11575 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (jit_return_label >= 0) {
+				//|	jmp =>jit_return_label
+				dasm_put(Dst, 1587, jit_return_label);
+#line 11577 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 11579 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 11581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	ZVAL_COPY_VALUE ret_addr, MAY_BE_ANY, op1_addr, op1_info, ZREG_R0, ZREG_R2
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(ret_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+						}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(ret_addr)), (Z_REG(ret_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(ret_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(ret_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(ret_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(ret_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(ret_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R2 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R2));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(ret_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					} else if (Z_MODE(ret_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(ret_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(ret_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(ret_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(ret_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(ret_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(ret_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(ret_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(ret_addr)), Z_OFFSET(ret_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(ret_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(ret_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(ret_addr)), Z_OFFSET(ret_addr)+offsetof(zval,u1.type_info));
+			}
+#line 11583 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 11586 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_zval_copy_deref(dasm_State **Dst, zend_jit_addr res_addr, zend_jit_addr val_addr, zend_reg type_reg)
+{
+	ZEND_ASSERT(type_reg == ZREG_R2);
+
+	//|.if not(X64)
+#line 11595 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	GET_ZVAL_W2 r0, val_addr
+#line 11597 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.endif
+	//|	GET_ZVAL_PTR r1, val_addr
+		ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11599 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.if not(X64)
+#line 11601 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	GET_ZVAL_W2 r0, val_addr
+#line 11603 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.endif
+	//|	IF_NOT_REFCOUNTED dh, >2
+	//|	IF_NOT_TYPE dl, IS_REFERENCE, >1
+	//|	GET_Z_TYPE_INFO edx, r1+offsetof(zend_reference, val)
+	//|.if not(X64)
+	//|	GET_Z_W2 r0, r1+offsetof(zend_reference, val)
+	//|.endif
+	//|	GET_Z_PTR r1, r1+offsetof(zend_reference, val)
+	//|	IF_NOT_REFCOUNTED dh, >2
+	//|1:
+	//|	GC_ADDREF r1
+	//|2:
+	//|	SET_ZVAL_PTR res_addr, r1
+	dasm_put(Dst, 6978, (Z_REG(val_addr)), Z_OFFSET(val_addr), IS_REFERENCE, offsetof(zend_reference, val)+offsetof(zval,u1.type_info), offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 11616 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.if not(X64)
+	//|	SET_ZVAL_W2 res_addr, r0
+	//|.endif
+	//|	SET_ZVAL_TYPE_INFO res_addr, edx
+	dasm_put(Dst, 6426, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+		ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 7022, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 11620 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_fetch_dim_read(dasm_State        **Dst,
+                                   const zend_op      *opline,
+                                   zend_ssa           *ssa,
+                                   const zend_ssa_op  *ssa_op,
+                                   uint32_t            op1_info,
+                                   zend_jit_addr       op1_addr,
+                                   bool           op1_avoid_refcounting,
+                                   uint32_t            op2_info,
+                                   uint32_t            res_info,
+                                   zend_jit_addr       res_addr,
+                                   uint8_t             dim_type)
+{
+	zend_jit_addr orig_op1_addr, op2_addr;
+	const void *exit_addr = NULL;
+	const void *not_found_exit_addr = NULL;
+	const void *res_exit_addr = NULL;
+	bool result_avoid_refcounting = 0;
+	uint32_t may_be_string = (opline->opcode != ZEND_FETCH_LIST_R) ? MAY_BE_STRING : 0;
+	int may_throw = 0;
+
+	orig_op1_addr = OP1_ADDR();
+	op2_addr = OP2_ADDR();
+
+	if (opline->opcode != ZEND_FETCH_DIM_IS
+	 && JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+	}
+
+	if ((res_info & MAY_BE_GUARD)
+	 && JIT_G(current_frame)
+	 && (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_ARRAY) {
+		uint32_t flags = 0;
+		uint32_t old_op1_info = 0;
+		uint32_t old_info;
+		zend_jit_trace_stack *stack = JIT_G(current_frame)->stack;
+		int32_t exit_point;
+
+		if (opline->opcode != ZEND_FETCH_LIST_R
+		 && (opline->op1_type & (IS_VAR|IS_TMP_VAR))
+		 && !op1_avoid_refcounting) {
+			flags |= ZEND_JIT_EXIT_FREE_OP1;
+		}
+		if ((opline->op2_type & (IS_VAR|IS_TMP_VAR))
+		 && (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			flags |= ZEND_JIT_EXIT_FREE_OP2;
+		}
+		if ((opline->result_type & (IS_VAR|IS_TMP_VAR))
+		 && !(flags & ZEND_JIT_EXIT_FREE_OP1)
+		 && (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))
+		 && (ssa_op+1)->op1_use == ssa_op->result_def
+		 && !(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF) - (MAY_BE_STRING|MAY_BE_LONG)))
+		 && zend_jit_may_avoid_refcounting(opline+1)) {
+			result_avoid_refcounting = 1;
+			ssa->var_info[ssa_op->result_def].avoid_refcounting = 1;
+		}
+
+		if (op1_avoid_refcounting) {
+			old_op1_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->op1.var));
+			SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->op1.var), ZREG_NONE);
+		}
+
+		if (!(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF) - (MAY_BE_STRING|MAY_BE_LONG)))) {
+			old_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+			SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_UNKNOWN, 1);
+			SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_ZVAL_COPY_GPR0);
+			exit_point = zend_jit_trace_get_exit_point(opline+1, flags);
+			SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_info);
+			res_exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if (!res_exit_addr) {
+				return 0;
+			}
+			res_info &= ~MAY_BE_GUARD;
+			ssa->var_info[ssa_op->result_def].type &= ~MAY_BE_GUARD;
+		}
+
+		if (opline->opcode == ZEND_FETCH_DIM_IS
+		 && !(res_info & MAY_BE_NULL)) {
+			old_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+			SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_NULL, 0);
+			SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_NULL);
+			exit_point = zend_jit_trace_get_exit_point(opline+1, flags);
+			SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_info);
+			not_found_exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			if (!not_found_exit_addr) {
+				return 0;
+			}
+		}
+
+		if (op1_avoid_refcounting) {
+			SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->op1.var), old_op1_info);
+		}
+	}
+
+	if (op1_info & MAY_BE_REF) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 11723 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	ZVAL_DEREF FCARG1a, op1_info
+			if (op1_info & MAY_BE_REF) {
+		dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 11724 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY)) {
+			if (exit_addr && !(op1_info & (MAY_BE_OBJECT|may_be_string))) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, &exit_addr
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY, (ptrdiff_t)(exit_addr));
+#line 11731 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 11733 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 11736 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if ((op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING))) ||
+		    (opline->opcode != ZEND_FETCH_DIM_IS && JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE)) {
+			may_throw = 1;
+		}
+		if (!zend_jit_fetch_dimension_address_inner(Dst, opline, (opline->opcode != ZEND_FETCH_DIM_IS) ? BP_VAR_R : BP_VAR_IS, op1_info, op2_info, dim_type, res_exit_addr, not_found_exit_addr, exit_addr)) {
+			return 0;
+		}
+	}
+
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_ARRAY)) {
+		if (op1_info & MAY_BE_ARRAY) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 11748 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 11749 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (opline->opcode != ZEND_FETCH_LIST_R && (op1_info & MAY_BE_STRING)) {
+			may_throw = 1;
+			if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_ARRAY|MAY_BE_STRING))) {
+				if (exit_addr && !(op1_info & MAY_BE_OBJECT)) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, &exit_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING, (ptrdiff_t)(exit_addr));
+#line 11756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >6
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 11758 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 11761 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+							}
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+					if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 11762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode != ZEND_FETCH_DIM_IS) {
+				if ((op2_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					//|	GET_ZVAL_LVAL ZREG_FCARG2, op2_addr
+						if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op2_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op2_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op2_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op2_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op2_addr)));
+									}
+							}
+						} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else if (Z_MODE(op2_addr) == IS_REG) {
+							if (ZREG_FCARG2 != Z_REG(op2_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op2_addr)), (ZREG_FCARG2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 11765 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_fetch_dim_str_offset_r_helper, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_str_offset_r_helper)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_str_offset_r_helper));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_fetch_dim_str_offset_r_helper)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_str_offset_r_helper));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_str_offset_r_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_str_offset_r_helper))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 11766 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+						if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+							}
+						} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op2_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 11768 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_fetch_dim_str_r_helper, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_str_r_helper)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_str_r_helper));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_fetch_dim_str_r_helper)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_str_r_helper));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_str_r_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_str_r_helper))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 11769 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	SET_ZVAL_PTR res_addr, r0
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 11771 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_STRING
+				dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_STRING);
+#line 11772 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op2_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 11774 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if X64
+					//|   LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 11776 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|   PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				//|	EXT_CALL zend_jit_fetch_dim_str_is_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_str_is_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_str_is_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_str_is_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_str_is_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_str_is_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_str_is_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11781 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+			}
+			if ((op1_info & MAY_BE_ARRAY) ||
+				(op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_ARRAY|MAY_BE_STRING)))) {
+				//|	jmp >9 // END
+				dasm_put(Dst, 3627);
+#line 11788 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|6:
+			dasm_put(Dst, 3345);
+#line 11790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (op1_info & MAY_BE_OBJECT) {
+			may_throw = 1;
+			if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_ARRAY|MAY_BE_OBJECT|may_be_string))) {
+				if (exit_addr) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 11797 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >6
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 11799 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 11802 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		    if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 11804 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		    }
+			if (opline->op2_type == IS_CONST && Z_EXTRA_P(RT_CONSTANT(opline, opline->op2)) == ZEND_EXTRA_VALUE) {
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_CONST_ZVAL);
+				//|	LOAD_ADDR FCARG2a, (Z_ZV(op2_addr) + 1)
+						if (IS_SIGNED_32BIT((Z_ZV(op2_addr) + 1))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)(Z_ZV(op2_addr) + 1)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(Z_ZV(op2_addr) + 1))), (unsigned int)((((ptrdiff_t)(Z_ZV(op2_addr) + 1)))>>32));
+						}
+#line 11808 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op2_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 11810 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if X64
+				//|   LOAD_ZVAL_ADDR CARG3, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 11813 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	sub r4, 12
+				//|   PUSH_ZVAL_ADDR res_addr, r0
+			//|.endif
+			if (opline->opcode != ZEND_FETCH_DIM_IS) {
+				//|	EXT_CALL zend_jit_fetch_dim_obj_r_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_obj_r_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_obj_r_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_obj_r_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_obj_r_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_obj_r_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_obj_r_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11819 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	EXT_CALL zend_jit_fetch_dim_obj_is_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_obj_is_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_obj_is_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_obj_is_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_obj_is_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_obj_is_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_obj_is_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11821 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if not(X64)
+			//|	add r4, 12
+			//|.endif
+			if ((op1_info & MAY_BE_ARRAY) ||
+				(op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_ARRAY|MAY_BE_OBJECT|may_be_string)))) {
+				//|	jmp >9 // END
+				dasm_put(Dst, 3627);
+#line 11828 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|6:
+			dasm_put(Dst, 3345);
+#line 11830 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if ((opline->opcode != ZEND_FETCH_DIM_IS && (op1_info & MAY_BE_UNDEF)) || (op2_info & MAY_BE_UNDEF)) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 11834 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode != ZEND_FETCH_DIM_IS && (op1_info & MAY_BE_UNDEF)) {
+				may_throw = 1;
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 11837 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+				//|	mov FCARG1d, opline->op1.var
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 7030, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF, opline->op1.var);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11840 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 11841 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			if (op2_info & MAY_BE_UNDEF) {
+				may_throw = 1;
+				//|	IF_NOT_ZVAL_TYPE op2_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 11846 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	mov FCARG1d, opline->op2.var
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 7030, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_UNDEF, opline->op2.var);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11848 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 11849 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		if ((op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_ARRAY|MAY_BE_OBJECT|may_be_string)))
+		 && (!exit_addr || !(op1_info & (MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_STRING)))) {
+			if (opline->opcode != ZEND_FETCH_DIM_IS && opline->opcode != ZEND_FETCH_LIST_R) {
+				may_throw = 1;
+				if ((op1_info & MAY_BE_UNDEF) || (op2_info & MAY_BE_UNDEF)) {
+					//|	LOAD_ZVAL_ADDR FCARG1a, orig_op1_addr
+						if (Z_MODE(orig_op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(orig_op1_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(orig_op1_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(orig_op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(orig_op1_addr)))>>32));
+							}
+						} else if (Z_MODE(orig_op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(orig_op1_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(orig_op1_addr)), Z_OFFSET(orig_op1_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(orig_op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 11858 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 11860 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (Z_MODE(op1_addr) != IS_MEM_ZVAL ||
+					    Z_REG(op1_addr) != ZREG_FCARG1 ||
+					    Z_OFFSET(op1_addr) != 0) {
+						//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+							if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+						dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+								} else {
+						dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+								}
+							} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+								if (Z_OFFSET(op1_addr)) {
+						dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+								} else {
+						dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 11864 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				//|	EXT_CALL zend_jit_invalid_array_access, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_array_access)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_array_access));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_invalid_array_access)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_array_access));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_array_access)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_array_access))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 11867 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 11869 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & MAY_BE_ARRAY) {
+				//|	jmp >9 // END
+				dasm_put(Dst, 3627);
+#line 11871 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+
+		if (op1_info & MAY_BE_ARRAY) {
+			//|.code
+			dasm_put(Dst, 536);
+#line 11876 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+
+		//|8:
+		dasm_put(Dst, 4196);
+#line 11883 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (res_exit_addr) {
+			zend_uchar type = concrete_type(res_info);
+
+			if ((op1_info & MAY_BE_ARRAY_OF_REF)
+			 && dim_type != IS_UNKNOWN
+			 && dim_type != IS_REFERENCE) {
+				if (type < IS_STRING) {
+					//|	IF_NOT_ZVAL_TYPE val_addr, type, >1
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11891 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.cold_code
+					dasm_put(Dst, 3320, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), type);
+#line 11892 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	IF_NOT_ZVAL_TYPE val_addr, IS_REFERENCE, &res_exit_addr
+					dasm_put(Dst, 63);
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11894 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GET_Z_PTR r0, r0
+					//|	add r0, offsetof(zend_reference, val)
+					//|	IF_ZVAL_TYPE val_addr, type, >1
+					dasm_put(Dst, 7045, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), IS_REFERENCE, (ptrdiff_t)(res_exit_addr), offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11897 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp &res_exit_addr
+					//|.code
+					dasm_put(Dst, 7064, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), type, (ptrdiff_t)(res_exit_addr));
+#line 11899 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 11900 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	GET_ZVAL_TYPE_INFO edx, val_addr
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11902 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	IF_NOT_TYPE dl, type, >1
+					//|.cold_code
+					dasm_put(Dst, 7081, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info), type);
+#line 11904 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	IF_NOT_TYPE dl, IS_REFERENCE, &res_exit_addr
+					//|	GET_Z_PTR r0, r0
+					//|	add r0, offsetof(zend_reference, val)
+					//|	GET_ZVAL_TYPE_INFO edx, val_addr
+					dasm_put(Dst, 7098, IS_REFERENCE, (ptrdiff_t)(res_exit_addr), offsetof(zend_reference, val));
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11909 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	IF_TYPE dl, type, >1
+					//|	jmp &res_exit_addr
+					//|.code
+					dasm_put(Dst, 7115, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info), type, (ptrdiff_t)(res_exit_addr));
+#line 11912 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 11913 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (op1_info & MAY_BE_ARRAY_OF_REF) {
+					//|	ZVAL_DEREF r0, MAY_BE_REF
+						if (MAY_BE_REF & MAY_BE_REF) {
+					dasm_put(Dst, 3747, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+						}
+#line 11917 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (type < IS_STRING) {
+					//|	IF_NOT_ZVAL_TYPE val_addr, type, &res_exit_addr
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5790, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), type, (ptrdiff_t)(res_exit_addr));
+#line 11920 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	GET_ZVAL_TYPE_INFO edx, val_addr
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+#line 11922 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	IF_NOT_TYPE dl, type, &res_exit_addr
+					dasm_put(Dst, 7135, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info), type, (ptrdiff_t)(res_exit_addr));
+#line 11923 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+
+			//|	// ZVAL_COPY
+			//|7:
+			//|	ZVAL_COPY_VALUE_V res_addr, -1, val_addr, res_info, ZREG_R0, ZREG_R1
+			dasm_put(Dst, 4342);
+				if (res_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(res_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+#line 11929 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (type < IS_STRING) {
+					if (Z_REG(res_addr) != ZREG_FP ||
+					    JIT_G(current_frame) == NULL ||
+					    STACK_MEM_TYPE(JIT_G(current_frame)->stack, EX_VAR_TO_NUM(Z_OFFSET(res_addr))) != type) {
+						//|	SET_ZVAL_TYPE_INFO res_addr, type
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+#line 11935 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				} else {
+					//|	SET_ZVAL_TYPE_INFO res_addr, edx
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 7022, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 11938 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!result_avoid_refcounting) {
+						//|	TRY_ADDREF res_info, dh, r1
+							if (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+								if (res_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						dasm_put(Dst, 3985);
+								}
+						dasm_put(Dst, 2095);
+							}
+#line 11940 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+			} else if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+				return 0;
+			}
+		} else if (op1_info & MAY_BE_ARRAY_OF_REF) {
+			//|	// ZVAL_COPY_DEREF
+			//|	GET_ZVAL_TYPE_INFO Rd(ZREG_R2), val_addr
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+#line 11948 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_zval_copy_deref(Dst, res_addr, val_addr, ZREG_R2)) {
+				return 0;
+			}
+		} else  {
+			//|	// ZVAL_COPY
+			//|	ZVAL_COPY_VALUE res_addr, -1, val_addr, res_info, ZREG_R1, ZREG_R2
+				if (res_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (ZREG_R2 != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R2));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(res_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+				if ((res_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(res_info & MAY_BE_GUARD) &&
+					has_concrete_type(res_info & MAY_BE_ANY)) {
+					if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (res_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(res_info);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				}
+#line 11954 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	TRY_ADDREF res_info, ch, r2
+				if (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+					if (res_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			dasm_put(Dst, 2121);
+					}
+			dasm_put(Dst, 2129);
+				}
+#line 11955 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|9: // END
+	dasm_put(Dst, 4090);
+#line 11958 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+#ifdef ZEND_JIT_USE_RC_INFERENCE
+	if ((opline->op2_type & (IS_TMP_VAR|IS_VAR)) && (op1_info & MAY_BE_OBJECT)) {
+		/* Magic offsetGet() may increase refcount of the key */
+		op2_info |= MAY_BE_RCN;
+	}
+#endif
+
+    if (opline->op2_type & (IS_TMP_VAR|IS_VAR)) {
+		if ((op2_info & MAY_HAVE_DTOR) && (op2_info & MAY_BE_RC1)) {
+			may_throw = 1;
+		}
+		//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+			if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 11971 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline->opcode != ZEND_FETCH_LIST_R && !op1_avoid_refcounting) {
+		if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
+			if ((op1_info & MAY_HAVE_DTOR) && (op1_info & MAY_BE_RC1)) {
+				may_throw = 1;
+			}
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 11978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_fetch_dim(dasm_State    **Dst,
+                              const zend_op  *opline,
+                              uint32_t        op1_info,
+                              zend_jit_addr   op1_addr,
+                              uint32_t        op2_info,
+                              zend_jit_addr   res_addr,
+                              uint8_t         dim_type)
+{
+	zend_jit_addr op2_addr;
+	int may_throw = 0;
+
+	op2_addr = (opline->op2_type != IS_UNUSED) ? OP2_ADDR() : 0;
+
+	if (op1_info & MAY_BE_REF) {
+		may_throw = 1;
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 12006 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	IF_NOT_Z_TYPE FCARG1a, IS_REFERENCE, >1
+		//|	GET_Z_PTR FCARG2a, FCARG1a
+		//|	IF_NOT_TYPE byte [FCARG2a + offsetof(zend_reference, val) + offsetof(zval, u1.v.type)], IS_ARRAY, >2
+		//|	lea FCARG1a, [FCARG2a + offsetof(zend_reference, val)]
+		//|	jmp >3
+		//|.cold_code
+		dasm_put(Dst, 4199, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val) + offsetof(zval, u1.v.type), IS_ARRAY, offsetof(zend_reference, val));
+#line 12012 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|2:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 2222);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 12014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_jit_prepare_assign_dim_ref, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_prepare_assign_dim_ref));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_prepare_assign_dim_ref)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_prepare_assign_dim_ref));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_prepare_assign_dim_ref)), (unsigned int)((((ptrdiff_t)zend_jit_prepare_assign_dim_ref))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 12015 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	test r0, r0
+		//|	mov FCARG1a, r0
+		//|	jne >1
+		//|	jmp ->exception_handler_undef
+		//|.code
+		dasm_put(Dst, 4228);
+#line 12020 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 12021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 12027 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|3:
+		//|	SEPARATE_ARRAY op1_addr, op1_info, 1
+		dasm_put(Dst, 496);
+			if (RC_MAY_BE_N(op1_info)) {
+				if (Z_REG(op1_addr) != ZREG_FP) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R0), (ZREG_R0));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_R0 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_R0));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4257);
+					}
+					if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_zval_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_zval_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_zval_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_zval_array_dup)), (unsigned int)((((ptrdiff_t)zend_jit_zval_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+		dasm_put(Dst, 4265);
+				} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					if (RC_MAY_BE_1(op1_info)) {
+		dasm_put(Dst, 4271);
+						if (1) {
+		dasm_put(Dst, 4275);
+		dasm_put(Dst, 63);
+						} else {
+		dasm_put(Dst, 3594);
+						}
+					}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4281, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_dup));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_dup)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_dup));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_dup)), (unsigned int)((((ptrdiff_t)zend_array_dup))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+					if (RC_MAY_BE_1(op1_info)) {
+						if (1) {
+		dasm_put(Dst, 2872);
+						}
+					}
+		dasm_put(Dst, 2222);
+				}
+			} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			}
+#line 12030 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL)) {
+		if (op1_info & MAY_BE_ARRAY) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 12034 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 12035 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+			//|	CMP_ZVAL_TYPE op1_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jg >7
+			dasm_put(Dst, 4312, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_NULL);
+#line 12039 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov T1, Ra(Z_REG(op1_addr)) // save
+			dasm_put(Dst, 4047, (Z_REG(op1_addr)));
+#line 12042 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if ((op1_info & MAY_BE_UNDEF)
+		 && opline->opcode == ZEND_FETCH_DIM_RW) {
+			may_throw = 1;
+			if (op1_info & MAY_BE_NULL) {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 12048 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 12050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, opline->op1.var
+			//|	EXT_CALL zend_jit_undefined_op_helper, r0
+			dasm_put(Dst, 607, opline->op1.var);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12052 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 12053 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// ZVAL_ARR(container, zend_new_array(8));
+		//|	EXT_CALL _zend_new_array_0, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_zend_new_array_0));
+				} else {
+				if (IS_SIGNED_32BIT(_zend_new_array_0)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_zend_new_array_0));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_zend_new_array_0)), (unsigned int)((((ptrdiff_t)_zend_new_array_0))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 12056 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REG(op1_addr) != ZREG_FP) {
+			//|	mov Ra(Z_REG(op1_addr)), T1 // restore
+			dasm_put(Dst, 4054, (Z_REG(op1_addr)));
+#line 12058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_ZVAL_LVAL op1_addr, r0
+			if (Z_MODE(op1_addr) == IS_REG) {
+		dasm_put(Dst, 2202, (Z_REG(op1_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+#line 12060 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO op1_addr, IS_ARRAY_EX
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12061 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG1a, r0
+		dasm_put(Dst, 4300, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_ARRAY_EX);
+#line 12062 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & MAY_BE_ARRAY) {
+			//|	jmp >1
+			//|.code
+			dasm_put(Dst, 3727);
+#line 12065 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 12066 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+		//|6:
+		dasm_put(Dst, 3345);
+#line 12071 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op2_type == IS_UNUSED) {
+			may_throw = 1;
+			//|	// var_ptr = zend_hash_next_index_insert(Z_ARRVAL_P(container), &EG(uninitialized_zval));
+			//|	LOAD_ADDR_ZTS FCARG2a, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 12075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_hash_next_index_insert, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_next_index_insert));
+					} else {
+					if (IS_SIGNED_32BIT(zend_hash_next_index_insert)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_next_index_insert));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_next_index_insert)), (unsigned int)((((ptrdiff_t)zend_hash_next_index_insert))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	// if (UNEXPECTED(!var_ptr)) {
+			//|	test r0, r0
+			//|	jz >1
+			//|.cold_code
+			dasm_put(Dst, 4325);
+#line 12080 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	// zend_throw_error(NULL, "Cannot add element to the array as the next element is already occupied");
+			//|	CANNOT_ADD_ELEMENT opline
+			dasm_put(Dst, 63);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+			dasm_put(Dst, 4334);
+				} else {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+			dasm_put(Dst, 4338);
+				}
+#line 12083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_UNDEF
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12084 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	//ZEND_VM_C_GOTO(assign_dim_op_ret_null);
+			//|	jmp >8
+			//|.code
+			dasm_put(Dst, 7150, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_UNDEF);
+#line 12087 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_PTR res_addr, r0
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12088 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_INDIRECT
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_INDIRECT);
+#line 12089 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			uint32_t type;
+
+			switch (opline->opcode) {
+				case ZEND_FETCH_DIM_W:
+				case ZEND_FETCH_LIST_W:
+					type = BP_VAR_W;
+					break;
+				case ZEND_FETCH_DIM_RW:
+					may_throw = 1;
+					type = BP_VAR_RW;
+					break;
+				case ZEND_FETCH_DIM_UNSET:
+					type = BP_VAR_UNSET;
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+
+			if (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING))) {
+				may_throw = 1;
+			}
+			if (!zend_jit_fetch_dimension_address_inner(Dst, opline, type, op1_info, op2_info, dim_type, NULL, NULL, NULL)) {
+				return 0;
+			}
+
+			//|8:
+			//|	SET_ZVAL_PTR res_addr, r0
+			dasm_put(Dst, 4196);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12117 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_INDIRECT
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_INDIRECT);
+#line 12118 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			if (type == BP_VAR_RW || (op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_STRING)))) {
+				//|.cold_code
+				dasm_put(Dst, 445);
+#line 12121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|9:
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+				dasm_put(Dst, 4090);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12123 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >8
+				//|.code
+				dasm_put(Dst, 7150, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 12125 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+	if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_ARRAY))) {
+		may_throw = 1;
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 12133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 12134 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 12137 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12139 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	    if (opline->op2_type == IS_UNUSED) {
+			//|	xor FCARG2a, FCARG2a
+			dasm_put(Dst, 2289);
+#line 12142 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opline->op2_type == IS_CONST && Z_EXTRA_P(RT_CONSTANT(opline, opline->op2)) == ZEND_EXTRA_VALUE) {
+			ZEND_ASSERT(Z_MODE(op2_addr) == IS_CONST_ZVAL);
+			//|	LOAD_ADDR FCARG2a, (Z_ZV(op2_addr) + 1)
+					if (IS_SIGNED_32BIT((Z_ZV(op2_addr) + 1))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)(Z_ZV(op2_addr) + 1)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(Z_ZV(op2_addr) + 1))), (unsigned int)((((ptrdiff_t)(Z_ZV(op2_addr) + 1)))>>32));
+					}
+#line 12145 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+				if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+					}
+				} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op2_addr)) {
+			dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+					} else {
+			dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12147 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, res_addr
+				if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+					}
+				} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(res_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12150 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 12
+			//|	PUSH_ZVAL_ADDR res_addr, r0
+		//|.endif
+		switch (opline->opcode) {
+			case ZEND_FETCH_DIM_W:
+			case ZEND_FETCH_LIST_W:
+				//|	EXT_CALL zend_jit_fetch_dim_obj_w_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_obj_w_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_obj_w_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_obj_w_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_obj_w_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_obj_w_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_obj_w_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12158 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_FETCH_DIM_RW:
+				//|	EXT_CALL zend_jit_fetch_dim_obj_rw_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_dim_obj_rw_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_dim_obj_rw_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_fetch_dim_obj_rw_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_dim_obj_rw_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_dim_obj_rw_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_dim_obj_rw_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+//			case ZEND_FETCH_DIM_UNSET:
+//				|	EXT_CALL zend_jit_fetch_dim_obj_unset_helper, r0
+//				break;
+			default:
+				ZEND_UNREACHABLE();
+			}
+		//|.if not(X64)
+		//|	add r4, 12
+		//|.endif
+
+		if (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_ARRAY)) {
+			//|	jmp >8 // END
+			//|.code
+			dasm_put(Dst, 6780);
+#line 12175 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+#ifdef ZEND_JIT_USE_RC_INFERENCE
+	if ((opline->op2_type & (IS_TMP_VAR|IS_VAR)) && (op1_info & (MAY_BE_UNDEF|MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_ARRAY|MAY_BE_OBJECT))) {
+		/* ASSIGN_DIM may increase refcount of the key */
+		op2_info |= MAY_BE_RCN;
+	}
+#endif
+
+	if ((opline->op2_type & (IS_TMP_VAR|IS_VAR))
+	 && (op2_info & MAY_HAVE_DTOR)
+	 && (op2_info & MAY_BE_RC1)) {
+		may_throw = 1;
+	}
+	//|8:
+	//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+	dasm_put(Dst, 4196);
+		if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+			if (RC_MAY_BE_1(op2_info)) {
+				if (RC_MAY_BE_N(op2_info)) {
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op2_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 12192 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_isset_isempty_dim(dasm_State    **Dst,
+                                      const zend_op  *opline,
+                                      uint32_t        op1_info,
+                                      zend_jit_addr   op1_addr,
+                                      bool       op1_avoid_refcounting,
+                                      uint32_t        op2_info,
+                                      uint8_t         dim_type,
+                                      int             may_throw,
+                                      zend_uchar      smart_branch_opcode,
+                                      uint32_t        target_label,
+                                      uint32_t        target_label2,
+                                      const void     *exit_addr)
+{
+	zend_jit_addr op2_addr, res_addr;
+
+	// TODO: support for empty() ???
+	ZEND_ASSERT(!(opline->extended_value & ZEND_ISEMPTY));
+
+	op2_addr = OP2_ADDR();
+	res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	if (op1_info & MAY_BE_REF) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 12225 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	ZVAL_DEREF FCARG1a, op1_info
+			if (op1_info & MAY_BE_REF) {
+		dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 12226 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	}
+
+	if (op1_info & MAY_BE_ARRAY) {
+		const void *found_exit_addr = NULL;
+		const void *not_found_exit_addr = NULL;
+
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY)) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 12235 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	GET_ZVAL_LVAL ZREG_FCARG1, op1_addr
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 12237 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (exit_addr
+		 && !(op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_ARRAY))
+		 && !may_throw
+		 && (!(opline->op1_type & (IS_TMP_VAR|IS_VAR)) || op1_avoid_refcounting)
+		 && (!(opline->op2_type & (IS_TMP_VAR|IS_VAR)) || !(op2_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)))) {
+			if (smart_branch_opcode == ZEND_JMPNZ) {
+				found_exit_addr = exit_addr;
+			} else {
+				not_found_exit_addr = exit_addr;
+			}
+		}
+		if (!zend_jit_fetch_dimension_address_inner(Dst, opline, BP_JIT_IS, op1_info, op2_info, dim_type, found_exit_addr, not_found_exit_addr, NULL)) {
+			return 0;
+		}
+
+		if (found_exit_addr) {
+			//|9:
+			dasm_put(Dst, 4090);
+#line 12254 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			return 1;
+		} else if (not_found_exit_addr) {
+			//|8:
+			dasm_put(Dst, 4196);
+#line 12257 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			return 1;
+		}
+	}
+
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_ARRAY)) {
+		if (op1_info & MAY_BE_ARRAY) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 12264 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 12265 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (op1_info & (MAY_BE_STRING|MAY_BE_OBJECT)) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 12269 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		    if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 12271 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->op2_type == IS_CONST && Z_EXTRA_P(RT_CONSTANT(opline, opline->op2)) == ZEND_EXTRA_VALUE) {
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_CONST_ZVAL);
+				//|	LOAD_ADDR FCARG2a, (Z_ZV(op2_addr) + 1)
+						if (IS_SIGNED_32BIT((Z_ZV(op2_addr) + 1))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)(Z_ZV(op2_addr) + 1)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(Z_ZV(op2_addr) + 1))), (unsigned int)((((ptrdiff_t)(Z_ZV(op2_addr) + 1)))>>32));
+						}
+#line 12275 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR FCARG2a, op2_addr
+					if (Z_MODE(op2_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op2_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op2_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op2_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op2_addr)))>>32));
+						}
+					} else if (Z_MODE(op2_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op2_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(op2_addr)), Z_OFFSET(op2_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(op2_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 12277 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	EXT_CALL zend_jit_isset_dim_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_isset_dim_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_isset_dim_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_isset_dim_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_isset_dim_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_isset_dim_helper)), (unsigned int)((((ptrdiff_t)zend_jit_isset_dim_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12279 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	test r0, r0
+			//|	jz >9
+			dasm_put(Dst, 7164);
+#line 12281 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (op1_info & MAY_BE_ARRAY) {
+				//|	jmp >8
+				//|.code
+				dasm_put(Dst, 6780);
+#line 12284 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			if (op2_info & MAY_BE_UNDEF) {
+				if (op2_info & MAY_BE_ANY) {
+					//|	IF_NOT_ZVAL_TYPE op2_addr, IS_UNDEF, >1
+						ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 12289 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	mov FCARG1d, opline->op2.var
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 2237, opline->op2.var);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12292 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				dasm_put(Dst, 63);
+#line 12293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (op1_info & MAY_BE_ARRAY) {
+				//|	jmp >9
+				//|.code
+				dasm_put(Dst, 4064);
+#line 12297 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	}
+
+#ifdef ZEND_JIT_USE_RC_INFERENCE
+	if ((opline->op2_type & (IS_TMP_VAR|IS_VAR)) && (op1_info & MAY_BE_OBJECT)) {
+		/* Magic offsetExists() may increase refcount of the key */
+		op2_info |= MAY_BE_RCN;
+	}
+#endif
+
+	if (op1_info & (MAY_BE_ARRAY|MAY_BE_STRING|MAY_BE_OBJECT)) {
+		//|8:
+		//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+		dasm_put(Dst, 4196);
+			if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+				if (RC_MAY_BE_1(op2_info)) {
+					if (RC_MAY_BE_N(op2_info)) {
+						if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op2_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 12311 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!op1_avoid_refcounting) {
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 12313 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (may_throw) {
+			if (!zend_jit_check_exception_undef_result(Dst, opline)) {
+				return 0;
+			}
+		}
+		if (!(opline->extended_value & ZEND_ISEMPTY)) {
+			if (exit_addr) {
+				if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp &exit_addr
+					dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 12323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >8
+					dasm_put(Dst, 3712);
+#line 12325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (smart_branch_opcode) {
+				if (smart_branch_opcode == ZEND_JMPZ) {
+					//|	jmp =>target_label2
+					dasm_put(Dst, 1587, target_label2);
+#line 12329 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (smart_branch_opcode == ZEND_JMPNZ) {
+					//|	jmp =>target_label
+					dasm_put(Dst, 1587, target_label);
+#line 12331 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+					//|	jmp =>target_label2
+					dasm_put(Dst, 1587, target_label2);
+#line 12333 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			} else {
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12338 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >8
+				dasm_put(Dst, 7172, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 12339 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	NIY // TODO: support for empty()
+				//ZEND_ASSERT(0);
+			dasm_put(Dst, 1504);
+#line 12342 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	//|9: // not found
+	//|	FREE_OP opline->op2_type, opline->op2, op2_info, 0, opline
+	dasm_put(Dst, 4090);
+		if (opline->op2_type & (IS_VAR|IS_TMP_VAR)) {
+		if ((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+			if ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				if (0) {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+	dasm_put(Dst, 63);
+				} else {
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				}
+			}
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)));
+			if (RC_MAY_BE_1(op2_info)) {
+				if (RC_MAY_BE_N(op2_info)) {
+					if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 472);
+					} else {
+	dasm_put(Dst, 477);
+					}
+				}
+		do {
+			if (has_concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+				zend_uchar type = concrete_type((op2_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+				if (type == IS_STRING && !ZEND_DEBUG) {
+			if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+			} else {
+			if (IS_SIGNED_32BIT(_efree)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				} else if (type == IS_ARRAY) {
+					if ((op2_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+						if (opline && ((op2_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+						}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+			} else {
+			if (IS_SIGNED_32BIT(zend_array_destroy)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					} else {
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					}
+					break;
+				} else if (type == IS_OBJECT) {
+					if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+					}
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+			} else {
+			if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+					break;
+				}
+			}
+			if (opline) {
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+			}
+			if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+			} else {
+			if (IS_SIGNED_32BIT(rc_dtor_func)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+		} while(0);
+				if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+	dasm_put(Dst, 491);
+				}
+	dasm_put(Dst, 496);
+			}
+			if (0 && RC_MAY_BE_N(op2_info) && ((op2_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+				if ((op2_info) & MAY_BE_REF) {
+					zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var)) == IS_MEM_ZVAL);
+	dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+		ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+				}
+	dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+			if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+			} else {
+			if (IS_SIGNED_32BIT(gc_possible_root)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+			}
+			if (0 && ((op2_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+	dasm_put(Dst, 532);
+			}
+	dasm_put(Dst, 538);
+		}
+		}
+#line 12347 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!op1_avoid_refcounting) {
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 12349 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (may_throw) {
+		if (!zend_jit_check_exception_undef_result(Dst, opline)) {
+			return 0;
+		}
+	}
+	if (!(opline->extended_value & ZEND_ISEMPTY)) {
+		if (exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				//|	jmp &exit_addr
+				dasm_put(Dst, 134, (ptrdiff_t)(exit_addr));
+#line 12359 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (smart_branch_opcode) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				//|	jmp =>target_label
+				dasm_put(Dst, 1587, target_label);
+#line 12363 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				//|	jmp =>target_label
+				dasm_put(Dst, 1587, target_label);
+#line 12366 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 12371 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	NIY // TODO: support for empty()
+			//ZEND_ASSERT(0);
+		dasm_put(Dst, 1504);
+#line 12374 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|8:
+	dasm_put(Dst, 4196);
+#line 12377 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_bind_global(dasm_State **Dst, const zend_op *opline, uint32_t op1_info)
+{
+	zend_jit_addr op1_addr = OP1_ADDR();
+	zend_string *varname = Z_STR_P(RT_CONSTANT(opline, opline->op2));
+
+	//|	// idx = (uint32_t)(uintptr_t)CACHED_PTR(opline->extended_value) - 1;
+	//|	mov FCARG2a, EX->run_time_cache
+	//|	mov r0, aword [FCARG2a + opline->extended_value]
+	//|	sub r0, 1
+	//|	// if (EXPECTED(idx < EG(symbol_table).nNumUsed * sizeof(Bucket)))
+	//|	MEM_LOAD_ZTS ecx, dword, executor_globals, symbol_table.nNumUsed, r1
+	dasm_put(Dst, 7185, Dt1(->run_time_cache), opline->extended_value);
+			if (IS_SIGNED_32BIT(&executor_globals.symbol_table.nNumUsed)) {
+	dasm_put(Dst, 5414, &executor_globals.symbol_table.nNumUsed);
+			} else {
+	dasm_put(Dst, 7198, (unsigned int)(((ptrdiff_t)&executor_globals.symbol_table.nNumUsed)), (unsigned int)((((ptrdiff_t)&executor_globals.symbol_table.nNumUsed))>>32));
+			}
+#line 12392 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.if X64
+		//|	shl r1, 5
+	//|.else
+		//|	imul r1, sizeof(Bucket)
+	//|.endif
+	//|	cmp r0, r1
+	//|	jae >9
+	//|	// Bucket *p = (Bucket*)((char*)EG(symbol_table).arData + idx);
+	//|	MEM_LOAD_OP_ZTS add, r0, aword, executor_globals, symbol_table.arData, r1
+	dasm_put(Dst, 7205);
+			if (IS_SIGNED_32BIT(&executor_globals.symbol_table.arData)) {
+	dasm_put(Dst, 7217, &executor_globals.symbol_table.arData);
+			} else {
+	dasm_put(Dst, 7223, (unsigned int)(((ptrdiff_t)&executor_globals.symbol_table.arData)), (unsigned int)((((ptrdiff_t)&executor_globals.symbol_table.arData))>>32));
+			}
+#line 12401 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	IF_NOT_Z_TYPE r0, IS_REFERENCE, >9
+	//|	// (EXPECTED(p->key == varname))
+	//|	ADDR_CMP aword [r0 + offsetof(Bucket, key)], varname, r1
+	dasm_put(Dst, 7231, offsetof(zval, u1.v.type), IS_REFERENCE);
+			if (IS_SIGNED_32BIT(varname)) {
+	dasm_put(Dst, 5771, offsetof(Bucket, key), ((ptrdiff_t)varname));
+			} else {
+	dasm_put(Dst, 5762, (unsigned int)(((ptrdiff_t)varname)), (unsigned int)((((ptrdiff_t)varname))>>32), offsetof(Bucket, key));
+			}
+#line 12404 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jne >9
+	//|	GET_Z_PTR r0, r0
+	//|	GC_ADDREF r0
+	//|1:
+	dasm_put(Dst, 7240);
+#line 12408 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			//|	// if (UNEXPECTED(Z_REFCOUNTED_P(variable_ptr)))
+			//|	IF_ZVAL_REFCOUNTED op1_addr, >2
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12412 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 7253, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+#line 12413 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 12414 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	// zend_refcounted *garbage = Z_COUNTED_P(variable_ptr);
+		//|	GET_ZVAL_PTR FCARG1a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12417 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// ZVAL_REF(variable_ptr, ref)
+		//|	SET_ZVAL_PTR op1_addr, r0
+		dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12419 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12420 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// if (GC_DELREF(garbage) == 0)
+		//|	GC_DELREF FCARG1a
+		dasm_put(Dst, 7268, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 12422 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
+			//|	jnz >3
+			dasm_put(Dst, 472);
+#line 12424 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jnz >5
+			dasm_put(Dst, 4173);
+#line 12426 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	ZVAL_DTOR_FUNC op1_info, opline
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+#line 12428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >5
+		dasm_put(Dst, 3340);
+#line 12429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
+			//|3:
+			//|	// GC_ZVAL_CHECK_POSSIBLE_ROOT(variable_ptr)
+			//|	IF_GC_MAY_NOT_LEAK FCARG1a, >5
+			//|	EXT_CALL gc_possible_root, r1
+			dasm_put(Dst, 7280, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 4380, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 7292);
+					}
+#line 12434 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >5
+			dasm_put(Dst, 3340);
+#line 12435 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			//|.code
+			dasm_put(Dst, 536);
+#line 12438 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		//|	// ZVAL_REF(variable_ptr, ref)
+		//|	SET_ZVAL_PTR op1_addr, r0
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 12444 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX
+		dasm_put(Dst, 2208, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info), IS_REFERENCE_EX);
+#line 12445 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|5:
+	dasm_put(Dst, 278);
+#line 12447 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//END of handler
+
+	//|.cold_code
+	dasm_put(Dst, 445);
+#line 12450 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|9:
+	//|	LOAD_ADDR FCARG1a, (ptrdiff_t)varname
+	dasm_put(Dst, 4090);
+			if (IS_SIGNED_32BIT((ptrdiff_t)varname)) {
+	dasm_put(Dst, 607, ((ptrdiff_t)(ptrdiff_t)varname));
+			} else {
+	dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)(ptrdiff_t)varname)), (unsigned int)((((ptrdiff_t)(ptrdiff_t)varname))>>32));
+			}
+#line 12452 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->extended_value) {
+		//|	add FCARG2a, opline->extended_value
+		dasm_put(Dst, 7296, opline->extended_value);
+#line 12454 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	EXT_CALL zend_jit_fetch_global_helper, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_global_helper)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_global_helper));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_fetch_global_helper)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_global_helper));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_global_helper)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_global_helper))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 12456 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	jmp <1
+	//|.code
+	dasm_put(Dst, 7301);
+#line 12458 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_verify_arg_type(dasm_State **Dst, const zend_op *opline, zend_arg_info *arg_info, bool check_exception)
+{
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	bool in_cold = 0;
+	uint32_t type_mask = ZEND_TYPE_PURE_MASK(arg_info->type) & MAY_BE_ANY;
+	zend_reg tmp_reg = (type_mask == 0 || is_power_of_two(type_mask)) ? ZREG_FCARG1 : ZREG_R0;
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+	 && JIT_G(current_frame)
+	 && JIT_G(current_frame)->prev) {
+		zend_jit_trace_stack *stack = JIT_G(current_frame)->stack;
+		uint8_t type = STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var));
+
+		if (type != IS_UNKNOWN && (type_mask & (1u << type))) {
+			return 1;
+		}
+	}
+
+	if (ZEND_ARG_SEND_MODE(arg_info)) {
+		if (opline->opcode == ZEND_RECV_INIT) {
+			//|	LOAD_ZVAL_ADDR Ra(tmp_reg), res_addr
+				if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+			dasm_put(Dst, 1709, (tmp_reg), ((ptrdiff_t)Z_ZV(res_addr)));
+					} else {
+			dasm_put(Dst, 1702, (tmp_reg), (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+					}
+				} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(res_addr)) {
+			dasm_put(Dst, 2395, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+			dasm_put(Dst, 1726, (Z_REG(res_addr)), (tmp_reg));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12483 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	ZVAL_DEREF Ra(tmp_reg), MAY_BE_REF
+				if (MAY_BE_REF & MAY_BE_REF) {
+			dasm_put(Dst, 7307, (tmp_reg), offsetof(zval, u1.v.type), IS_REFERENCE, (tmp_reg), (tmp_reg), 0, (tmp_reg), offsetof(zend_reference, val));
+				}
+#line 12484 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			res_addr = ZEND_ADDR_MEM_ZVAL(tmp_reg, 0);
+		} else {
+			//|	GET_ZVAL_PTR Ra(tmp_reg), res_addr
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (tmp_reg), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+#line 12487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			res_addr = ZEND_ADDR_MEM_ZVAL(tmp_reg, offsetof(zend_reference, val));
+		}
+	}
+
+	if (type_mask != 0) {
+		if (is_power_of_two(type_mask)) {
+			uint32_t type_code = concrete_type(type_mask);
+			//|	IF_NOT_ZVAL_TYPE res_addr, type_code, >1
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), type_code);
+#line 12495 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov edx, 1
+			//|	mov cl, byte [Ra(Z_REG(res_addr))+Z_OFFSET(res_addr)+offsetof(zval, u1.v.type)]
+			//|	shl edx, cl
+			//|	test edx, type_mask
+			//|	je >1
+			dasm_put(Dst, 7337, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), type_mask);
+#line 12501 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 12504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 12505 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		in_cold = 1;
+	}
+
+	if (Z_REG(res_addr) != ZREG_FCARG1 || Z_OFFSET(res_addr) != 0) {
+		//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+			if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+				}
+			} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(res_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 12511 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 12514 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	ADDR_STORE aword EX->opline, opline, r0
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+#line 12516 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	LOAD_ADDR FCARG2a, (ptrdiff_t)arg_info
+			if (IS_SIGNED_32BIT((ptrdiff_t)arg_info)) {
+	dasm_put(Dst, 612, ((ptrdiff_t)(ptrdiff_t)arg_info));
+			} else {
+	dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)(ptrdiff_t)arg_info)), (unsigned int)((((ptrdiff_t)(ptrdiff_t)arg_info))>>32));
+			}
+#line 12518 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	EXT_CALL zend_jit_verify_arg_slow, r0
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_verify_arg_slow)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_verify_arg_slow));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_verify_arg_slow)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_verify_arg_slow));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_verify_arg_slow)), (unsigned int)((((ptrdiff_t)zend_jit_verify_arg_slow))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 12519 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (check_exception) {
+		//|	test al, al
+		dasm_put(Dst, 5189);
+#line 12522 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (in_cold) {
+			//|	jnz >1
+			//|	jmp ->exception_handler
+			//|.code
+			dasm_put(Dst, 5960);
+#line 12526 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 12527 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jz ->exception_handler
+			dasm_put(Dst, 5887);
+#line 12529 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (in_cold) {
+		//|	jmp >1
+		//|.code
+		dasm_put(Dst, 3727);
+#line 12533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 12534 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_recv(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array)
+{
+	uint32_t arg_num = opline->op1.num;
+	zend_arg_info *arg_info = NULL;
+
+	if (op_array->fn_flags & ZEND_ACC_HAS_TYPE_HINTS) {
+		if (EXPECTED(arg_num <= op_array->num_args)) {
+			arg_info = &op_array->arg_info[arg_num-1];
+		} else if (UNEXPECTED(op_array->fn_flags & ZEND_ACC_VARIADIC)) {
+			arg_info = &op_array->arg_info[op_array->num_args];
+		}
+		if (arg_info && !ZEND_TYPE_IS_SET(arg_info->type)) {
+			arg_info = NULL;
+		}
+	}
+
+	if (arg_info || (opline+1)->opcode != ZEND_RECV) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			if (!JIT_G(current_frame) ||
+			    TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)) < 0 ||
+			    arg_num > TRACE_FRAME_NUM_ARGS(JIT_G(current_frame))) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	cmp dword EX->This.u2.num_args, arg_num
+				//|	jb &exit_addr
+				dasm_put(Dst, 7360, Dt1(->This.u2.num_args), arg_num, (ptrdiff_t)(exit_addr));
+#line 12568 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	cmp dword EX->This.u2.num_args, arg_num
+			//|	jb >1
+			//|.cold_code
+			dasm_put(Dst, 7369, Dt1(->This.u2.num_args), arg_num);
+#line 12573 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 12574 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 12576 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	ADDR_STORE aword EX->opline, opline, r0
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+#line 12578 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	mov FCARG1a, FP
+			//|	EXT_CALL zend_missing_arg_error, r0
+			dasm_put(Dst, 66);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_missing_arg_error)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_missing_arg_error));
+					} else {
+					if (IS_SIGNED_32BIT(zend_missing_arg_error)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_missing_arg_error));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_missing_arg_error)), (unsigned int)((((ptrdiff_t)zend_missing_arg_error))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12581 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp ->exception_handler
+			//|.code
+			dasm_put(Dst, 5802);
+#line 12583 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (arg_info) {
+		if (!zend_jit_verify_arg_type(Dst, opline, arg_info, 1)) {
+			return 0;
+		}
+	}
+
+	if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE) {
+		if ((opline+1)->opcode != ZEND_RECV && (opline+1)->opcode != ZEND_RECV_INIT) {
+			//|	LOAD_IP_ADDR (opline + 1)
+				if (GCC_GLOBAL_REGS) {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 281, ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32));
+					}
+				} else {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32), Dt1(->opline));
+					}
+				}
+#line 12595 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			zend_jit_set_last_valid_opline(opline + 1);
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_recv_init(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, bool is_last, int may_throw)
+{
+	uint32_t arg_num = opline->op1.num;
+	zval *zv = RT_CONSTANT(opline, opline->op2);
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+	 && JIT_G(current_frame)
+	 && TRACE_FRAME_NUM_ARGS(JIT_G(current_frame)) >= 0) {
+		if (arg_num > TRACE_FRAME_NUM_ARGS(JIT_G(current_frame))) {
+			//|	ZVAL_COPY_CONST res_addr, -1, -1, zv, ZREG_R0
+				if (Z_TYPE_P(zv) > IS_TRUE) {
+					if (Z_TYPE_P(zv) == IS_DOUBLE) {
+						zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+						if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+							if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							} else {
+			dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+							}
+						} else if (!IS_SIGNED_32BIT(zv)) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+				} else {
+			dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+				}
+						} else {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				} else {
+			dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+				}
+						}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (dst_reg != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+					} else if (Z_TYPE_P(zv) == IS_LONG && -1 == MAY_BE_DOUBLE) {
+						zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+					if (Z_LVAL_P(zv) == 0) {
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+			dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+						} else {
+			dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+						}
+						if (CAN_USE_AVX()) {
+			dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+						} else {
+			dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+						}
+					}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (dst_reg != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+					} else if (Z_LVAL_P(zv) == 0 && Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+								if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+								} else {
+			dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R0), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+								}
+							} else {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(zv));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), Z_LVAL_P(zv));
+				}
+							}
+					}
+				}
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if (-1 == MAY_BE_DOUBLE) {
+						if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+						}
+					} else if (((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (-1 & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+					}
+				}
+#line 12613 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_REFCOUNTED_P(zv)) {
+				//|	ADDREF_CONST zv, r0
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+				dasm_put(Dst, 6336, (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+						} else {
+				dasm_put(Dst, 3828, Z_LVAL_P(zv));
+						}
+#line 12615 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+	} else {
+		if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE ||
+		    (op_array->fn_flags & ZEND_ACC_HAS_TYPE_HINTS)) {
+			//|	cmp dword EX->This.u2.num_args, arg_num
+			//|	jae >5
+			dasm_put(Dst, 7380, Dt1(->This.u2.num_args), arg_num);
+#line 12622 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	ZVAL_COPY_CONST res_addr, -1, -1, zv, ZREG_R0
+			if (Z_TYPE_P(zv) > IS_TRUE) {
+				if (Z_TYPE_P(zv) == IS_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+					if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+						if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else if (!IS_SIGNED_32BIT(zv)) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			} else {
+		dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			}
+					} else {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			} else {
+		dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			}
+					}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (dst_reg != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+				} else if (Z_TYPE_P(zv) == IS_LONG && -1 == MAY_BE_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+				if (Z_LVAL_P(zv) == 0) {
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					}
+				} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+					} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+					}
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					} else {
+		dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					}
+				}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (dst_reg != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+				} else if (Z_LVAL_P(zv) == 0 && Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+							if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+							} else {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R0), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+							}
+						} else {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(zv));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), Z_LVAL_P(zv));
+			}
+						}
+				}
+			}
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (-1 == MAY_BE_DOUBLE) {
+					if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+					}
+				} else if (((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (-1 & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+				}
+			}
+#line 12624 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REFCOUNTED_P(zv)) {
+			//|	ADDREF_CONST zv, r0
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 6336, (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+					} else {
+			dasm_put(Dst, 3828, Z_LVAL_P(zv));
+					}
+#line 12626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (Z_CONSTANT_P(zv)) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 12632 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	ADDR_STORE aword EX->opline, opline, r0
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+#line 12634 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	LOAD_ZVAL_ADDR FCARG1a, res_addr
+			if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(res_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+				}
+			} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(res_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 12636 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov r0, EX->func
+		//|	mov FCARG2a, [r0 + offsetof(zend_op_array, scope)]
+		//|	.if X64
+		//|		EXT_CALL zval_update_constant_ex, r0
+		dasm_put(Dst, 7390, Dt1(->func), offsetof(zend_op_array, scope));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zval_update_constant_ex)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zval_update_constant_ex));
+				} else {
+				if (IS_SIGNED_32BIT(zval_update_constant_ex)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zval_update_constant_ex));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zval_update_constant_ex)), (unsigned int)((((ptrdiff_t)zval_update_constant_ex))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 12640 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	.else
+#line 12642 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|		EXT_CALL zval_jit_update_constant_ex, r0
+#line 12644 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|		EXT_CALL zval_update_constant_ex, r0
+#line 12646 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	.endif
+		//|	test al, al
+		//|	jnz >1
+		//|.cold_code
+		dasm_put(Dst, 7399);
+#line 12650 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		//|	ZVAL_PTR_DTOR res_addr, MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN, 1, 0, opline
+		dasm_put(Dst, 63);
+			if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				if (RC_MAY_BE_1(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN)) {
+					if (RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN)) {
+						if (1 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (1 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (1 && RC_MAY_BE_N(MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((MAY_BE_ANY|MAY_BE_RC1|MAY_BE_RCN) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+#line 12652 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_UNDEF
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12653 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp ->exception_handler
+		//|.code
+		dasm_put(Dst, 7407, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_UNDEF);
+#line 12655 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|5:
+	dasm_put(Dst, 278);
+#line 12658 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (op_array->fn_flags & ZEND_ACC_HAS_TYPE_HINTS) {
+		do {
+			zend_arg_info *arg_info;
+
+			if (arg_num <= op_array->num_args) {
+				arg_info = &op_array->arg_info[arg_num-1];
+			} else if (op_array->fn_flags & ZEND_ACC_VARIADIC) {
+				arg_info = &op_array->arg_info[op_array->num_args];
+			} else {
+				break;
+			}
+			if (!ZEND_TYPE_IS_SET(arg_info->type)) {
+				break;
+			}
+			if (!zend_jit_verify_arg_type(Dst, opline, arg_info, may_throw)) {
+				return 0;
+			}
+		} while (0);
+	}
+
+	if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE) {
+		if (is_last) {
+			//|	LOAD_IP_ADDR (opline + 1)
+				if (GCC_GLOBAL_REGS) {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 281, ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 286, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32));
+					}
+				} else {
+					if (IS_SIGNED_32BIT((opline + 1))) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)(opline + 1)));
+					} else {
+			dasm_put(Dst, 297, (unsigned int)(((ptrdiff_t)(opline + 1))), (unsigned int)((((ptrdiff_t)(opline + 1)))>>32), Dt1(->opline));
+					}
+				}
+#line 12682 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			zend_jit_set_last_valid_opline(opline + 1);
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_class_guard(dasm_State **Dst, const zend_op *opline, zend_class_entry *ce)
+{
+	int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+
+	//|.if X64
+		if (!IS_SIGNED_32BIT(ce)) {
+	//|		mov64 r0, ((ptrdiff_t)ce)
+	//|		cmp aword [FCARG1a + offsetof(zend_object, ce)], r0
+	dasm_put(Dst, 7421, (unsigned int)(((ptrdiff_t)ce)), (unsigned int)((((ptrdiff_t)ce))>>32), offsetof(zend_object, ce));
+		} else {
+#line 12703 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|		cmp aword [FCARG1a + offsetof(zend_object, ce)], ce
+	dasm_put(Dst, 7430, offsetof(zend_object, ce), ce);
+		}
+#line 12705 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.else
+	//|	cmp aword [FCARG1a + offsetof(zend_object, ce)], ce
+	//|.endif
+	//|	jne &exit_addr
+	dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 12709 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_fetch_obj(dasm_State          **Dst,
+                              const zend_op        *opline,
+                              const zend_op_array  *op_array,
+                              zend_ssa             *ssa,
+                              const zend_ssa_op    *ssa_op,
+                              uint32_t              op1_info,
+                              zend_jit_addr         op1_addr,
+                              bool                  op1_indirect,
+                              zend_class_entry     *ce,
+                              bool                  ce_is_instanceof,
+                              bool                  on_this,
+                              bool                  delayed_fetch_this,
+                              bool                  op1_avoid_refcounting,
+                              zend_class_entry     *trace_ce,
+                              uint8_t               prop_type,
+                              int                   may_throw)
+{
+	zval *member;
+	zend_property_info *prop_info;
+	bool may_be_dynamic = 1;
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	zend_jit_addr this_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, offsetof(zend_execute_data, This));
+	zend_jit_addr prop_addr;
+	uint32_t res_info = RES_INFO();
+	bool type_loaded = 0;
+
+	ZEND_ASSERT(opline->op2_type == IS_CONST);
+	ZEND_ASSERT(op1_info & MAY_BE_OBJECT);
+
+	member = RT_CONSTANT(opline, opline->op2);
+	ZEND_ASSERT(Z_TYPE_P(member) == IS_STRING && Z_STRVAL_P(member)[0] != '\0');
+	prop_info = zend_get_known_property_info(op_array, ce, Z_STR_P(member), on_this, op_array->filename);
+
+	if (on_this) {
+		//|	GET_ZVAL_PTR FCARG1a, this_addr
+			ZEND_ASSERT(Z_MODE(this_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(this_addr)), Z_OFFSET(this_addr));
+#line 12748 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (opline->op1_type == IS_VAR
+		 && opline->opcode == ZEND_FETCH_OBJ_W
+		 && (op1_info & MAY_BE_INDIRECT)
+		 && Z_REG(op1_addr) == ZREG_FP) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12754 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_INDIRECT, >1
+			//|	GET_Z_PTR FCARG1a, FCARG1a
+			//|1:
+			dasm_put(Dst, 7436, offsetof(zval, u1.v.type), IS_INDIRECT);
+#line 12757 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & MAY_BE_REF) {
+			if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 12762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	ZVAL_DEREF FCARG1a, op1_info
+				if (op1_info & MAY_BE_REF) {
+			dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 12764 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)- MAY_BE_OBJECT)) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 12775 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >7
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 12777 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	GET_ZVAL_PTR FCARG1a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 12780 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!prop_info && trace_ce && (trace_ce->ce_flags & ZEND_ACC_IMMUTABLE)) {
+		prop_info = zend_get_known_property_info(op_array, trace_ce, Z_STR_P(member), on_this, op_array->filename);
+		if (prop_info) {
+			ce = trace_ce;
+			ce_is_instanceof = 0;
+			if (!(op1_info & MAY_BE_CLASS_GUARD)) {
+				if (on_this && JIT_G(current_frame)
+				 && TRACE_FRAME_IS_THIS_CLASS_CHECKED(JIT_G(current_frame))) {
+					ZEND_ASSERT(JIT_G(current_frame)->ce == ce);
+				} else if (zend_jit_class_guard(Dst, opline, ce)) {
+					if (on_this && JIT_G(current_frame)) {
+						JIT_G(current_frame)->ce = ce;
+						TRACE_FRAME_SET_THIS_CLASS_CHECKED(JIT_G(current_frame));
+					}
+				} else {
+					return 0;
+				}
+				if (ssa->var_info && ssa_op->op1_use >= 0) {
+					ssa->var_info[ssa_op->op1_use].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_use].ce = ce;
+					ssa->var_info[ssa_op->op1_use].is_instanceof = ce_is_instanceof;
+				}
+			}
+		}
+	}
+
+	if (!prop_info) {
+		//|	mov r0, EX->run_time_cache
+		//|	mov r2, aword [r0 + (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS)]
+		//|	cmp r2, aword [FCARG1a + offsetof(zend_object, ce)]
+		//|	jne >5
+		//|	mov r0, aword [r0 + (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS) + sizeof(void*)]
+		dasm_put(Dst, 7450, Dt1(->run_time_cache), (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS), offsetof(zend_object, ce), (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS) + sizeof(void*));
+#line 12814 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		may_be_dynamic = zend_may_be_dynamic_property(ce, Z_STR_P(member), opline->op1_type == IS_UNUSED, op_array->filename);
+		if (may_be_dynamic) {
+			//|	test r0, r0
+			dasm_put(Dst, 3565);
+#line 12817 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode == ZEND_FETCH_OBJ_W) {
+				//|	jl >5
+				dasm_put(Dst, 7471);
+#line 12819 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jl >8 // dynamic property
+				dasm_put(Dst, 7476);
+#line 12821 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	mov edx, dword [FCARG1a + r0 + 8]
+		//|	IF_UNDEF dl, >5
+		//|	add FCARG1a, r0
+		dasm_put(Dst, 7481, 8);
+#line 12826 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		type_loaded = 1;
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		if (opline->opcode == ZEND_FETCH_OBJ_W
+		 && (!ce ||	ce_is_instanceof || (ce->ce_flags & ZEND_ACC_HAS_TYPE_HINTS))) {
+			uint32_t flags = opline->extended_value & ZEND_FETCH_OBJ_FLAGS;
+
+			//|	mov r0, EX->run_time_cache
+			//|	mov FCARG2a, aword [r0 + (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS) + sizeof(void*) * 2]
+			//|	test FCARG2a, FCARG2a
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 7496, Dt1(->run_time_cache), (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS) + sizeof(void*) * 2);
+#line 12837 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	test dword [FCARG2a + offsetof(zend_property_info, flags)], ZEND_ACC_READONLY
+			//|	jz >3
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_OBJECT, >2
+			//|	GET_Z_PTR r0, FCARG1a
+			//|	GC_ADDREF r0
+			//|	SET_ZVAL_PTR res_addr, r0
+			dasm_put(Dst, 7514, offsetof(zend_property_info, flags), ZEND_ACC_READONLY, offsetof(zval, u1.v.type), IS_OBJECT);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12844 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_OBJECT_EX
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12845 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >9
+			//|2:
+			//|	mov FCARG1a, FCARG2a
+			//|	SET_EX_OPLINE opline, r0
+			dasm_put(Dst, 7540, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_OBJECT_EX);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 12849 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_readonly_property_modification_error, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_readonly_property_modification_error)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_readonly_property_modification_error));
+					} else {
+					if (IS_SIGNED_32BIT(zend_readonly_property_modification_error)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_readonly_property_modification_error));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_readonly_property_modification_error)), (unsigned int)((((ptrdiff_t)zend_readonly_property_modification_error))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12850 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, _IS_ERROR
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12851 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >9
+			//|3:
+			dasm_put(Dst, 7559, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), _IS_ERROR);
+#line 12853 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (flags == ZEND_FETCH_DIM_WRITE) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 12855 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_check_array_promotion, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_check_array_promotion)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_check_array_promotion));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_check_array_promotion)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_check_array_promotion));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_check_array_promotion)), (unsigned int)((((ptrdiff_t)zend_jit_check_array_promotion))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12856 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 12857 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (flags == ZEND_FETCH_REF) {
+				//|.if X64
+					//|	LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 12860 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				//|	EXT_CALL zend_jit_create_typed_ref, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_create_typed_ref)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_create_typed_ref));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_create_typed_ref)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_create_typed_ref));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_create_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_create_typed_ref))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12865 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 12869 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_ASSERT(flags == 0);
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 12873 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, prop_info->offset);
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			if (opline->opcode == ZEND_FETCH_OBJ_W || !(res_info & MAY_BE_GUARD) || !JIT_G(current_frame)) {
+				/* perform IS_UNDEF check only after result type guard (during deoptimization) */
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				type_loaded = 1;
+				//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+				//|	IF_UNDEF dl, &exit_addr
+				dasm_put(Dst, 7574, prop_info->offset + 8, (ptrdiff_t)(exit_addr));
+#line 12888 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			type_loaded = 1;
+			//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+			//|	IF_UNDEF dl, >5
+			dasm_put(Dst, 7583, prop_info->offset + 8);
+#line 12893 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->opcode == ZEND_FETCH_OBJ_W && (prop_info->flags & ZEND_ACC_READONLY)) {
+			if (!type_loaded) {
+				type_loaded = 1;
+				//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+				dasm_put(Dst, 7593, prop_info->offset + 8);
+#line 12898 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	IF_NOT_TYPE dl, IS_OBJECT, >4
+			//|	GET_ZVAL_PTR r0, prop_addr
+			dasm_put(Dst, 7597, IS_OBJECT);
+				ZEND_ASSERT(Z_MODE(prop_addr) == IS_MEM_ZVAL);
+#line 12901 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_ADDREF r0
+			//|	SET_ZVAL_PTR res_addr, r0
+			dasm_put(Dst, 7606, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12903 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_OBJECT_EX
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12904 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >9
+			//|.cold_code
+			dasm_put(Dst, 7617, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_OBJECT_EX);
+#line 12906 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|4:
+			//|	LOAD_ADDR FCARG1a, prop_info
+			dasm_put(Dst, 538);
+					if (IS_SIGNED_32BIT(prop_info)) {
+			dasm_put(Dst, 607, ((ptrdiff_t)prop_info));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+					}
+#line 12908 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 12909 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_readonly_property_modification_error, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_readonly_property_modification_error)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_readonly_property_modification_error));
+					} else {
+					if (IS_SIGNED_32BIT(zend_readonly_property_modification_error)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_readonly_property_modification_error));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_readonly_property_modification_error)), (unsigned int)((((ptrdiff_t)zend_readonly_property_modification_error))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 12910 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, _IS_ERROR
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12911 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 7631, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), _IS_ERROR);
+#line 12913 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->opcode == ZEND_FETCH_OBJ_W
+		 && (opline->extended_value & ZEND_FETCH_OBJ_FLAGS)
+		 && ZEND_TYPE_IS_SET(prop_info->type)) {
+			uint32_t flags = opline->extended_value & ZEND_FETCH_OBJ_FLAGS;
+
+			if (flags == ZEND_FETCH_DIM_WRITE) {
+				if ((ZEND_TYPE_FULL_MASK(prop_info->type) & (MAY_BE_ITERABLE|MAY_BE_ARRAY)) == 0) {
+					if (!type_loaded) {
+						type_loaded = 1;
+						//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+						dasm_put(Dst, 7593, prop_info->offset + 8);
+#line 12924 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	cmp dl, IS_FALSE
+					//|	jle >1
+					//|.cold_code
+					dasm_put(Dst, 7645, IS_FALSE);
+#line 12928 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					dasm_put(Dst, 63);
+#line 12929 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (Z_REG(prop_addr) != ZREG_FCARG1 || Z_OFFSET(prop_addr) != 0) {
+						//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+							if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+						dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+								} else {
+						dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+								}
+							} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+								if (Z_OFFSET(prop_addr)) {
+						dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+								} else {
+						dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+								}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+#line 12931 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	LOAD_ADDR FCARG2a, prop_info
+							if (IS_SIGNED_32BIT(prop_info)) {
+					dasm_put(Dst, 612, ((ptrdiff_t)prop_info));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+							}
+#line 12933 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	SET_EX_OPLINE opline, r0
+						if (opline == last_valid_opline) {
+							zend_jit_use_last_valid_opline();
+						if (GCC_GLOBAL_REGS) {
+					dasm_put(Dst, 8, Dt1(->opline));
+						}
+						} else {
+							if (IS_SIGNED_32BIT(opline)) {
+					dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+							} else {
+					dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+							}
+							if (!GCC_GLOBAL_REGS) {
+								zend_jit_reset_last_valid_opline();
+							}
+						}
+#line 12934 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_check_array_promotion, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_check_array_promotion)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_check_array_promotion));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_check_array_promotion)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_check_array_promotion));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_check_array_promotion)), (unsigned int)((((ptrdiff_t)zend_jit_check_array_promotion))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 12935 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	jmp >9
+					//|.code
+					dasm_put(Dst, 4064);
+#line 12937 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else if (flags == ZEND_FETCH_REF) {
+				if (!type_loaded) {
+					type_loaded = 1;
+					//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+					dasm_put(Dst, 7593, prop_info->offset + 8);
+#line 12942 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	IF_TYPE dl, IS_REFERENCE, >1
+				dasm_put(Dst, 7655, IS_REFERENCE);
+#line 12944 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (ce && ce->ce_flags & ZEND_ACC_IMMUTABLE) {
+					//|	LOAD_ADDR FCARG2a, prop_info
+							if (IS_SIGNED_32BIT(prop_info)) {
+					dasm_put(Dst, 612, ((ptrdiff_t)prop_info));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+							}
+#line 12946 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					int prop_info_offset =
+						(((prop_info->offset - (sizeof(zend_object) - sizeof(zval))) / sizeof(zval)) * sizeof(void*));
+
+					//|	mov r0, aword [FCARG1a + offsetof(zend_object, ce)]
+					//|	mov	r0, aword [r0 + offsetof(zend_class_entry, properties_info_table)]
+					//|	mov FCARG2a, aword[r0 + prop_info_offset]
+					dasm_put(Dst, 7664, offsetof(zend_object, ce), offsetof(zend_class_entry, properties_info_table), prop_info_offset);
+#line 12953 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (Z_REG(prop_addr) != ZREG_FCARG1 || Z_OFFSET(prop_addr) != 0) {
+					//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+						if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+							}
+						} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(prop_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 12956 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|.if X64
+					//|	LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 12959 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				//|	EXT_CALL zend_jit_create_typed_ref, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_create_typed_ref)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_create_typed_ref));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_create_typed_ref)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_create_typed_ref));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_create_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_create_typed_ref))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 12964 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.if not(X64)
+				//|	add r4, 12
+				//|.endif
+				//|	jmp >9
+				//|1:
+				dasm_put(Dst, 7677);
+#line 12969 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		}
+	}
+	if (opline->opcode == ZEND_FETCH_OBJ_W) {
+		if (Z_REG(prop_addr) != ZREG_FCARG1 || Z_OFFSET(prop_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+				if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+					}
+				} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(prop_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 12977 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_ZVAL_PTR res_addr, FCARG1a
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 12979 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_INDIRECT
+		dasm_put(Dst, 7684, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_INDIRECT);
+#line 12980 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE && prop_info) {
+			ssa->var_info[ssa_op->result_def].indirect_reference = 1;
+		}
+	} else {
+		bool result_avoid_refcounting = 0;
+
+		if ((res_info & MAY_BE_GUARD) && JIT_G(current_frame) && prop_info) {
+			uint32_t flags = 0;
+			uint32_t old_info;
+			zend_jit_trace_stack *stack = JIT_G(current_frame)->stack;
+			int32_t exit_point;
+			const void *exit_addr;
+			zend_uchar type;
+			zend_jit_addr val_addr = prop_addr;
+
+			if ((opline->op1_type & (IS_VAR|IS_TMP_VAR))
+			 && !delayed_fetch_this
+			 && !op1_avoid_refcounting) {
+				flags = ZEND_JIT_EXIT_FREE_OP1;
+			}
+
+			if ((opline->result_type & (IS_VAR|IS_TMP_VAR))
+			 && !(flags & ZEND_JIT_EXIT_FREE_OP1)
+			 && (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))
+			 && (ssa_op+1)->op1_use == ssa_op->result_def
+			 && zend_jit_may_avoid_refcounting(opline+1)) {
+				result_avoid_refcounting = 1;
+				ssa->var_info[ssa_op->result_def].avoid_refcounting = 1;
+			}
+
+			type = concrete_type(res_info);
+
+			if (prop_type != IS_UNKNOWN
+			 && prop_type != IS_UNDEF
+			 && prop_type != IS_REFERENCE
+			 && (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_OBJECT) {
+				exit_point = zend_jit_trace_get_exit_point(opline, 0);
+				exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+			} else {
+				val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+				//|	LOAD_ZVAL_ADDR r0, prop_addr
+					if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(prop_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+						}
+					} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(prop_addr)) {
+				dasm_put(Dst, 6372, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+						} else {
+				dasm_put(Dst, 6380, (Z_REG(prop_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13021 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_avoid_refcounting) {
+					SET_STACK_REG(JIT_G(current_frame)->stack,
+						EX_VAR_TO_NUM(opline->op1.var), ZREG_NONE);
+				}
+				old_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+				SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_UNKNOWN, 1);
+				SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_ZVAL_COPY_GPR0);
+				exit_point = zend_jit_trace_get_exit_point(opline+1, flags);
+					SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_info);
+				exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+				if (!exit_addr) {
+					return 0;
+				}
+
+				if (!type_loaded) {
+					type_loaded = 1;
+					//|	mov edx, dword [FCARG1a + prop_info->offset + 8]
+					dasm_put(Dst, 7593, prop_info->offset + 8);
+#line 13038 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	// ZVAL_DEREF()
+				//|	IF_NOT_TYPE dl, IS_REFERENCE, >1
+				//|	GET_Z_PTR r0, r0
+				//|	add r0, offsetof(zend_reference, val)
+				//|	GET_ZVAL_TYPE_INFO edx, val_addr
+				dasm_put(Dst, 7692, IS_REFERENCE, offsetof(zend_reference, val));
+					ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 7708, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+#line 13044 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			res_info &= ~MAY_BE_GUARD;
+			ssa->var_info[ssa_op->result_def].type &= ~MAY_BE_GUARD;
+			if (type < IS_STRING) {
+				//|1:
+				dasm_put(Dst, 63);
+#line 13049 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (type_loaded) {
+					//|	IF_NOT_TYPE dl, type, &exit_addr
+					dasm_put(Dst, 7142, type, (ptrdiff_t)(exit_addr));
+#line 13051 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	IF_NOT_ZVAL_TYPE val_addr, type, &exit_addr
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 5790, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval, u1.v.type), type, (ptrdiff_t)(exit_addr));
+#line 13053 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (!type_loaded) {
+					type_loaded = 1;
+					//|	GET_ZVAL_TYPE_INFO edx, val_addr
+						ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 7708, (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+#line 13058 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|1:
+				//|	IF_NOT_TYPE dl, type, &exit_addr
+				dasm_put(Dst, 7716, type, (ptrdiff_t)(exit_addr));
+#line 13061 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	// ZVAL_COPY
+			//|	ZVAL_COPY_VALUE_V res_addr, -1, val_addr, res_info, ZREG_R0, ZREG_R1
+				if (res_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+							}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(res_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(res_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (ZREG_R1 != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_R1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+						}
+					} else if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						} else if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(res_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(res_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(res_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+				}
+						}
+					} else if (!(res_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+				}
+#line 13064 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (type < IS_STRING) {
+				if (Z_REG(res_addr) != ZREG_FP ||
+				    JIT_G(current_frame) == NULL ||
+				    STACK_MEM_TYPE(JIT_G(current_frame)->stack, EX_VAR_TO_NUM(Z_OFFSET(res_addr))) != type) {
+					//|	SET_ZVAL_TYPE_INFO res_addr, type
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+#line 13069 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				//|	SET_ZVAL_TYPE_INFO res_addr, edx
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 7022, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 13072 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!result_avoid_refcounting) {
+					//|	TRY_ADDREF res_info, dh, r1
+						if (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+							if (res_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					dasm_put(Dst, 3985);
+							}
+					dasm_put(Dst, 2095);
+						}
+#line 13074 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		} else {
+			if (!zend_jit_zval_copy_deref(Dst, res_addr, prop_addr, ZREG_R2)) {
+				return 0;
+			}
+		}
+	}
+
+	if (op1_avoid_refcounting) {
+		SET_STACK_REG(JIT_G(current_frame)->stack,
+			EX_VAR_TO_NUM(opline->op1.var), ZREG_NONE);
+	}
+
+	//|.cold_code
+	dasm_put(Dst, 445);
+#line 13089 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE || !prop_info) {
+		//|5:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 278);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 13093 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode == ZEND_FETCH_OBJ_W) {
+			//|	EXT_CALL zend_jit_fetch_obj_w_slow, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_obj_w_slow)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_obj_w_slow));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fetch_obj_w_slow)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_obj_w_slow));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_obj_w_slow)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_obj_w_slow))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13095 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (opline->opcode != ZEND_FETCH_OBJ_IS) {
+			//|	EXT_CALL zend_jit_fetch_obj_r_slow, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_obj_r_slow)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_obj_r_slow));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fetch_obj_r_slow)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_obj_r_slow));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_obj_r_slow)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_obj_r_slow))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13097 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	EXT_CALL zend_jit_fetch_obj_is_slow, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_obj_is_slow)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_obj_is_slow));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fetch_obj_is_slow)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_obj_is_slow));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_obj_is_slow)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_obj_is_slow))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13099 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	jmp >9
+		dasm_put(Dst, 3627);
+#line 13101 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if ((op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)- MAY_BE_OBJECT)) && JIT_G(trigger) != ZEND_JIT_ON_HOT_TRACE) {
+		//|7:
+		dasm_put(Dst, 4342);
+#line 13105 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode != ZEND_FETCH_OBJ_IS) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 13107 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode != ZEND_FETCH_OBJ_W
+			 && (op1_info & MAY_BE_UNDEF)) {
+				zend_jit_addr orig_op1_addr = OP1_ADDR();
+
+				if (op1_info & MAY_BE_ANY) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 13113 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	mov FCARG1d, opline->op1.var
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 2237, opline->op1.var);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13116 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	LOAD_ZVAL_ADDR FCARG1a, orig_op1_addr
+				dasm_put(Dst, 63);
+					if (Z_MODE(orig_op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(orig_op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(orig_op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(orig_op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(orig_op1_addr)))>>32));
+						}
+					} else if (Z_MODE(orig_op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(orig_op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(orig_op1_addr)), Z_OFFSET(orig_op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(orig_op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13118 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13120 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ADDR FCARG2a, Z_STRVAL_P(member)
+					if (IS_SIGNED_32BIT(Z_STRVAL_P(member))) {
+			dasm_put(Dst, 612, ((ptrdiff_t)Z_STRVAL_P(member)));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_STRVAL_P(member))), (unsigned int)((((ptrdiff_t)Z_STRVAL_P(member)))>>32));
+					}
+#line 13122 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode == ZEND_FETCH_OBJ_W) {
+				//|	EXT_CALL zend_jit_invalid_property_write, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_write)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_write));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_invalid_property_write)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_write));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_write)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_write))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13124 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SET_ZVAL_TYPE_INFO res_addr, _IS_ERROR
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), _IS_ERROR);
+#line 13125 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	EXT_CALL zend_jit_invalid_property_read, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_read)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_read));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_invalid_property_read)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_read));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_read)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_read))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13127 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 13128 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	jmp >9
+			dasm_put(Dst, 3627);
+#line 13130 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 13132 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp >9
+			dasm_put(Dst, 3685, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 13133 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!prop_info
+	 && may_be_dynamic
+	 && opline->opcode != ZEND_FETCH_OBJ_W) {
+		//|8:
+		//|	mov FCARG2a, r0
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 7726);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 13142 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->opcode != ZEND_FETCH_OBJ_IS) {
+			//|	EXT_CALL zend_jit_fetch_obj_r_dynamic, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_obj_r_dynamic)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_obj_r_dynamic));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fetch_obj_r_dynamic)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_obj_r_dynamic));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_obj_r_dynamic)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_obj_r_dynamic))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13144 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	EXT_CALL zend_jit_fetch_obj_is_dynamic, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_fetch_obj_is_dynamic)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_fetch_obj_is_dynamic));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_fetch_obj_is_dynamic)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_fetch_obj_is_dynamic));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_fetch_obj_is_dynamic)), (unsigned int)((((ptrdiff_t)zend_jit_fetch_obj_is_dynamic))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13146 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	jmp >9
+		dasm_put(Dst, 3627);
+#line 13148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|.code;
+	dasm_put(Dst, 536);
+#line 13151 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|9: // END
+	dasm_put(Dst, 4090);
+#line 13152 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->op1_type != IS_UNUSED && !delayed_fetch_this && !op1_indirect) {
+		if (opline->op1_type == IS_VAR
+		 && opline->opcode == ZEND_FETCH_OBJ_W
+		 && (op1_info & MAY_BE_RC1)) {
+			zend_jit_addr orig_op1_addr = OP1_ADDR();
+
+			//|	IF_NOT_ZVAL_REFCOUNTED orig_op1_addr, >1
+				ZEND_ASSERT(Z_MODE(orig_op1_addr) == IS_MEM_ZVAL);
+#line 13159 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GET_ZVAL_PTR FCARG1a, orig_op1_addr
+			dasm_put(Dst, 2074, (Z_REG(orig_op1_addr)), Z_OFFSET(orig_op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+				ZEND_ASSERT(Z_MODE(orig_op1_addr) == IS_MEM_ZVAL);
+#line 13160 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GC_DELREF FCARG1a
+			//|	jnz >1
+			//|	SET_EX_OPLINE opline, r0
+			dasm_put(Dst, 7732, (Z_REG(orig_op1_addr)), Z_OFFSET(orig_op1_addr));
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 13163 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	EXT_CALL zend_jit_extract_helper, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_extract_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_extract_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_extract_helper)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_extract_helper));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_extract_helper)), (unsigned int)((((ptrdiff_t)zend_jit_extract_helper))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13164 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 13165 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (!op1_avoid_refcounting) {
+			if (on_this) {
+				op1_info &= ~MAY_BE_RC1;
+			}
+			//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+				if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (1) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 13170 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE
+	 && prop_info
+	 && (!(opline->op1_type & (IS_VAR|IS_TMP_VAR)) || on_this || op1_indirect)) {
+		may_throw = 0;
+	}
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_incdec_obj(dasm_State          **Dst,
+                               const zend_op        *opline,
+                               const zend_op_array  *op_array,
+                               zend_ssa             *ssa,
+                               const zend_ssa_op    *ssa_op,
+                               uint32_t              op1_info,
+                               zend_jit_addr         op1_addr,
+                               bool                  op1_indirect,
+                               zend_class_entry     *ce,
+                               bool                  ce_is_instanceof,
+                               bool                  on_this,
+                               bool                  delayed_fetch_this,
+                               zend_class_entry     *trace_ce,
+                               uint8_t               prop_type)
+{
+	zval *member;
+	zend_string *name;
+	zend_property_info *prop_info;
+	zend_jit_addr this_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, offsetof(zend_execute_data, This));
+	zend_jit_addr res_addr = 0;
+	zend_jit_addr prop_addr;
+	bool needs_slow_path = 0;
+	bool use_prop_guard = 0;
+	bool may_throw = 0;
+
+	ZEND_ASSERT(opline->op2_type == IS_CONST);
+	ZEND_ASSERT(op1_info & MAY_BE_OBJECT);
+
+	if (opline->result_type != IS_UNUSED) {
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	}
+
+	member = RT_CONSTANT(opline, opline->op2);
+	ZEND_ASSERT(Z_TYPE_P(member) == IS_STRING && Z_STRVAL_P(member)[0] != '\0');
+	name = Z_STR_P(member);
+	prop_info = zend_get_known_property_info(op_array, ce, name, on_this, op_array->filename);
+
+	if (on_this) {
+		//|	GET_ZVAL_PTR FCARG1a, this_addr
+			ZEND_ASSERT(Z_MODE(this_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(this_addr)), Z_OFFSET(this_addr));
+#line 13227 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (opline->op1_type == IS_VAR
+		 && (op1_info & MAY_BE_INDIRECT)
+		 && Z_REG(op1_addr) == ZREG_FP) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13232 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_INDIRECT, >1
+			//|	GET_Z_PTR FCARG1a, FCARG1a
+			//|1:
+			dasm_put(Dst, 7436, offsetof(zval, u1.v.type), IS_INDIRECT);
+#line 13235 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & MAY_BE_REF) {
+			if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13240 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	ZVAL_DEREF FCARG1a, op1_info
+				if (op1_info & MAY_BE_REF) {
+			dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 13242 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)- MAY_BE_OBJECT)) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 13253 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 13255 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3320, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 13256 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 63);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 13258 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+					//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op1_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 13260 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	LOAD_ADDR FCARG2a, ZSTR_VAL(name)
+						if (IS_SIGNED_32BIT(ZSTR_VAL(name))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)ZSTR_VAL(name)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)ZSTR_VAL(name))), (unsigned int)((((ptrdiff_t)ZSTR_VAL(name)))>>32));
+						}
+#line 13262 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_invalid_property_incdec, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_incdec)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_incdec));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_invalid_property_incdec)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_incdec));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_incdec)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_incdec))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13263 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp ->exception_handler
+				//|.code
+				dasm_put(Dst, 5802);
+#line 13265 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	GET_ZVAL_PTR FCARG1a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 13268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!prop_info && trace_ce && (trace_ce->ce_flags & ZEND_ACC_IMMUTABLE)) {
+		prop_info = zend_get_known_property_info(op_array, trace_ce, name, on_this, op_array->filename);
+		if (prop_info) {
+			ce = trace_ce;
+			ce_is_instanceof = 0;
+			if (!(op1_info & MAY_BE_CLASS_GUARD)) {
+				if (on_this && JIT_G(current_frame)
+				 && TRACE_FRAME_IS_THIS_CLASS_CHECKED(JIT_G(current_frame))) {
+					ZEND_ASSERT(JIT_G(current_frame)->ce == ce);
+				} else if (zend_jit_class_guard(Dst, opline, ce)) {
+					if (on_this && JIT_G(current_frame)) {
+						JIT_G(current_frame)->ce = ce;
+						TRACE_FRAME_SET_THIS_CLASS_CHECKED(JIT_G(current_frame));
+					}
+				} else {
+					return 0;
+				}
+				if (ssa->var_info && ssa_op->op1_use >= 0) {
+					ssa->var_info[ssa_op->op1_use].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_use].ce = ce;
+					ssa->var_info[ssa_op->op1_use].is_instanceof = ce_is_instanceof;
+				}
+				if (ssa->var_info && ssa_op->op1_def >= 0) {
+					ssa->var_info[ssa_op->op1_def].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_def].ce = ce;
+					ssa->var_info[ssa_op->op1_def].is_instanceof = ce_is_instanceof;
+				}
+			}
+		}
+	}
+
+	use_prop_guard = (prop_type != IS_UNKNOWN
+		&& prop_type != IS_UNDEF
+		&& prop_type != IS_REFERENCE
+		&& (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_OBJECT);
+
+	if (!prop_info) {
+		needs_slow_path = 1;
+
+		//|	mov r0, EX->run_time_cache
+		//|	mov r2, aword [r0 + opline->extended_value]
+		//|	cmp r2, aword [FCARG1a + offsetof(zend_object, ce)]
+		//|	jne >7
+		dasm_put(Dst, 7747, Dt1(->run_time_cache), opline->extended_value, offsetof(zend_object, ce));
+#line 13313 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!ce || ce_is_instanceof || (ce->ce_flags & ZEND_ACC_HAS_TYPE_HINTS)) {
+			//|	cmp aword [r0 + opline->extended_value + sizeof(void*) * 2], 0
+			//|	jnz >7
+			dasm_put(Dst, 7764, opline->extended_value + sizeof(void*) * 2);
+#line 13316 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	mov r0, aword [r0 + opline->extended_value + sizeof(void*)]
+		//|	test r0, r0
+		//|	jl >7
+		dasm_put(Dst, 7774, opline->extended_value + sizeof(void*));
+#line 13320 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!use_prop_guard) {
+			//|	IF_TYPE byte [FCARG1a + r0 + 8], IS_UNDEF, >7
+			dasm_put(Dst, 7786, 8, IS_UNDEF);
+#line 13322 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	add FCARG1a, r0
+		dasm_put(Dst, 7492);
+#line 13324 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	} else {
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, prop_info->offset);
+		if (ZEND_TYPE_IS_SET(prop_info->type) || !use_prop_guard) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, &exit_addr
+				dasm_put(Dst, 7797, prop_info->offset + 8, IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 13336 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, >7
+				dasm_put(Dst, 7805, prop_info->offset + 8, IS_UNDEF);
+#line 13338 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				needs_slow_path = 1;
+			}
+		}
+		if (ZEND_TYPE_IS_SET(prop_info->type)) {
+			may_throw = 1;
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 13344 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (ce && ce->ce_flags & ZEND_ACC_IMMUTABLE) {
+				//|	LOAD_ADDR FCARG2a, prop_info
+						if (IS_SIGNED_32BIT(prop_info)) {
+				dasm_put(Dst, 612, ((ptrdiff_t)prop_info));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+						}
+#line 13346 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				int prop_info_offset =
+					(((prop_info->offset - (sizeof(zend_object) - sizeof(zval))) / sizeof(zval)) * sizeof(void*));
+
+				//|	mov r0, aword [FCARG1a + offsetof(zend_object, ce)]
+				//|	mov	r0, aword [r0 + offsetof(zend_class_entry, properties_info_table)]
+				//|	mov FCARG2a, aword[r0 + prop_info_offset]
+				dasm_put(Dst, 7664, offsetof(zend_object, ce), offsetof(zend_class_entry, properties_info_table), prop_info_offset);
+#line 13353 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+				if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+					}
+				} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(prop_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13355 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->result_type == IS_UNUSED) {
+				switch (opline->opcode) {
+					case ZEND_PRE_INC_OBJ:
+					case ZEND_POST_INC_OBJ:
+						//|	EXT_CALL zend_jit_inc_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_inc_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_inc_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_inc_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_inc_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_inc_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_inc_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13360 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					case ZEND_PRE_DEC_OBJ:
+					case ZEND_POST_DEC_OBJ:
+						//|	EXT_CALL zend_jit_dec_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_dec_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_dec_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_dec_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_dec_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_dec_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_dec_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13364 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					default:
+						ZEND_UNREACHABLE();
+				}
+			} else {
+				//|.if X64
+					//|	LOAD_ZVAL_ADDR CARG3, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 3358, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 3366, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 13371 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.else
+					//|	sub r4, 12
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				//|.endif
+				switch (opline->opcode) {
+					case ZEND_PRE_INC_OBJ:
+						//|	EXT_CALL zend_jit_pre_inc_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_pre_inc_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13378 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					case ZEND_PRE_DEC_OBJ:
+						//|	EXT_CALL zend_jit_pre_dec_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_pre_dec_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13381 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					case ZEND_POST_INC_OBJ:
+						//|	EXT_CALL zend_jit_post_inc_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_inc_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_inc_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_post_inc_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_inc_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_inc_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_post_inc_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13384 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					case ZEND_POST_DEC_OBJ:
+						//|	EXT_CALL zend_jit_post_dec_typed_prop, r0
+								if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_dec_typed_prop)) {
+						dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_dec_typed_prop));
+								} else {
+								if (IS_SIGNED_32BIT(zend_jit_post_dec_typed_prop)) {
+						dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_dec_typed_prop));
+								} else {
+						dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_dec_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_post_dec_typed_prop))>>32));
+								}
+						dasm_put(Dst, 59);
+								}
+#line 13387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						break;
+					default:
+						ZEND_UNREACHABLE();
+				}
+				//|.if not(X64)
+					//|	add r4, 12
+				//|.endif
+			}
+		}
+	}
+
+	if (!prop_info || !ZEND_TYPE_IS_SET(prop_info->type)) {
+		uint32_t var_info = MAY_BE_ANY|MAY_BE_REF|MAY_BE_RC1|MAY_BE_RCN;
+		zend_jit_addr var_addr = prop_addr;
+
+		if (use_prop_guard) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			//|	IF_NOT_ZVAL_TYPE var_addr, prop_type, &exit_addr
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5790, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), prop_type, (ptrdiff_t)(exit_addr));
+#line 13407 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			var_info = (1 << prop_type) | (var_info & ~(MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF));
+		}
+
+		if (var_info & MAY_BE_REF) {
+			may_throw = 1;
+			var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+			if (Z_REG(prop_addr) != ZREG_FCARG1 || Z_OFFSET(prop_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+					if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+						}
+					} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(prop_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13415 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	IF_NOT_ZVAL_TYPE var_addr, IS_REFERENCE, >2
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 13417 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GET_ZVAL_PTR FCARG1a, var_addr
+			dasm_put(Dst, 2148, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 13418 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+			//|	jnz >1
+			//|	lea FCARG1a, aword [FCARG1a + offsetof(zend_reference, val)]
+			//|.cold_code
+			dasm_put(Dst, 7814, (Z_REG(var_addr)), Z_OFFSET(var_addr), offsetof(zend_reference, sources.ptr), offsetof(zend_reference, val));
+#line 13422 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 13423 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 13425 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->result_type == IS_UNUSED) {
+				//|	xor FCARG2a, FCARG2a
+				dasm_put(Dst, 2289);
+#line 13428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13430 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			switch (opline->opcode) {
+				case ZEND_PRE_INC_OBJ:
+					//|	EXT_CALL zend_jit_pre_inc_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_inc_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13434 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_PRE_DEC_OBJ:
+					//|	EXT_CALL zend_jit_pre_dec_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_dec_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13437 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_POST_INC_OBJ:
+					//|	EXT_CALL zend_jit_post_inc_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_inc_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_inc_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_post_inc_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_inc_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_inc_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_post_inc_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13440 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				case ZEND_POST_DEC_OBJ:
+					//|	EXT_CALL zend_jit_post_dec_typed_ref, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_dec_typed_ref)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_dec_typed_ref));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_post_dec_typed_ref)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_dec_typed_ref));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_dec_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_post_dec_typed_ref))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13443 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					break;
+				default:
+					ZEND_UNREACHABLE();
+			}
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 13449 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 13450 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		if (var_info & MAY_BE_LONG) {
+			if (var_info & (MAY_BE_ANY - MAY_BE_LONG)) {
+				//|	IF_NOT_ZVAL_TYPE var_addr, IS_LONG, >2
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2148, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 13455 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->opcode == ZEND_POST_INC_OBJ || opline->opcode == ZEND_POST_DEC_OBJ) {
+				if (opline->result_type != IS_UNUSED) {
+					//|	ZVAL_COPY_VALUE res_addr, -1, var_addr, MAY_BE_LONG, ZREG_R1, ZREG_R2
+						if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+							if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+								if (Z_MODE(var_addr) == IS_REG) {
+									if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+									}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+					dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+					dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(var_addr)));
+									}
+							}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else if (Z_MODE(var_addr) == IS_REG) {
+							if (Z_REG(res_addr) != Z_REG(var_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+								} else {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(var_addr)));
+									}
+							}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else if (Z_MODE(var_addr) == IS_REG) {
+							if (ZREG_R2 != Z_REG(var_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (ZREG_R2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+								}
+							} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+								if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (Z_REG(var_addr) != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(var_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+							if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+						} else {
+					dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+							} else if (Z_MODE(var_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+								} else {
+						if (Z_MODE(var_addr) != IS_REG || ZREG_XMM0 != Z_REG(var_addr)) {
+							if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+						} else {
+					dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+							} else if (Z_MODE(var_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (ZREG_XMM0 != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								}
+							} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							}
+						}
+						if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+					      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+							has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+							if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+								if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+									zend_uchar type = concrete_type(MAY_BE_LONG);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+								}
+							}
+						} else {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2101, (ZREG_R1), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2111, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+						}
+#line 13459 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (opline->opcode == ZEND_PRE_INC_OBJ || opline->opcode == ZEND_POST_INC_OBJ) {
+				//|	LONG_OP_WITH_32BIT_CONST add, var_addr, Z_L(1)
+					if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2161, (Z_REG(var_addr)), Z_OFFSET(var_addr), Z_L(1));
+					} else if (Z_MODE(var_addr) == IS_REG) {
+				dasm_put(Dst, 2170, (Z_REG(var_addr)), Z_L(1));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13463 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LONG_OP_WITH_32BIT_CONST sub, var_addr, Z_L(1)
+					if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 2177, (Z_REG(var_addr)), Z_OFFSET(var_addr), Z_L(1));
+					} else if (Z_MODE(var_addr) == IS_REG) {
+				dasm_put(Dst, 2186, (Z_REG(var_addr)), Z_L(1));
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13465 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	jo	>3
+			dasm_put(Dst, 7836);
+#line 13467 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode == ZEND_PRE_INC_OBJ || opline->opcode == ZEND_PRE_DEC_OBJ) {
+				if (opline->result_type != IS_UNUSED) {
+					//|	ZVAL_COPY_VALUE res_addr, -1, var_addr, MAY_BE_LONG, ZREG_R0, ZREG_R2
+						if (MAY_BE_LONG & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+							if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+								if (Z_MODE(var_addr) == IS_REG) {
+									if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+									}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+					dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+					dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(var_addr)));
+									}
+							}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else if (Z_MODE(var_addr) == IS_REG) {
+							if (Z_REG(res_addr) != Z_REG(var_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+								} else {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(var_addr)));
+									}
+							}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else if (Z_MODE(var_addr) == IS_REG) {
+							if (ZREG_R2 != Z_REG(var_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(var_addr)), (ZREG_R2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+					dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+								}
+							} else if ((MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+								if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (Z_REG(var_addr) != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								} else if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_MODE(var_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+							if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+						} else {
+					dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+							} else if (Z_MODE(var_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+								} else {
+						if (Z_MODE(var_addr) != IS_REG || ZREG_XMM0 != Z_REG(var_addr)) {
+							if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+									if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+						} else {
+					dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+						}
+									} else {
+							if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+							}
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+						}
+									}
+							} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						} else {
+					dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+							} else if (Z_MODE(var_addr) == IS_REG) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+						}
+							} else {
+								ZEND_UNREACHABLE();
+							}
+						}
+						if (Z_MODE(res_addr) == IS_REG) {
+							if (ZREG_XMM0 != Z_REG(res_addr)) {
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						} else {
+					dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+						}
+							}
+						} else {
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						if (CAN_USE_AVX()) {
+					dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+						}
+								}
+							} else if (!(MAY_BE_LONG & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							}
+						}
+						if ((MAY_BE_LONG & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+					      !(MAY_BE_LONG & MAY_BE_GUARD) &&
+							has_concrete_type(MAY_BE_LONG & MAY_BE_ANY)) {
+							if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+								if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_LONG & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+									zend_uchar type = concrete_type(MAY_BE_LONG);
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+								}
+							}
+						} else {
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+						}
+#line 13470 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 13473 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (var_info & (MAY_BE_ANY - MAY_BE_LONG)) {
+			if (var_info & (MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				may_throw = 1;
+			}
+			if (var_info & MAY_BE_LONG) {
+				//|2:
+				dasm_put(Dst, 2222);
+#line 13480 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (Z_REG(var_addr) != ZREG_FCARG1 || Z_OFFSET(var_addr) != 0) {
+				var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+				//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+					if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+						}
+					} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(prop_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13484 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->opcode == ZEND_POST_INC_OBJ || opline->opcode == ZEND_POST_DEC_OBJ) {
+				//|	ZVAL_COPY_VALUE res_addr, -1, var_addr, MAY_BE_ANY, ZREG_R0, ZREG_R2
+					if (MAY_BE_ANY & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+						if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+							if (Z_MODE(var_addr) == IS_REG) {
+								if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (Z_REG(var_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+								}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+				dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+				dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(var_addr)));
+								}
+						}
+					} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else if (Z_MODE(var_addr) == IS_REG) {
+						if (Z_REG(res_addr) != Z_REG(var_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(var_addr)), (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+							} else {
+					if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+						if (Z_LVAL_P(Z_ZV(var_addr)) == 0) {
+				dasm_put(Dst, 1694, (ZREG_R2), (ZREG_R2));
+						} else {
+								if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(var_addr)))) {
+				dasm_put(Dst, 1702, (ZREG_R2), (unsigned int)(Z_LVAL_P(Z_ZV(var_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(var_addr)))>>32));
+								} else {
+				dasm_put(Dst, 1709, (ZREG_R2), Z_LVAL_P(Z_ZV(var_addr)));
+								}
+						}
+					} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else if (Z_MODE(var_addr) == IS_REG) {
+						if (ZREG_R2 != Z_REG(var_addr)) {
+				dasm_put(Dst, 1726, (Z_REG(var_addr)), (ZREG_R2));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 1726, (ZREG_R2), (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+							}
+						} else if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+							if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (Z_REG(var_addr) != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							} else if (Z_MODE(res_addr) == IS_REG) {
+					if (Z_MODE(var_addr) != IS_REG || Z_REG(res_addr) != Z_REG(var_addr)) {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+					} else {
+				dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(var_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else {
+				dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+							} else {
+					if (Z_MODE(var_addr) != IS_REG || ZREG_XMM0 != Z_REG(var_addr)) {
+						if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+								if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+					} else {
+				dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(var_addr));
+					}
+								} else {
+						if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+				dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(var_addr)));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+						}
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+					}
+								}
+						} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else {
+				dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)-ZREG_XMM0));
+					}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+					}
+					if (Z_MODE(res_addr) == IS_REG) {
+						if (ZREG_XMM0 != Z_REG(res_addr)) {
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					} else {
+				dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+					}
+						}
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					if (CAN_USE_AVX()) {
+				dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					} else {
+				dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+					}
+							}
+						} else if (!(MAY_BE_ANY & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1716, (ZREG_R2), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1846, (ZREG_R2), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						}
+					}
+					if ((MAY_BE_ANY & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+				      !(MAY_BE_ANY & MAY_BE_GUARD) &&
+						has_concrete_type(MAY_BE_ANY & MAY_BE_ANY)) {
+						if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+								zend_uchar type = concrete_type(MAY_BE_ANY);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+							}
+						}
+					} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+					}
+#line 13487 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	TRY_ADDREF MAY_BE_ANY, ah, r2
+					if (MAY_BE_ANY & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+						if (MAY_BE_ANY & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				dasm_put(Dst, 2307);
+						}
+				dasm_put(Dst, 2129);
+					}
+#line 13488 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline->opcode == ZEND_PRE_INC_OBJ || opline->opcode == ZEND_POST_INC_OBJ) {
+				if (opline->opcode == ZEND_PRE_INC_OBJ && opline->result_type != IS_UNUSED) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 13492 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_pre_inc, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_inc)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL increment_function, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(increment_function)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(increment_function));
+							} else {
+							if (IS_SIGNED_32BIT(increment_function)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)increment_function));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)increment_function)), (unsigned int)((((ptrdiff_t)increment_function))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13495 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			} else {
+				if (opline->opcode == ZEND_PRE_DEC_OBJ && opline->result_type != IS_UNUSED) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 13499 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_jit_pre_dec, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_pre_dec)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13500 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL decrement_function, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(decrement_function)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(decrement_function));
+							} else {
+							if (IS_SIGNED_32BIT(decrement_function)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)decrement_function));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)decrement_function)), (unsigned int)((((ptrdiff_t)decrement_function))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13502 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (var_info & MAY_BE_LONG) {
+				//|	jmp >4
+				dasm_put(Dst, 491);
+#line 13506 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		if (var_info & MAY_BE_LONG) {
+			//|3:
+			dasm_put(Dst, 496);
+#line 13510 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->opcode == ZEND_PRE_INC_OBJ || opline->opcode == ZEND_POST_INC_OBJ) {
+				//|.if X64
+					//|	mov64 rax, 0x43e0000000000000
+					//|	SET_ZVAL_LVAL var_addr, rax
+					dasm_put(Dst, 54, (unsigned int)(0x43e0000000000000), (unsigned int)((0x43e0000000000000)>>32));
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 2202, (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2208, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+#line 13514 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	SET_ZVAL_TYPE_INFO var_addr, IS_DOUBLE
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 13515 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (opline->opcode == ZEND_PRE_INC_OBJ && opline->result_type != IS_UNUSED) {
+						//|	SET_ZVAL_LVAL res_addr, rax
+							if (Z_MODE(res_addr) == IS_REG) {
+						dasm_put(Dst, 2202, (Z_REG(res_addr)));
+							} else {
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							}
+#line 13517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 13518 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				//|.else
+					//|	SET_ZVAL_LVAL var_addr, 0
+					//|	SET_ZVAL_W2 var_addr, 0x41e00000
+					//|	SET_ZVAL_TYPE_INFO var_addr, IS_DOUBLE
+					if (opline->opcode == ZEND_PRE_INC_OBJ && opline->result_type != IS_UNUSED) {
+						//|	SET_ZVAL_LVAL res_addr, 0
+						//|	SET_ZVAL_W2 res_addr, 0x41e00000
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+					}
+				//|.endif
+			} else {
+				//|.if X64
+					//|	mov64 rax, 0xc3e0000000000000
+					//|	SET_ZVAL_LVAL var_addr, rax
+					dasm_put(Dst, 54, (unsigned int)(0xc3e0000000000000), (unsigned int)((0xc3e0000000000000)>>32));
+						if (Z_MODE(var_addr) == IS_REG) {
+					dasm_put(Dst, 2202, (Z_REG(var_addr)));
+						} else {
+							ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 2208, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+						}
+#line 13533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	SET_ZVAL_TYPE_INFO var_addr, IS_DOUBLE
+						ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 13534 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (opline->opcode == ZEND_PRE_DEC_OBJ && opline->result_type != IS_UNUSED) {
+						//|	SET_ZVAL_LVAL res_addr, rax
+							if (Z_MODE(res_addr) == IS_REG) {
+						dasm_put(Dst, 2202, (Z_REG(res_addr)));
+							} else {
+								ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							}
+#line 13536 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+							ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+#line 13537 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				//|.else
+					//|	SET_ZVAL_LVAL var_addr, 0x00200000
+					//|	SET_ZVAL_W2 var_addr, 0xc1e00000
+					//|	SET_ZVAL_TYPE_INFO var_addr, IS_DOUBLE
+					if (opline->opcode == ZEND_PRE_DEC_OBJ && opline->result_type != IS_UNUSED) {
+						//|	SET_ZVAL_LVAL res_addr, 0x00200000
+						//|	SET_ZVAL_W2 res_addr, 0xc1e00000
+						//|	SET_ZVAL_TYPE_INFO res_addr, IS_DOUBLE
+					}
+				//|.endif
+			}
+			//|	jmp >4
+			//|.code
+			dasm_put(Dst, 532);
+#line 13551 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|4:
+			dasm_put(Dst, 538);
+#line 13552 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (needs_slow_path) {
+		may_throw = 1;
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 13558 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|7:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 4342);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 13560 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// value = zobj->handlers->write_property(zobj, name, value, CACHE_ADDR(opline->extended_value));
+		//|	LOAD_ADDR FCARG2a, name
+				if (IS_SIGNED_32BIT(name)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)name));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)name)), (unsigned int)((((ptrdiff_t)name))>>32));
+				}
+#line 13562 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+			//|	mov CARG3, EX->run_time_cache
+			//|	add CARG3, opline->extended_value
+			dasm_put(Dst, 7841, Dt1(->run_time_cache), opline->extended_value);
+#line 13565 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (opline->result_type == IS_UNUSED) {
+				//|	xor CARG4, CARG4
+				dasm_put(Dst, 4376);
+#line 13567 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	LOAD_ZVAL_ADDR CARG4, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 4380, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 4390, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 4398, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13569 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		//|.else
+			//|	sub r4, 8
+			if (opline->result_type == IS_UNUSED) {
+				//|	push 0
+			} else {
+				//|	PUSH_ZVAL_ADDR res_addr, r0
+			}
+			//|	mov r0, EX->run_time_cache
+			//|	add r0, opline->extended_value
+			//|	push r0
+		//|.endif
+
+		switch (opline->opcode) {
+			case ZEND_PRE_INC_OBJ:
+				//|	EXT_CALL zend_jit_pre_inc_obj_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_inc_obj_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_inc_obj_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_pre_inc_obj_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_inc_obj_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_inc_obj_helper)), (unsigned int)((((ptrdiff_t)zend_jit_pre_inc_obj_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13585 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_PRE_DEC_OBJ:
+				//|	EXT_CALL zend_jit_pre_dec_obj_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_pre_dec_obj_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_pre_dec_obj_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_pre_dec_obj_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_pre_dec_obj_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_pre_dec_obj_helper)), (unsigned int)((((ptrdiff_t)zend_jit_pre_dec_obj_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13588 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_POST_INC_OBJ:
+				//|	EXT_CALL zend_jit_post_inc_obj_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_inc_obj_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_inc_obj_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_post_inc_obj_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_inc_obj_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_inc_obj_helper)), (unsigned int)((((ptrdiff_t)zend_jit_post_inc_obj_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			case ZEND_POST_DEC_OBJ:
+				//|	EXT_CALL zend_jit_post_dec_obj_helper, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_post_dec_obj_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_post_dec_obj_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_post_dec_obj_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_post_dec_obj_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_post_dec_obj_helper)), (unsigned int)((((ptrdiff_t)zend_jit_post_dec_obj_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 13594 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+
+		//|.if not(X64)
+			//|	add r4, 8
+		//|.endif
+
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 13605 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 13608 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->op1_type != IS_UNUSED && !delayed_fetch_this && !op1_indirect) {
+		if ((op1_info & MAY_HAVE_DTOR) && (op1_info & MAY_BE_RC1)) {
+			may_throw = 1;
+		}
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (1) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 13613 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_assign_obj_op(dasm_State          **Dst,
+                                  const zend_op        *opline,
+                                  const zend_op_array  *op_array,
+                                  zend_ssa             *ssa,
+                                  const zend_ssa_op    *ssa_op,
+                                  uint32_t              op1_info,
+                                  zend_jit_addr         op1_addr,
+                                  uint32_t              val_info,
+                                  zend_ssa_range       *val_range,
+                                  bool                  op1_indirect,
+                                  zend_class_entry     *ce,
+                                  bool                  ce_is_instanceof,
+                                  bool                  on_this,
+                                  bool                  delayed_fetch_this,
+                                  zend_class_entry     *trace_ce,
+                                  uint8_t               prop_type)
+{
+	zval *member;
+	zend_string *name;
+	zend_property_info *prop_info;
+	zend_jit_addr val_addr = OP1_DATA_ADDR();
+	zend_jit_addr this_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, offsetof(zend_execute_data, This));
+	zend_jit_addr prop_addr;
+	bool needs_slow_path = 0;
+	bool use_prop_guard = 0;
+	bool may_throw = 0;
+	binary_op_type binary_op = get_binary_op(opline->extended_value);
+
+	ZEND_ASSERT(opline->op2_type == IS_CONST);
+	ZEND_ASSERT(op1_info & MAY_BE_OBJECT);
+	ZEND_ASSERT(opline->result_type == IS_UNUSED);
+
+	member = RT_CONSTANT(opline, opline->op2);
+	ZEND_ASSERT(Z_TYPE_P(member) == IS_STRING && Z_STRVAL_P(member)[0] != '\0');
+	name = Z_STR_P(member);
+	prop_info = zend_get_known_property_info(op_array, ce, name, on_this, op_array->filename);
+
+	if (on_this) {
+		//|	GET_ZVAL_PTR FCARG1a, this_addr
+			ZEND_ASSERT(Z_MODE(this_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(this_addr)), Z_OFFSET(this_addr));
+#line 13663 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (opline->op1_type == IS_VAR
+		 && (op1_info & MAY_BE_INDIRECT)
+		 && Z_REG(op1_addr) == ZREG_FP) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13668 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_INDIRECT, >1
+			//|	GET_Z_PTR FCARG1a, FCARG1a
+			//|1:
+			dasm_put(Dst, 7436, offsetof(zval, u1.v.type), IS_INDIRECT);
+#line 13671 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & MAY_BE_REF) {
+			if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13676 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	ZVAL_DEREF FCARG1a, op1_info
+				if (op1_info & MAY_BE_REF) {
+			dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 13678 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)- MAY_BE_OBJECT)) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 13689 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 13691 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3320, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 13692 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 63);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 13694 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+					//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op1_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 13696 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	LOAD_ADDR FCARG2a, ZSTR_VAL(name)
+						if (IS_SIGNED_32BIT(ZSTR_VAL(name))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)ZSTR_VAL(name)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)ZSTR_VAL(name))), (unsigned int)((((ptrdiff_t)ZSTR_VAL(name)))>>32));
+						}
+#line 13698 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_info & MAY_BE_UNDEF) {
+					//|	EXT_CALL zend_jit_invalid_property_assign_op, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_assign_op)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_assign_op));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_invalid_property_assign_op)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_assign_op));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_assign_op)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_assign_op))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13700 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	EXT_CALL zend_jit_invalid_property_assign, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_assign)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_assign));
+							} else {
+							if (IS_SIGNED_32BIT(zend_jit_invalid_property_assign)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_assign));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_assign)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_assign))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 13702 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				may_throw = 1;
+				if (((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR))
+				 && (val_info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					may_throw = 1;
+					//|	jmp >8
+					dasm_put(Dst, 3712);
+#line 13708 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 13710 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|.code
+				dasm_put(Dst, 536);
+#line 13712 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	GET_ZVAL_PTR FCARG1a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 13715 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!prop_info && trace_ce && (trace_ce->ce_flags & ZEND_ACC_IMMUTABLE)) {
+		prop_info = zend_get_known_property_info(op_array, trace_ce, name, on_this, op_array->filename);
+		if (prop_info) {
+			ce = trace_ce;
+			ce_is_instanceof = 0;
+			if (!(op1_info & MAY_BE_CLASS_GUARD)) {
+				if (on_this && JIT_G(current_frame)
+				 && TRACE_FRAME_IS_THIS_CLASS_CHECKED(JIT_G(current_frame))) {
+					ZEND_ASSERT(JIT_G(current_frame)->ce == ce);
+				} else if (zend_jit_class_guard(Dst, opline, ce)) {
+					if (on_this && JIT_G(current_frame)) {
+						JIT_G(current_frame)->ce = ce;
+						TRACE_FRAME_SET_THIS_CLASS_CHECKED(JIT_G(current_frame));
+					}
+				} else {
+					return 0;
+				}
+				if (ssa->var_info && ssa_op->op1_use >= 0) {
+					ssa->var_info[ssa_op->op1_use].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_use].ce = ce;
+					ssa->var_info[ssa_op->op1_use].is_instanceof = ce_is_instanceof;
+				}
+				if (ssa->var_info && ssa_op->op1_def >= 0) {
+					ssa->var_info[ssa_op->op1_def].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_def].ce = ce;
+					ssa->var_info[ssa_op->op1_def].is_instanceof = ce_is_instanceof;
+				}
+			}
+		}
+	}
+
+	use_prop_guard = (prop_type != IS_UNKNOWN
+		&& prop_type != IS_UNDEF
+		&& prop_type != IS_REFERENCE
+		&& (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_OBJECT);
+
+	if (!prop_info) {
+		needs_slow_path = 1;
+
+		//|	mov r0, EX->run_time_cache
+		//|	mov r2, aword [r0 + (opline+1)->extended_value]
+		//|	cmp r2, aword [FCARG1a + offsetof(zend_object, ce)]
+		//|	jne >7
+		dasm_put(Dst, 7747, Dt1(->run_time_cache), (opline+1)->extended_value, offsetof(zend_object, ce));
+#line 13760 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!ce || ce_is_instanceof || (ce->ce_flags & ZEND_ACC_HAS_TYPE_HINTS)) {
+			//|	cmp aword [r0 + (opline+1)->extended_value + sizeof(void*) * 2], 0
+			//|	jnz >7
+			dasm_put(Dst, 7764, (opline+1)->extended_value + sizeof(void*) * 2);
+#line 13763 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	mov r0, aword [r0 + (opline+1)->extended_value + sizeof(void*)]
+		//|	test r0, r0
+		//|	jl >7
+		dasm_put(Dst, 7774, (opline+1)->extended_value + sizeof(void*));
+#line 13767 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!use_prop_guard) {
+			//|	IF_TYPE byte [FCARG1a + r0 + 8], IS_UNDEF, >7
+			dasm_put(Dst, 7786, 8, IS_UNDEF);
+#line 13769 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	add FCARG1a, r0
+		dasm_put(Dst, 7492);
+#line 13771 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	} else {
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, prop_info->offset);
+		if (ZEND_TYPE_IS_SET(prop_info->type) || !use_prop_guard) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, &exit_addr
+				dasm_put(Dst, 7797, prop_info->offset + 8, IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 13783 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, >7
+				dasm_put(Dst, 7805, prop_info->offset + 8, IS_UNDEF);
+#line 13785 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				needs_slow_path = 1;
+			}
+		}
+		if (ZEND_TYPE_IS_SET(prop_info->type)) {
+			uint32_t info = val_info;
+
+			may_throw = 1;
+
+			if (opline) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 13795 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+
+			//|	IF_ZVAL_TYPE prop_addr, IS_REFERENCE, >1
+				ZEND_ASSERT(Z_MODE(prop_addr) == IS_MEM_ZVAL);
+#line 13798 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.cold_code
+			dasm_put(Dst, 3855, (Z_REG(prop_addr)), Z_OFFSET(prop_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 13799 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	GET_ZVAL_PTR FCARG1a, prop_addr
+			dasm_put(Dst, 63);
+				ZEND_ASSERT(Z_MODE(prop_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3964, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+#line 13801 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(val_addr) != IS_MEM_ZVAL || Z_REG(val_addr) != ZREG_FCARG2 || Z_OFFSET(val_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG2a, val_addr
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(val_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(val_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13803 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if X64
+				//|	LOAD_ADDR CARG3, binary_op
+						if (IS_SIGNED_32BIT(binary_op)) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)binary_op));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+						}
+#line 13806 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	sub r4, 12
+				//|	PUSH_ADDR binary_op, r0
+			//|.endif
+			//|	EXT_CALL zend_jit_assign_op_to_typed_ref, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_op_to_typed_ref)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_op_to_typed_ref));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_op_to_typed_ref)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_op_to_typed_ref));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_op_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_op_to_typed_ref))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13811 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if not(X64)
+				//|	add r4, 12
+			//|.endif
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 13816 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			//|	// value = zend_assign_to_typed_prop(prop_info, property_val, value EXECUTE_DATA_CC);
+
+			if (ce && ce->ce_flags & ZEND_ACC_IMMUTABLE) {
+				//|	LOAD_ADDR FCARG2a, prop_info
+						if (IS_SIGNED_32BIT(prop_info)) {
+				dasm_put(Dst, 612, ((ptrdiff_t)prop_info));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+						}
+#line 13821 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				int prop_info_offset =
+					(((prop_info->offset - (sizeof(zend_object) - sizeof(zval))) / sizeof(zval)) * sizeof(void*));
+
+				//|	mov r0, aword [FCARG1a + offsetof(zend_object, ce)]
+				//|	mov	r0, aword [r0 + offsetof(zend_class_entry, properties_info_table)]
+				//|	mov FCARG2a, aword[r0 + prop_info_offset]
+				dasm_put(Dst, 7664, offsetof(zend_object, ce), offsetof(zend_class_entry, properties_info_table), prop_info_offset);
+#line 13828 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+				if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+					}
+				} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(prop_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13830 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+				//|	LOAD_ZVAL_ADDR CARG3, val_addr
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(val_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(val_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13832 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	LOAD_ADDR CARG4, binary_op
+						if (IS_SIGNED_32BIT(binary_op)) {
+				dasm_put(Dst, 4380, ((ptrdiff_t)binary_op));
+						} else {
+				dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+						}
+#line 13833 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	sub r4, 8
+				//|	PUSH_ADDR binary_op, r0
+				//|	PUSH_ZVAL_ADDR val_addr, r0
+			//|.endif
+
+			//|	EXT_CALL zend_jit_assign_op_to_typed_prop, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_op_to_typed_prop)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_op_to_typed_prop));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_op_to_typed_prop)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_op_to_typed_prop));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_op_to_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_assign_op_to_typed_prop))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13840 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			//|.if not(X64)
+				//|	add r4, 8
+			//|.endif
+
+			if (info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				info |= MAY_BE_RC1|MAY_BE_RCN;
+			}
+
+			//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, info, 0, NULL
+				if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+					if (RC_MAY_BE_1(info)) {
+						if (RC_MAY_BE_N(info)) {
+							if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (NULL && ((info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 13850 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!prop_info || !ZEND_TYPE_IS_SET(prop_info->type)) {
+		zend_jit_addr var_addr = prop_addr;
+		uint32_t var_info = MAY_BE_ANY|MAY_BE_REF|MAY_BE_RC1|MAY_BE_RCN;
+		uint32_t var_def_info = MAY_BE_ANY|MAY_BE_REF|MAY_BE_RC1|MAY_BE_RCN;
+
+		if (use_prop_guard) {
+			int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+			const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+			//|	IF_NOT_ZVAL_TYPE var_addr, prop_type, &exit_addr
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5790, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), prop_type, (ptrdiff_t)(exit_addr));
+#line 13863 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			var_info = (1 << prop_type) | (var_info & ~(MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF));
+		}
+
+		if (var_info & MAY_BE_REF) {
+			may_throw = 1;
+			var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+			//|	LOAD_ZVAL_ADDR r0, prop_addr
+				if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(prop_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+					}
+				} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(prop_addr)) {
+			dasm_put(Dst, 6372, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+					} else {
+			dasm_put(Dst, 6380, (Z_REG(prop_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13870 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_ZVAL_TYPE var_addr, IS_REFERENCE, >2
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 13871 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	GET_ZVAL_PTR FCARG1a, var_addr
+			dasm_put(Dst, 2148, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 13872 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	cmp aword [FCARG1a + offsetof(zend_reference, sources.ptr)], 0
+			//|	jnz >1
+			//|	lea r0, aword [FCARG1a + offsetof(zend_reference, val)]
+			//|.cold_code
+			dasm_put(Dst, 7850, (Z_REG(var_addr)), Z_OFFSET(var_addr), offsetof(zend_reference, sources.ptr), offsetof(zend_reference, val));
+#line 13876 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			dasm_put(Dst, 63);
+#line 13877 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (Z_MODE(val_addr) != IS_MEM_ZVAL || Z_REG(val_addr) != ZREG_FCARG2 || Z_OFFSET(val_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG2a, val_addr
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(val_addr)) {
+				dasm_put(Dst, 2275, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+						} else {
+				dasm_put(Dst, 2283, (Z_REG(val_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 13879 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (opline) {
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 13882 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.if X64
+				//|	LOAD_ADDR CARG3, binary_op
+						if (IS_SIGNED_32BIT(binary_op)) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)binary_op));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+						}
+#line 13885 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	sub r4, 12
+				//|	PUSH_ADDR binary_op, r0
+			//|.endif
+			//|	EXT_CALL zend_jit_assign_op_to_typed_ref, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_op_to_typed_ref)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_op_to_typed_ref));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_op_to_typed_ref)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_op_to_typed_ref));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_op_to_typed_ref)), (unsigned int)((((ptrdiff_t)zend_jit_assign_op_to_typed_ref))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 13890 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if not(X64)
+				//|	add r4, 12
+			//|.endif
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 13895 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|2:
+			dasm_put(Dst, 2222);
+#line 13896 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			var_info &= ~MAY_BE_REF;
+		}
+
+		switch (opline->extended_value) {
+			case ZEND_ADD:
+			case ZEND_SUB:
+			case ZEND_MUL:
+				if ((var_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) ||
+				    (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (opline->extended_value != ZEND_ADD ||
+					    (var_info & MAY_BE_ANY) != MAY_BE_ARRAY ||
+					    (val_info & MAY_BE_ANY) == MAY_BE_ARRAY) {
+						may_throw = 1;
+					}
+				}
+				if (!zend_jit_math_helper(Dst, opline, opline->extended_value, IS_CV, opline->op1, var_addr, var_info, (opline+1)->op1_type, (opline+1)->op1, val_addr, val_info, 0, var_addr, var_def_info, var_info,
+						1 /* may overflow */, 0)) {
+					return 0;
+				}
+				break;
+			case ZEND_BW_OR:
+			case ZEND_BW_AND:
+			case ZEND_BW_XOR:
+				may_throw = 1;
+				if ((var_info & (MAY_BE_STRING|MAY_BE_DOUBLE|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) ||
+				    (val_info & (MAY_BE_STRING|MAY_BE_DOUBLE|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if ((var_info & MAY_BE_ANY) != MAY_BE_STRING ||
+					    (val_info & MAY_BE_ANY) != MAY_BE_STRING) {
+						may_throw = 1;
+					}
+				}
+				goto long_math;
+			case ZEND_SL:
+			case ZEND_SR:
+				if ((var_info & (MAY_BE_STRING|MAY_BE_DOUBLE|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) ||
+				    (val_info & (MAY_BE_STRING|MAY_BE_DOUBLE|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					may_throw = 1;
+				}
+				if ((opline+1)->op1_type != IS_CONST ||
+				    Z_TYPE_P(RT_CONSTANT((opline+1), (opline+1)->op1)) != IS_LONG ||
+				    Z_LVAL_P(RT_CONSTANT((opline+1), (opline+1)->op1)) < 0) {
+					may_throw = 1;
+				}
+				goto long_math;
+			case ZEND_MOD:
+				if ((var_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) ||
+				    (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (opline->extended_value != ZEND_ADD ||
+					    (var_info & MAY_BE_ANY) != MAY_BE_ARRAY ||
+					    (val_info & MAY_BE_ANY) == MAY_BE_ARRAY) {
+						may_throw = 1;
+					}
+				}
+				if ((opline+1)->op1_type != IS_CONST ||
+				    Z_TYPE_P(RT_CONSTANT((opline+1), (opline+1)->op1)) != IS_LONG ||
+				    Z_LVAL_P(RT_CONSTANT((opline+1), (opline+1)->op1)) == 0) {
+					may_throw = 1;
+				}
+long_math:
+				if (!zend_jit_long_math_helper(Dst, opline, opline->extended_value,
+						IS_CV, opline->op1, var_addr, var_info, NULL,
+						(opline+1)->op1_type, (opline+1)->op1, val_addr, val_info,
+						val_range,
+						0, var_addr, var_def_info, var_info, /* may throw */ 1)) {
+					return 0;
+				}
+				break;
+			case ZEND_CONCAT:
+				may_throw = 1;
+				if (!zend_jit_concat_helper(Dst, opline, IS_CV, opline->op1, var_addr, var_info, (opline+1)->op1_type, (opline+1)->op1, val_addr, val_info, var_addr,
+						0)) {
+					return 0;
+				}
+				break;
+			default:
+				ZEND_UNREACHABLE();
+		}
+	}
+
+	if (needs_slow_path) {
+		may_throw = 1;
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 13978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|7:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 4342);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 13980 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// value = zobj->handlers->write_property(zobj, name, value, CACHE_ADDR(opline->extended_value));
+		//|	LOAD_ADDR FCARG2a, name
+				if (IS_SIGNED_32BIT(name)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)name));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)name)), (unsigned int)((((ptrdiff_t)name))>>32));
+				}
+#line 13982 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, val_addr
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(val_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(val_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 13984 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov CARG4, EX->run_time_cache
+			//|	add CARG4, (opline+1)->extended_value
+			//|.if X64WIN
+			//|	LOAD_ADDR r0, binary_op
+			//|	mov aword A5, r0
+			//|.else
+			//|	LOAD_ADDR CARG5, binary_op
+			dasm_put(Dst, 7872, Dt1(->run_time_cache), (opline+1)->extended_value);
+					if (IS_SIGNED_32BIT(binary_op)) {
+			dasm_put(Dst, 7881, ((ptrdiff_t)binary_op));
+					} else {
+			dasm_put(Dst, 7886, (unsigned int)(((ptrdiff_t)binary_op)), (unsigned int)((((ptrdiff_t)binary_op))>>32));
+					}
+#line 13991 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.endif
+		//|.else
+			//|	sub r4, 4
+			//|	PUSH_ADDR binary_op, r0
+			//|	mov r0, EX->run_time_cache
+			//|	add r0, (opline+1)->extended_value
+			//|	push r0
+			//|	PUSH_ZVAL_ADDR val_addr, r0
+		//|.endif
+
+		//|	EXT_CALL zend_jit_assign_obj_op_helper, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_obj_op_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_obj_op_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_obj_op_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_obj_op_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_obj_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_assign_obj_op_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 14002 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//|.if not(X64)
+			//|	add r4, 4
+		//|.endif
+
+		if (val_info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+			val_info |= MAY_BE_RC1|MAY_BE_RCN;
+		}
+
+		//|8:
+		//|	// FREE_OP_DATA();
+		//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, val_info, 0, opline
+		dasm_put(Dst, 4196);
+			if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+				if (RC_MAY_BE_1(val_info)) {
+					if (RC_MAY_BE_N(val_info)) {
+						if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((val_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((val_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((val_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14014 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 14016 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 14019 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->op1_type != IS_UNUSED && !delayed_fetch_this && !op1_indirect) {
+		if ((op1_info & MAY_HAVE_DTOR) && (op1_info & MAY_BE_RC1)) {
+			may_throw = 1;
+		}
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (1) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14024 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_assign_obj(dasm_State          **Dst,
+                               const zend_op        *opline,
+                               const zend_op_array  *op_array,
+                               zend_ssa             *ssa,
+                               const zend_ssa_op    *ssa_op,
+                               uint32_t              op1_info,
+                               zend_jit_addr         op1_addr,
+                               uint32_t              val_info,
+                               bool                  op1_indirect,
+                               zend_class_entry     *ce,
+                               bool                  ce_is_instanceof,
+                               bool                  on_this,
+                               bool                  delayed_fetch_this,
+                               zend_class_entry     *trace_ce,
+                               uint8_t               prop_type,
+                               int                   may_throw)
+{
+	zval *member;
+	zend_string *name;
+	zend_property_info *prop_info;
+	zend_jit_addr val_addr = OP1_DATA_ADDR();
+	zend_jit_addr res_addr = 0;
+	zend_jit_addr this_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, offsetof(zend_execute_data, This));
+	zend_jit_addr prop_addr;
+	bool needs_slow_path = 0;
+
+	if (RETURN_VALUE_USED(opline)) {
+		res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+	}
+
+	ZEND_ASSERT(opline->op2_type == IS_CONST);
+	ZEND_ASSERT(op1_info & MAY_BE_OBJECT);
+
+	member = RT_CONSTANT(opline, opline->op2);
+	ZEND_ASSERT(Z_TYPE_P(member) == IS_STRING && Z_STRVAL_P(member)[0] != '\0');
+	name = Z_STR_P(member);
+	prop_info = zend_get_known_property_info(op_array, ce, name, on_this, op_array->filename);
+
+	if (on_this) {
+		//|	GET_ZVAL_PTR FCARG1a, this_addr
+			ZEND_ASSERT(Z_MODE(this_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(this_addr)), Z_OFFSET(this_addr));
+#line 14075 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		if (opline->op1_type == IS_VAR
+		 && (op1_info & MAY_BE_INDIRECT)
+		 && Z_REG(op1_addr) == ZREG_FP) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 14080 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_Z_TYPE FCARG1a, IS_INDIRECT, >1
+			//|	GET_Z_PTR FCARG1a, FCARG1a
+			//|1:
+			dasm_put(Dst, 7436, offsetof(zval, u1.v.type), IS_INDIRECT);
+#line 14083 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & MAY_BE_REF) {
+			if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+				//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+					if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+				dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+						}
+					} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(op1_addr)) {
+				dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else {
+				dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 14088 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	ZVAL_DEREF FCARG1a, op1_info
+				if (op1_info & MAY_BE_REF) {
+			dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+				}
+#line 14090 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		if (op1_info & ((MAY_BE_UNDEF|MAY_BE_ANY)- MAY_BE_OBJECT)) {
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, &exit_addr
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 14101 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_NOT_ZVAL_TYPE op1_addr, IS_OBJECT, >1
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14103 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.cold_code
+				dasm_put(Dst, 3320, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_OBJECT);
+#line 14104 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|1:
+				//|	SET_EX_OPLINE opline, r0
+				dasm_put(Dst, 63);
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 14106 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+					//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op1_addr)) {
+					dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							} else {
+					dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14108 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	LOAD_ADDR FCARG2a, ZSTR_VAL(name)
+						if (IS_SIGNED_32BIT(ZSTR_VAL(name))) {
+				dasm_put(Dst, 612, ((ptrdiff_t)ZSTR_VAL(name)));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)ZSTR_VAL(name))), (unsigned int)((((ptrdiff_t)ZSTR_VAL(name)))>>32));
+						}
+#line 14110 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_jit_invalid_property_assign, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_invalid_property_assign)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_invalid_property_assign));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_invalid_property_assign)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_invalid_property_assign));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_invalid_property_assign)), (unsigned int)((((ptrdiff_t)zend_jit_invalid_property_assign))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 14111 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (RETURN_VALUE_USED(opline)) {
+					//|	SET_ZVAL_TYPE_INFO res_addr, IS_NULL
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_NULL);
+#line 14113 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR))
+				 && (val_info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					//|	jmp >7
+					dasm_put(Dst, 3667);
+#line 14117 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	jmp >9
+					dasm_put(Dst, 3627);
+#line 14119 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|.code
+				dasm_put(Dst, 536);
+#line 14121 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		//|	GET_ZVAL_PTR FCARG1a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14124 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!prop_info && trace_ce && (trace_ce->ce_flags & ZEND_ACC_IMMUTABLE)) {
+		prop_info = zend_get_known_property_info(op_array, trace_ce, name, on_this, op_array->filename);
+		if (prop_info) {
+			ce = trace_ce;
+			ce_is_instanceof = 0;
+			if (!(op1_info & MAY_BE_CLASS_GUARD)) {
+				if (on_this && JIT_G(current_frame)
+				 && TRACE_FRAME_IS_THIS_CLASS_CHECKED(JIT_G(current_frame))) {
+					ZEND_ASSERT(JIT_G(current_frame)->ce == ce);
+				} else if (zend_jit_class_guard(Dst, opline, ce)) {
+					if (on_this && JIT_G(current_frame)) {
+						JIT_G(current_frame)->ce = ce;
+						TRACE_FRAME_SET_THIS_CLASS_CHECKED(JIT_G(current_frame));
+					}
+				} else {
+					return 0;
+				}
+				if (ssa->var_info && ssa_op->op1_use >= 0) {
+					ssa->var_info[ssa_op->op1_use].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_use].ce = ce;
+					ssa->var_info[ssa_op->op1_use].is_instanceof = ce_is_instanceof;
+				}
+				if (ssa->var_info && ssa_op->op1_def >= 0) {
+					ssa->var_info[ssa_op->op1_def].type |= MAY_BE_CLASS_GUARD;
+					ssa->var_info[ssa_op->op1_def].ce = ce;
+					ssa->var_info[ssa_op->op1_def].is_instanceof = ce_is_instanceof;
+				}
+			}
+		}
+	}
+
+	if (!prop_info) {
+		needs_slow_path = 1;
+
+		//|	mov r0, EX->run_time_cache
+		//|	mov r2, aword [r0 + opline->extended_value]
+		//|	cmp r2, aword [FCARG1a + offsetof(zend_object, ce)]
+		//|	jne >5
+		dasm_put(Dst, 7891, Dt1(->run_time_cache), opline->extended_value, offsetof(zend_object, ce));
+#line 14164 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (!ce || ce_is_instanceof || (ce->ce_flags & ZEND_ACC_HAS_TYPE_HINTS)) {
+			//|	mov FCARG2a, aword [r0 + opline->extended_value + sizeof(void*) * 2]
+			dasm_put(Dst, 7394, opline->extended_value + sizeof(void*) * 2);
+#line 14166 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	mov r0, aword [r0 + opline->extended_value + sizeof(void*)]
+		//|	test r0, r0
+		//|	jl >5
+		//|	IF_TYPE byte [FCARG1a + r0 + 8], IS_UNDEF, >5
+		//|	add FCARG1a, r0
+		dasm_put(Dst, 7908, opline->extended_value + sizeof(void*), 8, IS_UNDEF);
+#line 14172 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		if (!ce || ce_is_instanceof || (ce->ce_flags & ZEND_ACC_HAS_TYPE_HINTS)) {
+			//|	test FCARG2a, FCARG2a
+			//|	jnz >1
+			//|.cold_code
+			dasm_put(Dst, 7504);
+#line 14177 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	// value = zend_assign_to_typed_prop(prop_info, property_val, value EXECUTE_DATA_CC);
+			//|	SET_EX_OPLINE opline, r0
+			dasm_put(Dst, 63);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 14180 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+				//|	LOAD_ZVAL_ADDR CARG3, val_addr
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(val_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(val_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 14182 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (RETURN_VALUE_USED(opline)) {
+					//|	LOAD_ZVAL_ADDR CARG4, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 4380, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 4390, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 4398, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14184 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	xor CARG4, CARG4
+					dasm_put(Dst, 4376);
+#line 14186 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			//|.else
+				//|	sub r4, 8
+				if (RETURN_VALUE_USED(opline)) {
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				} else {
+					//|	push 0
+				}
+				//|	PUSH_ZVAL_ADDR val_addr, r0
+			//|.endif
+
+			//|	EXT_CALL zend_jit_assign_to_typed_prop, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_to_typed_prop)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_to_typed_prop));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_to_typed_prop)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_to_typed_prop));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_to_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_assign_to_typed_prop))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 14198 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			//|.if not(X64)
+				//|	add r4, 8
+			//|.endif
+
+			if ((opline+1)->op1_type == IS_CONST) {
+				//|	// TODO: ???
+				//|	// if (Z_TYPE_P(value) == orig_type) {
+				//|	// CACHE_PTR_EX(cache_slot + 2, NULL);
+			}
+
+			if (((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR))
+			 && (val_info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+				//|	jmp >7
+				dasm_put(Dst, 3667);
+#line 14212 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jmp >9
+				dasm_put(Dst, 3627);
+#line 14214 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|.code
+			dasm_put(Dst, 536);
+#line 14216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		prop_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, prop_info->offset);
+		if (!ce || ce_is_instanceof || !(ce->ce_flags & ZEND_ACC_IMMUTABLE) || ce->__get || ce->__set || (prop_info->flags & ZEND_ACC_READONLY)) {
+			// Undefined property with magic __get()/__set()
+			if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				if (!exit_addr) {
+					return 0;
+				}
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, &exit_addr
+				dasm_put(Dst, 7797, prop_info->offset + 8, IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 14229 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	IF_TYPE byte [FCARG1a + prop_info->offset + 8], IS_UNDEF, >5
+				dasm_put(Dst, 255, prop_info->offset + 8, IS_UNDEF);
+#line 14231 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				needs_slow_path = 1;
+			}
+		}
+		if (ZEND_TYPE_IS_SET(prop_info->type)) {
+			uint32_t info = val_info;
+
+			//|	// value = zend_assign_to_typed_prop(prop_info, property_val, value EXECUTE_DATA_CC);
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 14239 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (ce && ce->ce_flags & ZEND_ACC_IMMUTABLE) {
+				//|	LOAD_ADDR FCARG2a, prop_info
+						if (IS_SIGNED_32BIT(prop_info)) {
+				dasm_put(Dst, 612, ((ptrdiff_t)prop_info));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)prop_info)), (unsigned int)((((ptrdiff_t)prop_info))>>32));
+						}
+#line 14241 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				int prop_info_offset =
+					(((prop_info->offset - (sizeof(zend_object) - sizeof(zval))) / sizeof(zval)) * sizeof(void*));
+
+				//|	mov r0, aword [FCARG1a + offsetof(zend_object, ce)]
+				//|	mov	r0, aword [r0 + offsetof(zend_class_entry, properties_info_table)]
+				//|	mov FCARG2a, aword[r0 + prop_info_offset]
+				dasm_put(Dst, 7664, offsetof(zend_object, ce), offsetof(zend_class_entry, properties_info_table), prop_info_offset);
+#line 14248 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	LOAD_ZVAL_ADDR FCARG1a, prop_addr
+				if (Z_MODE(prop_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(prop_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(prop_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(prop_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(prop_addr)))>>32));
+					}
+				} else if (Z_MODE(prop_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(prop_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(prop_addr)), Z_OFFSET(prop_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(prop_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 14250 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+				//|	LOAD_ZVAL_ADDR CARG3, val_addr
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+						} else {
+				dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+						}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(val_addr)) {
+				dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+						} else {
+				dasm_put(Dst, 3366, (Z_REG(val_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 14252 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (RETURN_VALUE_USED(opline)) {
+					//|	LOAD_ZVAL_ADDR CARG4, res_addr
+						if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+					dasm_put(Dst, 4380, ((ptrdiff_t)Z_ZV(res_addr)));
+							} else {
+					dasm_put(Dst, 4385, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+							}
+						} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(res_addr)) {
+					dasm_put(Dst, 4390, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+							} else {
+					dasm_put(Dst, 4398, (Z_REG(res_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14254 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	xor CARG4, CARG4
+					dasm_put(Dst, 4376);
+#line 14256 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			//|.else
+				//|	sub r4, 8
+				if (RETURN_VALUE_USED(opline)) {
+					//|	PUSH_ZVAL_ADDR res_addr, r0
+				} else {
+					//|	push 0
+				}
+				//|	PUSH_ZVAL_ADDR val_addr, r0
+			//|.endif
+
+			//|	EXT_CALL zend_jit_assign_to_typed_prop, r0
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_to_typed_prop)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_to_typed_prop));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_assign_to_typed_prop)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_to_typed_prop));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_to_typed_prop)), (unsigned int)((((ptrdiff_t)zend_jit_assign_to_typed_prop))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 14268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+			//|.if not(X64)
+				//|	add r4, 8
+			//|.endif
+
+			if (info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				info |= MAY_BE_RC1|MAY_BE_RCN;
+			}
+
+			//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, info, 0, NULL
+				if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+				if ((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+					if (RC_MAY_BE_1(info)) {
+						if (RC_MAY_BE_N(info)) {
+							if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (NULL && ((info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (NULL) {
+				if (NULL == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(NULL)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)NULL));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)NULL)), (unsigned int)((((ptrdiff_t)NULL))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(info) && ((info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+				}
+#line 14278 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!prop_info || !ZEND_TYPE_IS_SET(prop_info->type)) {
+		// value = zend_assign_to_variable(property_val, value, OP_DATA_TYPE, EX_USES_STRICT_TYPES());
+		if (opline->result_type == IS_UNUSED) {
+			if (!zend_jit_assign_to_variable_call(Dst, opline, prop_addr, prop_addr, -1, -1, (opline+1)->op1_type, val_addr, val_info, res_addr, 0)) {
+				return 0;
+			}
+		} else {
+			if (!zend_jit_assign_to_variable(Dst, opline, prop_addr, prop_addr, -1, -1, (opline+1)->op1_type, val_addr, val_info, res_addr, 0)) {
+				return 0;
+			}
+		}
+	}
+
+	if (needs_slow_path) {
+		//|.cold_code
+		dasm_put(Dst, 445);
+#line 14296 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|5:
+		//|	SET_EX_OPLINE opline, r0
+		dasm_put(Dst, 278);
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 14298 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	// value = zobj->handlers->write_property(zobj, name, value, CACHE_ADDR(opline->extended_value));
+		//|	LOAD_ADDR FCARG2a, name
+				if (IS_SIGNED_32BIT(name)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)name));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)name)), (unsigned int)((((ptrdiff_t)name))>>32));
+				}
+#line 14300 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+			//|	LOAD_ZVAL_ADDR CARG3, val_addr
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(val_addr)) {
+			dasm_put(Dst, 3358, (Z_REG(val_addr)), Z_OFFSET(val_addr));
+					} else {
+			dasm_put(Dst, 3366, (Z_REG(val_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 14302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov CARG4, EX->run_time_cache
+			//|	add CARG4, opline->extended_value
+			dasm_put(Dst, 7872, Dt1(->run_time_cache), opline->extended_value);
+#line 14304 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (RETURN_VALUE_USED(opline)) {
+				//|.if X64WIN
+				//|	LOAD_ZVAL_ADDR r0, res_addr
+				//|	mov aword A5, r0
+				//|.else
+				//|	LOAD_ZVAL_ADDR CARG5, res_addr
+					if (Z_MODE(res_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(res_addr))) {
+				dasm_put(Dst, 7881, ((ptrdiff_t)Z_ZV(res_addr)));
+						} else {
+				dasm_put(Dst, 7886, (unsigned int)(((ptrdiff_t)Z_ZV(res_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(res_addr)))>>32));
+						}
+					} else if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+						if (Z_OFFSET(res_addr)) {
+				dasm_put(Dst, 7933, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+						} else {
+				dasm_put(Dst, 7941, (Z_REG(res_addr)));
+						}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+#line 14310 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|.endif
+			} else {
+				//|.if X64WIN
+				//|	mov aword A5, 0
+				//|.else
+				//|	xor CARG5, CARG5
+				//|.endif
+				dasm_put(Dst, 3981);
+#line 14317 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		//|.else
+			//|	sub r4, 4
+			if (RETURN_VALUE_USED(opline)) {
+				//|	PUSH_ZVAL_ADDR res_addr, r0
+			} else {
+				//|	push 0
+			}
+			//|	mov r0, EX->run_time_cache
+			//|	add r0, opline->extended_value
+			//|	push r0
+			//|	PUSH_ZVAL_ADDR val_addr, r0
+		//|.endif
+
+		//|	EXT_CALL zend_jit_assign_obj_helper, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_assign_obj_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_assign_obj_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_assign_obj_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_assign_obj_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_assign_obj_helper)), (unsigned int)((((ptrdiff_t)zend_jit_assign_obj_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 14332 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//|.if not(X64)
+			//|	add r4, 4
+		//|.endif
+
+		if (val_info & (MAY_BE_REF|MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+			val_info |= MAY_BE_RC1|MAY_BE_RCN;
+		}
+
+		//|7:
+		//|	// FREE_OP_DATA();
+		//|	FREE_OP (opline+1)->op1_type, (opline+1)->op1, val_info, 0, opline
+		dasm_put(Dst, 4342);
+			if ((opline+1)->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)));
+				if (RC_MAY_BE_1(val_info)) {
+					if (RC_MAY_BE_N(val_info)) {
+						if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((val_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((val_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((val_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(val_info) && ((val_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((val_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, (opline+1)->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((val_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14344 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	jmp >9
+		//|.code
+		dasm_put(Dst, 4064);
+#line 14346 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|9:
+	dasm_put(Dst, 4090);
+#line 14349 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->op1_type != IS_UNUSED && !delayed_fetch_this && !op1_indirect) {
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 1, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (1) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (1 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14351 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (may_throw) {
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_free(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, int may_throw)
+{
+	zend_jit_addr op1_addr = OP1_ADDR();
+
+	if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+		if (may_throw) {
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 14369 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (opline->opcode == ZEND_FE_FREE && (op1_info & (MAY_BE_OBJECT|MAY_BE_REF))) {
+			if (op1_info & MAY_BE_ARRAY) {
+				//|	IF_ZVAL_TYPE op1_addr, IS_ARRAY, >7
+					ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 7947, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_ARRAY);
+#line 14373 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|	mov FCARG1d, dword [FP + opline->op1.var + offsetof(zval, u2.fe_iter_idx)]
+			//|	cmp FCARG1d, -1
+			//|	je >7
+			//|	EXT_CALL zend_hash_iterator_del, r0
+			dasm_put(Dst, 7960, opline->op1.var + offsetof(zval, u2.fe_iter_idx));
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_iterator_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_iterator_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_hash_iterator_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_iterator_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_iterator_del)), (unsigned int)((((ptrdiff_t)zend_hash_iterator_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 14378 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 14379 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	ZVAL_PTR_DTOR op1_addr, op1_info, 0, 0, opline
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+#line 14381 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (may_throw) {
+			if (!zend_jit_check_exception(Dst)) {
+				return 0;
+			}
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_echo(dasm_State **Dst, const zend_op *opline, uint32_t op1_info)
+{
+	if (opline->op1_type == IS_CONST) {
+		zval *zv;
+		size_t len;
+
+		zv = RT_CONSTANT(opline, opline->op1);
+		ZEND_ASSERT(Z_TYPE_P(zv) == IS_STRING);
+		len = Z_STRLEN_P(zv);
+
+		if (len > 0) {
+			const char *str = Z_STRVAL_P(zv);
+
+			//|	SET_EX_OPLINE opline, r0
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 14405 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.if X64
+				//|	LOAD_ADDR CARG1, str
+						if (IS_SIGNED_32BIT(str)) {
+				dasm_put(Dst, 607, ((ptrdiff_t)str));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)str)), (unsigned int)((((ptrdiff_t)str))>>32));
+						}
+#line 14407 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	LOAD_ADDR CARG2, len
+						if (IS_SIGNED_32BIT(len)) {
+				dasm_put(Dst, 612, ((ptrdiff_t)len));
+						} else {
+				dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)len)), (unsigned int)((((ptrdiff_t)len))>>32));
+						}
+#line 14408 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_write, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_write)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_write));
+						} else {
+						if (IS_SIGNED_32BIT(zend_write)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_write));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_write)), (unsigned int)((((ptrdiff_t)zend_write))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 14409 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|.else
+				//|	mov aword A2, len
+				//|	mov aword A1, str
+				//|	EXT_CALL zend_write, r0
+			//|.endif
+			if (!zend_jit_check_exception(Dst)) {
+				return 0;
+			}
+		}
+	} else {
+		zend_jit_addr op1_addr = OP1_ADDR();
+
+		ZEND_ASSERT((op1_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_STRING);
+
+		//|	SET_EX_OPLINE opline, r0
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 14424 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_PTR r0, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14425 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.if X64
+		//|	lea CARG1, aword [r0 + offsetof(zend_string, val)]
+		//|	mov CARG2, aword [r0 + offsetof(zend_string, len)]
+		//|	EXT_CALL zend_write, r0
+		dasm_put(Dst, 7974, (Z_REG(op1_addr)), Z_OFFSET(op1_addr), offsetof(zend_string, val), offsetof(zend_string, len));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_write)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_write));
+				} else {
+				if (IS_SIGNED_32BIT(zend_write)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_write));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_write)), (unsigned int)((((ptrdiff_t)zend_write))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 14429 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+		//|	add r0, offsetof(zend_string, val)
+		//|	mov aword A1, r0
+		//|	mov r0, aword [r0 + (offsetof(zend_string, len)-offsetof(zend_string, val))]
+		//|	mov aword A2, r0
+		//|	EXT_CALL zend_write, r0
+		//|.endif
+		if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			//|	ZVAL_PTR_DTOR op1_addr, op1_info, 0, 0, opline
+				if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+					if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+						if (0) {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 432, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+			dasm_put(Dst, 63);
+						} else {
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+						}
+					}
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 461, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					if (RC_MAY_BE_1(op1_info)) {
+						if (RC_MAY_BE_N(op1_info)) {
+							if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 472);
+							} else {
+			dasm_put(Dst, 477);
+							}
+						}
+				do {
+					if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+						zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+						if (type == IS_STRING && !ZEND_DEBUG) {
+					if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+					} else {
+					if (IS_SIGNED_32BIT(_efree)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						} else if (type == IS_ARRAY) {
+							if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+								if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+								}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+					} else {
+					if (IS_SIGNED_32BIT(zend_array_destroy)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							} else {
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							}
+							break;
+						} else if (type == IS_OBJECT) {
+							if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+							}
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+					} else {
+					if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+							break;
+						}
+					}
+					if (opline) {
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+					}
+					if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+					} else {
+					if (IS_SIGNED_32BIT(rc_dtor_func)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+				} while(0);
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+			dasm_put(Dst, 491);
+						}
+			dasm_put(Dst, 496);
+					}
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+						if ((op1_info) & MAY_BE_REF) {
+							zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+				ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+						}
+			dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+					if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+					} else {
+					if (IS_SIGNED_32BIT(gc_possible_root)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+					}
+					if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+			dasm_put(Dst, 532);
+					}
+			dasm_put(Dst, 538);
+				}
+#line 14438 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+	}
+	return 1;
+}
+
+static int zend_jit_strlen(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, zend_jit_addr res_addr)
+{
+	if (opline->op1_type == IS_CONST) {
+		zval *zv;
+		size_t len;
+
+		zv = RT_CONSTANT(opline, opline->op1);
+		ZEND_ASSERT(Z_TYPE_P(zv) == IS_STRING);
+		len = Z_STRLEN_P(zv);
+
+		//|	SET_ZVAL_LVAL res_addr, len
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), len);
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), len);
+			}
+#line 14457 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 14459 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, MAY_BE_LONG)) {
+			return 0;
+		}
+	} else {
+		ZEND_ASSERT((op1_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_STRING);
+
+		if (Z_MODE(res_addr) == IS_REG) {
+			//|	GET_ZVAL_PTR Ra(Z_REG(res_addr)), op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14467 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov Ra(Z_REG(res_addr)), aword [Ra(Z_REG(res_addr))+offsetof(zend_string, len)]
+			dasm_put(Dst, 7990, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr), (Z_REG(res_addr)), (Z_REG(res_addr)), offsetof(zend_string, len));
+#line 14468 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, MAY_BE_LONG)) {
+				return 0;
+			}
+		} else {
+			//|	GET_ZVAL_PTR r0, op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14473 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov r0, aword [r0 + offsetof(zend_string, len)]
+			//|	SET_ZVAL_LVAL res_addr, r0
+			dasm_put(Dst, 8009, (Z_REG(op1_addr)), Z_OFFSET(op1_addr), offsetof(zend_string, len));
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 2202, (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+#line 14475 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 14476 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14478 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	return 1;
+}
+
+static int zend_jit_count(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr, zend_jit_addr res_addr, int may_throw)
+{
+	if (opline->op1_type == IS_CONST) {
+		zval *zv;
+		zend_long count;
+
+		zv = RT_CONSTANT(opline, opline->op1);
+		ZEND_ASSERT(Z_TYPE_P(zv) == IS_ARRAY);
+		count = zend_hash_num_elements(Z_ARRVAL_P(zv));
+
+		//|	SET_ZVAL_LVAL res_addr, count
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), count);
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), count);
+			}
+#line 14493 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 14495 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, MAY_BE_LONG)) {
+			return 0;
+		}
+	} else {
+		ZEND_ASSERT((op1_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_ARRAY);
+		// Note: See the implementation of ZEND_COUNT in Zend/zend_vm_def.h - arrays do not contain IS_UNDEF starting in php 8.1+.
+
+		if (Z_MODE(res_addr) == IS_REG) {
+			//|	GET_ZVAL_PTR Ra(Z_REG(res_addr)), op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14504 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			// Sign-extend the 32-bit value to a potentially 64-bit zend_long
+			//|	mov Rd(Z_REG(res_addr)), dword [Ra(Z_REG(res_addr))+offsetof(HashTable, nNumOfElements)]
+			dasm_put(Dst, 2101, (Z_REG(res_addr)), (Z_REG(res_addr)), offsetof(HashTable, nNumOfElements));
+#line 14506 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, MAY_BE_LONG)) {
+				return 0;
+			}
+		} else {
+			//|	GET_ZVAL_PTR r0, op1_addr
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5896, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14511 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			// Sign-extend the 32-bit value to a potentially 64-bit zend_long
+			//|	mov eax, dword [r0 + offsetof(HashTable, nNumOfElements)]
+			//|	SET_ZVAL_LVAL res_addr, r0
+			dasm_put(Dst, 5841, offsetof(HashTable, nNumOfElements));
+				if (Z_MODE(res_addr) == IS_REG) {
+			dasm_put(Dst, 2202, (Z_REG(res_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+#line 14514 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 14515 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	FREE_OP opline->op1_type, opline->op1, op1_info, 0, opline
+			if (opline->op1_type & (IS_VAR|IS_TMP_VAR)) {
+			if ((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
+				if ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_INDIRECT)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+					if (0) {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 432, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+		dasm_put(Dst, 63);
+					} else {
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type_flags), IS_TYPE_REFCOUNTED);
+					}
+				}
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 461, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)));
+				if (RC_MAY_BE_1(op1_info)) {
+					if (RC_MAY_BE_N(op1_info)) {
+						if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 472);
+						} else {
+		dasm_put(Dst, 477);
+						}
+					}
+			do {
+				if (has_concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_INDIRECT))) {
+					zend_uchar type = concrete_type((op1_info) & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE));
+					if (type == IS_STRING && !ZEND_DEBUG) {
+				if (IS_32BIT(dasm_end) && IS_32BIT(_efree)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(_efree));
+				} else {
+				if (IS_SIGNED_32BIT(_efree)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)_efree));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)_efree)), (unsigned int)((((ptrdiff_t)_efree))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					} else if (type == IS_ARRAY) {
+						if ((op1_info) & (MAY_BE_ARRAY_KEY_STRING|MAY_BE_ARRAY_OF_STRING|MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF)) {
+							if (opline && ((op1_info) & (MAY_BE_ARRAY_OF_ARRAY|MAY_BE_ARRAY_OF_OBJECT|MAY_BE_ARRAY_OF_RESOURCE|MAY_BE_ARRAY_OF_REF))) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+							}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_array_destroy));
+				} else {
+				if (IS_SIGNED_32BIT(zend_array_destroy)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_array_destroy));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_array_destroy)), (unsigned int)((((ptrdiff_t)zend_array_destroy))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						} else {
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_array_free));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_array_free)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_array_free));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_array_free)), (unsigned int)((((ptrdiff_t)zend_jit_array_free))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						}
+						break;
+					} else if (type == IS_OBJECT) {
+						if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+						}
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_objects_store_del));
+				} else {
+				if (IS_SIGNED_32BIT(zend_objects_store_del)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_objects_store_del));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_objects_store_del)), (unsigned int)((((ptrdiff_t)zend_objects_store_del))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+						break;
+					}
+				}
+				if (opline) {
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+				}
+				if (IS_32BIT(dasm_end) && IS_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(rc_dtor_func));
+				} else {
+				if (IS_SIGNED_32BIT(rc_dtor_func)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)rc_dtor_func));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)rc_dtor_func)), (unsigned int)((((ptrdiff_t)rc_dtor_func))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+			} while(0);
+					if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+		dasm_put(Dst, 491);
+					}
+		dasm_put(Dst, 496);
+				}
+				if (0 && RC_MAY_BE_N(op1_info) && ((op1_info) & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) != 0) {
+					if ((op1_info) & MAY_BE_REF) {
+						zend_jit_addr ref_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+			ZEND_ASSERT(Z_MODE(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var)) == IS_MEM_ZVAL);
+		dasm_put(Dst, 499, (Z_REG(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))), Z_OFFSET(ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var))+offsetof(zval, u1.v.type), IS_REFERENCE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 447, (Z_REG(ref_addr)), Z_OFFSET(ref_addr)+offsetof(zval, u1.v.type_flags), IS_TYPE_COLLECTABLE);
+			ZEND_ASSERT(Z_MODE(ref_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 512, (Z_REG(ref_addr)), Z_OFFSET(ref_addr));
+					}
+		dasm_put(Dst, 522, (GC_INFO_MASK | (GC_NOT_COLLECTABLE << GC_FLAGS_SHIFT)));
+				if (IS_32BIT(dasm_end) && IS_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(gc_possible_root));
+				} else {
+				if (IS_SIGNED_32BIT(gc_possible_root)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)gc_possible_root));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)gc_possible_root)), (unsigned int)((((ptrdiff_t)gc_possible_root))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+				}
+				if (0 && ((op1_info) & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) != 0) {
+		dasm_put(Dst, 532);
+				}
+		dasm_put(Dst, 538);
+			}
+			}
+#line 14517 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (may_throw) {
+		return zend_jit_check_exception(Dst);
+	}
+	return 1;
+}
+
+static int zend_jit_load_this(dasm_State **Dst, uint32_t var)
+{
+	zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, var);
+
+	//|	mov FCARG1a, aword EX->This.value.ptr
+	//|	SET_ZVAL_PTR var_addr, FCARG1a
+	dasm_put(Dst, 311, Dt1(->This.value.ptr));
+		ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 14531 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	SET_ZVAL_TYPE_INFO var_addr, IS_OBJECT_EX
+	dasm_put(Dst, 7684, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+		ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 14532 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	GC_ADDREF FCARG1a
+	dasm_put(Dst, 8021, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), IS_OBJECT_EX);
+#line 14533 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_fetch_this(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, bool check_only)
+{
+	if (!op_array->scope || (op_array->fn_flags & ZEND_ACC_STATIC)) {
+		if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+			if (!JIT_G(current_frame) ||
+			    !TRACE_FRAME_IS_THIS_CHECKED(JIT_G(current_frame))) {
+
+				int32_t exit_point = zend_jit_trace_get_exit_point(opline, ZEND_JIT_EXIT_TO_VM);
+				const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+				//|	cmp byte EX->This.u1.v.type, IS_OBJECT
+				//|	jne &exit_addr
+				dasm_put(Dst, 1685, Dt1(->This.u1.v.type), IS_OBJECT, (ptrdiff_t)(exit_addr));
+#line 14549 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+				if (JIT_G(current_frame)) {
+					TRACE_FRAME_SET_THIS_CHECKED(JIT_G(current_frame));
+				}
+			}
+		} else {
+
+			//|	cmp byte EX->This.u1.v.type, IS_OBJECT
+			//|	jne >1
+			//|.cold_code
+			dasm_put(Dst, 8033, Dt1(->This.u1.v.type), IS_OBJECT);
+#line 14559 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|1:
+			//|	SET_EX_OPLINE opline, r0
+			dasm_put(Dst, 63);
+				if (opline == last_valid_opline) {
+					zend_jit_use_last_valid_opline();
+				if (GCC_GLOBAL_REGS) {
+			dasm_put(Dst, 8, Dt1(->opline));
+				}
+				} else {
+					if (IS_SIGNED_32BIT(opline)) {
+			dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+					} else {
+			dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+					}
+					if (!GCC_GLOBAL_REGS) {
+						zend_jit_reset_last_valid_opline();
+					}
+				}
+#line 14561 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	jmp ->invalid_this
+			//|.code
+			dasm_put(Dst, 8044);
+#line 14563 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (!check_only) {
+		if (!zend_jit_load_this(Dst, opline->result.var)) {
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_hash_jmp(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, zend_ssa *ssa, HashTable *jumptable, int default_b, const void *default_label, const zend_op *next_opline, zend_jit_trace_info *trace_info)
+{
+	uint32_t count;
+	Bucket *p;
+	const zend_op *target;
+	int b;
+	int32_t exit_point;
+	const void *exit_addr;
+
+	//|	test r0, r0
+	dasm_put(Dst, 3565);
+#line 14585 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (default_label) {
+		//|	jz &default_label
+		dasm_put(Dst, 1739, (ptrdiff_t)(default_label));
+#line 14587 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else if (next_opline) {
+		//|	jz >3
+		dasm_put(Dst, 3934);
+#line 14589 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jz =>default_b
+		dasm_put(Dst, 4570, default_b);
+#line 14591 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	LOAD_ADDR FCARG1a, jumptable
+			if (IS_SIGNED_32BIT(jumptable)) {
+	dasm_put(Dst, 607, ((ptrdiff_t)jumptable));
+			} else {
+	dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)jumptable)), (unsigned int)((((ptrdiff_t)jumptable))>>32));
+			}
+#line 14593 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	sub r0, aword [FCARG1a + offsetof(HashTable, arData)]
+	//|	mov FCARG1a, (sizeof(Bucket) / sizeof(void*))
+	//|.if X64
+	//|	cqo
+	//|.else
+	//|	cdq
+	//|.endif
+	//|	idiv FCARG1a
+	//|.if X64
+	dasm_put(Dst, 8050, offsetof(HashTable, arData), (sizeof(Bucket) / sizeof(void*)));
+#line 14602 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!IS_32BIT(dasm_end)) {
+		//|	lea FCARG1a, aword [>4]
+		//|	jmp aword [FCARG1a + r0]
+		dasm_put(Dst, 8066);
+#line 14605 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	jmp aword [r0 + >4]
+		dasm_put(Dst, 8076);
+#line 14607 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|.else
+	//|	jmp aword [r0 + >4]
+	//|.endif
+	//|.jmp_table
+	dasm_put(Dst, 8082);
+#line 14612 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|.align aword
+	//|4:
+	dasm_put(Dst, 8084);
+#line 14614 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (trace_info) {
+		trace_info->jmp_table_size += zend_hash_num_elements(jumptable);
+	}
+
+	count = jumptable->nNumUsed;
+	p = jumptable->arData;
+	do {
+		if (Z_TYPE(p->val) == IS_UNDEF) {
+			if (default_label) {
+				//|	.aword &default_label
+				dasm_put(Dst, 56, (unsigned int)((ptrdiff_t)(default_label)), (unsigned int)((unsigned long long)((ptrdiff_t)(default_label))>>32));
+#line 14624 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (next_opline) {
+				//|	.aword >3
+				dasm_put(Dst, 8089);
+#line 14626 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	.aword =>default_b
+				dasm_put(Dst, 44, default_b);
+#line 14628 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			target = ZEND_OFFSET_TO_OPLINE(opline, Z_LVAL(p->val));
+			if (!next_opline) {
+				b = ssa->cfg.map[target - op_array->opcodes];
+				//|	.aword =>b
+				dasm_put(Dst, 44, b);
+#line 14634 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (next_opline == target) {
+				//|	.aword >3
+				dasm_put(Dst, 8089);
+#line 14636 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				exit_point = zend_jit_trace_get_exit_point(target, 0);
+				exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+				//|	.aword &exit_addr
+				dasm_put(Dst, 56, (unsigned int)((ptrdiff_t)(exit_addr)), (unsigned int)((unsigned long long)((ptrdiff_t)(exit_addr))>>32));
+#line 14640 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		}
+		p++;
+		count--;
+	} while (count);
+	//|.code
+	dasm_put(Dst, 536);
+#line 14646 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_switch(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, zend_ssa *ssa, zend_jit_trace_rec *trace, zend_jit_trace_info *trace_info)
+{
+	HashTable *jumptable = Z_ARRVAL_P(RT_CONSTANT(opline, opline->op2));
+	const zend_op *next_opline = NULL;
+
+	if (trace) {
+		ZEND_ASSERT(trace->op == ZEND_JIT_TRACE_VM || trace->op == ZEND_JIT_TRACE_END);
+		ZEND_ASSERT(trace->opline != NULL);
+		next_opline = trace->opline;
+	}
+
+	if (opline->op1_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, opline->op1);
+		zval *jump_zv = NULL;
+		int b;
+
+		if (opline->opcode == ZEND_SWITCH_LONG) {
+			if (Z_TYPE_P(zv) == IS_LONG) {
+				jump_zv = zend_hash_index_find(jumptable, Z_LVAL_P(zv));
+			}
+		} else if (opline->opcode == ZEND_SWITCH_STRING) {
+			if (Z_TYPE_P(zv) == IS_STRING) {
+				jump_zv = zend_hash_find_known_hash(jumptable, Z_STR_P(zv));
+			}
+		} else if (opline->opcode == ZEND_MATCH) {
+			if (Z_TYPE_P(zv) == IS_LONG) {
+				jump_zv = zend_hash_index_find(jumptable, Z_LVAL_P(zv));
+			} else if (Z_TYPE_P(zv) == IS_STRING) {
+				jump_zv = zend_hash_find_known_hash(jumptable, Z_STR_P(zv));
+			}
+		} else {
+			ZEND_UNREACHABLE();
+		}
+		if (next_opline) {
+			const zend_op *target;
+
+			if (jump_zv != NULL) {
+				target = ZEND_OFFSET_TO_OPLINE(opline, Z_LVAL_P(jump_zv));
+			} else {
+				target = ZEND_OFFSET_TO_OPLINE(opline, opline->extended_value);
+			}
+			ZEND_ASSERT(target == next_opline);
+		} else {
+			if (jump_zv != NULL) {
+				b = ssa->cfg.map[ZEND_OFFSET_TO_OPLINE(opline, Z_LVAL_P(jump_zv)) - op_array->opcodes];
+			} else {
+				b = ssa->cfg.map[ZEND_OFFSET_TO_OPLINE(opline, opline->extended_value) - op_array->opcodes];
+			}
+			//|	jmp =>b
+			dasm_put(Dst, 1587, b);
+#line 14699 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		zend_ssa_op *ssa_op = &ssa->ops[opline - op_array->opcodes];
+		uint32_t op1_info = OP1_INFO();
+		zend_jit_addr op1_addr = OP1_ADDR();
+		const zend_op *default_opline = ZEND_OFFSET_TO_OPLINE(opline, opline->extended_value);
+		const zend_op *target;
+		int default_b = next_opline ? -1 : ssa->cfg.map[default_opline - op_array->opcodes];
+		int b;
+		int32_t exit_point;
+		const void *fallback_label = NULL;
+		const void *default_label = NULL;
+		const void *exit_addr;
+
+		if (next_opline) {
+			if (next_opline != opline + 1) {
+				exit_point = zend_jit_trace_get_exit_point(opline + 1, 0);
+				fallback_label = zend_jit_trace_get_exit_addr(exit_point);
+			}
+			if (next_opline != default_opline) {
+				exit_point = zend_jit_trace_get_exit_point(default_opline, 0);
+				default_label = zend_jit_trace_get_exit_addr(exit_point);
+			}
+		}
+
+		if (opline->opcode == ZEND_SWITCH_LONG) {
+			if (op1_info & MAY_BE_LONG) {
+				if (op1_info & MAY_BE_REF) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14728 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GET_ZVAL_LVAL ZREG_FCARG2, op1_addr
+					dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op1_addr)));
+									}
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+							if (ZREG_FCARG2 != Z_REG(op1_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14729 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.cold_code
+					dasm_put(Dst, 445);
+#line 14730 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	// ZVAL_DEREF(op)
+					dasm_put(Dst, 63);
+#line 14732 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (fallback_label) {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, &fallback_label
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE, (ptrdiff_t)(fallback_label));
+#line 14734 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, >3
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 14736 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	GET_ZVAL_PTR FCARG2a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 8092, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14738 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (fallback_label) {
+						//|	IF_NOT_Z_TYPE FCARG2a + offsetof(zend_reference, val), IS_LONG, &fallback_label
+						dasm_put(Dst, 1686, offsetof(zend_reference, val)+offsetof(zval, u1.v.type), IS_LONG, (ptrdiff_t)(fallback_label));
+#line 14740 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_Z_TYPE FCARG2a + offsetof(zend_reference, val), IS_LONG, >3
+						dasm_put(Dst, 8100, offsetof(zend_reference, val)+offsetof(zval, u1.v.type), IS_LONG);
+#line 14742 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	mov FCARG2a, aword [FCARG2a + offsetof(zend_reference, val.value.lval)]
+					//|	jmp >2
+					//|.code
+					dasm_put(Dst, 8109, offsetof(zend_reference, val.value.lval));
+#line 14746 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|2:
+					dasm_put(Dst, 2222);
+#line 14747 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) {
+						if (fallback_label) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, &fallback_label
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG, (ptrdiff_t)(fallback_label));
+#line 14751 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >3
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 14753 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					//|	GET_ZVAL_LVAL ZREG_FCARG2, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op1_addr)));
+									}
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+							if (ZREG_FCARG2 != Z_REG(op1_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14756 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				if (HT_IS_PACKED(jumptable)) {
+					uint32_t count = jumptable->nNumUsed;
+					Bucket *p = jumptable->arData;
+
+					//|	cmp FCARG2a, jumptable->nNumUsed
+					dasm_put(Dst, 8119, jumptable->nNumUsed);
+#line 14762 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (default_label) {
+						//|	jae &default_label
+						dasm_put(Dst, 4692, (ptrdiff_t)(default_label));
+#line 14764 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (next_opline) {
+						//|	jae >3
+						dasm_put(Dst, 8125);
+#line 14766 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	jae =>default_b
+						dasm_put(Dst, 4696, default_b);
+#line 14768 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|.if X64
+						if (!IS_32BIT(dasm_end)) {
+							//|	lea r0, aword [>4]
+							//|	jmp aword [r0 + FCARG2a * 8]
+							dasm_put(Dst, 8130);
+#line 14773 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	jmp aword [FCARG2a * 8 + >4]
+							dasm_put(Dst, 8141);
+#line 14775 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					//|.else
+					//|	jmp aword [FCARG2a * 4 + >4]
+					//|.endif
+					//|.jmp_table
+					dasm_put(Dst, 8082);
+#line 14780 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.align aword
+					//|4:
+					dasm_put(Dst, 8084);
+#line 14782 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (trace_info) {
+						trace_info->jmp_table_size += count;
+					}
+					p = jumptable->arData;
+					do {
+						if (Z_TYPE(p->val) == IS_UNDEF) {
+							if (default_label) {
+								//|	.aword &default_label
+								dasm_put(Dst, 56, (unsigned int)((ptrdiff_t)(default_label)), (unsigned int)((unsigned long long)((ptrdiff_t)(default_label))>>32));
+#line 14790 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else if (next_opline) {
+								//|	.aword >3
+								dasm_put(Dst, 8089);
+#line 14792 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								//|	.aword =>default_b
+								dasm_put(Dst, 44, default_b);
+#line 14794 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						} else {
+							target = ZEND_OFFSET_TO_OPLINE(opline, Z_LVAL(p->val));
+							if (!next_opline) {
+								b = ssa->cfg.map[target - op_array->opcodes];
+								//|	.aword =>b
+								dasm_put(Dst, 44, b);
+#line 14800 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else if (next_opline == target) {
+								//|	.aword >3
+								dasm_put(Dst, 8089);
+#line 14802 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							} else {
+								exit_point = zend_jit_trace_get_exit_point(target, 0);
+								exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+								//|	.aword &exit_addr
+								dasm_put(Dst, 56, (unsigned int)((ptrdiff_t)(exit_addr)), (unsigned int)((unsigned long long)((ptrdiff_t)(exit_addr))>>32));
+#line 14806 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+							}
+						}
+						p++;
+						count--;
+					} while (count);
+					//|.code
+					dasm_put(Dst, 536);
+#line 14812 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|3:
+					dasm_put(Dst, 496);
+#line 14813 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					//|	LOAD_ADDR FCARG1a, jumptable
+							if (IS_SIGNED_32BIT(jumptable)) {
+					dasm_put(Dst, 607, ((ptrdiff_t)jumptable));
+							} else {
+					dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)jumptable)), (unsigned int)((((ptrdiff_t)jumptable))>>32));
+							}
+#line 14815 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_hash_index_find, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_index_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_index_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_index_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_index_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_index_find)), (unsigned int)((((ptrdiff_t)zend_hash_index_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 14816 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (!zend_jit_hash_jmp(Dst, opline, op_array, ssa, jumptable, default_b, default_label, next_opline, trace_info)) {
+						return 0;
+					}
+					//|3:
+					dasm_put(Dst, 496);
+#line 14820 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+		} else if (opline->opcode == ZEND_SWITCH_STRING) {
+			if (op1_info & MAY_BE_STRING) {
+				if (op1_info & MAY_BE_REF) {
+					//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >1
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14826 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	GET_ZVAL_PTR FCARG2a, op1_addr
+					dasm_put(Dst, 499, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14827 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|.cold_code
+					dasm_put(Dst, 8149, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14828 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|1:
+					//|	// ZVAL_DEREF(op)
+					dasm_put(Dst, 63);
+#line 14830 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (fallback_label) {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, &fallback_label
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE, (ptrdiff_t)(fallback_label));
+#line 14832 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_REFERENCE, >3
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_REFERENCE);
+#line 14834 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	GET_ZVAL_PTR FCARG2a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 8092, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14836 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (fallback_label) {
+						//|	IF_NOT_Z_TYPE FCARG2a + offsetof(zend_reference, val), IS_STRING, &fallback_label
+						dasm_put(Dst, 1686, offsetof(zend_reference, val)+offsetof(zval, u1.v.type), IS_STRING, (ptrdiff_t)(fallback_label));
+#line 14838 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_Z_TYPE FCARG2a + offsetof(zend_reference, val), IS_STRING, >3
+						dasm_put(Dst, 8100, offsetof(zend_reference, val)+offsetof(zval, u1.v.type), IS_STRING);
+#line 14840 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+					//|	mov FCARG2a, aword [FCARG2a + offsetof(zend_reference, val.value.ptr)]
+					//|	jmp >2
+					//|.code
+					dasm_put(Dst, 8109, offsetof(zend_reference, val.value.ptr));
+#line 14844 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|2:
+					dasm_put(Dst, 2222);
+#line 14845 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				} else {
+					if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_STRING)) {
+						if (fallback_label) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, &fallback_label
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING, (ptrdiff_t)(fallback_label));
+#line 14849 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >3
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 14851 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					//|	GET_ZVAL_PTR FCARG2a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+					dasm_put(Dst, 8092, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+#line 14854 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|	LOAD_ADDR FCARG1a, jumptable
+						if (IS_SIGNED_32BIT(jumptable)) {
+				dasm_put(Dst, 607, ((ptrdiff_t)jumptable));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)jumptable)), (unsigned int)((((ptrdiff_t)jumptable))>>32));
+						}
+#line 14856 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	EXT_CALL zend_hash_find, r0
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find));
+						} else {
+						if (IS_SIGNED_32BIT(zend_hash_find)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find)), (unsigned int)((((ptrdiff_t)zend_hash_find))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 14857 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!zend_jit_hash_jmp(Dst, opline, op_array, ssa, jumptable, default_b, default_label, next_opline, trace_info)) {
+					return 0;
+				}
+				//|3:
+				dasm_put(Dst, 496);
+#line 14861 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (opline->opcode == ZEND_MATCH) {
+			if (op1_info & (MAY_BE_LONG|MAY_BE_STRING)) {
+				if (op1_info & MAY_BE_REF) {
+					//|	LOAD_ZVAL_ADDR FCARG2a, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+					dasm_put(Dst, 612, ((ptrdiff_t)Z_ZV(op1_addr)));
+							} else {
+					dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+							if (Z_OFFSET(op1_addr)) {
+					dasm_put(Dst, 2275, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							} else {
+					dasm_put(Dst, 2283, (Z_REG(op1_addr)));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14866 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	ZVAL_DEREF FCARG2a, op1_info
+						if (op1_info & MAY_BE_REF) {
+					dasm_put(Dst, 5161, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+						}
+#line 14867 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+				}
+				//|	LOAD_ADDR FCARG1a, jumptable
+						if (IS_SIGNED_32BIT(jumptable)) {
+				dasm_put(Dst, 607, ((ptrdiff_t)jumptable));
+						} else {
+				dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)jumptable)), (unsigned int)((((ptrdiff_t)jumptable))>>32));
+						}
+#line 14870 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_info & MAY_BE_LONG) {
+					if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-MAY_BE_LONG)) {
+						if (op1_info & MAY_BE_STRING) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >5
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 5057, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 14874 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (op1_info & MAY_BE_UNDEF) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >6
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 14876 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (default_label) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, &default_label
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG, (ptrdiff_t)(default_label));
+#line 14878 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (next_opline) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, >3
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG);
+#line 14880 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_LONG, =>default_b
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 8158, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_LONG, default_b);
+#line 14882 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					//|	GET_ZVAL_LVAL ZREG_FCARG2, op1_addr
+						if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+							if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+					dasm_put(Dst, 1694, (ZREG_FCARG2), (ZREG_FCARG2));
+							} else {
+									if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+					dasm_put(Dst, 1702, (ZREG_FCARG2), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+									} else {
+					dasm_put(Dst, 1709, (ZREG_FCARG2), Z_LVAL_P(Z_ZV(op1_addr)));
+									}
+							}
+						} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					dasm_put(Dst, 1716, (ZREG_FCARG2), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+						} else if (Z_MODE(op1_addr) == IS_REG) {
+							if (ZREG_FCARG2 != Z_REG(op1_addr)) {
+					dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG2));
+							}
+						} else {
+							ZEND_UNREACHABLE();
+						}
+#line 14885 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_hash_index_find, r0
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_index_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_index_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_index_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_index_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_index_find)), (unsigned int)((((ptrdiff_t)zend_hash_index_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 14886 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & MAY_BE_STRING) {
+						//|	jmp >2
+						dasm_put(Dst, 3672);
+#line 14888 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				if (op1_info & MAY_BE_STRING) {
+					//|5:
+					dasm_put(Dst, 278);
+#line 14892 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_STRING))) {
+						if (op1_info & MAY_BE_UNDEF) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >6
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3307, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 14895 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (default_label) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, &default_label
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING, (ptrdiff_t)(default_label));
+#line 14897 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else if (next_opline) {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, >3
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING);
+#line 14899 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						} else {
+							//|	IF_NOT_ZVAL_TYPE op1_addr, IS_STRING, =>default_b
+								ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+							dasm_put(Dst, 8158, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_STRING, default_b);
+#line 14901 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+						}
+					}
+					//|	GET_ZVAL_PTR FCARG2a, op1_addr
+						ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14904 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					//|	EXT_CALL zend_hash_find, r0
+					dasm_put(Dst, 8092, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+							if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find));
+							} else {
+							if (IS_SIGNED_32BIT(zend_hash_find)) {
+					dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find));
+							} else {
+					dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find)), (unsigned int)((((ptrdiff_t)zend_hash_find))>>32));
+							}
+					dasm_put(Dst, 59);
+							}
+#line 14905 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+				//|2:
+				dasm_put(Dst, 2222);
+#line 14907 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!zend_jit_hash_jmp(Dst, opline, op_array, ssa, jumptable, default_b, default_label, next_opline, trace_info)) {
+					return 0;
+				}
+			}
+			if (op1_info & MAY_BE_UNDEF) {
+				//|6:
+				dasm_put(Dst, 3345);
+#line 14913 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (op1_info & (MAY_BE_ANY-(MAY_BE_LONG|MAY_BE_STRING))) {
+					if (default_label) {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, &default_label
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 5790, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(default_label));
+#line 14916 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else if (next_opline) {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >3
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 3294, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF);
+#line 14918 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					} else {
+						//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, =>default_b
+							ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+						dasm_put(Dst, 8158, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF, default_b);
+#line 14920 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+					}
+				}
+				//|	// zend_error(E_WARNING, "Undefined variable $%s", ZSTR_VAL(CV_DEF_OF(EX_VAR_TO_NUM(opline->op1.var))));
+				//|	SET_EX_OPLINE opline, r0
+					if (opline == last_valid_opline) {
+						zend_jit_use_last_valid_opline();
+					if (GCC_GLOBAL_REGS) {
+				dasm_put(Dst, 8, Dt1(->opline));
+					}
+					} else {
+						if (IS_SIGNED_32BIT(opline)) {
+				dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+						} else {
+				dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+						}
+						if (!GCC_GLOBAL_REGS) {
+							zend_jit_reset_last_valid_opline();
+						}
+					}
+#line 14924 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	mov FCARG1d, opline->op1.var
+				//|	EXT_CALL zend_jit_undefined_op_helper, r0
+				dasm_put(Dst, 2237, opline->op1.var);
+						if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+						} else {
+						if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+				dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_undefined_op_helper));
+						} else {
+				dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+						}
+				dasm_put(Dst, 59);
+						}
+#line 14926 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				if (!zend_jit_check_exception_undef_result(Dst, opline)) {
+					return 0;
+				}
+			}
+			if (default_label) {
+				//|	jmp &default_label
+				dasm_put(Dst, 134, (ptrdiff_t)(default_label));
+#line 14932 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (next_opline) {
+				//|	jmp >3
+				dasm_put(Dst, 3893);
+#line 14934 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jmp =>default_b
+				dasm_put(Dst, 1587, default_b);
+#line 14936 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|3:
+			dasm_put(Dst, 496);
+#line 14938 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	}
+	return 1;
+}
+
+static bool zend_jit_verify_return_type(dasm_State **Dst, const zend_op *opline, const zend_op_array *op_array, uint32_t op1_info)
+{
+	zend_arg_info *arg_info = &op_array->arg_info[-1];
+	ZEND_ASSERT(ZEND_TYPE_IS_SET(arg_info->type));
+	zend_jit_addr op1_addr = OP1_ADDR();
+	bool needs_slow_check = 1;
+	bool slow_check_in_cold = 1;
+	uint32_t type_mask = ZEND_TYPE_PURE_MASK(arg_info->type) & MAY_BE_ANY;
+
+	if (type_mask == 0) {
+		slow_check_in_cold = 0;
+	} else {
+		if (((op1_info & MAY_BE_ANY) & type_mask) == 0) {
+			slow_check_in_cold = 0;
+		} else if (((op1_info & MAY_BE_ANY) | type_mask) == type_mask) {
+			needs_slow_check = 0;
+		} else if (is_power_of_two(type_mask)) {
+			uint32_t type_code = concrete_type(type_mask);
+			//|	IF_NOT_ZVAL_TYPE op1_addr, type_code, >7
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4244, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), type_code);
+#line 14964 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	mov edx, 1
+			//|	GET_ZVAL_TYPE cl, op1_addr
+			dasm_put(Dst, 8170);
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14967 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	shl edx, cl
+			//|	test edx, type_mask
+			//|	je >7
+			dasm_put(Dst, 8176, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.v.type), type_mask);
+#line 14970 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	if (needs_slow_check) {
+		if (slow_check_in_cold) {
+			//|.cold_code
+			dasm_put(Dst, 445);
+#line 14975 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|7:
+			dasm_put(Dst, 4342);
+#line 14976 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	SET_EX_OPLINE opline, r1
+			if (opline == last_valid_opline) {
+				zend_jit_use_last_valid_opline();
+			if (GCC_GLOBAL_REGS) {
+		dasm_put(Dst, 8, Dt1(->opline));
+			}
+			} else {
+				if (IS_SIGNED_32BIT(opline)) {
+		dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+				} else {
+		dasm_put(Dst, 8194, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+				}
+				if (!GCC_GLOBAL_REGS) {
+					zend_jit_reset_last_valid_opline();
+				}
+			}
+#line 14978 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (op1_info & MAY_BE_UNDEF) {
+			//|	IF_NOT_ZVAL_TYPE op1_addr, IS_UNDEF, >8
+				ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 14980 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov FCARG1a, opline->op1.var
+			//|	EXT_CALL zend_jit_undefined_op_helper, FCARG2a
+			dasm_put(Dst, 8203, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_UNDEF, opline->op1.var);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_undefined_op_helper));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_undefined_op_helper)) {
+			dasm_put(Dst, 612, ((ptrdiff_t)zend_jit_undefined_op_helper));
+					} else {
+			dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)zend_jit_undefined_op_helper)), (unsigned int)((((ptrdiff_t)zend_jit_undefined_op_helper))>>32));
+					}
+			dasm_put(Dst, 8220);
+					}
+#line 14982 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	LOAD_ADDR_ZTS r0, executor_globals, uninitialized_zval
+					if (IS_SIGNED_32BIT(&executor_globals.uninitialized_zval)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)&executor_globals.uninitialized_zval));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)&executor_globals.uninitialized_zval)), (unsigned int)((((ptrdiff_t)&executor_globals.uninitialized_zval))>>32));
+					}
+#line 14983 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|8:
+		//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+		dasm_put(Dst, 4196);
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+				if (Z_OFFSET(op1_addr)) {
+		dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				} else {
+		dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+#line 14986 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG2a, EX->func
+		//|.if X64
+			//|	LOAD_ADDR CARG3, (ptrdiff_t)arg_info
+			dasm_put(Dst, 914, Dt1(->func));
+					if (IS_SIGNED_32BIT((ptrdiff_t)arg_info)) {
+			dasm_put(Dst, 3348, ((ptrdiff_t)(ptrdiff_t)arg_info));
+					} else {
+			dasm_put(Dst, 3353, (unsigned int)(((ptrdiff_t)(ptrdiff_t)arg_info)), (unsigned int)((((ptrdiff_t)(ptrdiff_t)arg_info))>>32));
+					}
+#line 14989 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	mov r0, EX->run_time_cache
+			//|	lea CARG4, aword [r0+opline->op2.num]
+			//|	EXT_CALL zend_jit_verify_return_slow, r0
+			dasm_put(Dst, 8224, Dt1(->run_time_cache), opline->op2.num);
+					if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_verify_return_slow)) {
+			dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_verify_return_slow));
+					} else {
+					if (IS_SIGNED_32BIT(zend_jit_verify_return_slow)) {
+			dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_verify_return_slow));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_verify_return_slow)), (unsigned int)((((ptrdiff_t)zend_jit_verify_return_slow))>>32));
+					}
+			dasm_put(Dst, 59);
+					}
+#line 14992 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|.else
+			//|	sub r4, 8
+			//|	mov r0, EX->run_time_cache
+			//|	add r0, opline->op2.num
+			//|	push r0
+			//|	push (ptrdiff_t)arg_info
+			//|	EXT_CALL zend_jit_verify_return_slow, r0
+			//|	add r4, 8
+		//|.endif
+		if (!zend_jit_check_exception(Dst)) {
+			return 0;
+		}
+		if (slow_check_in_cold) {
+			//|	jmp >9
+			//|.code
+			dasm_put(Dst, 4064);
+#line 15007 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|9:
+	dasm_put(Dst, 4090);
+#line 15010 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	return 1;
+}
+
+static int zend_jit_isset_isempty_cv(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr,  zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	// TODO: support for empty() ???
+	ZEND_ASSERT(!(opline->extended_value & ZEND_ISEMPTY));
+
+	if (op1_info & MAY_BE_REF) {
+		if (Z_MODE(op1_addr) != IS_MEM_ZVAL || Z_REG(op1_addr) != ZREG_FCARG1 || Z_OFFSET(op1_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, op1_addr
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(op1_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+					}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(op1_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(op1_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 15023 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+		}
+		//|	ZVAL_DEREF FCARG1a, op1_info
+			if (op1_info & MAY_BE_REF) {
+		dasm_put(Dst, 5143, offsetof(zval, u1.v.type), IS_REFERENCE, offsetof(zend_reference, val));
+			}
+#line 15026 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|1:
+		dasm_put(Dst, 63);
+#line 15027 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	if (!(op1_info & (MAY_BE_UNDEF|MAY_BE_NULL))) {
+		if (exit_addr) {
+			ZEND_ASSERT(smart_branch_opcode == ZEND_JMPZ);
+		} else if (smart_branch_opcode) {
+			if (smart_branch_opcode == ZEND_JMPNZ) {
+				//|	jmp =>target_label
+				dasm_put(Dst, 1587, target_label);
+#line 15035 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				//|	jmp =>target_label2
+				dasm_put(Dst, 1587, target_label2);
+#line 15037 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_TRUE
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_TRUE);
+#line 15040 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (!(op1_info & (MAY_BE_ANY - MAY_BE_NULL))) {
+		if (exit_addr) {
+			ZEND_ASSERT(smart_branch_opcode == ZEND_JMPNZ);
+		} else if (smart_branch_opcode) {
+			if (smart_branch_opcode != ZEND_JMPNZ) {
+				//|	jmp =>target_label
+				dasm_put(Dst, 1587, target_label);
+#line 15047 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, IS_FALSE
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_FALSE);
+#line 15050 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		//|	cmp byte [Ra(Z_REG(op1_addr))+Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type)], IS_NULL
+		dasm_put(Dst, 5203, (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval, u1.v.type), IS_NULL);
+#line 15054 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (exit_addr) {
+			if (smart_branch_opcode == ZEND_JMPNZ) {
+				//|	jg &exit_addr
+				dasm_put(Dst, 3774, (ptrdiff_t)(exit_addr));
+#line 15057 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				//|	jle &exit_addr
+				dasm_put(Dst, 3770, (ptrdiff_t)(exit_addr));
+#line 15059 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+		} else if (smart_branch_opcode) {
+			if (smart_branch_opcode == ZEND_JMPZ) {
+				//|	jle =>target_label
+				dasm_put(Dst, 4574, target_label);
+#line 15063 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (smart_branch_opcode == ZEND_JMPNZ) {
+				//|	jg =>target_label
+				dasm_put(Dst, 4594, target_label);
+#line 15065 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+				//|	jle =>target_label
+				//|	jmp =>target_label2
+				dasm_put(Dst, 8233, target_label, target_label2);
+#line 15068 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else {
+				ZEND_UNREACHABLE();
+			}
+		} else {
+			//|	setg al
+			//|	movzx eax, al
+			//|	lea eax, [eax + IS_FALSE]
+			//|	SET_ZVAL_TYPE_INFO res_addr, eax
+			dasm_put(Dst, 8240, IS_FALSE);
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 15076 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_fe_reset(dasm_State **Dst, const zend_op *opline, uint32_t op1_info)
+{
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	if (opline->op1_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, opline->op1);
+
+		//|	ZVAL_COPY_CONST res_addr, MAY_BE_ANY, MAY_BE_ANY, zv, ZREG_R0
+			if (Z_TYPE_P(zv) > IS_TRUE) {
+				if (Z_TYPE_P(zv) == IS_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+					if (Z_DVAL_P(zv) == 0.0 && !is_signed(Z_DVAL_P(zv))) {
+						if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+						}
+					} else if (!IS_SIGNED_32BIT(zv)) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)zv)), (unsigned int)((((uintptr_t)zv))>>32));
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			} else {
+		dasm_put(Dst, 1951, (dst_reg-ZREG_XMM0), (ZREG_R0), 0);
+			}
+					} else {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			} else {
+		dasm_put(Dst, 1911, (dst_reg-ZREG_XMM0), ((uint32_t)(uintptr_t)zv));
+			}
+					}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (dst_reg != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+				} else if (Z_TYPE_P(zv) == IS_LONG && MAY_BE_ANY == MAY_BE_DOUBLE) {
+					zend_reg dst_reg = (Z_MODE(res_addr) == IS_REG) ? Z_REG(res_addr) : ZREG_XMM0;
+				if (Z_LVAL_P(zv) == 0) {
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2669, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					} else {
+		dasm_put(Dst, 2681, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+					}
+				} else {
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(Z_LVAL_P(zv)), (unsigned int)((Z_LVAL_P(zv))>>32));
+					} else {
+		dasm_put(Dst, 1709, (ZREG_R0), Z_LVAL_P(zv));
+					}
+					if (CAN_USE_AVX()) {
+		dasm_put(Dst, 2690, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					} else {
+		dasm_put(Dst, 2714, (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (dst_reg-ZREG_XMM0), (ZREG_R0));
+					}
+				}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (dst_reg != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (dst_reg-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (dst_reg-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+				} else if (Z_LVAL_P(zv) == 0 && Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+							if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+							} else {
+		dasm_put(Dst, 1702, (ZREG_R0), (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R0), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+							}
+						} else {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(zv));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3804, (Z_REG(res_addr)), Z_OFFSET(res_addr), Z_LVAL_P(zv));
+			}
+						}
+				}
+			}
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				if (MAY_BE_ANY == MAY_BE_DOUBLE) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != MAY_BE_DOUBLE) {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_DOUBLE);
+					}
+				} else if (((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (1<<Z_TYPE_P(zv))) || (MAY_BE_ANY & (MAY_BE_STRING|MAY_BE_ARRAY)) != 0) {
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), Z_TYPE_INFO_P(zv));
+				}
+			}
+#line 15090 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (Z_REFCOUNTED_P(zv)) {
+			//|	ADDREF_CONST zv, r0
+					if (!IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			dasm_put(Dst, 6336, (unsigned int)(((uintptr_t)Z_LVAL_P(zv))), (unsigned int)((((uintptr_t)Z_LVAL_P(zv)))>>32));
+					} else {
+			dasm_put(Dst, 3828, Z_LVAL_P(zv));
+					}
+#line 15092 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		zend_jit_addr op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+
+		//|	// ZVAL_COPY(res, value);
+		//|	ZVAL_COPY_VALUE res_addr, -1, op1_addr, op1_info, ZREG_R0, ZREG_FCARG1
+			if (op1_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+						if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(op1_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+						}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (Z_REG(res_addr) != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(op1_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(op1_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(op1_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(op1_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(op1_addr)));
+						}
+				}
+			} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else if (Z_MODE(op1_addr) == IS_REG) {
+				if (ZREG_FCARG1 != Z_REG(op1_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(op1_addr)), (ZREG_FCARG1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_FCARG1), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+					}
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(op1_addr) == IS_REG) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_REG(op1_addr) != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(op1_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(op1_addr) != IS_REG || Z_REG(res_addr) != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(op1_addr) != IS_REG || ZREG_XMM0 != Z_REG(op1_addr)) {
+				if (Z_MODE(op1_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(op1_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(op1_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(op1_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(op1_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(op1_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(op1_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			}
+				} else if (Z_MODE(op1_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(op1_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					}
+				} else if (!(op1_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+			}
+			if ((op1_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(op1_info & MAY_BE_GUARD) &&
+				has_concrete_type(op1_info & MAY_BE_ANY)) {
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(op1_info);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(op1_addr)), Z_OFFSET(op1_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+			}
+#line 15098 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op1_type == IS_CV) {
+			//|	TRY_ADDREF op1_info, ah, FCARG1a
+				if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+					if (op1_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			dasm_put(Dst, 2307);
+					}
+			dasm_put(Dst, 8250);
+				}
+#line 15100 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	//|	// Z_FE_POS_P(res) = 0;
+	//|	mov dword [FP + opline->result.var + offsetof(zval, u2.fe_pos)], 0
+	dasm_put(Dst, 8256, opline->result.var + offsetof(zval, u2.fe_pos));
+#line 15104 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_fe_fetch(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, uint32_t op2_info, unsigned int target_label, zend_uchar exit_opcode, const void *exit_addr)
+{
+	zend_jit_addr op1_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op1.var);
+
+	//|	// array = EX_VAR(opline->op1.var);
+	//|	// fe_ht = Z_ARRVAL_P(array);
+	//|	GET_ZVAL_PTR FCARG1a, op1_addr
+		ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 15115 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// pos = Z_FE_POS_P(array);
+	//|	mov eax, dword [FP + opline->op1.var + offsetof(zval, u2.fe_pos)]
+	//|	// p = fe_ht->arData + pos;
+	//|.if X64
+		dasm_put(Dst, 8265, (Z_REG(op1_addr)), Z_OFFSET(op1_addr), opline->op1.var + offsetof(zval, u2.fe_pos));
+			ZEND_ASSERT(sizeof(Bucket) == 32);
+#line 15120 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov FCARG2d, eax
+		//|	shl FCARG2a, 5
+	//|.else
+		//|	imul FCARG2a, r0, sizeof(Bucket)
+	//|.endif
+	//|	add FCARG2a, aword [FCARG1a + offsetof(zend_array, arData)]
+	//|1:
+	//|	// if (UNEXPECTED(pos >= fe_ht->nNumUsed)) {
+	//|	cmp dword [FCARG1a + offsetof(zend_array, nNumUsed)], eax
+	//|	// ZEND_VM_SET_RELATIVE_OPCODE(opline, opline->extended_value);
+	//|   // ZEND_VM_CONTINUE();
+	dasm_put(Dst, 8277, offsetof(zend_array, arData), offsetof(zend_array, nNumUsed));
+#line 15131 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (exit_addr) {
+		if (exit_opcode == ZEND_JMP) {
+			//|	jbe &exit_addr
+			dasm_put(Dst, 3580, (ptrdiff_t)(exit_addr));
+#line 15134 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jbe >3
+			dasm_put(Dst, 8293);
+#line 15136 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	jbe =>target_label
+		dasm_put(Dst, 4634, target_label);
+#line 15139 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	// pos++;
+	//|	add eax, 1
+	//|	// value_type = Z_TYPE_INFO_P(value);
+	//|	// if (EXPECTED(value_type != IS_UNDEF)) {
+	dasm_put(Dst, 8298);
+#line 15144 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!exit_addr || exit_opcode == ZEND_JMP) {
+		//|	IF_NOT_Z_TYPE FCARG2a, IS_UNDEF, >3
+		dasm_put(Dst, 8100, offsetof(zval, u1.v.type), IS_UNDEF);
+#line 15146 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	IF_NOT_Z_TYPE FCARG2a, IS_UNDEF, &exit_addr
+		dasm_put(Dst, 1686, offsetof(zval, u1.v.type), IS_UNDEF, (ptrdiff_t)(exit_addr));
+#line 15148 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	// p++;
+	//|	add FCARG2a, sizeof(Bucket)
+	//|	jmp <1
+	//|3:
+	dasm_put(Dst, 8302, sizeof(Bucket));
+#line 15153 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if (!exit_addr || exit_opcode == ZEND_JMP) {
+		zend_jit_addr val_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG2, 0);
+		zend_jit_addr var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->op2.var);
+		uint32_t val_info;
+
+		//|	// Z_FE_POS_P(array) = pos + 1;
+		//|	mov dword [FP + opline->op1.var + offsetof(zval, u2.fe_pos)], eax
+		dasm_put(Dst, 8313, opline->op1.var + offsetof(zval, u2.fe_pos));
+#line 15161 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		if (RETURN_VALUE_USED(opline)) {
+			zend_jit_addr res_addr = RES_ADDR();
+
+			if ((op1_info & MAY_BE_ARRAY_KEY_LONG)
+			 && (op1_info & MAY_BE_ARRAY_KEY_STRING)) {
+				//|	// if (!p->key) {
+				//|	cmp aword [FCARG2a + offsetof(Bucket, key)], 0
+				//|	jz >2
+				dasm_put(Dst, 8318, offsetof(Bucket, key));
+#line 15170 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			if (op1_info & MAY_BE_ARRAY_KEY_STRING) {
+				//|	// ZVAL_STR_COPY(EX_VAR(opline->result.var), p->key);
+				//|	mov r0, aword [FCARG2a + offsetof(Bucket, key)]
+				//|	SET_ZVAL_PTR res_addr, r0
+				dasm_put(Dst, 8328, offsetof(Bucket, key));
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 15175 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	test dword [r0 + offsetof(zend_refcounted, gc.u.type_info)], IS_STR_INTERNED
+				//|	jz >1
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_STRING
+				dasm_put(Dst, 8333, (Z_REG(res_addr)), Z_OFFSET(res_addr), offsetof(zend_refcounted, gc.u.type_info), IS_STR_INTERNED);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 15178 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	jmp >3
+				//|1:
+				//|	GC_ADDREF r0
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_STRING_EX
+				dasm_put(Dst, 8350, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_STRING);
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_STRING_EX);
+#line 15182 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+				if (op1_info & MAY_BE_ARRAY_KEY_LONG) {
+				    //|	jmp >3
+					//|2:
+					dasm_put(Dst, 3939);
+#line 15186 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				}
+			}
+			if (op1_info & MAY_BE_ARRAY_KEY_LONG) {
+				//|	// ZVAL_LONG(EX_VAR(opline->result.var), p->h);
+				//|	mov r0, aword [FCARG2a + offsetof(Bucket, h)]
+				//|	SET_ZVAL_LVAL res_addr, r0
+				dasm_put(Dst, 8328, offsetof(Bucket, h));
+					if (Z_MODE(res_addr) == IS_REG) {
+				dasm_put(Dst, 2202, (Z_REG(res_addr)));
+					} else {
+						ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+					}
+#line 15192 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+				//|	SET_ZVAL_TYPE_INFO res_addr, IS_LONG
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_LONG);
+#line 15193 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			}
+			//|3:
+			dasm_put(Dst, 496);
+#line 15195 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+
+		val_info = ((op1_info & MAY_BE_ARRAY_OF_ANY) >> MAY_BE_ARRAY_SHIFT);
+		if (val_info & MAY_BE_ARRAY) {
+			val_info |= MAY_BE_ARRAY_KEY_ANY | MAY_BE_ARRAY_OF_ANY | MAY_BE_ARRAY_OF_REF;
+		}
+		if (op1_info & MAY_BE_ARRAY_OF_REF) {
+			val_info |= MAY_BE_REF | MAY_BE_RC1 | MAY_BE_RCN | MAY_BE_ANY |
+				MAY_BE_ARRAY_KEY_ANY | MAY_BE_ARRAY_OF_ANY | MAY_BE_ARRAY_OF_REF;
+		} else if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+			val_info |= MAY_BE_RC1 | MAY_BE_RCN;
+		}
+
+		if (opline->op2_type == IS_CV) {
+			//|	// zend_assign_to_variable(variable_ptr, value, IS_CV, EX_USES_STRICT_TYPES());
+			if (!zend_jit_assign_to_variable(Dst, opline, var_addr, var_addr, op2_info, -1, IS_CV, val_addr, val_info, 0, 1)) {
+				return 0;
+			}
+		} else {
+			//|	// ZVAL_COPY(res, value);
+			//|	ZVAL_COPY_VALUE var_addr, -1, val_addr, val_info, ZREG_R0, ZREG_FCARG1
+				if (val_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+					if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+						if (Z_MODE(val_addr) == IS_REG) {
+							if (Z_MODE(var_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (Z_REG(val_addr)), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+							}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (Z_REG(var_addr)), (Z_REG(var_addr)));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (Z_REG(var_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (Z_REG(var_addr)), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (Z_REG(var_addr)), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (Z_REG(var_addr) != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (Z_REG(var_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+						} else {
+				if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+					if (Z_LVAL_P(Z_ZV(val_addr)) == 0) {
+			dasm_put(Dst, 1694, (ZREG_FCARG1), (ZREG_FCARG1));
+					} else {
+							if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(val_addr)))) {
+			dasm_put(Dst, 1702, (ZREG_FCARG1), (unsigned int)(Z_LVAL_P(Z_ZV(val_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(val_addr)))>>32));
+							} else {
+			dasm_put(Dst, 1709, (ZREG_FCARG1), Z_LVAL_P(Z_ZV(val_addr)));
+							}
+					}
+				} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+			dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else if (Z_MODE(val_addr) == IS_REG) {
+					if (ZREG_FCARG1 != Z_REG(val_addr)) {
+			dasm_put(Dst, 1726, (Z_REG(val_addr)), (ZREG_FCARG1));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+			dasm_put(Dst, 1726, (ZREG_FCARG1), (Z_REG(var_addr)));
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+						}
+					} else if ((val_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+						if (Z_MODE(val_addr) == IS_REG) {
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (Z_REG(val_addr) != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (Z_REG(val_addr)-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						} else if (Z_MODE(var_addr) == IS_REG) {
+				if (Z_MODE(val_addr) != IS_REG || Z_REG(var_addr) != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (Z_REG(var_addr)-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (Z_REG(var_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (Z_REG(var_addr)-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+						} else {
+				if (Z_MODE(val_addr) != IS_REG || ZREG_XMM0 != Z_REG(val_addr)) {
+					if (Z_MODE(val_addr) == IS_CONST_ZVAL) {
+							if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				} else {
+			dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(val_addr));
+				}
+							} else {
+					if (IS_SIGNED_32BIT(Z_ZV(val_addr))) {
+			dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(val_addr)));
+					} else {
+			dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(val_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(val_addr)))>>32));
+					}
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+				}
+							}
+					} else if (Z_MODE(val_addr) == IS_MEM_ZVAL) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				} else {
+			dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				}
+					} else if (Z_MODE(val_addr) == IS_REG) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(val_addr)-ZREG_XMM0));
+				}
+					} else {
+						ZEND_UNREACHABLE();
+					}
+				}
+				if (Z_MODE(var_addr) == IS_REG) {
+					if (ZREG_XMM0 != Z_REG(var_addr)) {
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1856, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				} else {
+			dasm_put(Dst, 1866, (Z_REG(var_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+				}
+					}
+				} else {
+					ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+				if (CAN_USE_AVX()) {
+			dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				} else {
+			dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+				}
+				}
+						}
+					} else if (!(val_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1716, (ZREG_FCARG1), (Z_REG(val_addr)), Z_OFFSET(val_addr));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1846, (ZREG_FCARG1), (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					}
+				}
+				if ((val_info & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+			      !(val_info & MAY_BE_GUARD) &&
+					has_concrete_type(val_info & MAY_BE_ANY)) {
+					if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+						if ((-1 & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (val_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+							zend_uchar type = concrete_type(val_info);
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 1639, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info), type);
+						}
+					}
+				} else {
+				ZEND_ASSERT(Z_MODE(val_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(val_addr)), Z_OFFSET(val_addr)+offsetof(zval,u1.type_info));
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval,u1.type_info));
+				}
+#line 15216 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	TRY_ADDREF val_info, ah, FCARG1a
+				if (val_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+					if (val_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			dasm_put(Dst, 2307);
+					}
+			dasm_put(Dst, 8250);
+				}
+#line 15217 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	return 1;
+}
+
+static int zend_jit_fetch_constant(dasm_State          **Dst,
+                                   const zend_op        *opline,
+                                   const zend_op_array  *op_array,
+                                   zend_ssa             *ssa,
+                                   const zend_ssa_op    *ssa_op,
+                                   zend_jit_addr         res_addr)
+{
+	zval *zv = RT_CONSTANT(opline, opline->op2) + 1;
+	zend_jit_addr const_addr = ZEND_ADDR_MEM_ZVAL(ZREG_R0, 0);
+	uint32_t res_info = RES_INFO();
+
+	//|	// c = CACHED_PTR(opline->extended_value);
+	//|	mov FCARG1a, EX->run_time_cache
+	//|	mov r0, aword [FCARG1a + opline->extended_value]
+	//|	// if (c != NULL)
+	//|	test r0, r0
+	//|	jz >9
+	dasm_put(Dst, 8368, Dt1(->run_time_cache), opline->extended_value);
+#line 15240 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (!zend_jit_is_persistent_constant(zv, opline->op1.num)) {
+		//|	// if (!IS_SPECIAL_CACHE_VAL(c))
+		//|	test r0, CACHE_SPECIAL
+		//|	jnz >9
+		dasm_put(Dst, 8384, CACHE_SPECIAL);
+#line 15244 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|8:
+	dasm_put(Dst, 4196);
+#line 15246 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	if ((res_info & MAY_BE_GUARD) && JIT_G(current_frame)) {
+		zend_jit_trace_stack *stack = JIT_G(current_frame)->stack;
+		uint32_t old_info = STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var));
+		int32_t exit_point;
+		const void *exit_addr = NULL;
+
+		SET_STACK_TYPE(stack, EX_VAR_TO_NUM(opline->result.var), IS_UNKNOWN, 1);
+		SET_STACK_REG(stack, EX_VAR_TO_NUM(opline->result.var), ZREG_ZVAL_COPY_GPR0);
+		exit_point = zend_jit_trace_get_exit_point(opline+1, 0);
+		SET_STACK_INFO(stack, EX_VAR_TO_NUM(opline->result.var), old_info);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+		res_info &= ~MAY_BE_GUARD;
+		ssa->var_info[ssa_op->result_def].type &= ~MAY_BE_GUARD;
+
+		zend_uchar type = concrete_type(res_info);
+
+		if (type < IS_STRING) {
+			//|	IF_NOT_ZVAL_TYPE const_addr, type, &exit_addr
+				ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 5790, (Z_REG(const_addr)), Z_OFFSET(const_addr)+offsetof(zval, u1.v.type), type, (ptrdiff_t)(exit_addr));
+#line 15268 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	GET_ZVAL_TYPE_INFO edx, const_addr
+				ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+#line 15270 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	IF_NOT_TYPE dl, type, &exit_addr
+			dasm_put(Dst, 7135, (Z_REG(const_addr)), Z_OFFSET(const_addr)+offsetof(zval,u1.type_info), type, (ptrdiff_t)(exit_addr));
+#line 15271 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	ZVAL_COPY_VALUE_V res_addr, -1, const_addr, res_info, ZREG_R0, ZREG_R1
+			if (res_info & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(const_addr) == IS_REG) {
+						if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(const_addr)) {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(const_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+						}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(const_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(const_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(const_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(const_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(const_addr)));
+						}
+				}
+			} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else if (Z_MODE(const_addr) == IS_REG) {
+				if (Z_REG(res_addr) != Z_REG(const_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(const_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(const_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(const_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(const_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(const_addr)));
+						}
+				}
+			} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else if (Z_MODE(const_addr) == IS_REG) {
+				if (ZREG_R1 != Z_REG(const_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (ZREG_R1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+					}
+				} else if ((res_info & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(const_addr) == IS_REG) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_REG(const_addr) != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(const_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(const_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(const_addr) != IS_REG || Z_REG(res_addr) != Z_REG(const_addr)) {
+				if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(const_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(const_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(const_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(const_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(const_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			}
+				} else if (Z_MODE(const_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(const_addr) != IS_REG || ZREG_XMM0 != Z_REG(const_addr)) {
+				if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(const_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(const_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(const_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(const_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(const_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			}
+				} else if (Z_MODE(const_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					}
+				} else if (!(res_info & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+			}
+#line 15273 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (type < IS_STRING) {
+			if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+				//|	SET_ZVAL_TYPE_INFO res_addr, type
+					ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+				dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+#line 15276 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			} else if (!zend_jit_store_var_if_necessary(Dst, opline->result.var, res_addr, res_info)) {
+				return 0;
+			}
+		} else {
+			//|	SET_ZVAL_TYPE_INFO res_addr, edx
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 15281 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	TRY_ADDREF res_info, dh, r1
+			dasm_put(Dst, 7022, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+				if (res_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+					if (res_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			dasm_put(Dst, 3985);
+					}
+			dasm_put(Dst, 2095);
+				}
+#line 15282 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else {
+		//|	// ZVAL_COPY_OR_DUP(EX_VAR(opline->result.var), &c->value); (no dup)
+		//|	ZVAL_COPY_VALUE res_addr, MAY_BE_ANY, const_addr, MAY_BE_ANY, ZREG_R0, ZREG_R1
+			if (MAY_BE_ANY & (MAY_BE_ANY-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE))) {
+				if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_LONG) {
+					if (Z_MODE(const_addr) == IS_REG) {
+						if (Z_MODE(res_addr) != IS_REG || Z_REG(res_addr) != Z_REG(const_addr)) {
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (Z_REG(const_addr)), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+						}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(const_addr)) == 0) {
+		dasm_put(Dst, 1694, (Z_REG(res_addr)), (Z_REG(res_addr)));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(const_addr)))) {
+		dasm_put(Dst, 1702, (Z_REG(res_addr)), (unsigned int)(Z_LVAL_P(Z_ZV(const_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(const_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (Z_REG(res_addr)), Z_LVAL_P(Z_ZV(const_addr)));
+						}
+				}
+			} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (Z_REG(res_addr)), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else if (Z_MODE(const_addr) == IS_REG) {
+				if (Z_REG(res_addr) != Z_REG(const_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (Z_REG(res_addr)));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+					} else {
+			if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+				if (Z_LVAL_P(Z_ZV(const_addr)) == 0) {
+		dasm_put(Dst, 1694, (ZREG_R1), (ZREG_R1));
+				} else {
+						if (!IS_SIGNED_32BIT(Z_LVAL_P(Z_ZV(const_addr)))) {
+		dasm_put(Dst, 1702, (ZREG_R1), (unsigned int)(Z_LVAL_P(Z_ZV(const_addr))), (unsigned int)((Z_LVAL_P(Z_ZV(const_addr)))>>32));
+						} else {
+		dasm_put(Dst, 1709, (ZREG_R1), Z_LVAL_P(Z_ZV(const_addr)));
+						}
+				}
+			} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else if (Z_MODE(const_addr) == IS_REG) {
+				if (ZREG_R1 != Z_REG(const_addr)) {
+		dasm_put(Dst, 1726, (Z_REG(const_addr)), (ZREG_R1));
+				}
+			} else {
+				ZEND_UNREACHABLE();
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+		dasm_put(Dst, 1726, (ZREG_R1), (Z_REG(res_addr)));
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+					}
+				} else if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_GUARD)) == MAY_BE_DOUBLE) {
+					if (Z_MODE(const_addr) == IS_REG) {
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (Z_REG(const_addr) != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (Z_REG(const_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (Z_REG(const_addr)-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					} else if (Z_MODE(res_addr) == IS_REG) {
+			if (Z_MODE(const_addr) != IS_REG || Z_REG(res_addr) != Z_REG(const_addr)) {
+				if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(const_addr));
+			} else {
+		dasm_put(Dst, 1911, (Z_REG(res_addr)-ZREG_XMM0), Z_ZV(const_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(const_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(const_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(const_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (Z_REG(res_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (Z_REG(res_addr)-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else {
+		dasm_put(Dst, 1951, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			}
+				} else if (Z_MODE(const_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+					} else {
+			if (Z_MODE(const_addr) != IS_REG || ZREG_XMM0 != Z_REG(const_addr)) {
+				if (Z_MODE(const_addr) == IS_CONST_ZVAL) {
+						if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1901, (ZREG_XMM0-ZREG_XMM0), Z_ZV(const_addr));
+			} else {
+		dasm_put(Dst, 1911, (ZREG_XMM0-ZREG_XMM0), Z_ZV(const_addr));
+			}
+						} else {
+				if (IS_SIGNED_32BIT(Z_ZV(const_addr))) {
+		dasm_put(Dst, 49, ((ptrdiff_t)Z_ZV(const_addr)));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)Z_ZV(const_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(const_addr)))>>32));
+				}
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1922, (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1930, (ZREG_XMM0-ZREG_XMM0));
+			}
+						}
+				} else if (Z_MODE(const_addr) == IS_MEM_ZVAL) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1939, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			} else {
+		dasm_put(Dst, 1951, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			}
+				} else if (Z_MODE(const_addr) == IS_REG) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (ZREG_XMM0-ZREG_XMM0), (Z_REG(const_addr)-ZREG_XMM0));
+			}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+			}
+			if (Z_MODE(res_addr) == IS_REG) {
+				if (ZREG_XMM0 != Z_REG(res_addr)) {
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1856, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			} else {
+		dasm_put(Dst, 1866, (Z_REG(res_addr)-ZREG_XMM0), (ZREG_XMM0-ZREG_XMM0));
+			}
+				}
+			} else {
+				ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+			if (CAN_USE_AVX()) {
+		dasm_put(Dst, 1875, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			} else {
+		dasm_put(Dst, 1888, (ZREG_XMM0-ZREG_XMM0), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			}
+			}
+					}
+				} else if (!(MAY_BE_ANY & (MAY_BE_DOUBLE|MAY_BE_GUARD))) {
+			ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				} else {
+			ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1716, (ZREG_R1), (Z_REG(const_addr)), Z_OFFSET(const_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1846, (ZREG_R1), (Z_REG(res_addr)), Z_OFFSET(res_addr));
+				}
+			}
+			if ((MAY_BE_ANY & (MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)) &&
+		      !(MAY_BE_ANY & MAY_BE_GUARD) &&
+				has_concrete_type(MAY_BE_ANY & MAY_BE_ANY)) {
+				if (Z_MODE(res_addr) == IS_MEM_ZVAL) {
+					if ((MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD)) != (MAY_BE_ANY & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_GUARD))) {
+						zend_uchar type = concrete_type(MAY_BE_ANY);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), type);
+					}
+				}
+			} else {
+			ZEND_ASSERT(Z_MODE(const_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2101, (ZREG_R0), (Z_REG(const_addr)), Z_OFFSET(const_addr)+offsetof(zval,u1.type_info));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 2111, (ZREG_R0), (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+			}
+#line 15286 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	TRY_ADDREF MAY_BE_ANY, ah, r1
+			if (MAY_BE_ANY & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+				if (MAY_BE_ANY & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		dasm_put(Dst, 2307);
+				}
+		dasm_put(Dst, 2095);
+			}
+#line 15287 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	//|.cold_code
+	dasm_put(Dst, 445);
+#line 15290 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|9:
+	//|	// SAVE_OPLINE();
+	//|	SET_EX_OPLINE opline, r0
+	dasm_put(Dst, 4090);
+		if (opline == last_valid_opline) {
+			zend_jit_use_last_valid_opline();
+		if (GCC_GLOBAL_REGS) {
+	dasm_put(Dst, 8, Dt1(->opline));
+		}
+		} else {
+			if (IS_SIGNED_32BIT(opline)) {
+	dasm_put(Dst, 291, Dt1(->opline), ((ptrdiff_t)opline));
+			} else {
+	dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)opline)), (unsigned int)((((ptrdiff_t)opline))>>32), Dt1(->opline));
+			}
+			if (!GCC_GLOBAL_REGS) {
+				zend_jit_reset_last_valid_opline();
+			}
+		}
+#line 15293 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// zend_quick_get_constant(RT_CONSTANT(opline, opline->op2) + 1, opline->op1.num OPLINE_CC EXECUTE_DATA_CC);
+	//|	LOAD_ADDR FCARG1a, zv
+			if (IS_SIGNED_32BIT(zv)) {
+	dasm_put(Dst, 607, ((ptrdiff_t)zv));
+			} else {
+	dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)zv)), (unsigned int)((((ptrdiff_t)zv))>>32));
+			}
+#line 15295 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	mov FCARG2a, opline->op1.num
+	//|	EXT_CALL zend_jit_get_constant, r0
+	dasm_put(Dst, 612, opline->op1.num);
+			if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_get_constant)) {
+	dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_get_constant));
+			} else {
+			if (IS_SIGNED_32BIT(zend_jit_get_constant)) {
+	dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_get_constant));
+			} else {
+	dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_get_constant)), (unsigned int)((((ptrdiff_t)zend_jit_get_constant))>>32));
+			}
+	dasm_put(Dst, 59);
+			}
+#line 15297 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	//|	// ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
+	//|	test r0, r0
+	//|	jnz <8
+	//|	jmp ->exception_handler
+	//|.code
+	dasm_put(Dst, 8392);
+#line 15302 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static int zend_jit_in_array(dasm_State **Dst, const zend_op *opline, uint32_t op1_info, zend_jit_addr op1_addr,  zend_uchar smart_branch_opcode, uint32_t target_label, uint32_t target_label2, const void *exit_addr)
+{
+	HashTable *ht = Z_ARRVAL_P(RT_CONSTANT(opline, opline->op2));
+	zend_jit_addr res_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FP, opline->result.var);
+
+	ZEND_ASSERT(opline->op1_type != IS_VAR && opline->op1_type != IS_TMP_VAR);
+	ZEND_ASSERT((op1_info & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF)) == MAY_BE_STRING);
+
+	//|	// result = zend_hash_find_ex(ht, Z_STR_P(op1), OP1_TYPE == IS_CONST);
+	//|	LOAD_ADDR FCARG1a, ht
+			if (IS_SIGNED_32BIT(ht)) {
+	dasm_put(Dst, 607, ((ptrdiff_t)ht));
+			} else {
+	dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)ht)), (unsigned int)((((ptrdiff_t)ht))>>32));
+			}
+#line 15316 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (opline->op1_type != IS_CONST) {
+		//|	GET_ZVAL_PTR FCARG2a, op1_addr
+			ZEND_ASSERT(Z_MODE(op1_addr) == IS_MEM_ZVAL);
+#line 15318 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_hash_find, r0
+		dasm_put(Dst, 8092, (Z_REG(op1_addr)), Z_OFFSET(op1_addr));
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find));
+				} else {
+				if (IS_SIGNED_32BIT(zend_hash_find)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find)), (unsigned int)((((ptrdiff_t)zend_hash_find))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 15319 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		zend_string *str = Z_STR_P(RT_CONSTANT(opline, opline->op1));
+		//|	LOAD_ADDR FCARG2a, str
+				if (IS_SIGNED_32BIT(str)) {
+		dasm_put(Dst, 612, ((ptrdiff_t)str));
+				} else {
+		dasm_put(Dst, 617, (unsigned int)(((ptrdiff_t)str)), (unsigned int)((((ptrdiff_t)str))>>32));
+				}
+#line 15322 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	EXT_CALL zend_hash_find_known_hash, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_hash_find_known_hash)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_hash_find_known_hash));
+				} else {
+				if (IS_SIGNED_32BIT(zend_hash_find_known_hash)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_hash_find_known_hash));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_hash_find_known_hash)), (unsigned int)((((ptrdiff_t)zend_hash_find_known_hash))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 15323 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	//|	test r0, r0
+	dasm_put(Dst, 3565);
+#line 15325 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	if (exit_addr) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			//|	jz &exit_addr
+			dasm_put(Dst, 1739, (ptrdiff_t)(exit_addr));
+#line 15328 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			//|	jnz &exit_addr
+			dasm_put(Dst, 1570, (ptrdiff_t)(exit_addr));
+#line 15330 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	} else if (smart_branch_opcode) {
+		if (smart_branch_opcode == ZEND_JMPZ) {
+			//|	jz =>target_label
+			dasm_put(Dst, 4570, target_label);
+#line 15334 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (smart_branch_opcode == ZEND_JMPNZ) {
+			//|	jnz =>target_label
+			dasm_put(Dst, 1831, target_label);
+#line 15336 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if (smart_branch_opcode == ZEND_JMPZNZ) {
+			//|	jz =>target_label
+			//|	jmp =>target_label2
+			dasm_put(Dst, 6717, target_label, target_label2);
+#line 15339 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else {
+			ZEND_UNREACHABLE();
+		}
+	} else {
+		//|	setnz al
+		//|	movzx eax, al
+		//|	lea eax, [eax + IS_FALSE]
+		//|	SET_ZVAL_TYPE_INFO res_addr, eax
+		dasm_put(Dst, 8405, IS_FALSE);
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 4562, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info));
+#line 15347 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static int zend_jit_rope(dasm_State **Dst, const zend_op *opline, uint32_t op2_info)
+{
+	uint32_t offset;
+
+	offset = (opline->opcode == ZEND_ROPE_INIT) ?
+		opline->result.var :
+		opline->op1.var + opline->extended_value * sizeof(zend_string*);
+
+	if (opline->op2_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, opline->op2);
+		zend_string *str;
+
+		ZEND_ASSERT(Z_TYPE_P(zv) == IS_STRING);
+		str = Z_STR_P(zv);
+		//|	ADDR_STORE aword [FP + offset], str, r0
+				if (IS_SIGNED_32BIT(str)) {
+		dasm_put(Dst, 291, offset, ((ptrdiff_t)str));
+				} else {
+		dasm_put(Dst, 482, (unsigned int)(((ptrdiff_t)str)), (unsigned int)((((ptrdiff_t)str))>>32), offset);
+				}
+#line 15367 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		zend_jit_addr op2_addr = OP2_ADDR();
+
+		ZEND_ASSERT((op2_info & (MAY_BE_UNDEF|MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_STRING);
+
+		//|	GET_ZVAL_PTR r1, op2_addr
+			ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 15373 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	mov aword [FP + offset], r1
+		dasm_put(Dst, 8415, (Z_REG(op2_addr)), Z_OFFSET(op2_addr), offset);
+#line 15374 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		if (opline->op2_type == IS_CV) {
+			//|	GET_ZVAL_TYPE_INFO eax, op2_addr
+				ZEND_ASSERT(Z_MODE(op2_addr) == IS_MEM_ZVAL);
+#line 15376 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+			//|	TRY_ADDREF op2_info, ah, r1
+			dasm_put(Dst, 8427, (Z_REG(op2_addr)), Z_OFFSET(op2_addr)+offsetof(zval,u1.type_info));
+				if (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)) {
+					if (op2_info & (MAY_BE_ANY-(MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+			dasm_put(Dst, 2307);
+					}
+			dasm_put(Dst, 2095);
+				}
+#line 15377 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+
+	if (opline->opcode == ZEND_ROPE_END) {
+		zend_jit_addr res_addr = RES_ADDR();
+
+		//|	lea FCARG1a, [FP + opline->op1.var]
+		//|	mov FCARG2d, opline->extended_value
+		//|	EXT_CALL zend_jit_rope_end, r0
+		dasm_put(Dst, 8435, opline->op1.var, opline->extended_value);
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_rope_end)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_rope_end));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_rope_end)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_rope_end));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_rope_end)), (unsigned int)((((ptrdiff_t)zend_jit_rope_end))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 15386 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_PTR res_addr, r0
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+#line 15387 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	SET_ZVAL_TYPE_INFO res_addr, IS_STRING_EX
+		dasm_put(Dst, 2208, (Z_REG(res_addr)), Z_OFFSET(res_addr));
+			ZEND_ASSERT(Z_MODE(res_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 1639, (Z_REG(res_addr)), Z_OFFSET(res_addr)+offsetof(zval,u1.type_info), IS_STRING_EX);
+#line 15388 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+
+	return 1;
+}
+
+static bool zend_jit_noref_guard(dasm_State **Dst, const zend_op *opline, zend_jit_addr var_addr)
+{
+	int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+	const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+	if (!exit_addr) {
+		return 0;
+	}
+	//|	IF_ZVAL_TYPE var_addr, IS_REFERENCE, &exit_addr
+		ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+	dasm_put(Dst, 4035, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_REFERENCE, (ptrdiff_t)(exit_addr));
+#line 15402 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+	return 1;
+}
+
+static bool zend_jit_fetch_reference(dasm_State **Dst, const zend_op *opline, uint8_t var_type, uint32_t *var_info_ptr, zend_jit_addr *var_addr_ptr, bool add_ref_guard, bool add_type_guard)
+{
+	zend_jit_addr var_addr = *var_addr_ptr;
+	uint32_t var_info = *var_info_ptr;
+	const void *exit_addr = NULL;
+
+	if (add_ref_guard || add_type_guard) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+		if (!exit_addr) {
+			return 0;
+		}
+	}
+
+	if (add_ref_guard) {
+		//|	IF_NOT_ZVAL_TYPE var_addr, IS_REFERENCE, &exit_addr
+			ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 5790, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_REFERENCE, (ptrdiff_t)(exit_addr));
+#line 15423 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	}
+	if (opline->opcode == ZEND_INIT_METHOD_CALL && opline->op1_type == IS_VAR) {
+		/* Hack: Convert reference to regular value to simplify JIT code for INIT_METHOD_CALL */
+		if (Z_REG(var_addr) != ZREG_FCARG1 || Z_OFFSET(var_addr) != 0) {
+			//|	LOAD_ZVAL_ADDR FCARG1a, var_addr
+				if (Z_MODE(var_addr) == IS_CONST_ZVAL) {
+					if (IS_SIGNED_32BIT(Z_ZV(var_addr))) {
+			dasm_put(Dst, 607, ((ptrdiff_t)Z_ZV(var_addr)));
+					} else {
+			dasm_put(Dst, 800, (unsigned int)(((ptrdiff_t)Z_ZV(var_addr))), (unsigned int)((((ptrdiff_t)Z_ZV(var_addr)))>>32));
+					}
+				} else if (Z_MODE(var_addr) == IS_MEM_ZVAL) {
+					if (Z_OFFSET(var_addr)) {
+			dasm_put(Dst, 2240, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+					} else {
+			dasm_put(Dst, 2248, (Z_REG(var_addr)));
+					}
+				} else {
+					ZEND_UNREACHABLE();
+				}
+#line 15428 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+		//|	EXT_CALL zend_jit_unref_helper, r0
+				if (IS_32BIT(dasm_end) && IS_32BIT(zend_jit_unref_helper)) {
+		dasm_put(Dst, 46, (ptrdiff_t)(zend_jit_unref_helper));
+				} else {
+				if (IS_SIGNED_32BIT(zend_jit_unref_helper)) {
+		dasm_put(Dst, 49, ((ptrdiff_t)zend_jit_unref_helper));
+				} else {
+		dasm_put(Dst, 54, (unsigned int)(((ptrdiff_t)zend_jit_unref_helper)), (unsigned int)((((ptrdiff_t)zend_jit_unref_helper))>>32));
+				}
+		dasm_put(Dst, 59);
+				}
+#line 15430 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		//|	GET_ZVAL_PTR FCARG1a, var_addr
+			ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+#line 15432 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, offsetof(zend_reference, val));
+		*var_addr_ptr = var_addr;
+	}
+
+	if (var_type != IS_UNKNOWN) {
+		var_type &= ~(IS_TRACE_REFERENCE|IS_TRACE_INDIRECT|IS_TRACE_PACKED);
+	}
+	if (add_type_guard
+	 && var_type != IS_UNKNOWN
+	 && (var_info & (MAY_BE_ANY|MAY_BE_UNDEF)) != (1 << var_type)) {
+		//|	IF_NOT_ZVAL_TYPE var_addr, var_type, &exit_addr
+			ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 5790, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), var_type, (ptrdiff_t)(exit_addr));
+#line 15443 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		ZEND_ASSERT(var_info & (1 << var_type));
+		if (var_type < IS_STRING) {
+			var_info = (1 << var_type);
+		} else if (var_type != IS_ARRAY) {
+			var_info = (1 << var_type) | (var_info & (MAY_BE_RC1|MAY_BE_RCN));
+		} else {
+			var_info = MAY_BE_ARRAY | (var_info & (MAY_BE_ARRAY_OF_ANY|MAY_BE_ARRAY_OF_REF|MAY_BE_ARRAY_KEY_ANY|MAY_BE_RC1|MAY_BE_RCN));
+		}
+
+		*var_info_ptr = var_info;
+	} else {
+		var_info &= ~MAY_BE_REF;
+		*var_info_ptr = var_info;
+	}
+
+	return 1;
+}
+
+static bool zend_jit_fetch_indirect_var(dasm_State **Dst, const zend_op *opline, uint8_t var_type, uint32_t *var_info_ptr, zend_jit_addr *var_addr_ptr, bool add_indirect_guard)
+{
+	zend_jit_addr var_addr = *var_addr_ptr;
+	uint32_t var_info = *var_info_ptr;
+	int32_t exit_point;
+	const void *exit_addr;
+
+	if (add_indirect_guard) {
+		int32_t exit_point = zend_jit_trace_get_exit_point(opline, 0);
+		const void *exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+		if (!exit_addr) {
+			return 0;
+		}
+		//|	IF_NOT_ZVAL_TYPE var_addr, IS_INDIRECT, &exit_addr
+			ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+#line 15477 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		//|	GET_ZVAL_PTR FCARG1a, var_addr
+		dasm_put(Dst, 5790, (Z_REG(var_addr)), Z_OFFSET(var_addr)+offsetof(zval, u1.v.type), IS_INDIRECT, (ptrdiff_t)(exit_addr));
+			ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+		dasm_put(Dst, 3964, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+#line 15478 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+	} else {
+		/* May be already loaded into FCARG1a or RAX by previus FETCH_OBJ_W/DIM_W */
+		if (opline->op1_type != IS_VAR ||
+				(opline-1)->result_type != IS_VAR  ||
+				(opline-1)->result.var != opline->op1.var ||
+				(opline-1)->op2_type == IS_VAR ||
+				(opline-1)->op2_type == IS_TMP_VAR) {
+			//|	GET_ZVAL_PTR FCARG1a, var_addr
+				ZEND_ASSERT(Z_MODE(var_addr) == IS_MEM_ZVAL);
+			dasm_put(Dst, 3964, (Z_REG(var_addr)), Z_OFFSET(var_addr));
+#line 15486 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		} else if ((opline-1)->opcode == ZEND_FETCH_DIM_W || (opline-1)->opcode == ZEND_FETCH_DIM_RW) {
+			//|	mov FCARG1a, r0
+			dasm_put(Dst, 2144);
+#line 15488 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+		}
+	}
+	*var_info_ptr &= ~MAY_BE_INDIRECT;
+	var_addr = ZEND_ADDR_MEM_ZVAL(ZREG_FCARG1, 0);
+	*var_addr_ptr = var_addr;
+
+	if (var_type != IS_UNKNOWN) {
+		var_type &= ~(IS_TRACE_INDIRECT|IS_TRACE_PACKED);
+	}
+	if (!(var_type & IS_TRACE_REFERENCE)
+	 && var_type != IS_UNKNOWN
+	 && (var_info & (MAY_BE_ANY|MAY_BE_UNDEF)) != (1 << var_type)) {
+		exit_point = zend_jit_trace_get_exit_point(opline, 0);
+		exit_addr = zend_jit_trace_get_exit_addr(exit_point);
+
+		if (!exit_addr) {
+			return 0;
+		}
+
+		//|	IF_NOT_Z_TYPE FCARG1a, var_type, &exit_addr
+		dasm_put(Dst, 8442, offsetof(zval, u1.v.type), var_type, (ptrdiff_t)(exit_addr));
+#line 15508 "/home/luxe/Desktop/php-src/ext/opcache/jit/zend_jit_x86.dasc"
+
+		//var_info = zend_jit_trace_type_to_info_ex(var_type, var_info);
+		ZEND_ASSERT(var_info & (1 << var_type));
+		if (var_type < IS_STRING) {
+			var_info = (1 << var_type);
+		} else if (var_type != IS_ARRAY) {
+			var_info = (1 << var_type) | (var_info & (MAY_BE_RC1|MAY_BE_RCN));
+		} else {
+			var_info = MAY_BE_ARRAY | (var_info & (MAY_BE_ARRAY_OF_ANY|MAY_BE_ARRAY_OF_REF|MAY_BE_ARRAY_KEY_ANY|MAY_BE_RC1|MAY_BE_RCN));
+		}
+
+		*var_info_ptr = var_info;
+	}
+
+	return 1;
+}
+
+static bool zend_jit_may_reuse_reg(const zend_op *opline, const zend_ssa_op *ssa_op, zend_ssa *ssa, int def_var, int use_var)
+{
+	if ((ssa->var_info[def_var].type & ~MAY_BE_GUARD) != (ssa->var_info[use_var].type & ~MAY_BE_GUARD)) {
+		return 0;
+	}
+
+	switch (opline->opcode) {
+		case ZEND_QM_ASSIGN:
+		case ZEND_SEND_VAR:
+		case ZEND_ASSIGN:
+		case ZEND_PRE_INC:
+		case ZEND_PRE_DEC:
+		case ZEND_POST_INC:
+		case ZEND_POST_DEC:
+			return 1;
+		case ZEND_ADD:
+		case ZEND_SUB:
+		case ZEND_MUL:
+		case ZEND_BW_OR:
+		case ZEND_BW_AND:
+		case ZEND_BW_XOR:
+			if (def_var == ssa_op->result_def &&
+			    use_var == ssa_op->op1_use) {
+				return 1;
+			}
+			break;
+		default:
+			break;
+	}
+	return 0;
+}
+
+static bool zend_jit_opline_supports_reg(const zend_op_array *op_array, zend_ssa *ssa, const zend_op *opline, const zend_ssa_op *ssa_op, zend_jit_trace_rec *trace)
+{
+	uint32_t op1_info, op2_info;
+
+	switch (opline->opcode) {
+		case ZEND_QM_ASSIGN:
+		case ZEND_SEND_VAR:
+		case ZEND_SEND_VAL:
+		case ZEND_SEND_VAL_EX:
+		case ZEND_IS_SMALLER:
+		case ZEND_IS_SMALLER_OR_EQUAL:
+		case ZEND_IS_EQUAL:
+		case ZEND_IS_NOT_EQUAL:
+		case ZEND_IS_IDENTICAL:
+		case ZEND_IS_NOT_IDENTICAL:
+		case ZEND_CASE:
+			return 1;
+		case ZEND_RETURN:
+			return (op_array->type != ZEND_EVAL_CODE && op_array->function_name);
+		case ZEND_ASSIGN:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			return
+				opline->op1_type == IS_CV &&
+				!(op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_RESOURCE|MAY_BE_OBJECT|MAY_BE_REF)) &&
+				!(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)));
+		case ZEND_ADD:
+		case ZEND_SUB:
+		case ZEND_MUL:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			return !((op1_info | op2_info) & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF) - (MAY_BE_LONG|MAY_BE_DOUBLE)));
+		case ZEND_BW_OR:
+		case ZEND_BW_AND:
+		case ZEND_BW_XOR:
+		case ZEND_SL:
+		case ZEND_SR:
+		case ZEND_MOD:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			return !((op1_info | op2_info) & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF) - MAY_BE_LONG));
+		case ZEND_PRE_INC:
+		case ZEND_PRE_DEC:
+		case ZEND_POST_INC:
+		case ZEND_POST_DEC:
+			op1_info = OP1_INFO();
+			op2_info = OP1_DEF_INFO();
+			return opline->op1_type == IS_CV
+				&& !(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF) - MAY_BE_LONG))
+				&& (op2_info & MAY_BE_LONG);
+		case ZEND_STRLEN:
+			op1_info = OP1_INFO();
+			return (opline->op1_type & (IS_CV|IS_CONST))
+				&& (op1_info & (MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)) == MAY_BE_STRING;
+		case ZEND_COUNT:
+			op1_info = OP1_INFO();
+			return (opline->op1_type & (IS_CV|IS_CONST))
+				&& (op1_info & (MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)) == MAY_BE_ARRAY;
+		case ZEND_BOOL:
+		case ZEND_BOOL_NOT:
+		case ZEND_JMPZ:
+		case ZEND_JMPNZ:
+		case ZEND_JMPZNZ:
+		case ZEND_JMPZ_EX:
+		case ZEND_JMPNZ_EX:
+			return 1;
+		case ZEND_FETCH_CONSTANT:
+			return 1;
+		case ZEND_FETCH_DIM_R:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (trace
+			 && trace->op1_type != IS_UNKNOWN
+			 && (trace->op1_type & ~(IS_TRACE_REFERENCE|IS_TRACE_INDIRECT|IS_TRACE_PACKED)) == IS_ARRAY) {
+				op1_info &= ~((MAY_BE_ANY|MAY_BE_UNDEF) - MAY_BE_ARRAY);
+			}
+			return ((op1_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_ARRAY) &&
+				(!(opline->op1_type & (IS_TMP_VAR|IS_VAR)) || !(op1_info & MAY_BE_RC1)) &&
+					(((op2_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_LONG) ||
+					 (((op2_info & (MAY_BE_ANY|MAY_BE_UNDEF)) == MAY_BE_STRING) &&
+						 (!(opline->op2_type & (IS_TMP_VAR|IS_VAR)) || !(op2_info & MAY_BE_RC1))));
+	}
+	return 0;
+}
+
+static bool zend_jit_var_supports_reg(zend_ssa *ssa, int var)
+{
+	if (ssa->vars[var].no_val) {
+		/* we don't need the value */
+		return 0;
+	}
+
+	if (!(JIT_G(opt_flags) & ZEND_JIT_REG_ALLOC_GLOBAL)) {
+		/* Disable global register allocation,
+		 * register allocation for SSA variables connected through Phi functions
+		 */
+		if (ssa->vars[var].definition_phi) {
+			return 0;
+		}
+		if (ssa->vars[var].phi_use_chain) {
+			zend_ssa_phi *phi = ssa->vars[var].phi_use_chain;
+			do {
+				if (!ssa->vars[phi->ssa_var].no_val) {
+					return 0;
+				}
+				phi = zend_ssa_next_use_phi(ssa, var, phi);
+			} while (phi);
+		}
+	}
+
+	if (((ssa->var_info[var].type & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF)) != MAY_BE_DOUBLE) &&
+	    ((ssa->var_info[var].type & (MAY_BE_ANY|MAY_BE_UNDEF|MAY_BE_REF)) != MAY_BE_LONG)) {
+	    /* bad type */
+		return 0;
+	}
+
+	return 1;
+}
+
+static bool zend_jit_may_be_in_reg(const zend_op_array *op_array, zend_ssa *ssa, int var)
+{
+	if (!zend_jit_var_supports_reg(ssa, var)) {
+		return 0;
+	}
+
+	if (ssa->vars[var].definition >= 0) {
+		uint32_t def = ssa->vars[var].definition;
+		if (!zend_jit_opline_supports_reg(op_array, ssa, op_array->opcodes + def, ssa->ops + def, NULL)) {
+			return 0;
+		}
+	}
+
+	if (ssa->vars[var].use_chain >= 0) {
+		int use = ssa->vars[var].use_chain;
+
+		do {
+			if (!zend_ssa_is_no_val_use(op_array->opcodes + use, ssa->ops + use, var) &&
+			    !zend_jit_opline_supports_reg(op_array, ssa, op_array->opcodes + use, ssa->ops + use, NULL)) {
+				return 0;
+			}
+			use = zend_ssa_next_use(ssa->ops, var, use);
+		} while (use >= 0);
+	}
+
+	return 1;
+}
+
+static bool zend_needs_extra_reg_for_const(const zend_op *opline, zend_uchar op_type, znode_op op)
+{
+//|.if X64
+	if (op_type == IS_CONST) {
+		zval *zv = RT_CONSTANT(opline, op);
+		if (Z_TYPE_P(zv) == IS_DOUBLE && Z_DVAL_P(zv) != 0 && !IS_SIGNED_32BIT(zv)) {
+			return 1;
+		} else if (Z_TYPE_P(zv) == IS_LONG && !IS_SIGNED_32BIT(Z_LVAL_P(zv))) {
+			return 1;
+		}
+	}
+//|.endif
+	return 0;
+}
+
+static zend_regset zend_jit_get_def_scratch_regset(const zend_op *opline, const zend_ssa_op *ssa_op, const zend_op_array *op_array, zend_ssa *ssa, int current_var, bool last_use)
+{
+	uint32_t op1_info, op2_info;
+
+	switch (opline->opcode) {
+		case ZEND_FETCH_DIM_R:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (((opline->op1_type & (IS_TMP_VAR|IS_VAR)) &&
+			     (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) ||
+			    ((opline->op2_type & (IS_TMP_VAR|IS_VAR)) &&
+			     (op2_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE)))) {
+				return ZEND_REGSET(ZREG_FCARG1);
+			}
+			break;
+		default:
+			break;
+	}
+
+	return ZEND_REGSET_EMPTY;
+}
+
+static zend_regset zend_jit_get_scratch_regset(const zend_op *opline, const zend_ssa_op *ssa_op, const zend_op_array *op_array, zend_ssa *ssa, int current_var, bool last_use)
+{
+	uint32_t op1_info, op2_info, res_info;
+	zend_regset regset = ZEND_REGSET_SCRATCH;
+
+	switch (opline->opcode) {
+		case ZEND_NOP:
+		case ZEND_OP_DATA:
+		case ZEND_JMP:
+		case ZEND_RETURN:
+			regset = ZEND_REGSET_EMPTY;
+			break;
+		case ZEND_QM_ASSIGN:
+			if (ssa_op->op1_def == current_var ||
+			    ssa_op->result_def == current_var) {
+				regset = ZEND_REGSET_EMPTY;
+				break;
+			}
+			/* break missing intentionally */
+		case ZEND_SEND_VAL:
+		case ZEND_SEND_VAL_EX:
+			if (ssa_op->op1_use == current_var) {
+				regset = ZEND_REGSET(ZREG_R0);
+				break;
+			}
+			op1_info = OP1_INFO();
+			if (!(op1_info & MAY_BE_UNDEF)) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_DOUBLE) {
+					regset = ZEND_REGSET(ZREG_XMM0);
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_LONG) {
+					regset = ZEND_REGSET(ZREG_R0);
+				} else {
+					regset = ZEND_REGSET_UNION(ZEND_REGSET(ZREG_R0), ZEND_REGSET(ZREG_R2));
+				}
+			}
+			break;
+		case ZEND_SEND_VAR:
+			if (ssa_op->op1_use == current_var ||
+			    ssa_op->op1_def == current_var) {
+				regset = ZEND_REGSET_EMPTY;
+				break;
+			}
+			op1_info = OP1_INFO();
+			if (!(op1_info & MAY_BE_UNDEF)) {
+				if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_DOUBLE) {
+					regset = ZEND_REGSET(ZREG_XMM0);
+				} else if ((op1_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_LONG) {
+				} else {
+					regset = ZEND_REGSET_UNION(ZEND_REGSET(ZREG_R0), ZEND_REGSET(ZREG_R2));
+					if (op1_info & MAY_BE_REF) {
+						ZEND_REGSET_INCL(regset, ZREG_R1);
+					}
+				}
+			}
+			break;
+		case ZEND_ASSIGN:
+			if (ssa_op->op2_use == current_var ||
+			    ssa_op->op2_def == current_var ||
+			    ssa_op->op1_def == current_var ||
+			    ssa_op->result_def == current_var) {
+				regset = ZEND_REGSET_EMPTY;
+				break;
+			}
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (opline->op1_type == IS_CV
+			 && !(op2_info & MAY_BE_UNDEF)
+			 && !(op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF))) {
+				if ((op2_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_DOUBLE) {
+					regset = ZEND_REGSET(ZREG_XMM0);
+				} else if ((op2_info & (MAY_BE_ANY|MAY_BE_REF)) == MAY_BE_LONG) {
+					regset = ZEND_REGSET(ZREG_R0);
+				} else {
+					regset = ZEND_REGSET_UNION(ZEND_REGSET(ZREG_R0), ZEND_REGSET(ZREG_R2));
+				}
+			}
+			break;
+		case ZEND_PRE_INC:
+		case ZEND_PRE_DEC:
+		case ZEND_POST_INC:
+		case ZEND_POST_DEC:
+			if (ssa_op->op1_use == current_var ||
+			    ssa_op->op1_def == current_var ||
+			    ssa_op->result_def == current_var) {
+				regset = ZEND_REGSET_EMPTY;
+				break;
+			}
+			op1_info = OP1_INFO();
+			if (opline->op1_type == IS_CV
+			 && (op1_info & MAY_BE_LONG)
+			 && !(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+				regset = ZEND_REGSET_EMPTY;
+				if (op1_info & MAY_BE_DOUBLE) {
+					regset = ZEND_REGSET(ZREG_XMM0);
+				}
+			}
+			break;
+		case ZEND_ADD:
+		case ZEND_SUB:
+		case ZEND_MUL:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) &&
+			    !(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+
+				regset = ZEND_REGSET_EMPTY;
+				if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_LONG)) {
+					if (ssa_op->result_def != current_var &&
+					    (ssa_op->op1_use != current_var || !last_use)) {
+						ZEND_REGSET_INCL(regset, ZREG_R0);
+					}
+					res_info = OP1_INFO();
+					if (res_info & MAY_BE_DOUBLE) {
+						ZEND_REGSET_INCL(regset, ZREG_XMM0);
+						ZEND_REGSET_INCL(regset, ZREG_XMM1);
+					}
+				}
+				if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_DOUBLE)) {
+					if (ssa_op->result_def != current_var) {
+						ZEND_REGSET_INCL(regset, ZREG_XMM0);
+					}
+				}
+				if ((op1_info & MAY_BE_DOUBLE) && (op2_info & MAY_BE_LONG)) {
+					if (zend_is_commutative(opline->opcode)) {
+						if (ssa_op->result_def != current_var) {
+							ZEND_REGSET_INCL(regset, ZREG_XMM0);
+						}
+					} else {
+						ZEND_REGSET_INCL(regset, ZREG_XMM0);
+						if (ssa_op->result_def != current_var &&
+						    (ssa_op->op1_use != current_var || !last_use)) {
+							ZEND_REGSET_INCL(regset, ZREG_XMM1);
+						}
+					}
+				}
+				if ((op1_info & MAY_BE_DOUBLE) && (op2_info & MAY_BE_DOUBLE)) {
+					if (ssa_op->result_def != current_var &&
+					    (ssa_op->op1_use != current_var || !last_use) &&
+					    (!zend_is_commutative(opline->opcode) || ssa_op->op2_use != current_var || !last_use)) {
+						ZEND_REGSET_INCL(regset, ZREG_XMM0);
+					}
+				}
+				if (zend_needs_extra_reg_for_const(opline, opline->op1_type, opline->op1) ||
+				    zend_needs_extra_reg_for_const(opline, opline->op2_type, opline->op2)) {
+					if (!ZEND_REGSET_IN(regset, ZREG_R0)) {
+						ZEND_REGSET_INCL(regset, ZREG_R0);
+					} else {
+						ZEND_REGSET_INCL(regset, ZREG_R1);
+					}
+				}
+			}
+			break;
+		case ZEND_BW_OR:
+		case ZEND_BW_AND:
+		case ZEND_BW_XOR:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG)) &&
+			    !(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+				regset = ZEND_REGSET_EMPTY;
+				if (ssa_op->result_def != current_var &&
+				    (ssa_op->op1_use != current_var || !last_use)) {
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+				}
+				if (zend_needs_extra_reg_for_const(opline, opline->op1_type, opline->op1) ||
+				    zend_needs_extra_reg_for_const(opline, opline->op2_type, opline->op2)) {
+					if (!ZEND_REGSET_IN(regset, ZREG_R0)) {
+						ZEND_REGSET_INCL(regset, ZREG_R0);
+					} else {
+						ZEND_REGSET_INCL(regset, ZREG_R1);
+					}
+				}
+			}
+			break;
+		case ZEND_SL:
+		case ZEND_SR:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG)) &&
+			    !(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+bw_op:
+				regset = ZEND_REGSET_EMPTY;
+				if (ssa_op->result_def != current_var &&
+				    (ssa_op->op1_use != current_var || !last_use)) {
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+				}
+				if (opline->op2_type != IS_CONST && ssa_op->op2_use != current_var) {
+					ZEND_REGSET_INCL(regset, ZREG_R1);
+				}
+			}
+			break;
+		case ZEND_MOD:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG)) &&
+			    !(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-MAY_BE_LONG))) {
+				if (opline->op2_type == IS_CONST &&
+				    Z_TYPE_P(RT_CONSTANT(opline, opline->op2)) == IS_LONG &&
+				    zend_long_is_power_of_two(Z_LVAL_P(RT_CONSTANT(opline, opline->op2))) &&
+				    OP1_HAS_RANGE() &&
+				    OP1_MIN_RANGE() >= 0) {
+				    /* MOD is going to be optimized into AND */
+				    goto bw_op;
+				} else {
+					regset = ZEND_REGSET_EMPTY;
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+					ZEND_REGSET_INCL(regset, ZREG_R2);
+					if (opline->op2_type == IS_CONST) {
+						ZEND_REGSET_INCL(regset, ZREG_R1);
+					}
+				}
+			}
+			break;
+		case ZEND_IS_SMALLER:
+		case ZEND_IS_SMALLER_OR_EQUAL:
+		case ZEND_IS_EQUAL:
+		case ZEND_IS_NOT_EQUAL:
+		case ZEND_IS_IDENTICAL:
+		case ZEND_IS_NOT_IDENTICAL:
+		case ZEND_CASE:
+			op1_info = OP1_INFO();
+			op2_info = OP2_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE))) &&
+			    !(op2_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+				regset = ZEND_REGSET_EMPTY;
+				if (!(opline->result_type & (IS_SMART_BRANCH_JMPZ|IS_SMART_BRANCH_JMPNZ))) {
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+				}
+				if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_LONG) &&
+				    opline->op1_type != IS_CONST && opline->op2_type != IS_CONST) {
+					if (ssa_op->op1_use != current_var &&
+					    ssa_op->op2_use != current_var) {
+						ZEND_REGSET_INCL(regset, ZREG_R0);
+					}
+				}
+				if ((op1_info & MAY_BE_LONG) && (op2_info & MAY_BE_DOUBLE)) {
+					ZEND_REGSET_INCL(regset, ZREG_XMM0);
+				}
+				if ((op1_info & MAY_BE_DOUBLE) && (op2_info & MAY_BE_LONG)) {
+					ZEND_REGSET_INCL(regset, ZREG_XMM0);
+				}
+				if ((op1_info & MAY_BE_DOUBLE) && (op2_info & MAY_BE_DOUBLE)) {
+					if (ssa_op->op1_use != current_var &&
+					    ssa_op->op2_use != current_var) {
+						ZEND_REGSET_INCL(regset, ZREG_XMM0);
+					}
+				}
+				if (zend_needs_extra_reg_for_const(opline, opline->op1_type, opline->op1) ||
+				    zend_needs_extra_reg_for_const(opline, opline->op2_type, opline->op2)) {
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+				}
+			}
+			break;
+		case ZEND_BOOL:
+		case ZEND_BOOL_NOT:
+		case ZEND_JMPZ:
+		case ZEND_JMPNZ:
+		case ZEND_JMPZNZ:
+		case ZEND_JMPZ_EX:
+		case ZEND_JMPNZ_EX:
+			op1_info = OP1_INFO();
+			if (!(op1_info & ((MAY_BE_ANY|MAY_BE_REF|MAY_BE_UNDEF)-(MAY_BE_NULL|MAY_BE_FALSE|MAY_BE_TRUE|MAY_BE_LONG|MAY_BE_DOUBLE)))) {
+				regset = ZEND_REGSET_EMPTY;
+				if (op1_info & MAY_BE_DOUBLE) {
+					ZEND_REGSET_INCL(regset, ZREG_XMM0);
+				}
+				if (opline->opcode == ZEND_BOOL ||
+				    opline->opcode == ZEND_BOOL_NOT ||
+				    opline->opcode == ZEND_JMPZ_EX ||
+				    opline->opcode == ZEND_JMPNZ_EX) {
+					ZEND_REGSET_INCL(regset, ZREG_R0);
+				}
+			}
+			break;
+		case ZEND_DO_UCALL:
+		case ZEND_DO_FCALL:
+		case ZEND_DO_FCALL_BY_NAME:
+		case ZEND_INCLUDE_OR_EVAL:
+		case ZEND_GENERATOR_CREATE:
+		case ZEND_YIELD:
+		case ZEND_YIELD_FROM:
+			regset = ZEND_REGSET_UNION(ZEND_REGSET_GP, ZEND_REGSET_FP);
+			break;
+		default:
+			break;
+	}
+
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+		if (ssa_op == ssa->ops
+		 && JIT_G(current_trace)[ZEND_JIT_TRACE_START_REC_SIZE].op == ZEND_JIT_TRACE_INIT_CALL
+		 && (JIT_G(current_trace)[ZEND_JIT_TRACE_START_REC_SIZE].info & ZEND_JIT_TRACE_FAKE_INIT_CALL)) {
+			ZEND_REGSET_INCL(regset, ZREG_R0);
+			ZEND_REGSET_INCL(regset, ZREG_R1);
+		}
+	}
+
+	/* %r0 is used to check EG(vm_interrupt) */
+	if (JIT_G(trigger) == ZEND_JIT_ON_HOT_TRACE) {
+		if (ssa_op == ssa->ops
+		 && (JIT_G(current_trace)->stop == ZEND_JIT_TRACE_STOP_LOOP ||
+			 JIT_G(current_trace)->stop == ZEND_JIT_TRACE_STOP_RECURSIVE_CALL)) {
+#if ZTS
+			ZEND_REGSET_INCL(regset, ZREG_R0);
+#else
+			if ((sizeof(void*) == 8 && !IS_SIGNED_32BIT(&EG(vm_interrupt)))) {
+				ZEND_REGSET_INCL(regset, ZREG_R0);
+			}
+#endif
+		}
+	} else  {
+		uint32_t b = ssa->cfg.map[ssa_op - ssa->ops];
+
+		if ((ssa->cfg.blocks[b].flags & ZEND_BB_LOOP_HEADER) != 0
+		 && ssa->cfg.blocks[b].start == ssa_op - ssa->ops) {
+#if ZTS
+			ZEND_REGSET_INCL(regset, ZREG_R0);
+#else
+			if ((sizeof(void*) == 8 && !IS_SIGNED_32BIT(&EG(vm_interrupt)))) {
+				ZEND_REGSET_INCL(regset, ZREG_R0);
+			}
+#endif
+		}
+	}
+
+	return regset;
+}
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * indent-tabs-mode: t
+ * End:
+ */
diff --git a/ext/pdo/pdo_sql_parser.c b/ext/pdo/pdo_sql_parser.c
new file mode 100644
index 0000000000..8ff7980a64
--- /dev/null
+++ b/ext/pdo/pdo_sql_parser.c
@@ -0,0 +1,728 @@
+/* Generated by re2c 1.3 */
+#line 1 "ext/pdo/pdo_sql_parser.re"
+/*
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author: George Schlossnagle <george@omniti.com>                      |
+  +----------------------------------------------------------------------+
+*/
+
+#include "php.h"
+#include "php_pdo_driver.h"
+#include "php_pdo_int.h"
+
+#define PDO_PARSER_TEXT 1
+#define PDO_PARSER_BIND 2
+#define PDO_PARSER_BIND_POS 3
+#define PDO_PARSER_ESCAPED_QUESTION 4
+#define PDO_PARSER_EOI 5
+
+#define PDO_PARSER_BINDNO_ESCAPED_CHAR -1
+
+#define RET(i) {s->cur = cursor; return i; }
+#define SKIP_ONE(i) {s->cur = s->tok + 1; return i; }
+
+#define YYCTYPE         unsigned char
+#define YYCURSOR        cursor
+#define YYLIMIT         s->end
+#define YYMARKER        s->ptr
+#define YYFILL(n)		{ RET(PDO_PARSER_EOI); }
+
+typedef struct Scanner {
+	const char *ptr, *cur, *tok, *end;
+} Scanner;
+
+static int scan(Scanner *s)
+{
+	const char *cursor = s->cur;
+
+	s->tok = cursor;
+	#line 55 "ext/pdo/pdo_sql_parser.re"
+
+
+	
+#line 54 "ext/pdo/pdo_sql_parser.c"
+{
+	YYCTYPE yych;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case 0x00:	goto yy2;
+	case '"':	goto yy6;
+	case '\'':	goto yy8;
+	case '(':
+	case ')':
+	case '*':
+	case '+':
+	case ',':
+	case '.':	goto yy9;
+	case '-':	goto yy10;
+	case '/':	goto yy11;
+	case ':':	goto yy12;
+	case '?':	goto yy13;
+	default:	goto yy3;
+	}
+yy2:
+	YYCURSOR = YYMARKER;
+	goto yy7;
+yy3:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case 0x00:
+	case '"':
+	case '\'':
+	case '(':
+	case ')':
+	case '*':
+	case '+':
+	case ',':
+	case '-':
+	case '.':
+	case '/':
+	case ':':
+	case '?':	goto yy5;
+	default:	goto yy3;
+	}
+yy5:
+#line 66 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_TEXT); }
+#line 101 "ext/pdo/pdo_sql_parser.c"
+yy6:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych >= 0x01) goto yy16;
+yy7:
+#line 64 "ext/pdo/pdo_sql_parser.re"
+	{ SKIP_ONE(PDO_PARSER_TEXT); }
+#line 108 "ext/pdo/pdo_sql_parser.c"
+yy8:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x00) goto yy7;
+	goto yy21;
+yy9:
+	++YYCURSOR;
+	goto yy7;
+yy10:
+	yych = *++YYCURSOR;
+	switch (yych) {
+	case '-':	goto yy25;
+	default:	goto yy7;
+	}
+yy11:
+	yych = *++YYCURSOR;
+	switch (yych) {
+	case '*':	goto yy28;
+	default:	goto yy7;
+	}
+yy12:
+	yych = *++YYCURSOR;
+	switch (yych) {
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+	case 'A':
+	case 'B':
+	case 'C':
+	case 'D':
+	case 'E':
+	case 'F':
+	case 'G':
+	case 'H':
+	case 'I':
+	case 'J':
+	case 'K':
+	case 'L':
+	case 'M':
+	case 'N':
+	case 'O':
+	case 'P':
+	case 'Q':
+	case 'R':
+	case 'S':
+	case 'T':
+	case 'U':
+	case 'V':
+	case 'W':
+	case 'X':
+	case 'Y':
+	case 'Z':
+	case '_':
+	case 'a':
+	case 'b':
+	case 'c':
+	case 'd':
+	case 'e':
+	case 'f':
+	case 'g':
+	case 'h':
+	case 'i':
+	case 'j':
+	case 'k':
+	case 'l':
+	case 'm':
+	case 'n':
+	case 'o':
+	case 'p':
+	case 'q':
+	case 'r':
+	case 's':
+	case 't':
+	case 'u':
+	case 'v':
+	case 'w':
+	case 'x':
+	case 'y':
+	case 'z':	goto yy30;
+	case ':':	goto yy33;
+	default:	goto yy7;
+	}
+yy13:
+	yych = *++YYCURSOR;
+	switch (yych) {
+	case '?':	goto yy36;
+	default:	goto yy14;
+	}
+yy14:
+#line 63 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_BIND_POS); }
+#line 206 "ext/pdo/pdo_sql_parser.c"
+yy15:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+yy16:
+	switch (yych) {
+	case 0x00:	goto yy2;
+	case '"':	goto yy17;
+	case '\\':	goto yy19;
+	default:	goto yy15;
+	}
+yy17:
+	++YYCURSOR;
+#line 58 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_TEXT); }
+#line 222 "ext/pdo/pdo_sql_parser.c"
+yy19:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= 0x00) goto yy2;
+	goto yy15;
+yy20:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+yy21:
+	switch (yych) {
+	case 0x00:	goto yy2;
+	case '\'':	goto yy22;
+	case '\\':	goto yy24;
+	default:	goto yy20;
+	}
+yy22:
+	++YYCURSOR;
+#line 59 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_TEXT); }
+#line 244 "ext/pdo/pdo_sql_parser.c"
+yy24:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= 0x00) goto yy2;
+	goto yy20;
+yy25:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case '\n':
+	case '\r':	goto yy27;
+	default:	goto yy25;
+	}
+yy27:
+#line 65 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_TEXT); }
+#line 263 "ext/pdo/pdo_sql_parser.c"
+yy28:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case '*':	goto yy38;
+	default:	goto yy28;
+	}
+yy30:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+	case 'A':
+	case 'B':
+	case 'C':
+	case 'D':
+	case 'E':
+	case 'F':
+	case 'G':
+	case 'H':
+	case 'I':
+	case 'J':
+	case 'K':
+	case 'L':
+	case 'M':
+	case 'N':
+	case 'O':
+	case 'P':
+	case 'Q':
+	case 'R':
+	case 'S':
+	case 'T':
+	case 'U':
+	case 'V':
+	case 'W':
+	case 'X':
+	case 'Y':
+	case 'Z':
+	case '_':
+	case 'a':
+	case 'b':
+	case 'c':
+	case 'd':
+	case 'e':
+	case 'f':
+	case 'g':
+	case 'h':
+	case 'i':
+	case 'j':
+	case 'k':
+	case 'l':
+	case 'm':
+	case 'n':
+	case 'o':
+	case 'p':
+	case 'q':
+	case 'r':
+	case 's':
+	case 't':
+	case 'u':
+	case 'v':
+	case 'w':
+	case 'x':
+	case 'y':
+	case 'z':	goto yy30;
+	default:	goto yy32;
+	}
+yy32:
+#line 62 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_BIND); }
+#line 345 "ext/pdo/pdo_sql_parser.c"
+yy33:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case ':':	goto yy33;
+	default:	goto yy35;
+	}
+yy35:
+#line 60 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_TEXT); }
+#line 357 "ext/pdo/pdo_sql_parser.c"
+yy36:
+	++YYCURSOR;
+#line 61 "ext/pdo/pdo_sql_parser.re"
+	{ RET(PDO_PARSER_ESCAPED_QUESTION); }
+#line 362 "ext/pdo/pdo_sql_parser.c"
+yy38:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case '*':	goto yy38;
+	case '/':	goto yy40;
+	default:	goto yy28;
+	}
+yy40:
+	++YYCURSOR;
+	goto yy27;
+}
+#line 67 "ext/pdo/pdo_sql_parser.re"
+
+}
+
+struct placeholder {
+	const char *pos;
+	size_t len;
+	zend_string *quoted;	/* quoted value */
+	int bindno;
+	struct placeholder *next;
+};
+
+static void free_param_name(zval *el) {
+	zend_string_release(Z_PTR_P(el));
+}
+
+PDO_API int pdo_parse_params(pdo_stmt_t *stmt, zend_string *inquery, zend_string **outquery)
+{
+	Scanner s;
+	char *newbuffer;
+	ptrdiff_t t;
+	uint32_t bindno = 0;
+	int ret = 0, escapes = 0;
+	size_t newbuffer_len;
+	HashTable *params;
+	struct pdo_bound_param_data *param;
+	int query_type = PDO_PLACEHOLDER_NONE;
+	struct placeholder *placeholders = NULL, *placetail = NULL, *plc = NULL;
+
+	s.cur = ZSTR_VAL(inquery);
+	s.end = s.cur + ZSTR_LEN(inquery) + 1;
+
+	/* phase 1: look for args */
+	while((t = scan(&s)) != PDO_PARSER_EOI) {
+		if (t == PDO_PARSER_BIND || t == PDO_PARSER_BIND_POS || t == PDO_PARSER_ESCAPED_QUESTION) {
+			if (t == PDO_PARSER_ESCAPED_QUESTION && stmt->supports_placeholders == PDO_PLACEHOLDER_POSITIONAL) {
+				/* escaped question marks unsupported, treat as text */
+				continue;
+			}
+
+			if (t == PDO_PARSER_BIND) {
+				ptrdiff_t len = s.cur - s.tok;
+				if ((ZSTR_VAL(inquery) < (s.cur - len)) && isalnum(*(s.cur - len - 1))) {
+					continue;
+				}
+				query_type |= PDO_PLACEHOLDER_NAMED;
+			} else if (t == PDO_PARSER_BIND_POS) {
+				query_type |= PDO_PLACEHOLDER_POSITIONAL;
+			}
+
+			plc = emalloc(sizeof(*plc));
+			memset(plc, 0, sizeof(*plc));
+			plc->next = NULL;
+			plc->pos = s.tok;
+			plc->len = s.cur - s.tok;
+
+			if (t == PDO_PARSER_ESCAPED_QUESTION) {
+				plc->bindno = PDO_PARSER_BINDNO_ESCAPED_CHAR;
+				plc->quoted = ZSTR_CHAR('?');
+				escapes++;
+			} else {
+				plc->bindno = bindno++;
+			}
+
+			if (placetail) {
+				placetail->next = plc;
+			} else {
+				placeholders = plc;
+			}
+			placetail = plc;
+		}
+	}
+
+	/* did the query make sense to me? */
+	if (query_type == (PDO_PLACEHOLDER_NAMED|PDO_PLACEHOLDER_POSITIONAL)) {
+		/* they mixed both types; punt */
+		pdo_raise_impl_error(stmt->dbh, stmt, "HY093", "mixed named and positional parameters");
+		ret = -1;
+		goto clean_up;
+	}
+
+	params = stmt->bound_params;
+	if (stmt->supports_placeholders == PDO_PLACEHOLDER_NONE && params && bindno != zend_hash_num_elements(params)) {
+		/* extra bit of validation for instances when same params are bound more than once */
+		if (query_type != PDO_PLACEHOLDER_POSITIONAL && bindno > zend_hash_num_elements(params)) {
+			int ok = 1;
+			for (plc = placeholders; plc; plc = plc->next) {
+				if ((param = zend_hash_str_find_ptr(params, plc->pos, plc->len)) == NULL) {
+					ok = 0;
+					break;
+				}
+			}
+			if (ok) {
+				goto safe;
+			}
+		}
+		pdo_raise_impl_error(stmt->dbh, stmt, "HY093", "number of bound variables does not match number of tokens");
+		ret = -1;
+		goto clean_up;
+	}
+
+	if (!placeholders) {
+		/* nothing to do; good! */
+		return 0;
+	}
+
+	if (stmt->supports_placeholders == query_type && !stmt->named_rewrite_template) {
+		/* query matches native syntax */
+		if (escapes) {
+			newbuffer_len = ZSTR_LEN(inquery);
+			goto rewrite;
+		}
+
+		ret = 0;
+		goto clean_up;
+	}
+
+	if (query_type == PDO_PLACEHOLDER_NAMED && stmt->named_rewrite_template) {
+		/* magic/hack.
+		 * We we pretend that the query was positional even if
+		 * it was named so that we fall into the
+		 * named rewrite case below.  Not too pretty,
+		 * but it works. */
+		query_type = PDO_PLACEHOLDER_POSITIONAL;
+	}
+
+safe:
+	/* what are we going to do ? */
+	if (stmt->supports_placeholders == PDO_PLACEHOLDER_NONE) {
+		/* query generation */
+
+		newbuffer_len = ZSTR_LEN(inquery);
+
+		/* let's quote all the values */
+		for (plc = placeholders; plc && params; plc = plc->next) {
+			if (plc->bindno == PDO_PARSER_BINDNO_ESCAPED_CHAR) {
+				/* escaped character */
+				continue;
+			}
+
+			if (query_type == PDO_PLACEHOLDER_NONE) {
+				continue;
+			}
+
+			if (query_type == PDO_PLACEHOLDER_POSITIONAL) {
+				param = zend_hash_index_find_ptr(params, plc->bindno);
+			} else {
+				param = zend_hash_str_find_ptr(params, plc->pos, plc->len);
+			}
+			if (param == NULL) {
+				/* parameter was not defined */
+				ret = -1;
+				pdo_raise_impl_error(stmt->dbh, stmt, "HY093", "parameter was not defined");
+				goto clean_up;
+			}
+			if (stmt->dbh->methods->quoter) {
+				zval *parameter;
+				if (Z_ISREF(param->parameter)) {
+					parameter = Z_REFVAL(param->parameter);
+				} else {
+					parameter = &param->parameter;
+				}
+				if (param->param_type == PDO_PARAM_LOB && Z_TYPE_P(parameter) == IS_RESOURCE) {
+					php_stream *stm;
+
+					php_stream_from_zval_no_verify(stm, parameter);
+					if (stm) {
+						zend_string *buf;
+
+						buf = php_stream_copy_to_mem(stm, PHP_STREAM_COPY_ALL, 0);
+						if (!buf) {
+							buf = ZSTR_EMPTY_ALLOC();
+						}
+
+						plc->quoted = stmt->dbh->methods->quoter(stmt->dbh, buf, param->param_type);
+
+						if (buf) {
+							zend_string_release_ex(buf, 0);
+						}
+					} else {
+						pdo_raise_impl_error(stmt->dbh, stmt, "HY105", "Expected a stream resource");
+						ret = -1;
+						goto clean_up;
+					}
+				} else {
+					enum pdo_param_type param_type = param->param_type;
+					zend_string *buf = NULL;
+
+					/* assume all types are nullable */
+					if (Z_TYPE_P(parameter) == IS_NULL) {
+						param_type = PDO_PARAM_NULL;
+					}
+
+					switch (param_type) {
+						case PDO_PARAM_BOOL:
+							plc->quoted = zend_is_true(parameter) ? ZSTR_CHAR('1') : ZSTR_CHAR('0');
+							break;
+
+						case PDO_PARAM_INT:
+							plc->quoted = zend_long_to_str(zval_get_long(parameter));
+							break;
+
+						case PDO_PARAM_NULL:
+							plc->quoted = ZSTR_KNOWN(ZEND_STR_NULL);
+							break;
+
+						default: {
+							buf = zval_try_get_string(parameter);
+							/* parameter does not have a string representation, buf == NULL */
+							if (EG(exception)) {
+								/* bork */
+								ret = -1;
+								strncpy(stmt->error_code, stmt->dbh->error_code, 6);
+								goto clean_up;
+							}
+
+							plc->quoted = stmt->dbh->methods->quoter(stmt->dbh, buf, param_type);
+						}
+					}
+
+					if (buf) {
+						zend_string_release_ex(buf, 0);
+					}
+				}
+			} else {
+				zval *parameter;
+				if (Z_ISREF(param->parameter)) {
+					parameter = Z_REFVAL(param->parameter);
+				} else {
+					parameter = &param->parameter;
+				}
+				plc->quoted = zend_string_copy(Z_STR_P(parameter));
+			}
+			newbuffer_len += ZSTR_LEN(plc->quoted);
+		}
+
+rewrite:
+		/* allocate output buffer */
+		*outquery = zend_string_alloc(newbuffer_len, 0);
+		newbuffer = ZSTR_VAL(*outquery);
+
+		/* and build the query */
+		const char *ptr = ZSTR_VAL(inquery);
+		plc = placeholders;
+
+		do {
+			t = plc->pos - ptr;
+			if (t) {
+				memcpy(newbuffer, ptr, t);
+				newbuffer += t;
+			}
+			if (plc->quoted) {
+				memcpy(newbuffer, ZSTR_VAL(plc->quoted), ZSTR_LEN(plc->quoted));
+				newbuffer += ZSTR_LEN(plc->quoted);
+			} else {
+				memcpy(newbuffer, plc->pos, plc->len);
+				newbuffer += plc->len;
+			}
+			ptr = plc->pos + plc->len;
+
+			plc = plc->next;
+		} while (plc);
+
+		t = ZSTR_VAL(inquery) + ZSTR_LEN(inquery) - ptr;
+		if (t) {
+			memcpy(newbuffer, ptr, t);
+			newbuffer += t;
+		}
+		*newbuffer = '\0';
+		ZSTR_LEN(*outquery) = newbuffer - ZSTR_VAL(*outquery);
+
+		ret = 1;
+		goto clean_up;
+
+	} else if (query_type == PDO_PLACEHOLDER_POSITIONAL) {
+		/* rewrite ? to :pdoX */
+		const char *tmpl = stmt->named_rewrite_template ? stmt->named_rewrite_template : ":pdo%d";
+		int bind_no = 1;
+
+		newbuffer_len = ZSTR_LEN(inquery);
+
+		if (stmt->bound_param_map == NULL) {
+			ALLOC_HASHTABLE(stmt->bound_param_map);
+			zend_hash_init(stmt->bound_param_map, 13, NULL, free_param_name, 0);
+		}
+
+		for (plc = placeholders; plc; plc = plc->next) {
+			int skip_map = 0;
+			zend_string *p;
+			zend_string *idxbuf;
+
+			if (plc->bindno == PDO_PARSER_BINDNO_ESCAPED_CHAR) {
+				continue;
+			}
+
+			zend_string *name = zend_string_init(plc->pos, plc->len, 0);
+
+			/* check if bound parameter is already available */
+			if (zend_string_equals_literal(name, "?") || (p = zend_hash_find_ptr(stmt->bound_param_map, name)) == NULL) {
+				idxbuf = zend_strpprintf(0, tmpl, bind_no++);
+			} else {
+				idxbuf = zend_string_copy(p);
+				skip_map = 1;
+			}
+
+			plc->quoted = idxbuf;
+			newbuffer_len += ZSTR_LEN(plc->quoted);
+
+			if (!skip_map && stmt->named_rewrite_template) {
+				/* create a mapping */
+				zend_hash_update_ptr(stmt->bound_param_map, name, zend_string_copy(plc->quoted));
+			}
+
+			/* map number to name */
+			zend_hash_index_update_ptr(stmt->bound_param_map, plc->bindno, zend_string_copy(plc->quoted));
+
+			zend_string_release(name);
+		}
+
+		goto rewrite;
+
+	} else {
+		/* rewrite :name to ? */
+
+		newbuffer_len = ZSTR_LEN(inquery);
+
+		if (stmt->bound_param_map == NULL) {
+			ALLOC_HASHTABLE(stmt->bound_param_map);
+			zend_hash_init(stmt->bound_param_map, 13, NULL, free_param_name, 0);
+		}
+
+		for (plc = placeholders; plc; plc = plc->next) {
+			zend_string *name = zend_string_init(plc->pos, plc->len, 0);
+			zend_hash_index_update_ptr(stmt->bound_param_map, plc->bindno, name);
+			plc->quoted = ZSTR_CHAR('?');
+			newbuffer_len -= plc->len - 1;
+		}
+
+		goto rewrite;
+	}
+
+clean_up:
+
+	while (placeholders) {
+		plc = placeholders;
+		placeholders = plc->next;
+		if (plc->quoted) {
+			zend_string_release_ex(plc->quoted, 0);
+		}
+		efree(plc);
+	}
+
+	return ret;
+}
diff --git a/ext/phar/phar_path_check.c b/ext/phar/phar_path_check.c
new file mode 100644
index 0000000000..e498b2ba3f
--- /dev/null
+++ b/ext/phar/phar_path_check.c
@@ -0,0 +1,259 @@
+/* Generated by re2c 1.3 */
+#line 1 "ext/phar/phar_path_check.re"
+/*
+  +----------------------------------------------------------------------+
+  | phar php single-file executable PHP extension                        |
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Authors: Marcus Boerger <helly@php.net>                              |
+  +----------------------------------------------------------------------+
+*/
+
+#include "phar_internal.h"
+
+phar_path_check_result phar_path_check(char **s, size_t *len, const char **error)
+{
+	const unsigned char *p = (const unsigned char*)*s;
+	const unsigned char *m;
+
+	if (*len == 1 && *p == '.') {
+		*error = "current directory reference";
+		return pcr_err_curr_dir;
+	} else if (*len == 2 && p[0] == '.' && p[1] == '.') {
+		*error = "upper directory reference";
+		return pcr_err_up_dir;
+	}
+
+#define YYCTYPE         unsigned char
+#define YYCURSOR        p
+#define YYLIMIT         p+*len
+#define YYMARKER        m
+#define YYFILL(n)       do {} while (0)
+
+loop:
+
+#line 45 "ext/phar/phar_path_check.c"
+{
+	YYCTYPE yych;
+	unsigned int yyaccept = 0;
+	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
+	yych = *YYCURSOR;
+	if (yych <= '[') {
+		if (yych <= ')') {
+			if (yych <= '\f') {
+				if (yych >= 0x01) goto yy4;
+			} else {
+				if (yych <= '\r') goto yy6;
+				if (yych <= 0x19) goto yy4;
+				goto yy7;
+			}
+		} else {
+			if (yych <= '/') {
+				if (yych <= '*') goto yy9;
+				if (yych <= '.') goto yy7;
+				goto yy11;
+			} else {
+				if (yych == '?') goto yy12;
+				goto yy7;
+			}
+		}
+	} else {
+		if (yych <= 0xEC) {
+			if (yych <= 0xC1) {
+				if (yych <= '\\') goto yy14;
+				if (yych <= 0x7F) goto yy7;
+				goto yy4;
+			} else {
+				if (yych <= 0xDF) goto yy16;
+				if (yych <= 0xE0) goto yy17;
+				goto yy18;
+			}
+		} else {
+			if (yych <= 0xF0) {
+				if (yych <= 0xED) goto yy19;
+				if (yych <= 0xEF) goto yy18;
+				goto yy20;
+			} else {
+				if (yych <= 0xF3) goto yy21;
+				if (yych <= 0xF4) goto yy22;
+				goto yy4;
+			}
+		}
+	}
+	++YYCURSOR;
+#line 91 "ext/phar/phar_path_check.re"
+	{
+			if (**s == '/') {
+				(*s)++;
+				(*len)--;
+			}
+			if ((p - (const unsigned char*)*s) - 1 != *len)
+			{
+				*error ="illegal character";
+				return pcr_err_illegal_char;
+			}
+			*error = NULL;
+			return pcr_is_ok;
+		}
+#line 108 "ext/phar/phar_path_check.c"
+yy4:
+	++YYCURSOR;
+yy5:
+#line 104 "ext/phar/phar_path_check.re"
+	{
+			*error ="illegal character";
+			return pcr_err_illegal_char;
+		}
+#line 117 "ext/phar/phar_path_check.c"
+yy6:
+	yych = *++YYCURSOR;
+	if (yych == '\n') goto yy4;
+	goto yy5;
+yy7:
+	++YYCURSOR;
+yy8:
+#line 88 "ext/phar/phar_path_check.re"
+	{
+			goto loop;
+		}
+#line 129 "ext/phar/phar_path_check.c"
+yy9:
+	++YYCURSOR;
+#line 76 "ext/phar/phar_path_check.re"
+	{
+			*error = "star";
+			return pcr_err_star;
+		}
+#line 137 "ext/phar/phar_path_check.c"
+yy11:
+	yyaccept = 0;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= '-') goto yy8;
+	if (yych <= '.') goto yy23;
+	if (yych <= '/') goto yy25;
+	goto yy8;
+yy12:
+	++YYCURSOR;
+#line 80 "ext/phar/phar_path_check.re"
+	{
+			if (**s == '/') {
+				(*s)++;
+			}
+			*len = (p - (const unsigned char*)*s) -1;
+			*error = NULL;
+			return pcr_use_query;
+		}
+#line 156 "ext/phar/phar_path_check.c"
+yy14:
+	++YYCURSOR;
+#line 72 "ext/phar/phar_path_check.re"
+	{
+			*error = "back-slash";
+			return pcr_err_back_slash;
+		}
+#line 164 "ext/phar/phar_path_check.c"
+yy16:
+	yych = *++YYCURSOR;
+	if (yych <= 0x7F) goto yy5;
+	if (yych <= 0xBF) goto yy7;
+	goto yy5;
+yy17:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x9F) goto yy5;
+	if (yych <= 0xBF) goto yy27;
+	goto yy5;
+yy18:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x7F) goto yy5;
+	if (yych <= 0xBF) goto yy27;
+	goto yy5;
+yy19:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x7F) goto yy5;
+	if (yych <= 0x9F) goto yy27;
+	goto yy5;
+yy20:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x8F) goto yy5;
+	if (yych <= 0xBF) goto yy28;
+	goto yy5;
+yy21:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x7F) goto yy5;
+	if (yych <= 0xBF) goto yy28;
+	goto yy5;
+yy22:
+	yyaccept = 1;
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych <= 0x7F) goto yy5;
+	if (yych <= 0x8F) goto yy28;
+	goto yy5;
+yy23:
+	yych = *++YYCURSOR;
+	if (yych <= 0x00) goto yy29;
+	if (yych <= '-') goto yy24;
+	if (yych <= '.') goto yy31;
+	if (yych <= '/') goto yy29;
+yy24:
+	YYCURSOR = YYMARKER;
+	if (yyaccept == 0) {
+		goto yy8;
+	} else {
+		goto yy5;
+	}
+yy25:
+	++YYCURSOR;
+#line 60 "ext/phar/phar_path_check.re"
+	{
+			*error = "double slash";
+			return pcr_err_double_slash;
+		}
+#line 226 "ext/phar/phar_path_check.c"
+yy27:
+	yych = *++YYCURSOR;
+	if (yych <= 0x7F) goto yy24;
+	if (yych <= 0xBF) goto yy7;
+	goto yy24;
+yy28:
+	yych = *++YYCURSOR;
+	if (yych <= 0x7F) goto yy24;
+	if (yych <= 0xBF) goto yy27;
+	goto yy24;
+yy29:
+	++YYCURSOR;
+#line 68 "ext/phar/phar_path_check.re"
+	{
+			*error = "current directory reference";
+			return pcr_err_curr_dir;
+		}
+#line 244 "ext/phar/phar_path_check.c"
+yy31:
+	yych = *++YYCURSOR;
+	if (yych <= 0x00) goto yy32;
+	if (yych != '/') goto yy24;
+yy32:
+	++YYCURSOR;
+#line 64 "ext/phar/phar_path_check.re"
+	{
+			*error = "upper directory reference";
+			return pcr_err_up_dir;
+		}
+#line 256 "ext/phar/phar_path_check.c"
+}
+#line 108 "ext/phar/phar_path_check.re"
+
+}
diff --git a/ext/standard/url_scanner_ex.c b/ext/standard/url_scanner_ex.c
new file mode 100644
index 0000000000..efb7b35183
--- /dev/null
+++ b/ext/standard/url_scanner_ex.c
@@ -0,0 +1,1427 @@
+/* Generated by re2c 1.3 */
+#line 1 "ext/standard/url_scanner_ex.re"
+/*
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author: Sascha Schumann <sascha@schumann.cx>                         |
+  |         Yasuo Ohgaki <yohgaki@ohgaki.net>                            |
+  +----------------------------------------------------------------------+
+*/
+
+#include "php.h"
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#include <limits.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "SAPI.h"
+#include "php_ini.h"
+#include "php_globals.h"
+#include "php_string.h"
+#define STATE_TAG SOME_OTHER_STATE_TAG
+#include "basic_functions.h"
+#include "url.h"
+#include "html.h"
+#undef STATE_TAG
+
+#define url_scanner url_scanner_ex
+
+#include "zend_smart_str.h"
+
+static void tag_dtor(zval *zv)
+{
+	free(Z_PTR_P(zv));
+}
+
+static int php_ini_on_update_tags(zend_ini_entry *entry, zend_string *new_value, void *mh_arg1, void *mh_arg2, void *mh_arg3, int stage, int type)
+{
+	url_adapt_state_ex_t *ctx;
+	char *key;
+	char *tmp;
+	char *lasts = NULL;
+
+	if (type) {
+		ctx = &BG(url_adapt_session_ex);
+	} else {
+		ctx = &BG(url_adapt_output_ex);
+	}
+
+	tmp = estrndup(ZSTR_VAL(new_value), ZSTR_LEN(new_value));
+
+	if (ctx->tags)
+		zend_hash_destroy(ctx->tags);
+	else {
+		ctx->tags = malloc(sizeof(HashTable));
+		if (!ctx->tags) {
+			efree(tmp);
+			return FAILURE;
+		}
+	}
+
+	zend_hash_init(ctx->tags, 0, NULL, tag_dtor, 1);
+
+	for (key = php_strtok_r(tmp, ",", &lasts);
+		 key;
+		 key = php_strtok_r(NULL, ",", &lasts)) {
+		char *val;
+
+		val = strchr(key, '=');
+		if (val) {
+			char *q;
+			size_t keylen;
+			zend_string *str;
+
+			*val++ = '\0';
+			for (q = key; *q; q++) {
+				*q = tolower(*q);
+			}
+			keylen = q - key;
+			str = zend_string_init(key, keylen, 1);
+			GC_MAKE_PERSISTENT_LOCAL(str);
+			zend_hash_add_mem(ctx->tags, str, val, strlen(val)+1);
+			zend_string_release_ex(str, 1);
+		}
+	}
+
+	efree(tmp);
+
+	return SUCCESS;
+}
+
+static PHP_INI_MH(OnUpdateSessionTags)
+{
+	return php_ini_on_update_tags(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage, 1);
+}
+
+static PHP_INI_MH(OnUpdateOutputTags)
+{
+	return php_ini_on_update_tags(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage, 0);
+}
+
+static int php_ini_on_update_hosts(zend_ini_entry *entry, zend_string *new_value, void *mh_arg1, void *mh_arg2, void *mh_arg3, int stage, int type)
+{
+	HashTable *hosts;
+	char *key;
+	char *tmp;
+	char *lasts = NULL;
+
+	if (type) {
+		hosts = &BG(url_adapt_session_hosts_ht);
+	} else {
+		hosts = &BG(url_adapt_output_hosts_ht);
+	}
+	zend_hash_clean(hosts);
+
+	/* Use user supplied host whitelist */
+	tmp = estrndup(ZSTR_VAL(new_value), ZSTR_LEN(new_value));
+	for (key = php_strtok_r(tmp, ",", &lasts);
+		 key;
+		 key = php_strtok_r(NULL, ",", &lasts)) {
+		size_t keylen;
+		zend_string *tmp_key;
+		char *q;
+
+		for (q = key; *q; q++) {
+			*q = tolower(*q);
+		}
+		keylen = q - key;
+		if (keylen > 0) {
+			tmp_key = zend_string_init(key, keylen, 0);
+			zend_hash_add_empty_element(hosts, tmp_key);
+			zend_string_release_ex(tmp_key, 0);
+		}
+	}
+	efree(tmp);
+
+	return SUCCESS;
+}
+
+static PHP_INI_MH(OnUpdateSessionHosts)
+{
+	return php_ini_on_update_hosts(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage, 1);
+}
+
+static PHP_INI_MH(OnUpdateOutputHosts)
+{
+	return php_ini_on_update_hosts(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage, 0);
+}
+
+/* FIXME: OnUpdate*Hosts cannot set default to $_SERVER['HTTP_HOST'] at startup */
+PHP_INI_BEGIN()
+	STD_PHP_INI_ENTRY("session.trans_sid_tags", "a=href,area=href,frame=src,form=", PHP_INI_ALL, OnUpdateSessionTags, url_adapt_session_ex, php_basic_globals, basic_globals)
+	STD_PHP_INI_ENTRY("session.trans_sid_hosts", "", PHP_INI_ALL, OnUpdateSessionHosts, url_adapt_session_hosts_ht, php_basic_globals, basic_globals)
+	STD_PHP_INI_ENTRY("url_rewriter.tags", "form=", PHP_INI_ALL, OnUpdateOutputTags, url_adapt_session_ex, php_basic_globals, basic_globals)
+	STD_PHP_INI_ENTRY("url_rewriter.hosts", "", PHP_INI_ALL, OnUpdateOutputHosts, url_adapt_session_hosts_ht, php_basic_globals, basic_globals)
+PHP_INI_END()
+
+#line 175 "ext/standard/url_scanner_ex.re"
+
+
+#define YYFILL(n) goto done
+#define YYCTYPE unsigned char
+#define YYCURSOR p
+#define YYLIMIT q
+#define YYMARKER r
+
+static inline void append_modified_url(smart_str *url, smart_str *dest, smart_str *url_app, const char *separator)
+{
+	php_url *url_parts;
+
+	smart_str_0(url); /* FIXME: Bug #70480 php_url_parse_ex() crashes by processing chars exceed len */
+	url_parts = php_url_parse_ex(ZSTR_VAL(url->s), ZSTR_LEN(url->s));
+
+	/* Ignore malformed URLs */
+	if (!url_parts) {
+		smart_str_append_smart_str(dest, url);
+		return;
+	}
+
+	/* Don't modify URLs of the format "#mark" */
+	if (url_parts->fragment && '#' == ZSTR_VAL(url->s)[0]) {
+		smart_str_append_smart_str(dest, url);
+		php_url_free(url_parts);
+		return;
+	}
+
+	/* Check protocol. Only http/https is allowed. */
+	if (url_parts->scheme
+		&& !zend_string_equals_literal_ci(url_parts->scheme, "http")
+		&& !zend_string_equals_literal_ci(url_parts->scheme, "https")) {
+		smart_str_append_smart_str(dest, url);
+		php_url_free(url_parts);
+		return;
+	}
+
+	/* Check host whitelist. If it's not listed, do nothing. */
+	if (url_parts->host) {
+		zend_string *tmp = zend_string_tolower(url_parts->host);
+		if (!zend_hash_exists(&BG(url_adapt_session_hosts_ht), tmp)) {
+			zend_string_release_ex(tmp, 0);
+			smart_str_append_smart_str(dest, url);
+			php_url_free(url_parts);
+			return;
+		}
+		zend_string_release_ex(tmp, 0);
+	}
+
+	/*
+	 * When URL does not have path and query string add "/?".
+	 * i.e. If URL is only "?foo=bar", should not add "/?".
+	 */
+	if (!url_parts->path && !url_parts->query && !url_parts->fragment) {
+		/* URL is http://php.net or like */
+		smart_str_append_smart_str(dest, url);
+		smart_str_appendc(dest, '/');
+		smart_str_appendc(dest, '?');
+		smart_str_append_smart_str(dest, url_app);
+		php_url_free(url_parts);
+		return;
+	}
+
+	if (url_parts->scheme) {
+		smart_str_appends(dest, ZSTR_VAL(url_parts->scheme));
+		smart_str_appends(dest, "://");
+	} else if (*(ZSTR_VAL(url->s)) == '/' && *(ZSTR_VAL(url->s)+1) == '/') {
+		smart_str_appends(dest, "//");
+	}
+	if (url_parts->user) {
+		smart_str_appends(dest, ZSTR_VAL(url_parts->user));
+		if (url_parts->pass) {
+			smart_str_appends(dest, ZSTR_VAL(url_parts->pass));
+			smart_str_appendc(dest, ':');
+		}
+		smart_str_appendc(dest, '@');
+	}
+	if (url_parts->host) {
+		smart_str_appends(dest, ZSTR_VAL(url_parts->host));
+	}
+	if (url_parts->port) {
+		smart_str_appendc(dest, ':');
+		smart_str_append_unsigned(dest, (long)url_parts->port);
+	}
+	if (url_parts->path) {
+		smart_str_appends(dest, ZSTR_VAL(url_parts->path));
+	}
+	smart_str_appendc(dest, '?');
+	if (url_parts->query) {
+		smart_str_appends(dest, ZSTR_VAL(url_parts->query));
+		smart_str_appends(dest, separator);
+		smart_str_append_smart_str(dest, url_app);
+	} else {
+		smart_str_append_smart_str(dest, url_app);
+	}
+	if (url_parts->fragment) {
+		smart_str_appendc(dest, '#');
+		smart_str_appends(dest, ZSTR_VAL(url_parts->fragment));
+	}
+	php_url_free(url_parts);
+}
+
+enum {
+	TAG_NORMAL = 0,
+	TAG_FORM
+};
+
+enum {
+	ATTR_NORMAL = 0,
+	ATTR_ACTION
+};
+
+#undef YYFILL
+#undef YYCTYPE
+#undef YYCURSOR
+#undef YYLIMIT
+#undef YYMARKER
+
+static inline void tag_arg(url_adapt_state_ex_t *ctx, char quotes, char type)
+{
+	char f = 0;
+
+	/* arg.s is string WITHOUT NUL.
+	   To avoid partial match, NUL is added here */
+	ZSTR_VAL(ctx->arg.s)[ZSTR_LEN(ctx->arg.s)] = '\0';
+	if (!strcasecmp(ZSTR_VAL(ctx->arg.s), ctx->lookup_data)) {
+		f = 1;
+	}
+
+	if (quotes) {
+		smart_str_appendc(&ctx->result, type);
+	}
+	if (f) {
+		append_modified_url(&ctx->val, &ctx->result, &ctx->url_app, PG(arg_separator).output);
+	} else {
+		smart_str_append_smart_str(&ctx->result, &ctx->val);
+	}
+	if (quotes) {
+		smart_str_appendc(&ctx->result, type);
+	}
+}
+
+enum {
+	STATE_PLAIN = 0,
+	STATE_TAG,
+	STATE_NEXT_ARG,
+	STATE_ARG,
+	STATE_BEFORE_VAL,
+	STATE_VAL
+};
+
+#define YYFILL(n) goto stop
+#define YYCTYPE unsigned char
+#define YYCURSOR xp
+#define YYLIMIT end
+#define YYMARKER q
+#define STATE ctx->state
+
+#define STD_PARA url_adapt_state_ex_t *ctx, char *start, char *YYCURSOR
+#define STD_ARGS ctx, start, xp
+
+#if SCANNER_DEBUG
+#define scdebug(x) printf x
+#else
+#define scdebug(x)
+#endif
+
+static inline void passthru(STD_PARA)
+{
+	scdebug(("appending %d chars, starting with %c\n", YYCURSOR-start, *start));
+	smart_str_appendl(&ctx->result, start, YYCURSOR - start);
+}
+
+
+static int check_http_host(char *target)
+{
+	zval *host, *tmp;
+	zend_string *host_tmp;
+	char *colon;
+
+	if ((tmp = zend_hash_find(&EG(symbol_table), ZSTR_KNOWN(ZEND_STR_AUTOGLOBAL_SERVER))) &&
+		Z_TYPE_P(tmp) == IS_ARRAY &&
+		(host = zend_hash_str_find(Z_ARRVAL_P(tmp), ZEND_STRL("HTTP_HOST"))) &&
+		Z_TYPE_P(host) == IS_STRING) {
+		host_tmp = zend_string_init(Z_STRVAL_P(host), Z_STRLEN_P(host), 0);
+		/* HTTP_HOST could be 'localhost:8888' etc. */
+		colon = strchr(ZSTR_VAL(host_tmp), ':');
+		if (colon) {
+			ZSTR_LEN(host_tmp) = colon - ZSTR_VAL(host_tmp);
+			ZSTR_VAL(host_tmp)[ZSTR_LEN(host_tmp)] = '\0';
+		}
+		if (!strcasecmp(ZSTR_VAL(host_tmp), target)) {
+			zend_string_release_ex(host_tmp, 0);
+			return SUCCESS;
+		}
+		zend_string_release_ex(host_tmp, 0);
+	}
+	return FAILURE;
+}
+
+static int check_host_whitelist(url_adapt_state_ex_t *ctx)
+{
+	php_url *url_parts = NULL;
+	HashTable *allowed_hosts = ctx->type ? &BG(url_adapt_session_hosts_ht) : &BG(url_adapt_output_hosts_ht);
+
+	ZEND_ASSERT(ctx->tag_type == TAG_FORM);
+
+	if (ctx->attr_val.s && ZSTR_LEN(ctx->attr_val.s)) {
+		url_parts = php_url_parse_ex(ZSTR_VAL(ctx->attr_val.s), ZSTR_LEN(ctx->attr_val.s));
+	} else {
+		return SUCCESS; /* empty URL is valid */
+	}
+
+	if (!url_parts) {
+		return FAILURE;
+	}
+	if (url_parts->scheme) {
+		/* Only http/https should be handled.
+		   A bit hacky check this here, but saves a URL parse. */
+		if (!zend_string_equals_literal_ci(url_parts->scheme, "http") &&
+			!zend_string_equals_literal_ci(url_parts->scheme, "https")) {
+		php_url_free(url_parts);
+		return FAILURE;
+		}
+	}
+	if (!url_parts->host) {
+		php_url_free(url_parts);
+		return SUCCESS;
+	}
+	if (!zend_hash_num_elements(allowed_hosts) &&
+		check_http_host(ZSTR_VAL(url_parts->host)) == SUCCESS) {
+		php_url_free(url_parts);
+		return SUCCESS;
+	}
+	if (!zend_hash_find(allowed_hosts, url_parts->host)) {
+		php_url_free(url_parts);
+		return FAILURE;
+	}
+	php_url_free(url_parts);
+	return SUCCESS;
+}
+
+/*
+ * This function appends a hidden input field after a <form>.
+ */
+static void handle_form(STD_PARA)
+{
+	int doit = 0;
+
+	if (ZSTR_LEN(ctx->form_app.s) > 0) {
+		switch (ZSTR_LEN(ctx->tag.s)) {
+			case sizeof("form") - 1:
+				if (!strncasecmp(ZSTR_VAL(ctx->tag.s), "form", ZSTR_LEN(ctx->tag.s))
+					&& check_host_whitelist(ctx) == SUCCESS) {
+					doit = 1;
+				}
+				break;
+		}
+	}
+
+	if (doit) {
+		smart_str_append_smart_str(&ctx->result, &ctx->form_app);
+	}
+}
+
+/*
+ *  HANDLE_TAG copies the HTML Tag and checks whether we
+ *  have that tag in our table. If we might modify it,
+ *  we continue to scan the tag, otherwise we simply copy the complete
+ *  HTML stuff to the result buffer.
+ */
+
+static inline void handle_tag(STD_PARA)
+{
+	int ok = 0;
+	unsigned int i;
+
+	if (ctx->tag.s) {
+		ZSTR_LEN(ctx->tag.s) = 0;
+	}
+	smart_str_appendl(&ctx->tag, start, YYCURSOR - start);
+	for (i = 0; i < ZSTR_LEN(ctx->tag.s); i++)
+		ZSTR_VAL(ctx->tag.s)[i] = tolower((int)(unsigned char)ZSTR_VAL(ctx->tag.s)[i]);
+    /* intentionally using str_find here, in case the hash value is set, but the string val is changed later */
+	if ((ctx->lookup_data = zend_hash_str_find_ptr(ctx->tags, ZSTR_VAL(ctx->tag.s), ZSTR_LEN(ctx->tag.s))) != NULL) {
+		ok = 1;
+		if (ZSTR_LEN(ctx->tag.s) == sizeof("form")-1
+			&& !strncasecmp(ZSTR_VAL(ctx->tag.s), "form", ZSTR_LEN(ctx->tag.s))) {
+			ctx->tag_type = TAG_FORM;
+		} else {
+			ctx->tag_type = TAG_NORMAL;
+		}
+	}
+	STATE = ok ? STATE_NEXT_ARG : STATE_PLAIN;
+}
+
+static inline void handle_arg(STD_PARA)
+{
+	if (ctx->arg.s) {
+		ZSTR_LEN(ctx->arg.s) = 0;
+	}
+	smart_str_appendl(&ctx->arg, start, YYCURSOR - start);
+	if (ctx->tag_type == TAG_FORM &&
+		strncasecmp(ZSTR_VAL(ctx->arg.s), "action", ZSTR_LEN(ctx->arg.s)) == 0) {
+		ctx->attr_type = ATTR_ACTION;
+	} else {
+		ctx->attr_type = ATTR_NORMAL;
+	}
+}
+
+static inline void handle_val(STD_PARA, char quotes, char type)
+{
+	smart_str_setl(&ctx->val, start + quotes, YYCURSOR - start - quotes * 2);
+	if (ctx->tag_type == TAG_FORM && ctx->attr_type == ATTR_ACTION) {
+		smart_str_setl(&ctx->attr_val, start + quotes, YYCURSOR - start - quotes * 2);
+	}
+	tag_arg(ctx, quotes, type);
+}
+
+static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, size_t newlen)
+{
+	char *end, *q;
+	char *xp;
+	char *start;
+	size_t rest;
+
+	smart_str_appendl(&ctx->buf, newdata, newlen);
+
+	YYCURSOR = ZSTR_VAL(ctx->buf.s);
+	YYLIMIT = ZSTR_VAL(ctx->buf.s) + ZSTR_LEN(ctx->buf.s);
+
+	switch (STATE) {
+		case STATE_PLAIN: goto state_plain;
+		case STATE_TAG: goto state_tag;
+		case STATE_NEXT_ARG: goto state_next_arg;
+		case STATE_ARG: goto state_arg;
+		case STATE_BEFORE_VAL: goto state_before_val;
+		case STATE_VAL: goto state_val;
+	}
+
+
+state_plain_begin:
+	STATE = STATE_PLAIN;
+
+state_plain:
+	start = YYCURSOR;
+
+#line 520 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128,   0, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+	};
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy2;
+	}
+	goto yy5;
+yy2:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy2;
+	}
+#line 523 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_plain; }
+#line 572 "ext/standard/url_scanner_ex.c"
+yy5:
+	++YYCURSOR;
+#line 522 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); STATE = STATE_TAG; goto state_tag; }
+#line 577 "ext/standard/url_scanner_ex.c"
+}
+#line 524 "ext/standard/url_scanner_ex.re"
+
+
+state_tag:
+	start = YYCURSOR;
+
+#line 585 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0, 128,   0,   0,   0,   0,   0, 
+		  0, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128,   0,   0,   0,   0,   0, 
+		  0, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+	};
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy11;
+	}
+	++YYCURSOR;
+#line 530 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_plain_begin; }
+#line 630 "ext/standard/url_scanner_ex.c"
+yy11:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy11;
+	}
+#line 529 "ext/standard/url_scanner_ex.re"
+	{ handle_tag(STD_ARGS); /* Sets STATE */; passthru(STD_ARGS); if (STATE == STATE_PLAIN) goto state_plain; else goto state_next_arg; }
+#line 640 "ext/standard/url_scanner_ex.c"
+}
+#line 531 "ext/standard/url_scanner_ex.re"
+
+
+state_next_arg_begin:
+	STATE = STATE_NEXT_ARG;
+
+state_next_arg:
+	start = YYCURSOR;
+
+#line 651 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0, 128, 128, 128,   0, 128,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		128,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+	};
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy18;
+	}
+	if (yych <= '>') {
+		if (yych == '/') goto yy21;
+		if (yych >= '>') goto yy22;
+	} else {
+		if (yych <= 'Z') {
+			if (yych >= 'A') goto yy24;
+		} else {
+			if (yych <= '`') goto yy16;
+			if (yych <= 'z') goto yy24;
+		}
+	}
+yy16:
+	++YYCURSOR;
+yy17:
+#line 542 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_plain_begin; }
+#line 709 "ext/standard/url_scanner_ex.c"
+yy18:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy18;
+	}
+#line 540 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_next_arg; }
+#line 719 "ext/standard/url_scanner_ex.c"
+yy21:
+	yych = *++YYCURSOR;
+	if (yych != '>') goto yy17;
+yy22:
+	++YYCURSOR;
+#line 539 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); handle_form(STD_ARGS); goto state_plain_begin; }
+#line 727 "ext/standard/url_scanner_ex.c"
+yy24:
+	++YYCURSOR;
+#line 541 "ext/standard/url_scanner_ex.re"
+	{ --YYCURSOR; STATE = STATE_ARG; goto state_arg; }
+#line 732 "ext/standard/url_scanner_ex.c"
+}
+#line 543 "ext/standard/url_scanner_ex.re"
+
+
+state_arg:
+	start = YYCURSOR;
+
+#line 740 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0, 128,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128,   0,   0,   0,   0,   0, 
+		  0, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128, 128,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+	};
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= '@') goto yy28;
+	if (yych <= 'Z') goto yy30;
+	if (yych <= '`') goto yy28;
+	if (yych <= 'z') goto yy30;
+yy28:
+	++YYCURSOR;
+#line 549 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); STATE = STATE_NEXT_ARG; goto state_next_arg; }
+#line 787 "ext/standard/url_scanner_ex.c"
+yy30:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy30;
+	}
+#line 548 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); handle_arg(STD_ARGS); STATE = STATE_BEFORE_VAL; goto state_before_val; }
+#line 797 "ext/standard/url_scanner_ex.c"
+}
+#line 550 "ext/standard/url_scanner_ex.re"
+
+
+state_before_val:
+	start = YYCURSOR;
+
+#line 805 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		128,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+	};
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yych == ' ') goto yy37;
+	if (yych == '=') goto yy38;
+	++YYCURSOR;
+yy36:
+#line 556 "ext/standard/url_scanner_ex.re"
+	{ --YYCURSOR; goto state_next_arg_begin; }
+#line 850 "ext/standard/url_scanner_ex.c"
+yy37:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ' ') goto yy41;
+	if (yych != '=') goto yy36;
+yy38:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy38;
+	}
+#line 555 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); STATE = STATE_VAL; goto state_val; }
+#line 864 "ext/standard/url_scanner_ex.c"
+yy41:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych == ' ') goto yy41;
+	if (yych == '=') goto yy38;
+	YYCURSOR = YYMARKER;
+	goto yy36;
+}
+#line 557 "ext/standard/url_scanner_ex.re"
+
+
+
+state_val:
+	start = YYCURSOR;
+
+#line 881 "ext/standard/url_scanner_ex.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 192, 192, 224, 224, 192, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		192, 224, 128, 224, 224, 224, 224,  64, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224,   0, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+		224, 224, 224, 224, 224, 224, 224, 224, 
+	};
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 32) {
+		goto yy46;
+	}
+	if (yych <= ' ') goto yy49;
+	if (yych <= '"') goto yy51;
+	if (yych <= '\'') goto yy52;
+	goto yy49;
+yy46:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 32) {
+		goto yy46;
+	}
+#line 565 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 0, ' '); goto state_next_arg_begin; }
+#line 936 "ext/standard/url_scanner_ex.c"
+yy49:
+	++YYCURSOR;
+yy50:
+#line 566 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_next_arg_begin; }
+#line 942 "ext/standard/url_scanner_ex.c"
+yy51:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == '>') goto yy50;
+	goto yy54;
+yy52:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == '>') goto yy50;
+	goto yy59;
+yy53:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+yy54:
+	if (yybm[0+yych] & 64) {
+		goto yy53;
+	}
+	if (yych <= '"') goto yy56;
+yy55:
+	YYCURSOR = YYMARKER;
+	goto yy50;
+yy56:
+	++YYCURSOR;
+#line 563 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 1, '"'); goto state_next_arg_begin; }
+#line 967 "ext/standard/url_scanner_ex.c"
+yy58:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+yy59:
+	if (yybm[0+yych] & 128) {
+		goto yy58;
+	}
+	if (yych >= '(') goto yy55;
+	++YYCURSOR;
+#line 564 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 1, '\''); goto state_next_arg_begin; }
+#line 980 "ext/standard/url_scanner_ex.c"
+}
+#line 567 "ext/standard/url_scanner_ex.re"
+
+
+stop:
+	if (YYLIMIT < start) {
+		/* XXX: Crash avoidance. Need to work with reporter to figure out what goes wrong */
+		rest = 0;
+	} else {
+		rest = YYLIMIT - start;
+		scdebug(("stopped in state %d at pos %d (%d:%c) %d\n", STATE, YYCURSOR - ctx->buf.c, *YYCURSOR, *YYCURSOR, rest));
+	}
+
+	if (rest) memmove(ZSTR_VAL(ctx->buf.s), start, rest);
+	ZSTR_LEN(ctx->buf.s) = rest;
+}
+
+
+PHPAPI char *php_url_scanner_adapt_single_url(const char *url, size_t urllen, const char *name, const char *value, size_t *newlen, int encode)
+{
+	char *result;
+	smart_str surl = {0};
+	smart_str buf = {0};
+	smart_str url_app = {0};
+	zend_string *encoded;
+
+	smart_str_appendl(&surl, url, urllen);
+
+	if (encode) {
+		encoded = php_raw_url_encode(name, strlen(name));
+		smart_str_appendl(&url_app, ZSTR_VAL(encoded), ZSTR_LEN(encoded));
+		zend_string_free(encoded);
+	} else {
+		smart_str_appends(&url_app, name);
+	}
+	smart_str_appendc(&url_app, '=');
+	if (encode) {
+		encoded = php_raw_url_encode(value, strlen(value));
+		smart_str_appendl(&url_app, ZSTR_VAL(encoded), ZSTR_LEN(encoded));
+		zend_string_free(encoded);
+	} else {
+		smart_str_appends(&url_app, value);
+	}
+
+	append_modified_url(&surl, &buf, &url_app, PG(arg_separator).output);
+
+	smart_str_0(&buf);
+	if (newlen) *newlen = ZSTR_LEN(buf.s);
+	result = estrndup(ZSTR_VAL(buf.s), ZSTR_LEN(buf.s));
+
+	smart_str_free(&url_app);
+	smart_str_free(&buf);
+
+	return result;
+}
+
+
+static char *url_adapt_ext(const char *src, size_t srclen, size_t *newlen, bool do_flush, url_adapt_state_ex_t *ctx)
+{
+	char *retval;
+
+	xx_mainloop(ctx, src, srclen);
+
+	if (!ctx->result.s) {
+		smart_str_appendl(&ctx->result, "", 0);
+		*newlen = 0;
+	} else {
+		*newlen = ZSTR_LEN(ctx->result.s);
+	}
+	smart_str_0(&ctx->result);
+	if (do_flush) {
+		smart_str_append(&ctx->result, ctx->buf.s);
+		*newlen += ZSTR_LEN(ctx->buf.s);
+		smart_str_free(&ctx->buf);
+		smart_str_free(&ctx->val);
+		smart_str_free(&ctx->attr_val);
+	}
+	retval = estrndup(ZSTR_VAL(ctx->result.s), ZSTR_LEN(ctx->result.s));
+	smart_str_free(&ctx->result);
+	return retval;
+}
+
+static int php_url_scanner_ex_activate(int type)
+{
+	url_adapt_state_ex_t *ctx;
+
+	if (type) {
+		ctx = &BG(url_adapt_session_ex);
+	} else {
+		ctx = &BG(url_adapt_output_ex);
+	}
+
+	memset(ctx, 0, XtOffsetOf(url_adapt_state_ex_t, tags));
+
+	return SUCCESS;
+}
+
+static int php_url_scanner_ex_deactivate(int type)
+{
+	url_adapt_state_ex_t *ctx;
+
+	if (type) {
+		ctx = &BG(url_adapt_session_ex);
+	} else {
+		ctx = &BG(url_adapt_output_ex);
+	}
+
+	smart_str_free(&ctx->result);
+	smart_str_free(&ctx->buf);
+	smart_str_free(&ctx->tag);
+	smart_str_free(&ctx->arg);
+	smart_str_free(&ctx->attr_val);
+
+	return SUCCESS;
+}
+
+static inline void php_url_scanner_session_handler_impl(char *output, size_t output_len, char **handled_output, size_t *handled_output_len, int mode, int type)
+{
+	size_t len;
+	url_adapt_state_ex_t *url_state;
+
+	if (type) {
+		url_state = &BG(url_adapt_session_ex);
+	} else {
+		url_state = &BG(url_adapt_output_ex);
+	}
+
+	if (ZSTR_LEN(url_state->url_app.s) != 0) {
+		*handled_output = url_adapt_ext(output, output_len, &len, (bool) (mode & (PHP_OUTPUT_HANDLER_END | PHP_OUTPUT_HANDLER_CONT | PHP_OUTPUT_HANDLER_FLUSH | PHP_OUTPUT_HANDLER_FINAL) ? 1 : 0), url_state);
+		if (sizeof(unsigned int) < sizeof(size_t)) {
+			if (len > UINT_MAX)
+				len = UINT_MAX;
+		}
+		*handled_output_len = len;
+	} else if (ZSTR_LEN(url_state->url_app.s) == 0) {
+		url_adapt_state_ex_t *ctx = url_state;
+		if (ctx->buf.s && ZSTR_LEN(ctx->buf.s)) {
+			smart_str_append(&ctx->result, ctx->buf.s);
+			smart_str_appendl(&ctx->result, output, output_len);
+
+			*handled_output = estrndup(ZSTR_VAL(ctx->result.s), ZSTR_LEN(ctx->result.s));
+			*handled_output_len = ZSTR_LEN(ctx->buf.s) + output_len;
+
+			smart_str_free(&ctx->buf);
+			smart_str_free(&ctx->result);
+		} else {
+			*handled_output = estrndup(output, *handled_output_len = output_len);
+		}
+	} else {
+		*handled_output = NULL;
+	}
+}
+
+static void php_url_scanner_session_handler(char *output, size_t output_len, char **handled_output, size_t *handled_output_len, int mode)
+{
+	php_url_scanner_session_handler_impl(output, output_len, handled_output, handled_output_len, mode, 1);
+}
+
+static void php_url_scanner_output_handler(char *output, size_t output_len, char **handled_output, size_t *handled_output_len, int mode)
+{
+	php_url_scanner_session_handler_impl(output, output_len, handled_output, handled_output_len, mode, 0);
+}
+
+static inline int php_url_scanner_add_var_impl(const char *name, size_t name_len, const char *value, size_t value_len, int encode, int type)
+{
+	smart_str sname = {0};
+	smart_str svalue = {0};
+	smart_str hname = {0};
+	smart_str hvalue = {0};
+	zend_string *encoded;
+	url_adapt_state_ex_t *url_state;
+	php_output_handler_func_t handler;
+
+	if (type) {
+		url_state = &BG(url_adapt_session_ex);
+		handler = php_url_scanner_session_handler;
+	} else {
+		url_state = &BG(url_adapt_output_ex);
+		handler = php_url_scanner_output_handler;
+	}
+
+	if (!url_state->active) {
+		php_url_scanner_ex_activate(type);
+		php_output_start_internal(ZEND_STRL("URL-Rewriter"), handler, 0, PHP_OUTPUT_HANDLER_STDFLAGS);
+		url_state->active = 1;
+	}
+
+	if (url_state->url_app.s && ZSTR_LEN(url_state->url_app.s) != 0) {
+		smart_str_appends(&url_state->url_app, PG(arg_separator).output);
+	}
+
+	if (encode) {
+		encoded = php_raw_url_encode(name, name_len);
+		smart_str_appendl(&sname, ZSTR_VAL(encoded), ZSTR_LEN(encoded)); zend_string_free(encoded);
+		encoded = php_raw_url_encode(value, value_len);
+		smart_str_appendl(&svalue, ZSTR_VAL(encoded), ZSTR_LEN(encoded)); zend_string_free(encoded);
+		encoded = php_escape_html_entities_ex((const unsigned char *) name, name_len, 0, ENT_QUOTES|ENT_SUBSTITUTE, NULL, /* double_encode */ 0, /* quiet */ 1);
+		smart_str_appendl(&hname, ZSTR_VAL(encoded), ZSTR_LEN(encoded)); zend_string_free(encoded);
+		encoded = php_escape_html_entities_ex((const unsigned char *) value, value_len, 0, ENT_QUOTES|ENT_SUBSTITUTE, NULL, /* double_encode */ 0, /* quiet */ 1);
+		smart_str_appendl(&hvalue, ZSTR_VAL(encoded), ZSTR_LEN(encoded)); zend_string_free(encoded);
+	} else {
+		smart_str_appendl(&sname, name, name_len);
+		smart_str_appendl(&svalue, value, value_len);
+		smart_str_appendl(&hname, name, name_len);
+		smart_str_appendl(&hvalue, value, value_len);
+	}
+
+	smart_str_append_smart_str(&url_state->url_app, &sname);
+	smart_str_appendc(&url_state->url_app, '=');
+	smart_str_append_smart_str(&url_state->url_app, &svalue);
+
+	smart_str_appends(&url_state->form_app, "<input type=\"hidden\" name=\"");
+	smart_str_append_smart_str(&url_state->form_app, &hname);
+	smart_str_appends(&url_state->form_app, "\" value=\"");
+	smart_str_append_smart_str(&url_state->form_app, &hvalue);
+	smart_str_appends(&url_state->form_app, "\" />");
+
+	smart_str_free(&sname);
+	smart_str_free(&svalue);
+	smart_str_free(&hname);
+	smart_str_free(&hvalue);
+
+	return SUCCESS;
+}
+
+
+PHPAPI int php_url_scanner_add_session_var(const char *name, size_t name_len, const char *value, size_t value_len, int encode)
+{
+	return php_url_scanner_add_var_impl(name, name_len, value, value_len, encode, 1);
+}
+
+
+PHPAPI int php_url_scanner_add_var(const char *name, size_t name_len, const char *value, size_t value_len, int encode)
+{
+	return php_url_scanner_add_var_impl(name, name_len, value, value_len, encode, 0);
+}
+
+
+static inline void php_url_scanner_reset_vars_impl(int type) {
+	url_adapt_state_ex_t *url_state;
+
+	if (type) {
+		url_state = &BG(url_adapt_session_ex);
+	} else {
+		url_state = &BG(url_adapt_output_ex);
+	}
+
+	if (url_state->form_app.s) {
+		ZSTR_LEN(url_state->form_app.s) = 0;
+	}
+	if (url_state->url_app.s) {
+		ZSTR_LEN(url_state->url_app.s) = 0;
+	}
+}
+
+
+PHPAPI int php_url_scanner_reset_session_vars(void)
+{
+	php_url_scanner_reset_vars_impl(1);
+	return SUCCESS;
+}
+
+
+PHPAPI int php_url_scanner_reset_vars(void)
+{
+	php_url_scanner_reset_vars_impl(0);
+	return SUCCESS;
+}
+
+
+static inline int php_url_scanner_reset_var_impl(zend_string *name, int encode, int type)
+{
+	char *start, *end, *limit;
+	size_t separator_len;
+	smart_str sname = {0};
+	smart_str hname = {0};
+	smart_str url_app = {0};
+	smart_str form_app = {0};
+	zend_string *encoded;
+	int ret = SUCCESS;
+	bool sep_removed = 0;
+	url_adapt_state_ex_t *url_state;
+
+	if (type) {
+		url_state = &BG(url_adapt_session_ex);
+	} else {
+		url_state = &BG(url_adapt_output_ex);
+	}
+
+	/* Short circuit check. Only check url_app. */
+	if (!url_state->url_app.s || !ZSTR_LEN(url_state->url_app.s)) {
+		return SUCCESS;
+	}
+
+	if (encode) {
+		encoded = php_raw_url_encode(ZSTR_VAL(name), ZSTR_LEN(name));
+		smart_str_appendl(&sname, ZSTR_VAL(encoded), ZSTR_LEN(encoded));
+		zend_string_free(encoded);
+		encoded = php_escape_html_entities_ex((const unsigned char *) ZSTR_VAL(name), ZSTR_LEN(name), 0, ENT_QUOTES|ENT_SUBSTITUTE, SG(default_charset), /* double_encode */ 0, /* quiet */ 1);
+		smart_str_appendl(&hname, ZSTR_VAL(encoded), ZSTR_LEN(encoded));
+		zend_string_free(encoded);
+	} else {
+		smart_str_appendl(&sname, ZSTR_VAL(name), ZSTR_LEN(name));
+		smart_str_appendl(&hname, ZSTR_VAL(name), ZSTR_LEN(name));
+	}
+	smart_str_0(&sname);
+	smart_str_0(&hname);
+
+	smart_str_append_smart_str(&url_app, &sname);
+	smart_str_appendc(&url_app, '=');
+	smart_str_0(&url_app);
+
+	smart_str_appends(&form_app, "<input type=\"hidden\" name=\"");
+	smart_str_append_smart_str(&form_app, &hname);
+	smart_str_appends(&form_app, "\" value=\"");
+	smart_str_0(&form_app);
+
+	/* Short circuit check. Only check url_app. */
+	start = (char *) php_memnstr(ZSTR_VAL(url_state->url_app.s),
+								 ZSTR_VAL(url_app.s), ZSTR_LEN(url_app.s),
+								 ZSTR_VAL(url_state->url_app.s) + ZSTR_LEN(url_state->url_app.s));
+	if (!start) {
+		ret = FAILURE;
+		goto finish;
+	}
+
+	/* Get end of url var */
+	limit = ZSTR_VAL(url_state->url_app.s) + ZSTR_LEN(url_state->url_app.s);
+	end = start + ZSTR_LEN(url_app.s);
+	separator_len = strlen(PG(arg_separator).output);
+	while (end < limit) {
+		if (!memcmp(end, PG(arg_separator).output, separator_len)) {
+			end += separator_len;
+			sep_removed = 1;
+			break;
+		}
+		end++;
+	}
+	/* Remove all when this is the only rewrite var */
+	if (ZSTR_LEN(url_state->url_app.s) == end - start) {
+		php_url_scanner_reset_vars_impl(type);
+		goto finish;
+	}
+	/* Check preceding separator */
+	if (!sep_removed
+		&& (size_t)(start - PG(arg_separator).output) >= separator_len
+		&& !memcmp(start - separator_len, PG(arg_separator).output, separator_len)) {
+		start -= separator_len;
+	}
+	/* Remove partially */
+	memmove(start, end,
+			ZSTR_LEN(url_state->url_app.s) - (end - ZSTR_VAL(url_state->url_app.s)));
+	ZSTR_LEN(url_state->url_app.s) -= end - start;
+	ZSTR_VAL(url_state->url_app.s)[ZSTR_LEN(url_state->url_app.s)] = '\0';
+
+	/* Remove form var */
+	start = (char *) php_memnstr(ZSTR_VAL(url_state->form_app.s),
+						ZSTR_VAL(form_app.s), ZSTR_LEN(form_app.s),
+						ZSTR_VAL(url_state->form_app.s) + ZSTR_LEN(url_state->form_app.s));
+	if (!start) {
+		/* Should not happen */
+		ret = FAILURE;
+		php_url_scanner_reset_vars_impl(type);
+		goto finish;
+	}
+	/* Get end of form var */
+	limit = ZSTR_VAL(url_state->form_app.s) + ZSTR_LEN(url_state->form_app.s);
+	end = start + ZSTR_LEN(form_app.s);
+	while (end < limit) {
+		if (*end == '>') {
+			end += 1;
+			break;
+		}
+		end++;
+	}
+	/* Remove partially */
+	memmove(start, end,
+			ZSTR_LEN(url_state->form_app.s) - (end - ZSTR_VAL(url_state->form_app.s)));
+	ZSTR_LEN(url_state->form_app.s) -= end - start;
+	ZSTR_VAL(url_state->form_app.s)[ZSTR_LEN(url_state->form_app.s)] = '\0';
+
+finish:
+	smart_str_free(&url_app);
+	smart_str_free(&form_app);
+	smart_str_free(&sname);
+	smart_str_free(&hname);
+	return ret;
+}
+
+
+PHPAPI int php_url_scanner_reset_session_var(zend_string *name, int encode)
+{
+	return php_url_scanner_reset_var_impl(name, encode, 1);
+}
+
+
+PHPAPI int php_url_scanner_reset_var(zend_string *name, int encode)
+{
+	return php_url_scanner_reset_var_impl(name, encode, 0);
+}
+
+
+PHP_MINIT_FUNCTION(url_scanner)
+{
+	REGISTER_INI_ENTRIES();
+	return SUCCESS;
+}
+
+PHP_MSHUTDOWN_FUNCTION(url_scanner)
+{
+	UNREGISTER_INI_ENTRIES();
+
+	return SUCCESS;
+}
+
+PHP_RINIT_FUNCTION(url_scanner)
+{
+	BG(url_adapt_session_ex).active    = 0;
+	BG(url_adapt_session_ex).tag_type  = 0;
+	BG(url_adapt_session_ex).attr_type = 0;
+	BG(url_adapt_output_ex).active    = 0;
+	BG(url_adapt_output_ex).tag_type  = 0;
+	BG(url_adapt_output_ex).attr_type = 0;
+	return SUCCESS;
+}
+
+PHP_RSHUTDOWN_FUNCTION(url_scanner)
+{
+	if (BG(url_adapt_session_ex).active) {
+		php_url_scanner_ex_deactivate(1);
+		BG(url_adapt_session_ex).active    = 0;
+		BG(url_adapt_session_ex).tag_type  = 0;
+		BG(url_adapt_session_ex).attr_type = 0;
+	}
+	smart_str_free(&BG(url_adapt_session_ex).form_app);
+	smart_str_free(&BG(url_adapt_session_ex).url_app);
+
+	if (BG(url_adapt_output_ex).active) {
+		php_url_scanner_ex_deactivate(0);
+		BG(url_adapt_output_ex).active    = 0;
+		BG(url_adapt_output_ex).tag_type  = 0;
+		BG(url_adapt_output_ex).attr_type = 0;
+	}
+	smart_str_free(&BG(url_adapt_output_ex).form_app);
+	smart_str_free(&BG(url_adapt_output_ex).url_app);
+
+	return SUCCESS;
+}
diff --git a/ext/standard/var_unserializer.c b/ext/standard/var_unserializer.c
new file mode 100644
index 0000000000..e7bee0b6c9
--- /dev/null
+++ b/ext/standard/var_unserializer.c
@@ -0,0 +1,1819 @@
+/* Generated by re2c 1.3 */
+#line 1 "ext/standard/var_unserializer.re"
+/*
+  +----------------------------------------------------------------------+
+  | Copyright (c) The PHP Group                                          |
+  +----------------------------------------------------------------------+
+  | This source file is subject to version 3.01 of the PHP license,      |
+  | that is bundled with this package in the file LICENSE, and is        |
+  | available through the world-wide-web at the following url:           |
+  | https://www.php.net/license/3_01.txt                                 |
+  | If you did not receive a copy of the PHP license and are unable to   |
+  | obtain it through the world-wide-web, please send a note to          |
+  | license@php.net so we can mail you a copy immediately.               |
+  +----------------------------------------------------------------------+
+  | Author: Sascha Schumann <sascha@schumann.cx>                         |
+  +----------------------------------------------------------------------+
+*/
+
+#include "php.h"
+#include "ext/standard/php_var.h"
+#include "php_incomplete_class.h"
+#include "zend_portability.h"
+#include "zend_exceptions.h"
+
+/* {{{ reference-handling for unserializer: var_* */
+#define VAR_ENTRIES_MAX 1018     /* 1024 - offsetof(php_unserialize_data, entries) / sizeof(void*) */
+#define VAR_DTOR_ENTRIES_MAX 255 /* 256 - offsetof(var_dtor_entries, data) / sizeof(zval) */
+#define VAR_ENTRIES_DBG 0
+
+/* VAR_FLAG used in var_dtor entries to signify an entry on which
+ * __wakeup/__unserialize should be called */
+#define VAR_WAKEUP_FLAG 1
+#define VAR_UNSERIALIZE_FLAG 2
+
+/* Each element is encoded using at least 2 characters. */
+#define IS_FAKE_ELEM_COUNT(num_elems, serialized_len) \
+	((num_elems) > (serialized_len) / 2)
+
+typedef struct {
+	zend_long used_slots;
+	void *next;
+	zval *data[VAR_ENTRIES_MAX];
+} var_entries;
+
+typedef struct {
+	zend_long used_slots;
+	void *next;
+	zval data[VAR_DTOR_ENTRIES_MAX];
+} var_dtor_entries;
+
+struct php_unserialize_data {
+	var_entries      *last;
+	var_dtor_entries *first_dtor;
+	var_dtor_entries *last_dtor;
+	HashTable        *allowed_classes;
+	HashTable        *ref_props;
+	zend_long         cur_depth;
+	zend_long         max_depth;
+	var_entries       entries;
+};
+
+PHPAPI php_unserialize_data_t php_var_unserialize_init(void) {
+	php_unserialize_data_t d;
+	/* fprintf(stderr, "UNSERIALIZE_INIT    == lock: %u, level: %u\n", BG(serialize_lock), BG(unserialize).level); */
+	if (BG(serialize_lock) || !BG(unserialize).level) {
+		d = emalloc(sizeof(struct php_unserialize_data));
+		d->last = &d->entries;
+		d->first_dtor = d->last_dtor = NULL;
+		d->allowed_classes = NULL;
+		d->ref_props = NULL;
+		d->cur_depth = 0;
+		d->max_depth = BG(unserialize_max_depth);
+		d->entries.used_slots = 0;
+		d->entries.next = NULL;
+		if (!BG(serialize_lock)) {
+			BG(unserialize).data = d;
+			BG(unserialize).level = 1;
+		}
+	} else {
+		d = BG(unserialize).data;
+		++BG(unserialize).level;
+	}
+	return d;
+}
+
+PHPAPI void php_var_unserialize_destroy(php_unserialize_data_t d) {
+	/* fprintf(stderr, "UNSERIALIZE_DESTROY == lock: %u, level: %u\n", BG(serialize_lock), BG(unserialize).level); */
+	if (BG(serialize_lock) || BG(unserialize).level == 1) {
+		var_destroy(&d);
+		efree(d);
+	}
+	if (!BG(serialize_lock) && !--BG(unserialize).level) {
+		BG(unserialize).data = NULL;
+	}
+}
+
+PHPAPI HashTable *php_var_unserialize_get_allowed_classes(php_unserialize_data_t d) {
+	return d->allowed_classes;
+}
+PHPAPI void php_var_unserialize_set_allowed_classes(php_unserialize_data_t d, HashTable *classes) {
+	d->allowed_classes = classes;
+}
+
+PHPAPI void php_var_unserialize_set_max_depth(php_unserialize_data_t d, zend_long max_depth) {
+	d->max_depth = max_depth;
+}
+PHPAPI zend_long php_var_unserialize_get_max_depth(php_unserialize_data_t d) {
+	return d->max_depth;
+}
+
+PHPAPI void php_var_unserialize_set_cur_depth(php_unserialize_data_t d, zend_long cur_depth) {
+	d->cur_depth = cur_depth;
+}
+PHPAPI zend_long php_var_unserialize_get_cur_depth(php_unserialize_data_t d) {
+	return d->cur_depth;
+}
+
+static inline void var_push(php_unserialize_data_t *var_hashx, zval *rval)
+{
+	var_entries *var_hash = (*var_hashx)->last;
+#if VAR_ENTRIES_DBG
+	fprintf(stderr, "var_push(" ZEND_LONG_FMT "): %d\n", var_hash?var_hash->used_slots:-1L, Z_TYPE_P(rval));
+#endif
+
+	if (var_hash->used_slots == VAR_ENTRIES_MAX) {
+		var_hash = emalloc(sizeof(var_entries));
+		var_hash->used_slots = 0;
+		var_hash->next = 0;
+
+		(*var_hashx)->last->next = var_hash;
+		(*var_hashx)->last = var_hash;
+	}
+
+	var_hash->data[var_hash->used_slots++] = rval;
+}
+
+PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)
+{
+	if (Z_REFCOUNTED_P(rval)) {
+		zval *tmp_var = var_tmp_var(var_hashx);
+		if (!tmp_var) {
+			return;
+		}
+		ZVAL_COPY(tmp_var, rval);
+	}
+}
+
+static zend_never_inline void var_push_dtor_value(php_unserialize_data_t *var_hashx, zval *rval)
+{
+	if (Z_REFCOUNTED_P(rval)) {
+		zval *tmp_var = var_tmp_var(var_hashx);
+		if (!tmp_var) {
+			return;
+		}
+		ZVAL_COPY_VALUE(tmp_var, rval);
+	}
+}
+
+static zend_always_inline zval *tmp_var(php_unserialize_data_t *var_hashx, zend_long num)
+{
+    var_dtor_entries *var_hash;
+	zend_long used_slots;
+
+    if (!var_hashx || !*var_hashx || num < 1) {
+        return NULL;
+    }
+
+    var_hash = (*var_hashx)->last_dtor;
+    if (!var_hash || var_hash->used_slots + num > VAR_DTOR_ENTRIES_MAX) {
+        var_hash = emalloc(sizeof(var_dtor_entries));
+        var_hash->used_slots = 0;
+        var_hash->next = 0;
+
+        if (!(*var_hashx)->first_dtor) {
+            (*var_hashx)->first_dtor = var_hash;
+        } else {
+            (*var_hashx)->last_dtor->next = var_hash;
+        }
+
+        (*var_hashx)->last_dtor = var_hash;
+    }
+	for (used_slots = var_hash->used_slots; var_hash->used_slots < used_slots + num; var_hash->used_slots++) {
+		ZVAL_UNDEF(&var_hash->data[var_hash->used_slots]);
+		Z_EXTRA(var_hash->data[var_hash->used_slots]) = 0;
+	}
+    return &var_hash->data[used_slots];
+}
+
+PHPAPI zval *var_tmp_var(php_unserialize_data_t *var_hashx)
+{
+    return tmp_var(var_hashx, 1);
+}
+
+PHPAPI void var_replace(php_unserialize_data_t *var_hashx, zval *ozval, zval *nzval)
+{
+	zend_long i;
+	var_entries *var_hash = &(*var_hashx)->entries;
+#if VAR_ENTRIES_DBG
+	fprintf(stderr, "var_replace(" ZEND_LONG_FMT "): %d\n", var_hash?var_hash->used_slots:-1L, Z_TYPE_P(nzval));
+#endif
+
+	while (var_hash) {
+		for (i = 0; i < var_hash->used_slots; i++) {
+			if (var_hash->data[i] == ozval) {
+				var_hash->data[i] = nzval;
+				/* do not break here */
+			}
+		}
+		var_hash = var_hash->next;
+	}
+}
+
+static zval *var_access(php_unserialize_data_t *var_hashx, zend_long id)
+{
+	var_entries *var_hash = &(*var_hashx)->entries;
+#if VAR_ENTRIES_DBG
+	fprintf(stderr, "var_access(" ZEND_LONG_FMT "): " ZEND_LONG_FMT "\n", var_hash?var_hash->used_slots:-1L, id);
+#endif
+
+	while (id >= VAR_ENTRIES_MAX && var_hash && var_hash->used_slots == VAR_ENTRIES_MAX) {
+		var_hash = var_hash->next;
+		id -= VAR_ENTRIES_MAX;
+	}
+
+	if (!var_hash) return NULL;
+
+	if (id < 0 || id >= var_hash->used_slots) return NULL;
+
+	return var_hash->data[id];
+}
+
+PHPAPI void var_destroy(php_unserialize_data_t *var_hashx)
+{
+	void *next;
+	zend_long i;
+	var_entries *var_hash = (*var_hashx)->entries.next;
+	var_dtor_entries *var_dtor_hash = (*var_hashx)->first_dtor;
+	bool delayed_call_failed = 0;
+
+#if VAR_ENTRIES_DBG
+	fprintf(stderr, "var_destroy( " ZEND_LONG_FMT ")\n", var_hash?var_hash->used_slots:-1L);
+#endif
+
+	while (var_hash) {
+		next = var_hash->next;
+		efree_size(var_hash, sizeof(var_entries));
+		var_hash = next;
+	}
+
+	while (var_dtor_hash) {
+		for (i = 0; i < var_dtor_hash->used_slots; i++) {
+			zval *zv = &var_dtor_hash->data[i];
+#if VAR_ENTRIES_DBG
+			fprintf(stderr, "var_destroy dtor(%p, %ld)\n", &var_dtor_hash->data[i], Z_REFCOUNT_P(&var_dtor_hash->data[i]));
+#endif
+
+			if (Z_EXTRA_P(zv) == VAR_WAKEUP_FLAG) {
+				/* Perform delayed __wakeup calls */
+				if (!delayed_call_failed) {
+					zval retval;
+					zend_fcall_info fci;
+					zend_fcall_info_cache fci_cache;
+
+					ZEND_ASSERT(Z_TYPE_P(zv) == IS_OBJECT);
+
+					fci.size = sizeof(fci);
+					fci.object = Z_OBJ_P(zv);
+					fci.retval = &retval;
+					fci.param_count = 0;
+					fci.params = NULL;
+					fci.named_params = NULL;
+					ZVAL_UNDEF(&fci.function_name);
+
+					fci_cache.function_handler = zend_hash_find_ptr(
+						&fci.object->ce->function_table, ZSTR_KNOWN(ZEND_STR_WAKEUP));
+					fci_cache.object = fci.object;
+					fci_cache.called_scope = fci.object->ce;
+
+					BG(serialize_lock)++;
+					if (zend_call_function(&fci, &fci_cache) == FAILURE || Z_ISUNDEF(retval)) {
+						delayed_call_failed = 1;
+						GC_ADD_FLAGS(Z_OBJ_P(zv), IS_OBJ_DESTRUCTOR_CALLED);
+					}
+					BG(serialize_lock)--;
+
+					zval_ptr_dtor(&retval);
+				} else {
+					GC_ADD_FLAGS(Z_OBJ_P(zv), IS_OBJ_DESTRUCTOR_CALLED);
+				}
+			} else if (Z_EXTRA_P(zv) == VAR_UNSERIALIZE_FLAG) {
+				/* Perform delayed __unserialize calls */
+				if (!delayed_call_failed) {
+					zval param;
+					ZVAL_COPY(&param, &var_dtor_hash->data[i + 1]);
+
+					BG(serialize_lock)++;
+					zend_call_known_instance_method_with_1_params(
+						Z_OBJCE_P(zv)->__unserialize, Z_OBJ_P(zv), NULL, &param);
+					if (EG(exception)) {
+						delayed_call_failed = 1;
+						GC_ADD_FLAGS(Z_OBJ_P(zv), IS_OBJ_DESTRUCTOR_CALLED);
+					}
+					BG(serialize_lock)--;
+					zval_ptr_dtor(&param);
+				} else {
+					GC_ADD_FLAGS(Z_OBJ_P(zv), IS_OBJ_DESTRUCTOR_CALLED);
+				}
+			}
+
+			i_zval_ptr_dtor(zv);
+		}
+		next = var_dtor_hash->next;
+		efree_size(var_dtor_hash, sizeof(var_dtor_entries));
+		var_dtor_hash = next;
+	}
+
+	if ((*var_hashx)->ref_props) {
+		zend_hash_destroy((*var_hashx)->ref_props);
+		FREE_HASHTABLE((*var_hashx)->ref_props);
+	}
+}
+
+/* }}} */
+
+static zend_string *unserialize_str(const unsigned char **p, size_t len, size_t maxlen)
+{
+	size_t i, j;
+	zend_string *str = zend_string_safe_alloc(1, len, 0, 0);
+	unsigned char *end = *(unsigned char **)p+maxlen;
+
+	if (end < *p) {
+		zend_string_efree(str);
+		return NULL;
+	}
+
+	for (i = 0; i < len; i++) {
+		if (*p >= end) {
+			zend_string_efree(str);
+			return NULL;
+		}
+		if (**p != '\\') {
+			ZSTR_VAL(str)[i] = (char)**p;
+		} else {
+			unsigned char ch = 0;
+
+			for (j = 0; j < 2; j++) {
+				(*p)++;
+				if (**p >= '0' && **p <= '9') {
+					ch = (ch << 4) + (**p -'0');
+				} else if (**p >= 'a' && **p <= 'f') {
+					ch = (ch << 4) + (**p -'a'+10);
+				} else if (**p >= 'A' && **p <= 'F') {
+					ch = (ch << 4) + (**p -'A'+10);
+				} else {
+					zend_string_efree(str);
+					return NULL;
+				}
+			}
+			ZSTR_VAL(str)[i] = (char)ch;
+		}
+		(*p)++;
+	}
+	ZSTR_VAL(str)[i] = 0;
+	ZSTR_LEN(str) = i;
+	return str;
+}
+
+static inline int unserialize_allowed_class(
+		zend_string *lcname, php_unserialize_data_t *var_hashx)
+{
+	HashTable *classes = (*var_hashx)->allowed_classes;
+
+	if(classes == NULL) {
+		return 1;
+	}
+	if(!zend_hash_num_elements(classes)) {
+		return 0;
+	}
+
+	return zend_hash_exists(classes, lcname);
+}
+
+#define YYFILL(n) do { } while (0)
+#define YYCTYPE unsigned char
+#define YYCURSOR cursor
+#define YYLIMIT limit
+#define YYMARKER marker
+
+
+#line 395 "ext/standard/var_unserializer.re"
+
+
+
+
+static inline zend_long parse_iv2(const unsigned char *p, const unsigned char **q)
+{
+	zend_ulong result = 0;
+	zend_ulong neg = 0;
+	const unsigned char *start;
+
+	if (*p == '-') {
+		neg = 1;
+		p++;
+	} else if (UNEXPECTED(*p == '+')) {
+		p++;
+	}
+
+	while (UNEXPECTED(*p == '0')) {
+		p++;
+	}
+
+	start = p;
+
+	while (*p >= '0' && *p <= '9') {
+		result = result * 10 + ((zend_ulong)(*p) - '0');
+		p++;
+	}
+
+	if (q) {
+		*q = p;
+	}
+
+	/* number too long or overflow */
+	if (UNEXPECTED(p - start > MAX_LENGTH_OF_LONG - 1)
+	 || (SIZEOF_ZEND_LONG == 4
+	 	&& UNEXPECTED(p - start == MAX_LENGTH_OF_LONG - 1)
+	 	&& UNEXPECTED(*start > '2'))
+	 || UNEXPECTED(result > ZEND_LONG_MAX + neg)) {
+		php_error_docref(NULL, E_WARNING, "Numerical result out of range");
+		return (!neg) ? ZEND_LONG_MAX : ZEND_LONG_MIN;
+	}
+
+	return (zend_long) ((!neg) ? result : -result);
+}
+
+static inline zend_long parse_iv(const unsigned char *p)
+{
+	return parse_iv2(p, NULL);
+}
+
+/* no need to check for length - re2c already did */
+static inline size_t parse_uiv(const unsigned char *p)
+{
+	unsigned char cursor;
+	size_t result = 0;
+
+	while (1) {
+		cursor = *p;
+		if (cursor >= '0' && cursor <= '9') {
+			result = result * 10 + (size_t)(cursor - (unsigned char)'0');
+		} else {
+			break;
+		}
+		p++;
+	}
+	return result;
+}
+
+#define UNSERIALIZE_PARAMETER zval *rval, const unsigned char **p, const unsigned char *max, php_unserialize_data_t *var_hash
+#define UNSERIALIZE_PASSTHRU rval, p, max, var_hash
+
+static int php_var_unserialize_internal(UNSERIALIZE_PARAMETER);
+
+static zend_always_inline int process_nested_array_data(UNSERIALIZE_PARAMETER, HashTable *ht, zend_long elements)
+{
+	if (var_hash) {
+		if ((*var_hash)->max_depth > 0 && (*var_hash)->cur_depth >= (*var_hash)->max_depth) {
+			php_error_docref(NULL, E_WARNING,
+				"Maximum depth of " ZEND_LONG_FMT " exceeded. "
+				"The depth limit can be changed using the max_depth unserialize() option "
+				"or the unserialize_max_depth ini setting",
+				(*var_hash)->max_depth);
+			return 0;
+		}
+		(*var_hash)->cur_depth++;
+	}
+
+	while (elements-- > 0) {
+		zval key, *data;
+		zend_ulong idx;
+
+		ZVAL_UNDEF(&key);
+
+		if (!php_var_unserialize_internal(&key, p, max, NULL)) {
+			zval_ptr_dtor(&key);
+			goto failure;
+		}
+
+		if (Z_TYPE(key) == IS_LONG) {
+			idx = Z_LVAL(key);
+numeric_key:
+			data = zend_hash_index_lookup(ht, idx);
+			if (UNEXPECTED(Z_TYPE_INFO_P(data) != IS_NULL)) {
+				var_push_dtor_value(var_hash, data);
+				ZVAL_NULL(data);
+			}
+		} else if (Z_TYPE(key) == IS_STRING) {
+			if (UNEXPECTED(ZEND_HANDLE_NUMERIC(Z_STR(key), idx))) {
+				zval_ptr_dtor_str(&key);
+				goto numeric_key;
+			}
+			data = zend_hash_lookup(ht, Z_STR(key));
+			if (UNEXPECTED(Z_TYPE_INFO_P(data) != IS_NULL)) {
+				var_push_dtor_value(var_hash, data);
+				ZVAL_NULL(data);
+			}
+			zval_ptr_dtor_str(&key);
+		} else {
+			zval_ptr_dtor(&key);
+			goto failure;
+		}
+
+		if (!php_var_unserialize_internal(data, p, max, var_hash)) {
+			goto failure;
+		}
+
+		if (elements && *(*p-1) != ';' && *(*p-1) != '}') {
+			(*p)--;
+			goto failure;
+		}
+	}
+
+	if (var_hash) {
+		(*var_hash)->cur_depth--;
+	}
+	return 1;
+
+failure:
+	if (var_hash) {
+		(*var_hash)->cur_depth--;
+	}
+	return 0;
+}
+
+static int is_property_visibility_changed(zend_class_entry *ce, zval *key)
+{
+	if (zend_hash_num_elements(&ce->properties_info) > 0) {
+		zend_property_info *existing_propinfo;
+		const char *unmangled_class = NULL;
+		const char *unmangled_prop;
+		size_t unmangled_prop_len;
+
+		if (UNEXPECTED(zend_unmangle_property_name_ex(Z_STR_P(key), &unmangled_class, &unmangled_prop, &unmangled_prop_len) == FAILURE)) {
+			zval_ptr_dtor_str(key);
+			return -1;
+		}
+
+		if (unmangled_class == NULL) {
+			existing_propinfo = zend_hash_find_ptr(&ce->properties_info, Z_STR_P(key));
+			if (existing_propinfo != NULL) {
+				zval_ptr_dtor_str(key);
+				ZVAL_STR_COPY(key, existing_propinfo->name);
+				return 1;
+			}
+		} else {
+			if (!strcmp(unmangled_class, "*")
+			 || !strcasecmp(unmangled_class, ZSTR_VAL(ce->name))) {
+				existing_propinfo = zend_hash_str_find_ptr(
+					&ce->properties_info, unmangled_prop, unmangled_prop_len);
+				if (existing_propinfo != NULL) {
+					zval_ptr_dtor_str(key);
+					ZVAL_STR_COPY(key, existing_propinfo->name);
+					return 1;
+				}
+			}
+		}
+	}
+	return 0;
+}
+
+
+static zend_always_inline int process_nested_object_data(UNSERIALIZE_PARAMETER, HashTable *ht, zend_long elements, zend_object *obj)
+{
+	if (var_hash) {
+		if ((*var_hash)->max_depth > 0 && (*var_hash)->cur_depth >= (*var_hash)->max_depth) {
+			php_error_docref(NULL, E_WARNING,
+				"Maximum depth of " ZEND_LONG_FMT " exceeded. "
+				"The depth limit can be changed using the max_depth unserialize() option "
+				"or the unserialize_max_depth ini setting",
+				(*var_hash)->max_depth);
+			return 0;
+		}
+		(*var_hash)->cur_depth++;
+	}
+
+	while (elements-- > 0) {
+		zval key, *data;
+		zend_property_info *info = NULL;
+
+		ZVAL_UNDEF(&key);
+
+		if (!php_var_unserialize_internal(&key, p, max, NULL)) {
+			zval_ptr_dtor(&key);
+			goto failure;
+		}
+
+		if (EXPECTED(Z_TYPE(key) == IS_STRING)) {
+string_key:
+			data = zend_hash_find(ht, Z_STR(key));
+			if (data != NULL) {
+				if (Z_TYPE_P(data) == IS_INDIRECT) {
+declared_property:
+					/* This is a property with a declaration */
+					data = Z_INDIRECT_P(data);
+					info = zend_get_typed_property_info_for_slot(obj, data);
+					if (info) {
+						if (Z_ISREF_P(data)) {
+							/* If the value is overwritten, remove old type source from ref. */
+							ZEND_REF_DEL_TYPE_SOURCE(Z_REF_P(data), info);
+						}
+
+						if ((*var_hash)->ref_props) {
+							/* Remove old entry from ref_props table, if it exists. */
+							zend_hash_index_del(
+								(*var_hash)->ref_props, (zend_uintptr_t) data);
+						}
+					}
+					/* We may override default property value, but they are usually immutable */
+					if (Z_REFCOUNTED_P(data)) {
+						var_push_dtor_value(var_hash, data);
+					}
+					ZVAL_NULL(data);
+				} else {
+					/* Unusual override of dynamic property */
+					int ret = is_property_visibility_changed(obj->ce, &key);
+
+					if (ret > 0) {
+						goto second_try;
+					} else if (!ret) {
+						var_push_dtor_value(var_hash, data);
+						ZVAL_NULL(data);
+					} else if (ret < 0) {
+						goto failure;
+					}
+				}
+			} else {
+				int ret = is_property_visibility_changed(obj->ce, &key);
+
+				if (EXPECTED(!ret)) {
+					data = zend_hash_add_new(ht, Z_STR(key), &EG(uninitialized_zval));
+				} else if (ret < 0) {
+					goto failure;
+				} else {
+second_try:
+					data = zend_hash_lookup(ht, Z_STR(key));
+					if (Z_TYPE_P(data) == IS_INDIRECT) {
+						goto declared_property;
+					} else if (UNEXPECTED(Z_TYPE_INFO_P(data) != IS_NULL)) {
+						var_push_dtor_value(var_hash, data);
+						ZVAL_NULL(data);
+					}
+				}
+			}
+			zval_ptr_dtor_str(&key);
+		} else if (Z_TYPE(key) == IS_LONG) {
+			/* object properties should include no integers */
+			convert_to_string(&key);
+			goto string_key;
+		} else {
+			zval_ptr_dtor(&key);
+			goto failure;
+		}
+
+		if (!php_var_unserialize_internal(data, p, max, var_hash)) {
+			if (info && Z_ISREF_P(data)) {
+				/* Add type source even if we failed to unserialize.
+				 * The data is still stored in the property. */
+				ZEND_REF_ADD_TYPE_SOURCE(Z_REF_P(data), info);
+			}
+			goto failure;
+		}
+
+		if (UNEXPECTED(info)) {
+			if (!zend_verify_prop_assignable_by_ref(info, data, /* strict */ 1)) {
+				zval_ptr_dtor(data);
+				ZVAL_UNDEF(data);
+				goto failure;
+			}
+
+			if (Z_ISREF_P(data)) {
+				ZEND_REF_ADD_TYPE_SOURCE(Z_REF_P(data), info);
+			} else {
+				/* Remember to which property this slot belongs, so we can add a
+				 * type source if it is turned into a reference lateron. */
+				if (!(*var_hash)->ref_props) {
+					(*var_hash)->ref_props = emalloc(sizeof(HashTable));
+					zend_hash_init((*var_hash)->ref_props, 8, NULL, NULL, 0);
+				}
+				zend_hash_index_update_ptr(
+					(*var_hash)->ref_props, (zend_uintptr_t) data, info);
+			}
+		}
+
+		if (elements && *(*p-1) != ';' && *(*p-1) != '}') {
+			(*p)--;
+			goto failure;
+		}
+	}
+
+	if (var_hash) {
+		(*var_hash)->cur_depth--;
+	}
+	return 1;
+
+failure:
+	if (var_hash) {
+		(*var_hash)->cur_depth--;
+	}
+	return 0;
+}
+
+static inline int finish_nested_data(UNSERIALIZE_PARAMETER)
+{
+	if (*p >= max || **p != '}') {
+		return 0;
+	}
+
+	(*p)++;
+	return 1;
+}
+
+static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)
+{
+	zend_long datalen;
+
+	datalen = parse_iv2((*p) + 2, p);
+
+	(*p) += 2;
+
+	if (datalen < 0 || (max - (*p)) <= datalen) {
+		zend_error(E_WARNING, "Insufficient data for unserializing - " ZEND_LONG_FMT " required, " ZEND_LONG_FMT " present", datalen, (zend_long)(max - (*p)));
+		return 0;
+	}
+
+	/* Check that '}' is present before calling ce->unserialize() to mitigate issues
+	 * with unserialize reading past the end of the passed buffer if the string is not
+	 * appropriately terminated (usually NUL terminated, but '}' is also sufficient.) */
+	if ((*p)[datalen] != '}') {
+		return 0;
+	}
+
+	if (ce->unserialize == NULL) {
+		zend_error(E_WARNING, "Class %s has no unserializer", ZSTR_VAL(ce->name));
+		object_init_ex(rval, ce);
+	} else if (ce->unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash) != SUCCESS) {
+		return 0;
+	}
+
+	(*p) += datalen + 1; /* +1 for '}' */
+	return 1;
+}
+
+#ifdef PHP_WIN32
+# pragma optimize("", off)
+#endif
+static inline int object_common(UNSERIALIZE_PARAMETER, zend_long elements, bool has_unserialize)
+{
+	HashTable *ht;
+	bool has_wakeup;
+
+	if (has_unserialize) {
+		zval ary, *tmp;
+
+		if (elements >= HT_MAX_SIZE) {
+			return 0;
+		}
+
+		array_init_size(&ary, elements);
+		/* Avoid reallocation due to packed -> mixed conversion. */
+		zend_hash_real_init_mixed(Z_ARRVAL(ary));
+		if (!process_nested_array_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL(ary), elements)) {
+			ZVAL_DEREF(rval);
+			GC_ADD_FLAGS(Z_OBJ_P(rval), IS_OBJ_DESTRUCTOR_CALLED);
+			zval_ptr_dtor(&ary);
+			return 0;
+		}
+
+		/* Delay __unserialize() call until end of serialization. We use two slots here to
+		 * store both the object and the unserialized data array. */
+		ZVAL_DEREF(rval);
+		tmp = tmp_var(var_hash, 2);
+		ZVAL_COPY(tmp, rval);
+		Z_EXTRA_P(tmp) = VAR_UNSERIALIZE_FLAG;
+		tmp++;
+		ZVAL_COPY_VALUE(tmp, &ary);
+
+		return finish_nested_data(UNSERIALIZE_PASSTHRU);
+	}
+
+	has_wakeup = Z_OBJCE_P(rval) != PHP_IC_ENTRY
+		&& zend_hash_exists(&Z_OBJCE_P(rval)->function_table, ZSTR_KNOWN(ZEND_STR_WAKEUP));
+
+	ht = Z_OBJPROP_P(rval);
+	if (elements >= (zend_long)(HT_MAX_SIZE - zend_hash_num_elements(ht))) {
+		return 0;
+	}
+
+	zend_hash_extend(ht, zend_hash_num_elements(ht) + elements, HT_FLAGS(ht) & HASH_FLAG_PACKED);
+	if (!process_nested_object_data(UNSERIALIZE_PASSTHRU, ht, elements, Z_OBJ_P(rval))) {
+		if (has_wakeup) {
+			ZVAL_DEREF(rval);
+			GC_ADD_FLAGS(Z_OBJ_P(rval), IS_OBJ_DESTRUCTOR_CALLED);
+		}
+		return 0;
+	}
+
+	ZVAL_DEREF(rval);
+	if (has_wakeup) {
+		/* Delay __wakeup call until end of serialization */
+		zval *wakeup_var = var_tmp_var(var_hash);
+		ZVAL_COPY(wakeup_var, rval);
+		Z_EXTRA_P(wakeup_var) = VAR_WAKEUP_FLAG;
+	}
+
+	return finish_nested_data(UNSERIALIZE_PASSTHRU);
+}
+#ifdef PHP_WIN32
+# pragma optimize("", on)
+#endif
+
+PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)
+{
+	var_entries *orig_var_entries = (*var_hash)->last;
+	zend_long orig_used_slots = orig_var_entries ? orig_var_entries->used_slots : 0;
+	int result;
+
+	result = php_var_unserialize_internal(UNSERIALIZE_PASSTHRU);
+
+	if (!result) {
+		/* If the unserialization failed, mark all elements that have been added to var_hash
+		 * as NULL. This will forbid their use by other unserialize() calls in the same
+		 * unserialization context. */
+		var_entries *e = orig_var_entries;
+		zend_long s = orig_used_slots;
+		while (e) {
+			for (; s < e->used_slots; s++) {
+				e->data[s] = NULL;
+			}
+
+			e = e->next;
+			s = 0;
+		}
+	}
+
+	return result;
+}
+
+static int php_var_unserialize_internal(UNSERIALIZE_PARAMETER)
+{
+	const unsigned char *cursor, *limit, *marker, *start;
+	zval *rval_ref;
+
+	limit = max;
+	cursor = *p;
+
+	if (YYCURSOR >= YYLIMIT) {
+		return 0;
+	}
+
+	if (var_hash && (*p)[0] != 'R') {
+		var_push(var_hash, rval);
+	}
+
+	start = cursor;
+
+
+#line 868 "ext/standard/var_unserializer.c"
+{
+	YYCTYPE yych;
+	static const unsigned char yybm[] = {
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		128, 128, 128, 128, 128, 128, 128, 128, 
+		128, 128,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+		  0,   0,   0,   0,   0,   0,   0,   0, 
+	};
+	if ((YYLIMIT - YYCURSOR) < 7) YYFILL(7);
+	yych = *YYCURSOR;
+	switch (yych) {
+	case 'C':
+	case 'O':	goto yy4;
+	case 'E':	goto yy5;
+	case 'N':	goto yy6;
+	case 'R':	goto yy7;
+	case 'S':	goto yy8;
+	case 'a':	goto yy9;
+	case 'b':	goto yy10;
+	case 'd':	goto yy11;
+	case 'i':	goto yy12;
+	case 'r':	goto yy13;
+	case 's':	goto yy14;
+	case '}':	goto yy15;
+	default:	goto yy2;
+	}
+yy2:
+	++YYCURSOR;
+yy3:
+#line 1395 "ext/standard/var_unserializer.re"
+	{ return 0; }
+#line 928 "ext/standard/var_unserializer.c"
+yy4:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy17;
+	goto yy3;
+yy5:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy19;
+	goto yy3;
+yy6:
+	yych = *++YYCURSOR;
+	if (yych == ';') goto yy20;
+	goto yy3;
+yy7:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy22;
+	goto yy3;
+yy8:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy23;
+	goto yy3;
+yy9:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy24;
+	goto yy3;
+yy10:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy25;
+	goto yy3;
+yy11:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy26;
+	goto yy3;
+yy12:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy27;
+	goto yy3;
+yy13:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy28;
+	goto yy3;
+yy14:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == ':') goto yy29;
+	goto yy3;
+yy15:
+	++YYCURSOR;
+#line 1389 "ext/standard/var_unserializer.re"
+	{
+	/* this is the case where we have less data than planned */
+	php_error_docref(NULL, E_NOTICE, "Unexpected end of serialized data");
+	return 0; /* not sure if it should be 0 or 1 here? */
+}
+#line 981 "ext/standard/var_unserializer.c"
+yy17:
+	yych = *++YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy30;
+	}
+yy18:
+	YYCURSOR = YYMARKER;
+	goto yy3;
+yy19:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy32;
+	goto yy18;
+yy20:
+	++YYCURSOR;
+#line 928 "ext/standard/var_unserializer.re"
+	{
+	*p = YYCURSOR;
+	ZVAL_NULL(rval);
+	return 1;
+}
+#line 1003 "ext/standard/var_unserializer.c"
+yy22:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy34;
+	goto yy18;
+yy23:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy36;
+	goto yy18;
+yy24:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy38;
+	goto yy18;
+yy25:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '0') goto yy40;
+	if (yych <= '1') goto yy41;
+	goto yy18;
+yy26:
+	yych = *++YYCURSOR;
+	if (yych <= '/') {
+		if (yych <= ',') {
+			if (yych == '+') goto yy42;
+			goto yy18;
+		} else {
+			if (yych <= '-') goto yy43;
+			if (yych <= '.') goto yy44;
+			goto yy18;
+		}
+	} else {
+		if (yych <= 'I') {
+			if (yych <= '9') goto yy45;
+			if (yych <= 'H') goto yy18;
+			goto yy47;
+		} else {
+			if (yych == 'N') goto yy48;
+			goto yy18;
+		}
+	}
+yy27:
+	yych = *++YYCURSOR;
+	if (yych <= ',') {
+		if (yych == '+') goto yy49;
+		goto yy18;
+	} else {
+		if (yych <= '-') goto yy49;
+		if (yych <= '/') goto yy18;
+		if (yych <= '9') goto yy50;
+		goto yy18;
+	}
+yy28:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy52;
+	goto yy18;
+yy29:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy54;
+	goto yy18;
+yy30:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yybm[0+yych] & 128) {
+		goto yy30;
+	}
+	if (yych <= '/') goto yy18;
+	if (yych <= ':') goto yy56;
+	goto yy18;
+yy32:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy32;
+	if (yych <= ':') goto yy57;
+	goto yy18;
+yy34:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy34;
+	if (yych == ';') goto yy58;
+	goto yy18;
+yy36:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy36;
+	if (yych <= ':') goto yy60;
+	goto yy18;
+yy38:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy38;
+	if (yych <= ':') goto yy61;
+	goto yy18;
+yy40:
+	yych = *++YYCURSOR;
+	if (yych == ';') goto yy62;
+	goto yy18;
+yy41:
+	yych = *++YYCURSOR;
+	if (yych == ';') goto yy64;
+	goto yy18;
+yy42:
+	yych = *++YYCURSOR;
+	if (yych == '.') goto yy44;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy45;
+	goto yy18;
+yy43:
+	yych = *++YYCURSOR;
+	if (yych <= '/') {
+		if (yych != '.') goto yy18;
+	} else {
+		if (yych <= '9') goto yy45;
+		if (yych == 'I') goto yy47;
+		goto yy18;
+	}
+yy44:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy66;
+	goto yy18;
+yy45:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
+	yych = *YYCURSOR;
+	if (yych <= ':') {
+		if (yych <= '.') {
+			if (yych <= '-') goto yy18;
+			goto yy66;
+		} else {
+			if (yych <= '/') goto yy18;
+			if (yych <= '9') goto yy45;
+			goto yy18;
+		}
+	} else {
+		if (yych <= 'E') {
+			if (yych <= ';') goto yy68;
+			if (yych <= 'D') goto yy18;
+			goto yy70;
+		} else {
+			if (yych == 'e') goto yy70;
+			goto yy18;
+		}
+	}
+yy47:
+	yych = *++YYCURSOR;
+	if (yych == 'N') goto yy71;
+	goto yy18;
+yy48:
+	yych = *++YYCURSOR;
+	if (yych == 'A') goto yy72;
+	goto yy18;
+yy49:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych >= ':') goto yy18;
+yy50:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy50;
+	if (yych == ';') goto yy73;
+	goto yy18;
+yy52:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy52;
+	if (yych == ';') goto yy75;
+	goto yy18;
+yy54:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy54;
+	if (yych <= ':') goto yy77;
+	goto yy18;
+yy56:
+	yych = *++YYCURSOR;
+	if (yych == '"') goto yy78;
+	goto yy18;
+yy57:
+	yych = *++YYCURSOR;
+	if (yych == '"') goto yy80;
+	goto yy18;
+yy58:
+	++YYCURSOR;
+#line 872 "ext/standard/var_unserializer.re"
+	{
+	zend_long id;
+
+ 	*p = YYCURSOR;
+	if (!var_hash) return 0;
+
+	id = parse_uiv(start + 2) - 1;
+	if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {
+		return 0;
+	}
+
+	if (rval_ref == rval || (Z_ISREF_P(rval_ref) && Z_REFVAL_P(rval_ref) == rval)) {
+		return 0;
+	}
+
+	if (!Z_ISREF_P(rval_ref)) {
+		zend_property_info *info = NULL;
+		if ((*var_hash)->ref_props) {
+			info = zend_hash_index_find_ptr((*var_hash)->ref_props, (zend_uintptr_t) rval_ref);
+		}
+		ZVAL_NEW_REF(rval_ref, rval_ref);
+		if (info) {
+			ZEND_REF_ADD_TYPE_SOURCE(Z_REF_P(rval_ref), info);
+		}
+	}
+
+	ZVAL_COPY(rval, rval_ref);
+
+	return 1;
+}
+#line 1237 "ext/standard/var_unserializer.c"
+yy60:
+	yych = *++YYCURSOR;
+	if (yych == '"') goto yy82;
+	goto yy18;
+yy61:
+	yych = *++YYCURSOR;
+	if (yych == '{') goto yy84;
+	goto yy18;
+yy62:
+	++YYCURSOR;
+#line 934 "ext/standard/var_unserializer.re"
+	{
+	*p = YYCURSOR;
+	ZVAL_FALSE(rval);
+	return 1;
+}
+#line 1254 "ext/standard/var_unserializer.c"
+yy64:
+	++YYCURSOR;
+#line 940 "ext/standard/var_unserializer.re"
+	{
+	*p = YYCURSOR;
+	ZVAL_TRUE(rval);
+	return 1;
+}
+#line 1263 "ext/standard/var_unserializer.c"
+yy66:
+	++YYCURSOR;
+	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
+	yych = *YYCURSOR;
+	if (yych <= ';') {
+		if (yych <= '/') goto yy18;
+		if (yych <= '9') goto yy66;
+		if (yych <= ':') goto yy18;
+	} else {
+		if (yych <= 'E') {
+			if (yych <= 'D') goto yy18;
+			goto yy70;
+		} else {
+			if (yych == 'e') goto yy70;
+			goto yy18;
+		}
+	}
+yy68:
+	++YYCURSOR;
+#line 988 "ext/standard/var_unserializer.re"
+	{
+#if SIZEOF_ZEND_LONG == 4
+use_double:
+#endif
+	*p = YYCURSOR;
+	ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));
+	return 1;
+}
+#line 1292 "ext/standard/var_unserializer.c"
+yy70:
+	yych = *++YYCURSOR;
+	if (yych <= ',') {
+		if (yych == '+') goto yy86;
+		goto yy18;
+	} else {
+		if (yych <= '-') goto yy86;
+		if (yych <= '/') goto yy18;
+		if (yych <= '9') goto yy87;
+		goto yy18;
+	}
+yy71:
+	yych = *++YYCURSOR;
+	if (yych == 'F') goto yy89;
+	goto yy18;
+yy72:
+	yych = *++YYCURSOR;
+	if (yych == 'N') goto yy89;
+	goto yy18;
+yy73:
+	++YYCURSOR;
+#line 946 "ext/standard/var_unserializer.re"
+	{
+#if SIZEOF_ZEND_LONG == 4
+	int digits = YYCURSOR - start - 3;
+
+	if (start[2] == '-' || start[2] == '+') {
+		digits--;
+	}
+
+	/* Use double for large zend_long values that were serialized on a 64-bit system */
+	if (digits >= MAX_LENGTH_OF_LONG - 1) {
+		if (digits == MAX_LENGTH_OF_LONG - 1) {
+			int cmp = strncmp((char*)YYCURSOR - MAX_LENGTH_OF_LONG, long_min_digits, MAX_LENGTH_OF_LONG - 1);
+
+			if (!(cmp < 0 || (cmp == 0 && start[2] == '-'))) {
+				goto use_double;
+			}
+		} else {
+			goto use_double;
+		}
+	}
+#endif
+	*p = YYCURSOR;
+	ZVAL_LONG(rval, parse_iv(start + 2));
+	return 1;
+}
+#line 1340 "ext/standard/var_unserializer.c"
+yy75:
+	++YYCURSOR;
+#line 903 "ext/standard/var_unserializer.re"
+	{
+	zend_long id;
+
+ 	*p = YYCURSOR;
+	if (!var_hash) return 0;
+
+	id = parse_uiv(start + 2) - 1;
+	if (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {
+		return 0;
+	}
+
+	if (rval_ref == rval) {
+		return 0;
+	}
+
+	ZVAL_DEREF(rval_ref);
+	if (Z_TYPE_P(rval_ref) != IS_OBJECT) {
+		return 0;
+	}
+
+	ZVAL_COPY(rval, rval_ref);
+
+	return 1;
+}
+#line 1368 "ext/standard/var_unserializer.c"
+yy77:
+	yych = *++YYCURSOR;
+	if (yych == '"') goto yy90;
+	goto yy18;
+yy78:
+	++YYCURSOR;
+#line 1101 "ext/standard/var_unserializer.re"
+	{
+	size_t len, maxlen;
+	zend_long elements;
+	char *str;
+	zend_string *class_name;
+	zend_class_entry *ce;
+	bool incomplete_class = 0;
+	bool custom_object = 0;
+	bool has_unserialize = 0;
+
+	zval user_func;
+	zval retval;
+	zval args[1];
+
+    if (!var_hash) return 0;
+	if (*start == 'C') {
+		custom_object = 1;
+	}
+
+	len = parse_uiv(start + 2);
+	maxlen = max - YYCURSOR;
+	if (maxlen < len || len == 0) {
+		*p = start + 2;
+		return 0;
+	}
+
+	str = (char*)YYCURSOR;
+
+	YYCURSOR += len;
+
+	if (*(YYCURSOR) != '"') {
+		*p = YYCURSOR;
+		return 0;
+	}
+	if (*(YYCURSOR+1) != ':') {
+		*p = YYCURSOR+1;
+		return 0;
+	}
+
+	if (len == 0) {
+		/* empty class names are not allowed */
+		return 0;
+	}
+
+	if (str[0] == '\000') {
+		/* runtime definition keys are not allowed */
+		return 0;
+	}
+
+	if (str[0] == '\\') {
+		/* class name can't start from namespace separator */
+		return 0;
+	}
+
+	class_name = zend_string_init_interned(str, len, 0);
+
+	do {
+		zend_string *lc_name;
+
+		if (!(*var_hash)->allowed_classes && ZSTR_HAS_CE_CACHE(class_name)) {
+			ce = ZSTR_GET_CE_CACHE(class_name);
+			if (ce) {
+				break;
+			}
+		}
+
+		lc_name = zend_string_tolower(class_name);
+		if(!unserialize_allowed_class(lc_name, var_hash)) {
+			zend_string_release_ex(lc_name, 0);
+			if (!zend_is_valid_class_name(class_name)) {
+				zend_string_release_ex(class_name, 0);
+				return 0;
+			}
+			incomplete_class = 1;
+			ce = PHP_IC_ENTRY;
+			break;
+		}
+
+		if ((*var_hash)->allowed_classes && ZSTR_HAS_CE_CACHE(class_name)) {
+			ce = ZSTR_GET_CE_CACHE(class_name);
+			if (ce) {
+				zend_string_release_ex(lc_name, 0);
+				break;
+			}
+		}
+
+		ce = zend_hash_find_ptr(EG(class_table), lc_name);
+		if (ce
+		 && (ce->ce_flags & ZEND_ACC_LINKED)
+		 && !(ce->ce_flags & ZEND_ACC_ANON_CLASS)) {
+			zend_string_release_ex(lc_name, 0);
+			break;
+		}
+
+		if (!ZSTR_HAS_CE_CACHE(class_name) && !zend_is_valid_class_name(class_name)) {
+			zend_string_release_ex(lc_name, 0);
+			zend_string_release_ex(class_name, 0);
+			return 0;
+		}
+
+		/* Try to find class directly */
+		BG(serialize_lock)++;
+		ce = zend_lookup_class_ex(class_name, lc_name, 0);
+		BG(serialize_lock)--;
+		zend_string_release_ex(lc_name, 0);
+		if (EG(exception)) {
+			zend_string_release_ex(class_name, 0);
+			return 0;
+		}
+
+		if (ce) {
+			break;
+		}
+
+		/* Check for unserialize callback */
+		if ((PG(unserialize_callback_func) == NULL) || (PG(unserialize_callback_func)[0] == '\0')) {
+			incomplete_class = 1;
+			ce = PHP_IC_ENTRY;
+			break;
+		}
+
+		/* Call unserialize callback */
+		ZVAL_STRING(&user_func, PG(unserialize_callback_func));
+
+		ZVAL_STR(&args[0], class_name);
+		BG(serialize_lock)++;
+		call_user_function(NULL, NULL, &user_func, &retval, 1, args);
+		BG(serialize_lock)--;
+		zval_ptr_dtor(&retval);
+
+		if (EG(exception)) {
+			zend_string_release_ex(class_name, 0);
+			zval_ptr_dtor(&user_func);
+			return 0;
+		}
+
+		/* The callback function may have defined the class */
+		BG(serialize_lock)++;
+		if ((ce = zend_lookup_class(class_name)) == NULL) {
+			php_error_docref(NULL, E_WARNING, "Function %s() hasn't defined the class it was called for", Z_STRVAL(user_func));
+			incomplete_class = 1;
+			ce = PHP_IC_ENTRY;
+		}
+		BG(serialize_lock)--;
+
+		zval_ptr_dtor(&user_func);
+	} while (0);
+
+	*p = YYCURSOR;
+
+	if (ce->ce_flags & ZEND_ACC_NOT_SERIALIZABLE) {
+		zend_throw_exception_ex(NULL, 0, "Unserialization of '%s' is not allowed",
+			ZSTR_VAL(ce->name));
+		zend_string_release_ex(class_name, 0);
+		return 0;
+	}
+
+	if (custom_object) {
+		int ret;
+
+		ret = object_custom(UNSERIALIZE_PASSTHRU, ce);
+
+		if (ret && incomplete_class) {
+			php_store_class_name(rval, class_name);
+		}
+		zend_string_release_ex(class_name, 0);
+		return ret;
+	}
+
+	if (*p >= max - 2) {
+		zend_error(E_WARNING, "Bad unserialize data");
+		zend_string_release_ex(class_name, 0);
+		return 0;
+	}
+
+	elements = parse_iv2(*p + 2, p);
+	if (elements < 0 || IS_FAKE_ELEM_COUNT(elements, max - YYCURSOR)) {
+		zend_string_release_ex(class_name, 0);
+		return 0;
+	}
+
+	*p += 2;
+
+	has_unserialize = !incomplete_class && ce->__unserialize;
+
+	/* If this class implements Serializable, it should not land here but in object_custom().
+	 * The passed string obviously doesn't descend from the regular serializer. However, if
+	 * there is both Serializable::unserialize() and __unserialize(), then both may be used,
+	 * depending on the serialization format. */
+	if (ce->serialize != NULL && !has_unserialize) {
+		zend_error(E_WARNING, "Erroneous data format for unserializing '%s'", ZSTR_VAL(ce->name));
+		zend_string_release_ex(class_name, 0);
+		return 0;
+	}
+
+	if (object_init_ex(rval, ce) == FAILURE) {
+		zend_string_release_ex(class_name, 0);
+		return 0;
+	}
+
+	if (incomplete_class) {
+		php_store_class_name(rval, class_name);
+	}
+	zend_string_release_ex(class_name, 0);
+
+	return object_common(UNSERIALIZE_PASSTHRU, elements, has_unserialize);
+}
+#line 1583 "ext/standard/var_unserializer.c"
+yy80:
+	++YYCURSOR;
+#line 1309 "ext/standard/var_unserializer.re"
+	{
+	if (!var_hash) return 0;
+
+	size_t len = parse_uiv(start + 2);
+	size_t maxlen = max - YYCURSOR;
+	if (maxlen < len || len == 0) {
+		*p = start + 2;
+		return 0;
+	}
+
+	char *str = (char *) YYCURSOR;
+	YYCURSOR += len;
+
+	if (*(YYCURSOR) != '"') {
+		*p = YYCURSOR;
+		return 0;
+	}
+	if (*(YYCURSOR+1) != ';') {
+		*p = YYCURSOR+1;
+		return 0;
+	}
+
+	char *colon_ptr = memchr(str, ':', len);
+	if (colon_ptr == NULL) {
+		php_error_docref(NULL, E_WARNING, "Invalid enum name '%.*s' (missing colon)", (int) len, str);
+		return 0;
+	}
+	size_t colon_pos = colon_ptr - str;
+
+	zend_string *enum_name = zend_string_init(str, colon_pos, 0);
+	zend_string *case_name = zend_string_init(&str[colon_pos + 1], len - colon_pos - 1, 0);
+
+	if (!zend_is_valid_class_name(enum_name)) {
+		goto fail;
+	}
+
+	zend_class_entry *ce = zend_lookup_class(enum_name);
+	if (!ce) {
+		php_error_docref(NULL, E_WARNING, "Class '%s' not found", ZSTR_VAL(enum_name));
+		goto fail;
+	}
+	if (!(ce->ce_flags & ZEND_ACC_ENUM)) {
+		php_error_docref(NULL, E_WARNING, "Class '%s' is not an enum", ZSTR_VAL(enum_name));
+		goto fail;
+	}
+
+	YYCURSOR += 2;
+	*p = YYCURSOR;
+
+	zend_class_constant *c = zend_hash_find_ptr(CE_CONSTANTS_TABLE(ce), case_name);
+	if (!c) {
+		php_error_docref(NULL, E_WARNING, "Undefined constant %s::%s", ZSTR_VAL(enum_name), ZSTR_VAL(case_name));
+		goto fail;
+	}
+
+	if (!(ZEND_CLASS_CONST_FLAGS(c) & ZEND_CLASS_CONST_IS_CASE)) {
+		php_error_docref(NULL, E_WARNING, "%s::%s is not an enum case", ZSTR_VAL(enum_name), ZSTR_VAL(case_name));
+		goto fail;
+	}
+
+	zend_string_release_ex(enum_name, 0);
+	zend_string_release_ex(case_name, 0);
+
+	zval *value = &c->value;
+	if (Z_TYPE_P(value) == IS_CONSTANT_AST) {
+		if (zval_update_constant_ex(value, c->ce) == FAILURE) {
+			return 0;
+		}
+	}
+	ZEND_ASSERT(Z_TYPE_P(value) == IS_OBJECT);
+	ZVAL_COPY(rval, value);
+
+	return 1;
+
+fail:
+	zend_string_release_ex(enum_name, 0);
+	zend_string_release_ex(case_name, 0);
+	return 0;
+}
+#line 1666 "ext/standard/var_unserializer.c"
+yy82:
+	++YYCURSOR;
+#line 1034 "ext/standard/var_unserializer.re"
+	{
+	size_t len, maxlen;
+	zend_string *str;
+
+	len = parse_uiv(start + 2);
+	maxlen = max - YYCURSOR;
+	if (maxlen < len) {
+		*p = start + 2;
+		return 0;
+	}
+
+	if ((str = unserialize_str(&YYCURSOR, len, maxlen)) == NULL) {
+		return 0;
+	}
+
+	if (*(YYCURSOR) != '"') {
+		zend_string_efree(str);
+		*p = YYCURSOR;
+		return 0;
+	}
+
+	if (*(YYCURSOR + 1) != ';') {
+		efree(str);
+		*p = YYCURSOR + 1;
+		return 0;
+	}
+
+	YYCURSOR += 2;
+	*p = YYCURSOR;
+
+	ZVAL_STR(rval, str);
+	return 1;
+}
+#line 1703 "ext/standard/var_unserializer.c"
+yy84:
+	++YYCURSOR;
+#line 1068 "ext/standard/var_unserializer.re"
+	{
+	zend_long elements = parse_iv(start + 2);
+	/* use iv() not uiv() in order to check data range */
+	*p = YYCURSOR;
+    if (!var_hash) return 0;
+
+	if (elements < 0 || elements >= HT_MAX_SIZE || IS_FAKE_ELEM_COUNT(elements, max - YYCURSOR)) {
+		return 0;
+	}
+
+	if (elements) {
+		array_init_size(rval, elements);
+		/* we can't convert from packed to hash during unserialization, because
+		   reference to some zvals might be kept in var_hash (to support references) */
+		zend_hash_real_init_mixed(Z_ARRVAL_P(rval));
+	} else {
+		ZVAL_EMPTY_ARRAY(rval);
+		return finish_nested_data(UNSERIALIZE_PASSTHRU);
+	}
+
+	/* The array may contain references to itself, in which case we'll be modifying an
+	 * rc>1 array. This is okay, since the array is, ostensibly, only visible to
+	 * unserialize (in practice unserialization handlers also see it). Ideally we should
+	 * prohibit "r:" references to non-objects, as we only generate them for objects. */
+	HT_ALLOW_COW_VIOLATION(Z_ARRVAL_P(rval));
+
+	if (!process_nested_array_data(UNSERIALIZE_PASSTHRU, Z_ARRVAL_P(rval), elements)) {
+		return 0;
+	}
+
+	return finish_nested_data(UNSERIALIZE_PASSTHRU);
+}
+#line 1739 "ext/standard/var_unserializer.c"
+yy86:
+	yych = *++YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych >= ':') goto yy18;
+yy87:
+	++YYCURSOR;
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+	if (yych <= '/') goto yy18;
+	if (yych <= '9') goto yy87;
+	if (yych == ';') goto yy68;
+	goto yy18;
+yy89:
+	yych = *++YYCURSOR;
+	if (yych == ';') goto yy92;
+	goto yy18;
+yy90:
+	++YYCURSOR;
+#line 997 "ext/standard/var_unserializer.re"
+	{
+	size_t len, maxlen;
+	char *str;
+
+	len = parse_uiv(start + 2);
+	maxlen = max - YYCURSOR;
+	if (maxlen < len) {
+		*p = start + 2;
+		return 0;
+	}
+
+	str = (char*)YYCURSOR;
+
+	YYCURSOR += len;
+
+	if (*(YYCURSOR) != '"') {
+		*p = YYCURSOR;
+		return 0;
+	}
+
+	if (*(YYCURSOR + 1) != ';') {
+		*p = YYCURSOR + 1;
+		return 0;
+	}
+
+	YYCURSOR += 2;
+	*p = YYCURSOR;
+
+	if (!var_hash) {
+		/* Array or object key unserialization */
+		ZVAL_STR(rval, zend_string_init_existing_interned(str, len, 0));
+	} else {
+		ZVAL_STRINGL_FAST(rval, str, len);
+	}
+	return 1;
+}
+#line 1795 "ext/standard/var_unserializer.c"
+yy92:
+	++YYCURSOR;
+#line 972 "ext/standard/var_unserializer.re"
+	{
+	*p = YYCURSOR;
+
+	if (!strncmp((char*)start + 2, "NAN", 3)) {
+		ZVAL_DOUBLE(rval, ZEND_NAN);
+	} else if (!strncmp((char*)start + 2, "INF", 3)) {
+		ZVAL_DOUBLE(rval, ZEND_INFINITY);
+	} else if (!strncmp((char*)start + 2, "-INF", 4)) {
+		ZVAL_DOUBLE(rval, -ZEND_INFINITY);
+	} else {
+		ZVAL_NULL(rval);
+	}
+
+	return 1;
+}
+#line 1814 "ext/standard/var_unserializer.c"
+}
+#line 1397 "ext/standard/var_unserializer.re"
+
+
+	return 0;
+}
diff --git a/main/internal_functions.c b/main/internal_functions.c
new file mode 100644
index 0000000000..9302f84e2f
--- /dev/null
+++ b/main/internal_functions.c
@@ -0,0 +1,85 @@
+/*
+   +----------------------------------------------------------------------+
+   | Copyright (c) The PHP Group                                          |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | https://www.php.net/license/3_01.txt                                 |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Authors: Andi Gutmans <andi@php.net>                                 |
+   |          Zeev Suraski <zeev@php.net>                                 |
+   +----------------------------------------------------------------------+
+ */
+
+#include "php.h"
+#include "php_main.h"
+#include "zend_modules.h"
+#include "zend_compile.h"
+#include <stdarg.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "ext/date/php_date.h"
+#include "ext/libxml/php_libxml.h"
+#include "ext/pcre/php_pcre.h"
+#include "ext/sqlite3/php_sqlite3.h"
+#include "ext/ctype/php_ctype.h"
+#include "ext/dom/php_dom.h"
+#include "ext/fileinfo/php_fileinfo.h"
+#include "ext/filter/php_filter.h"
+#include "ext/hash/php_hash.h"
+#include "ext/iconv/php_iconv.h"
+#include "ext/json/php_json.h"
+#include "ext/pdo/php_pdo.h"
+#include "ext/pdo_sqlite/php_pdo_sqlite.h"
+#include "ext/phar/php_phar.h"
+#include "ext/posix/php_posix.h"
+#include "ext/reflection/php_reflection.h"
+#include "ext/session/php_session.h"
+#include "ext/simplexml/php_simplexml.h"
+#include "ext/spl/php_spl.h"
+#include "ext/standard/php_standard.h"
+#include "ext/tokenizer/php_tokenizer.h"
+#include "ext/xml/php_xml.h"
+#include "ext/xmlreader/php_xmlreader.h"
+#include "ext/xmlwriter/php_xmlwriter.h"
+
+
+static zend_module_entry * const php_builtin_extensions[] = {
+	phpext_date_ptr,
+	phpext_libxml_ptr,
+	phpext_pcre_ptr,
+	phpext_sqlite3_ptr,
+	phpext_ctype_ptr,
+	phpext_dom_ptr,
+	phpext_fileinfo_ptr,
+	phpext_filter_ptr,
+	phpext_hash_ptr,
+	phpext_iconv_ptr,
+	phpext_json_ptr,
+	phpext_standard_ptr,
+	phpext_spl_ptr,
+	phpext_pdo_ptr,
+	phpext_pdo_sqlite_ptr,
+	phpext_phar_ptr,
+	phpext_posix_ptr,
+	phpext_reflection_ptr,
+	phpext_session_ptr,
+	phpext_simplexml_ptr,
+	phpext_tokenizer_ptr,
+	phpext_xml_ptr,
+	phpext_xmlreader_ptr,
+	phpext_xmlwriter_ptr,
+
+};
+
+#define EXTCOUNT (sizeof(php_builtin_extensions)/sizeof(zend_module_entry *))
+
+PHPAPI int php_register_internal_extensions(void)
+{
+	return php_register_extensions(php_builtin_extensions, EXTCOUNT);
+}
diff --git a/main/internal_functions_cli.c b/main/internal_functions_cli.c
new file mode 100644
index 0000000000..9302f84e2f
--- /dev/null
+++ b/main/internal_functions_cli.c
@@ -0,0 +1,85 @@
+/*
+   +----------------------------------------------------------------------+
+   | Copyright (c) The PHP Group                                          |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | https://www.php.net/license/3_01.txt                                 |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Authors: Andi Gutmans <andi@php.net>                                 |
+   |          Zeev Suraski <zeev@php.net>                                 |
+   +----------------------------------------------------------------------+
+ */
+
+#include "php.h"
+#include "php_main.h"
+#include "zend_modules.h"
+#include "zend_compile.h"
+#include <stdarg.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "ext/date/php_date.h"
+#include "ext/libxml/php_libxml.h"
+#include "ext/pcre/php_pcre.h"
+#include "ext/sqlite3/php_sqlite3.h"
+#include "ext/ctype/php_ctype.h"
+#include "ext/dom/php_dom.h"
+#include "ext/fileinfo/php_fileinfo.h"
+#include "ext/filter/php_filter.h"
+#include "ext/hash/php_hash.h"
+#include "ext/iconv/php_iconv.h"
+#include "ext/json/php_json.h"
+#include "ext/pdo/php_pdo.h"
+#include "ext/pdo_sqlite/php_pdo_sqlite.h"
+#include "ext/phar/php_phar.h"
+#include "ext/posix/php_posix.h"
+#include "ext/reflection/php_reflection.h"
+#include "ext/session/php_session.h"
+#include "ext/simplexml/php_simplexml.h"
+#include "ext/spl/php_spl.h"
+#include "ext/standard/php_standard.h"
+#include "ext/tokenizer/php_tokenizer.h"
+#include "ext/xml/php_xml.h"
+#include "ext/xmlreader/php_xmlreader.h"
+#include "ext/xmlwriter/php_xmlwriter.h"
+
+
+static zend_module_entry * const php_builtin_extensions[] = {
+	phpext_date_ptr,
+	phpext_libxml_ptr,
+	phpext_pcre_ptr,
+	phpext_sqlite3_ptr,
+	phpext_ctype_ptr,
+	phpext_dom_ptr,
+	phpext_fileinfo_ptr,
+	phpext_filter_ptr,
+	phpext_hash_ptr,
+	phpext_iconv_ptr,
+	phpext_json_ptr,
+	phpext_standard_ptr,
+	phpext_spl_ptr,
+	phpext_pdo_ptr,
+	phpext_pdo_sqlite_ptr,
+	phpext_phar_ptr,
+	phpext_posix_ptr,
+	phpext_reflection_ptr,
+	phpext_session_ptr,
+	phpext_simplexml_ptr,
+	phpext_tokenizer_ptr,
+	phpext_xml_ptr,
+	phpext_xmlreader_ptr,
+	phpext_xmlwriter_ptr,
+
+};
+
+#define EXTCOUNT (sizeof(php_builtin_extensions)/sizeof(zend_module_entry *))
+
+PHPAPI int php_register_internal_extensions(void)
+{
+	return php_register_extensions(php_builtin_extensions, EXTCOUNT);
+}
diff --git a/sapi/phpdbg/phpdbg_lexer.c b/sapi/phpdbg/phpdbg_lexer.c
new file mode 100644
index 0000000000..692d56cc8f
--- /dev/null
+++ b/sapi/phpdbg/phpdbg_lexer.c
@@ -0,0 +1,2085 @@
+/* Generated by re2c 1.3 */
+#line 1 "sapi/phpdbg/phpdbg_lexer.l"
+/*
+ * phpdbg_lexer.l
+ */
+
+#include "phpdbg.h"
+#include "phpdbg_cmd.h"
+
+#include "phpdbg_parser.h"
+
+#define LEX(v) (PHPDBG_G(lexer).v)
+
+#define YYCTYPE unsigned char
+#define YYSETCONDITION(x) LEX(state) = x;
+#define YYGETCONDITION() LEX(state)
+#define YYCURSOR LEX(cursor)
+#define YYMARKER LEX(marker)
+#define YYCTXMARKER LEX(ctxmarker)
+#define yyleng LEX(len)
+#define yytext ((char*) LEX(text))
+#undef YYDEBUG
+#define YYDEBUG(a, b)
+#define YYFILL(n)
+
+#define NORMAL 0
+#define PRE_RAW 1
+#define RAW 2
+#define INITIAL 3
+
+ZEND_EXTERN_MODULE_GLOBALS(phpdbg)
+
+void phpdbg_init_lexer (phpdbg_param_t *stack, char *input) {
+	PHPDBG_G(parser_stack) = stack;
+
+	YYSETCONDITION(INITIAL);
+
+	LEX(text) = YYCURSOR = (unsigned char *) input;
+	LEX(len) = strlen(input);
+}
+
+static int unescape_string(char *s) {
+	switch (*s) {
+		case '\'':
+		case '\"': {
+			char start = *s;
+			size_t off = 1;
+			do {
+				if (s[off] == '\\') {
+					off++;
+				}
+				*s = s[off];
+			} while ((++s)[off] != start);
+			return off + 1;
+		}
+	}
+
+	return 0;
+}
+
+int phpdbg_lex (phpdbg_param_t* yylval) {
+
+restart:
+	LEX(text) = YYCURSOR;
+
+
+#line 68 "sapi/phpdbg/phpdbg_lexer.c"
+{
+	YYCTYPE yych;
+	unsigned int yyaccept = 0;
+	if (YYGETCONDITION() < 2) {
+		if (YYGETCONDITION() < 1) {
+			goto yyc_NORMAL;
+		} else {
+			goto yyc_PRE_RAW;
+		}
+	} else {
+		if (YYGETCONDITION() < 3) {
+			goto yyc_RAW;
+		} else {
+			goto yyc_INITIAL;
+		}
+	}
+/* *********************************** */
+yyc_NORMAL:
+	{
+		static const unsigned char yybm[] = {
+			/* table 1 .. 8: 0 */
+			  0,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  40,   0,  62,  62,  40,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 40,  62,  50,  40,  62,  62,  62,  14, 
+			 62,  62,  62,  62,  62,  62,  63,  62, 
+			127, 127, 127, 127, 127, 127, 127, 127, 
+			127, 127,  40,  62,  62,  62,  62,  62, 
+			 62, 254, 254, 254, 254, 254, 254, 190, 
+			190, 190, 190, 190, 190, 190, 190, 190, 
+			190, 190, 190, 190, 190, 190, 190, 190, 
+			190, 190, 190,  62,   2,  62,  62, 190, 
+			 62, 254, 254, 254, 254, 254, 254, 190, 
+			190, 190, 190, 190, 190, 190, 190, 190, 
+			190, 190, 190, 190, 190, 190, 190, 190, 
+			190, 190, 190,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			 62,  62,  62,  62,  62,  62,  62,  62, 
+			/* table 9 .. 10: 256 */
+			  0,  64,  64,  64,  64,  64,  64,  64, 
+			 64, 128,   0,  64,  64, 128,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			128,  64,   0,   0,  64,  64,  64,   0, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,   0,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+			 64,  64,  64,  64,  64,  64,  64,  64, 
+		};
+		YYDEBUG(1, *YYCURSOR);
+		YYFILL(11);
+		yych = *YYCURSOR;
+		if (yybm[256+yych] & 128) {
+			goto yy8;
+		}
+		switch (yych) {
+		case 0x00:
+		case '\t':
+		case '\n':	goto yy3;
+		case '"':	goto yy11;
+		case '#':	goto yy13;
+		case '\'':	goto yy15;
+		case '-':	goto yy16;
+		case '.':
+		case '1':
+		case '2':
+		case '3':
+		case '4':
+		case '5':
+		case '6':
+		case '7':
+		case '8':
+		case '9':	goto yy17;
+		case '0':	goto yy20;
+		case ':':	goto yy21;
+		case 'D':
+		case 'd':	goto yy22;
+		case 'E':
+		case 'e':	goto yy23;
+		case 'F':
+		case 'f':	goto yy24;
+		case 'I':
+		case 'i':	goto yy25;
+		case 'N':
+		case 'n':	goto yy26;
+		case 'O':
+		case 'o':	goto yy27;
+		case 'T':
+		case 't':	goto yy28;
+		case 'Y':
+		case 'y':	goto yy29;
+		case 'Z':	goto yy30;
+		case 'z':	goto yy31;
+		default:	goto yy5;
+		}
+yy3:
+		YYDEBUG(3, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(4, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 89 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	return 0;
+}
+#line 211 "sapi/phpdbg/phpdbg_lexer.c"
+yy5:
+		YYDEBUG(5, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+yy6:
+		YYDEBUG(6, *YYCURSOR);
+		if (yybm[256+yych] & 64) {
+			goto yy5;
+		}
+		if (yych <= ' ') goto yy7;
+		if (yych == '#') goto yy7;
+		if (yych <= '\'') goto yy32;
+		goto yy34;
+yy7:
+		YYDEBUG(7, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 161 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, STR_PARAM);
+	yylval->str = estrndup(yytext, yyleng - unescape_string(yytext));
+	yylval->len = yyleng;
+	return T_ID;
+}
+#line 237 "sapi/phpdbg/phpdbg_lexer.c"
+yy8:
+		YYDEBUG(8, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(9, *YYCURSOR);
+		if (yybm[256+yych] & 128) {
+			goto yy8;
+		}
+		YYDEBUG(10, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 175 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	/* ignore whitespace */
+
+	goto restart;
+}
+#line 255 "sapi/phpdbg/phpdbg_lexer.c"
+yy11:
+		YYDEBUG(11, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '"') goto yy32;
+		goto yy36;
+yy12:
+		YYDEBUG(12, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		if (yyaccept <= 3) {
+			if (yyaccept <= 1) {
+				if (yyaccept == 0) {
+					goto yy7;
+				} else {
+					goto yy14;
+				}
+			} else {
+				if (yyaccept == 2) {
+					goto yy19;
+				} else {
+					goto yy83;
+				}
+			}
+		} else {
+			if (yyaccept <= 5) {
+				if (yyaccept == 4) {
+					goto yy86;
+				} else {
+					goto yy102;
+				}
+			} else {
+				goto yy119;
+			}
+		}
+yy13:
+		YYDEBUG(13, *YYCURSOR);
+		yyaccept = 1;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '.') {
+			if (yych <= ',') goto yy14;
+			if (yych <= '-') {
+				YYCTXMARKER = YYCURSOR;
+				goto yy41;
+			}
+			YYCTXMARKER = YYCURSOR;
+			goto yy42;
+		} else {
+			if (yych <= '/') goto yy14;
+			if (yych <= '9') {
+				YYCTXMARKER = YYCURSOR;
+				goto yy42;
+			}
+		}
+yy14:
+		YYDEBUG(14, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 110 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(INITIAL);
+	return T_SEPARATOR;
+}
+#line 316 "sapi/phpdbg/phpdbg_lexer.c"
+yy15:
+		YYDEBUG(15, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '\'') goto yy32;
+		goto yy46;
+yy16:
+		YYDEBUG(16, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 1) {
+			goto yy17;
+		}
+		if (yych == 'r') goto yy51;
+		goto yy6;
+yy17:
+		YYDEBUG(17, *YYCURSOR);
+		yyaccept = 2;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		YYDEBUG(18, *YYCURSOR);
+		if (yybm[0+yych] & 1) {
+			goto yy17;
+		}
+		if (yych <= ' ') {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy19;
+				if (yych <= 0x08) goto yy5;
+			} else {
+				if (yych == '\r') goto yy19;
+				if (yych <= 0x1F) goto yy5;
+			}
+		} else {
+			if (yych <= '&') {
+				if (yych <= '!') goto yy5;
+				if (yych <= '"') goto yy32;
+				if (yych >= '$') goto yy5;
+			} else {
+				if (yych <= '\'') goto yy32;
+				if (yych <= '/') goto yy5;
+				if (yych <= ':') goto yy34;
+				goto yy5;
+			}
+		}
+yy19:
+		YYDEBUG(19, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 142 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, NUMERIC_PARAM);
+	yylval->num = atoi(yytext);
+	return T_DIGITS;
+}
+#line 370 "sapi/phpdbg/phpdbg_lexer.c"
+yy20:
+		YYDEBUG(20, *YYCURSOR);
+		yyaccept = 2;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 1) {
+			goto yy17;
+		}
+		if (yych <= 0x1F) {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy19;
+				if (yych <= 0x08) goto yy6;
+				goto yy19;
+			} else {
+				if (yych == '\r') goto yy19;
+				goto yy6;
+			}
+		} else {
+			if (yych <= '#') {
+				if (yych <= ' ') goto yy19;
+				if (yych <= '"') goto yy6;
+				goto yy19;
+			} else {
+				if (yych == 'x') goto yy52;
+				goto yy6;
+			}
+		}
+yy21:
+		YYDEBUG(21, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == ':') goto yy55;
+		if (yych == '\\') goto yy57;
+		goto yy53;
+yy22:
+		YYDEBUG(22, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'I') goto yy59;
+		if (yych == 'i') goto yy59;
+		goto yy6;
+yy23:
+		YYDEBUG(23, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy60;
+		if (yych == 'n') goto yy60;
+		goto yy6;
+yy24:
+		YYDEBUG(24, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy61;
+		if (yych == 'a') goto yy61;
+		goto yy6;
+yy25:
+		YYDEBUG(25, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy62;
+		if (yych == 'f') goto yy62;
+		goto yy6;
+yy26:
+		YYDEBUG(26, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'O') goto yy63;
+		if (yych == 'o') goto yy63;
+		goto yy6;
+yy27:
+		YYDEBUG(27, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 'N') {
+			if (yych == 'F') goto yy64;
+			if (yych <= 'M') goto yy6;
+			goto yy65;
+		} else {
+			if (yych <= 'f') {
+				if (yych <= 'e') goto yy6;
+				goto yy64;
+			} else {
+				if (yych == 'n') goto yy65;
+				goto yy6;
+			}
+		}
+yy28:
+		YYDEBUG(28, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'R') goto yy66;
+		if (yych == 'r') goto yy66;
+		goto yy6;
+yy29:
+		YYDEBUG(29, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy67;
+		if (yych == 'e') goto yy67;
+		goto yy6;
+yy30:
+		YYDEBUG(30, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy68;
+		goto yy6;
+yy31:
+		YYDEBUG(31, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'e') goto yy69;
+		goto yy6;
+yy32:
+		YYDEBUG(32, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+yy33:
+		YYDEBUG(33, *YYCURSOR);
+		if (yybm[0+yych] & 2) {
+			goto yy32;
+		}
+		if (yych <= '#') goto yy12;
+		goto yy70;
+yy34:
+		YYDEBUG(34, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy71;
+		if (yych == '\\') goto yy57;
+		goto yy12;
+yy35:
+		YYDEBUG(35, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(4);
+		yych = *YYCURSOR;
+yy36:
+		YYDEBUG(36, *YYCURSOR);
+		if (yybm[0+yych] & 4) {
+			goto yy35;
+		}
+		if (yych <= ' ') {
+			if (yych <= 0x00) goto yy12;
+			if (yych == '\n') goto yy12;
+		} else {
+			if (yych <= '"') goto yy72;
+			if (yych <= '#') goto yy37;
+			if (yych <= ':') goto yy39;
+			goto yy40;
+		}
+yy37:
+		YYDEBUG(37, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy38:
+		YYDEBUG(38, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy37;
+		}
+		if (yych <= '\n') goto yy12;
+		if (yych <= '"') goto yy73;
+		goto yy74;
+yy39:
+		YYDEBUG(39, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy75;
+		goto yy38;
+yy40:
+		YYDEBUG(40, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		if (yych <= ' ') {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy12;
+				if (yych <= 0x08) goto yy32;
+				goto yy12;
+			} else {
+				if (yych == '\r') goto yy12;
+				if (yych <= 0x1F) goto yy32;
+				goto yy12;
+			}
+		} else {
+			if (yych <= '9') {
+				if (yych <= '!') goto yy32;
+				if (yych <= '"') goto yy35;
+				if (yych <= '#') goto yy12;
+				goto yy32;
+			} else {
+				if (yych <= ':') goto yy70;
+				if (yych == '\\') goto yy35;
+				goto yy32;
+			}
+		}
+yy41:
+		YYDEBUG(41, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '.') goto yy42;
+		if (yych <= '/') goto yy12;
+		if (yych >= ':') goto yy12;
+yy42:
+		YYDEBUG(42, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(43, *YYCURSOR);
+		if (yych == '.') goto yy42;
+		if (yych <= '/') goto yy44;
+		if (yych <= '9') goto yy42;
+yy44:
+		YYDEBUG(44, *YYCURSOR);
+		YYCURSOR = YYCTXMARKER;
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 106 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	return T_POUND;
+}
+#line 586 "sapi/phpdbg/phpdbg_lexer.c"
+yy45:
+		YYDEBUG(45, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(4);
+		yych = *YYCURSOR;
+yy46:
+		YYDEBUG(46, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy45;
+		}
+		if (yych <= '\n') {
+			if (yych <= 0x00) goto yy12;
+			if (yych >= '\n') goto yy12;
+		} else {
+			if (yych <= '#') goto yy47;
+			if (yych <= '\'') goto yy72;
+			if (yych <= ':') goto yy49;
+			goto yy50;
+		}
+yy47:
+		YYDEBUG(47, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+yy48:
+		YYDEBUG(48, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy47;
+		}
+		if (yych <= '\n') goto yy12;
+		if (yych <= '\'') goto yy73;
+		goto yy76;
+yy49:
+		YYDEBUG(49, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy77;
+		goto yy48;
+yy50:
+		YYDEBUG(50, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		if (yych <= '"') {
+			if (yych <= '\f') {
+				if (yych <= 0x00) goto yy12;
+				if (yych <= 0x08) goto yy32;
+				if (yych <= '\n') goto yy12;
+				goto yy32;
+			} else {
+				if (yych <= '\r') goto yy12;
+				if (yych == ' ') goto yy12;
+				goto yy32;
+			}
+		} else {
+			if (yych <= '9') {
+				if (yych <= '#') goto yy12;
+				if (yych == '\'') goto yy45;
+				goto yy32;
+			} else {
+				if (yych <= ':') goto yy70;
+				if (yych == '\\') goto yy45;
+				goto yy32;
+			}
+		}
+yy51:
+		YYDEBUG(51, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= ' ') {
+			if (yych <= '\f') {
+				if (yych == '\t') goto yy78;
+				goto yy6;
+			} else {
+				if (yych <= '\r') goto yy78;
+				if (yych <= 0x1F) goto yy6;
+				goto yy78;
+			}
+		} else {
+			if (yych <= '.') {
+				if (yych <= ',') goto yy6;
+				if (yych <= '-') goto yy80;
+				goto yy81;
+			} else {
+				if (yych <= '/') goto yy6;
+				if (yych <= '9') goto yy81;
+				goto yy6;
+			}
+		}
+yy52:
+		YYDEBUG(52, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy84;
+		}
+		goto yy6;
+yy53:
+		YYDEBUG(53, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(54, *YYCURSOR);
+		YYCURSOR -= 1;
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 119 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	return T_COLON;
+}
+#line 693 "sapi/phpdbg/phpdbg_lexer.c"
+yy55:
+		YYDEBUG(55, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(56, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 115 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	return T_DCOLON;
+}
+#line 703 "sapi/phpdbg/phpdbg_lexer.c"
+yy57:
+		YYDEBUG(57, *YYCURSOR);
+		yyaccept = 0;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(58, *YYCURSOR);
+		if (yych <= ' ') {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy7;
+				if (yych <= 0x08) goto yy57;
+				goto yy7;
+			} else {
+				if (yych == '\r') goto yy7;
+				if (yych <= 0x1F) goto yy57;
+				goto yy7;
+			}
+		} else {
+			if (yych <= '&') {
+				if (yych <= '!') goto yy57;
+				if (yych <= '#') goto yy7;
+				goto yy57;
+			} else {
+				if (yych <= '\'') goto yy7;
+				if (yych == ':') goto yy87;
+				goto yy57;
+			}
+		}
+yy59:
+		YYDEBUG(59, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy88;
+		if (yych == 's') goto yy88;
+		goto yy6;
+yy60:
+		YYDEBUG(60, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy89;
+		if (yych == 'a') goto yy89;
+		goto yy6;
+yy61:
+		YYDEBUG(61, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy90;
+		if (yych == 'l') goto yy90;
+		goto yy6;
+yy62:
+		YYDEBUG(62, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy91;
+			goto yy6;
+		} else {
+			if (yych <= '\r') goto yy91;
+			if (yych == ' ') goto yy91;
+			goto yy6;
+		}
+yy63:
+		YYDEBUG(63, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\f') {
+			if (yych <= 0x00) goto yy94;
+			if (yych <= 0x08) goto yy6;
+			if (yych <= '\n') goto yy94;
+			goto yy6;
+		} else {
+			if (yych <= '\r') goto yy94;
+			if (yych == ' ') goto yy94;
+			goto yy6;
+		}
+yy64:
+		YYDEBUG(64, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'F') goto yy63;
+		if (yych == 'f') goto yy63;
+		goto yy6;
+yy65:
+		YYDEBUG(65, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\f') {
+			if (yych <= 0x00) goto yy96;
+			if (yych <= 0x08) goto yy6;
+			if (yych <= '\n') goto yy96;
+			goto yy6;
+		} else {
+			if (yych <= '\r') goto yy96;
+			if (yych == ' ') goto yy96;
+			goto yy6;
+		}
+yy66:
+		YYDEBUG(66, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy98;
+		if (yych == 'u') goto yy98;
+		goto yy6;
+yy67:
+		YYDEBUG(67, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy65;
+		if (yych == 's') goto yy65;
+		goto yy6;
+yy68:
+		YYDEBUG(68, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'N') goto yy99;
+		goto yy6;
+yy69:
+		YYDEBUG(69, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'n') goto yy100;
+		goto yy6;
+yy70:
+		YYDEBUG(70, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych != '/') goto yy12;
+yy71:
+		YYDEBUG(71, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy101;
+		goto yy12;
+yy72:
+		YYDEBUG(72, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= '\r') {
+			if (yych <= 0x08) {
+				if (yych <= 0x00) goto yy7;
+				goto yy33;
+			} else {
+				if (yych <= '\n') goto yy7;
+				if (yych <= '\f') goto yy33;
+				goto yy7;
+			}
+		} else {
+			if (yych <= ' ') {
+				if (yych <= 0x1F) goto yy33;
+				goto yy7;
+			} else {
+				if (yych == '#') goto yy7;
+				goto yy33;
+			}
+		}
+yy73:
+		YYDEBUG(73, *YYCURSOR);
+		++YYCURSOR;
+		goto yy7;
+yy74:
+		YYDEBUG(74, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych == '"') goto yy37;
+		if (yych == '\\') goto yy37;
+		goto yy12;
+yy75:
+		YYDEBUG(75, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy103;
+		goto yy38;
+yy76:
+		YYDEBUG(76, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych == '\'') goto yy47;
+		if (yych == '\\') goto yy47;
+		goto yy12;
+yy77:
+		YYDEBUG(77, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '/') goto yy104;
+		goto yy48;
+yy78:
+		YYDEBUG(78, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(79, *YYCURSOR);
+		if (yych <= ' ') {
+			if (yych <= '\f') {
+				if (yych == '\t') goto yy78;
+				goto yy12;
+			} else {
+				if (yych <= '\r') goto yy78;
+				if (yych <= 0x1F) goto yy12;
+				goto yy78;
+			}
+		} else {
+			if (yych <= '.') {
+				if (yych <= ',') goto yy12;
+				if (yych <= '-') goto yy105;
+				goto yy106;
+			} else {
+				if (yych <= '/') goto yy12;
+				if (yych <= '9') goto yy106;
+				goto yy12;
+			}
+		}
+yy80:
+		YYDEBUG(80, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '.') goto yy81;
+		if (yych <= '/') goto yy6;
+		if (yych >= ':') goto yy6;
+yy81:
+		YYDEBUG(81, *YYCURSOR);
+		yyaccept = 3;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		YYDEBUG(82, *YYCURSOR);
+		if (yych <= '"') {
+			if (yych <= '\f') {
+				if (yych <= 0x00) goto yy83;
+				if (yych <= 0x08) goto yy5;
+				if (yych >= '\v') goto yy5;
+			} else {
+				if (yych <= 0x1F) {
+					if (yych >= 0x0E) goto yy5;
+				} else {
+					if (yych <= ' ') goto yy83;
+					if (yych <= '!') goto yy5;
+					goto yy32;
+				}
+			}
+		} else {
+			if (yych <= '-') {
+				if (yych <= '#') goto yy83;
+				if (yych == '\'') goto yy32;
+				goto yy5;
+			} else {
+				if (yych <= '/') {
+					if (yych <= '.') goto yy81;
+					goto yy5;
+				} else {
+					if (yych <= '9') goto yy81;
+					if (yych <= ':') goto yy34;
+					goto yy5;
+				}
+			}
+		}
+yy83:
+		YYDEBUG(83, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 93 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	char *text = yytext + 2;
+	while (*++text < '0');
+	yylval->num = atoi(text);
+	return T_REQ_ID;
+}
+#line 967 "sapi/phpdbg/phpdbg_lexer.c"
+yy84:
+		YYDEBUG(84, *YYCURSOR);
+		yyaccept = 4;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		YYDEBUG(85, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy84;
+		}
+		if (yych <= ' ') {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy86;
+				if (yych <= 0x08) goto yy5;
+			} else {
+				if (yych == '\r') goto yy86;
+				if (yych <= 0x1F) goto yy5;
+			}
+		} else {
+			if (yych <= '&') {
+				if (yych <= '!') goto yy5;
+				if (yych <= '"') goto yy32;
+				if (yych >= '$') goto yy5;
+			} else {
+				if (yych <= '\'') goto yy32;
+				if (yych <= '/') goto yy5;
+				if (yych <= ':') goto yy34;
+				goto yy5;
+			}
+		}
+yy86:
+		YYDEBUG(86, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 148 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, ADDR_PARAM);
+	yylval->addr = strtoul(yytext, 0, 16);
+	return T_ADDR;
+}
+#line 1007 "sapi/phpdbg/phpdbg_lexer.c"
+yy87:
+		YYDEBUG(87, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych == '\\') goto yy57;
+		goto yy12;
+yy88:
+		YYDEBUG(88, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'A') goto yy108;
+		if (yych == 'a') goto yy108;
+		goto yy6;
+yy89:
+		YYDEBUG(89, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'B') goto yy109;
+		if (yych == 'b') goto yy109;
+		goto yy6;
+yy90:
+		YYDEBUG(90, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'S') goto yy110;
+		if (yych == 's') goto yy110;
+		goto yy6;
+yy91:
+		YYDEBUG(91, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(92, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy91;
+		} else {
+			if (yych <= '\r') goto yy91;
+			if (yych == ' ') goto yy91;
+		}
+		YYDEBUG(93, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 100 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(RAW);
+	phpdbg_init_param(yylval, EMPTY_PARAM);
+	return T_IF;
+}
+#line 1056 "sapi/phpdbg/phpdbg_lexer.c"
+yy94:
+		YYDEBUG(94, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(95, *YYCURSOR);
+		YYCURSOR -= 1;
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 136 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, NUMERIC_PARAM);
+	yylval->num = 0;
+	return T_FALSY;
+}
+#line 1069 "sapi/phpdbg/phpdbg_lexer.c"
+yy96:
+		YYDEBUG(96, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(97, *YYCURSOR);
+		YYCURSOR -= 1;
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 130 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, NUMERIC_PARAM);
+	yylval->num = 1;
+	return T_TRUTHY;
+}
+#line 1082 "sapi/phpdbg/phpdbg_lexer.c"
+yy98:
+		YYDEBUG(98, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy65;
+		if (yych == 'e') goto yy65;
+		goto yy6;
+yy99:
+		YYDEBUG(99, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy111;
+		goto yy6;
+yy100:
+		YYDEBUG(100, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'd') goto yy111;
+		goto yy6;
+yy101:
+		YYDEBUG(101, *YYCURSOR);
+		++YYCURSOR;
+yy102:
+		YYDEBUG(102, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 123 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, STR_PARAM);
+	yylval->str = estrndup(yytext, yyleng);
+	yylval->len = yyleng;
+	return T_PROTO;
+}
+#line 1115 "sapi/phpdbg/phpdbg_lexer.c"
+yy103:
+		YYDEBUG(103, *YYCURSOR);
+		yyaccept = 5;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x00) goto yy102;
+		if (yych == '\n') goto yy102;
+		goto yy38;
+yy104:
+		YYDEBUG(104, *YYCURSOR);
+		yyaccept = 5;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x00) goto yy102;
+		if (yych == '\n') goto yy102;
+		goto yy48;
+yy105:
+		YYDEBUG(105, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == '.') goto yy106;
+		if (yych <= '/') goto yy12;
+		if (yych >= ':') goto yy12;
+yy106:
+		YYDEBUG(106, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(107, *YYCURSOR);
+		if (yych == '.') goto yy106;
+		if (yych <= '/') goto yy83;
+		if (yych <= '9') goto yy106;
+		goto yy83;
+yy108:
+		YYDEBUG(108, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'B') goto yy112;
+		if (yych == 'b') goto yy112;
+		goto yy6;
+yy109:
+		YYDEBUG(109, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy113;
+		if (yych == 'l') goto yy113;
+		goto yy6;
+yy110:
+		YYDEBUG(110, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy63;
+		if (yych == 'e') goto yy63;
+		goto yy6;
+yy111:
+		YYDEBUG(111, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == '_') goto yy114;
+		goto yy6;
+yy112:
+		YYDEBUG(112, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'L') goto yy115;
+		if (yych == 'l') goto yy115;
+		goto yy6;
+yy113:
+		YYDEBUG(113, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy116;
+		if (yych == 'e') goto yy116;
+		goto yy6;
+yy114:
+		YYDEBUG(114, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy117;
+		}
+		goto yy6;
+yy115:
+		YYDEBUG(115, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'E') goto yy120;
+		if (yych == 'e') goto yy120;
+		goto yy6;
+yy116:
+		YYDEBUG(116, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy65;
+		if (yych == 'd') goto yy65;
+		goto yy6;
+yy117:
+		YYDEBUG(117, *YYCURSOR);
+		yyaccept = 6;
+		YYMARKER = ++YYCURSOR;
+		YYFILL(3);
+		yych = *YYCURSOR;
+		YYDEBUG(118, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy117;
+		}
+		if (yych <= ' ') {
+			if (yych <= '\n') {
+				if (yych <= 0x00) goto yy119;
+				if (yych <= 0x08) goto yy5;
+			} else {
+				if (yych == '\r') goto yy119;
+				if (yych <= 0x1F) goto yy5;
+			}
+		} else {
+			if (yych <= '&') {
+				if (yych <= '!') goto yy5;
+				if (yych <= '"') goto yy32;
+				if (yych >= '$') goto yy5;
+			} else {
+				if (yych <= '\'') goto yy32;
+				if (yych == ':') goto yy34;
+				goto yy5;
+			}
+		}
+yy119:
+		YYDEBUG(119, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 154 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, OP_PARAM);
+	yylval->str = estrndup(yytext, yyleng);
+	yylval->len = yyleng;
+	return T_OPCODE;
+}
+#line 1248 "sapi/phpdbg/phpdbg_lexer.c"
+yy120:
+		YYDEBUG(120, *YYCURSOR);
+		yyaccept = 0;
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'D') goto yy63;
+		if (yych == 'd') goto yy63;
+		goto yy6;
+	}
+/* *********************************** */
+yyc_PRE_RAW:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,  64,   0,   0,   0,  64,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			 64,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0, 128,   0, 
+			128, 128, 128, 128, 128, 128, 128, 128, 
+			128, 128,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+		};
+		YYDEBUG(121, *YYCURSOR);
+		YYFILL(2);
+		yych = *YYCURSOR;
+		if (yych <= '\r') {
+			if (yych == '\t') goto yy125;
+			if (yych >= '\r') goto yy125;
+		} else {
+			if (yych <= ' ') {
+				if (yych >= ' ') goto yy126;
+			} else {
+				if (yych == '-') goto yy129;
+			}
+		}
+		YYDEBUG(123, *YYCURSOR);
+		++YYCURSOR;
+yy124:
+		YYDEBUG(124, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 199 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(RAW);
+
+	YYCURSOR = LEX(text);
+	goto restart;
+}
+#line 1319 "sapi/phpdbg/phpdbg_lexer.c"
+yy125:
+		YYDEBUG(125, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy126;
+		}
+		goto yy124;
+yy126:
+		YYDEBUG(126, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(127, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy126;
+		}
+		YYDEBUG(128, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 175 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	/* ignore whitespace */
+
+	goto restart;
+}
+#line 1344 "sapi/phpdbg/phpdbg_lexer.c"
+yy129:
+		YYDEBUG(129, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych != 'r') goto yy124;
+yy130:
+		YYDEBUG(130, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(2);
+		yych = *YYCURSOR;
+		YYDEBUG(131, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy134;
+		}
+		if (yych <= '\r') {
+			if (yych == '\t') goto yy130;
+			if (yych >= '\r') goto yy130;
+		} else {
+			if (yych <= ' ') {
+				if (yych >= ' ') goto yy130;
+			} else {
+				if (yych == '-') goto yy133;
+			}
+		}
+yy132:
+		YYDEBUG(132, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy124;
+yy133:
+		YYDEBUG(133, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy134;
+		}
+		goto yy132;
+yy134:
+		YYDEBUG(134, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(135, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy134;
+		}
+		YYDEBUG(136, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 93 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	char *text = yytext + 2;
+	while (*++text < '0');
+	yylval->num = atoi(text);
+	return T_REQ_ID;
+}
+#line 1397 "sapi/phpdbg/phpdbg_lexer.c"
+	}
+/* *********************************** */
+yyc_RAW:
+	{
+		static const unsigned char yybm[] = {
+			  0, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232,   0, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232,  64, 224, 232, 232, 232,  32, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232,  16, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+			232, 232, 232, 232, 232, 232, 232, 232, 
+		};
+		YYDEBUG(137, *YYCURSOR);
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 8) {
+			goto yy141;
+		}
+		if (yych <= '\n') goto yy139;
+		if (yych <= '"') goto yy144;
+		if (yych <= '#') goto yy146;
+		if (yych <= '\'') goto yy148;
+		goto yy149;
+yy139:
+		YYDEBUG(139, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(140, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 89 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	return 0;
+}
+#line 1456 "sapi/phpdbg/phpdbg_lexer.c"
+yy141:
+		YYDEBUG(141, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(142, *YYCURSOR);
+		if (yybm[0+yych] & 8) {
+			goto yy141;
+		}
+		if (yych <= '\n') goto yy143;
+		if (yych <= '"') goto yy144;
+		if (yych <= '#') goto yy143;
+		if (yych <= '\'') goto yy148;
+		goto yy149;
+yy143:
+		YYDEBUG(143, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 168 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	phpdbg_init_param(yylval, STR_PARAM);
+	yylval->str = estrdup(yytext);
+	yylval->len = yyleng;
+	return T_INPUT;
+}
+#line 1481 "sapi/phpdbg/phpdbg_lexer.c"
+yy144:
+		YYDEBUG(144, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 32) {
+			goto yy151;
+		}
+		if (yych >= '#') goto yy153;
+yy145:
+		YYDEBUG(145, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy143;
+yy146:
+		YYDEBUG(146, *YYCURSOR);
+		++YYCURSOR;
+		YYDEBUG(147, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 110 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(INITIAL);
+	return T_SEPARATOR;
+}
+#line 1505 "sapi/phpdbg/phpdbg_lexer.c"
+yy148:
+		YYDEBUG(148, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 64) {
+			goto yy155;
+		}
+		if (yych <= '\'') goto yy145;
+		goto yy157;
+yy149:
+		YYDEBUG(149, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(150, *YYCURSOR);
+		if (yybm[0+yych] & 16) {
+			goto yy149;
+		}
+		if (yych <= '!') {
+			if (yych <= 0x00) goto yy143;
+			if (yych == '\n') goto yy143;
+			goto yy141;
+		} else {
+			if (yych <= '"') goto yy159;
+			if (yych == '\'') goto yy160;
+			goto yy141;
+		}
+yy151:
+		YYDEBUG(151, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(152, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy151;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '"') goto yy141;
+yy153:
+		YYDEBUG(153, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(154, *YYCURSOR);
+		if (yybm[0+yych] & 32) {
+			goto yy151;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '"') goto yy161;
+		goto yy153;
+yy155:
+		YYDEBUG(155, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(156, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy155;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '\'') goto yy141;
+yy157:
+		YYDEBUG(157, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(158, *YYCURSOR);
+		if (yybm[0+yych] & 64) {
+			goto yy155;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '\'') goto yy163;
+		goto yy157;
+yy159:
+		YYDEBUG(159, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy161;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy161;
+				goto yy144;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy151;
+				if (yych <= '&') goto yy161;
+				goto yy165;
+			} else {
+				if (yych == '\\') goto yy166;
+				goto yy161;
+			}
+		}
+yy160:
+		YYDEBUG(160, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy163;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy163;
+				goto yy168;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy155;
+				if (yych <= '&') goto yy163;
+				goto yy148;
+			} else {
+				if (yych == '\\') goto yy169;
+				goto yy163;
+			}
+		}
+yy161:
+		YYDEBUG(161, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(162, *YYCURSOR);
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy161;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy161;
+				goto yy159;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy151;
+				if (yych <= '&') goto yy161;
+				goto yy165;
+			} else {
+				if (yych == '\\') goto yy166;
+				goto yy161;
+			}
+		}
+yy163:
+		YYDEBUG(163, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(164, *YYCURSOR);
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy163;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy163;
+				goto yy168;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy155;
+				if (yych <= '&') goto yy163;
+				goto yy160;
+			} else {
+				if (yych == '\\') goto yy169;
+				goto yy163;
+			}
+		}
+yy165:
+		YYDEBUG(165, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy171;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '"') goto yy163;
+		if (yych <= '\'') goto yy151;
+		goto yy173;
+yy166:
+		YYDEBUG(166, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(167, *YYCURSOR);
+		if (yych <= '&') {
+			if (yych <= 0x00) goto yy143;
+			if (yych == '\n') goto yy143;
+			goto yy161;
+		} else {
+			if (yych <= '\'') goto yy175;
+			if (yych == '\\') goto yy166;
+			goto yy161;
+		}
+yy168:
+		YYDEBUG(168, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy171;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '"') goto yy155;
+		if (yych <= '\'') goto yy161;
+		goto yy173;
+yy169:
+		YYDEBUG(169, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(170, *YYCURSOR);
+		if (yych <= '!') {
+			if (yych <= 0x00) goto yy143;
+			if (yych == '\n') goto yy143;
+			goto yy163;
+		} else {
+			if (yych <= '"') goto yy176;
+			if (yych == '\\') goto yy169;
+			goto yy163;
+		}
+yy171:
+		YYDEBUG(171, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(172, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy171;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '"') goto yy163;
+		if (yych <= '\'') goto yy161;
+yy173:
+		YYDEBUG(173, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(174, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy171;
+		}
+		if (yych <= '\n') goto yy145;
+		if (yych <= '\'') goto yy177;
+		goto yy173;
+yy175:
+		YYDEBUG(175, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy177;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy177;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy171;
+				if (yych <= '&') goto yy177;
+				goto yy165;
+			} else {
+				if (yych == '\\') goto yy179;
+				goto yy177;
+			}
+		}
+yy176:
+		YYDEBUG(176, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych >= '"') goto yy168;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy171;
+				if (yych >= '\'') goto yy175;
+			} else {
+				if (yych == '\\') goto yy179;
+			}
+		}
+yy177:
+		YYDEBUG(177, *YYCURSOR);
+		YYMARKER = ++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(178, *YYCURSOR);
+		if (yych <= '"') {
+			if (yych <= '\t') {
+				if (yych <= 0x00) goto yy143;
+				goto yy177;
+			} else {
+				if (yych <= '\n') goto yy143;
+				if (yych <= '!') goto yy177;
+				goto yy176;
+			}
+		} else {
+			if (yych <= '\'') {
+				if (yych <= '#') goto yy171;
+				if (yych <= '&') goto yy177;
+				goto yy175;
+			} else {
+				if (yych != '\\') goto yy177;
+			}
+		}
+yy179:
+		YYDEBUG(179, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(180, *YYCURSOR);
+		if (yych <= '\n') {
+			if (yych <= 0x00) goto yy143;
+			if (yych <= '\t') goto yy177;
+			goto yy143;
+		} else {
+			if (yych == '\\') goto yy179;
+			goto yy177;
+		}
+	}
+/* *********************************** */
+yyc_INITIAL:
+	{
+		static const unsigned char yybm[] = {
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0, 128,   0,   0,   0, 128,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			128,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+			  0,   0,   0,   0,   0,   0,   0,   0, 
+		};
+		YYDEBUG(181, *YYCURSOR);
+		YYFILL(4);
+		yych = *YYCURSOR;
+		if (yych <= 'E') {
+			if (yych <= '\r') {
+				if (yych == '\t') goto yy185;
+				if (yych >= '\r') goto yy185;
+			} else {
+				if (yych == ' ') goto yy186;
+				if (yych >= 'E') goto yy189;
+			}
+		} else {
+			if (yych <= 'd') {
+				if (yych <= 'Q') goto yy183;
+				if (yych <= 'R') goto yy190;
+				if (yych <= 'S') goto yy191;
+			} else {
+				if (yych <= 'q') {
+					if (yych <= 'e') goto yy189;
+				} else {
+					if (yych <= 'r') goto yy192;
+					if (yych <= 's') goto yy191;
+				}
+			}
+		}
+yy183:
+		YYDEBUG(183, *YYCURSOR);
+		++YYCURSOR;
+yy184:
+		YYDEBUG(184, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 206 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(NORMAL);
+
+	YYCURSOR = LEX(text);
+	goto restart;
+}
+#line 1913 "sapi/phpdbg/phpdbg_lexer.c"
+yy185:
+		YYDEBUG(185, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yybm[0+yych] & 128) {
+			goto yy186;
+		}
+		goto yy184;
+yy186:
+		YYDEBUG(186, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(187, *YYCURSOR);
+		if (yybm[0+yych] & 128) {
+			goto yy186;
+		}
+		YYDEBUG(188, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 175 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	/* ignore whitespace */
+
+	goto restart;
+}
+#line 1938 "sapi/phpdbg/phpdbg_lexer.c"
+yy189:
+		YYDEBUG(189, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'V') goto yy193;
+		if (yych == 'v') goto yy193;
+		goto yy184;
+yy190:
+		YYDEBUG(190, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'U') goto yy195;
+		if (yych == 'u') goto yy195;
+		goto yy184;
+yy191:
+		YYDEBUG(191, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych == 'H') goto yy196;
+		if (yych == 'h') goto yy196;
+		goto yy184;
+yy192:
+		YYDEBUG(192, *YYCURSOR);
+		yych = *(YYMARKER = ++YYCURSOR);
+		if (yych <= 0x1F) {
+			if (yych <= '\t') {
+				if (yych <= 0x08) goto yy184;
+				goto yy197;
+			} else {
+				if (yych == '\r') goto yy197;
+				goto yy184;
+			}
+		} else {
+			if (yych <= 'U') {
+				if (yych <= ' ') goto yy197;
+				if (yych <= 'T') goto yy184;
+				goto yy195;
+			} else {
+				if (yych == 'u') goto yy195;
+				goto yy184;
+			}
+		}
+yy193:
+		YYDEBUG(193, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy200;
+		} else {
+			if (yych <= '\r') goto yy200;
+			if (yych == ' ') goto yy200;
+		}
+yy194:
+		YYDEBUG(194, *YYCURSOR);
+		YYCURSOR = YYMARKER;
+		goto yy184;
+yy195:
+		YYDEBUG(195, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych == 'N') goto yy203;
+		if (yych == 'n') goto yy203;
+		goto yy194;
+yy196:
+		YYDEBUG(196, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy204;
+			goto yy194;
+		} else {
+			if (yych <= '\r') goto yy204;
+			if (yych == ' ') goto yy204;
+			goto yy194;
+		}
+yy197:
+		YYDEBUG(197, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(198, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy197;
+		} else {
+			if (yych <= '\r') goto yy197;
+			if (yych == ' ') goto yy197;
+		}
+		YYDEBUG(199, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 193 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(PRE_RAW);
+	phpdbg_init_param(yylval, EMPTY_PARAM);
+	return T_RUN;
+}
+#line 2028 "sapi/phpdbg/phpdbg_lexer.c"
+yy200:
+		YYDEBUG(200, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(201, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy200;
+		} else {
+			if (yych <= '\r') goto yy200;
+			if (yych == ' ') goto yy200;
+		}
+		YYDEBUG(202, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 181 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(PRE_RAW);
+	phpdbg_init_param(yylval, EMPTY_PARAM);
+	return T_EVAL;
+}
+#line 2049 "sapi/phpdbg/phpdbg_lexer.c"
+yy203:
+		YYDEBUG(203, *YYCURSOR);
+		yych = *++YYCURSOR;
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy197;
+			goto yy194;
+		} else {
+			if (yych <= '\r') goto yy197;
+			if (yych == ' ') goto yy197;
+			goto yy194;
+		}
+yy204:
+		YYDEBUG(204, *YYCURSOR);
+		++YYCURSOR;
+		YYFILL(1);
+		yych = *YYCURSOR;
+		YYDEBUG(205, *YYCURSOR);
+		if (yych <= '\f') {
+			if (yych == '\t') goto yy204;
+		} else {
+			if (yych <= '\r') goto yy204;
+			if (yych == ' ') goto yy204;
+		}
+		YYDEBUG(206, *YYCURSOR);
+		yyleng = (size_t) YYCURSOR - (size_t) yytext;
+#line 187 "sapi/phpdbg/phpdbg_lexer.l"
+		{
+	YYSETCONDITION(PRE_RAW);
+	phpdbg_init_param(yylval, EMPTY_PARAM);
+	return T_SHELL;
+}
+#line 2081 "sapi/phpdbg/phpdbg_lexer.c"
+	}
+}
+#line 213 "sapi/phpdbg/phpdbg_lexer.l"
+
+}
diff --git a/sapi/phpdbg/phpdbg_parser.c b/sapi/phpdbg/phpdbg_parser.c
new file mode 100644
index 0000000000..1c53fc8a10
--- /dev/null
+++ b/sapi/phpdbg/phpdbg_parser.c
@@ -0,0 +1,1877 @@
+/* A Bison parser, made by GNU Bison 3.5.1.  */
+
+/* Bison implementation for Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "3.5.1"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 2
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* Substitute the type names.  */
+#define YYSTYPE         PHPDBG_STYPE
+/* Substitute the variable and function names.  */
+#define yyparse         phpdbg_parse
+#define yylex           phpdbg_lex
+#define yyerror         phpdbg_error
+#define yydebug         phpdbg_debug
+#define yynerrs         phpdbg_nerrs
+
+
+# ifndef YY_CAST
+#  ifdef __cplusplus
+#   define YY_CAST(Type, Val) static_cast<Type> (Val)
+#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
+#  else
+#   define YY_CAST(Type, Val) ((Type) (Val))
+#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
+#  endif
+# endif
+# ifndef YY_NULLPTR
+#  if defined __cplusplus
+#   if 201103L <= __cplusplus
+#    define YY_NULLPTR nullptr
+#   else
+#    define YY_NULLPTR 0
+#   endif
+#  else
+#   define YY_NULLPTR ((void*)0)
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 1
+#endif
+
+/* Use api.header.include to #include this header
+   instead of duplicating it here.  */
+#ifndef YY_PHPDBG_HOME_LUXE_DESKTOP_PHP_SRC_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED
+# define YY_PHPDBG_HOME_LUXE_DESKTOP_PHP_SRC_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED
+/* Debug traces.  */
+#ifndef PHPDBG_DEBUG
+# if defined YYDEBUG
+#if YYDEBUG
+#   define PHPDBG_DEBUG 1
+#  else
+#   define PHPDBG_DEBUG 0
+#  endif
+# else /* ! defined YYDEBUG */
+#  define PHPDBG_DEBUG 0
+# endif /* ! defined YYDEBUG */
+#endif  /* ! defined PHPDBG_DEBUG */
+#if PHPDBG_DEBUG
+extern int phpdbg_debug;
+#endif
+/* "%code requires" blocks.  */
+#line 7 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+
+#include "phpdbg.h"
+#ifndef YY_TYPEDEF_YY_SCANNER_T
+#define YY_TYPEDEF_YY_SCANNER_T
+typedef void* yyscan_t;
+#endif
+
+#line 133 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+
+/* Token type.  */
+#ifndef PHPDBG_TOKENTYPE
+# define PHPDBG_TOKENTYPE
+  enum phpdbg_tokentype
+  {
+    END = 0,
+    T_EVAL = 258,
+    T_RUN = 259,
+    T_SHELL = 260,
+    T_IF = 261,
+    T_TRUTHY = 262,
+    T_FALSY = 263,
+    T_STRING = 264,
+    T_COLON = 265,
+    T_DCOLON = 266,
+    T_POUND = 267,
+    T_SEPARATOR = 268,
+    T_PROTO = 269,
+    T_DIGITS = 270,
+    T_LITERAL = 271,
+    T_ADDR = 272,
+    T_OPCODE = 273,
+    T_ID = 274,
+    T_INPUT = 275,
+    T_UNEXPECTED = 276,
+    T_REQ_ID = 277
+  };
+#endif
+
+/* Value type.  */
+#if ! defined PHPDBG_STYPE && ! defined PHPDBG_STYPE_IS_DECLARED
+typedef phpdbg_param_t PHPDBG_STYPE;
+# define PHPDBG_STYPE_IS_TRIVIAL 1
+# define PHPDBG_STYPE_IS_DECLARED 1
+#endif
+
+
+
+int phpdbg_parse (void);
+
+#endif /* !YY_PHPDBG_HOME_LUXE_DESKTOP_PHP_SRC_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED  */
+
+
+/* Unqualified %code blocks.  */
+#line 15 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+
+
+#include "phpdbg_cmd.h"
+#include "phpdbg_utils.h"
+#include "phpdbg_cmd.h"
+#include "phpdbg_prompt.h"
+
+#include "phpdbg_parser.h"
+#include "phpdbg_lexer.h"
+
+#undef yyerror
+static int yyerror(const char *msg);
+
+ZEND_EXTERN_MODULE_GLOBALS(phpdbg)
+
+#ifdef _MSC_VER
+#define YYMALLOC malloc
+#define YYFREE free
+#endif
+
+
+#line 201 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+
+#ifdef short
+# undef short
+#endif
+
+/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
+   <limits.h> and (if available) <stdint.h> are included
+   so that the code can choose integer types of a good width.  */
+
+#ifndef __PTRDIFF_MAX__
+# include <limits.h> /* INFRINGES ON USER NAME SPACE */
+# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
+#  define YY_STDINT_H
+# endif
+#endif
+
+/* Narrow types that promote to a signed type and that can represent a
+   signed or unsigned integer of at least N bits.  In tables they can
+   save space and decrease cache pressure.  Promoting to a signed type
+   helps avoid bugs in integer arithmetic.  */
+
+#ifdef __INT_LEAST8_MAX__
+typedef __INT_LEAST8_TYPE__ yytype_int8;
+#elif defined YY_STDINT_H
+typedef int_least8_t yytype_int8;
+#else
+typedef signed char yytype_int8;
+#endif
+
+#ifdef __INT_LEAST16_MAX__
+typedef __INT_LEAST16_TYPE__ yytype_int16;
+#elif defined YY_STDINT_H
+typedef int_least16_t yytype_int16;
+#else
+typedef short yytype_int16;
+#endif
+
+#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST8_TYPE__ yytype_uint8;
+#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST8_MAX <= INT_MAX)
+typedef uint_least8_t yytype_uint8;
+#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
+typedef unsigned char yytype_uint8;
+#else
+typedef short yytype_uint8;
+#endif
+
+#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST16_TYPE__ yytype_uint16;
+#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST16_MAX <= INT_MAX)
+typedef uint_least16_t yytype_uint16;
+#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
+typedef unsigned short yytype_uint16;
+#else
+typedef int yytype_uint16;
+#endif
+
+#ifndef YYPTRDIFF_T
+# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
+#  define YYPTRDIFF_T __PTRDIFF_TYPE__
+#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
+# elif defined PTRDIFF_MAX
+#  ifndef ptrdiff_t
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYPTRDIFF_T ptrdiff_t
+#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
+# else
+#  define YYPTRDIFF_T long
+#  define YYPTRDIFF_MAXIMUM LONG_MAX
+# endif
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM                                  \
+  YY_CAST (YYPTRDIFF_T,                                 \
+           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
+            ? YYPTRDIFF_MAXIMUM                         \
+            : YY_CAST (YYSIZE_T, -1)))
+
+#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
+
+/* Stored state numbers (used for stacks). */
+typedef yytype_int8 yy_state_t;
+
+/* State numbers in computations.  */
+typedef int yy_state_fast_t;
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_PURE
+# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
+# else
+#  define YY_ATTRIBUTE_PURE
+# endif
+#endif
+
+#ifndef YY_ATTRIBUTE_UNUSED
+# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
+# else
+#  define YY_ATTRIBUTE_UNUSED
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
+
+#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
+    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
+    _Pragma ("GCC diagnostic pop")
+#else
+# define YY_INITIAL_VALUE(Value) Value
+#endif
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
+#endif
+
+#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
+# define YY_IGNORE_USELESS_CAST_BEGIN                          \
+    _Pragma ("GCC diagnostic push")                            \
+    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
+# define YY_IGNORE_USELESS_CAST_END            \
+    _Pragma ("GCC diagnostic pop")
+#endif
+#ifndef YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_END
+#endif
+
+
+#define YY_ASSERT(E) ((void) (0 && (E)))
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's 'empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+             && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+         || (defined PHPDBG_STYPE_IS_TRIVIAL && PHPDBG_STYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yy_state_t yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
+    do                                                                  \
+      {                                                                 \
+        YYPTRDIFF_T yynewbytes;                                         \
+        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
+        Stack = &yyptr->Stack_alloc;                                    \
+        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
+      }                                                                 \
+    while (0)
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYPTRDIFF_T yyi;                      \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (0)
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  27
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   51
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  23
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  7
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  30
+/* YYNSTATES -- Number of states.  */
+#define YYNSTATES  46
+
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   277
+
+
+/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, with out-of-bounds checking.  */
+#define YYTRANSLATE(YYX)                                                \
+  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex.  */
+static const yytype_int8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22
+};
+
+#if PHPDBG_DEBUG
+  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+static const yytype_uint8 yyrline[] =
+{
+       0,    67,    67,    68,    69,    73,    74,    78,    79,    80,
+      84,    89,    94,   104,   114,   119,   125,   131,   136,   137,
+     138,   139,   140,   141,   142,   146,   147,   151,   156,   161,
+     165
+};
+#endif
+
+#if PHPDBG_DEBUG || YYERROR_VERBOSE || 1
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "\"end of command\"", "error", "$undefined", "\"eval\"", "\"run\"",
+  "\"shell\"", "\"if (condition)\"",
+  "\"truthy (true, on, yes or enabled)\"",
+  "\"falsy (false, off, no or disabled)\"",
+  "\"string (some input, perhaps)\"", "\": (colon)\"",
+  "\":: (double colon)\"", "\"# (pound sign followed by digits)\"",
+  "\"# (pound sign)\"", "\"protocol (file://)\"", "\"digits (numbers)\"",
+  "\"literal (string)\"", "\"address\"", "\"opcode\"",
+  "\"identifier (command or function name)\"",
+  "\"input (input string or data)\"", "\"input\"",
+  "\"request id (-r %d)\"", "$accept", "input", "command", "parameters",
+  "parameter", "req_id", "full_expression", YY_NULLPTR
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[NUM] -- (External) token number corresponding to the
+   (internal) symbol number NUM (which must be that of a token).  */
+static const yytype_int16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277
+};
+# endif
+
+#define YYPACT_NINF (-15)
+
+#define yypact_value_is_default(Yyn) \
+  ((Yyn) == YYPACT_NINF)
+
+#define YYTABLE_NINF (-1)
+
+#define yytable_value_is_error(Yyn) \
+  0
+
+  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+     STATE-NUM.  */
+static const yytype_int8 yypact[] =
+{
+      -3,   -14,   -14,   -14,   -10,   -15,   -15,    12,   -15,   -15,
+     -15,   -15,    24,     7,   -15,    11,   -15,   -15,   -15,    17,
+      18,    19,   -15,    22,    -6,    21,    26,   -15,    -3,   -15,
+     -15,   -15,   -15,   -15,     9,    27,   -15,    31,   -15,   -15,
+      29,   -15,   -15,    30,   -15,   -15
+};
+
+  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+     Performed when YYTABLE does not specify something else to do.  Zero
+     means the default is an error.  */
+static const yytype_int8 yydefact[] =
+{
+       4,    26,    26,    26,     0,    21,    22,     0,    23,    20,
+      19,    18,    24,     0,     2,     5,     7,     6,    25,     0,
+      29,     0,    17,     0,     0,     0,     0,     1,     0,     9,
+       8,    27,    30,    28,     0,     0,    10,    14,    16,     3,
+       0,    12,    11,     0,    13,    15
+};
+
+  /* YYPGOTO[NTERM-NUM].  */
+static const yytype_int8 yypgoto[] =
+{
+     -15,   -15,    23,   -15,    32,    20,   -15
+};
+
+  /* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int8 yydefgoto[] =
+{
+      -1,    13,    14,    15,    16,    19,    17
+};
+
+  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+     positive, shift that token.  If negative, reduce the rule whose
+     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+static const yytype_int8 yytable[] =
+{
+       1,     2,     3,     4,     5,     6,    35,    27,    18,    36,
+      22,     7,     8,     9,    10,    11,    12,     4,     5,     6,
+      28,    40,    20,    21,    41,     7,     8,     9,    10,    11,
+      12,    23,    34,    29,    24,    25,    26,    31,    32,    33,
+      37,    38,    42,    43,    44,    45,     0,    30,     0,     0,
+       0,    39
+};
+
+static const yytype_int8 yycheck[] =
+{
+       3,     4,     5,     6,     7,     8,    12,     0,    22,    15,
+      20,    14,    15,    16,    17,    18,    19,     6,     7,     8,
+      13,    12,     2,     3,    15,    14,    15,    16,    17,    18,
+      19,    19,    10,    22,    10,    11,    12,    20,    20,    20,
+      19,    15,    15,    12,    15,    15,    -1,    15,    -1,    -1,
+      -1,    28
+};
+
+  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+     symbol of state STATE-NUM.  */
+static const yytype_int8 yystos[] =
+{
+       0,     3,     4,     5,     6,     7,     8,    14,    15,    16,
+      17,    18,    19,    24,    25,    26,    27,    29,    22,    28,
+      28,    28,    20,    19,    10,    11,    12,     0,    13,    22,
+      27,    20,    20,    20,    10,    12,    15,    19,    15,    25,
+      12,    15,    15,    12,    15,    15
+};
+
+  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_int8 yyr1[] =
+{
+       0,    23,    24,    24,    24,    25,    25,    26,    26,    26,
+      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
+      27,    27,    27,    27,    27,    28,    28,    29,    29,    29,
+      29
+};
+
+  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+static const yytype_int8 yyr2[] =
+{
+       0,     2,     1,     3,     0,     1,     1,     1,     2,     2,
+       3,     4,     4,     5,     3,     5,     3,     2,     1,     1,
+       1,     1,     1,     1,     1,     1,     0,     3,     3,     2,
+       3
+};
+
+
+#define yyerrok         (yyerrstatus = 0)
+#define yyclearin       (yychar = YYEMPTY)
+#define YYEMPTY         (-2)
+#define YYEOF           0
+
+#define YYACCEPT        goto yyacceptlab
+#define YYABORT         goto yyabortlab
+#define YYERROR         goto yyerrorlab
+
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)                                    \
+  do                                                              \
+    if (yychar == YYEMPTY)                                        \
+      {                                                           \
+        yychar = (Token);                                         \
+        yylval = (Value);                                         \
+        YYPOPSTACK (yylen);                                       \
+        yystate = *yyssp;                                         \
+        goto yybackup;                                            \
+      }                                                           \
+    else                                                          \
+      {                                                           \
+        yyerror (YY_("syntax error: cannot back up")); \
+        YYERROR;                                                  \
+      }                                                           \
+  while (0)
+
+/* Error token number */
+#define YYTERROR        1
+#define YYERRCODE       256
+
+
+
+/* Enable debugging if requested.  */
+#if PHPDBG_DEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)                        \
+do {                                            \
+  if (yydebug)                                  \
+    YYFPRINTF Args;                             \
+} while (0)
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
+do {                                                                      \
+  if (yydebug)                                                            \
+    {                                                                     \
+      YYFPRINTF (stderr, "%s ", Title);                                   \
+      yy_symbol_print (stderr,                                            \
+                  Type, Value); \
+      YYFPRINTF (stderr, "\n");                                           \
+    }                                                                     \
+} while (0)
+
+
+/*-----------------------------------.
+| Print this symbol's value on YYO.  |
+`-----------------------------------*/
+
+static void
+yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  FILE *yyoutput = yyo;
+  YYUSE (yyoutput);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
+# endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+/*---------------------------.
+| Print this symbol on YYO.  |
+`---------------------------*/
+
+static void
+yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
+{
+  YYFPRINTF (yyo, "%s %s (",
+             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
+
+  yy_symbol_value_print (yyo, yytype, yyvaluep);
+  YYFPRINTF (yyo, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+static void
+yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)                            \
+do {                                                            \
+  if (yydebug)                                                  \
+    yy_stack_print ((Bottom), (Top));                           \
+} while (0)
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+static void
+yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)
+{
+  int yylno = yyrline[yyrule];
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
+             yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr,
+                       yystos[+yyssp[yyi + 1 - yynrhs]],
+                       &yyvsp[(yyi + 1) - (yynrhs)]
+                                              );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)          \
+do {                                    \
+  if (yydebug)                          \
+    yy_reduce_print (yyssp, yyvsp, Rule); \
+} while (0)
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !PHPDBG_DEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !PHPDBG_DEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
+#  else
+/* Return the length of YYSTR.  */
+static YYPTRDIFF_T
+yystrlen (const char *yystr)
+{
+  YYPTRDIFF_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYPTRDIFF_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYPTRDIFF_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+        switch (*++yyp)
+          {
+          case '\'':
+          case ',':
+            goto do_not_strip_quotes;
+
+          case '\\':
+            if (*++yyp != '\\')
+              goto do_not_strip_quotes;
+            else
+              goto append;
+
+          append:
+          default:
+            if (yyres)
+              yyres[yyn] = *yyp;
+            yyn++;
+            break;
+
+          case '"':
+            if (yyres)
+              yyres[yyn] = '\0';
+            return yyn;
+          }
+    do_not_strip_quotes: ;
+    }
+
+  if (yyres)
+    return yystpcpy (yyres, yystr) - yyres;
+  else
+    return yystrlen (yystr);
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
+                yy_state_t *yyssp, int yytoken)
+{
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULLPTR;
+  /* Arguments of yyformat: reported tokens (one for the "unexpected",
+     one per "expected"). */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Actual size of YYARG. */
+  int yycount = 0;
+  /* Cumulated lengths of YYARG.  */
+  YYPTRDIFF_T yysize = 0;
+
+  /* There are many possibilities here to consider:
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[+*yyssp];
+      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+      yysize = yysize0;
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYPTRDIFF_T yysize1
+                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+                    yysize = yysize1;
+                  else
+                    return 2;
+                }
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+    default: /* Avoid compiler warnings. */
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    /* Don't count the "%s"s in the final size, but reserve room for
+       the terminator.  */
+    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
+    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+      yysize = yysize1;
+    else
+      return 2;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          ++yyp;
+          ++yyformat;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+{
+  YYUSE (yyvaluep);
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+}
+
+
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+int
+yyparse (void)
+{
+/* The lookahead symbol.  */
+int yychar;
+
+
+/* The semantic value of the lookahead symbol.  */
+/* Default value used for initialization, for pacifying older GCCs
+   or non-GCC compilers.  */
+YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
+YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
+
+    /* Number of syntax errors so far.  */
+    int yynerrs;
+
+    yy_state_fast_t yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       'yyss': related to states.
+       'yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yy_state_t yyssa[YYINITDEPTH];
+    yy_state_t *yyss;
+    yy_state_t *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYPTRDIFF_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
+
+
+/*------------------------------------------------------------.
+| yynewstate -- push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+
+/*--------------------------------------------------------------------.
+| yysetstate -- set current state (the top of the stack) to yystate.  |
+`--------------------------------------------------------------------*/
+yysetstate:
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
+  YY_IGNORE_USELESS_CAST_BEGIN
+  *yyssp = YY_CAST (yy_state_t, yystate);
+  YY_IGNORE_USELESS_CAST_END
+
+  if (yyss + yystacksize - 1 <= yyssp)
+#if !defined yyoverflow && !defined YYSTACK_RELOCATE
+    goto yyexhaustedlab;
+#else
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYPTRDIFF_T yysize = yyssp - yyss + 1;
+
+# if defined yyoverflow
+      {
+        /* Give user a chance to reallocate the stack.  Use copies of
+           these so that the &'s don't force the real ones into
+           memory.  */
+        yy_state_t *yyss1 = yyss;
+        YYSTYPE *yyvs1 = yyvs;
+
+        /* Each stack pointer address is followed by the size of the
+           data in use in that stack, in bytes.  This used to be a
+           conditional around just the two extra args, but that might
+           be undefined if yyoverflow is a macro.  */
+        yyoverflow (YY_("memory exhausted"),
+                    &yyss1, yysize * YYSIZEOF (*yyssp),
+                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
+                    &yystacksize);
+        yyss = yyss1;
+        yyvs = yyvs1;
+      }
+# else /* defined YYSTACK_RELOCATE */
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+        goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+        yystacksize = YYMAXDEPTH;
+
+      {
+        yy_state_t *yyss1 = yyss;
+        union yyalloc *yyptr =
+          YY_CAST (union yyalloc *,
+                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
+        if (! yyptr)
+          goto yyexhaustedlab;
+        YYSTACK_RELOCATE (yyss_alloc, yyss);
+        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+# undef YYSTACK_RELOCATE
+        if (yyss1 != yyssa)
+          YYSTACK_FREE (yyss1);
+      }
+# endif
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YY_IGNORE_USELESS_CAST_BEGIN
+      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
+                  YY_CAST (long, yystacksize)));
+      YY_IGNORE_USELESS_CAST_END
+
+      if (yyss + yystacksize - 1 <= yyssp)
+        YYABORT;
+    }
+#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = yylex (&yylval);
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     '$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+  case 2:
+#line 67 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                  { yyval = yyvsp[0]; }
+#line 1397 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 3:
+#line 68 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                    { phpdbg_stack_separate(yyvsp[-2].top); yyval = yyvsp[0]; }
+#line 1403 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 5:
+#line 73 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                     { yyval.top = PHPDBG_G(parser_stack)->top; }
+#line 1409 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 6:
+#line 74 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                          { phpdbg_stack_push(PHPDBG_G(parser_stack), &yyvsp[0]); yyval.top = PHPDBG_G(parser_stack)->top; }
+#line 1415 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 7:
+#line 78 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                    { phpdbg_stack_push(PHPDBG_G(parser_stack), &yyvsp[0]); yyval.top = PHPDBG_G(parser_stack)->top; }
+#line 1421 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 8:
+#line 79 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                               { phpdbg_stack_push(PHPDBG_G(parser_stack), &yyvsp[0]); yyval.top = PHPDBG_G(parser_stack)->top; }
+#line 1427 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 9:
+#line 80 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                              { yyval = yyvsp[-1]; PHPDBG_G(req_id) = yyvsp[0].num; }
+#line 1433 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 10:
+#line 84 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                {
+		yyval.type = FILE_PARAM;
+		yyval.file.name = yyvsp[-1].str;
+		yyval.file.line = yyvsp[0].num;
+	}
+#line 1443 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 11:
+#line 89 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                        {
+		yyval.type = NUMERIC_FILE_PARAM;
+		yyval.file.name = yyvsp[-3].str;
+		yyval.file.line = yyvsp[0].num;
+	}
+#line 1453 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 12:
+#line 94 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                        {
+		yyval.type = FILE_PARAM;
+		yyval.file.name = malloc(yyvsp[-3].len + yyvsp[-2].len + 1);
+		if (yyval.file.name) {
+			memcpy(&yyval.file.name[0], yyvsp[-3].str, yyvsp[-3].len);
+			memcpy(&yyval.file.name[yyvsp[-3].len], yyvsp[-2].str, yyvsp[-2].len);
+			yyval.file.name[yyvsp[-3].len + yyvsp[-2].len] = '\0';
+		}
+		yyval.file.line = yyvsp[0].num;
+	}
+#line 1468 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 13:
+#line 104 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                                {
+		yyval.type = NUMERIC_FILE_PARAM;
+		yyval.file.name = malloc(yyvsp[-4].len + yyvsp[-3].len + 1);
+		if (yyval.file.name) {
+			memcpy(&yyval.file.name[0], yyvsp[-4].str, yyvsp[-4].len);
+			memcpy(&yyval.file.name[yyvsp[-4].len], yyvsp[-3].str, yyvsp[-3].len);
+			yyval.file.name[yyvsp[-4].len + yyvsp[-3].len] = '\0';
+		}
+		yyval.file.line = yyvsp[0].num;
+	}
+#line 1483 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 14:
+#line 114 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                             {
+		yyval.type = METHOD_PARAM;
+		yyval.method.class = yyvsp[-2].str;
+		yyval.method.name = yyvsp[0].str;
+	}
+#line 1493 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 15:
+#line 119 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                              {
+		yyval.type = NUMERIC_METHOD_PARAM;
+		yyval.method.class = yyvsp[-4].str;
+		yyval.method.name = yyvsp[-2].str;
+		yyval.num = yyvsp[0].num;
+	}
+#line 1504 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 16:
+#line 125 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                {
+		yyval.type = NUMERIC_FUNCTION_PARAM;
+		yyval.str = yyvsp[-2].str;
+		yyval.len = yyvsp[-2].len;
+		yyval.num = yyvsp[0].num;
+	}
+#line 1515 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 17:
+#line 131 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                       {
+		yyval.type = COND_PARAM;
+		yyval.str = yyvsp[0].str;
+		yyval.len = yyvsp[0].len;
+	}
+#line 1525 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 18:
+#line 136 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                   { yyval = yyvsp[0]; }
+#line 1531 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 19:
+#line 137 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                 { yyval = yyvsp[0]; }
+#line 1537 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 20:
+#line 138 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                    { yyval = yyvsp[0]; }
+#line 1543 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 21:
+#line 139 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                   { yyval = yyvsp[0]; }
+#line 1549 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 22:
+#line 140 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                  { yyval = yyvsp[0]; }
+#line 1555 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 23:
+#line 141 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                   { yyval = yyvsp[0]; }
+#line 1561 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 24:
+#line 142 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+               { yyval = yyvsp[0]; }
+#line 1567 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 25:
+#line 146 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                   { PHPDBG_G(req_id) = yyvsp[0].num; }
+#line 1573 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 27:
+#line 151 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                {
+		yyval.type = EVAL_PARAM;
+		yyval.str = yyvsp[0].str;
+		yyval.len = yyvsp[0].len;
+	}
+#line 1583 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 28:
+#line 156 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                                 {
+		yyval.type = SHELL_PARAM;
+		yyval.str = yyvsp[0].str;
+		yyval.len = yyvsp[0].len;
+	}
+#line 1593 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 29:
+#line 161 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                       {
+		yyval.type = RUN_PARAM;
+		yyval.len = 0;
+	}
+#line 1602 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+  case 30:
+#line 165 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+                               {
+		yyval.type = RUN_PARAM;
+		yyval.str = yyvsp[0].str;
+		yyval.len = yyvsp[0].len;
+	}
+#line 1612 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+    break;
+
+
+#line 1616 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.c"
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now 'shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+  {
+    const int yylhs = yyr1[yyn] - YYNTOKENS;
+    const int yyi = yypgoto[yylhs] + *yyssp;
+    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
+               ? yytable[yyi]
+               : yydefgoto[yylhs]);
+  }
+
+  goto yynewstate;
+
+
+/*--------------------------------------.
+| yyerrlab -- here on detecting error.  |
+`--------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+         error, discard it.  */
+
+      if (yychar <= YYEOF)
+        {
+          /* Return failure if at end of input.  */
+          if (yychar == YYEOF)
+            YYABORT;
+        }
+      else
+        {
+          yydestruct ("Error: discarding",
+                      yytoken, &yylval);
+          yychar = YYEMPTY;
+        }
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+  /* Pacify compilers when the user code never invokes YYERROR and the
+     label yyerrorlab therefore never appears in user code.  */
+  if (0)
+    YYERROR;
+
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+        {
+          yyn += YYTERROR;
+          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+            {
+              yyn = yytable[yyn];
+              if (0 < yyn)
+                break;
+            }
+        }
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+        YYABORT;
+
+
+      yydestruct ("Error: popping",
+                  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+
+/*-----------------------------------------------------.
+| yyreturn -- parsing is finished, return the result.  |
+`-----------------------------------------------------*/
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule whose action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+                  yystos[+*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  return yyresult;
+}
+#line 172 "/home/luxe/Desktop/php-src/sapi/phpdbg/phpdbg_parser.y"
+
+
+static int yyerror(const char *msg) {
+	phpdbg_error("Parse Error: %s", msg);
+
+	{
+		const phpdbg_param_t *top = PHPDBG_G(parser_stack);
+
+		while (top) {
+			phpdbg_param_debug(top, "--> ");
+			top = top->next;
+		}
+	}
+	return 0;
+}
+
+int phpdbg_do_parse(phpdbg_param_t *stack, char *input) {
+	if (!*input) {
+		return 0;
+	}
+
+	if (PHPDBG_G(cur_command)) {
+		free(PHPDBG_G(cur_command));
+	}
+	PHPDBG_G(cur_command) = strdup(input);
+
+	phpdbg_init_lexer(stack, input);
+
+	return yyparse();
+}
