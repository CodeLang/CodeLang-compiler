diff --git a/build/config.h b/build/config.h
new file mode 100644
index 0000000000..680f11b6d0
--- /dev/null
+++ b/build/config.h
@@ -0,0 +1,475 @@
+/*
+ * Autogenerated by the Meson build system.
+ * Do not edit, your changes will be lost.
+ */
+
+#pragma once
+
+#define ANSI_OK_COLOR ANSI_GREEN
+
+#define BOOTLIBDIR "/usr/lib/systemd/boot/efi"
+
+#define BUMP_PROC_SYS_FS_FILE_MAX 1
+
+#define BUMP_PROC_SYS_FS_NR_OPEN 1
+
+#define CATALOG_DATABASE "/var/lib/systemd/catalog/database"
+
+#define CERTIFICATE_ROOT "/etc/ssl"
+
+#define CONTAINER_UID_BASE_MAX 1878982656
+
+#define CONTAINER_UID_BASE_MIN 524288
+
+#define DEBUGTTY "/dev/tty9"
+
+#define DEFAULT_DNSSEC_MODE DNSSEC_NO
+
+#define DEFAULT_DNS_OVER_TLS_MODE DNS_OVER_TLS_NO
+
+#define DEFAULT_HIERARCHY CGROUP_UNIFIED_ALL
+
+/* default cgroup hierarchy as string */
+#define DEFAULT_HIERARCHY_NAME "unified"
+
+#define DEFAULT_LLMNR_MODE RESOLVE_SUPPORT_YES
+
+#define DEFAULT_MDNS_MODE RESOLVE_SUPPORT_YES
+
+#define DEFAULT_NET_NAMING_SCHEME "latest"
+
+#define DEV_KVM_UACCESS 0
+
+#define DNS_OVER_TLS_USE_GNUTLS 0
+
+#define DNS_OVER_TLS_USE_OPENSSL 1
+
+#define DNS_SERVERS "1.1.1.1 8.8.8.8 1.0.0.1 8.8.4.4 2606:4700:4700::1111 2001:4860:4860::8888 2606:4700:4700::1001 2001:4860:4860::8844"
+
+#define DOCUMENT_ROOT "/usr/share/systemd/gatewayd"
+
+#define DYNAMIC_UID_MAX 65519
+
+#define DYNAMIC_UID_MIN 61184
+
+#define EFI_MACHINE_TYPE_NAME "x64"
+
+#define ENABLE_ADM_GROUP 1
+
+#define ENABLE_BACKLIGHT 1
+
+#define ENABLE_BINFMT 1
+
+#define ENABLE_COMPAT_GATEWAY_HOSTNAME 0
+
+#define ENABLE_COREDUMP 1
+
+#define ENABLE_DEBUG_HASHMAP 0
+
+#define ENABLE_DEBUG_MMAP_CACHE 0
+
+#define ENABLE_DEBUG_SIPHASH 0
+
+#define ENABLE_DNS_OVER_TLS 1
+
+//#define ENABLE_EFI 1
+
+#define ENABLE_ENVIRONMENT_D 1
+
+#define ENABLE_FIRSTBOOT 1
+
+#define ENABLE_GSHADOW 1
+
+#define ENABLE_HIBERNATE 1
+
+#define ENABLE_HOMED 0
+
+#define ENABLE_HOSTNAMED 1
+
+#define ENABLE_HWDB 1
+
+#define ENABLE_IDN 1
+
+#define ENABLE_IMA 1
+
+#define ENABLE_IMPORTD 0
+
+#define ENABLE_INITRD 1
+
+#define ENABLE_LDCONFIG 1
+
+#define ENABLE_LOCALED 1
+
+#define ENABLE_LOGIND 1
+
+#define ENABLE_MACHINED 1
+
+#define ENABLE_NETWORKD 1
+
+#define ENABLE_NSS 1
+
+#define ENABLE_NSS_MYHOSTNAME 1
+
+#define ENABLE_NSS_MYMACHINES 1
+
+#define ENABLE_NSS_RESOLVE 1
+
+#define ENABLE_NSS_SYSTEMD 1
+
+#define ENABLE_PAM_HOME 0
+
+#define ENABLE_POLKIT 1
+
+#define ENABLE_PORTABLED 1
+
+#define ENABLE_PSTORE 1
+
+#define ENABLE_QUOTACHECK 1
+
+#define ENABLE_RANDOMSEED 1
+
+#define ENABLE_REMOTE 0
+
+#define ENABLE_REPART 0
+
+#define ENABLE_RESOLVE 1
+
+#define ENABLE_RFKILL 1
+
+#define ENABLE_SMACK 1
+
+#define ENABLE_SYSUSERS 1
+
+#define ENABLE_TIMEDATECTL 1
+
+#define ENABLE_TIMEDATED 1
+
+#define ENABLE_TIMESYNCD 1
+
+#define ENABLE_TMPFILES 1
+
+#define ENABLE_TPM 1
+
+#define ENABLE_USERDB 1
+
+#define ENABLE_UTMP 1
+
+#define ENABLE_VCONSOLE 1
+
+#define ENABLE_WHEEL_GROUP 1
+
+#define ENABLE_XDG_AUTOSTART 1
+
+#define FALLBACK_HOSTNAME "localhost"
+
+#define GETTEXT_PACKAGE "systemd"
+
+/* The type of gperf "len" parameter */
+#define GPERF_LEN_TYPE size_t
+
+#define GROUP_RENDER_UACCESS 0
+
+#define HAVE_ACL 0
+
+#define HAVE_APPARMOR 0
+
+#define HAVE_AUDIT 0
+
+//#define HAVE_BLKID 1
+
+#define HAVE_BPF 0
+
+#define HAVE_BZIP2 1
+
+#define HAVE_CHAR16_T 1
+
+#define HAVE_CHAR32_T 1
+
+//#define HAVE_COPY_FILE_RANGE 1
+
+#define HAVE_CRYPT_H 1
+
+#define HAVE_CRYPT_SET_METADATA_SIZE 0
+
+#define HAVE_DBUS 1
+
+#define HAVE_ELFUTILS 0
+
+//#define HAVE_EXPLICIT_BZERO 1
+
+#define HAVE_GCRYPT 0
+
+//#define HAVE_GETRANDOM 1
+
+#define HAVE_GETTID 0
+
+#define HAVE_GET_MEMPOLICY 0
+
+#define HAVE_GLIB 1
+
+#define HAVE_GNUTLS 0
+
+#define HAVE_KCMP 0
+
+#define HAVE_KEYCTL 0
+
+//#define HAVE_KMOD 0
+
+#define HAVE_LIBCRYPTSETUP 0
+
+#define HAVE_LIBCURL 0
+
+#define HAVE_LIBFDISK 0
+
+#define HAVE_LIBIDN 0
+
+#define HAVE_LIBIDN2 0
+
+//#define HAVE_LIBIPTC 0
+
+#define HAVE_LINUX_MEMFD_H 1
+
+#define HAVE_LINUX_VM_SOCKETS_H 1
+
+#define HAVE_LZ4 0
+
+//#define HAVE_MEMFD_CREATE 1
+
+#define HAVE_MICROHTTPD 0
+
+#define HAVE_NAME_TO_HANDLE_AT 1
+
+#define HAVE_OPENSSL 1
+
+#define HAVE_P11KIT 0
+
+#define HAVE_PAM 0
+
+#define HAVE_PCRE2 0
+
+#define HAVE_PIDFD_OPEN 0
+
+#define HAVE_PIDFD_SEND_SIGNAL 0
+
+#define HAVE_PIVOT_ROOT 0
+
+#define HAVE_PWQUALITY 0
+
+#define HAVE_QRENCODE 0
+
+//#define HAVE_REALLOCARRAY 1
+
+#define HAVE_RENAMEAT2 0
+
+#define HAVE_RT_SIGQUEUEINFO 0
+
+//#define HAVE_SECCOMP 0
+
+#define HAVE_SECURE_GETENV 1
+
+#define HAVE_SELINUX 0
+
+#define HAVE_SETNS 1
+
+#define HAVE_SET_MEMPOLICY 0
+
+/* bin and sbin directories are separate */
+#define HAVE_SPLIT_BIN 1
+
+/* /usr/bin and /bin directories are separate */
+#define HAVE_SPLIT_USR 1
+
+//#define HAVE_STATX 0
+
+//#define HAVE_STRUCT_STATX 1
+
+/* SysV init scripts and rcN.d links are supported */
+#define HAVE_SYSV_COMPAT 1
+
+#define HAVE_SYS_AUXV_H 1
+
+#define HAVE_VALGRIND_MEMCHECK_H 0
+
+#define HAVE_VALGRIND_VALGRIND_H 0
+
+#define HAVE_WSTRINGOP_TRUNCATION 1
+
+#define HAVE_XKBCOMMON 1
+
+#define HAVE_XZ 1
+
+#define HAVE_ZERO_LENGTH_BOUNDS 0
+
+#define HAVE_ZLIB 1
+
+#define HAVE_ZSTD 0
+
+#define HAVE___SECURE_GETENV 0
+
+#define HIGH_RLIMIT_NOFILE 524288
+
+#define KBD_LOADKEYS "/usr/bin/loadkeys"
+
+#define KBD_SETFONT "/bin/setfont"
+
+#define KEXEC "/usr/sbin/kexec"
+
+#define KILL_USER_PROCESSES 1
+
+#define KILL_USER_PROCESSES_YES_NO "yes"
+
+#define KMOD "/bin/kmod"
+
+#define LIBDIR "/usr/lib/x86_64-linux-gnu"
+
+#define LOG_TRACE 0
+
+#define MEMORY_ACCOUNTING_DEFAULT 1
+
+#define MEMORY_ACCOUNTING_DEFAULT_YES_NO "yes"
+
+#define MOUNT_PATH "/bin/mount"
+
+#define NOBODY_GROUP_NAME "nobody"
+
+#define NOBODY_USER_NAME "nobody"
+
+#define NOLOGIN "/usr/sbin/nologin"
+
+#define NTP_SERVERS "time1.google.com time2.google.com time3.google.com time4.google.com"
+
+#define PKGSYSCONFDIR "/etc/systemd"
+
+#define POLKIT_AGENT_BINARY_PATH "/usr/bin/pkttyagent"
+
+/* Numerical project version (used where a simple number is expected) */
+#define PROJECT_VERSION 245
+
+#define QUOTACHECK "/usr/sbin/quotacheck"
+
+#define QUOTAON "/usr/sbin/quotaon"
+
+#define RANDOM_SEED "/var/lib/systemd/random-seed"
+
+#define RANDOM_SEED_DIR "/var/lib/systemd"
+
+#define RC_LOCAL_SCRIPT_PATH_START "/etc/rc.local"
+
+#define RELATIVE_SOURCE_PATH ".."
+
+#define ROOTLIBDIR "/x86_64-linux-gnu"
+
+#define ROOTLIBEXECDIR "/lib/systemd"
+
+#define ROOTPREFIX "/"
+
+#define SD_TPM_PCR 8
+
+#define SIZEOF_DEV_T 8
+
+#define SIZEOF_INO_T 8
+
+#define SIZEOF_RLIM_T 8
+
+#define SIZEOF_TIME_T 8
+
+#define STATUS_UNIT_FORMAT_DEFAULT STATUS_UNIT_FORMAT_DESCRIPTION
+
+#define SULOGIN "/sbin/sulogin"
+
+#define SYSTEMCTL_BINARY_PATH "/bin/systemctl"
+
+#define SYSTEMD_BINARY_PATH "/lib/systemd/systemd"
+
+#define SYSTEMD_CATALOG_DIR "/usr/lib/systemd/catalog"
+
+#define SYSTEMD_CGROUP_AGENT_PATH "/lib/systemd/systemd-cgroups-agent"
+
+#define SYSTEMD_CRYPTSETUP_PATH "/lib/systemd/systemd-cryptsetup"
+
+#define SYSTEMD_DEFAULT_LOCALE "C.UTF-8"
+
+#define SYSTEMD_EXPORT_PATH "/lib/systemd/systemd-export"
+
+#define SYSTEMD_FSCK_PATH "/lib/systemd/systemd-fsck"
+
+#define SYSTEMD_GROWFS_PATH "/lib/systemd/systemd-growfs"
+
+#define SYSTEMD_HOMEWORK_PATH "/lib/systemd/systemd-homework"
+
+#define SYSTEMD_IMPORT_FS_PATH "/lib/systemd/systemd-import-fs"
+
+#define SYSTEMD_IMPORT_PATH "/lib/systemd/systemd-import"
+
+#define SYSTEMD_KBD_MODEL_MAP "/usr/share/systemd/kbd-model-map"
+
+#define SYSTEMD_LANGUAGE_FALLBACK_MAP "/usr/share/systemd/language-fallback-map"
+
+#define SYSTEMD_MAKEFS_PATH "/lib/systemd/systemd-makefs"
+
+#define SYSTEMD_PULL_PATH "/lib/systemd/systemd-pull"
+
+#define SYSTEMD_SHUTDOWN_BINARY_PATH "/lib/systemd/systemd-shutdown"
+
+#define SYSTEMD_SLOW_TESTS_DEFAULT 0
+
+#define SYSTEMD_STDIO_BRIDGE_BINARY_PATH "/usr/bin/systemd-stdio-bridge"
+
+#define SYSTEMD_TEST_DATA "/usr/lib/systemd/tests/testdata"
+
+#define SYSTEMD_TTY_ASK_PASSWORD_AGENT_BINARY_PATH "/bin/systemd-tty-ask-password-agent"
+
+#define SYSTEMD_USERWORK_PATH "/lib/systemd/systemd-userwork"
+
+#define SYSTEM_CONFIG_UNIT_DIR "/etc/systemd/system"
+
+#define SYSTEM_DATA_UNIT_PATH "/lib/systemd/system"
+
+#define SYSTEM_ENV_GENERATOR_DIR "/usr/lib/systemd/system-environment-generators"
+
+#define SYSTEM_GENERATOR_DIR "/lib/systemd/system-generators"
+
+#define SYSTEM_GID_MAX 999
+
+#define SYSTEM_SHUTDOWN_PATH "/lib/systemd/system-shutdown"
+
+#define SYSTEM_SLEEP_PATH "/lib/systemd/system-sleep"
+
+#define SYSTEM_SYSVINIT_PATH "/etc/init.d"
+
+#define SYSTEM_SYSVRCND_PATH "/etc/rc.d"
+
+#define SYSTEM_UID_MAX 999
+
+#define TELINIT "/lib/sysvinit/telinit"
+
+#define TIME_EPOCH 1591721814
+
+#define TTY_GID 5
+
+#define UDEVLIBEXECDIR "/lib/udev"
+
+#define UMOUNT_PATH "/bin/umount"
+
+#define USER_CONFIG_UNIT_DIR "/etc/systemd/user"
+
+#define USER_DATA_UNIT_DIR "/usr/lib/systemd/user"
+
+#define USER_ENV_GENERATOR_DIR "/usr/lib/systemd/user-environment-generators"
+
+#define USER_GENERATOR_DIR "/usr/lib/systemd/user-generators"
+
+#define USER_KEYRING_PATH "/etc/systemd/import-pubring.gpg"
+
+//#define USE_SYS_RANDOM_H 1
+
+#define VALGRIND 0
+
+#define VENDOR_KEYRING_PATH "/lib/systemd/import-pubring.gpg"
+
+#define WANT_LINUX_STAT_H 1
+
+#define _GNU_SOURCE
+
+#define __SANE_USERSPACE_TYPES__
+
diff --git a/build/meson-private/sanitycheckc.c b/build/meson-private/sanitycheckc.c
new file mode 100644
index 0000000000..a27020ebda
--- /dev/null
+++ b/build/meson-private/sanitycheckc.c
@@ -0,0 +1 @@
+int main(void) { int class=0; return class; }
diff --git a/build/src/basic/af-from-name.h b/build/src/basic/af-from-name.h
new file mode 100644
index 0000000000..19676aaf5d
--- /dev/null
+++ b/build/src/basic/af-from-name.h
@@ -0,0 +1,275 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_af -H hash_af_name -p -C src/basic/af-from-name.gperf  */
+/* Computed positions: -k'4-5,7' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/basic/af-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/basic/af-from-name.gperf"
+struct af_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 46
+#define MIN_WORD_LENGTH 5
+#define MAX_WORD_LENGTH 13
+#define MIN_HASH_VALUE 6
+#define MAX_HASH_VALUE 82
+/* maximum key range = 77, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_af_name (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      35, 83, 83, 45, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83,  0,  5, 35,  0,  5,
+      40, 83, 15,  0, 83, 15, 15, 55,  5, 10,
+       0,  0, 25,  5,  0, 25, 30,  5, 20, 83,
+      83, 83, 83, 83, 83, 83, 83,  0,  5, 35,
+       0,  5, 40, 83, 15,  0, 83, 15, 15, 55,
+       5, 10,  0,  0, 25,  5,  0, 25, 30,  5,
+      20, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
+      83, 83, 83, 83, 83, 83
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[6]];
+      /*FALLTHROUGH*/
+      case 6:
+      case 5:
+        hval += asso_values[(unsigned char)str[4]];
+      /*FALLTHROUGH*/
+      case 4:
+        hval += asso_values[(unsigned char)str[3]];
+        break;
+    }
+  return hval;
+}
+
+const struct af_name *
+lookup_af (register const char *str, register size_t len)
+{
+  static const struct af_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 54 "src/basic/af-from-name.gperf"
+      {"AF_IPX", AF_IPX},
+      {(char*)0}, {(char*)0},
+#line 47 "src/basic/af-from-name.gperf"
+      {"AF_ATMPVC", AF_ATMPVC},
+#line 11 "src/basic/af-from-name.gperf"
+      {"AF_IB", AF_IB},
+#line 48 "src/basic/af-from-name.gperf"
+      {"AF_ASH", AF_ASH},
+#line 33 "src/basic/af-from-name.gperf"
+      {"AF_INET", AF_INET},
+#line 17 "src/basic/af-from-name.gperf"
+      {"AF_INET6", AF_INET6},
+#line 36 "src/basic/af-from-name.gperf"
+      {"AF_ATMSVC", AF_ATMSVC},
+#line 18 "src/basic/af-from-name.gperf"
+      {"AF_WANPIPE", AF_WANPIPE},
+#line 42 "src/basic/af-from-name.gperf"
+      {"AF_SNA", AF_SNA},
+#line 52 "src/basic/af-from-name.gperf"
+      {"AF_ISDN", AF_ISDN},
+#line 28 "src/basic/af-from-name.gperf"
+      {"AF_PPPOX", AF_PPPOX},
+#line 50 "src/basic/af-from-name.gperf"
+      {"AF_DECnet", AF_DECnet},
+      {(char*)0},
+#line 45 "src/basic/af-from-name.gperf"
+      {"AF_ALG", AF_ALG},
+      {(char*)0},
+#line 38 "src/basic/af-from-name.gperf"
+      {"AF_IEEE802154", AF_IEEE802154},
+#line 37 "src/basic/af-from-name.gperf"
+      {"AF_PACKET", AF_PACKET},
+#line 41 "src/basic/af-from-name.gperf"
+      {"AF_NETBEUI", AF_NETBEUI},
+#line 30 "src/basic/af-from-name.gperf"
+      {"AF_KEY", AF_KEY},
+#line 10 "src/basic/af-from-name.gperf"
+      {"AF_APPLETALK", AF_APPLETALK},
+      {(char*)0},
+#line 16 "src/basic/af-from-name.gperf"
+      {"AF_PHONET", AF_PHONET},
+      {(char*)0},
+#line 27 "src/basic/af-from-name.gperf"
+      {"AF_RDS", AF_RDS},
+#line 39 "src/basic/af-from-name.gperf"
+      {"AF_IRDA", AF_IRDA},
+#line 44 "src/basic/af-from-name.gperf"
+      {"AF_LOCAL", AF_LOCAL},
+      {(char*)0},
+#line 25 "src/basic/af-from-name.gperf"
+      {"AF_NETLINK", AF_NETLINK},
+#line 9 "src/basic/af-from-name.gperf"
+      {"AF_LLC", AF_LLC},
+#line 21 "src/basic/af-from-name.gperf"
+      {"AF_BLUETOOTH", AF_BLUETOOTH},
+      {(char*)0},
+#line 19 "src/basic/af-from-name.gperf"
+      {"AF_BRIDGE", AF_BRIDGE},
+      {(char*)0},
+#line 20 "src/basic/af-from-name.gperf"
+      {"AF_CAN", AF_CAN},
+#line 15 "src/basic/af-from-name.gperf"
+      {"AF_TIPC", AF_TIPC},
+#line 23 "src/basic/af-from-name.gperf"
+      {"AF_ROUTE", AF_ROUTE},
+#line 13 "src/basic/af-from-name.gperf"
+      {"AF_NETROM", AF_NETROM},
+#line 46 "src/basic/af-from-name.gperf"
+      {"AF_QIPCRTR", AF_QIPCRTR},
+#line 24 "src/basic/af-from-name.gperf"
+      {"AF_SECURITY", AF_SECURITY},
+#line 12 "src/basic/af-from-name.gperf"
+      {"AF_ROSE", AF_ROSE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 22 "src/basic/af-from-name.gperf"
+      {"AF_NFC", AF_NFC},
+#line 14 "src/basic/af-from-name.gperf"
+      {"AF_FILE", AF_FILE},
+#line 40 "src/basic/af-from-name.gperf"
+      {"AF_RXRPC", AF_RXRPC},
+#line 32 "src/basic/af-from-name.gperf"
+      {"AF_ECONET", AF_ECONET},
+      {(char*)0},
+#line 29 "src/basic/af-from-name.gperf"
+      {"AF_KCM", AF_KCM},
+#line 49 "src/basic/af-from-name.gperf"
+      {"AF_UNIX", AF_UNIX},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 53 "src/basic/af-from-name.gperf"
+      {"AF_X25", AF_X25},
+#line 31 "src/basic/af-from-name.gperf"
+      {"AF_IUCV", AF_IUCV},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 35 "src/basic/af-from-name.gperf"
+      {"AF_SMC", AF_SMC},
+#line 34 "src/basic/af-from-name.gperf"
+      {"AF_MPLS", AF_MPLS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 26 "src/basic/af-from-name.gperf"
+      {"AF_AX25", AF_AX25},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 43 "src/basic/af-from-name.gperf"
+      {"AF_VSOCK", AF_VSOCK},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 51 "src/basic/af-from-name.gperf"
+      {"AF_CAIF", AF_CAIF}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_af_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/basic/af-to-name.h b/build/src/basic/af-to-name.h
new file mode 100644
index 0000000000..3f54f76b4e
--- /dev/null
+++ b/build/src/basic/af-to-name.h
@@ -0,0 +1,45 @@
+static const char* const af_names[] = { 
+        [AF_LLC] = "AF_LLC",
+        [AF_APPLETALK] = "AF_APPLETALK",
+        [AF_IB] = "AF_IB",
+        [AF_ROSE] = "AF_ROSE",
+        [AF_NETROM] = "AF_NETROM",
+        [AF_TIPC] = "AF_TIPC",
+        [AF_PHONET] = "AF_PHONET",
+        [AF_INET6] = "AF_INET6",
+        [AF_WANPIPE] = "AF_WANPIPE",
+        [AF_BRIDGE] = "AF_BRIDGE",
+        [AF_CAN] = "AF_CAN",
+        [AF_BLUETOOTH] = "AF_BLUETOOTH",
+        [AF_NFC] = "AF_NFC",
+        [AF_SECURITY] = "AF_SECURITY",
+        [AF_NETLINK] = "AF_NETLINK",
+        [AF_AX25] = "AF_AX25",
+        [AF_RDS] = "AF_RDS",
+        [AF_PPPOX] = "AF_PPPOX",
+        [AF_KCM] = "AF_KCM",
+        [AF_KEY] = "AF_KEY",
+        [AF_IUCV] = "AF_IUCV",
+        [AF_ECONET] = "AF_ECONET",
+        [AF_INET] = "AF_INET",
+        [AF_MPLS] = "AF_MPLS",
+        [AF_SMC] = "AF_SMC",
+        [AF_ATMSVC] = "AF_ATMSVC",
+        [AF_PACKET] = "AF_PACKET",
+        [AF_IEEE802154] = "AF_IEEE802154",
+        [AF_IRDA] = "AF_IRDA",
+        [AF_RXRPC] = "AF_RXRPC",
+        [AF_NETBEUI] = "AF_NETBEUI",
+        [AF_SNA] = "AF_SNA",
+        [AF_VSOCK] = "AF_VSOCK",
+        [AF_ALG] = "AF_ALG",
+        [AF_QIPCRTR] = "AF_QIPCRTR",
+        [AF_ATMPVC] = "AF_ATMPVC",
+        [AF_ASH] = "AF_ASH",
+        [AF_UNIX] = "AF_UNIX",
+        [AF_DECnet] = "AF_DECnet",
+        [AF_CAIF] = "AF_CAIF",
+        [AF_ISDN] = "AF_ISDN",
+        [AF_X25] = "AF_X25",
+        [AF_IPX] = "AF_IPX",
+};
diff --git a/build/src/basic/arphrd-from-name.h b/build/src/basic/arphrd-from-name.h
new file mode 100644
index 0000000000..e765d39259
--- /dev/null
+++ b/build/src/basic/arphrd-from-name.h
@@ -0,0 +1,315 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_arphrd -H hash_arphrd_name -p -C src/basic/arphrd-from-name.gperf  */
+/* Computed positions: -k'2-3,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/basic/arphrd-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/basic/arphrd-from-name.gperf"
+struct arphrd_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 67
+#define MIN_WORD_LENGTH 3
+#define MAX_WORD_LENGTH 18
+#define MIN_HASH_VALUE 4
+#define MAX_HASH_VALUE 144
+/* maximum key range = 141, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_arphrd_name (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145,   0,
+        0,   0,  65,   0,   5,   0, 145, 145, 145, 145,
+      145, 145, 145, 145, 145,  70,  20,  30,   5,   0,
+        5,  40,  35,   0,  35,  10,  20,  15,  40,  20,
+        0,  50,   5,  25,   0,  10, 145,  25,   0,  20,
+      145, 145, 145, 145, 145, 145, 145,  70,  20,  30,
+        5,   0,   5,  40,  35,   0,  35,  10,  20,  15,
+       40,  20,   0,  50,   5,  25,   0,  10, 145,  25,
+        0,  20, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
+      145, 145, 145, 145, 145, 145, 145
+    };
+  return len + asso_values[(unsigned char)str[2]+1] + asso_values[(unsigned char)str[1]] + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct arphrd_name *
+lookup_arphrd (register const char *str, register size_t len)
+{
+  static const struct arphrd_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 14 "src/basic/arphrd-from-name.gperf"
+      {"AX25", ARPHRD_AX25},
+#line 49 "src/basic/arphrd-from-name.gperf"
+      {"IPDDP", ARPHRD_IPDDP},
+#line 26 "src/basic/arphrd-from-name.gperf"
+      {"IP6GRE", ARPHRD_IP6GRE},
+      {(char*)0},
+#line 59 "src/basic/arphrd-from-name.gperf"
+      {"X25", ARPHRD_X25},
+#line 39 "src/basic/arphrd-from-name.gperf"
+      {"FDDI", ARPHRD_FDDI},
+#line 37 "src/basic/arphrd-from-name.gperf"
+      {"ETHER", ARPHRD_ETHER},
+#line 45 "src/basic/arphrd-from-name.gperf"
+      {"PRONET", ARPHRD_PRONET},
+#line 36 "src/basic/arphrd-from-name.gperf"
+      {"IEEE802", ARPHRD_IEEE802},
+#line 9 "src/basic/arphrd-from-name.gperf"
+      {"SIT", ARPHRD_SIT},
+#line 44 "src/basic/arphrd-from-name.gperf"
+      {"IEEE80211", ARPHRD_IEEE80211},
+#line 38 "src/basic/arphrd-from-name.gperf"
+      {"DDCMP", ARPHRD_DDCMP},
+#line 70 "src/basic/arphrd-from-name.gperf"
+      {"ARCNET", ARPHRD_ARCNET},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 42 "src/basic/arphrd-from-name.gperf"
+      {"IEEE802_TR", ARPHRD_IEEE802_TR},
+#line 48 "src/basic/arphrd-from-name.gperf"
+      {"EETHER", ARPHRD_EETHER},
+      {(char*)0},
+#line 25 "src/basic/arphrd-from-name.gperf"
+      {"IEEE80211_RADIOTAP", ARPHRD_IEEE80211_RADIOTAP},
+#line 68 "src/basic/arphrd-from-name.gperf"
+      {"ROSE", ARPHRD_ROSE},
+#line 57 "src/basic/arphrd-from-name.gperf"
+      {"CISCO", ARPHRD_CISCO},
+      {(char*)0},
+#line 15 "src/basic/arphrd-from-name.gperf"
+      {"NETLINK", ARPHRD_NETLINK},
+#line 65 "src/basic/arphrd-from-name.gperf"
+      {"IEEE802154_MONITOR", ARPHRD_IEEE802154_MONITOR},
+#line 52 "src/basic/arphrd-from-name.gperf"
+      {"DLCI", ARPHRD_DLCI},
+#line 16 "src/basic/arphrd-from-name.gperf"
+      {"ADAPT", ARPHRD_ADAPT},
+#line 27 "src/basic/arphrd-from-name.gperf"
+      {"NETROM", ARPHRD_NETROM},
+      {(char*)0},
+#line 40 "src/basic/arphrd-from-name.gperf"
+      {"METRICOM", ARPHRD_METRICOM},
+#line 28 "src/basic/arphrd-from-name.gperf"
+      {"FRAD", ARPHRD_FRAD},
+#line 20 "src/basic/arphrd-from-name.gperf"
+      {"IEEE80211_PRISM", ARPHRD_IEEE80211_PRISM},
+#line 50 "src/basic/arphrd-from-name.gperf"
+      {"ECONET", ARPHRD_ECONET},
+      {(char*)0},
+#line 75 "src/basic/arphrd-from-name.gperf"
+      {"LOOPBACK", ARPHRD_LOOPBACK},
+      {(char*)0},
+#line 41 "src/basic/arphrd-from-name.gperf"
+      {"IPGRE", ARPHRD_IPGRE},
+#line 30 "src/basic/arphrd-from-name.gperf"
+      {"PHONET", ARPHRD_PHONET},
+#line 54 "src/basic/arphrd-from-name.gperf"
+      {"TUNNEL6", ARPHRD_TUNNEL6},
+#line 72 "src/basic/arphrd-from-name.gperf"
+      {"LOCALTLK", ARPHRD_LOCALTLK},
+#line 58 "src/basic/arphrd-from-name.gperf"
+      {"NONE", ARPHRD_NONE},
+#line 33 "src/basic/arphrd-from-name.gperf"
+      {"CSLIP", ARPHRD_CSLIP},
+#line 32 "src/basic/arphrd-from-name.gperf"
+      {"PHONET_PIPE", ARPHRD_PHONET_PIPE},
+      {(char*)0},
+#line 29 "src/basic/arphrd-from-name.gperf"
+      {"BIF", ARPHRD_BIF},
+#line 11 "src/basic/arphrd-from-name.gperf"
+      {"SKIP", ARPHRD_SKIP},
+#line 46 "src/basic/arphrd-from-name.gperf"
+      {"HWX25", ARPHRD_HWX25},
+#line 71 "src/basic/arphrd-from-name.gperf"
+      {"CSLIP6", ARPHRD_CSLIP6},
+      {(char*)0},
+#line 17 "src/basic/arphrd-from-name.gperf"
+      {"PPP", ARPHRD_PPP},
+#line 21 "src/basic/arphrd-from-name.gperf"
+      {"HDLC", ARPHRD_HDLC},
+#line 66 "src/basic/arphrd-from-name.gperf"
+      {"HIPPI", ARPHRD_HIPPI},
+#line 34 "src/basic/arphrd-from-name.gperf"
+      {"TUNNEL", ARPHRD_TUNNEL},
+      {(char*)0},
+#line 13 "src/basic/arphrd-from-name.gperf"
+      {"ATM", ARPHRD_ATM},
+#line 31 "src/basic/arphrd-from-name.gperf"
+      {"SLIP", ARPHRD_SLIP},
+#line 74 "src/basic/arphrd-from-name.gperf"
+      {"RSRVD", ARPHRD_RSRVD},
+      {(char*)0}, {(char*)0},
+#line 12 "src/basic/arphrd-from-name.gperf"
+      {"ASH", ARPHRD_ASH},
+#line 60 "src/basic/arphrd-from-name.gperf"
+      {"VOID", ARPHRD_VOID},
+#line 73 "src/basic/arphrd-from-name.gperf"
+      {"SLIP6", ARPHRD_SLIP6},
+      {(char*)0},
+#line 19 "src/basic/arphrd-from-name.gperf"
+      {"6LOWPAN", ARPHRD_6LOWPAN},
+#line 53 "src/basic/arphrd-from-name.gperf"
+      {"APPLETLK", ARPHRD_APPLETLK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 61 "src/basic/arphrd-from-name.gperf"
+      {"VSOCKMON", ARPHRD_VSOCKMON},
+#line 18 "src/basic/arphrd-from-name.gperf"
+      {"FCAL", ARPHRD_FCAL},
+#line 67 "src/basic/arphrd-from-name.gperf"
+      {"RAWIP", ARPHRD_RAWIP},
+      {(char*)0}, {(char*)0},
+#line 55 "src/basic/arphrd-from-name.gperf"
+      {"IEEE1394", ARPHRD_IEEE1394},
+#line 63 "src/basic/arphrd-from-name.gperf"
+      {"IRDA", ARPHRD_IRDA},
+#line 64 "src/basic/arphrd-from-name.gperf"
+      {"IEEE802154", ARPHRD_IEEE802154},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 23 "src/basic/arphrd-from-name.gperf"
+      {"FCPP", ARPHRD_FCPP},
+#line 35 "src/basic/arphrd-from-name.gperf"
+      {"CHAOS", ARPHRD_CHAOS},
+#line 51 "src/basic/arphrd-from-name.gperf"
+      {"PIMREG", ARPHRD_PIMREG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 62 "src/basic/arphrd-from-name.gperf"
+      {"INFINIBAND", ARPHRD_INFINIBAND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 22 "src/basic/arphrd-from-name.gperf"
+      {"FCPL", ARPHRD_FCPL},
+      {(char*)0}, {(char*)0},
+#line 56 "src/basic/arphrd-from-name.gperf"
+      {"RAWHDLC", ARPHRD_RAWHDLC},
+#line 24 "src/basic/arphrd-from-name.gperf"
+      {"FCFABRIC", ARPHRD_FCFABRIC},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 47 "src/basic/arphrd-from-name.gperf"
+      {"CAIF", ARPHRD_CAIF},
+#line 10 "src/basic/arphrd-from-name.gperf"
+      {"EUI64", ARPHRD_EUI64},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 43 "src/basic/arphrd-from-name.gperf"
+      {"CAN", ARPHRD_CAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 69 "src/basic/arphrd-from-name.gperf"
+      {"LAPB", ARPHRD_LAPB}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_arphrd_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/basic/arphrd-to-name.h b/build/src/basic/arphrd-to-name.h
new file mode 100644
index 0000000000..e7cc90c0d2
--- /dev/null
+++ b/build/src/basic/arphrd-to-name.h
@@ -0,0 +1,71 @@
+const char *arphrd_to_name(int id) {
+        switch(id) {
+        case ARPHRD_SIT: return "SIT";
+        case ARPHRD_EUI64: return "EUI64";
+        case ARPHRD_SKIP: return "SKIP";
+        case ARPHRD_ASH: return "ASH";
+        case ARPHRD_ATM: return "ATM";
+        case ARPHRD_AX25: return "AX25";
+        case ARPHRD_NETLINK: return "NETLINK";
+        case ARPHRD_ADAPT: return "ADAPT";
+        case ARPHRD_PPP: return "PPP";
+        case ARPHRD_FCAL: return "FCAL";
+        case ARPHRD_6LOWPAN: return "6LOWPAN";
+        case ARPHRD_IEEE80211_PRISM: return "IEEE80211_PRISM";
+        case ARPHRD_FCPL: return "FCPL";
+        case ARPHRD_FCPP: return "FCPP";
+        case ARPHRD_FCFABRIC: return "FCFABRIC";
+        case ARPHRD_IEEE80211_RADIOTAP: return "IEEE80211_RADIOTAP";
+        case ARPHRD_IP6GRE: return "IP6GRE";
+        case ARPHRD_NETROM: return "NETROM";
+        case ARPHRD_FRAD: return "FRAD";
+        case ARPHRD_BIF: return "BIF";
+        case ARPHRD_PHONET: return "PHONET";
+        case ARPHRD_SLIP: return "SLIP";
+        case ARPHRD_PHONET_PIPE: return "PHONET_PIPE";
+        case ARPHRD_CSLIP: return "CSLIP";
+        case ARPHRD_TUNNEL: return "TUNNEL";
+        case ARPHRD_CHAOS: return "CHAOS";
+        case ARPHRD_IEEE802: return "IEEE802";
+        case ARPHRD_ETHER: return "ETHER";
+        case ARPHRD_DDCMP: return "DDCMP";
+        case ARPHRD_FDDI: return "FDDI";
+        case ARPHRD_METRICOM: return "METRICOM";
+        case ARPHRD_IPGRE: return "IPGRE";
+        case ARPHRD_IEEE802_TR: return "IEEE802_TR";
+        case ARPHRD_CAN: return "CAN";
+        case ARPHRD_IEEE80211: return "IEEE80211";
+        case ARPHRD_PRONET: return "PRONET";
+        case ARPHRD_HWX25: return "HWX25";
+        case ARPHRD_CAIF: return "CAIF";
+        case ARPHRD_EETHER: return "EETHER";
+        case ARPHRD_IPDDP: return "IPDDP";
+        case ARPHRD_ECONET: return "ECONET";
+        case ARPHRD_PIMREG: return "PIMREG";
+        case ARPHRD_DLCI: return "DLCI";
+        case ARPHRD_APPLETLK: return "APPLETLK";
+        case ARPHRD_TUNNEL6: return "TUNNEL6";
+        case ARPHRD_IEEE1394: return "IEEE1394";
+        case ARPHRD_RAWHDLC: return "RAWHDLC";
+        case ARPHRD_CISCO: return "CISCO";
+        case ARPHRD_NONE: return "NONE";
+        case ARPHRD_X25: return "X25";
+        case ARPHRD_VOID: return "VOID";
+        case ARPHRD_VSOCKMON: return "VSOCKMON";
+        case ARPHRD_INFINIBAND: return "INFINIBAND";
+        case ARPHRD_IRDA: return "IRDA";
+        case ARPHRD_IEEE802154: return "IEEE802154";
+        case ARPHRD_IEEE802154_MONITOR: return "IEEE802154_MONITOR";
+        case ARPHRD_HIPPI: return "HIPPI";
+        case ARPHRD_RAWIP: return "RAWIP";
+        case ARPHRD_ROSE: return "ROSE";
+        case ARPHRD_LAPB: return "LAPB";
+        case ARPHRD_ARCNET: return "ARCNET";
+        case ARPHRD_CSLIP6: return "CSLIP6";
+        case ARPHRD_LOCALTLK: return "LOCALTLK";
+        case ARPHRD_SLIP6: return "SLIP6";
+        case ARPHRD_RSRVD: return "RSRVD";
+        case ARPHRD_LOOPBACK: return "LOOPBACK";
+        default: return NULL;
+        }
+}
diff --git a/build/src/basic/cap-from-name.h b/build/src/basic/cap-from-name.h
new file mode 100644
index 0000000000..8fffc53a78
--- /dev/null
+++ b/build/src/basic/cap-from-name.h
@@ -0,0 +1,254 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_capability -H hash_capability_name -p -C src/basic/cap-from-name.gperf  */
+/* Computed positions: -k'5,8-9' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/basic/cap-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/basic/cap-from-name.gperf"
+struct capability_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 38
+#define MIN_WORD_LENGTH 8
+#define MAX_WORD_LENGTH 20
+#define MIN_HASH_VALUE 8
+#define MAX_HASH_VALUE 61
+/* maximum key range = 54, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_capability_name (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62,  5, 20, 20,  0,  0,
+       0, 20, 62,  0, 62,  0,  0, 15, 10, 25,
+      30, 62,  0,  0,  5,  0, 62,  0, 35, 62,
+      62, 62, 62, 62, 62,  0, 62,  5, 20, 20,
+       0,  0,  0, 20, 62,  0, 62,  0,  0, 15,
+      10, 25, 30, 62,  0,  0,  5,  0, 62,  0,
+      35, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
+      62, 62, 62, 62, 62, 62
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[8]];
+      /*FALLTHROUGH*/
+      case 8:
+        hval += asso_values[(unsigned char)str[7]];
+      /*FALLTHROUGH*/
+      case 7:
+      case 6:
+      case 5:
+        hval += asso_values[(unsigned char)str[4]];
+        break;
+    }
+  return hval;
+}
+
+const struct capability_name *
+lookup_capability (register const char *str, register size_t len)
+{
+  static const struct capability_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 26 "src/basic/cap-from-name.gperf"
+      {"CAP_KILL", CAP_KILL},
+#line 27 "src/basic/cap-from-name.gperf"
+      {"CAP_LEASE", CAP_LEASE},
+#line 46 "src/basic/cap-from-name.gperf"
+      {"CAP_SETUID", CAP_SETUID},
+      {(char*)0},
+#line 41 "src/basic/cap-from-name.gperf"
+      {"CAP_IPC_LOCK", CAP_IPC_LOCK},
+#line 23 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_RAWIO", CAP_SYS_RAWIO},
+#line 42 "src/basic/cap-from-name.gperf"
+      {"CAP_WAKE_ALARM", CAP_WAKE_ALARM},
+#line 10 "src/basic/cap-from-name.gperf"
+      {"CAP_FSETID", CAP_FSETID},
+#line 18 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_RESOURCE", CAP_SYS_RESOURCE},
+#line 25 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_TIME", CAP_SYS_TIME},
+#line 36 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_ADMIN", CAP_SYS_ADMIN},
+#line 31 "src/basic/cap-from-name.gperf"
+      {"CAP_DAC_READ_SEARCH", CAP_DAC_READ_SEARCH},
+#line 14 "src/basic/cap-from-name.gperf"
+      {"CAP_FOWNER", CAP_FOWNER},
+#line 34 "src/basic/cap-from-name.gperf"
+      {"CAP_NET_RAW", CAP_NET_RAW},
+#line 16 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_NICE", CAP_SYS_NICE},
+#line 35 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_TTY_CONFIG", CAP_SYS_TTY_CONFIG},
+#line 9 "src/basic/cap-from-name.gperf"
+      {"CAP_AUDIT_READ", CAP_AUDIT_READ},
+#line 30 "src/basic/cap-from-name.gperf"
+      {"CAP_AUDIT_WRITE", CAP_AUDIT_WRITE},
+      {(char*)0},
+#line 21 "src/basic/cap-from-name.gperf"
+      {"CAP_AUDIT_CONTROL", CAP_AUDIT_CONTROL},
+#line 24 "src/basic/cap-from-name.gperf"
+      {"CAP_NET_ADMIN", CAP_NET_ADMIN},
+#line 29 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_MODULE", CAP_SYS_MODULE},
+#line 17 "src/basic/cap-from-name.gperf"
+      {"CAP_SETGID", CAP_SETGID},
+#line 20 "src/basic/cap-from-name.gperf"
+      {"CAP_SETFCAP", CAP_SETFCAP},
+#line 32 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_BOOT", CAP_SYS_BOOT},
+#line 43 "src/basic/cap-from-name.gperf"
+      {"CAP_MAC_ADMIN", CAP_MAC_ADMIN},
+#line 28 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_CHROOT", CAP_SYS_CHROOT},
+#line 12 "src/basic/cap-from-name.gperf"
+      {"CAP_SYSLOG", CAP_SYSLOG},
+      {(char*)0}, {(char*)0},
+#line 22 "src/basic/cap-from-name.gperf"
+      {"CAP_IPC_OWNER", CAP_IPC_OWNER},
+#line 39 "src/basic/cap-from-name.gperf"
+      {"CAP_CHOWN", CAP_CHOWN},
+      {(char*)0},
+#line 45 "src/basic/cap-from-name.gperf"
+      {"CAP_DAC_OVERRIDE", CAP_DAC_OVERRIDE},
+      {(char*)0},
+#line 40 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_PACCT", CAP_SYS_PACCT},
+#line 37 "src/basic/cap-from-name.gperf"
+      {"CAP_SYS_PTRACE", CAP_SYS_PTRACE},
+      {(char*)0}, {(char*)0},
+#line 19 "src/basic/cap-from-name.gperf"
+      {"CAP_NET_BROADCAST", CAP_NET_BROADCAST},
+      {(char*)0},
+#line 44 "src/basic/cap-from-name.gperf"
+      {"CAP_MKNOD", CAP_MKNOD},
+#line 11 "src/basic/cap-from-name.gperf"
+      {"CAP_NET_BIND_SERVICE", CAP_NET_BIND_SERVICE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 13 "src/basic/cap-from-name.gperf"
+      {"CAP_LINUX_IMMUTABLE", CAP_LINUX_IMMUTABLE},
+      {(char*)0},
+#line 38 "src/basic/cap-from-name.gperf"
+      {"CAP_MAC_OVERRIDE", CAP_MAC_OVERRIDE},
+#line 15 "src/basic/cap-from-name.gperf"
+      {"CAP_BLOCK_SUSPEND", CAP_BLOCK_SUSPEND},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "src/basic/cap-from-name.gperf"
+      {"CAP_SETPCAP", CAP_SETPCAP}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_capability_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/basic/cap-to-name.h b/build/src/basic/cap-to-name.h
new file mode 100644
index 0000000000..166223eafa
--- /dev/null
+++ b/build/src/basic/cap-to-name.h
@@ -0,0 +1,40 @@
+static const char* const capability_names[] = { 
+        [CAP_AUDIT_READ] = "cap_audit_read",
+        [CAP_FSETID] = "cap_fsetid",
+        [CAP_NET_BIND_SERVICE] = "cap_net_bind_service",
+        [CAP_SYSLOG] = "cap_syslog",
+        [CAP_LINUX_IMMUTABLE] = "cap_linux_immutable",
+        [CAP_FOWNER] = "cap_fowner",
+        [CAP_BLOCK_SUSPEND] = "cap_block_suspend",
+        [CAP_SYS_NICE] = "cap_sys_nice",
+        [CAP_SETGID] = "cap_setgid",
+        [CAP_SYS_RESOURCE] = "cap_sys_resource",
+        [CAP_NET_BROADCAST] = "cap_net_broadcast",
+        [CAP_SETFCAP] = "cap_setfcap",
+        [CAP_AUDIT_CONTROL] = "cap_audit_control",
+        [CAP_IPC_OWNER] = "cap_ipc_owner",
+        [CAP_SYS_RAWIO] = "cap_sys_rawio",
+        [CAP_NET_ADMIN] = "cap_net_admin",
+        [CAP_SYS_TIME] = "cap_sys_time",
+        [CAP_KILL] = "cap_kill",
+        [CAP_LEASE] = "cap_lease",
+        [CAP_SYS_CHROOT] = "cap_sys_chroot",
+        [CAP_SYS_MODULE] = "cap_sys_module",
+        [CAP_AUDIT_WRITE] = "cap_audit_write",
+        [CAP_DAC_READ_SEARCH] = "cap_dac_read_search",
+        [CAP_SYS_BOOT] = "cap_sys_boot",
+        [CAP_SETPCAP] = "cap_setpcap",
+        [CAP_NET_RAW] = "cap_net_raw",
+        [CAP_SYS_TTY_CONFIG] = "cap_sys_tty_config",
+        [CAP_SYS_ADMIN] = "cap_sys_admin",
+        [CAP_SYS_PTRACE] = "cap_sys_ptrace",
+        [CAP_MAC_OVERRIDE] = "cap_mac_override",
+        [CAP_CHOWN] = "cap_chown",
+        [CAP_SYS_PACCT] = "cap_sys_pacct",
+        [CAP_IPC_LOCK] = "cap_ipc_lock",
+        [CAP_WAKE_ALARM] = "cap_wake_alarm",
+        [CAP_MAC_ADMIN] = "cap_mac_admin",
+        [CAP_MKNOD] = "cap_mknod",
+        [CAP_DAC_OVERRIDE] = "cap_dac_override",
+        [CAP_SETUID] = "cap_setuid",
+};
diff --git a/build/src/basic/errno-from-name.h b/build/src/basic/errno-from-name.h
new file mode 100644
index 0000000000..c4e6b86f96
--- /dev/null
+++ b/build/src/basic/errno-from-name.h
@@ -0,0 +1,512 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_errno -H hash_errno_name -p -C src/basic/errno-from-name.gperf  */
+/* Computed positions: -k'2-3,5-6' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/basic/errno-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/basic/errno-from-name.gperf"
+struct errno_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 134
+#define MIN_WORD_LENGTH 3
+#define MAX_WORD_LENGTH 15
+#define MIN_HASH_VALUE 6
+#define MAX_HASH_VALUE 326
+/* maximum key range = 321, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_errno_name (register const char *str, register size_t len)
+{
+  static const unsigned short asso_values[] =
+    {
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+       30, 110, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327,  25,  70,  65,  10,  10,
+      105,  35,  30,   5, 327, 155,  50,  80,   0,   0,
+       30, 175,   5,  35,  20, 160,  25, 105, 115,  90,
+      327, 327, 327, 327, 327, 327, 327,  25,  70,  65,
+       10,  10, 105,  35,  30,   5, 327, 155,  50,  80,
+        0,   0,  30, 175,   5,  35,  20, 160,  25, 105,
+      115,  90, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
+      327, 327, 327, 327, 327, 327
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[5]];
+      /*FALLTHROUGH*/
+      case 5:
+        hval += asso_values[(unsigned char)str[4]];
+      /*FALLTHROUGH*/
+      case 4:
+      case 3:
+        hval += asso_values[(unsigned char)str[2]];
+      /*FALLTHROUGH*/
+      case 2:
+        hval += asso_values[(unsigned char)str[1]];
+        break;
+    }
+  return hval;
+}
+
+const struct errno_name *
+lookup_errno (register const char *str, register size_t len)
+{
+  static const struct errno_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 119 "src/basic/errno-from-name.gperf"
+      {"ENOANO", ENOANO},
+      {(char*)0},
+#line 97 "src/basic/errno-from-name.gperf"
+      {"EIO", EIO},
+      {(char*)0},
+#line 43 "src/basic/errno-from-name.gperf"
+      {"ENOSR", ENOSR},
+      {(char*)0},
+#line 38 "src/basic/errno-from-name.gperf"
+      {"ENOLINK", ENOLINK},
+      {(char*)0},
+#line 105 "src/basic/errno-from-name.gperf"
+      {"EDOM", EDOM},
+#line 37 "src/basic/errno-from-name.gperf"
+      {"EINTR", EINTR},
+#line 122 "src/basic/errno-from-name.gperf"
+      {"ENOPROTOOPT", ENOPROTOOPT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 28 "src/basic/errno-from-name.gperf"
+      {"EINPROGRESS", EINPROGRESS},
+#line 84 "src/basic/errno-from-name.gperf"
+      {"ENOTDIR", ENOTDIR},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 136 "src/basic/errno-from-name.gperf"
+      {"ENOENT", ENOENT},
+#line 92 "src/basic/errno-from-name.gperf"
+      {"EDOTDOT", EDOTDOT},
+#line 41 "src/basic/errno-from-name.gperf"
+      {"ENETDOWN", ENETDOWN},
+#line 69 "src/basic/errno-from-name.gperf"
+      {"ENOMEDIUM", ENOMEDIUM},
+#line 96 "src/basic/errno-from-name.gperf"
+      {"ENOTRECOVERABLE", ENOTRECOVERABLE},
+#line 88 "src/basic/errno-from-name.gperf"
+      {"ENOSTR", ENOSTR},
+#line 54 "src/basic/errno-from-name.gperf"
+      {"ENOTNAM", ENOTNAM},
+      {(char*)0},
+#line 58 "src/basic/errno-from-name.gperf"
+      {"ENETRESET", ENETRESET},
+      {(char*)0},
+#line 51 "src/basic/errno-from-name.gperf"
+      {"ENONET", ENONET},
+      {(char*)0}, {(char*)0},
+#line 23 "src/basic/errno-from-name.gperf"
+      {"EADV", EADV},
+#line 94 "src/basic/errno-from-name.gperf"
+      {"ETIME", ETIME},
+#line 76 "src/basic/errno-from-name.gperf"
+      {"ENODEV", ENODEV},
+#line 49 "src/basic/errno-from-name.gperf"
+      {"EREMOTE", EREMOTE},
+#line 61 "src/basic/errno-from-name.gperf"
+      {"ENOTSOCK", ENOTSOCK},
+#line 101 "src/basic/errno-from-name.gperf"
+      {"EREMOTEIO", EREMOTEIO},
+#line 78 "src/basic/errno-from-name.gperf"
+      {"EROFS", EROFS},
+#line 56 "src/basic/errno-from-name.gperf"
+      {"ENOCSI", ENOCSI},
+#line 120 "src/basic/errno-from-name.gperf"
+      {"EISCONN", EISCONN},
+      {(char*)0}, {(char*)0},
+#line 45 "src/basic/errno-from-name.gperf"
+      {"EPIPE", EPIPE},
+      {(char*)0},
+#line 36 "src/basic/errno-from-name.gperf"
+      {"ENODATA", ENODATA},
+#line 93 "src/basic/errno-from-name.gperf"
+      {"EADDRNOTAVAIL", EADDRNOTAVAIL},
+#line 35 "src/basic/errno-from-name.gperf"
+      {"ETIMEDOUT", ETIMEDOUT},
+#line 57 "src/basic/errno-from-name.gperf"
+      {"EADDRINUSE", EADDRINUSE},
+#line 59 "src/basic/errno-from-name.gperf"
+      {"EISDIR", EISDIR},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 141 "src/basic/errno-from-name.gperf"
+      {"EOPNOTSUPP", EOPNOTSUPP},
+#line 75 "src/basic/errno-from-name.gperf"
+      {"EPROTO", EPROTO},
+#line 71 "src/basic/errno-from-name.gperf"
+      {"ENAVAIL", ENAVAIL},
+      {(char*)0}, {(char*)0},
+#line 30 "src/basic/errno-from-name.gperf"
+      {"EPROTOTYPE", EPROTOTYPE},
+#line 116 "src/basic/errno-from-name.gperf"
+      {"ESRMNT", ESRMNT},
+#line 89 "src/basic/errno-from-name.gperf"
+      {"ENAMETOOLONG", ENAMETOOLONG},
+#line 31 "src/basic/errno-from-name.gperf"
+      {"ERESTART", ERESTART},
+#line 109 "src/basic/errno-from-name.gperf"
+      {"EHOSTDOWN", EHOSTDOWN},
+#line 95 "src/basic/errno-from-name.gperf"
+      {"EPROTONOSUPPORT", EPROTONOSUPPORT},
+#line 132 "src/basic/errno-from-name.gperf"
+      {"EAGAIN", EAGAIN},
+      {(char*)0},
+#line 113 "src/basic/errno-from-name.gperf"
+      {"ENOTCONN", ENOTCONN},
+      {(char*)0},
+#line 107 "src/basic/errno-from-name.gperf"
+      {"ESRCH", ESRCH},
+#line 33 "src/basic/errno-from-name.gperf"
+      {"ENOMSG", ENOMSG},
+#line 14 "src/basic/errno-from-name.gperf"
+      {"EDESTADDRREQ", EDESTADDRREQ},
+      {(char*)0}, {(char*)0},
+#line 85 "src/basic/errno-from-name.gperf"
+      {"ECONNRESET", ECONNRESET},
+#line 24 "src/basic/errno-from-name.gperf"
+      {"ERANGE", ERANGE},
+#line 131 "src/basic/errno-from-name.gperf"
+      {"ECONNREFUSED", ECONNREFUSED},
+      {(char*)0}, {(char*)0},
+#line 40 "src/basic/errno-from-name.gperf"
+      {"ELOOP", ELOOP},
+#line 67 "src/basic/errno-from-name.gperf"
+      {"EINVAL", EINVAL},
+#line 82 "src/basic/errno-from-name.gperf"
+      {"EDEADLK", EDEADLK},
+      {(char*)0},
+#line 117 "src/basic/errno-from-name.gperf"
+      {"EDEADLOCK", EDEADLOCK},
+      {(char*)0},
+#line 44 "src/basic/errno-from-name.gperf"
+      {"ELNRNG", ELNRNG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 27 "src/basic/errno-from-name.gperf"
+      {"ENOMEM", ENOMEM},
+      {(char*)0},
+#line 130 "src/basic/errno-from-name.gperf"
+      {"ESTRPIPE", ESTRPIPE},
+#line 53 "src/basic/errno-from-name.gperf"
+      {"ENOTEMPTY", ENOTEMPTY},
+#line 60 "src/basic/errno-from-name.gperf"
+      {"EIDRM", EIDRM},
+#line 102 "src/basic/errno-from-name.gperf"
+      {"ENOSPC", ENOSPC},
+#line 118 "src/basic/errno-from-name.gperf"
+      {"ECONNABORTED", ECONNABORTED},
+      {(char*)0},
+#line 68 "src/basic/errno-from-name.gperf"
+      {"ESHUTDOWN", ESHUTDOWN},
+#line 22 "src/basic/errno-from-name.gperf"
+      {"EBADR", EBADR},
+#line 66 "src/basic/errno-from-name.gperf"
+      {"ENOKEY", ENOKEY},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 20 "src/basic/errno-from-name.gperf"
+      {"EBADE", EBADE},
+#line 16 "src/basic/errno-from-name.gperf"
+      {"ESPIPE", ESPIPE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 19 "src/basic/errno-from-name.gperf"
+      {"ENOTTY", ENOTTY},
+#line 12 "src/basic/errno-from-name.gperf"
+      {"EREMCHG", EREMCHG},
+#line 34 "src/basic/errno-from-name.gperf"
+      {"EALREADY", EALREADY},
+      {(char*)0},
+#line 86 "src/basic/errno-from-name.gperf"
+      {"ENXIO", ENXIO},
+#line 42 "src/basic/errno-from-name.gperf"
+      {"ESTALE", ESTALE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 39 "src/basic/errno-from-name.gperf"
+      {"EPERM", EPERM},
+      {(char*)0},
+#line 29 "src/basic/errno-from-name.gperf"
+      {"ENOTBLK", ENOTBLK},
+      {(char*)0}, {(char*)0},
+#line 18 "src/basic/errno-from-name.gperf"
+      {"EOWNERDEAD", EOWNERDEAD},
+#line 112 "src/basic/errno-from-name.gperf"
+      {"ENOSYS", ENOSYS},
+#line 103 "src/basic/errno-from-name.gperf"
+      {"ENOEXEC", ENOEXEC},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 108 "src/basic/errno-from-name.gperf"
+      {"ECHRNG", ECHRNG},
+#line 50 "src/basic/errno-from-name.gperf"
+      {"ETOOMANYREFS", ETOOMANYREFS},
+      {(char*)0}, {(char*)0},
+#line 81 "src/basic/errno-from-name.gperf"
+      {"E2BIG", E2BIG},
+#line 13 "src/basic/errno-from-name.gperf"
+      {"EACCES", EACCES},
+      {(char*)0}, {(char*)0},
+#line 72 "src/basic/errno-from-name.gperf"
+      {"EOVERFLOW", EOVERFLOW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 80 "src/basic/errno-from-name.gperf"
+      {"EHWPOISON", EHWPOISON},
+#line 123 "src/basic/errno-from-name.gperf"
+      {"ECOMM", ECOMM},
+#line 32 "src/basic/errno-from-name.gperf"
+      {"EISNAM", EISNAM},
+#line 79 "src/basic/errno-from-name.gperf"
+      {"ELIBACC", ELIBACC},
+      {(char*)0}, {(char*)0},
+#line 99 "src/basic/errno-from-name.gperf"
+      {"EXDEV", EXDEV},
+#line 65 "src/basic/errno-from-name.gperf"
+      {"EL2HLT", EL2HLT},
+#line 129 "src/basic/errno-from-name.gperf"
+      {"ELIBBAD", ELIBBAD},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 46 "src/basic/errno-from-name.gperf"
+      {"ECHILD", ECHILD},
+#line 70 "src/basic/errno-from-name.gperf"
+      {"ELIBSCN", ELIBSCN},
+#line 104 "src/basic/errno-from-name.gperf"
+      {"EMSGSIZE", EMSGSIZE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 133 "src/basic/errno-from-name.gperf"
+      {"ELIBMAX", ELIBMAX},
+#line 140 "src/basic/errno-from-name.gperf"
+      {"ENOTUNIQ", ENOTUNIQ},
+      {(char*)0}, {(char*)0},
+#line 111 "src/basic/errno-from-name.gperf"
+      {"ENFILE", ENFILE},
+#line 125 "src/basic/errno-from-name.gperf"
+      {"ERFKILL", ERFKILL},
+      {(char*)0},
+#line 25 "src/basic/errno-from-name.gperf"
+      {"ECANCELED", ECANCELED},
+      {(char*)0},
+#line 128 "src/basic/errno-from-name.gperf"
+      {"EWOULDBLOCK", EWOULDBLOCK},
+#line 11 "src/basic/errno-from-name.gperf"
+      {"EAFNOSUPPORT", EAFNOSUPPORT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 98 "src/basic/errno-from-name.gperf"
+      {"ENETUNREACH", ENETUNREACH},
+#line 114 "src/basic/errno-from-name.gperf"
+      {"EPFNOSUPPORT", EPFNOSUPPORT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 134 "src/basic/errno-from-name.gperf"
+      {"EEXIST", EEXIST},
+#line 138 "src/basic/errno-from-name.gperf"
+      {"EBADSLT", EBADSLT},
+#line 91 "src/basic/errno-from-name.gperf"
+      {"ELIBEXEC", ELIBEXEC},
+      {(char*)0}, {(char*)0},
+#line 139 "src/basic/errno-from-name.gperf"
+      {"EKEYREVOKED", EKEYREVOKED},
+#line 55 "src/basic/errno-from-name.gperf"
+      {"EKEYREJECTED", EKEYREJECTED},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 137 "src/basic/errno-from-name.gperf"
+      {"ENOPKG", ENOPKG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 48 "src/basic/errno-from-name.gperf"
+      {"EBFONT", EBFONT},
+#line 115 "src/basic/errno-from-name.gperf"
+      {"ENOTSUP", ENOTSUP},
+      {(char*)0}, {(char*)0},
+#line 21 "src/basic/errno-from-name.gperf"
+      {"EBADF", EBADF},
+#line 127 "src/basic/errno-from-name.gperf"
+      {"EFAULT", EFAULT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 100 "src/basic/errno-from-name.gperf"
+      {"EDQUOT", EDQUOT},
+      {(char*)0},
+#line 135 "src/basic/errno-from-name.gperf"
+      {"EL2NSYNC", EL2NSYNC},
+      {(char*)0},
+#line 106 "src/basic/errno-from-name.gperf"
+      {"EFBIG", EFBIG},
+#line 63 "src/basic/errno-from-name.gperf"
+      {"EBADFD", EBADFD},
+#line 47 "src/basic/errno-from-name.gperf"
+      {"EBADMSG", EBADMSG},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 83 "src/basic/errno-from-name.gperf"
+      {"EL3RST", EL3RST},
+#line 62 "src/basic/errno-from-name.gperf"
+      {"EHOSTUNREACH", EHOSTUNREACH},
+      {(char*)0}, {(char*)0},
+#line 90 "src/basic/errno-from-name.gperf"
+      {"ESOCKTNOSUPPORT", ESOCKTNOSUPPORT},
+#line 110 "src/basic/errno-from-name.gperf"
+      {"ENOLCK", ENOLCK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 64 "src/basic/errno-from-name.gperf"
+      {"EL3HLT", EL3HLT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 121 "src/basic/errno-from-name.gperf"
+      {"EUSERS", EUSERS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 15 "src/basic/errno-from-name.gperf"
+      {"EILSEQ", EILSEQ},
+#line 26 "src/basic/errno-from-name.gperf"
+      {"ETXTBSY", ETXTBSY},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 124 "src/basic/errno-from-name.gperf"
+      {"EMFILE", EMFILE},
+#line 10 "src/basic/errno-from-name.gperf"
+      {"EUNATCH", EUNATCH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 142 "src/basic/errno-from-name.gperf"
+      {"EMEDIUMTYPE", EMEDIUMTYPE},
+#line 73 "src/basic/errno-from-name.gperf"
+      {"EUCLEAN", EUCLEAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 126 "src/basic/errno-from-name.gperf"
+      {"ENOBUFS", ENOBUFS},
+      {(char*)0},
+#line 9 "src/basic/errno-from-name.gperf"
+      {"EMULTIHOP", EMULTIHOP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 87 "src/basic/errno-from-name.gperf"
+      {"EBADRQC", EBADRQC},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 17 "src/basic/errno-from-name.gperf"
+      {"EMLINK", EMLINK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 77 "src/basic/errno-from-name.gperf"
+      {"EKEYEXPIRED", EKEYEXPIRED},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 74 "src/basic/errno-from-name.gperf"
+      {"EBUSY", EBUSY},
+#line 52 "src/basic/errno-from-name.gperf"
+      {"EXFULL", EXFULL}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_errno_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/basic/errno-to-name.h b/build/src/basic/errno-to-name.h
new file mode 100644
index 0000000000..93c6cf7d70
--- /dev/null
+++ b/build/src/basic/errno-to-name.h
@@ -0,0 +1,133 @@
+static const char* const errno_names[] = { 
+        [EMULTIHOP] = "EMULTIHOP",
+        [EUNATCH] = "EUNATCH",
+        [EAFNOSUPPORT] = "EAFNOSUPPORT",
+        [EREMCHG] = "EREMCHG",
+        [EACCES] = "EACCES",
+        [EDESTADDRREQ] = "EDESTADDRREQ",
+        [EILSEQ] = "EILSEQ",
+        [ESPIPE] = "ESPIPE",
+        [EMLINK] = "EMLINK",
+        [EOWNERDEAD] = "EOWNERDEAD",
+        [ENOTTY] = "ENOTTY",
+        [EBADE] = "EBADE",
+        [EBADF] = "EBADF",
+        [EBADR] = "EBADR",
+        [EADV] = "EADV",
+        [ERANGE] = "ERANGE",
+        [ECANCELED] = "ECANCELED",
+        [ETXTBSY] = "ETXTBSY",
+        [ENOMEM] = "ENOMEM",
+        [EINPROGRESS] = "EINPROGRESS",
+        [ENOTBLK] = "ENOTBLK",
+        [EPROTOTYPE] = "EPROTOTYPE",
+        [ERESTART] = "ERESTART",
+        [EISNAM] = "EISNAM",
+        [ENOMSG] = "ENOMSG",
+        [EALREADY] = "EALREADY",
+        [ETIMEDOUT] = "ETIMEDOUT",
+        [ENODATA] = "ENODATA",
+        [EINTR] = "EINTR",
+        [ENOLINK] = "ENOLINK",
+        [EPERM] = "EPERM",
+        [ELOOP] = "ELOOP",
+        [ENETDOWN] = "ENETDOWN",
+        [ESTALE] = "ESTALE",
+        [ENOSR] = "ENOSR",
+        [ELNRNG] = "ELNRNG",
+        [EPIPE] = "EPIPE",
+        [ECHILD] = "ECHILD",
+        [EBADMSG] = "EBADMSG",
+        [EBFONT] = "EBFONT",
+        [EREMOTE] = "EREMOTE",
+        [ETOOMANYREFS] = "ETOOMANYREFS",
+        [ENONET] = "ENONET",
+        [EXFULL] = "EXFULL",
+        [ENOTEMPTY] = "ENOTEMPTY",
+        [ENOTNAM] = "ENOTNAM",
+        [EKEYREJECTED] = "EKEYREJECTED",
+        [ENOCSI] = "ENOCSI",
+        [EADDRINUSE] = "EADDRINUSE",
+        [ENETRESET] = "ENETRESET",
+        [EISDIR] = "EISDIR",
+        [EIDRM] = "EIDRM",
+        [ENOTSOCK] = "ENOTSOCK",
+        [EHOSTUNREACH] = "EHOSTUNREACH",
+        [EBADFD] = "EBADFD",
+        [EL3HLT] = "EL3HLT",
+        [EL2HLT] = "EL2HLT",
+        [ENOKEY] = "ENOKEY",
+        [EINVAL] = "EINVAL",
+        [ESHUTDOWN] = "ESHUTDOWN",
+        [ENOMEDIUM] = "ENOMEDIUM",
+        [ELIBSCN] = "ELIBSCN",
+        [ENAVAIL] = "ENAVAIL",
+        [EOVERFLOW] = "EOVERFLOW",
+        [EUCLEAN] = "EUCLEAN",
+        [EBUSY] = "EBUSY",
+        [EPROTO] = "EPROTO",
+        [ENODEV] = "ENODEV",
+        [EKEYEXPIRED] = "EKEYEXPIRED",
+        [EROFS] = "EROFS",
+        [ELIBACC] = "ELIBACC",
+        [EHWPOISON] = "EHWPOISON",
+        [E2BIG] = "E2BIG",
+        [EDEADLK] = "EDEADLK",
+        [EL3RST] = "EL3RST",
+        [ENOTDIR] = "ENOTDIR",
+        [ECONNRESET] = "ECONNRESET",
+        [ENXIO] = "ENXIO",
+        [EBADRQC] = "EBADRQC",
+        [ENOSTR] = "ENOSTR",
+        [ENAMETOOLONG] = "ENAMETOOLONG",
+        [ESOCKTNOSUPPORT] = "ESOCKTNOSUPPORT",
+        [ELIBEXEC] = "ELIBEXEC",
+        [EDOTDOT] = "EDOTDOT",
+        [EADDRNOTAVAIL] = "EADDRNOTAVAIL",
+        [ETIME] = "ETIME",
+        [EPROTONOSUPPORT] = "EPROTONOSUPPORT",
+        [ENOTRECOVERABLE] = "ENOTRECOVERABLE",
+        [EIO] = "EIO",
+        [ENETUNREACH] = "ENETUNREACH",
+        [EXDEV] = "EXDEV",
+        [EDQUOT] = "EDQUOT",
+        [EREMOTEIO] = "EREMOTEIO",
+        [ENOSPC] = "ENOSPC",
+        [ENOEXEC] = "ENOEXEC",
+        [EMSGSIZE] = "EMSGSIZE",
+        [EDOM] = "EDOM",
+        [EFBIG] = "EFBIG",
+        [ESRCH] = "ESRCH",
+        [ECHRNG] = "ECHRNG",
+        [EHOSTDOWN] = "EHOSTDOWN",
+        [ENOLCK] = "ENOLCK",
+        [ENFILE] = "ENFILE",
+        [ENOSYS] = "ENOSYS",
+        [ENOTCONN] = "ENOTCONN",
+        [EPFNOSUPPORT] = "EPFNOSUPPORT",
+        [ESRMNT] = "ESRMNT",
+        [ECONNABORTED] = "ECONNABORTED",
+        [ENOANO] = "ENOANO",
+        [EISCONN] = "EISCONN",
+        [EUSERS] = "EUSERS",
+        [ENOPROTOOPT] = "ENOPROTOOPT",
+        [ECOMM] = "ECOMM",
+        [EMFILE] = "EMFILE",
+        [ERFKILL] = "ERFKILL",
+        [ENOBUFS] = "ENOBUFS",
+        [EFAULT] = "EFAULT",
+        [ELIBBAD] = "ELIBBAD",
+        [ESTRPIPE] = "ESTRPIPE",
+        [ECONNREFUSED] = "ECONNREFUSED",
+        [EAGAIN] = "EAGAIN",
+        [ELIBMAX] = "ELIBMAX",
+        [EEXIST] = "EEXIST",
+        [EL2NSYNC] = "EL2NSYNC",
+        [ENOENT] = "ENOENT",
+        [ENOPKG] = "ENOPKG",
+        [EBADSLT] = "EBADSLT",
+        [EKEYREVOKED] = "EKEYREVOKED",
+        [ENOTUNIQ] = "ENOTUNIQ",
+        [EOPNOTSUPP] = "EOPNOTSUPP",
+        [EMEDIUMTYPE] = "EMEDIUMTYPE",
+};
diff --git a/build/src/core/load-fragment-gperf-nulstr.c b/build/src/core/load-fragment-gperf-nulstr.c
new file mode 100644
index 0000000000..a49467eeb5
--- /dev/null
+++ b/build/src/core/load-fragment-gperf-nulstr.c
@@ -0,0 +1,1025 @@
+extern const char load_fragment_gperf_nulstr[];
+const char load_fragment_gperf_nulstr[] =
+"Unit.Description\0"
+"Unit.Documentation\0"
+"Unit.SourcePath\0"
+"Unit.Requires\0"
+"Unit.Requisite\0"
+"Unit.Wants\0"
+"Unit.BindsTo\0"
+"Unit.BindTo\0"
+"Unit.Conflicts\0"
+"Unit.Before\0"
+"Unit.After\0"
+"Unit.OnFailure\0"
+"Unit.PropagatesReloadTo\0"
+"Unit.PropagateReloadTo\0"
+"Unit.ReloadPropagatedFrom\0"
+"Unit.PropagateReloadFrom\0"
+"Unit.PartOf\0"
+"Unit.JoinsNamespaceOf\0"
+"Unit.RequiresOverridable\0"
+"Unit.RequisiteOverridable\0"
+"Unit.RequiresMountsFor\0"
+"Unit.StopWhenUnneeded\0"
+"Unit.RefuseManualStart\0"
+"Unit.RefuseManualStop\0"
+"Unit.AllowIsolate\0"
+"Unit.DefaultDependencies\0"
+"Unit.OnFailureJobMode\0"
+"Unit.OnFailureIsolate\0"
+"Unit.IgnoreOnIsolate\0"
+"Unit.IgnoreOnSnapshot\0"
+"Unit.JobTimeoutSec\0"
+"Unit.JobRunningTimeoutSec\0"
+"Unit.JobTimeoutAction\0"
+"Unit.JobTimeoutRebootArgument\0"
+"Unit.StartLimitIntervalSec\0"
+"Unit.StartLimitInterval\0"
+"Unit.StartLimitBurst\0"
+"Unit.StartLimitAction\0"
+"Unit.FailureAction\0"
+"Unit.SuccessAction\0"
+"Unit.FailureActionExitStatus\0"
+"Unit.SuccessActionExitStatus\0"
+"Unit.RebootArgument\0"
+"Unit.ConditionPathExists\0"
+"Unit.ConditionPathExistsGlob\0"
+"Unit.ConditionPathIsDirectory\0"
+"Unit.ConditionPathIsSymbolicLink\0"
+"Unit.ConditionPathIsMountPoint\0"
+"Unit.ConditionPathIsReadWrite\0"
+"Unit.ConditionDirectoryNotEmpty\0"
+"Unit.ConditionFileNotEmpty\0"
+"Unit.ConditionFileIsExecutable\0"
+"Unit.ConditionNeedsUpdate\0"
+"Unit.ConditionFirstBoot\0"
+"Unit.ConditionKernelCommandLine\0"
+"Unit.ConditionKernelVersion\0"
+"Unit.ConditionArchitecture\0"
+"Unit.ConditionVirtualization\0"
+"Unit.ConditionSecurity\0"
+"Unit.ConditionCapability\0"
+"Unit.ConditionHost\0"
+"Unit.ConditionACPower\0"
+"Unit.ConditionUser\0"
+"Unit.ConditionGroup\0"
+"Unit.ConditionControlGroupController\0"
+"Unit.ConditionNull\0"
+"Unit.AssertPathExists\0"
+"Unit.AssertPathExistsGlob\0"
+"Unit.AssertPathIsDirectory\0"
+"Unit.AssertPathIsSymbolicLink\0"
+"Unit.AssertPathIsMountPoint\0"
+"Unit.AssertPathIsReadWrite\0"
+"Unit.AssertDirectoryNotEmpty\0"
+"Unit.AssertFileNotEmpty\0"
+"Unit.AssertFileIsExecutable\0"
+"Unit.AssertNeedsUpdate\0"
+"Unit.AssertFirstBoot\0"
+"Unit.AssertKernelCommandLine\0"
+"Unit.AssertKernelVersion\0"
+"Unit.AssertArchitecture\0"
+"Unit.AssertVirtualization\0"
+"Unit.AssertSecurity\0"
+"Unit.AssertCapability\0"
+"Unit.AssertHost\0"
+"Unit.AssertACPower\0"
+"Unit.AssertUser\0"
+"Unit.AssertGroup\0"
+"Unit.AssertControlGroupController\0"
+"Unit.AssertNull\0"
+"Unit.CollectMode\0"
+"Service.PIDFile\0"
+"Service.ExecCondition\0"
+"Service.ExecStartPre\0"
+"Service.ExecStart\0"
+"Service.ExecStartPost\0"
+"Service.ExecReload\0"
+"Service.ExecStop\0"
+"Service.ExecStopPost\0"
+"Service.RestartSec\0"
+"Service.TimeoutSec\0"
+"Service.TimeoutStartSec\0"
+"Service.TimeoutStopSec\0"
+"Service.TimeoutAbortSec\0"
+"Service.TimeoutStartFailureMode\0"
+"Service.TimeoutStopFailureMode\0"
+"Service.RuntimeMaxSec\0"
+"Service.WatchdogSec\0"
+"Service.StartLimitInterval\0"
+"Service.StartLimitBurst\0"
+"Service.StartLimitAction\0"
+"Service.FailureAction\0"
+"Service.RebootArgument\0"
+"Service.Type\0"
+"Service.Restart\0"
+"Service.PermissionsStartOnly\0"
+"Service.RootDirectoryStartOnly\0"
+"Service.RemainAfterExit\0"
+"Service.GuessMainPID\0"
+"Service.RestartPreventExitStatus\0"
+"Service.RestartForceExitStatus\0"
+"Service.SuccessExitStatus\0"
+"Service.SysVStartPriority\0"
+"Service.NonBlocking\0"
+"Service.BusName\0"
+"Service.FileDescriptorStoreMax\0"
+"Service.NotifyAccess\0"
+"Service.Sockets\0"
+"Service.BusPolicy\0"
+"Service.USBFunctionDescriptors\0"
+"Service.USBFunctionStrings\0"
+"Service.OOMPolicy\0"
+"Service.WorkingDirectory\0"
+"Service.RootDirectory\0"
+"Service.RootImage\0"
+"Service.User\0"
+"Service.Group\0"
+"Service.SupplementaryGroups\0"
+"Service.Nice\0"
+"Service.OOMScoreAdjust\0"
+"Service.CoredumpFilter\0"
+"Service.IOSchedulingClass\0"
+"Service.IOSchedulingPriority\0"
+"Service.CPUSchedulingPolicy\0"
+"Service.CPUSchedulingPriority\0"
+"Service.CPUSchedulingResetOnFork\0"
+"Service.CPUAffinity\0"
+"Service.NUMAPolicy\0"
+"Service.NUMAMask\0"
+"Service.UMask\0"
+"Service.Environment\0"
+"Service.EnvironmentFile\0"
+"Service.PassEnvironment\0"
+"Service.UnsetEnvironment\0"
+"Service.DynamicUser\0"
+"Service.RemoveIPC\0"
+"Service.StandardInput\0"
+"Service.StandardOutput\0"
+"Service.StandardError\0"
+"Service.StandardInputText\0"
+"Service.StandardInputData\0"
+"Service.TTYPath\0"
+"Service.TTYReset\0"
+"Service.TTYVHangup\0"
+"Service.TTYVTDisallocate\0"
+"Service.SyslogIdentifier\0"
+"Service.SyslogFacility\0"
+"Service.SyslogLevel\0"
+"Service.SyslogLevelPrefix\0"
+"Service.LogLevelMax\0"
+"Service.LogRateLimitIntervalSec\0"
+"Service.LogRateLimitBurst\0"
+"Service.LogExtraFields\0"
+"Service.Capabilities\0"
+"Service.SecureBits\0"
+"Service.CapabilityBoundingSet\0"
+"Service.AmbientCapabilities\0"
+"Service.TimerSlackNSec\0"
+"Service.NoNewPrivileges\0"
+"Service.KeyringMode\0"
+"Service.SystemCallFilter\0"
+"Service.SystemCallArchitectures\0"
+"Service.SystemCallErrorNumber\0"
+"Service.MemoryDenyWriteExecute\0"
+"Service.RestrictNamespaces\0"
+"Service.RestrictRealtime\0"
+"Service.RestrictSUIDSGID\0"
+"Service.RestrictAddressFamilies\0"
+"Service.LockPersonality\0"
+"Service.LimitCPU\0"
+"Service.LimitFSIZE\0"
+"Service.LimitDATA\0"
+"Service.LimitSTACK\0"
+"Service.LimitCORE\0"
+"Service.LimitRSS\0"
+"Service.LimitNOFILE\0"
+"Service.LimitAS\0"
+"Service.LimitNPROC\0"
+"Service.LimitMEMLOCK\0"
+"Service.LimitLOCKS\0"
+"Service.LimitSIGPENDING\0"
+"Service.LimitMSGQUEUE\0"
+"Service.LimitNICE\0"
+"Service.LimitRTPRIO\0"
+"Service.LimitRTTIME\0"
+"Service.ReadWriteDirectories\0"
+"Service.ReadOnlyDirectories\0"
+"Service.InaccessibleDirectories\0"
+"Service.ReadWritePaths\0"
+"Service.ReadOnlyPaths\0"
+"Service.InaccessiblePaths\0"
+"Service.BindPaths\0"
+"Service.BindReadOnlyPaths\0"
+"Service.TemporaryFileSystem\0"
+"Service.PrivateTmp\0"
+"Service.PrivateDevices\0"
+"Service.ProtectKernelTunables\0"
+"Service.ProtectKernelModules\0"
+"Service.ProtectKernelLogs\0"
+"Service.ProtectClock\0"
+"Service.ProtectControlGroups\0"
+"Service.NetworkNamespacePath\0"
+"Service.LogNamespace\0"
+"Service.PrivateNetwork\0"
+"Service.PrivateUsers\0"
+"Service.PrivateMounts\0"
+"Service.ProtectSystem\0"
+"Service.ProtectHome\0"
+"Service.MountFlags\0"
+"Service.MountAPIVFS\0"
+"Service.Personality\0"
+"Service.RuntimeDirectoryPreserve\0"
+"Service.RuntimeDirectoryMode\0"
+"Service.RuntimeDirectory\0"
+"Service.StateDirectoryMode\0"
+"Service.StateDirectory\0"
+"Service.CacheDirectoryMode\0"
+"Service.CacheDirectory\0"
+"Service.LogsDirectoryMode\0"
+"Service.LogsDirectory\0"
+"Service.ConfigurationDirectoryMode\0"
+"Service.ConfigurationDirectory\0"
+"Service.TimeoutCleanSec\0"
+"Service.ProtectHostname\0"
+"Service.PAMName\0"
+"Service.IgnoreSIGPIPE\0"
+"Service.UtmpIdentifier\0"
+"Service.UtmpMode\0"
+"Service.SELinuxContext\0"
+"Service.AppArmorProfile\0"
+"Service.SmackProcessLabel\0"
+"Service.Slice\0"
+"Service.AllowedCPUs\0"
+"Service.AllowedMemoryNodes\0"
+"Service.CPUAccounting\0"
+"Service.CPUWeight\0"
+"Service.StartupCPUWeight\0"
+"Service.CPUShares\0"
+"Service.StartupCPUShares\0"
+"Service.CPUQuota\0"
+"Service.CPUQuotaPeriodSec\0"
+"Service.MemoryAccounting\0"
+"Service.MemoryMin\0"
+"Service.DefaultMemoryMin\0"
+"Service.DefaultMemoryLow\0"
+"Service.MemoryLow\0"
+"Service.MemoryHigh\0"
+"Service.MemoryMax\0"
+"Service.MemorySwapMax\0"
+"Service.MemoryLimit\0"
+"Service.DeviceAllow\0"
+"Service.DevicePolicy\0"
+"Service.IOAccounting\0"
+"Service.IOWeight\0"
+"Service.StartupIOWeight\0"
+"Service.IODeviceWeight\0"
+"Service.IOReadBandwidthMax\0"
+"Service.IOWriteBandwidthMax\0"
+"Service.IOReadIOPSMax\0"
+"Service.IOWriteIOPSMax\0"
+"Service.IODeviceLatencyTargetSec\0"
+"Service.BlockIOAccounting\0"
+"Service.BlockIOWeight\0"
+"Service.StartupBlockIOWeight\0"
+"Service.BlockIODeviceWeight\0"
+"Service.BlockIOReadBandwidth\0"
+"Service.BlockIOWriteBandwidth\0"
+"Service.TasksAccounting\0"
+"Service.TasksMax\0"
+"Service.Delegate\0"
+"Service.DisableControllers\0"
+"Service.IPAccounting\0"
+"Service.IPAddressAllow\0"
+"Service.IPAddressDeny\0"
+"Service.IPIngressFilterPath\0"
+"Service.IPEgressFilterPath\0"
+"Service.NetClass\0"
+"Service.SendSIGKILL\0"
+"Service.SendSIGHUP\0"
+"Service.KillMode\0"
+"Service.KillSignal\0"
+"Service.RestartKillSignal\0"
+"Service.FinalKillSignal\0"
+"Service.WatchdogSignal\0"
+"Socket.ListenStream\0"
+"Socket.ListenDatagram\0"
+"Socket.ListenSequentialPacket\0"
+"Socket.ListenFIFO\0"
+"Socket.ListenNetlink\0"
+"Socket.ListenSpecial\0"
+"Socket.ListenMessageQueue\0"
+"Socket.ListenUSBFunction\0"
+"Socket.SocketProtocol\0"
+"Socket.BindIPv6Only\0"
+"Socket.Backlog\0"
+"Socket.BindToDevice\0"
+"Socket.ExecStartPre\0"
+"Socket.ExecStartPost\0"
+"Socket.ExecStopPre\0"
+"Socket.ExecStopPost\0"
+"Socket.TimeoutSec\0"
+"Socket.SocketUser\0"
+"Socket.SocketGroup\0"
+"Socket.SocketMode\0"
+"Socket.DirectoryMode\0"
+"Socket.Accept\0"
+"Socket.Writable\0"
+"Socket.MaxConnections\0"
+"Socket.MaxConnectionsPerSource\0"
+"Socket.KeepAlive\0"
+"Socket.KeepAliveTimeSec\0"
+"Socket.KeepAliveIntervalSec\0"
+"Socket.KeepAliveProbes\0"
+"Socket.DeferAcceptSec\0"
+"Socket.NoDelay\0"
+"Socket.Priority\0"
+"Socket.ReceiveBuffer\0"
+"Socket.SendBuffer\0"
+"Socket.IPTOS\0"
+"Socket.IPTTL\0"
+"Socket.Mark\0"
+"Socket.PipeSize\0"
+"Socket.FreeBind\0"
+"Socket.Transparent\0"
+"Socket.Broadcast\0"
+"Socket.PassCredentials\0"
+"Socket.PassSecurity\0"
+"Socket.PassPacketInfo\0"
+"Socket.TCPCongestion\0"
+"Socket.ReusePort\0"
+"Socket.MessageQueueMaxMessages\0"
+"Socket.MessageQueueMessageSize\0"
+"Socket.RemoveOnStop\0"
+"Socket.Symlinks\0"
+"Socket.FileDescriptorName\0"
+"Socket.Service\0"
+"Socket.TriggerLimitIntervalSec\0"
+"Socket.TriggerLimitBurst\0"
+"Socket.SmackLabel\0"
+"Socket.SmackLabelIPIn\0"
+"Socket.SmackLabelIPOut\0"
+"Socket.SELinuxContextFromNet\0"
+"Socket.WorkingDirectory\0"
+"Socket.RootDirectory\0"
+"Socket.RootImage\0"
+"Socket.User\0"
+"Socket.Group\0"
+"Socket.SupplementaryGroups\0"
+"Socket.Nice\0"
+"Socket.OOMScoreAdjust\0"
+"Socket.CoredumpFilter\0"
+"Socket.IOSchedulingClass\0"
+"Socket.IOSchedulingPriority\0"
+"Socket.CPUSchedulingPolicy\0"
+"Socket.CPUSchedulingPriority\0"
+"Socket.CPUSchedulingResetOnFork\0"
+"Socket.CPUAffinity\0"
+"Socket.NUMAPolicy\0"
+"Socket.NUMAMask\0"
+"Socket.UMask\0"
+"Socket.Environment\0"
+"Socket.EnvironmentFile\0"
+"Socket.PassEnvironment\0"
+"Socket.UnsetEnvironment\0"
+"Socket.DynamicUser\0"
+"Socket.RemoveIPC\0"
+"Socket.StandardInput\0"
+"Socket.StandardOutput\0"
+"Socket.StandardError\0"
+"Socket.StandardInputText\0"
+"Socket.StandardInputData\0"
+"Socket.TTYPath\0"
+"Socket.TTYReset\0"
+"Socket.TTYVHangup\0"
+"Socket.TTYVTDisallocate\0"
+"Socket.SyslogIdentifier\0"
+"Socket.SyslogFacility\0"
+"Socket.SyslogLevel\0"
+"Socket.SyslogLevelPrefix\0"
+"Socket.LogLevelMax\0"
+"Socket.LogRateLimitIntervalSec\0"
+"Socket.LogRateLimitBurst\0"
+"Socket.LogExtraFields\0"
+"Socket.Capabilities\0"
+"Socket.SecureBits\0"
+"Socket.CapabilityBoundingSet\0"
+"Socket.AmbientCapabilities\0"
+"Socket.TimerSlackNSec\0"
+"Socket.NoNewPrivileges\0"
+"Socket.KeyringMode\0"
+"Socket.SystemCallFilter\0"
+"Socket.SystemCallArchitectures\0"
+"Socket.SystemCallErrorNumber\0"
+"Socket.MemoryDenyWriteExecute\0"
+"Socket.RestrictNamespaces\0"
+"Socket.RestrictRealtime\0"
+"Socket.RestrictSUIDSGID\0"
+"Socket.RestrictAddressFamilies\0"
+"Socket.LockPersonality\0"
+"Socket.LimitCPU\0"
+"Socket.LimitFSIZE\0"
+"Socket.LimitDATA\0"
+"Socket.LimitSTACK\0"
+"Socket.LimitCORE\0"
+"Socket.LimitRSS\0"
+"Socket.LimitNOFILE\0"
+"Socket.LimitAS\0"
+"Socket.LimitNPROC\0"
+"Socket.LimitMEMLOCK\0"
+"Socket.LimitLOCKS\0"
+"Socket.LimitSIGPENDING\0"
+"Socket.LimitMSGQUEUE\0"
+"Socket.LimitNICE\0"
+"Socket.LimitRTPRIO\0"
+"Socket.LimitRTTIME\0"
+"Socket.ReadWriteDirectories\0"
+"Socket.ReadOnlyDirectories\0"
+"Socket.InaccessibleDirectories\0"
+"Socket.ReadWritePaths\0"
+"Socket.ReadOnlyPaths\0"
+"Socket.InaccessiblePaths\0"
+"Socket.BindPaths\0"
+"Socket.BindReadOnlyPaths\0"
+"Socket.TemporaryFileSystem\0"
+"Socket.PrivateTmp\0"
+"Socket.PrivateDevices\0"
+"Socket.ProtectKernelTunables\0"
+"Socket.ProtectKernelModules\0"
+"Socket.ProtectKernelLogs\0"
+"Socket.ProtectClock\0"
+"Socket.ProtectControlGroups\0"
+"Socket.NetworkNamespacePath\0"
+"Socket.LogNamespace\0"
+"Socket.PrivateNetwork\0"
+"Socket.PrivateUsers\0"
+"Socket.PrivateMounts\0"
+"Socket.ProtectSystem\0"
+"Socket.ProtectHome\0"
+"Socket.MountFlags\0"
+"Socket.MountAPIVFS\0"
+"Socket.Personality\0"
+"Socket.RuntimeDirectoryPreserve\0"
+"Socket.RuntimeDirectoryMode\0"
+"Socket.RuntimeDirectory\0"
+"Socket.StateDirectoryMode\0"
+"Socket.StateDirectory\0"
+"Socket.CacheDirectoryMode\0"
+"Socket.CacheDirectory\0"
+"Socket.LogsDirectoryMode\0"
+"Socket.LogsDirectory\0"
+"Socket.ConfigurationDirectoryMode\0"
+"Socket.ConfigurationDirectory\0"
+"Socket.TimeoutCleanSec\0"
+"Socket.ProtectHostname\0"
+"Socket.PAMName\0"
+"Socket.IgnoreSIGPIPE\0"
+"Socket.UtmpIdentifier\0"
+"Socket.UtmpMode\0"
+"Socket.SELinuxContext\0"
+"Socket.AppArmorProfile\0"
+"Socket.SmackProcessLabel\0"
+"Socket.Slice\0"
+"Socket.AllowedCPUs\0"
+"Socket.AllowedMemoryNodes\0"
+"Socket.CPUAccounting\0"
+"Socket.CPUWeight\0"
+"Socket.StartupCPUWeight\0"
+"Socket.CPUShares\0"
+"Socket.StartupCPUShares\0"
+"Socket.CPUQuota\0"
+"Socket.CPUQuotaPeriodSec\0"
+"Socket.MemoryAccounting\0"
+"Socket.MemoryMin\0"
+"Socket.DefaultMemoryMin\0"
+"Socket.DefaultMemoryLow\0"
+"Socket.MemoryLow\0"
+"Socket.MemoryHigh\0"
+"Socket.MemoryMax\0"
+"Socket.MemorySwapMax\0"
+"Socket.MemoryLimit\0"
+"Socket.DeviceAllow\0"
+"Socket.DevicePolicy\0"
+"Socket.IOAccounting\0"
+"Socket.IOWeight\0"
+"Socket.StartupIOWeight\0"
+"Socket.IODeviceWeight\0"
+"Socket.IOReadBandwidthMax\0"
+"Socket.IOWriteBandwidthMax\0"
+"Socket.IOReadIOPSMax\0"
+"Socket.IOWriteIOPSMax\0"
+"Socket.IODeviceLatencyTargetSec\0"
+"Socket.BlockIOAccounting\0"
+"Socket.BlockIOWeight\0"
+"Socket.StartupBlockIOWeight\0"
+"Socket.BlockIODeviceWeight\0"
+"Socket.BlockIOReadBandwidth\0"
+"Socket.BlockIOWriteBandwidth\0"
+"Socket.TasksAccounting\0"
+"Socket.TasksMax\0"
+"Socket.Delegate\0"
+"Socket.DisableControllers\0"
+"Socket.IPAccounting\0"
+"Socket.IPAddressAllow\0"
+"Socket.IPAddressDeny\0"
+"Socket.IPIngressFilterPath\0"
+"Socket.IPEgressFilterPath\0"
+"Socket.NetClass\0"
+"Socket.SendSIGKILL\0"
+"Socket.SendSIGHUP\0"
+"Socket.KillMode\0"
+"Socket.KillSignal\0"
+"Socket.RestartKillSignal\0"
+"Socket.FinalKillSignal\0"
+"Socket.WatchdogSignal\0"
+"Mount.What\0"
+"Mount.Where\0"
+"Mount.Options\0"
+"Mount.Type\0"
+"Mount.TimeoutSec\0"
+"Mount.DirectoryMode\0"
+"Mount.SloppyOptions\0"
+"Mount.LazyUnmount\0"
+"Mount.ForceUnmount\0"
+"Mount.ReadWriteOnly\0"
+"Mount.WorkingDirectory\0"
+"Mount.RootDirectory\0"
+"Mount.RootImage\0"
+"Mount.User\0"
+"Mount.Group\0"
+"Mount.SupplementaryGroups\0"
+"Mount.Nice\0"
+"Mount.OOMScoreAdjust\0"
+"Mount.CoredumpFilter\0"
+"Mount.IOSchedulingClass\0"
+"Mount.IOSchedulingPriority\0"
+"Mount.CPUSchedulingPolicy\0"
+"Mount.CPUSchedulingPriority\0"
+"Mount.CPUSchedulingResetOnFork\0"
+"Mount.CPUAffinity\0"
+"Mount.NUMAPolicy\0"
+"Mount.NUMAMask\0"
+"Mount.UMask\0"
+"Mount.Environment\0"
+"Mount.EnvironmentFile\0"
+"Mount.PassEnvironment\0"
+"Mount.UnsetEnvironment\0"
+"Mount.DynamicUser\0"
+"Mount.RemoveIPC\0"
+"Mount.StandardInput\0"
+"Mount.StandardOutput\0"
+"Mount.StandardError\0"
+"Mount.StandardInputText\0"
+"Mount.StandardInputData\0"
+"Mount.TTYPath\0"
+"Mount.TTYReset\0"
+"Mount.TTYVHangup\0"
+"Mount.TTYVTDisallocate\0"
+"Mount.SyslogIdentifier\0"
+"Mount.SyslogFacility\0"
+"Mount.SyslogLevel\0"
+"Mount.SyslogLevelPrefix\0"
+"Mount.LogLevelMax\0"
+"Mount.LogRateLimitIntervalSec\0"
+"Mount.LogRateLimitBurst\0"
+"Mount.LogExtraFields\0"
+"Mount.Capabilities\0"
+"Mount.SecureBits\0"
+"Mount.CapabilityBoundingSet\0"
+"Mount.AmbientCapabilities\0"
+"Mount.TimerSlackNSec\0"
+"Mount.NoNewPrivileges\0"
+"Mount.KeyringMode\0"
+"Mount.SystemCallFilter\0"
+"Mount.SystemCallArchitectures\0"
+"Mount.SystemCallErrorNumber\0"
+"Mount.MemoryDenyWriteExecute\0"
+"Mount.RestrictNamespaces\0"
+"Mount.RestrictRealtime\0"
+"Mount.RestrictSUIDSGID\0"
+"Mount.RestrictAddressFamilies\0"
+"Mount.LockPersonality\0"
+"Mount.LimitCPU\0"
+"Mount.LimitFSIZE\0"
+"Mount.LimitDATA\0"
+"Mount.LimitSTACK\0"
+"Mount.LimitCORE\0"
+"Mount.LimitRSS\0"
+"Mount.LimitNOFILE\0"
+"Mount.LimitAS\0"
+"Mount.LimitNPROC\0"
+"Mount.LimitMEMLOCK\0"
+"Mount.LimitLOCKS\0"
+"Mount.LimitSIGPENDING\0"
+"Mount.LimitMSGQUEUE\0"
+"Mount.LimitNICE\0"
+"Mount.LimitRTPRIO\0"
+"Mount.LimitRTTIME\0"
+"Mount.ReadWriteDirectories\0"
+"Mount.ReadOnlyDirectories\0"
+"Mount.InaccessibleDirectories\0"
+"Mount.ReadWritePaths\0"
+"Mount.ReadOnlyPaths\0"
+"Mount.InaccessiblePaths\0"
+"Mount.BindPaths\0"
+"Mount.BindReadOnlyPaths\0"
+"Mount.TemporaryFileSystem\0"
+"Mount.PrivateTmp\0"
+"Mount.PrivateDevices\0"
+"Mount.ProtectKernelTunables\0"
+"Mount.ProtectKernelModules\0"
+"Mount.ProtectKernelLogs\0"
+"Mount.ProtectClock\0"
+"Mount.ProtectControlGroups\0"
+"Mount.NetworkNamespacePath\0"
+"Mount.LogNamespace\0"
+"Mount.PrivateNetwork\0"
+"Mount.PrivateUsers\0"
+"Mount.PrivateMounts\0"
+"Mount.ProtectSystem\0"
+"Mount.ProtectHome\0"
+"Mount.MountFlags\0"
+"Mount.MountAPIVFS\0"
+"Mount.Personality\0"
+"Mount.RuntimeDirectoryPreserve\0"
+"Mount.RuntimeDirectoryMode\0"
+"Mount.RuntimeDirectory\0"
+"Mount.StateDirectoryMode\0"
+"Mount.StateDirectory\0"
+"Mount.CacheDirectoryMode\0"
+"Mount.CacheDirectory\0"
+"Mount.LogsDirectoryMode\0"
+"Mount.LogsDirectory\0"
+"Mount.ConfigurationDirectoryMode\0"
+"Mount.ConfigurationDirectory\0"
+"Mount.TimeoutCleanSec\0"
+"Mount.ProtectHostname\0"
+"Mount.PAMName\0"
+"Mount.IgnoreSIGPIPE\0"
+"Mount.UtmpIdentifier\0"
+"Mount.UtmpMode\0"
+"Mount.SELinuxContext\0"
+"Mount.AppArmorProfile\0"
+"Mount.SmackProcessLabel\0"
+"Mount.Slice\0"
+"Mount.AllowedCPUs\0"
+"Mount.AllowedMemoryNodes\0"
+"Mount.CPUAccounting\0"
+"Mount.CPUWeight\0"
+"Mount.StartupCPUWeight\0"
+"Mount.CPUShares\0"
+"Mount.StartupCPUShares\0"
+"Mount.CPUQuota\0"
+"Mount.CPUQuotaPeriodSec\0"
+"Mount.MemoryAccounting\0"
+"Mount.MemoryMin\0"
+"Mount.DefaultMemoryMin\0"
+"Mount.DefaultMemoryLow\0"
+"Mount.MemoryLow\0"
+"Mount.MemoryHigh\0"
+"Mount.MemoryMax\0"
+"Mount.MemorySwapMax\0"
+"Mount.MemoryLimit\0"
+"Mount.DeviceAllow\0"
+"Mount.DevicePolicy\0"
+"Mount.IOAccounting\0"
+"Mount.IOWeight\0"
+"Mount.StartupIOWeight\0"
+"Mount.IODeviceWeight\0"
+"Mount.IOReadBandwidthMax\0"
+"Mount.IOWriteBandwidthMax\0"
+"Mount.IOReadIOPSMax\0"
+"Mount.IOWriteIOPSMax\0"
+"Mount.IODeviceLatencyTargetSec\0"
+"Mount.BlockIOAccounting\0"
+"Mount.BlockIOWeight\0"
+"Mount.StartupBlockIOWeight\0"
+"Mount.BlockIODeviceWeight\0"
+"Mount.BlockIOReadBandwidth\0"
+"Mount.BlockIOWriteBandwidth\0"
+"Mount.TasksAccounting\0"
+"Mount.TasksMax\0"
+"Mount.Delegate\0"
+"Mount.DisableControllers\0"
+"Mount.IPAccounting\0"
+"Mount.IPAddressAllow\0"
+"Mount.IPAddressDeny\0"
+"Mount.IPIngressFilterPath\0"
+"Mount.IPEgressFilterPath\0"
+"Mount.NetClass\0"
+"Mount.SendSIGKILL\0"
+"Mount.SendSIGHUP\0"
+"Mount.KillMode\0"
+"Mount.KillSignal\0"
+"Mount.RestartKillSignal\0"
+"Mount.FinalKillSignal\0"
+"Mount.WatchdogSignal\0"
+"Automount.Where\0"
+"Automount.DirectoryMode\0"
+"Automount.TimeoutIdleSec\0"
+"Swap.What\0"
+"Swap.Priority\0"
+"Swap.Options\0"
+"Swap.TimeoutSec\0"
+"Swap.WorkingDirectory\0"
+"Swap.RootDirectory\0"
+"Swap.RootImage\0"
+"Swap.User\0"
+"Swap.Group\0"
+"Swap.SupplementaryGroups\0"
+"Swap.Nice\0"
+"Swap.OOMScoreAdjust\0"
+"Swap.CoredumpFilter\0"
+"Swap.IOSchedulingClass\0"
+"Swap.IOSchedulingPriority\0"
+"Swap.CPUSchedulingPolicy\0"
+"Swap.CPUSchedulingPriority\0"
+"Swap.CPUSchedulingResetOnFork\0"
+"Swap.CPUAffinity\0"
+"Swap.NUMAPolicy\0"
+"Swap.NUMAMask\0"
+"Swap.UMask\0"
+"Swap.Environment\0"
+"Swap.EnvironmentFile\0"
+"Swap.PassEnvironment\0"
+"Swap.UnsetEnvironment\0"
+"Swap.DynamicUser\0"
+"Swap.RemoveIPC\0"
+"Swap.StandardInput\0"
+"Swap.StandardOutput\0"
+"Swap.StandardError\0"
+"Swap.StandardInputText\0"
+"Swap.StandardInputData\0"
+"Swap.TTYPath\0"
+"Swap.TTYReset\0"
+"Swap.TTYVHangup\0"
+"Swap.TTYVTDisallocate\0"
+"Swap.SyslogIdentifier\0"
+"Swap.SyslogFacility\0"
+"Swap.SyslogLevel\0"
+"Swap.SyslogLevelPrefix\0"
+"Swap.LogLevelMax\0"
+"Swap.LogRateLimitIntervalSec\0"
+"Swap.LogRateLimitBurst\0"
+"Swap.LogExtraFields\0"
+"Swap.Capabilities\0"
+"Swap.SecureBits\0"
+"Swap.CapabilityBoundingSet\0"
+"Swap.AmbientCapabilities\0"
+"Swap.TimerSlackNSec\0"
+"Swap.NoNewPrivileges\0"
+"Swap.KeyringMode\0"
+"Swap.SystemCallFilter\0"
+"Swap.SystemCallArchitectures\0"
+"Swap.SystemCallErrorNumber\0"
+"Swap.MemoryDenyWriteExecute\0"
+"Swap.RestrictNamespaces\0"
+"Swap.RestrictRealtime\0"
+"Swap.RestrictSUIDSGID\0"
+"Swap.RestrictAddressFamilies\0"
+"Swap.LockPersonality\0"
+"Swap.LimitCPU\0"
+"Swap.LimitFSIZE\0"
+"Swap.LimitDATA\0"
+"Swap.LimitSTACK\0"
+"Swap.LimitCORE\0"
+"Swap.LimitRSS\0"
+"Swap.LimitNOFILE\0"
+"Swap.LimitAS\0"
+"Swap.LimitNPROC\0"
+"Swap.LimitMEMLOCK\0"
+"Swap.LimitLOCKS\0"
+"Swap.LimitSIGPENDING\0"
+"Swap.LimitMSGQUEUE\0"
+"Swap.LimitNICE\0"
+"Swap.LimitRTPRIO\0"
+"Swap.LimitRTTIME\0"
+"Swap.ReadWriteDirectories\0"
+"Swap.ReadOnlyDirectories\0"
+"Swap.InaccessibleDirectories\0"
+"Swap.ReadWritePaths\0"
+"Swap.ReadOnlyPaths\0"
+"Swap.InaccessiblePaths\0"
+"Swap.BindPaths\0"
+"Swap.BindReadOnlyPaths\0"
+"Swap.TemporaryFileSystem\0"
+"Swap.PrivateTmp\0"
+"Swap.PrivateDevices\0"
+"Swap.ProtectKernelTunables\0"
+"Swap.ProtectKernelModules\0"
+"Swap.ProtectKernelLogs\0"
+"Swap.ProtectClock\0"
+"Swap.ProtectControlGroups\0"
+"Swap.NetworkNamespacePath\0"
+"Swap.LogNamespace\0"
+"Swap.PrivateNetwork\0"
+"Swap.PrivateUsers\0"
+"Swap.PrivateMounts\0"
+"Swap.ProtectSystem\0"
+"Swap.ProtectHome\0"
+"Swap.MountFlags\0"
+"Swap.MountAPIVFS\0"
+"Swap.Personality\0"
+"Swap.RuntimeDirectoryPreserve\0"
+"Swap.RuntimeDirectoryMode\0"
+"Swap.RuntimeDirectory\0"
+"Swap.StateDirectoryMode\0"
+"Swap.StateDirectory\0"
+"Swap.CacheDirectoryMode\0"
+"Swap.CacheDirectory\0"
+"Swap.LogsDirectoryMode\0"
+"Swap.LogsDirectory\0"
+"Swap.ConfigurationDirectoryMode\0"
+"Swap.ConfigurationDirectory\0"
+"Swap.TimeoutCleanSec\0"
+"Swap.ProtectHostname\0"
+"Swap.PAMName\0"
+"Swap.IgnoreSIGPIPE\0"
+"Swap.UtmpIdentifier\0"
+"Swap.UtmpMode\0"
+"Swap.SELinuxContext\0"
+"Swap.AppArmorProfile\0"
+"Swap.SmackProcessLabel\0"
+"Swap.Slice\0"
+"Swap.AllowedCPUs\0"
+"Swap.AllowedMemoryNodes\0"
+"Swap.CPUAccounting\0"
+"Swap.CPUWeight\0"
+"Swap.StartupCPUWeight\0"
+"Swap.CPUShares\0"
+"Swap.StartupCPUShares\0"
+"Swap.CPUQuota\0"
+"Swap.CPUQuotaPeriodSec\0"
+"Swap.MemoryAccounting\0"
+"Swap.MemoryMin\0"
+"Swap.DefaultMemoryMin\0"
+"Swap.DefaultMemoryLow\0"
+"Swap.MemoryLow\0"
+"Swap.MemoryHigh\0"
+"Swap.MemoryMax\0"
+"Swap.MemorySwapMax\0"
+"Swap.MemoryLimit\0"
+"Swap.DeviceAllow\0"
+"Swap.DevicePolicy\0"
+"Swap.IOAccounting\0"
+"Swap.IOWeight\0"
+"Swap.StartupIOWeight\0"
+"Swap.IODeviceWeight\0"
+"Swap.IOReadBandwidthMax\0"
+"Swap.IOWriteBandwidthMax\0"
+"Swap.IOReadIOPSMax\0"
+"Swap.IOWriteIOPSMax\0"
+"Swap.IODeviceLatencyTargetSec\0"
+"Swap.BlockIOAccounting\0"
+"Swap.BlockIOWeight\0"
+"Swap.StartupBlockIOWeight\0"
+"Swap.BlockIODeviceWeight\0"
+"Swap.BlockIOReadBandwidth\0"
+"Swap.BlockIOWriteBandwidth\0"
+"Swap.TasksAccounting\0"
+"Swap.TasksMax\0"
+"Swap.Delegate\0"
+"Swap.DisableControllers\0"
+"Swap.IPAccounting\0"
+"Swap.IPAddressAllow\0"
+"Swap.IPAddressDeny\0"
+"Swap.IPIngressFilterPath\0"
+"Swap.IPEgressFilterPath\0"
+"Swap.NetClass\0"
+"Swap.SendSIGKILL\0"
+"Swap.SendSIGHUP\0"
+"Swap.KillMode\0"
+"Swap.KillSignal\0"
+"Swap.RestartKillSignal\0"
+"Swap.FinalKillSignal\0"
+"Swap.WatchdogSignal\0"
+"Timer.OnCalendar\0"
+"Timer.OnActiveSec\0"
+"Timer.OnBootSec\0"
+"Timer.OnStartupSec\0"
+"Timer.OnUnitActiveSec\0"
+"Timer.OnUnitInactiveSec\0"
+"Timer.OnClockChange\0"
+"Timer.OnTimezoneChange\0"
+"Timer.Persistent\0"
+"Timer.WakeSystem\0"
+"Timer.RemainAfterElapse\0"
+"Timer.AccuracySec\0"
+"Timer.RandomizedDelaySec\0"
+"Timer.Unit\0"
+"Path.PathExists\0"
+"Path.PathExistsGlob\0"
+"Path.PathChanged\0"
+"Path.PathModified\0"
+"Path.DirectoryNotEmpty\0"
+"Path.Unit\0"
+"Path.MakeDirectory\0"
+"Path.DirectoryMode\0"
+"Slice.Slice\0"
+"Slice.AllowedCPUs\0"
+"Slice.AllowedMemoryNodes\0"
+"Slice.CPUAccounting\0"
+"Slice.CPUWeight\0"
+"Slice.StartupCPUWeight\0"
+"Slice.CPUShares\0"
+"Slice.StartupCPUShares\0"
+"Slice.CPUQuota\0"
+"Slice.CPUQuotaPeriodSec\0"
+"Slice.MemoryAccounting\0"
+"Slice.MemoryMin\0"
+"Slice.DefaultMemoryMin\0"
+"Slice.DefaultMemoryLow\0"
+"Slice.MemoryLow\0"
+"Slice.MemoryHigh\0"
+"Slice.MemoryMax\0"
+"Slice.MemorySwapMax\0"
+"Slice.MemoryLimit\0"
+"Slice.DeviceAllow\0"
+"Slice.DevicePolicy\0"
+"Slice.IOAccounting\0"
+"Slice.IOWeight\0"
+"Slice.StartupIOWeight\0"
+"Slice.IODeviceWeight\0"
+"Slice.IOReadBandwidthMax\0"
+"Slice.IOWriteBandwidthMax\0"
+"Slice.IOReadIOPSMax\0"
+"Slice.IOWriteIOPSMax\0"
+"Slice.IODeviceLatencyTargetSec\0"
+"Slice.BlockIOAccounting\0"
+"Slice.BlockIOWeight\0"
+"Slice.StartupBlockIOWeight\0"
+"Slice.BlockIODeviceWeight\0"
+"Slice.BlockIOReadBandwidth\0"
+"Slice.BlockIOWriteBandwidth\0"
+"Slice.TasksAccounting\0"
+"Slice.TasksMax\0"
+"Slice.Delegate\0"
+"Slice.DisableControllers\0"
+"Slice.IPAccounting\0"
+"Slice.IPAddressAllow\0"
+"Slice.IPAddressDeny\0"
+"Slice.IPIngressFilterPath\0"
+"Slice.IPEgressFilterPath\0"
+"Slice.NetClass\0"
+"Scope.Slice\0"
+"Scope.AllowedCPUs\0"
+"Scope.AllowedMemoryNodes\0"
+"Scope.CPUAccounting\0"
+"Scope.CPUWeight\0"
+"Scope.StartupCPUWeight\0"
+"Scope.CPUShares\0"
+"Scope.StartupCPUShares\0"
+"Scope.CPUQuota\0"
+"Scope.CPUQuotaPeriodSec\0"
+"Scope.MemoryAccounting\0"
+"Scope.MemoryMin\0"
+"Scope.DefaultMemoryMin\0"
+"Scope.DefaultMemoryLow\0"
+"Scope.MemoryLow\0"
+"Scope.MemoryHigh\0"
+"Scope.MemoryMax\0"
+"Scope.MemorySwapMax\0"
+"Scope.MemoryLimit\0"
+"Scope.DeviceAllow\0"
+"Scope.DevicePolicy\0"
+"Scope.IOAccounting\0"
+"Scope.IOWeight\0"
+"Scope.StartupIOWeight\0"
+"Scope.IODeviceWeight\0"
+"Scope.IOReadBandwidthMax\0"
+"Scope.IOWriteBandwidthMax\0"
+"Scope.IOReadIOPSMax\0"
+"Scope.IOWriteIOPSMax\0"
+"Scope.IODeviceLatencyTargetSec\0"
+"Scope.BlockIOAccounting\0"
+"Scope.BlockIOWeight\0"
+"Scope.StartupBlockIOWeight\0"
+"Scope.BlockIODeviceWeight\0"
+"Scope.BlockIOReadBandwidth\0"
+"Scope.BlockIOWriteBandwidth\0"
+"Scope.TasksAccounting\0"
+"Scope.TasksMax\0"
+"Scope.Delegate\0"
+"Scope.DisableControllers\0"
+"Scope.IPAccounting\0"
+"Scope.IPAddressAllow\0"
+"Scope.IPAddressDeny\0"
+"Scope.IPIngressFilterPath\0"
+"Scope.IPEgressFilterPath\0"
+"Scope.NetClass\0"
+"Scope.SendSIGKILL\0"
+"Scope.SendSIGHUP\0"
+"Scope.KillMode\0"
+"Scope.KillSignal\0"
+"Scope.RestartKillSignal\0"
+"Scope.FinalKillSignal\0"
+"Scope.WatchdogSignal\0"
+"Scope.RuntimeMaxSec\0"
+"Scope.TimeoutStopSec\0"
+"Install.Alias\0"
+"Install.WantedBy\0"
+"Install.RequiredBy\0"
+"Install.Also\0"
+"Install.DefaultInstance\0"
+;
diff --git a/build/src/core/load-fragment-gperf.c b/build/src/core/load-fragment-gperf.c
new file mode 100644
index 0000000000..90a9ab95d0
--- /dev/null
+++ b/build/src/core/load-fragment-gperf.c
@@ -0,0 +1,4252 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/core/load-fragment-gperf.c src/core/load-fragment-gperf.gperf  */
+/* Computed positions: -k'2,7-10,13,16,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/core/load-fragment-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "all-units.h"
+#include "conf-parser.h"
+#include "load-fragment.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 1022
+#define MIN_WORD_LENGTH 9
+#define MAX_WORD_LENGTH 36
+#define MIN_HASH_VALUE 55
+#define MAX_HASH_VALUE 7921
+/* maximum key range = 7867, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+load_fragment_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned short asso_values[] =
+    {
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922,   85, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922,  115, 1519,  360,   85,  804,
+      2044,  140,  540,  720, 7922, 2563,  875,  860, 2019,  851,
+       160,   20,  210,   20, 1604,  500,    5,  181, 7922,   15,
+         0, 7922, 7922, 7922, 7922, 7922, 7922,    0,  926,  175,
+        20,   10, 1501,  380,  675,   20,    5, 1704,  260,  245,
+        20,   15, 1354,   45,   10,    0,    5,  435, 1856,  145,
+       425,   60,    0, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922, 7922,
+      7922, 7922, 7922, 7922, 7922, 7922
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[15]];
+      /*FALLTHROUGH*/
+      case 15:
+      case 14:
+      case 13:
+        hval += asso_values[(unsigned char)str[12]];
+      /*FALLTHROUGH*/
+      case 12:
+      case 11:
+      case 10:
+        hval += asso_values[(unsigned char)str[9]];
+      /*FALLTHROUGH*/
+      case 9:
+        hval += asso_values[(unsigned char)str[8]];
+      /*FALLTHROUGH*/
+      case 8:
+        hval += asso_values[(unsigned char)str[7]];
+      /*FALLTHROUGH*/
+      case 7:
+        hval += asso_values[(unsigned char)str[6]];
+      /*FALLTHROUGH*/
+      case 6:
+      case 5:
+      case 4:
+      case 3:
+      case 2:
+        hval += asso_values[(unsigned char)str[1]];
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct ConfigPerfItem *
+load_fragment_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 26 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Wants",                      config_parse_unit_deps,             UNIT_WANTS,                    0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 934 "src/core/load-fragment-gperf.gperf"
+      {"Path.Unit",                       config_parse_trigger_unit,          0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 106 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertUser",                 config_parse_unit_condition_string, CONDITION_USER,                offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 104 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertHost",                 config_parse_unit_condition_string, CONDITION_HOST,                offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 96 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertNeedsUpdate",          config_parse_unit_condition_path,   CONDITION_NEEDS_UPDATE,        offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 97 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertFirstBoot",            config_parse_unit_condition_string, CONDITION_FIRST_BOOT,          offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 98 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertKernelCommandLine",    config_parse_unit_condition_string, CONDITION_KERNEL_COMMAND_LINE, offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 100 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertArchitecture",         config_parse_unit_condition_string, CONDITION_ARCHITECTURE,        offsetof(Unit, asserts)},
+#line 99 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertKernelVersion",        config_parse_unit_condition_string, CONDITION_KERNEL_VERSION,      offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 27 "src/core/load-fragment-gperf.gperf"
+      {"Unit.BindsTo",                    config_parse_unit_deps,             UNIT_BINDS_TO,                 0},
+#line 108 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertControlGroupController",     config_parse_unit_condition_string, CONDITION_CONTROL_GROUP_CONTROLLER,   offsetof(Unit, asserts)},
+#line 590 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StandardError",                config_parse_exec_output,           0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 592 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StandardInputData",            config_parse_exec_input_data,       0,                             offsetof(Mount, exec_context)},
+#line 588 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StandardInput",                config_parse_exec_input,            0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 591 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StandardInputText",            config_parse_exec_input_text,       0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 64 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathExists",        config_parse_unit_condition_path,   CONDITION_PATH_EXISTS,         offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 83 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionUser",              config_parse_unit_condition_string, CONDITION_USER,                offsetof(Unit, conditions)},
+#line 102 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertSecurity",             config_parse_unit_condition_string, CONDITION_SECURITY,            offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 68 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathIsMountPoint",  config_parse_unit_condition_path,   CONDITION_PATH_IS_MOUNT_POINT, offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0},
+#line 81 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionHost",              config_parse_unit_condition_string, CONDITION_HOST,                offsetof(Unit, conditions)},
+#line 69 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathIsReadWrite",   config_parse_unit_condition_path,   CONDITION_PATH_IS_READ_WRITE,  offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 73 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionNeedsUpdate",       config_parse_unit_condition_path,   CONDITION_NEEDS_UPDATE,        offsetof(Unit, conditions)},
+#line 77 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionArchitecture",      config_parse_unit_condition_string, CONDITION_ARCHITECTURE,        offsetof(Unit, conditions)},
+      {(char*)0},
+#line 74 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionFirstBoot",         config_parse_unit_condition_string, CONDITION_FIRST_BOOT,          offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0},
+#line 75 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionKernelCommandLine", config_parse_unit_condition_string, CONDITION_KERNEL_COMMAND_LINE, offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 147 "src/core/load-fragment-gperf.gperf"
+      {"Service.Sockets",                 config_parse_service_sockets,       0,                             0},
+      {(char*)0},
+#line 76 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionKernelVersion",     config_parse_unit_condition_string, CONDITION_KERNEL_VERSION,      offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0},
+#line 72 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionFileIsExecutable",  config_parse_unit_condition_path,   CONDITION_FILE_IS_EXECUTABLE,  offsetof(Unit, conditions)},
+#line 85 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionControlGroupController",  config_parse_unit_condition_string, CONDITION_CONTROL_GROUP_CONTROLLER,   offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0},
+#line 722 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 78 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionVirtualization",    config_parse_unit_condition_string, CONDITION_VIRTUALIZATION,      offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 194 "src/core/load-fragment-gperf.gperf"
+      {"Service.SecureBits",                   config_parse_exec_secure_bits,      0,                             offsetof(Service, exec_context.secure_bits)},
+#line 746 "src/core/load-fragment-gperf.gperf"
+      {"Swap.User",                         config_parse_user_group_compat,     0,                             offsetof(Swap, exec_context.user)},
+      {(char*)0},
+#line 254 "src/core/load-fragment-gperf.gperf"
+      {"Service.StateDirectoryMode",           config_parse_mode,                  0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_STATE].mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 80 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionCapability",        config_parse_unit_condition_string, CONDITION_CAPABILITY,          offsetof(Unit, conditions)},
+#line 180 "src/core/load-fragment-gperf.gperf"
+      {"Service.StandardInputData",            config_parse_exec_input_data,       0,                             offsetof(Service, exec_context)},
+#line 176 "src/core/load-fragment-gperf.gperf"
+      {"Service.StandardInput",                config_parse_exec_input,            0,                             offsetof(Service, exec_context)},
+#line 177 "src/core/load-fragment-gperf.gperf"
+      {"Service.StandardOutput",               config_parse_exec_output,           0,                             offsetof(Service, exec_context)},
+      {(char*)0},
+#line 66 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathIsDirectory",   config_parse_unit_condition_path,   CONDITION_PATH_IS_DIRECTORY,   offsetof(Unit, conditions)},
+#line 179 "src/core/load-fragment-gperf.gperf"
+      {"Service.StandardInputText",            config_parse_exec_input_text,       0,                             offsetof(Service, exec_context)},
+#line 178 "src/core/load-fragment-gperf.gperf"
+      {"Service.StandardError",                config_parse_exec_output,           0,                             offsetof(Service, exec_context)},
+#line 79 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionSecurity",          config_parse_unit_condition_string, CONDITION_SECURITY,            offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 796 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RestrictRealtime",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 845 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StateDirectoryMode",           config_parse_mode,                  0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_STATE].mode)},
+      {(char*)0}, {(char*)0},
+#line 71 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionFileNotEmpty",      config_parse_unit_condition_path,   CONDITION_FILE_NOT_EMPTY,      offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 70 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionDirectoryNotEmpty", config_parse_unit_condition_path,   CONDITION_DIRECTORY_NOT_EMPTY, offsetof(Unit, conditions)},
+      {(char*)0},
+#line 798 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RestrictAddressFamilies",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 201 "src/core/load-fragment-gperf.gperf"
+      {"Service.SystemCallArchitectures",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 200 "src/core/load-fragment-gperf.gperf"
+      {"Service.SystemCallFilter",            config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 923 "src/core/load-fragment-gperf.gperf"
+      {"Timer.Persistent",                config_parse_bool,                  0,                             offsetof(Timer, persistent)},
+#line 255 "src/core/load-fragment-gperf.gperf"
+      {"Service.StateDirectory",               config_parse_exec_directories,      0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_STATE].paths)},
+      {(char*)0},
+#line 202 "src/core/load-fragment-gperf.gperf"
+      {"Service.SystemCallErrorNumber",        config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 768 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StandardOutput",               config_parse_exec_output,           0,                             offsetof(Swap, exec_context)},
+      {(char*)0},
+#line 675 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectHostname",              config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_hostname)},
+      {(char*)0},
+#line 650 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectKernelLogs",            config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_kernel_logs)},
+      {(char*)0}, {(char*)0},
+#line 649 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectKernelModules",         config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_kernel_modules)},
+#line 648 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectKernelTunables",        config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_kernel_tunables)},
+#line 769 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StandardError",                config_parse_exec_output,           0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 185 "src/core/load-fragment-gperf.gperf"
+      {"Service.SyslogIdentifier",             config_parse_unit_string_printf,    0,                             offsetof(Service, exec_context.syslog_identifier)},
+#line 484 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StateDirectoryMode",           config_parse_mode,                  0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_STATE].mode)},
+#line 652 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectControlGroups",         config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_control_groups)},
+      {(char*)0}, {(char*)0},
+#line 846 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StateDirectory",               config_parse_exec_directories,      0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_STATE].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 936 "src/core/load-fragment-gperf.gperf"
+      {"Path.DirectoryMode",              config_parse_mode,                  0,                             offsetof(Path, directory_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 666 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StateDirectoryMode",           config_parse_mode,                  0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_STATE].mode)},
+      {(char*)0},
+#line 21 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Description",                config_parse_unit_string_printf,    0,                             offsetof(Unit, description)},
+#line 662 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Personality",                  config_parse_personality,           0,                             offsetof(Mount, exec_context.personality)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 186 "src/core/load-fragment-gperf.gperf"
+      {"Service.SyslogFacility",               config_parse_log_facility,          0,                             offsetof(Service, exec_context.syslog_priority)},
+      {(char*)0}, {(char*)0},
+#line 566 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RootImage",                    config_parse_unit_path_printf,      true,                          offsetof(Mount, exec_context.root_image)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 142 "src/core/load-fragment-gperf.gperf"
+      {"Service.SysVStartPriority",       config_parse_warn_compat,           DISABLED_LEGACY,               0},
+#line 485 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StateDirectory",               config_parse_exec_directories,      0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_STATE].paths)},
+#line 365 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PassCredentials",          config_parse_bool,                  0,                             offsetof(Socket, pass_cred)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 367 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PassPacketInfo",           config_parse_bool,                  0,                             offsetof(Socket, pass_pktinfo)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 344 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DirectoryMode",            config_parse_mode,                  0,                             offsetof(Socket, directory_mode)},
+      {(char*)0}, {(char*)0},
+#line 404 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DynamicUser",                  config_parse_bool,                  true,                          offsetof(Socket, exec_context.dynamic_user)},
+#line 474 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PrivateUsers",                 config_parse_bool,                  0,                             offsetof(Socket, exec_context.private_users)},
+      {(char*)0}, {(char*)0},
+#line 402 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PassEnvironment",              config_parse_pass_environ,          0,                             offsetof(Socket, exec_context.pass_environment)},
+      {(char*)0}, {(char*)0},
+#line 667 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StateDirectory",               config_parse_exec_directories,      0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_STATE].paths)},
+      {(char*)0},
+#line 933 "src/core/load-fragment-gperf.gperf"
+      {"Path.DirectoryNotEmpty",          config_parse_path_spec,             0,                             0},
+#line 93 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertDirectoryNotEmpty",    config_parse_unit_condition_path,   CONDITION_DIRECTORY_NOT_EMPTY, offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 465 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PrivateDevices",               config_parse_bool,                  0,                             offsetof(Socket, exec_context.private_devices)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 475 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PrivateMounts",                config_parse_bool,                  0,                             offsetof(Socket, exec_context.private_mounts)},
+      {(char*)0}, {(char*)0},
+#line 740 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Priority",                   config_parse_swap_priority,         0,                             0},
+#line 1022 "src/core/load-fragment-gperf.gperf"
+      {"Scope.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 424 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SecureBits",                   config_parse_exec_secure_bits,      0,                             offsetof(Socket, exec_context.secure_bits)},
+      {(char*)0},
+#line 375 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Service",                  config_parse_socket_service,        0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 134 "src/core/load-fragment-gperf.gperf"
+      {"Service.Restart",                 config_parse_service_restart,       0,                             offsetof(Service, restart)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 341 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SocketUser",               config_parse_user_group_compat,     0,                             offsetof(Socket, user)},
+      {(char*)0},
+#line 565 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RootDirectory",                config_parse_unit_path_printf,      true,                          offsetof(Mount, exec_context.root_directory)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 366 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PassSecurity",             config_parse_bool,                  0,                             offsetof(Socket, pass_sec)},
+      {(char*)0},
+#line 458 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReadWritePaths",               config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.read_write_paths)},
+#line 343 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SocketMode",               config_parse_mode,                  0,                             offsetof(Socket, socket_mode)},
+#line 792 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SystemCallArchitectures",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 204 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestrictNamespaces",           config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 455 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReadWriteDirectories",         config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.read_write_paths)},
+#line 744 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RootDirectory",                config_parse_unit_path_printf,      true,                          offsetof(Swap, exec_context.root_directory)},
+#line 749 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Nice",                         config_parse_exec_nice,             0,                             offsetof(Swap, exec_context)},
+      {(char*)0},
+#line 207 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestrictAddressFamilies",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 205 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestrictRealtime",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 132 "src/core/load-fragment-gperf.gperf"
+      {"Service.RebootArgument",          config_parse_unit_string_printf,    0,                             offsetof(Unit, reboot_arg)},
+      {(char*)0}, {(char*)0},
+#line 819 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ReadWritePaths",               config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.read_write_paths)},
+      {(char*)0},
+#line 235 "src/core/load-fragment-gperf.gperf"
+      {"Service.PrivateDevices",               config_parse_bool,                  0,                             offsetof(Service, exec_context.private_devices)},
+      {(char*)0}, {(char*)0},
+#line 355 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Priority",                 config_parse_int,                   0,                             offsetof(Socket, priority)},
+#line 637 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ReadWriteDirectories",         config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.read_write_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 586 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DynamicUser",                  config_parse_bool,                  true,                          offsetof(Mount, exec_context.dynamic_user)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 480 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Personality",                  config_parse_personality,           0,                             offsetof(Socket, exec_context.personality)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 135 "src/core/load-fragment-gperf.gperf"
+      {"Service.PermissionsStartOnly",    config_parse_bool,                  0,                             offsetof(Service, permissions_start_only)},
+      {(char*)0},
+#line 264 "src/core/load-fragment-gperf.gperf"
+      {"Service.PAMName",                     config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 816 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ReadWriteDirectories",         config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.read_write_paths)},
+      {(char*)0},
+#line 129 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartLimitBurst",         config_parse_unsigned,              0,                             offsetof(Unit, start_ratelimit.burst)},
+#line 721 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Delegate",                     config_parse_delegate,              0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 271 "src/core/load-fragment-gperf.gperf"
+      {"Service.Slice",                       config_parse_unit_slice,            0,                             0},
+#line 976 "src/core/load-fragment-gperf.gperf"
+      {"Slice.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 501 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Slice",                       config_parse_unit_slice,            0,                             0},
+      {(char*)0},
+#line 130 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartLimitAction",        config_parse_emergency_action,      0,                             offsetof(Unit, start_limit_action)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 382 "src/core/load-fragment-gperf.gperf"
+      {"Socket.WorkingDirectory",            config_parse_working_directory,     0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 616 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RestrictNamespaces",           config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 58 "src/core/load-fragment-gperf.gperf"
+      {"Unit.StartLimitAction",           config_parse_emergency_action,      0,                             offsetof(Unit, start_limit_action)},
+      {(char*)0},
+#line 795 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RestrictNamespaces",           config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 206 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestrictSUIDSGID",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 456 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReadOnlyDirectories",          config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.read_only_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 640 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ReadWritePaths",               config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.read_write_paths)},
+      {(char*)0},
+#line 617 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RestrictRealtime",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 373 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Symlinks",                 config_parse_unit_path_strv_printf, 0,                             offsetof(Socket, symlinks)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 619 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RestrictAddressFamilies",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 807 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitAS",                      config_parse_rlimit,                RLIMIT_AS,                     offsetof(Swap, exec_context.rlimit)},
+#line 436 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RestrictSUIDSGID",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 291 "src/core/load-fragment-gperf.gperf"
+      {"Service.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Service, cgroup_context.device_policy)},
+#line 880 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0},
+#line 837 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectSystem",                config_parse_protect_system,        0,                             offsetof(Swap, exec_context.protect_system)},
+#line 658 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectSystem",                config_parse_protect_system,        0,                             offsetof(Mount, exec_context.protect_system)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 873 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+#line 539 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Delegate",                     config_parse_delegate,              0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0},
+#line 659 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectHome",                  config_parse_protect_home,          0,                             offsetof(Mount, exec_context.protect_home)},
+      {(char*)0}, {(char*)0},
+#line 437 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RestrictAddressFamilies",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 805 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitRSS",                     config_parse_rlimit,                RLIMIT_RSS,                    offsetof(Swap, exec_context.rlimit)},
+#line 187 "src/core/load-fragment-gperf.gperf"
+      {"Service.SyslogLevel",                  config_parse_log_level,             0,                             offsetof(Service, exec_context.syslog_priority)},
+#line 152 "src/core/load-fragment-gperf.gperf"
+      {"Service.WorkingDirectory",            config_parse_working_directory,     0,                             offsetof(Service, exec_context)},
+#line 50 "src/core/load-fragment-gperf.gperf"
+      {"Unit.IgnoreOnSnapshot",           config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0}, {(char*)0},
+#line 468 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectKernelLogs",            config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_kernel_logs)},
+      {(char*)0}, {(char*)0},
+#line 467 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectKernelModules",         config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_kernel_modules)},
+#line 466 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectKernelTunables",        config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_kernel_tunables)},
+      {(char*)0}, {(char*)0},
+#line 82 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionACPower",           config_parse_unit_condition_string, CONDITION_AC_POWER,            offsetof(Unit, conditions)},
+#line 470 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectControlGroups",         config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_control_groups)},
+#line 477 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectHome",                  config_parse_protect_home,          0,                             offsetof(Socket, exec_context.protect_home)},
+      {(char*)0},
+#line 540 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Socket, cgroup_context)},
+#line 153 "src/core/load-fragment-gperf.gperf"
+      {"Service.RootDirectory",                config_parse_unit_path_printf,      true,                          offsetof(Service, exec_context.root_directory)},
+#line 493 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectHostname",              config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_hostname)},
+      {(char*)0},
+#line 927 "src/core/load-fragment-gperf.gperf"
+      {"Timer.RandomizedDelaySec",        config_parse_sec,                   0,                             offsetof(Timer, random_usec)},
+#line 49 "src/core/load-fragment-gperf.gperf"
+      {"Unit.IgnoreOnIsolate",            config_parse_bool,                  0,                             offsetof(Unit, ignore_on_isolate)},
+#line 683 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Slice",                       config_parse_unit_slice,            0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 136 "src/core/load-fragment-gperf.gperf"
+      {"Service.RootDirectoryStartOnly",  config_parse_bool,                  0,                             offsetof(Service, root_directory_start_only)},
+      {(char*)0},
+#line 139 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestartPreventExitStatus", config_parse_set_status,           0,                             offsetof(Service, restart_prevent_status)},
+      {(char*)0},
+#line 278 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Service, cgroup_context.startup_cpu_shares)},
+#line 459 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReadOnlyPaths",                config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.read_only_paths)},
+#line 256 "src/core/load-fragment-gperf.gperf"
+      {"Service.CacheDirectoryMode",           config_parse_mode,                  0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_CACHE].mode)},
+      {(char*)0}, {(char*)0},
+#line 276 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Service, cgroup_context.startup_cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 589 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StandardOutput",               config_parse_exec_output,           0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 228 "src/core/load-fragment-gperf.gperf"
+      {"Service.ReadWritePaths",               config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.read_write_paths)},
+#line 641 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ReadOnlyPaths",                config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.read_only_paths)},
+      {(char*)0},
+#line 776 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SyslogIdentifier",             config_parse_unit_string_printf,    0,                             offsetof(Swap, exec_context.syslog_identifier)},
+      {(char*)0},
+#line 119 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestartSec",              config_parse_sec,                   0,                             offsetof(Service, restart_usec)},
+#line 225 "src/core/load-fragment-gperf.gperf"
+      {"Service.ReadWriteDirectories",         config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.read_write_paths)},
+#line 101 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertVirtualization",       config_parse_unit_condition_string, CONDITION_VIRTUALIZATION,      offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 24 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Requires",                   config_parse_unit_deps,             UNIT_REQUIRES,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 904 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Swap, cgroup_context.ip_address_deny)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 260 "src/core/load-fragment-gperf.gperf"
+      {"Service.ConfigurationDirectoryMode",   config_parse_mode,                  0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].mode)},
+#line 567 "src/core/load-fragment-gperf.gperf"
+      {"Mount.User",                         config_parse_user_group_compat,     0,                             offsetof(Mount, exec_context.user)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 25 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Requisite",                  config_parse_unit_deps,             UNIT_REQUISITE,                0},
+#line 638 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ReadOnlyDirectories",          config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.read_only_paths)},
+#line 730 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SendSIGHUP",                   config_parse_bool,                  0,                             offsetof(Mount, kill_context.send_sighup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 869 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Swap, cgroup_context.startup_cpu_shares)},
+#line 257 "src/core/load-fragment-gperf.gperf"
+      {"Service.CacheDirectory",               config_parse_exec_directories,      0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_CACHE].paths)},
+      {(char*)0},
+#line 1021 "src/core/load-fragment-gperf.gperf"
+      {"Scope.Delegate",                     config_parse_delegate,              0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 246 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectSystem",                config_parse_protect_system,        0,                             offsetof(Service, exec_context.protect_system)},
+      {(char*)0},
+#line 105 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertACPower",              config_parse_unit_condition_string, CONDITION_AC_POWER,            offsetof(Unit, asserts)},
+#line 39 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RequiresOverridable",        config_parse_obsolete_unit_deps,    UNIT_REQUIRES,                 0},
+#line 831 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectControlGroups",         config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_control_groups)},
+#line 841 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Personality",                  config_parse_personality,           0,                             offsetof(Swap, exec_context.personality)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 928 "src/core/load-fragment-gperf.gperf"
+      {"Timer.Unit",                      config_parse_trigger_unit,          0,                             0},
+      {(char*)0}, {(char*)0},
+#line 435 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RestrictRealtime",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 35 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ReloadPropagatedFrom",       config_parse_unit_deps,             UNIT_RELOAD_PROPAGATED_FROM,   0},
+      {(char*)0}, {(char*)0},
+#line 345 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Accept",                   config_parse_bool,                  0,                             offsetof(Socket, accept)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 876 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+#line 261 "src/core/load-fragment-gperf.gperf"
+      {"Service.ConfigurationDirectory",       config_parse_exec_directories,      0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].paths)},
+      {(char*)0},
+#line 585 "src/core/load-fragment-gperf.gperf"
+      {"Mount.UnsetEnvironment",             config_parse_unset_environ,         0,                             offsetof(Mount, exec_context.unset_environment)},
+#line 415 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SyslogIdentifier",             config_parse_unit_string_printf,    0,                             offsetof(Socket, exec_context.syslog_identifier)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 553 "src/core/load-fragment-gperf.gperf"
+      {"Socket.WatchdogSignal",               config_parse_signal,                0,                             offsetof(Socket, kill_context.watchdog_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 332 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SocketProtocol",           config_parse_socket_protocol,       0,                             offsetof(Socket, socket_protocol)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 383 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RootDirectory",                config_parse_unit_path_printf,      true,                          offsetof(Socket, exec_context.root_directory)},
+#line 309 "src/core/load-fragment-gperf.gperf"
+      {"Service.Delegate",                     config_parse_delegate,              0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 384 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RootImage",                    config_parse_unit_path_printf,      true,                          offsetof(Socket, exec_context.root_image)},
+#line 357 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SendBuffer",               config_parse_iec_size,              0,                             offsetof(Socket, send_buffer)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 155 "src/core/load-fragment-gperf.gperf"
+      {"Service.User",                         config_parse_user_group_compat,     0,                             offsetof(Service, exec_context.user)},
+      {(char*)0},
+#line 250 "src/core/load-fragment-gperf.gperf"
+      {"Service.Personality",                  config_parse_personality,           0,                             offsetof(Service, exec_context.personality)},
+#line 862 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Slice",                       config_parse_unit_slice,            0,                             0},
+#line 385 "src/core/load-fragment-gperf.gperf"
+      {"Socket.User",                         config_parse_user_group_compat,     0,                             offsetof(Socket, exec_context.user)},
+      {(char*)0}, {(char*)0},
+#line 551 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RestartKillSignal",            config_parse_signal,                0,                             offsetof(Socket, kill_context.restart_kill_signal)},
+#line 839 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MountFlags",                   config_parse_exec_mount_flags,      0,                             offsetof(Swap, exec_context.mount_flags)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 925 "src/core/load-fragment-gperf.gperf"
+      {"Timer.RemainAfterElapse",         config_parse_bool,                  0,                             offsetof(Timer, remain_after_elapse)},
+      {(char*)0},
+#line 742 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TimeoutSec",                 config_parse_sec_fix_0,             0,                             offsetof(Swap, timeout_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 794 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryDenyWriteExecute",       config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 975 "src/core/load-fragment-gperf.gperf"
+      {"Slice.Delegate",                     config_parse_delegate,              0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 188 "src/core/load-fragment-gperf.gperf"
+      {"Service.SyslogLevelPrefix",            config_parse_bool,                  0,                             offsetof(Service, exec_context.syslog_level_prefix)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 128 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartLimitInterval",      config_parse_sec,                   0,                             offsetof(Unit, start_ratelimit.interval)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 983 "src/core/load-fragment-gperf.gperf"
+      {"Scope.Slice",                       config_parse_unit_slice,            0,                             0},
+      {(char*)0},
+#line 240 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectControlGroups",         config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_control_groups)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 849 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogsDirectoryMode",            config_parse_mode,                  0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_LOGS].mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 735 "src/core/load-fragment-gperf.gperf"
+      {"Mount.WatchdogSignal",               config_parse_signal,                0,                             offsetof(Mount, kill_context.watchdog_signal)},
+#line 1039 "src/core/load-fragment-gperf.gperf"
+      {"Install.WantedBy",                NULL,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 1040 "src/core/load-fragment-gperf.gperf"
+      {"Install.RequiredBy",              NULL,                               0,                             0},
+      {(char*)0},
+#line 572 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CoredumpFilter",               config_parse_exec_coredump_filter,  0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 431 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SystemCallArchitectures",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 823 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BindReadOnlyPaths",            config_parse_bind_paths,            0,                             offsetof(Swap, exec_context)},
+#line 430 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SystemCallFilter",            config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 1030 "src/core/load-fragment-gperf.gperf"
+      {"Scope.SendSIGHUP",                   config_parse_bool,                  0,                             offsetof(Scope, kill_context.send_sighup)},
+      {(char*)0},
+#line 432 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SystemCallErrorNumber",        config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 850 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogsDirectory",                config_parse_exec_directories,      0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_LOGS].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 867 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Swap, cgroup_context.startup_cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 664 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RuntimeDirectoryMode",         config_parse_mode,                  0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_RUNTIME].mode)},
+      {(char*)0},
+#line 508 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Socket, cgroup_context.startup_cpu_shares)},
+      {(char*)0},
+#line 663 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RuntimeDirectoryPreserve",     config_parse_runtime_preserve_mode, 0,                             offsetof(Mount, exec_context.runtime_directory_preserve_mode)},
+      {(char*)0},
+#line 45 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AllowIsolate",               config_parse_bool,                  0,                             offsetof(Unit, allow_isolate)},
+#line 506 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Socket, cgroup_context.startup_cpu_weight)},
+#line 613 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SystemCallArchitectures",      config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 109 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertNull",                 config_parse_unit_condition_null,   0,                             offsetof(Unit, asserts)},
+      {(char*)0},
+#line 612 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SystemCallFilter",            config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 1038 "src/core/load-fragment-gperf.gperf"
+      {"Install.Alias",                   NULL,                               0,                             0},
+      {(char*)0},
+#line 843 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RuntimeDirectoryMode",         config_parse_mode,                  0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_RUNTIME].mode)},
+#line 937 "src/core/load-fragment-gperf.gperf"
+      {"Slice.Slice",                       config_parse_unit_slice,            0,                             0},
+#line 614 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SystemCallErrorNumber",        config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 682 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SmackProcessLabel",           config_parse_exec_smack_process_label, 0,                          offsetof(Mount, exec_context)},
+#line 842 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RuntimeDirectoryPreserve",     config_parse_runtime_preserve_mode, 0,                             offsetof(Swap, exec_context.runtime_directory_preserve_mode)},
+#line 854 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectHostname",              config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_hostname)},
+#line 838 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectHome",                  config_parse_protect_home,          0,                             offsetof(Swap, exec_context.protect_home)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 486 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CacheDirectoryMode",           config_parse_mode,                  0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_CACHE].mode)},
+      {(char*)0},
+#line 1041 "src/core/load-fragment-gperf.gperf"
+      {"Install.Also",                    NULL,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 503 "src/core/load-fragment-gperf.gperf"
+      {"Socket.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 476 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectSystem",                config_parse_protect_system,        0,                             offsetof(Socket, exec_context.protect_system)},
+      {(char*)0},
+#line 665 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RuntimeDirectory",             config_parse_exec_directories,      0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_RUNTIME].paths)},
+#line 733 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RestartKillSignal",            config_parse_signal,                0,                             offsetof(Mount, kill_context.restart_kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 91 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathIsMountPoint",     config_parse_unit_condition_path,   CONDITION_PATH_IS_MOUNT_POINT, offsetof(Unit, asserts)},
+#line 907 "src/core/load-fragment-gperf.gperf"
+      {"Swap.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0},
+#line 244 "src/core/load-fragment-gperf.gperf"
+      {"Service.PrivateUsers",                 config_parse_bool,                  0,                             offsetof(Service, exec_context.private_users)},
+#line 92 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathIsReadWrite",      config_parse_unit_condition_path,   CONDITION_PATH_IS_READ_WRITE,  offsetof(Unit, asserts)},
+#line 821 "src/core/load-fragment-gperf.gperf"
+      {"Swap.InaccessiblePaths",            config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.inaccessible_paths)},
+      {(char*)0},
+#line 290 "src/core/load-fragment-gperf.gperf"
+      {"Service.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0},
+#line 844 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RuntimeDirectory",             config_parse_exec_directories,      0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_RUNTIME].paths)},
+      {(char*)0},
+#line 818 "src/core/load-fragment-gperf.gperf"
+      {"Swap.InaccessibleDirectories",      config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.inaccessible_paths)},
+      {(char*)0},
+#line 138 "src/core/load-fragment-gperf.gperf"
+      {"Service.GuessMainPID",            config_parse_bool,                  0,                             offsetof(Service, guess_main_pid)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 785 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SecureBits",                   config_parse_exec_secure_bits,      0,                             offsetof(Swap, exec_context.secure_bits)},
+#line 487 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CacheDirectory",               config_parse_exec_directories,      0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_CACHE].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 416 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SyslogFacility",               config_parse_log_facility,          0,                             offsetof(Socket, exec_context.syslog_priority)},
+#line 95 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertFileIsExecutable",     config_parse_unit_condition_path,   CONDITION_FILE_IS_EXECUTABLE,  offsetof(Unit, asserts)},
+      {(char*)0},
+#line 777 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SyslogFacility",               config_parse_log_facility,          0,                             offsetof(Swap, exec_context.syslog_priority)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 86 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionNull",              config_parse_unit_condition_null,   0,                             offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 810 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitLOCKS",                   config_parse_rlimit,                RLIMIT_LOCKS,                  offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 900 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Delegate",                     config_parse_delegate,              0,                             offsetof(Swap, cgroup_context)},
+#line 739 "src/core/load-fragment-gperf.gperf"
+      {"Swap.What",                       config_parse_unit_path_printf,      0,                             offsetof(Swap, parameters_fragment.what)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 89 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathIsDirectory",      config_parse_unit_condition_path,   CONDITION_PATH_IS_DIRECTORY,   offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1035 "src/core/load-fragment-gperf.gperf"
+      {"Scope.WatchdogSignal",               config_parse_signal,                0,                             offsetof(Scope, kill_context.watchdog_signal)},
+#line 533 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Socket, cgroup_context.startup_blockio_weight)},
+      {(char*)0},
+#line 247 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectHome",                  config_parse_protect_home,          0,                             offsetof(Service, exec_context.protect_home)},
+      {(char*)0}, {(char*)0},
+#line 157 "src/core/load-fragment-gperf.gperf"
+      {"Service.SupplementaryGroups",          config_parse_user_group_strv_compat, 0,                            offsetof(Service, exec_context.supplementary_groups)},
+#line 263 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectHostname",              config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_hostname)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 196 "src/core/load-fragment-gperf.gperf"
+      {"Service.AmbientCapabilities",          config_parse_capability_set,        0,                             offsetof(Service, exec_context.capability_ambient_set)},
+      {(char*)0},
+#line 878 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+#line 87 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathExists",           config_parse_unit_condition_path,   CONDITION_PATH_EXISTS,         offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 410 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StandardInputData",            config_parse_exec_input_data,       0,                             offsetof(Socket, exec_context)},
+#line 406 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StandardInput",                config_parse_exec_input,            0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 318 "src/core/load-fragment-gperf.gperf"
+      {"Service.SendSIGHUP",                   config_parse_bool,                  0,                             offsetof(Service, kill_context.send_sighup)},
+#line 409 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StandardInputText",            config_parse_exec_input_text,       0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 294 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Service, cgroup_context.startup_io_weight)},
+#line 903 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Swap, cgroup_context.ip_address_allow)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 497 "src/core/load-fragment-gperf.gperf"
+      {"Socket.UtmpMode",                     config_parse_exec_utmp_mode,        0,                             offsetof(Socket, exec_context.utmp_mode)},
+#line 554 "src/core/load-fragment-gperf.gperf"
+      {"Mount.What",                      config_parse_unit_string_printf,    0,                             offsetof(Mount, parameters_fragment.what)},
+      {(char*)0},
+#line 252 "src/core/load-fragment-gperf.gperf"
+      {"Service.RuntimeDirectoryMode",         config_parse_mode,                  0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_RUNTIME].mode)},
+#line 460 "src/core/load-fragment-gperf.gperf"
+      {"Socket.InaccessiblePaths",            config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.inaccessible_paths)},
+      {(char*)0}, {(char*)0},
+#line 251 "src/core/load-fragment-gperf.gperf"
+      {"Service.RuntimeDirectoryPreserve",     config_parse_runtime_preserve_mode, 0,                             offsetof(Service, exec_context.runtime_directory_preserve_mode)},
+#line 61 "src/core/load-fragment-gperf.gperf"
+      {"Unit.FailureActionExitStatus",    config_parse_exit_status,           0,                             offsetof(Unit, failure_action_exit_status)},
+      {(char*)0},
+#line 457 "src/core/load-fragment-gperf.gperf"
+      {"Socket.InaccessibleDirectories",      config_parse_namespace_path_strv,   0,                             offsetof(Socket, exec_context.inaccessible_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 496 "src/core/load-fragment-gperf.gperf"
+      {"Socket.UtmpIdentifier",               config_parse_unit_string_printf,    0,                             offsetof(Socket, exec_context.utmp_id)},
+#line 163 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUSchedulingPolicy",          config_parse_exec_cpu_sched_policy, 0,                             offsetof(Service, exec_context)},
+#line 59 "src/core/load-fragment-gperf.gperf"
+      {"Unit.FailureAction",              config_parse_emergency_action,      0,                             offsetof(Unit, failure_action)},
+#line 164 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUSchedulingPriority",        config_parse_exec_cpu_sched_prio,   0,                             offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 555 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Where",                     config_parse_unit_path_printf,      0,                             offsetof(Mount, where)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 490 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ConfigurationDirectoryMode",   config_parse_mode,                  0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].mode)},
+      {(char*)0},
+#line 885 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Swap, cgroup_context.startup_io_weight)},
+      {(char*)0}, {(char*)0},
+#line 502 "src/core/load-fragment-gperf.gperf"
+      {"Socket.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 909 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SendSIGHUP",                   config_parse_bool,                  0,                             offsetof(Swap, kill_context.send_sighup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 253 "src/core/load-fragment-gperf.gperf"
+      {"Service.RuntimeDirectory",             config_parse_exec_directories,      0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_RUNTIME].paths)},
+      {(char*)0},
+#line 369 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReusePort",                config_parse_bool,                  0,                             offsetof(Socket, reuse_port)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 1033 "src/core/load-fragment-gperf.gperf"
+      {"Scope.RestartKillSignal",            config_parse_signal,                0,                             offsetof(Scope, kill_context.restart_kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 22 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Documentation",              config_parse_documentation,         0,                             offsetof(Unit, documentation)},
+#line 685 "src/core/load-fragment-gperf.gperf"
+      {"Mount.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 408 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StandardError",                config_parse_exec_output,           0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 491 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ConfigurationDirectory",       config_parse_exec_directories,      0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 62 "src/core/load-fragment-gperf.gperf"
+      {"Unit.SuccessActionExitStatus",    config_parse_exit_status,           0,                             offsetof(Unit, success_action_exit_status)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 500 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SmackProcessLabel",           config_parse_exec_smack_process_label, 0,                          offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 60 "src/core/load-fragment-gperf.gperf"
+      {"Unit.SuccessAction",              config_parse_emergency_action,      0,                             offsetof(Unit, success_action)},
+      {(char*)0},
+#line 853 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TimeoutCleanSec",              config_parse_sec,                   0,                             offsetof(Swap, exec_context.timeout_clean_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 41 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RequiresMountsFor",          config_parse_unit_requires_mounts_for, 0,                          0},
+      {(char*)0}, {(char*)0},
+#line 911 "src/core/load-fragment-gperf.gperf"
+      {"Swap.KillSignal",                   config_parse_signal,                0,                             offsetof(Swap, kill_context.kill_signal)},
+#line 797 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RestrictSUIDSGID",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 407 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StandardOutput",               config_parse_exec_output,           0,                             offsetof(Socket, exec_context)},
+#line 248 "src/core/load-fragment-gperf.gperf"
+      {"Service.MountFlags",                   config_parse_exec_mount_flags,      0,                             offsetof(Service, exec_context.mount_flags)},
+#line 272 "src/core/load-fragment-gperf.gperf"
+      {"Service.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Service, cgroup_context)},
+#line 913 "src/core/load-fragment-gperf.gperf"
+      {"Swap.FinalKillSignal",              config_parse_signal,                0,                             offsetof(Swap, kill_context.final_kill_signal)},
+#line 765 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DynamicUser",                  config_parse_bool,                  true,                          offsetof(Swap, exec_context.dynamic_user)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 763 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PassEnvironment",              config_parse_pass_environ,          0,                             offsetof(Swap, exec_context.pass_environment)},
+#line 736 "src/core/load-fragment-gperf.gperf"
+      {"Automount.Where",                 config_parse_unit_path_printf,      0,                             offsetof(Automount, where)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 808 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitNPROC",                   config_parse_rlimit,                RLIMIT_NPROC,                  offsetof(Swap, exec_context.rlimit)},
+      {(char*)0},
+#line 618 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RestrictSUIDSGID",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 174 "src/core/load-fragment-gperf.gperf"
+      {"Service.DynamicUser",                  config_parse_bool,                  true,                          offsetof(Service, exec_context.dynamic_user)},
+#line 242 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogNamespace",                 config_parse_log_namespace,         0,                             offsetof(Service, exec_context)},
+#line 778 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SyslogLevel",                  config_parse_log_level,             0,                             offsetof(Swap, exec_context.syslog_priority)},
+      {(char*)0},
+#line 737 "src/core/load-fragment-gperf.gperf"
+      {"Automount.DirectoryMode",         config_parse_mode,                  0,                             offsetof(Automount, directory_mode)},
+#line 289 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+#line 111 "src/core/load-fragment-gperf.gperf"
+      {"Service.PIDFile",                 config_parse_pid_file,              0,                             offsetof(Service, pid_file)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 203 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryDenyWriteExecute",       config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 216 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitAS",                      config_parse_rlimit,                RLIMIT_AS,                     offsetof(Service, exec_context.rlimit)},
+      {(char*)0},
+#line 282 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0},
+#line 559 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DirectoryMode",             config_parse_mode,                  0,                             offsetof(Mount, directory_mode)},
+#line 230 "src/core/load-fragment-gperf.gperf"
+      {"Service.InaccessiblePaths",            config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.inaccessible_paths)},
+      {(char*)0},
+#line 103 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertCapability",           config_parse_unit_condition_string, CONDITION_CAPABILITY,          offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 330 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenMessageQueue",       config_parse_socket_listen,         SOCKET_MQUEUE,                 0},
+#line 227 "src/core/load-fragment-gperf.gperf"
+      {"Service.InaccessibleDirectories",      config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.inaccessible_paths)},
+      {(char*)0},
+#line 847 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CacheDirectoryMode",           config_parse_mode,                  0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_CACHE].mode)},
+#line 822 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BindPaths",                    config_parse_bind_paths,            0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 793 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SystemCallErrorNumber",        config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 214 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitRSS",                     config_parse_rlimit,                RLIMIT_RSS,                    offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 65 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathExistsGlob",    config_parse_unit_condition_path,   CONDITION_PATH_EXISTS_GLOB,    offsetof(Unit, conditions)},
+      {(char*)0}, {(char*)0},
+#line 482 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RuntimeDirectoryMode",         config_parse_mode,                  0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_RUNTIME].mode)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 481 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RuntimeDirectoryPreserve",     config_parse_runtime_preserve_mode, 0,                             offsetof(Socket, exec_context.runtime_directory_preserve_mode)},
+      {(char*)0}, {(char*)0},
+#line 691 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0},
+#line 279 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 689 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Mount, cgroup_context.cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 313 "src/core/load-fragment-gperf.gperf"
+      {"Service.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Service, cgroup_context.ip_address_deny)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 150 "src/core/load-fragment-gperf.gperf"
+      {"Service.USBFunctionStrings",      config_parse_unit_path_printf,      0,                             offsetof(Service, usb_function_strings)},
+      {(char*)0}, {(char*)0},
+#line 326 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenSequentialPacket",   config_parse_socket_listen,         SOCKET_SOCKET,                 0},
+#line 149 "src/core/load-fragment-gperf.gperf"
+      {"Service.USBFunctionDescriptors",  config_parse_unit_path_printf,      0,                             offsetof(Service, usb_function_descriptors)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 848 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CacheDirectory",               config_parse_exec_directories,      0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_CACHE].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 820 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ReadOnlyPaths",                config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.read_only_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 483 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RuntimeDirectory",             config_parse_exec_directories,      0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_RUNTIME].paths)},
+#line 985 "src/core/load-fragment-gperf.gperf"
+      {"Scope.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 931 "src/core/load-fragment-gperf.gperf"
+      {"Path.PathChanged",                config_parse_path_spec,             0,                             0},
+#line 172 "src/core/load-fragment-gperf.gperf"
+      {"Service.PassEnvironment",              config_parse_pass_environ,          0,                             offsetof(Service, exec_context.pass_environment)},
+      {(char*)0}, {(char*)0},
+#line 817 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ReadOnlyDirectories",          config_parse_namespace_path_strv,   0,                             offsetof(Swap, exec_context.read_only_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 754 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUSchedulingPolicy",          config_parse_exec_cpu_sched_policy, 0,                             offsetof(Swap, exec_context)},
+#line 258 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogsDirectoryMode",            config_parse_mode,                  0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_LOGS].mode)},
+#line 755 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUSchedulingPriority",        config_parse_exec_cpu_sched_prio,   0,                             offsetof(Swap, exec_context)},
+#line 597 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SyslogIdentifier",             config_parse_unit_string_printf,    0,                             offsetof(Mount, exec_context.syslog_identifier)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 918 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnStartupSec",              config_parse_timer,                 TIMER_STARTUP,                 0},
+#line 877 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+#line 507 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Socket, cgroup_context.cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 790 "src/core/load-fragment-gperf.gperf"
+      {"Swap.KeyringMode",                  config_parse_exec_keyring_mode,     0,                             offsetof(Swap, exec_context.keyring_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 509 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 245 "src/core/load-fragment-gperf.gperf"
+      {"Service.PrivateMounts",                config_parse_bool,                  0,                             offsetof(Service, exec_context.private_mounts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 285 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 505 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Socket, cgroup_context.cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 259 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogsDirectory",                config_parse_exec_directories,      0,                             offsetof(Service, exec_context.directories[EXEC_DIRECTORY_LOGS].paths)},
+#line 312 "src/core/load-fragment-gperf.gperf"
+      {"Service.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Service, cgroup_context.ip_address_allow)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 543 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Socket, cgroup_context.ip_address_deny)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 779 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SyslogLevelPrefix",            config_parse_bool,                  0,                             offsetof(Swap, exec_context.syslog_level_prefix)},
+      {(char*)0},
+#line 939 "src/core/load-fragment-gperf.gperf"
+      {"Slice.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 863 "src/core/load-fragment-gperf.gperf"
+      {"Swap.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Swap, cgroup_context)},
+#line 684 "src/core/load-fragment-gperf.gperf"
+      {"Mount.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0},
+#line 725 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Mount, cgroup_context.ip_address_deny)},
+#line 563 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ReadWriteOnly",             config_parse_bool,                  0,                             offsetof(Mount, read_write_only)},
+#line 55 "src/core/load-fragment-gperf.gperf"
+      {"Unit.StartLimitIntervalSec",      config_parse_sec,                   0,                             offsetof(Unit, start_ratelimit.interval)},
+#line 902 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.ip_accounting)},
+#line 170 "src/core/load-fragment-gperf.gperf"
+      {"Service.Environment",                  config_parse_environ,               0,                             offsetof(Service, exec_context.environment)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 171 "src/core/load-fragment-gperf.gperf"
+      {"Service.EnvironmentFile",              config_parse_unit_env_file,         0,                             offsetof(Service, exec_context.environment_files)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 628 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitAS",                      config_parse_rlimit,                RLIMIT_AS,                     offsetof(Mount, exec_context.rlimit)},
+#line 626 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitRSS",                     config_parse_rlimit,                RLIMIT_RSS,                    offsetof(Mount, exec_context.rlimit)},
+#line 884 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Swap, cgroup_context.io_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 991 "src/core/load-fragment-gperf.gperf"
+      {"Scope.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 561 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LazyUnmount",               config_parse_bool,                  0,                             offsetof(Mount, lazy_unmount)},
+#line 208 "src/core/load-fragment-gperf.gperf"
+      {"Service.LockPersonality",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 989 "src/core/load-fragment-gperf.gperf"
+      {"Scope.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Scope, cgroup_context.cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 578 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUAffinity",                  config_parse_exec_cpu_affinity,     0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 229 "src/core/load-fragment-gperf.gperf"
+      {"Service.ReadOnlyPaths",                config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.read_only_paths)},
+      {(char*)0}, {(char*)0},
+#line 280 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Service, cgroup_context.cpu_quota_period_usec)},
+      {(char*)0},
+#line 346 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Writable",                 config_parse_bool,                  0,                             offsetof(Socket, writable)},
+#line 226 "src/core/load-fragment-gperf.gperf"
+      {"Service.ReadOnlyDirectories",          config_parse_namespace_path_strv,   0,                             offsetof(Service, exec_context.read_only_paths)},
+      {(char*)0},
+#line 63 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RebootArgument",             config_parse_unit_string_printf,    0,                             offsetof(Unit, reboot_arg)},
+      {(char*)0}, {(char*)0},
+#line 692 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Mount, cgroup_context.cpu_quota_period_usec)},
+      {(char*)0}, {(char*)0},
+#line 542 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Socket, cgroup_context.ip_address_allow)},
+#line 438 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LockPersonality",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 870 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 380 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SmackLabelIPOut",          config_parse_unit_string_printf,    0,                             offsetof(Socket, smack_ip_out)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 325 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenDatagram",           config_parse_socket_listen,         SOCKET_SOCKET,                 0},
+      {(char*)0},
+#line 56 "src/core/load-fragment-gperf.gperf"
+      {"Unit.StartLimitInterval",         config_parse_sec,                   0,                             offsetof(Unit, start_ratelimit.interval)},
+#line 324 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenStream",             config_parse_socket_listen,         SOCKET_SOCKET,                 0},
+      {(char*)0},
+#line 379 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SmackLabelIPIn",           config_parse_unit_string_printf,    0,                             offsetof(Socket, smack_ip_in)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 926 "src/core/load-fragment-gperf.gperf"
+      {"Timer.AccuracySec",               config_parse_sec,                   0,                             offsetof(Timer, accuracy_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 745 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RootImage",                    config_parse_unit_path_printf,      true,                          offsetof(Swap, exec_context.root_image)},
+#line 329 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenSpecial",            config_parse_socket_listen,         SOCKET_SPECIAL,                0},
+      {(char*)0},
+#line 915 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnCalendar",                config_parse_timer,                 TIMER_CALENDAR,                0},
+#line 220 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitSIGPENDING",              config_parse_rlimit,                RLIMIT_SIGPENDING,             offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 405 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RemoveIPC",                    config_parse_bool,                  0,                             offsetof(Socket, exec_context.remove_ipc)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 945 "src/core/load-fragment-gperf.gperf"
+      {"Slice.CPUQuota",                     config_parse_cpu_quota,             0,                             offsetof(Slice, cgroup_context)},
+#line 724 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Mount, cgroup_context.ip_address_allow)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 943 "src/core/load-fragment-gperf.gperf"
+      {"Slice.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Slice, cgroup_context.cpu_shares)},
+      {(char*)0},
+#line 277 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Service, cgroup_context.cpu_shares)},
+#line 615 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryDenyWriteExecute",       config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 512 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+#line 275 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Service, cgroup_context.cpu_weight)},
+#line 670 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogsDirectoryMode",            config_parse_mode,                  0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_LOGS].mode)},
+#line 433 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryDenyWriteExecute",       config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 268 "src/core/load-fragment-gperf.gperf"
+      {"Service.SELinuxContext",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 23 "src/core/load-fragment-gperf.gperf"
+      {"Unit.SourcePath",                 config_parse_unit_path_printf,      0,                             offsetof(Unit, source_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 984 "src/core/load-fragment-gperf.gperf"
+      {"Scope.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 1025 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Scope, cgroup_context.ip_address_deny)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 337 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ExecStartPost",            config_parse_exec,                  SOCKET_EXEC_START_POST,        offsetof(Socket, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 336 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ExecStartPre",             config_parse_exec,                  SOCKET_EXEC_START_PRE,         offsetof(Socket, exec_command)},
+#line 671 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogsDirectory",                config_parse_exec_directories,      0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_LOGS].paths)},
+      {(char*)0}, {(char*)0},
+#line 266 "src/core/load-fragment-gperf.gperf"
+      {"Service.UtmpIdentifier",               config_parse_unit_string_printf,    0,                             offsetof(Service, exec_context.utmp_id)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 114 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecStart",               config_parse_exec,                  SERVICE_EXEC_START,            offsetof(Service, exec_command)},
+      {(char*)0}, {(char*)0},
+#line 446 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitAS",                      config_parse_rlimit,                RLIMIT_AS,                     offsetof(Socket, exec_context.rlimit)},
+#line 115 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecStartPost",           config_parse_exec,                  SERVICE_EXEC_START_POST,       offsetof(Service, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 113 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecStartPre",            config_parse_exec,                  SERVICE_EXEC_START_PRE,        offsetof(Service, exec_command)},
+      {(char*)0},
+#line 840 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MountAPIVFS",                  config_parse_bool,                  0,                             offsetof(Swap, exec_context.mount_apivfs)},
+      {(char*)0}, {(char*)0},
+#line 141 "src/core/load-fragment-gperf.gperf"
+      {"Service.SuccessExitStatus",       config_parse_set_status,            0,                             offsetof(Service, success_status)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 219 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitLOCKS",                   config_parse_rlimit,                RLIMIT_LOCKS,                  offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 575 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUSchedulingPolicy",          config_parse_exec_cpu_sched_policy, 0,                             offsetof(Mount, exec_context)},
+      {(char*)0},
+#line 576 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUSchedulingPriority",        config_parse_exec_cpu_sched_prio,   0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 623 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitDATA",                    config_parse_rlimit,                RLIMIT_DATA,                   offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 421 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogRateLimitBurst",            config_parse_unsigned,              0,                             offsetof(Socket, exec_context.log_ratelimit_burst)},
+      {(char*)0}, {(char*)0},
+#line 287 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+#line 992 "src/core/load-fragment-gperf.gperf"
+      {"Scope.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Scope, cgroup_context.cpu_quota_period_usec)},
+      {(char*)0}, {(char*)0},
+#line 193 "src/core/load-fragment-gperf.gperf"
+      {"Service.Capabilities",                 config_parse_warn_compat,           DISABLED_LEGACY,               offsetof(Service, exec_context)},
+#line 426 "src/core/load-fragment-gperf.gperf"
+      {"Socket.AmbientCapabilities",          config_parse_capability_set,        0,                             offsetof(Socket, exec_context.capability_ambient_set)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 872 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.memory_accounting)},
+      {(char*)0},
+#line 524 "src/core/load-fragment-gperf.gperf"
+      {"Socket.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Socket, cgroup_context.startup_io_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 192 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogExtraFields",               config_parse_log_extra_fields,      0,                             offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 195 "src/core/load-fragment-gperf.gperf"
+      {"Service.CapabilityBoundingSet",        config_parse_capability_set,        0,                             offsetof(Service, exec_context.capability_bounding_set)},
+      {(char*)0},
+#line 938 "src/core/load-fragment-gperf.gperf"
+      {"Slice.AllowedCPUs",                  config_parse_allowed_cpus,          0,                             offsetof(Slice, cgroup_context)},
+#line 800 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitCPU",                     config_parse_rlimit,                RLIMIT_CPU,                    offsetof(Swap, exec_context.rlimit)},
+#line 979 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IPAddressDeny",                config_parse_ip_address_access,     0,                             offsetof(Slice, cgroup_context.ip_address_deny)},
+#line 715 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Mount, cgroup_context.startup_blockio_weight)},
+#line 34 "src/core/load-fragment-gperf.gperf"
+      {"Unit.PropagateReloadTo",          config_parse_unit_deps,             UNIT_PROPAGATES_RELOAD_TO,     0},
+      {(char*)0}, {(char*)0},
+#line 668 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CacheDirectoryMode",           config_parse_mode,                  0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_CACHE].mode)},
+      {(char*)0}, {(char*)0},
+#line 154 "src/core/load-fragment-gperf.gperf"
+      {"Service.RootImage",                    config_parse_unit_path_printf,      true,                          offsetof(Service, exec_context.root_image)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 110 "src/core/load-fragment-gperf.gperf"
+      {"Unit.CollectMode",                config_parse_collect_mode,          0,                             offsetof(Unit, collect_mode)},
+      {(char*)0},
+#line 804 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitCORE",                    config_parse_rlimit,                RLIMIT_CORE,                   offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 871 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Swap, cgroup_context.cpu_quota_period_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 403 "src/core/load-fragment-gperf.gperf"
+      {"Socket.UnsetEnvironment",             config_parse_unset_environ,         0,                             offsetof(Socket, exec_context.unset_environment)},
+      {(char*)0},
+#line 1036 "src/core/load-fragment-gperf.gperf"
+      {"Scope.RuntimeMaxSec",             config_parse_sec,                   0,                             offsetof(Scope, runtime_max_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 901 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Swap, cgroup_context)},
+#line 1024 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Scope, cgroup_context.ip_address_allow)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 444 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitRSS",                     config_parse_rlimit,                RLIMIT_RSS,                    offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 84 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionGroup",             config_parse_unit_condition_string, CONDITION_GROUP,               offsetof(Unit, conditions)},
+#line 510 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Socket, cgroup_context.cpu_quota_period_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 929 "src/core/load-fragment-gperf.gperf"
+      {"Path.PathExists",                 config_parse_path_spec,             0,                             0},
+#line 669 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CacheDirectory",               config_parse_exec_directories,      0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_CACHE].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 494 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PAMName",                     config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0},
+#line 267 "src/core/load-fragment-gperf.gperf"
+      {"Service.UtmpMode",                     config_parse_exec_utmp_mode,        0,                             offsetof(Service, exec_context.utmp_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 273 "src/core/load-fragment-gperf.gperf"
+      {"Service.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0},
+#line 946 "src/core/load-fragment-gperf.gperf"
+      {"Slice.CPUQuotaPeriodSec",            config_parse_sec_def_infinity,      0,                             offsetof(Slice, cgroup_context.cpu_quota_period_usec)},
+#line 541 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.ip_accounting)},
+      {(char*)0}, {(char*)0},
+#line 599 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SyslogLevel",                  config_parse_log_level,             0,                             offsetof(Mount, exec_context.syslog_priority)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 310 "src/core/load-fragment-gperf.gperf"
+      {"Service.DisableControllers",           config_parse_disable_controllers,   0,                             offsetof(Service, cgroup_context)},
+      {(char*)0},
+#line 868 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUShares",                    config_parse_cpu_shares,            0,                             offsetof(Swap, cgroup_context.cpu_shares)},
+      {(char*)0}, {(char*)0},
+#line 378 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SmackLabel",              config_parse_unit_string_printf,    0,                             offsetof(Socket, smack)},
+#line 339 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ExecStopPost",             config_parse_exec,                  SOCKET_EXEC_STOP_POST,         offsetof(Socket, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 338 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ExecStopPre",              config_parse_exec,                  SOCKET_EXEC_STOP_PRE,          offsetof(Socket, exec_command)},
+      {(char*)0}, {(char*)0},
+#line 127 "src/core/load-fragment-gperf.gperf"
+      {"Service.WatchdogSec",             config_parse_sec,                   0,                             offsetof(Service, watchdog_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 283 "src/core/load-fragment-gperf.gperf"
+      {"Service.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 519 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 548 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SendSIGHUP",                   config_parse_bool,                  0,                             offsetof(Socket, kill_context.send_sighup)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 741 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Options",                    config_parse_unit_string_printf,    0,                             offsetof(Swap, parameters_fragment.options)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 281 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Service, cgroup_context.memory_accounting)},
+#line 978 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IPAddressAllow",               config_parse_ip_address_access,     0,                             offsetof(Slice, cgroup_context.ip_address_allow)},
+#line 31 "src/core/load-fragment-gperf.gperf"
+      {"Unit.After",                      config_parse_unit_deps,             UNIT_AFTER,                    0},
+      {(char*)0},
+#line 479 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MountAPIVFS",                  config_parse_bool,                  0,                             offsetof(Socket, exec_context.mount_apivfs)},
+#line 686 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.cpu_accounting)},
+      {(char*)0},
+#line 441 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitDATA",                    config_parse_rlimit,                RLIMIT_DATA,                   offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 288 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+#line 30 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Before",                     config_parse_unit_deps,             UNIT_BEFORE,                   0},
+#line 910 "src/core/load-fragment-gperf.gperf"
+      {"Swap.KillMode",                     config_parse_kill_mode,             0,                             offsetof(Swap, kill_context.kill_mode)},
+      {(char*)0},
+#line 311 "src/core/load-fragment-gperf.gperf"
+      {"Service.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Service, cgroup_context.ip_accounting)},
+#line 515 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+#line 450 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitSIGPENDING",              config_parse_rlimit,                RLIMIT_SIGPENDING,             offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 771 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StandardInputData",            config_parse_exec_input_data,       0,                             offsetof(Swap, exec_context)},
+#line 767 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StandardInput",                config_parse_exec_input,            0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 587 "src/core/load-fragment-gperf.gperf"
+      {"Mount.RemoveIPC",                    config_parse_bool,                  0,                             offsetof(Mount, exec_context.remove_ipc)},
+#line 770 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StandardInputText",            config_parse_exec_input_text,       0,                             offsetof(Swap, exec_context)},
+      {(char*)0},
+#line 217 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitNPROC",                   config_parse_rlimit,                RLIMIT_NPROC,                  offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 116 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecReload",              config_parse_exec,                  SERVICE_EXEC_RELOAD,           offsetof(Service, exec_command)},
+      {(char*)0},
+#line 488 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogsDirectoryMode",            config_parse_mode,                  0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_LOGS].mode)},
+#line 420 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogRateLimitIntervalSec",      config_parse_sec,                   0,                             offsetof(Socket, exec_context.log_ratelimit_interval_usec)},
+#line 347 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MaxConnections",           config_parse_unsigned,              0,                             offsetof(Socket, max_connections)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 932 "src/core/load-fragment-gperf.gperf"
+      {"Path.PathModified",               config_parse_path_spec,             0,                             0},
+      {(char*)0}, {(char*)0},
+#line 1015 "src/core/load-fragment-gperf.gperf"
+      {"Scope.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Scope, cgroup_context.startup_blockio_weight)},
+#line 706 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Mount, cgroup_context.startup_io_weight)},
+      {(char*)0},
+#line 813 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitNICE",                    config_parse_rlimit,                RLIMIT_NICE,                   offsetof(Swap, exec_context.rlimit)},
+#line 643 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BindPaths",                    config_parse_bind_paths,            0,                             offsetof(Mount, exec_context)},
+      {(char*)0},
+#line 687 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Mount, cgroup_context.cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 348 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MaxConnectionsPerSource",  config_parse_unsigned,              0,                             offsetof(Socket, max_connections_per_source)},
+#line 660 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MountFlags",                   config_parse_exec_mount_flags,      0,                             offsetof(Mount, exec_context.mount_flags)},
+      {(char*)0},
+#line 323 "src/core/load-fragment-gperf.gperf"
+      {"Service.WatchdogSignal",               config_parse_signal,                0,                             offsetof(Service, kill_context.watchdog_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 269 "src/core/load-fragment-gperf.gperf"
+      {"Service.AppArmorProfile",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 386 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Group",                        config_parse_user_group_compat,     0,                             offsetof(Socket, exec_context.group)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 274 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Service, cgroup_context.cpu_accounting)},
+#line 644 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BindReadOnlyPaths",            config_parse_bind_paths,            0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 489 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogsDirectory",                config_parse_exec_directories,      0,                             offsetof(Socket, exec_context.directories[EXEC_DIRECTORY_LOGS].paths)},
+      {(char*)0}, {(char*)0},
+#line 1042 "src/core/load-fragment-gperf.gperf"
+      {"Install.DefaultInstance",         NULL,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "src/core/load-fragment-gperf.gperf"
+      {"Unit.PropagatesReloadTo",         config_parse_unit_deps,             UNIT_PROPAGATES_RELOAD_TO,     0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 42 "src/core/load-fragment-gperf.gperf"
+      {"Unit.StopWhenUnneeded",           config_parse_bool,                  0,                             offsetof(Unit, stop_when_unneeded)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 284 "src/core/load-fragment-gperf.gperf"
+      {"Service.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 782 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogRateLimitBurst",            config_parse_unsigned,              0,                             offsetof(Swap, exec_context.log_ratelimit_burst)},
+      {(char*)0}, {(char*)0},
+#line 461 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BindPaths",                    config_parse_bind_paths,            0,                             offsetof(Socket, exec_context)},
+      {(char*)0},
+#line 693 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.memory_accounting)},
+      {(char*)0},
+#line 361 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PipeSize",                 config_parse_iec_size,              0,                             offsetof(Socket, pipe_size)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 36 "src/core/load-fragment-gperf.gperf"
+      {"Unit.PropagateReloadFrom",        config_parse_unit_deps,             UNIT_RELOAD_PROPAGATED_FROM,   0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 303 "src/core/load-fragment-gperf.gperf"
+      {"Service.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Service, cgroup_context.startup_blockio_weight)},
+#line 600 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SyslogLevelPrefix",            config_parse_bool,                  0,                             offsetof(Mount, exec_context.syslog_level_prefix)},
+      {(char*)0},
+#line 866 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Swap, cgroup_context.cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 969 "src/core/load-fragment-gperf.gperf"
+      {"Slice.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Slice, cgroup_context.startup_blockio_weight)},
+#line 315 "src/core/load-fragment-gperf.gperf"
+      {"Service.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Service, cgroup_context.ip_filters_egress)},
+      {(char*)0},
+#line 286 "src/core/load-fragment-gperf.gperf"
+      {"Service.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 342 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SocketGroup",              config_parse_user_group_compat,     0,                             offsetof(Socket, group)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 189 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogLevelMax",                  config_parse_log_level,             0,                             offsetof(Service, exec_context.log_level_max)},
+#line 28 "src/core/load-fragment-gperf.gperf"
+      {"Unit.BindTo",                     config_parse_unit_deps,             UNIT_BINDS_TO,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 504 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.cpu_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 518 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0},
+#line 293 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Service, cgroup_context.io_weight)},
+#line 864 "src/core/load-fragment-gperf.gperf"
+      {"Swap.AllowedMemoryNodes",           config_parse_allowed_mems,          0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 986 "src/core/load-fragment-gperf.gperf"
+      {"Scope.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.cpu_accounting)},
+#line 787 "src/core/load-fragment-gperf.gperf"
+      {"Swap.AmbientCapabilities",          config_parse_capability_set,        0,                             offsetof(Swap, exec_context.capability_ambient_set)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 919 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnUnitActiveSec",           config_parse_timer,                 TIMER_UNIT_ACTIVE,             0},
+      {(char*)0},
+#line 249 "src/core/load-fragment-gperf.gperf"
+      {"Service.MountAPIVFS",                  config_parse_bool,                  0,                             offsetof(Service, exec_context.mount_apivfs)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 112 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecCondition",           config_parse_exec,                  SERVICE_EXEC_CONDITION,        offsetof(Service, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1006 "src/core/load-fragment-gperf.gperf"
+      {"Scope.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Scope, cgroup_context.startup_io_weight)},
+#line 851 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ConfigurationDirectoryMode",   config_parse_mode,                  0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].mode)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 987 "src/core/load-fragment-gperf.gperf"
+      {"Scope.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Scope, cgroup_context.cpu_weight)},
+      {(char*)0},
+#line 603 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogRateLimitBurst",            config_parse_unsigned,              0,                             offsetof(Mount, exec_context.log_ratelimit_burst)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 133 "src/core/load-fragment-gperf.gperf"
+      {"Service.Type",                    config_parse_service_type,          0,                             offsetof(Service, type)},
+      {(char*)0},
+#line 377 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TriggerLimitBurst",        config_parse_unsigned,              0,                             offsetof(Socket, trigger_limit.burst)},
+      {(char*)0},
+#line 88 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathExistsGlob",       config_parse_unit_condition_path,   CONDITION_PATH_EXISTS_GLOB,    offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 783 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogExtraFields",               config_parse_log_extra_fields,      0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 125 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutStopFailureMode",  config_parse_service_timeout_failure_mode,  0,                     offsetof(Service, timeout_stop_failure_mode)},
+#line 124 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutStartFailureMode", config_parse_service_timeout_failure_mode,  0,                     offsetof(Service, timeout_start_failure_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 887 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 940 "src/core/load-fragment-gperf.gperf"
+      {"Slice.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.cpu_accounting)},
+#line 370 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MessageQueueMaxMessages",  config_parse_long,                  0,                             offsetof(Socket, mq_maxmsg)},
+      {(char*)0}, {(char*)0},
+#line 852 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ConfigurationDirectory",       config_parse_exec_directories,      0,                             offsetof(Swap, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 371 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MessageQueueMessageSize",  config_parse_long,                  0,                             offsetof(Socket, mq_msgsize)},
+#line 126 "src/core/load-fragment-gperf.gperf"
+      {"Service.RuntimeMaxSec",           config_parse_sec,                   0,                             offsetof(Service, runtime_max_usec)},
+      {(char*)0}, {(char*)0},
+#line 57 "src/core/load-fragment-gperf.gperf"
+      {"Unit.StartLimitBurst",            config_parse_unsigned,              0,                             offsetof(Unit, start_ratelimit.burst)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 29 "src/core/load-fragment-gperf.gperf"
+      {"Unit.Conflicts",                  config_parse_unit_deps,             UNIT_CONFLICTS,                0},
+      {(char*)0},
+#line 993 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.memory_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 751 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CoredumpFilter",               config_parse_exec_coredump_filter,  0,                             offsetof(Swap, exec_context)},
+#line 573 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOSchedulingClass",            config_parse_exec_io_class,         0,                             offsetof(Mount, exec_context)},
+#line 364 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Broadcast",                config_parse_bool,                  0,                             offsetof(Socket, broadcast)},
+#line 67 "src/core/load-fragment-gperf.gperf"
+      {"Unit.ConditionPathIsSymbolicLink",config_parse_unit_condition_path,   CONDITION_PATH_IS_SYMBOLIC_LINK,offsetof(Unit, conditions)},
+      {(char*)0},
+#line 781 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogRateLimitIntervalSec",      config_parse_sec,                   0,                             offsetof(Swap, exec_context.log_ratelimit_interval_usec)},
+#line 621 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitCPU",                     config_parse_rlimit,                RLIMIT_CPU,                    offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 511 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.memory_accounting)},
+      {(char*)0}, {(char*)0},
+#line 960 "src/core/load-fragment-gperf.gperf"
+      {"Slice.StartupIOWeight",              config_parse_cg_weight,             0,                             offsetof(Slice, cgroup_context.startup_io_weight)},
+      {(char*)0},
+#line 423 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Capabilities",                 config_parse_warn_compat,           DISABLED_LEGACY,               offsetof(Socket, exec_context)},
+#line 738 "src/core/load-fragment-gperf.gperf"
+      {"Automount.TimeoutIdleSec",        config_parse_sec_fix_0,             0,                             offsetof(Automount, timeout_idle_usec)},
+      {(char*)0},
+#line 941 "src/core/load-fragment-gperf.gperf"
+      {"Slice.CPUWeight",                    config_parse_cg_weight,             0,                             offsetof(Slice, cgroup_context.cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 425 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CapabilityBoundingSet",        config_parse_capability_set,        0,                             offsetof(Socket, exec_context.capability_bounding_set)},
+#line 879 "src/core/load-fragment-gperf.gperf"
+      {"Swap.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+#line 137 "src/core/load-fragment-gperf.gperf"
+      {"Service.RemainAfterExit",         config_parse_bool,                  0,                             offsetof(Service, remain_after_exit)},
+#line 758 "src/core/load-fragment-gperf.gperf"
+      {"Swap.NUMAPolicy",                   config_parse_numa_policy,           0,                             offsetof(Swap, exec_context.numa_policy.type)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 642 "src/core/load-fragment-gperf.gperf"
+      {"Mount.InaccessiblePaths",            config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.inaccessible_paths)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 639 "src/core/load-fragment-gperf.gperf"
+      {"Mount.InaccessibleDirectories",      config_parse_namespace_path_strv,   0,                             offsetof(Mount, exec_context.inaccessible_paths)},
+#line 160 "src/core/load-fragment-gperf.gperf"
+      {"Service.CoredumpFilter",               config_parse_exec_coredump_filter,  0,                             offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 894 "src/core/load-fragment-gperf.gperf"
+      {"Swap.StartupBlockIOWeight",         config_parse_blockio_weight,        0,                             offsetof(Swap, cgroup_context.startup_blockio_weight)},
+      {(char*)0},
+#line 707 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 883 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.io_accounting)},
+#line 232 "src/core/load-fragment-gperf.gperf"
+      {"Service.BindReadOnlyPaths",            config_parse_bind_paths,            0,                             offsetof(Service, exec_context)},
+#line 191 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogRateLimitBurst",            config_parse_unsigned,              0,                             offsetof(Service, exec_context.log_ratelimit_burst)},
+      {(char*)0},
+#line 935 "src/core/load-fragment-gperf.gperf"
+      {"Path.MakeDirectory",              config_parse_bool,                  0,                             offsetof(Path, make_directory)},
+#line 695 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 574 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOSchedulingPriority",         config_parse_exec_io_priority,      0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 464 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PrivateTmp",                   config_parse_bool,                  0,                             offsetof(Socket, exec_context.private_tmp)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 947 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryAccounting",             config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.memory_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 690 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Mount, cgroup_context.startup_cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 688 "src/core/load-fragment-gperf.gperf"
+      {"Mount.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Mount, cgroup_context.startup_cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 197 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimerSlackNSec",               config_parse_nsec,                  0,                             offsetof(Service, exec_context.timer_slack_nsec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 651 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ProtectClock",                 config_parse_bool,                  0,                             offsetof(Mount, exec_context.protect_clock)},
+#line 865 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUAccounting",                config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.cpu_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 602 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogRateLimitIntervalSec",      config_parse_sec,                   0,                             offsetof(Mount, exec_context.log_ratelimit_interval_usec)},
+      {(char*)0}, {(char*)0},
+#line 120 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutSec",              config_parse_service_timeout,       0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 122 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutStopSec",          config_parse_sec_fix_0,             0,                             offsetof(Service, timeout_stop_usec)},
+#line 121 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutStartSec",         config_parse_service_timeout,       0,                             0},
+      {(char*)0}, {(char*)0},
+#line 387 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SupplementaryGroups",          config_parse_user_group_strv_compat, 0,                            offsetof(Socket, exec_context.supplementary_groups)},
+      {(char*)0}, {(char*)0},
+#line 372 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RemoveOnStop",             config_parse_bool,                  0,                             offsetof(Socket, remove_on_stop)},
+#line 376 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TriggerLimitIntervalSec",  config_parse_sec,                   0,                             offsetof(Socket, trigger_limit.interval)},
+#line 221 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitMSGQUEUE",                config_parse_rlimit,                RLIMIT_MSGQUEUE,               offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 801 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitFSIZE",                   config_parse_rlimit,                RLIMIT_FSIZE,                  offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 568 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Group",                        config_parse_user_group_compat,     0,                             offsetof(Mount, exec_context.group)},
+      {(char*)0}, {(char*)0},
+#line 525 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0},
+#line 391 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOSchedulingClass",            config_parse_exec_io_class,         0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 729 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SendSIGKILL",                 config_parse_bool,                  0,                             offsetof(Mount, kill_context.send_sigkill)},
+#line 43 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RefuseManualStart",          config_parse_bool,                  0,                             offsetof(Unit, refuse_manual_start)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 773 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TTYReset",                     config_parse_bool,                  0,                             offsetof(Swap, exec_context.tty_reset)},
+      {(char*)0},
+#line 513 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 233 "src/core/load-fragment-gperf.gperf"
+      {"Service.TemporaryFileSystem",          config_parse_temporary_filesystems, 0,                             offsetof(Service, exec_context)},
+#line 353 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DeferAcceptSec",           config_parse_sec,                   0,                             offsetof(Socket, defer_accept)},
+      {(char*)0},
+#line 159 "src/core/load-fragment-gperf.gperf"
+      {"Service.OOMScoreAdjust",               config_parse_exec_oom_score_adjust, 0,                             offsetof(Service, exec_context)},
+      {(char*)0},
+#line 209 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitCPU",                     config_parse_rlimit,                RLIMIT_CPU,                    offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 605 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Capabilities",                 config_parse_warn_compat,           DISABLED_LEGACY,               offsetof(Mount, exec_context)},
+#line 696 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0},
+#line 473 "src/core/load-fragment-gperf.gperf"
+      {"Socket.PrivateNetwork",               config_parse_bool,                  0,                             offsetof(Socket, exec_context.private_network)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 223 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitRTPRIO",                  config_parse_rlimit,                RLIMIT_RTPRIO,                 offsetof(Service, exec_context.rlimit)},
+#line 213 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitCORE",                    config_parse_rlimit,                RLIMIT_CORE,                   offsetof(Service, exec_context.rlimit)},
+      {(char*)0},
+#line 723 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.ip_accounting)},
+#line 914 "src/core/load-fragment-gperf.gperf"
+      {"Swap.WatchdogSignal",               config_parse_signal,                0,                             offsetof(Swap, kill_context.watchdog_signal)},
+#line 694 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 392 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOSchedulingPriority",         config_parse_exec_io_priority,      0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 1007 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 123 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutAbortSec",         config_parse_service_timeout_abort, 0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 712 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Mount, cgroup_context)},
+#line 701 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+#line 995 "src/core/load-fragment-gperf.gperf"
+      {"Scope.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 314 "src/core/load-fragment-gperf.gperf"
+      {"Service.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Service, cgroup_context.ip_filters_ingress)},
+#line 824 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TemporaryFileSystem",          config_parse_temporary_filesystems, 0,                             offsetof(Swap, exec_context)},
+      {(char*)0},
+#line 743 "src/core/load-fragment-gperf.gperf"
+      {"Swap.WorkingDirectory",            config_parse_working_directory,     0,                             offsetof(Swap, exec_context)},
+#line 629 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitNPROC",                   config_parse_rlimit,                RLIMIT_NPROC,                  offsetof(Mount, exec_context.rlimit)},
+#line 584 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PassEnvironment",              config_parse_pass_environ,          0,                             offsetof(Mount, exec_context.pass_environment)},
+      {(char*)0},
+#line 151 "src/core/load-fragment-gperf.gperf"
+      {"Service.OOMPolicy",               config_parse_oom_policy,            0,                             offsetof(Service, oom_policy)},
+      {(char*)0},
+#line 190 "src/core/load-fragment-gperf.gperf"
+      {"Service.LogRateLimitIntervalSec",      config_parse_sec,                   0,                             offsetof(Service, exec_context.log_ratelimit_interval_usec)},
+#line 764 "src/core/load-fragment-gperf.gperf"
+      {"Swap.UnsetEnvironment",             config_parse_unset_environ,         0,                             offsetof(Swap, exec_context.unset_environment)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 607 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CapabilityBoundingSet",        config_parse_capability_set,        0,                             offsetof(Mount, exec_context.capability_bounding_set)},
+#line 631 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitLOCKS",                   config_parse_rlimit,                RLIMIT_LOCKS,                  offsetof(Mount, exec_context.rlimit)},
+      {(char*)0},
+#line 144 "src/core/load-fragment-gperf.gperf"
+      {"Service.BusName",                 config_parse_bus_name,              0,                             offsetof(Service, bus_name)},
+#line 46 "src/core/load-fragment-gperf.gperf"
+      {"Unit.DefaultDependencies",        config_parse_bool,                  0,                             offsetof(Unit, default_dependencies)},
+#line 990 "src/core/load-fragment-gperf.gperf"
+      {"Scope.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Scope, cgroup_context.startup_cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 750 "src/core/load-fragment-gperf.gperf"
+      {"Swap.OOMScoreAdjust",               config_parse_exec_oom_score_adjust, 0,                             offsetof(Swap, exec_context)},
+#line 988 "src/core/load-fragment-gperf.gperf"
+      {"Scope.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Scope, cgroup_context.startup_cpu_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 656 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PrivateUsers",                 config_parse_bool,                  0,                             offsetof(Mount, exec_context.private_users)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 674 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TimeoutCleanSec",              config_parse_sec,                   0,                             offsetof(Mount, exec_context.timeout_clean_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 439 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitCPU",                     config_parse_rlimit,                RLIMIT_CPU,                    offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 296 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 514 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0},
+#line 961 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 32 "src/core/load-fragment-gperf.gperf"
+      {"Unit.OnFailure",                  config_parse_unit_deps,             UNIT_ON_FAILURE,               0},
+#line 604 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogExtraFields",               config_parse_log_extra_fields,      0,                             offsetof(Mount, exec_context)},
+      {(char*)0},
+#line 517 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 905 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Swap, cgroup_context.ip_filters_ingress)},
+#line 48 "src/core/load-fragment-gperf.gperf"
+      {"Unit.OnFailureIsolate",           config_parse_job_mode_isolate,      0,                             offsetof(Unit, on_failure_job_mode)},
+      {(char*)0}, {(char*)0},
+#line 949 "src/core/load-fragment-gperf.gperf"
+      {"Slice.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+#line 546 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0}, {(char*)0},
+#line 1029 "src/core/load-fragment-gperf.gperf"
+      {"Scope.SendSIGKILL",                 config_parse_bool,                  0,                             offsetof(Scope, kill_context.send_sigkill)},
+#line 677 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IgnoreSIGPIPE",                config_parse_bool,                  0,                             offsetof(Mount, exec_context.ignore_sigpipe)},
+      {(char*)0},
+#line 826 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PrivateDevices",               config_parse_bool,                  0,                             offsetof(Swap, exec_context.private_devices)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 47 "src/core/load-fragment-gperf.gperf"
+      {"Unit.OnFailureJobMode",           config_parse_job_mode,              0,                             offsetof(Unit, on_failure_job_mode)},
+      {(char*)0},
+#line 94 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertFileNotEmpty",         config_parse_unit_condition_path,   CONDITION_FILE_NOT_EMPTY,      offsetof(Unit, asserts)},
+#line 679 "src/core/load-fragment-gperf.gperf"
+      {"Mount.UtmpMode",                     config_parse_exec_utmp_mode,        0,                             offsetof(Mount, exec_context.utmp_mode)},
+      {(char*)0}, {(char*)0},
+#line 158 "src/core/load-fragment-gperf.gperf"
+      {"Service.Nice",                         config_parse_exec_nice,             0,                             offsetof(Service, exec_context)},
+      {(char*)0},
+#line 802 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitDATA",                    config_parse_rlimit,                RLIMIT_DATA,                   offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 944 "src/core/load-fragment-gperf.gperf"
+      {"Slice.StartupCPUShares",             config_parse_cpu_shares,            0,                             offsetof(Slice, cgroup_context.startup_cpu_shares)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 942 "src/core/load-fragment-gperf.gperf"
+      {"Slice.StartupCPUWeight",             config_parse_cg_weight,             0,                             offsetof(Slice, cgroup_context.startup_cpu_weight)},
+      {(char*)0}, {(char*)0},
+#line 678 "src/core/load-fragment-gperf.gperf"
+      {"Mount.UtmpIdentifier",               config_parse_unit_string_printf,    0,                             offsetof(Mount, exec_context.utmp_id)},
+#line 697 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 222 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitNICE",                    config_parse_rlimit,                RLIMIT_NICE,                   offsetof(Service, exec_context.rlimit)},
+      {(char*)0},
+#line 996 "src/core/load-fragment-gperf.gperf"
+      {"Scope.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 606 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SecureBits",                   config_parse_exec_secure_bits,      0,                             offsetof(Mount, exec_context.secure_bits)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 495 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IgnoreSIGPIPE",                config_parse_bool,                  0,                             offsetof(Socket, exec_context.ignore_sigpipe)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1023 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.ip_accounting)},
+      {(char*)0},
+#line 994 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+#line 812 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitMSGQUEUE",                config_parse_rlimit,                RLIMIT_MSGQUEUE,               offsetof(Swap, exec_context.rlimit)},
+      {(char*)0},
+#line 334 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Backlog",                  config_parse_unsigned,              0,                             offsetof(Socket, backlog)},
+#line 680 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SELinuxContext",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 522 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.io_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 362 "src/core/load-fragment-gperf.gperf"
+      {"Socket.FreeBind",                 config_parse_bool,                  0,                             offsetof(Socket, free_bind)},
+      {(char*)0},
+#line 1012 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Scope, cgroup_context)},
+#line 1001 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 166 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUAffinity",                  config_parse_exec_cpu_affinity,     0,                             offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 537 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.tasks_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 703 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Mount, cgroup_context.device_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 523 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Socket, cgroup_context.io_weight)},
+#line 859 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SELinuxContext",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 709 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Mount, cgroup_context)},
+#line 556 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Options",                   config_parse_unit_string_printf,    0,                             offsetof(Mount, parameters_fragment.options)},
+#line 570 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Nice",                         config_parse_exec_nice,             0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 558 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TimeoutSec",                config_parse_sec_fix_0,             0,                             offsetof(Mount, timeout_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1037 "src/core/load-fragment-gperf.gperf"
+      {"Scope.TimeoutStopSec",            config_parse_sec,                   0,                             offsetof(Scope, timeout_stop_usec)},
+      {(char*)0},
+#line 292 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Service, cgroup_context.io_accounting)},
+      {(char*)0},
+#line 950 "src/core/load-fragment-gperf.gperf"
+      {"Slice.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 498 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SELinuxContext",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 702 "src/core/load-fragment-gperf.gperf"
+      {"Mount.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Mount, cgroup_context)},
+#line 799 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LockPersonality",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0},
+#line 381 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SELinuxContextFromNet",   config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 977 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IPAccounting",                 config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.ip_accounting)},
+#line 368 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TCPCongestion",            config_parse_string,                0,                             offsetof(Socket, tcp_congestion)},
+#line 948 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryMin",                    config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 307 "src/core/load-fragment-gperf.gperf"
+      {"Service.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Service, cgroup_context.tasks_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 354 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NoDelay",                  config_parse_bool,                  0,                             offsetof(Socket, no_delay)},
+      {(char*)0},
+#line 791 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SystemCallFilter",            config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 463 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TemporaryFileSystem",          config_parse_temporary_filesystems, 0,                             offsetof(Socket, exec_context)},
+      {(char*)0},
+#line 262 "src/core/load-fragment-gperf.gperf"
+      {"Service.TimeoutCleanSec",              config_parse_sec,                   0,                             offsetof(Service, exec_context.timeout_clean_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 966 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Slice, cgroup_context)},
+#line 955 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryLimit",                  config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+#line 527 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 814 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitRTPRIO",                  config_parse_rlimit,                RLIMIT_RTPRIO,                 offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 393 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUSchedulingPolicy",          config_parse_exec_cpu_sched_policy, 0,                             offsetof(Socket, exec_context)},
+      {(char*)0},
+#line 394 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUSchedulingPriority",        config_parse_exec_cpu_sched_prio,   0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 761 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Environment",                  config_parse_environ,               0,                             offsetof(Swap, exec_context.environment)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 148 "src/core/load-fragment-gperf.gperf"
+      {"Service.BusPolicy",               config_parse_warn_compat,           DISABLED_LEGACY,               0},
+#line 198 "src/core/load-fragment-gperf.gperf"
+      {"Service.NoNewPrivileges",              config_parse_bool,                  0,                             offsetof(Service, exec_context.no_new_privileges)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 762 "src/core/load-fragment-gperf.gperf"
+      {"Swap.EnvironmentFile",              config_parse_unit_env_file,         0,                             offsetof(Swap, exec_context.environment_files)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 388 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Nice",                         config_parse_exec_nice,             0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 997 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 752 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOSchedulingClass",            config_parse_exec_io_class,         0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 516 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 427 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TimerSlackNSec",               config_parse_nsec,                  0,                             offsetof(Socket, exec_context.timer_slack_nsec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 239 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectClock",                 config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_clock)},
+      {(char*)0},
+#line 526 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 270 "src/core/load-fragment-gperf.gperf"
+      {"Service.SmackProcessLabel",           config_parse_exec_smack_process_label, 0,                          offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 434 "src/core/load-fragment-gperf.gperf"
+      {"Socket.RestrictNamespaces",           config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 890 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Swap, cgroup_context)},
+#line 711 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Mount, cgroup_context)},
+#line 672 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ConfigurationDirectoryMode",   config_parse_mode,                  0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].mode)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 564 "src/core/load-fragment-gperf.gperf"
+      {"Mount.WorkingDirectory",            config_parse_working_directory,     0,                             offsetof(Mount, exec_context)},
+#line 37 "src/core/load-fragment-gperf.gperf"
+      {"Unit.PartOf",                     config_parse_unit_deps,             UNIT_PART_OF,                  0},
+#line 140 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestartForceExitStatus",  config_parse_set_status,            0,                             offsetof(Service, restart_force_status)},
+#line 521 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Socket, cgroup_context.device_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1003 "src/core/load-fragment-gperf.gperf"
+      {"Scope.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Scope, cgroup_context.device_policy)},
+      {(char*)0},
+#line 753 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOSchedulingPriority",         config_parse_exec_io_priority,      0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 316 "src/core/load-fragment-gperf.gperf"
+      {"Service.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+#line 544 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Socket, cgroup_context.ip_filters_ingress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1009 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 734 "src/core/load-fragment-gperf.gperf"
+      {"Mount.FinalKillSignal",              config_parse_signal,                0,                             offsetof(Mount, kill_context.final_kill_signal)},
+#line 924 "src/core/load-fragment-gperf.gperf"
+      {"Timer.WakeSystem",                config_parse_bool,                  0,                             offsetof(Timer, wake_system)},
+      {(char*)0},
+#line 728 "src/core/load-fragment-gperf.gperf"
+      {"Mount.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0},
+#line 951 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryLow",                    config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+#line 40 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RequisiteOverridable",       config_parse_obsolete_unit_deps,    UNIT_REQUISITE,                0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 895 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1002 "src/core/load-fragment-gperf.gperf"
+      {"Scope.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Scope, cgroup_context)},
+#line 673 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ConfigurationDirectory",       config_parse_exec_directories,      0,                             offsetof(Mount, exec_context.directories[EXEC_DIRECTORY_CONFIGURATION].paths)},
+      {(char*)0},
+#line 830 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectClock",                 config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_clock)},
+      {(char*)0},
+#line 469 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ProtectClock",                 config_parse_bool,                  0,                             offsetof(Socket, exec_context.protect_clock)},
+#line 898 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.tasks_accounting)},
+#line 699 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 906 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Swap, cgroup_context.ip_filters_egress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 705 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Mount, cgroup_context.io_weight)},
+#line 784 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Capabilities",                 config_parse_warn_compat,           DISABLED_LEGACY,               offsetof(Swap, exec_context)},
+#line 882 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Swap, cgroup_context.device_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 374 "src/core/load-fragment-gperf.gperf"
+      {"Socket.FileDescriptorName",       config_parse_fdname,                0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 547 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SendSIGKILL",                 config_parse_bool,                  0,                             offsetof(Socket, kill_context.send_sigkill)},
+#line 520 "src/core/load-fragment-gperf.gperf"
+      {"Socket.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 957 "src/core/load-fragment-gperf.gperf"
+      {"Slice.DevicePolicy",                 config_parse_device_policy,         0,                             offsetof(Slice, cgroup_context.device_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 90 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertPathIsSymbolicLink",   config_parse_unit_condition_path,   CONDITION_PATH_IS_SYMBOLIC_LINK,offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 231 "src/core/load-fragment-gperf.gperf"
+      {"Service.BindPaths",                    config_parse_bind_paths,            0,                             offsetof(Service, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 598 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SyslogFacility",               config_parse_log_facility,          0,                             offsetof(Mount, exec_context.syslog_priority)},
+      {(char*)0}, {(char*)0},
+#line 963 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 920 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnUnitInactiveSec",         config_parse_timer,                 TIMER_UNIT_INACTIVE,           0},
+      {(char*)0},
+#line 528 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 173 "src/core/load-fragment-gperf.gperf"
+      {"Service.UnsetEnvironment",             config_parse_unset_environ,         0,                             offsetof(Service, exec_context.unset_environment)},
+      {(char*)0}, {(char*)0},
+#line 633 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitMSGQUEUE",                config_parse_rlimit,                RLIMIT_MSGQUEUE,               offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 956 "src/core/load-fragment-gperf.gperf"
+      {"Slice.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0},
+#line 657 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PrivateMounts",                config_parse_bool,                  0,                             offsetof(Mount, exec_context.private_mounts)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 453 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitRTPRIO",                  config_parse_rlimit,                RLIMIT_RTPRIO,                 offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 462 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BindReadOnlyPaths",            config_parse_bind_paths,            0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 210 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitFSIZE",                   config_parse_rlimit,                RLIMIT_FSIZE,                  offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 780 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogLevelMax",                  config_parse_log_level,             0,                             offsetof(Swap, exec_context.log_level_max)},
+#line 1011 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 560 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SloppyOptions",             config_parse_bool,                  0,                             offsetof(Mount, sloppy_options)},
+      {(char*)0},
+#line 165 "src/core/load-fragment-gperf.gperf"
+      {"Service.CPUSchedulingResetOnFork",     config_parse_bool,                  0,                             offsetof(Service, exec_context.cpu_sched_reset_on_fork)},
+#line 922 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnTimezoneChange",          config_parse_bool,                  0,                             offsetof(Timer, on_timezone_change)},
+#line 835 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PrivateUsers",                 config_parse_bool,                  0,                             offsetof(Swap, exec_context.private_users)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 861 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SmackProcessLabel",           config_parse_exec_smack_process_label, 0,                          offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 930 "src/core/load-fragment-gperf.gperf"
+      {"Path.PathExistsGlob",             config_parse_path_spec,             0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 308 "src/core/load-fragment-gperf.gperf"
+      {"Service.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Service, cgroup_context.tasks_max)},
+      {(char*)0},
+#line 757 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUAffinity",                  config_parse_exec_cpu_affinity,     0,                             offsetof(Swap, exec_context)},
+#line 331 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenUSBFunction",        config_parse_socket_listen,         SOCKET_USB_FUNCTION,           0},
+      {(char*)0},
+#line 1034 "src/core/load-fragment-gperf.gperf"
+      {"Scope.FinalKillSignal",              config_parse_signal,                0,                             offsetof(Scope, kill_context.final_kill_signal)},
+      {(char*)0}, {(char*)0},
+#line 1028 "src/core/load-fragment-gperf.gperf"
+      {"Scope.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 999 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+#line 340 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TimeoutSec",               config_parse_sec_fix_0,             0,                             offsetof(Socket, timeout_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 772 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TTYPath",                      config_parse_unit_path_printf,      0,                             offsetof(Swap, exec_context.tty_path)},
+#line 601 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogLevelMax",                  config_parse_log_level,             0,                             offsetof(Mount, exec_context.log_level_max)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 358 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPTOS",                    config_parse_ip_tos,                0,                             offsetof(Socket, ip_tos)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 1005 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Scope, cgroup_context.io_weight)},
+      {(char*)0}, {(char*)0},
+#line 789 "src/core/load-fragment-gperf.gperf"
+      {"Swap.NoNewPrivileges",              config_parse_bool,                  0,                             offsetof(Swap, exec_context.no_new_privileges)},
+#line 917 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnBootSec",                 config_parse_timer,                 TIMER_BOOT,                    0},
+      {(char*)0},
+#line 965 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 858 "src/core/load-fragment-gperf.gperf"
+      {"Swap.UtmpMode",                     config_parse_exec_utmp_mode,        0,                             offsetof(Swap, exec_context.utmp_mode)},
+#line 788 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TimerSlackNSec",               config_parse_nsec,                  0,                             offsetof(Swap, exec_context.timer_slack_nsec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 532 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Socket, cgroup_context.blockio_weight)},
+      {(char*)0}, {(char*)0},
+#line 571 "src/core/load-fragment-gperf.gperf"
+      {"Mount.OOMScoreAdjust",               config_parse_exec_oom_score_adjust, 0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 534 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 982 "src/core/load-fragment-gperf.gperf"
+      {"Slice.NetClass",                     config_parse_warn_compat,           DISABLED_LEGACY,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 360 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Mark",                     config_parse_int,                   0,                             offsetof(Socket, mark)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 953 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryMax",                    config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 417 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SyslogLevel",                  config_parse_log_level,             0,                             offsetof(Socket, exec_context.syslog_priority)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 608 "src/core/load-fragment-gperf.gperf"
+      {"Mount.AmbientCapabilities",          config_parse_capability_set,        0,                             offsetof(Mount, exec_context.capability_ambient_set)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 899 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Swap, cgroup_context.tasks_max)},
+      {(char*)0},
+#line 634 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitNICE",                    config_parse_rlimit,                RLIMIT_NICE,                   offsetof(Mount, exec_context.rlimit)},
+      {(char*)0},
+#line 959 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOWeight",                     config_parse_cg_weight,             0,                             offsetof(Slice, cgroup_context.io_weight)},
+      {(char*)0},
+#line 175 "src/core/load-fragment-gperf.gperf"
+      {"Service.RemoveIPC",                    config_parse_bool,                  0,                             offsetof(Service, exec_context.remove_ipc)},
+#line 396 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUAffinity",                  config_parse_exec_cpu_affinity,     0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 704 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.io_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 118 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecStopPost",            config_parse_exec,                  SERVICE_EXEC_STOP_POST,        offsetof(Service, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 562 "src/core/load-fragment-gperf.gperf"
+      {"Mount.ForceUnmount",              config_parse_bool,                  0,                             offsetof(Mount, force_unmount)},
+      {(char*)0}, {(char*)0},
+#line 131 "src/core/load-fragment-gperf.gperf"
+      {"Service.FailureAction",           config_parse_emergency_action,      0,                             offsetof(Unit, failure_action)},
+#line 211 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitDATA",                    config_parse_rlimit,                RLIMIT_DATA,                   offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 328 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenNetlink",            config_parse_socket_listen,         SOCKET_SOCKET,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 333 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BindIPv6Only",             config_parse_socket_bind,           0,                             offsetof(Socket, bind_ipv6_only)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 811 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitSIGPENDING",              config_parse_rlimit,                RLIMIT_SIGPENDING,             offsetof(Swap, exec_context.rlimit)},
+      {(char*)0},
+#line 53 "src/core/load-fragment-gperf.gperf"
+      {"Unit.JobTimeoutAction",           config_parse_emergency_action,      0,                             offsetof(Unit, job_timeout_action)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 265 "src/core/load-fragment-gperf.gperf"
+      {"Service.IgnoreSIGPIPE",                config_parse_bool,                  0,                             offsetof(Service, exec_context.ignore_sigpipe)},
+#line 833 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LogNamespace",                 config_parse_log_namespace,         0,                             offsetof(Swap, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 881 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DeviceAllow",                  config_parse_device_allow,          0,                             offsetof(Swap, cgroup_context)},
+#line 756 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CPUSchedulingResetOnFork",     config_parse_bool,                  0,                             offsetof(Swap, exec_context.cpu_sched_reset_on_fork)},
+#line 107 "src/core/load-fragment-gperf.gperf"
+      {"Unit.AssertGroup",                config_parse_unit_condition_string, CONDITION_GROUP,               offsetof(Unit, asserts)},
+      {(char*)0}, {(char*)0},
+#line 582 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Environment",                  config_parse_environ,               0,                             offsetof(Mount, exec_context.environment)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 583 "src/core/load-fragment-gperf.gperf"
+      {"Mount.EnvironmentFile",              config_parse_unit_env_file,         0,                             offsetof(Mount, exec_context.environment_files)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 829 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectKernelLogs",            config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_kernel_logs)},
+      {(char*)0}, {(char*)0},
+#line 828 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectKernelModules",         config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_kernel_modules)},
+#line 827 "src/core/load-fragment-gperf.gperf"
+      {"Swap.ProtectKernelTunables",        config_parse_bool,                  0,                             offsetof(Swap, exec_context.protect_kernel_tunables)},
+      {(char*)0},
+#line 429 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KeyringMode",                  config_parse_exec_keyring_mode,     0,                             offsetof(Socket, exec_context.keyring_mode)},
+      {(char*)0},
+#line 727 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Mount, cgroup_context.ip_filters_egress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 766 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RemoveIPC",                    config_parse_bool,                  0,                             offsetof(Swap, exec_context.remove_ipc)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 161 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOSchedulingClass",            config_parse_exec_io_class,         0,                             offsetof(Service, exec_context)},
+      {(char*)0},
+#line 51 "src/core/load-fragment-gperf.gperf"
+      {"Unit.JobTimeoutSec",              config_parse_job_timeout_sec,       0,                             0},
+      {(char*)0}, {(char*)0},
+#line 356 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ReceiveBuffer",            config_parse_iec_size,              0,                             offsetof(Socket, receive_buffer)},
+      {(char*)0},
+#line 389 "src/core/load-fragment-gperf.gperf"
+      {"Socket.OOMScoreAdjust",               config_parse_exec_oom_score_adjust, 0,                             offsetof(Socket, exec_context)},
+#line 622 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitFSIZE",                   config_parse_rlimit,                RLIMIT_FSIZE,                  offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 400 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Environment",                  config_parse_environ,               0,                             offsetof(Socket, exec_context.environment)},
+      {(char*)0}, {(char*)0},
+#line 892 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Swap, cgroup_context.blockio_accounting)},
+#line 856 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IgnoreSIGPIPE",                config_parse_bool,                  0,                             offsetof(Swap, exec_context.ignore_sigpipe)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 401 "src/core/load-fragment-gperf.gperf"
+      {"Socket.EnvironmentFile",              config_parse_unit_env_file,         0,                             offsetof(Socket, exec_context.environment_files)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 54 "src/core/load-fragment-gperf.gperf"
+      {"Unit.JobTimeoutRebootArgument",   config_parse_unit_string_printf,    0,                             offsetof(Unit, job_timeout_reboot_arg)},
+#line 625 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitCORE",                    config_parse_rlimit,                RLIMIT_CORE,                   offsetof(Mount, exec_context.rlimit)},
+#line 471 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NetworkNamespacePath",         config_parse_unit_path_printf,      0,                             offsetof(Socket, exec_context.network_namespace_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 530 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 632 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitSIGPENDING",              config_parse_rlimit,                RLIMIT_SIGPENDING,             offsetof(Mount, exec_context.rlimit)},
+#line 492 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TimeoutCleanSec",              config_parse_sec,                   0,                             offsetof(Socket, exec_context.timeout_clean_usec)},
+      {(char*)0},
+#line 299 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Service, cgroup_context)},
+      {(char*)0},
+#line 418 "src/core/load-fragment-gperf.gperf"
+      {"Socket.SyslogLevelPrefix",            config_parse_bool,                  0,                             offsetof(Socket, exec_context.syslog_level_prefix)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 238 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectKernelLogs",            config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_kernel_logs)},
+#line 162 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOSchedulingPriority",         config_parse_exec_io_priority,      0,                             offsetof(Service, exec_context)},
+      {(char*)0},
+#line 237 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectKernelModules",         config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_kernel_modules)},
+#line 236 "src/core/load-fragment-gperf.gperf"
+      {"Service.ProtectKernelTunables",        config_parse_bool,                  0,                             offsetof(Service, exec_context.protect_kernel_tunables)},
+      {(char*)0},
+#line 714 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Mount, cgroup_context.blockio_weight)},
+      {(char*)0}, {(char*)0},
+#line 167 "src/core/load-fragment-gperf.gperf"
+      {"Service.NUMAPolicy",                   config_parse_numa_policy,           0,                             offsetof(Service, exec_context.numa_policy.type)},
+#line 893 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Swap, cgroup_context.blockio_weight)},
+#line 145 "src/core/load-fragment-gperf.gperf"
+      {"Service.FileDescriptorStoreMax",  config_parse_unsigned,              0,                             offsetof(Service, n_fd_store_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1004 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.io_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 620 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LockPersonality",              config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 836 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PrivateMounts",                config_parse_bool,                  0,                             offsetof(Swap, exec_context.private_mounts)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 451 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitMSGQUEUE",                config_parse_rlimit,                RLIMIT_MSGQUEUE,               offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1027 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Scope, cgroup_context.ip_filters_egress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 700 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 322 "src/core/load-fragment-gperf.gperf"
+      {"Service.FinalKillSignal",              config_parse_signal,                0,                             offsetof(Service, kill_context.final_kill_signal)},
+#line 298 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Service, cgroup_context)},
+#line 958 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOAccounting",                 config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.io_accounting)},
+#line 352 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KeepAliveProbes",          config_parse_unsigned,              0,                             offsetof(Socket, keep_alive_cnt)},
+#line 156 "src/core/load-fragment-gperf.gperf"
+      {"Service.Group",                        config_parse_user_group_compat,     0,                             offsetof(Service, exec_context.group)},
+      {(char*)0}, {(char*)0},
+#line 349 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KeepAlive",                config_parse_bool,                  0,                             offsetof(Socket, keep_alive)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 549 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KillMode",                     config_parse_kill_mode,             0,                             offsetof(Socket, kill_context.kill_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 710 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0},
+#line 454 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitRTTIME",                  config_parse_rlimit,                RLIMIT_RTTIME,                 offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 390 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CoredumpFilter",               config_parse_exec_coredump_filter,  0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 472 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogNamespace",                 config_parse_log_namespace,         0,                             offsetof(Socket, exec_context)},
+      {(char*)0}, {(char*)0},
+#line 886 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 538 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Socket, cgroup_context.tasks_max)},
+      {(char*)0},
+#line 320 "src/core/load-fragment-gperf.gperf"
+      {"Service.KillSignal",                   config_parse_signal,                0,                             offsetof(Service, kill_context.kill_signal)},
+#line 874 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DefaultMemoryMin",             config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0},
+#line 681 "src/core/load-fragment-gperf.gperf"
+      {"Mount.AppArmorProfile",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 860 "src/core/load-fragment-gperf.gperf"
+      {"Swap.AppArmorProfile",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1014 "src/core/load-fragment-gperf.gperf"
+      {"Scope.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Scope, cgroup_context.blockio_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 981 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Slice, cgroup_context.ip_filters_egress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 832 "src/core/load-fragment-gperf.gperf"
+      {"Swap.NetworkNamespacePath",         config_parse_unit_path_printf,      0,                             offsetof(Swap, exec_context.network_namespace_path)},
+      {(char*)0},
+#line 698 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 577 "src/core/load-fragment-gperf.gperf"
+      {"Mount.CPUSchedulingResetOnFork",     config_parse_bool,                  0,                             offsetof(Mount, exec_context.cpu_sched_reset_on_fork)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 557 "src/core/load-fragment-gperf.gperf"
+      {"Mount.Type",                      config_parse_unit_string_printf,    0,                             offsetof(Mount, parameters_fragment.fstype)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 611 "src/core/load-fragment-gperf.gperf"
+      {"Mount.KeyringMode",                  config_parse_exec_keyring_mode,     0,                             offsetof(Mount, exec_context.keyring_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 581 "src/core/load-fragment-gperf.gperf"
+      {"Mount.UMask",                        config_parse_mode,                  0,                             offsetof(Mount, exec_context.umask)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 363 "src/core/load-fragment-gperf.gperf"
+      {"Socket.Transparent",              config_parse_bool,                  0,                             offsetof(Socket, transparent)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1000 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+#line 968 "src/core/load-fragment-gperf.gperf"
+      {"Slice.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Slice, cgroup_context.blockio_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 803 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitSTACK",                   config_parse_rlimit,                RLIMIT_STACK,                  offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 875 "src/core/load-fragment-gperf.gperf"
+      {"Swap.DefaultMemoryLow",             config_parse_memory_limit,          0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1010 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Scope, cgroup_context)},
+#line 350 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KeepAliveTimeSec",         config_parse_sec,                   0,                             offsetof(Socket, keep_alive_time)},
+      {(char*)0}, {(char*)0},
+#line 529 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IOWriteIOPSMax",               config_parse_io_limit,              0,                             offsetof(Socket, cgroup_context)},
+#line 351 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KeepAliveIntervalSec",     config_parse_sec,                   0,                             offsetof(Socket, keep_alive_interval)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 855 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PAMName",                     config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+#line 731 "src/core/load-fragment-gperf.gperf"
+      {"Mount.KillMode",                     config_parse_kill_mode,             0,                             offsetof(Mount, kill_context.kill_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 891 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 321 "src/core/load-fragment-gperf.gperf"
+      {"Service.RestartKillSignal",            config_parse_signal,                0,                             offsetof(Service, kill_context.restart_kill_signal)},
+      {(char*)0}, {(char*)0},
+#line 399 "src/core/load-fragment-gperf.gperf"
+      {"Socket.UMask",                        config_parse_mode,                  0,                             offsetof(Socket, exec_context.umask)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 897 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 531 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Socket, cgroup_context.blockio_accounting)},
+      {(char*)0},
+#line 888 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Swap, cgroup_context)},
+#line 38 "src/core/load-fragment-gperf.gperf"
+      {"Unit.JoinsNamespaceOf",           config_parse_unit_deps,             UNIT_JOINS_NAMESPACE_OF,       0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 676 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PAMName",                     config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 954 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemorySwapMax",                config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0},
+#line 998 "src/core/load-fragment-gperf.gperf"
+      {"Scope.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 443 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitCORE",                    config_parse_rlimit,                RLIMIT_CORE,                   offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 896 "src/core/load-fragment-gperf.gperf"
+      {"Swap.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 964 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 916 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnActiveSec",               config_parse_timer,                 TIMER_ACTIVE,                  0},
+#line 550 "src/core/load-fragment-gperf.gperf"
+      {"Socket.KillSignal",                   config_parse_signal,                0,                             offsetof(Socket, kill_context.kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 921 "src/core/load-fragment-gperf.gperf"
+      {"Timer.OnClockChange",             config_parse_bool,                  0,                             offsetof(Timer, on_clock_change)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 234 "src/core/load-fragment-gperf.gperf"
+      {"Service.PrivateTmp",                   config_parse_bool,                  0,                             offsetof(Service, exec_context.private_tmp)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 912 "src/core/load-fragment-gperf.gperf"
+      {"Swap.RestartKillSignal",            config_parse_signal,                0,                             offsetof(Swap, kill_context.restart_kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 952 "src/core/load-fragment-gperf.gperf"
+      {"Slice.MemoryHigh",                   config_parse_memory_limit,          0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1031 "src/core/load-fragment-gperf.gperf"
+      {"Scope.KillMode",                     config_parse_kill_mode,             0,                             offsetof(Scope, kill_context.kill_mode)},
+#line 747 "src/core/load-fragment-gperf.gperf"
+      {"Swap.Group",                        config_parse_user_group_compat,     0,                             offsetof(Swap, exec_context.group)},
+      {(char*)0}, {(char*)0},
+#line 535 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Socket, cgroup_context)},
+#line 536 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Socket, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 44 "src/core/load-fragment-gperf.gperf"
+      {"Unit.RefuseManualStop",           config_parse_bool,                  0,                             offsetof(Unit, refuse_manual_stop)},
+#line 654 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LogNamespace",                 config_parse_log_namespace,         0,                             offsetof(Mount, exec_context)},
+#line 412 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TTYReset",                     config_parse_bool,                  0,                             offsetof(Socket, exec_context.tty_reset)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 182 "src/core/load-fragment-gperf.gperf"
+      {"Service.TTYReset",                     config_parse_bool,                  0,                             offsetof(Service, exec_context.tty_reset)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 499 "src/core/load-fragment-gperf.gperf"
+      {"Socket.AppArmorProfile",             config_parse_warn_compat,           DISABLED_CONFIGURATION,        0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 889 "src/core/load-fragment-gperf.gperf"
+      {"Swap.IOReadIOPSMax",                config_parse_io_limit,              0,                             offsetof(Swap, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 713 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.blockio_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 52 "src/core/load-fragment-gperf.gperf"
+      {"Unit.JobRunningTimeoutSec",       config_parse_job_running_timeout_sec, 0,                           0},
+      {(char*)0},
+#line 224 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitRTTIME",                  config_parse_rlimit,                RLIMIT_RTTIME,                 offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 422 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogExtraFields",               config_parse_log_extra_fields,      0,                             offsetof(Socket, exec_context)},
+#line 414 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TTYVTDisallocate",             config_parse_bool,                  0,                             offsetof(Socket, exec_context.tty_vt_disallocate)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 569 "src/core/load-fragment-gperf.gperf"
+      {"Mount.SupplementaryGroups",          config_parse_user_group_strv_compat, 0,                            offsetof(Mount, exec_context.supplementary_groups)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 359 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPTTL",                    config_parse_int,                   0,                             offsetof(Socket, ip_ttl)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 594 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TTYReset",                     config_parse_bool,                  0,                             offsetof(Mount, exec_context.tty_reset)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 717 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 596 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TTYVTDisallocate",             config_parse_bool,                  0,                             offsetof(Mount, exec_context.tty_vt_disallocate)},
+      {(char*)0},
+#line 718 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0},
+#line 335 "src/core/load-fragment-gperf.gperf"
+      {"Socket.BindToDevice",             config_parse_socket_bindtodevice,   0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 295 "src/core/load-fragment-gperf.gperf"
+      {"Service.IODeviceWeight",               config_parse_io_device_weight,      0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1013 "src/core/load-fragment-gperf.gperf"
+      {"Scope.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.blockio_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 748 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SupplementaryGroups",          config_parse_user_group_strv_compat, 0,                            offsetof(Swap, exec_context.supplementary_groups)},
+      {(char*)0},
+#line 319 "src/core/load-fragment-gperf.gperf"
+      {"Service.KillMode",                     config_parse_kill_mode,             0,                             offsetof(Service, kill_context.kill_mode)},
+      {(char*)0},
+#line 661 "src/core/load-fragment-gperf.gperf"
+      {"Mount.MountAPIVFS",                  config_parse_bool,                  0,                             offsetof(Mount, exec_context.mount_apivfs)},
+#line 199 "src/core/load-fragment-gperf.gperf"
+      {"Service.KeyringMode",                  config_parse_exec_keyring_mode,     0,                             offsetof(Service, exec_context.keyring_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 317 "src/core/load-fragment-gperf.gperf"
+      {"Service.SendSIGKILL",                 config_parse_bool,                  0,                             offsetof(Service, kill_context.send_sigkill)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 967 "src/core/load-fragment-gperf.gperf"
+      {"Slice.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.blockio_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 815 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitRTTIME",                  config_parse_rlimit,                RLIMIT_RTTIME,                 offsetof(Swap, exec_context.rlimit)},
+#line 775 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TTYVTDisallocate",             config_parse_bool,                  0,                             offsetof(Swap, exec_context.tty_vt_disallocate)},
+      {(char*)0}, {(char*)0},
+#line 297 "src/core/load-fragment-gperf.gperf"
+      {"Service.IOWriteBandwidthMax",          config_parse_io_limit,              0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1017 "src/core/load-fragment-gperf.gperf"
+      {"Scope.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 212 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitSTACK",                   config_parse_rlimit,                RLIMIT_STACK,                  offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 304 "src/core/load-fragment-gperf.gperf"
+      {"Service.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1018 "src/core/load-fragment-gperf.gperf"
+      {"Scope.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 627 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitNOFILE",                  config_parse_rlimit,                RLIMIT_NOFILE,                 offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 397 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NUMAPolicy",                   config_parse_numa_policy,           0,                             offsetof(Socket, exec_context.numa_policy.type)},
+      {(char*)0}, {(char*)0},
+#line 300 "src/core/load-fragment-gperf.gperf"
+      {"Service.IODeviceLatencyTargetSec",     config_parse_io_device_latency,     0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 720 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Mount, cgroup_context.tasks_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 971 "src/core/load-fragment-gperf.gperf"
+      {"Slice.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 708 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Mount, cgroup_context)},
+#line 302 "src/core/load-fragment-gperf.gperf"
+      {"Service.BlockIOWeight",                config_parse_blockio_weight,        0,                             offsetof(Service, cgroup_context.blockio_weight)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 655 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PrivateNetwork",               config_parse_bool,                  0,                             offsetof(Mount, exec_context.private_network)},
+      {(char*)0},
+#line 972 "src/core/load-fragment-gperf.gperf"
+      {"Slice.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 146 "src/core/load-fragment-gperf.gperf"
+      {"Service.NotifyAccess",            config_parse_notify_access,         0,                             offsetof(Service, notify_access)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 478 "src/core/load-fragment-gperf.gperf"
+      {"Socket.MountFlags",                   config_parse_exec_mount_flags,      0,                             offsetof(Socket, exec_context.mount_flags)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 215 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitNOFILE",                  config_parse_rlimit,                RLIMIT_NOFILE,                 offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 579 "src/core/load-fragment-gperf.gperf"
+      {"Mount.NUMAPolicy",                   config_parse_numa_policy,           0,                             offsetof(Mount, exec_context.numa_policy.type)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1020 "src/core/load-fragment-gperf.gperf"
+      {"Scope.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Scope, cgroup_context.tasks_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 327 "src/core/load-fragment-gperf.gperf"
+      {"Socket.ListenFIFO",               config_parse_socket_listen,         SOCKET_FIFO,                   0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 647 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PrivateDevices",               config_parse_bool,                  0,                             offsetof(Mount, exec_context.private_devices)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 1008 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 395 "src/core/load-fragment-gperf.gperf"
+      {"Socket.CPUSchedulingResetOnFork",     config_parse_bool,                  0,                             offsetof(Socket, exec_context.cpu_sched_reset_on_fork)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 786 "src/core/load-fragment-gperf.gperf"
+      {"Swap.CapabilityBoundingSet",        config_parse_capability_set,        0,                             offsetof(Swap, exec_context.capability_bounding_set)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 181 "src/core/load-fragment-gperf.gperf"
+      {"Service.TTYPath",                      config_parse_unit_path_printf,      0,                             offsetof(Service, exec_context.tty_path)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 974 "src/core/load-fragment-gperf.gperf"
+      {"Slice.TasksMax",                     config_parse_tasks_max,             0,                             offsetof(Slice, cgroup_context.tasks_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 411 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TTYPath",                      config_parse_unit_path_printf,      0,                             offsetof(Socket, exec_context.tty_path)},
+      {(char*)0},
+#line 857 "src/core/load-fragment-gperf.gperf"
+      {"Swap.UtmpIdentifier",               config_parse_unit_string_printf,    0,                             offsetof(Swap, exec_context.utmp_id)},
+#line 243 "src/core/load-fragment-gperf.gperf"
+      {"Service.PrivateNetwork",               config_parse_bool,                  0,                             offsetof(Service, exec_context.private_network)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 732 "src/core/load-fragment-gperf.gperf"
+      {"Mount.KillSignal",                   config_parse_signal,                0,                             offsetof(Mount, kill_context.kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 962 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IOReadBandwidthMax",           config_parse_io_limit,              0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 609 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TimerSlackNSec",               config_parse_nsec,                  0,                             offsetof(Mount, exec_context.timer_slack_nsec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 774 "src/core/load-fragment-gperf.gperf"
+      {"Swap.TTYVHangup",                   config_parse_bool,                  0,                             offsetof(Swap, exec_context.tty_vhangup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 117 "src/core/load-fragment-gperf.gperf"
+      {"Service.ExecStop",                config_parse_exec,                  SERVICE_EXEC_STOP,             offsetof(Service, exec_command)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 806 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitNOFILE",                  config_parse_rlimit,                RLIMIT_NOFILE,                 offsetof(Swap, exec_context.rlimit)},
+      {(char*)0},
+#line 440 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitFSIZE",                   config_parse_rlimit,                RLIMIT_FSIZE,                  offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 301 "src/core/load-fragment-gperf.gperf"
+      {"Service.BlockIOAccounting",            config_parse_bool,                  0,                             offsetof(Service, cgroup_context.blockio_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 610 "src/core/load-fragment-gperf.gperf"
+      {"Mount.NoNewPrivileges",              config_parse_bool,                  0,                             offsetof(Mount, exec_context.no_new_privileges)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1032 "src/core/load-fragment-gperf.gperf"
+      {"Scope.KillSignal",                   config_parse_signal,                0,                             offsetof(Scope, kill_context.kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 442 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitSTACK",                   config_parse_rlimit,                RLIMIT_STACK,                  offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 809 "src/core/load-fragment-gperf.gperf"
+      {"Swap.LimitMEMLOCK",                 config_parse_rlimit,                RLIMIT_MEMLOCK,                offsetof(Swap, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 719 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Mount, cgroup_context.tasks_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 635 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitRTPRIO",                  config_parse_rlimit,                RLIMIT_RTPRIO,                 offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 726 "src/core/load-fragment-gperf.gperf"
+      {"Mount.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Mount, cgroup_context.ip_filters_ingress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 760 "src/core/load-fragment-gperf.gperf"
+      {"Swap.UMask",                        config_parse_mode,                  0,                             offsetof(Swap, exec_context.umask)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 218 "src/core/load-fragment-gperf.gperf"
+      {"Service.LimitMEMLOCK",                 config_parse_rlimit,                RLIMIT_MEMLOCK,                offsetof(Service, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 636 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitRTTIME",                  config_parse_rlimit,                RLIMIT_RTTIME,                 offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 306 "src/core/load-fragment-gperf.gperf"
+      {"Service.BlockIOWriteBandwidth",        config_parse_blockio_bandwidth,     0,                             offsetof(Service, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 447 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitNPROC",                   config_parse_rlimit,                RLIMIT_NPROC,                  offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 1019 "src/core/load-fragment-gperf.gperf"
+      {"Scope.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Scope, cgroup_context.tasks_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 305 "src/core/load-fragment-gperf.gperf"
+      {"Service.BlockIOReadBandwidth",         config_parse_blockio_bandwidth,     0,                             offsetof(Service, cgroup_context)},
+#line 143 "src/core/load-fragment-gperf.gperf"
+      {"Service.NonBlocking",             config_parse_bool,                  0,                             offsetof(Service, exec_context.non_blocking)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 419 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LogLevelMax",                  config_parse_log_level,             0,                             offsetof(Socket, exec_context.log_level_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 545 "src/core/load-fragment-gperf.gperf"
+      {"Socket.IPEgressFilterPath",           config_parse_ip_filter_bpf_progs,   0,                             offsetof(Socket, cgroup_context.ip_filters_egress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 908 "src/core/load-fragment-gperf.gperf"
+      {"Swap.SendSIGKILL",                 config_parse_bool,                  0,                             offsetof(Swap, kill_context.send_sigkill)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 1026 "src/core/load-fragment-gperf.gperf"
+      {"Scope.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Scope, cgroup_context.ip_filters_ingress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 973 "src/core/load-fragment-gperf.gperf"
+      {"Slice.TasksAccounting",              config_parse_bool,                  0,                             offsetof(Slice, cgroup_context.tasks_accounting)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 980 "src/core/load-fragment-gperf.gperf"
+      {"Slice.IPIngressFilterPath",          config_parse_ip_filter_bpf_progs,   0,                             offsetof(Slice, cgroup_context.ip_filters_ingress)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 449 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitLOCKS",                   config_parse_rlimit,                RLIMIT_LOCKS,                  offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 716 "src/core/load-fragment-gperf.gperf"
+      {"Mount.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Mount, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 593 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TTYPath",                      config_parse_unit_path_printf,      0,                             offsetof(Mount, exec_context.tty_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 646 "src/core/load-fragment-gperf.gperf"
+      {"Mount.PrivateTmp",                   config_parse_bool,                  0,                             offsetof(Mount, exec_context.private_tmp)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 445 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitNOFILE",                  config_parse_rlimit,                RLIMIT_NOFILE,                 offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 653 "src/core/load-fragment-gperf.gperf"
+      {"Mount.NetworkNamespacePath",         config_parse_unit_path_printf,      0,                             offsetof(Mount, exec_context.network_namespace_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 241 "src/core/load-fragment-gperf.gperf"
+      {"Service.NetworkNamespacePath",         config_parse_unit_path_printf,      0,                             offsetof(Service, exec_context.network_namespace_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 1016 "src/core/load-fragment-gperf.gperf"
+      {"Scope.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Scope, cgroup_context)},
+      {(char*)0},
+#line 452 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitNICE",                    config_parse_rlimit,                RLIMIT_NICE,                   offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0},
+#line 169 "src/core/load-fragment-gperf.gperf"
+      {"Service.UMask",                        config_parse_mode,                  0,                             offsetof(Service, exec_context.umask)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 184 "src/core/load-fragment-gperf.gperf"
+      {"Service.TTYVTDisallocate",             config_parse_bool,                  0,                             offsetof(Service, exec_context.tty_vt_disallocate)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 970 "src/core/load-fragment-gperf.gperf"
+      {"Slice.BlockIODeviceWeight",          config_parse_blockio_device_weight, 0,                             offsetof(Slice, cgroup_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 825 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PrivateTmp",                   config_parse_bool,                  0,                             offsetof(Swap, exec_context.private_tmp)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 413 "src/core/load-fragment-gperf.gperf"
+      {"Socket.TTYVHangup",                   config_parse_bool,                  0,                             offsetof(Socket, exec_context.tty_vhangup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 398 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NUMAMask",                     config_parse_numa_mask,             0,                             offsetof(Socket, exec_context.numa_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 580 "src/core/load-fragment-gperf.gperf"
+      {"Mount.NUMAMask",                     config_parse_numa_mask,             0,                             offsetof(Mount, exec_context.numa_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 552 "src/core/load-fragment-gperf.gperf"
+      {"Socket.FinalKillSignal",              config_parse_signal,                0,                             offsetof(Socket, kill_context.final_kill_signal)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 630 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitMEMLOCK",                 config_parse_rlimit,                RLIMIT_MEMLOCK,                offsetof(Mount, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 645 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TemporaryFileSystem",          config_parse_temporary_filesystems, 0,                             offsetof(Mount, exec_context)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 448 "src/core/load-fragment-gperf.gperf"
+      {"Socket.LimitMEMLOCK",                 config_parse_rlimit,                RLIMIT_MEMLOCK,                offsetof(Socket, exec_context.rlimit)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 183 "src/core/load-fragment-gperf.gperf"
+      {"Service.TTYVHangup",                   config_parse_bool,                  0,                             offsetof(Service, exec_context.tty_vhangup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 759 "src/core/load-fragment-gperf.gperf"
+      {"Swap.NUMAMask",                     config_parse_numa_mask,             0,                             offsetof(Swap, exec_context.numa_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 834 "src/core/load-fragment-gperf.gperf"
+      {"Swap.PrivateNetwork",               config_parse_bool,                  0,                             offsetof(Swap, exec_context.private_network)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 595 "src/core/load-fragment-gperf.gperf"
+      {"Mount.TTYVHangup",                   config_parse_bool,                  0,                             offsetof(Mount, exec_context.tty_vhangup)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 428 "src/core/load-fragment-gperf.gperf"
+      {"Socket.NoNewPrivileges",              config_parse_bool,                  0,                             offsetof(Socket, exec_context.no_new_privileges)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 168 "src/core/load-fragment-gperf.gperf"
+      {"Service.NUMAMask",                     config_parse_numa_mask,             0,                             offsetof(Service, exec_context.numa_policy)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 624 "src/core/load-fragment-gperf.gperf"
+      {"Mount.LimitSTACK",                   config_parse_rlimit,                RLIMIT_STACK,                  offsetof(Mount, exec_context.rlimit)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = load_fragment_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/journal/audit_type-to-name.h b/build/src/journal/audit_type-to-name.h
new file mode 100644
index 0000000000..6c308e2ce1
--- /dev/null
+++ b/build/src/journal/audit_type-to-name.h
@@ -0,0 +1,94 @@
+const char *audit_type_to_string(int type) {
+	switch(type) {
+        case AUDIT_GET: return "GET";
+        case AUDIT_SET: return "SET";
+        case AUDIT_LIST: return "LIST";
+        case AUDIT_ADD: return "ADD";
+        case AUDIT_DEL: return "DEL";
+        case AUDIT_USER: return "USER";
+        case AUDIT_LOGIN: return "LOGIN";
+        case AUDIT_WATCH_INS: return "WATCH_INS";
+        case AUDIT_WATCH_REM: return "WATCH_REM";
+        case AUDIT_WATCH_LIST: return "WATCH_LIST";
+        case AUDIT_SIGNAL_INFO: return "SIGNAL_INFO";
+        case AUDIT_ADD_RULE: return "ADD_RULE";
+        case AUDIT_DEL_RULE: return "DEL_RULE";
+        case AUDIT_LIST_RULES: return "LIST_RULES";
+        case AUDIT_TRIM: return "TRIM";
+        case AUDIT_MAKE_EQUIV: return "MAKE_EQUIV";
+        case AUDIT_TTY_GET: return "TTY_GET";
+        case AUDIT_TTY_SET: return "TTY_SET";
+        case AUDIT_SET_FEATURE: return "SET_FEATURE";
+        case AUDIT_GET_FEATURE: return "GET_FEATURE";
+        case AUDIT_USER_AVC: return "USER_AVC";
+        case AUDIT_USER_TTY: return "USER_TTY";
+        case AUDIT_SERVICE_START: return "SERVICE_START";
+        case AUDIT_SERVICE_STOP: return "SERVICE_STOP";
+        case AUDIT_DAEMON_START: return "DAEMON_START";
+        case AUDIT_DAEMON_END: return "DAEMON_END";
+        case AUDIT_DAEMON_ABORT: return "DAEMON_ABORT";
+        case AUDIT_DAEMON_CONFIG: return "DAEMON_CONFIG";
+        case AUDIT_SYSCALL: return "SYSCALL";
+        case AUDIT_PATH: return "PATH";
+        case AUDIT_IPC: return "IPC";
+        case AUDIT_SOCKETCALL: return "SOCKETCALL";
+        case AUDIT_CONFIG_CHANGE: return "CONFIG_CHANGE";
+        case AUDIT_SOCKADDR: return "SOCKADDR";
+        case AUDIT_CWD: return "CWD";
+        case AUDIT_EXECVE: return "EXECVE";
+        case AUDIT_IPC_SET_PERM: return "IPC_SET_PERM";
+        case AUDIT_MQ_OPEN: return "MQ_OPEN";
+        case AUDIT_MQ_SENDRECV: return "MQ_SENDRECV";
+        case AUDIT_MQ_NOTIFY: return "MQ_NOTIFY";
+        case AUDIT_MQ_GETSETATTR: return "MQ_GETSETATTR";
+        case AUDIT_KERNEL_OTHER: return "KERNEL_OTHER";
+        case AUDIT_FD_PAIR: return "FD_PAIR";
+        case AUDIT_OBJ_PID: return "OBJ_PID";
+        case AUDIT_TTY: return "TTY";
+        case AUDIT_EOE: return "EOE";
+        case AUDIT_BPRM_FCAPS: return "BPRM_FCAPS";
+        case AUDIT_CAPSET: return "CAPSET";
+        case AUDIT_MMAP: return "MMAP";
+        case AUDIT_NETFILTER_PKT: return "NETFILTER_PKT";
+        case AUDIT_NETFILTER_CFG: return "NETFILTER_CFG";
+        case AUDIT_SECCOMP: return "SECCOMP";
+        case AUDIT_PROCTITLE: return "PROCTITLE";
+        case AUDIT_FEATURE_CHANGE: return "FEATURE_CHANGE";
+        case AUDIT_REPLACE: return "REPLACE";
+        case AUDIT_KERN_MODULE: return "KERN_MODULE";
+        case AUDIT_FANOTIFY: return "FANOTIFY";
+        case AUDIT_AVC: return "AVC";
+        case AUDIT_SELINUX_ERR: return "SELINUX_ERR";
+        case AUDIT_AVC_PATH: return "AVC_PATH";
+        case AUDIT_MAC_POLICY_LOAD: return "MAC_POLICY_LOAD";
+        case AUDIT_MAC_STATUS: return "MAC_STATUS";
+        case AUDIT_MAC_CONFIG_CHANGE: return "MAC_CONFIG_CHANGE";
+        case AUDIT_MAC_UNLBL_ALLOW: return "MAC_UNLBL_ALLOW";
+        case AUDIT_MAC_CIPSOV4_ADD: return "MAC_CIPSOV4_ADD";
+        case AUDIT_MAC_CIPSOV4_DEL: return "MAC_CIPSOV4_DEL";
+        case AUDIT_MAC_MAP_ADD: return "MAC_MAP_ADD";
+        case AUDIT_MAC_MAP_DEL: return "MAC_MAP_DEL";
+        case AUDIT_MAC_IPSEC_ADDSA: return "MAC_IPSEC_ADDSA";
+        case AUDIT_MAC_IPSEC_DELSA: return "MAC_IPSEC_DELSA";
+        case AUDIT_MAC_IPSEC_ADDSPD: return "MAC_IPSEC_ADDSPD";
+        case AUDIT_MAC_IPSEC_DELSPD: return "MAC_IPSEC_DELSPD";
+        case AUDIT_MAC_IPSEC_EVENT: return "MAC_IPSEC_EVENT";
+        case AUDIT_MAC_UNLBL_STCADD: return "MAC_UNLBL_STCADD";
+        case AUDIT_MAC_UNLBL_STCDEL: return "MAC_UNLBL_STCDEL";
+        case AUDIT_MAC_CALIPSO_ADD: return "MAC_CALIPSO_ADD";
+        case AUDIT_MAC_CALIPSO_DEL: return "MAC_CALIPSO_DEL";
+        case AUDIT_ANOM_PROMISCUOUS: return "ANOM_PROMISCUOUS";
+        case AUDIT_ANOM_ABEND: return "ANOM_ABEND";
+        case AUDIT_ANOM_LINK: return "ANOM_LINK";
+        case AUDIT_INTEGRITY_DATA: return "INTEGRITY_DATA";
+        case AUDIT_INTEGRITY_METADATA: return "INTEGRITY_METADATA";
+        case AUDIT_INTEGRITY_STATUS: return "INTEGRITY_STATUS";
+        case AUDIT_INTEGRITY_HASH: return "INTEGRITY_HASH";
+        case AUDIT_INTEGRITY_PCR: return "INTEGRITY_PCR";
+        case AUDIT_INTEGRITY_RULE: return "INTEGRITY_RULE";
+        case AUDIT_KERNEL: return "KERNEL";
+        case AUDIT_MESSAGE_TEXT_MAX: return "MESSAGE_TEXT_MAX";
+        default: return NULL;
+	}
+}
+
diff --git a/build/src/journal/journald-gperf.c b/build/src/journal/journald-gperf.c
new file mode 100644
index 0000000000..78197ce1e9
--- /dev/null
+++ b/build/src/journal/journald-gperf.c
@@ -0,0 +1,206 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/journal/journald-gperf.c ../src/journal/journald-gperf.gperf  */
+/* Computed positions: -k'9,18' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/journal/journald-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include <sys/socket.h>
+#include "conf-parser.h"
+#include "journald-server.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 31
+#define MIN_WORD_LENGTH 12
+#define MAX_WORD_LENGTH 28
+#define MIN_HASH_VALUE 12
+#define MAX_HASH_VALUE 53
+/* maximum key range = 42, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+journald_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54,  0, 15,  5, 54, 54,
+       0, 54, 54,  5, 54, 30, 31,  0, 54, 54,
+      54, 54,  0,  0, 30, 20, 54, 20, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 15, 54,  0,
+      54, 30, 54, 54, 54, 25, 54, 54, 54, 54,
+      54, 20, 10, 54, 54, 54, 15, 54, 15, 54,
+       5,  5, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+      54, 54, 54, 54, 54, 54
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[17]];
+      /*FALLTHROUGH*/
+      case 17:
+      case 16:
+      case 15:
+      case 14:
+      case 13:
+      case 12:
+      case 11:
+      case 10:
+      case 9:
+        hval += asso_values[(unsigned char)str[8]];
+        break;
+    }
+  return hval;
+}
+
+const struct ConfigPerfItem *
+journald_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 23 "../src/journal/journald-gperf.gperf"
+      {"Journal.Seal",               config_parse_bool,       0, offsetof(Server, seal)},
+#line 25 "../src/journal/journald-gperf.gperf"
+      {"Journal.Audit",              config_parse_tristate,   0, offsetof(Server, set_audit)},
+      {(char*)0},
+#line 21 "../src/journal/journald-gperf.gperf"
+      {"Journal.Storage",            config_parse_storage,    0, offsetof(Server, storage)},
+#line 24 "../src/journal/journald-gperf.gperf"
+      {"Journal.ReadKMsg",           config_parse_bool,       0, offsetof(Server, read_kmsg)},
+#line 51 "../src/journal/journald-gperf.gperf"
+      {"Journal.SplitMode",          config_parse_split_mode, 0, offsetof(Server, split_mode)},
+#line 40 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxFileSec",         config_parse_sec,        0, offsetof(Server, max_file_usec)},
+      {(char*)0},
+#line 48 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxLevelKMsg",       config_parse_log_level,  0, offsetof(Server, max_level_kmsg)},
+#line 22 "../src/journal/journald-gperf.gperf"
+      {"Journal.Compress",           config_parse_compress,   0, offsetof(Server, compress)},
+#line 34 "../src/journal/journald-gperf.gperf"
+      {"Journal.SystemMaxFiles",     config_parse_uint64,     0, offsetof(Server, system_storage.metrics.n_max_files)},
+#line 41 "../src/journal/journald-gperf.gperf"
+      {"Journal.ForwardToSyslog",    config_parse_bool,       0, offsetof(Server, forward_to_syslog)},
+      {(char*)0},
+#line 32 "../src/journal/journald-gperf.gperf"
+      {"Journal.SystemMaxFileSize",  config_parse_iec_uint64, 0, offsetof(Server, system_storage.metrics.max_size)},
+#line 35 "../src/journal/journald-gperf.gperf"
+      {"Journal.RuntimeMaxUse",      config_parse_iec_uint64, 0, offsetof(Server, runtime_storage.metrics.max_use)},
+#line 47 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxLevelSyslog",     config_parse_log_level,  0, offsetof(Server, max_level_syslog)},
+#line 38 "../src/journal/journald-gperf.gperf"
+      {"Journal.RuntimeMaxFiles",    config_parse_uint64,     0, offsetof(Server, runtime_storage.metrics.n_max_files)},
+#line 43 "../src/journal/journald-gperf.gperf"
+      {"Journal.ForwardToConsole",   config_parse_bool,       0, offsetof(Server, forward_to_console)},
+#line 28 "../src/journal/journald-gperf.gperf"
+      {"Journal.RateLimitInterval",  config_parse_sec,        0, offsetof(Server, ratelimit_interval)},
+#line 36 "../src/journal/journald-gperf.gperf"
+      {"Journal.RuntimeMaxFileSize", config_parse_iec_uint64, 0, offsetof(Server, runtime_storage.metrics.max_size)},
+#line 33 "../src/journal/journald-gperf.gperf"
+      {"Journal.SystemKeepFree",     config_parse_iec_uint64, 0, offsetof(Server, system_storage.metrics.keep_free)},
+#line 29 "../src/journal/journald-gperf.gperf"
+      {"Journal.RateLimitIntervalSec",config_parse_sec,       0, offsetof(Server, ratelimit_interval)},
+      {(char*)0},
+#line 50 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxLevelWall",       config_parse_log_level,  0, offsetof(Server, max_level_wall)},
+#line 46 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxLevelStore",      config_parse_log_level,  0, offsetof(Server, max_level_store)},
+#line 30 "../src/journal/journald-gperf.gperf"
+      {"Journal.RateLimitBurst",     config_parse_unsigned,   0, offsetof(Server, ratelimit_burst)},
+#line 26 "../src/journal/journald-gperf.gperf"
+      {"Journal.SyncIntervalSec",    config_parse_sec,        0, offsetof(Server, sync_interval_usec)},
+      {(char*)0},
+#line 31 "../src/journal/journald-gperf.gperf"
+      {"Journal.SystemMaxUse",       config_parse_iec_uint64, 0, offsetof(Server, system_storage.metrics.max_use)},
+#line 44 "../src/journal/journald-gperf.gperf"
+      {"Journal.ForwardToWall",      config_parse_bool,       0, offsetof(Server, forward_to_wall)},
+      {(char*)0},
+#line 49 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxLevelConsole",    config_parse_log_level,  0, offsetof(Server, max_level_console)},
+      {(char*)0},
+#line 45 "../src/journal/journald-gperf.gperf"
+      {"Journal.TTYPath",            config_parse_path,       0, offsetof(Server, tty_path)},
+#line 52 "../src/journal/journald-gperf.gperf"
+      {"Journal.LineMax",            config_parse_line_max,   0, offsetof(Server, line_max)},
+      {(char*)0},
+#line 39 "../src/journal/journald-gperf.gperf"
+      {"Journal.MaxRetentionSec",    config_parse_sec,        0, offsetof(Server, max_retention_usec)},
+      {(char*)0}, {(char*)0},
+#line 42 "../src/journal/journald-gperf.gperf"
+      {"Journal.ForwardToKMsg",      config_parse_bool,       0, offsetof(Server, forward_to_kmsg)},
+      {(char*)0},
+#line 37 "../src/journal/journald-gperf.gperf"
+      {"Journal.RuntimeKeepFree",    config_parse_iec_uint64, 0, offsetof(Server, runtime_storage.metrics.keep_free)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = journald_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/login/logind-gperf.c b/build/src/login/logind-gperf.c
new file mode 100644
index 0000000000..18ece385b2
--- /dev/null
+++ b/build/src/login/logind-gperf.c
@@ -0,0 +1,172 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/login/logind-gperf.c ../src/login/logind-gperf.gperf  */
+/* Computed positions: -k'10' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/login/logind-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "logind.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 26
+#define MIN_WORD_LENGTH 14
+#define MAX_WORD_LENGTH 34
+#define MIN_HASH_VALUE 14
+#define MAX_HASH_VALUE 49
+/* maximum key range = 36, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+logind_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50,  0, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+       0,  0, 50, 50, 50, 25, 50, 50, 20, 50,
+      50, 10,  5, 50, 10,  0,  0, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
+      50, 50, 50, 50, 50, 50
+    };
+  return len + asso_values[(unsigned char)str[9]];
+}
+
+const struct ConfigPerfItem *
+logind_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 20 "../src/login/logind-gperf.gperf"
+      {"Login.NAutoVTs",                     config_parse_n_autovts,             0, offsetof(Manager, n_autovts)},
+#line 21 "../src/login/logind-gperf.gperf"
+      {"Login.ReserveVT",                    config_parse_unsigned,              0, offsetof(Manager, reserve_vt)},
+#line 38 "../src/login/logind-gperf.gperf"
+      {"Login.IdleAction",                   config_parse_handle_action,         0, offsetof(Manager, idle_action)},
+#line 44 "../src/login/logind-gperf.gperf"
+      {"Login.SessionsMax",                  config_parse_uint64,                0, offsetof(Manager, sessions_max)},
+      {(char*)0},
+#line 39 "../src/login/logind-gperf.gperf"
+      {"Login.IdleActionSec",                config_parse_sec,                   0, offsetof(Manager, idle_action_usec)},
+#line 27 "../src/login/logind-gperf.gperf"
+      {"Login.HandlePowerKey",               config_parse_handle_action,         0, offsetof(Manager, handle_power_key)},
+#line 30 "../src/login/logind-gperf.gperf"
+      {"Login.HandleLidSwitch",              config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch)},
+#line 28 "../src/login/logind-gperf.gperf"
+      {"Login.HandleSuspendKey",             config_parse_handle_action,         0, offsetof(Manager, handle_suspend_key)},
+#line 37 "../src/login/logind-gperf.gperf"
+      {"Login.HoldoffTimeoutSec",            config_parse_sec,                   0, offsetof(Manager, holdoff_timeout_usec)},
+#line 29 "../src/login/logind-gperf.gperf"
+      {"Login.HandleHibernateKey",           config_parse_handle_action,         0, offsetof(Manager, handle_hibernate_key)},
+#line 42 "../src/login/logind-gperf.gperf"
+      {"Login.RemoveIPC",                    config_parse_bool,                  0, offsetof(Manager, remove_ipc)},
+#line 40 "../src/login/logind-gperf.gperf"
+      {"Login.RuntimeDirectorySize",         config_parse_tmpfs_size,            0, offsetof(Manager, runtime_dir_size)},
+#line 32 "../src/login/logind-gperf.gperf"
+      {"Login.HandleLidSwitchDocked",        config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch_docked)},
+#line 45 "../src/login/logind-gperf.gperf"
+      {"Login.UserTasksMax",                 config_parse_compat_user_tasks_max, 0, 0},
+#line 33 "../src/login/logind-gperf.gperf"
+      {"Login.PowerKeyIgnoreInhibited",      config_parse_bool,                  0, offsetof(Manager, power_key_ignore_inhibited)},
+#line 36 "../src/login/logind-gperf.gperf"
+      {"Login.LidSwitchIgnoreInhibited",     config_parse_bool,                  0, offsetof(Manager, lid_switch_ignore_inhibited)},
+#line 41 "../src/login/logind-gperf.gperf"
+      {"Login.RuntimeDirectoryInodesMax",    config_parse_uint64,                0, offsetof(Manager, runtime_dir_inodes)},
+#line 26 "../src/login/logind-gperf.gperf"
+      {"Login.UserStopDelaySec",             config_parse_sec,                   0, offsetof(Manager, user_stop_delay)},
+#line 35 "../src/login/logind-gperf.gperf"
+      {"Login.HibernateKeyIgnoreInhibited",  config_parse_bool,                  0, offsetof(Manager, hibernate_key_ignore_inhibited)},
+#line 31 "../src/login/logind-gperf.gperf"
+      {"Login.HandleLidSwitchExternalPower", config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch_ep)},
+      {(char*)0},
+#line 34 "../src/login/logind-gperf.gperf"
+      {"Login.SuspendKeyIgnoreInhibited",    config_parse_bool,                  0, offsetof(Manager, suspend_key_ignore_inhibited)},
+      {(char*)0}, {(char*)0},
+#line 23 "../src/login/logind-gperf.gperf"
+      {"Login.KillOnlyUsers",                config_parse_strv,                  0, offsetof(Manager, kill_only_users)},
+      {(char*)0}, {(char*)0},
+#line 24 "../src/login/logind-gperf.gperf"
+      {"Login.KillExcludeUsers",             config_parse_strv,                  0, offsetof(Manager, kill_exclude_users)},
+#line 22 "../src/login/logind-gperf.gperf"
+      {"Login.KillUserProcesses",            config_parse_bool,                  0, offsetof(Manager, kill_user_processes)},
+#line 43 "../src/login/logind-gperf.gperf"
+      {"Login.InhibitorsMax",                config_parse_uint64,                0, offsetof(Manager, inhibitors_max)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 25 "../src/login/logind-gperf.gperf"
+      {"Login.InhibitDelayMaxSec",           config_parse_sec,                   0, offsetof(Manager, inhibit_delay_max)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = logind_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/network/netdev-gperf.c b/build/src/network/netdev-gperf.c
new file mode 100644
index 0000000000..28983ca6e0
--- /dev/null
+++ b/build/src/network/netdev-gperf.c
@@ -0,0 +1,676 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/network/netdev-gperf.c ../src/network/netdev/netdev-gperf.gperf  */
+/* Computed positions: -k'2,5-6,8-9,15,18,20-21,23-24' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/network/netdev/netdev-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "bond.h"
+#include "bridge.h"
+#include "conf-parser.h"
+#include "geneve.h"
+#include "ipvlan.h"
+#include "macsec.h"
+#include "macvlan.h"
+#include "tunnel.h"
+#include "tuntap.h"
+#include "veth.h"
+#include "vlan-util.h"
+#include "vlan.h"
+#include "vxlan.h"
+#include "vrf.h"
+#include "netdev.h"
+#include "network-internal.h"
+#include "vxcan.h"
+#include "wireguard.h"
+#include "fou-tunnel.h"
+#include "l2tp-tunnel.h"
+#include "xfrm.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 188
+#define MIN_WORD_LENGTH 7
+#define MAX_WORD_LENGTH 40
+#define MIN_HASH_VALUE 8
+#define MAX_HASH_VALUE 484
+/* maximum key range = 477, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+network_netdev_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned short asso_values[] =
+    {
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485,   5, 485, 485, 485,
+       95,   0, 485, 485,   0, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485,   0,  20,  20,   0,  25,
+      135,  80,  10,  90, 485,  95,  10,   0,   0,  60,
+       15,   5,  50,  70,  75,   0,  50, 485,  50, 485,
+      485, 485, 485, 485, 485, 485, 485,   0,   5,   5,
+       30,   0,  10,  30, 200,   0, 485,  75,   5,  50,
+        5,   0,  30, 485,   0,   0,   5,  40,   0,   0,
+       30,  75,   5, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
+      485, 485, 485, 485, 485, 485
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[23]];
+      /*FALLTHROUGH*/
+      case 23:
+        hval += asso_values[(unsigned char)str[22]];
+      /*FALLTHROUGH*/
+      case 22:
+      case 21:
+        hval += asso_values[(unsigned char)str[20]];
+      /*FALLTHROUGH*/
+      case 20:
+        hval += asso_values[(unsigned char)str[19]];
+      /*FALLTHROUGH*/
+      case 19:
+      case 18:
+        hval += asso_values[(unsigned char)str[17]];
+      /*FALLTHROUGH*/
+      case 17:
+      case 16:
+      case 15:
+        hval += asso_values[(unsigned char)str[14]];
+      /*FALLTHROUGH*/
+      case 14:
+      case 13:
+      case 12:
+      case 11:
+      case 10:
+      case 9:
+        hval += asso_values[(unsigned char)str[8]];
+      /*FALLTHROUGH*/
+      case 8:
+        hval += asso_values[(unsigned char)str[7]];
+      /*FALLTHROUGH*/
+      case 7:
+      case 6:
+        hval += asso_values[(unsigned char)str[5]];
+      /*FALLTHROUGH*/
+      case 5:
+        hval += asso_values[(unsigned char)str[4]];
+      /*FALLTHROUGH*/
+      case 4:
+      case 3:
+      case 2:
+        hval += asso_values[(unsigned char)str[1]];
+        break;
+    }
+  return hval;
+}
+
+const struct ConfigPerfItem *
+network_netdev_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 174 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.User",                                 config_parse_string,                       0,                             offsetof(TunTap, user_name)},
+      {(char*)0}, {(char*)0},
+#line 45 "../src/network/netdev/netdev-gperf.gperf"
+      {"NetDev.Name",                              config_parse_ifname,                       0,                             offsetof(NetDev, ifname)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 88 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.Peer",                          config_parse_fou_tunnel_address,           0,                             offsetof(FouTunnel, peer)},
+#line 87 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.Local",                         config_parse_fou_tunnel_address,           0,                             offsetof(FouTunnel, local)},
+#line 48 "../src/network/netdev/netdev-gperf.gperf"
+      {"NetDev.MACAddress",                        config_parse_hwaddr,                       0,                             offsetof(NetDev, mac)},
+      {(char*)0},
+#line 86 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.PeerPort",                      config_parse_ip_port,                      0,                             offsetof(FouTunnel, peer_port)},
+#line 85 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.Port",                          config_parse_ip_port,                      0,                             offsetof(FouTunnel, port)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 83 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.Protocol",                      config_parse_ip_protocol,                  0,                             offsetof(FouTunnel, fou_protocol)},
+#line 192 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.UpDelaySec",                          config_parse_sec,                          0,                             offsetof(Bond, updelay)},
+#line 56 "../src/network/netdev/netdev-gperf.gperf"
+      {"IPVLAN.Mode",                              config_parse_ipvlan_mode,                  0,                             offsetof(IPVlan, mode)},
+#line 54 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACVLAN.Mode",                             config_parse_macvlan_mode,                 0,                             offsetof(MacVlan, mode)},
+#line 44 "../src/network/netdev/netdev-gperf.gperf"
+      {"NetDev.Description",                       config_parse_string,                       0,                             offsetof(NetDev, description)},
+      {(char*)0}, {(char*)0},
+#line 147 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsec.Port",                              config_parse_macsec_port,                  0,                             0},
+      {(char*)0},
+#line 190 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.MinLinks",                            config_parse_unsigned,                     0,                             offsetof(Bond, min_links)},
+#line 153 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.Key",            config_parse_macsec_key,                   0,                             0},
+      {(char*)0},
+#line 152 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.KeyId",          config_parse_macsec_key_id,                0,                             0},
+      {(char*)0},
+#line 154 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.KeyFile",        config_parse_macsec_key_file,              0,                             0},
+#line 155 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.Activate",       config_parse_macsec_sa_activate,           0,                             0},
+#line 104 "../src/network/netdev/netdev-gperf.gperf"
+      {"Peer.MACAddress",                          config_parse_hwaddr,                       0,                             offsetof(Veth, mac_peer)},
+#line 58 "../src/network/netdev/netdev-gperf.gperf"
+      {"IPVTAP.Mode",                              config_parse_ipvlan_mode,                  0,                             offsetof(IPVlan, mode)},
+#line 52 "../src/network/netdev/netdev-gperf.gperf"
+      {"VLAN.LooseBinding",                        config_parse_tristate,                     0,                             offsetof(VLan, loose_binding)},
+#line 151 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.PacketNumber",   config_parse_macsec_packet_number,         0,                             0},
+#line 176 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.Mode",                                config_parse_bond_mode,                    0,                             offsetof(Bond, mode)},
+#line 156 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecTransmitAssociation.UseForEncoding", config_parse_macsec_use_for_encoding,      0,                             0},
+#line 200 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.MaxAgeSec",                         config_parse_sec,                          0,                             offsetof(Bridge, max_age)},
+      {(char*)0},
+#line 168 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.User",                                 config_parse_string,                       0,                             offsetof(TunTap, user_name)},
+#line 148 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsec.Encrypt",                           config_parse_tristate,                     0,                             offsetof(MACsec, encrypt)},
+      {(char*)0}, {(char*)0},
+#line 195 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.LearnPacketIntervalSec",              config_parse_sec,                          0,                             offsetof(Bond, lp_interval)},
+#line 161 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.Key",             config_parse_macsec_key,                   0,                             0},
+#line 157 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.Port",            config_parse_macsec_port,                  0,                             0},
+#line 160 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.KeyId",           config_parse_macsec_key_id,                0,                             0},
+#line 68 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Mode",                              config_parse_ip6tnl_mode,                  0,                             offsetof(Tunnel, ip6tnl_mode)},
+#line 162 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.KeyFile",         config_parse_macsec_key_file,              0,                             0},
+#line 163 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.Activate",        config_parse_macsec_sa_activate,           0,                             0},
+#line 171 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.MultiQueue",                           config_parse_bool,                         0,                             offsetof(TunTap, multi_queue)},
+#line 158 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.MACAddress",      config_parse_macsec_hw_address,            0,                             0},
+      {(char*)0},
+#line 159 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveAssociation.PacketNumber",    config_parse_macsec_packet_number,         0,                             0},
+#line 205 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.DefaultPVID",                       config_parse_default_port_vlanid,          0,                             offsetof(Bridge, default_pvid)},
+#line 103 "../src/network/netdev/netdev-gperf.gperf"
+      {"Peer.Name",                                config_parse_ifname,                       0,                             offsetof(Veth, ifname_peer)},
+#line 105 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXCAN.Peer",                               config_parse_ifname,                       0,                             offsetof(VxCan, ifname_peer)},
+#line 108 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.Group",                              config_parse_vxlan_address,                0,                             offsetof(VxLan, group)},
+#line 60 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Local",                             config_parse_tunnel_address,               0,                             offsetof(Tunnel, local)},
+#line 183 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.ARPAllTargets",                       config_parse_bond_arp_all_targets,         0,                             offsetof(Bond, arp_all_targets)},
+      {(char*)0},
+#line 131 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.PortRange",                          config_parse_port_range,                   0,                             0},
+#line 109 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.Local",                              config_parse_vxlan_address,                0,                             offsetof(VxLan, local)},
+      {(char*)0}, {(char*)0},
+#line 84 "../src/network/netdev/netdev-gperf.gperf"
+      {"FooOverUDP.Encapsulation",                 config_parse_fou_encap_type,               0,                             offsetof(FouTunnel, fou_encap_type)},
+      {(char*)0}, {(char*)0},
+#line 113 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.MacLearning",                        config_parse_bool,                         0,                             offsetof(VxLan, learning)},
+#line 198 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.AdActorSystem",                       config_parse_ad_actor_system,              0,                             offsetof(Bond, ad_actor_system)},
+#line 173 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.VNetHeader",                           config_parse_bool,                         0,                             offsetof(TunTap, vnet_hdr)},
+#line 133 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.FlowLabel",                          config_parse_flow_label,                   0,                             0},
+      {(char*)0}, {(char*)0},
+#line 53 "../src/network/netdev/netdev-gperf.gperf"
+      {"VLAN.ReorderHeader",                       config_parse_tristate,                     0,                             offsetof(VLan, reorder_hdr)},
+      {(char*)0},
+#line 185 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.ResendIGMP",                          config_parse_unsigned,                     0,                             offsetof(Bond, resend_igmp)},
+#line 196 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.AdActorSystemPriority",               config_parse_ad_actor_sys_prio,            0,                             offsetof(Bond, ad_actor_sys_prio)},
+#line 120 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDPChecksum",                        config_parse_bool,                         0,                             offsetof(VxLan, udpcsum)},
+#line 179 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.AdSelect",                            config_parse_bond_ad_select,               0,                             offsetof(Bond, ad_select)},
+#line 51 "../src/network/netdev/netdev-gperf.gperf"
+      {"VLAN.MVRP",                                config_parse_tristate,                     0,                             offsetof(VLan, mvrp)},
+#line 47 "../src/network/netdev/netdev-gperf.gperf"
+      {"NetDev.MTUBytes",                          config_parse_mtu,                          AF_UNSPEC,                     offsetof(NetDev, mtu)},
+#line 182 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.ARPValidate",                         config_parse_bond_arp_validate,            0,                             offsetof(Bond, arp_validate)},
+#line 55 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACVTAP.Mode",                             config_parse_macvlan_mode,                 0,                             offsetof(MacVlan, mode)},
+#line 107 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.Id",                                 config_parse_uint32,                       0,                             offsetof(VxLan, vni) /* deprecated */},
+#line 117 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.L3MissNotification",                 config_parse_bool,                         0,                             offsetof(VxLan, l3miss)},
+#line 70 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.CopyDSCP",                          config_parse_bool,                         0,                             offsetof(Tunnel, copy_dscp)},
+#line 132 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.DestinationPort",                    config_parse_ip_port,                      0,                             offsetof(VxLan, dest_port)},
+#line 193 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.DownDelaySec",                        config_parse_sec,                          0,                             offsetof(Bond, downdelay)},
+      {(char*)0},
+#line 165 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.MultiQueue",                           config_parse_bool,                         0,                             offsetof(TunTap, multi_queue)},
+#line 188 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.AllSlavesActive",                     config_parse_bool,                         0,                             offsetof(Bond, all_slaves_active)},
+      {(char*)0}, {(char*)0},
+#line 197 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.AdUserPortKey",                       config_parse_ad_user_port_key,             0,                             offsetof(Bond, ad_user_port_key)},
+#line 172 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.PacketInfo",                           config_parse_bool,                         0,                             offsetof(TunTap, packet_info)},
+#line 78 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Encapsulation",                     config_parse_fou_encap_type,               0,                             offsetof(Tunnel, fou_encap_type)},
+#line 46 "../src/network/netdev/netdev-gperf.gperf"
+      {"NetDev.Kind",                              config_parse_netdev_kind,                  0,                             offsetof(NetDev, kind)},
+      {(char*)0},
+#line 61 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Remote",                            config_parse_tunnel_address,               0,                             offsetof(Tunnel, remote)},
+#line 199 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.HelloTimeSec",                      config_parse_sec,                          0,                             offsetof(Bridge, hello_time)},
+      {(char*)0},
+#line 128 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.GroupPolicyExtension",               config_parse_bool,                         0,                             offsetof(VxLan, group_policy)},
+#line 49 "../src/network/netdev/netdev-gperf.gperf"
+      {"VLAN.Id",                                  config_parse_vlanid,                       0,                             offsetof(VLan, id)},
+#line 130 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.MaximumFDBEntries",                  config_parse_unsigned,                     0,                             offsetof(VxLan, max_fdb)},
+#line 209 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.VLANProtocol",                      config_parse_vlanprotocol,                 0,                             offsetof(Bridge, vlan_protocol)},
+      {(char*)0}, {(char*)0},
+#line 110 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.Remote",                             config_parse_vxlan_address,                0,                             offsetof(VxLan, remote)},
+#line 191 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.MIIMonitorSec",                       config_parse_sec,                          0,                             offsetof(Bond, miimon)},
+#line 167 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.VNetHeader",                           config_parse_bool,                         0,                             offsetof(TunTap, vnet_hdr)},
+#line 186 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.PacketsPerSlave",                     config_parse_unsigned,                     0,                             offsetof(Bond, packets_per_slave)},
+#line 184 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.PrimaryReselectPolicy",               config_parse_bond_primary_reselect,        0,                             offsetof(Bond, primary_reselect)},
+#line 170 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.OneQueue",                             config_parse_warn_compat,                  DISABLED_LEGACY,               0},
+#line 187 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.GratuitousARP",                       config_parse_unsigned,                     0,                             offsetof(Bond, num_grat_arp)},
+      {(char*)0},
+#line 93 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.Local",                               config_parse_l2tp_tunnel_address,          0,                             offsetof(L2tpTunnel, local)},
+      {(char*)0},
+#line 181 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.ARPIPTargets",                        config_parse_arp_ip_target_address,        0,                             0},
+#line 127 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.FDBAgeingSec",                       config_parse_sec,                          0,                             offsetof(VxLan, fdb_ageing)},
+#line 194 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.ARPIntervalSec",                      config_parse_sec,                          0,                             offsetof(Bond, arp_interval)},
+#line 129 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.GenericProtocolExtension",           config_parse_bool,                         0,                             offsetof(VxLan, generic_protocol_extension)},
+      {(char*)0},
+#line 144 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.DestinationPort",                   config_parse_ip_port,                      0,                             offsetof(Geneve, dest_port)},
+#line 206 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.MulticastQuerier",                  config_parse_tristate,                     0,                             offsetof(Bridge, mcast_querier)},
+#line 114 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.ARPProxy",                           config_parse_bool,                         0,                             offsetof(VxLan, arp_proxy)},
+#line 203 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.Priority",                          config_parse_uint16,                       0,                             offsetof(Bridge, priority)},
+      {(char*)0},
+#line 90 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.PeerTunnelId",                        config_parse_l2tp_tunnel_id,               0,                             offsetof(L2tpTunnel, peer_tunnel_id)},
+#line 189 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.DynamicTransmitLoadBalancing",        config_parse_tristate,                     0,                             offsetof(Bond, tlb_dynamic_lb)},
+#line 213 "../src/network/netdev/netdev-gperf.gperf"
+      {"VRF.Table",                                config_parse_uint32,                       0,                             offsetof(Vrf, table)},
+      {(char*)0},
+#line 212 "../src/network/netdev/netdev-gperf.gperf"
+      {"VRF.TableId",                              config_parse_uint32,                       0,                             offsetof(Vrf, table) /* deprecated */},
+      {(char*)0}, {(char*)0},
+#line 166 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.PacketInfo",                           config_parse_bool,                         0,                             offsetof(TunTap, packet_info)},
+#line 208 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.VLANFiltering",                     config_parse_tristate,                     0,                             offsetof(Bridge, vlan_filtering)},
+      {(char*)0},
+#line 67 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.DiscoverPathMTU",                   config_parse_bool,                         0,                             offsetof(Tunnel, pmtudisc)},
+#line 73 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.AssignToLoopback",                  config_parse_bool,                         0,                             offsetof(Tunnel, assign_to_loopback)},
+#line 112 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.TTL",                                config_parse_vxlan_ttl,                    0,                             offsetof(VxLan, ttl)},
+#line 64 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Key",                               config_parse_tunnel_key,                   0,                             offsetof(Tunnel, key)},
+#line 134 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.IPDoNotFragment",                    config_parse_df,                           0,                             offsetof(VxLan, df)},
+      {(char*)0}, {(char*)0},
+#line 106 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.VNI",                                config_parse_uint32,                       0,                             offsetof(VxLan, vni)},
+#line 201 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.AgeingTimeSec",                     config_parse_sec,                          0,                             offsetof(Bridge, ageing_time)},
+#line 226 "../src/network/netdev/netdev-gperf.gperf"
+      {"Xfrm.Independent",                         config_parse_bool,                         0,                             offsetof(Xfrm, independent)},
+#line 119 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDPCheckSum",                        config_parse_bool,                         0,                             offsetof(VxLan, udpcsum)},
+#line 92 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.UDPDestinationPort",                  config_parse_ip_port,                      0,                             offsetof(L2tpTunnel, l2tp_udp_dport)},
+#line 175 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tap.Group",                                config_parse_string,                       0,                             offsetof(TunTap, group_name)},
+      {(char*)0},
+#line 66 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.OutputKey",                         config_parse_tunnel_key,                   0,                             offsetof(Tunnel, okey)},
+#line 164 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.OneQueue",                             config_parse_warn_compat,                  DISABLED_LEGACY,               0},
+#line 136 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.Remote",                            config_parse_geneve_address,               0,                             offsetof(Geneve, remote)},
+#line 207 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.MulticastSnooping",                 config_parse_tristate,                     0,                             offsetof(Bridge, mcast_snooping)},
+      {(char*)0},
+#line 215 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuard.FwMark",                         config_parse_unsigned,                     0,                             offsetof(Wireguard, fwmark) /* deprecated */},
+#line 57 "../src/network/netdev/netdev-gperf.gperf"
+      {"IPVLAN.Flags",                             config_parse_ipvlan_flags,                 0,                             offsetof(IPVlan, flags)},
+#line 118 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.RouteShortCircuit",                  config_parse_bool,                         0,                             offsetof(VxLan, route_short_circuit)},
+#line 50 "../src/network/netdev/netdev-gperf.gperf"
+      {"VLAN.GVRP",                                config_parse_tristate,                     0,                             offsetof(VLan, gvrp)},
+#line 71 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.EncapsulationLimit",                config_parse_encap_limit,                  0,                             offsetof(Tunnel, encap_limit)},
+      {(char*)0},
+#line 180 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.FailOverMACPolicy",                   config_parse_bond_fail_over_mac,           0,                             offsetof(Bond, fail_over_mac)},
+#line 80 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.ERSPANIndex",                       config_parse_uint32,                       0,                             offsetof(Tunnel, erspan_index)},
+      {(char*)0},
+#line 216 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuard.ListenPort",                     config_parse_wireguard_listen_port,        0,                             offsetof(Wireguard, port)},
+#line 178 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.LACPTransmitRate",                    config_parse_bond_lacp_rate,               0,                             offsetof(Bond, lacp_rate)},
+#line 214 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuard.FirewallMark",                   config_parse_unsigned,                     0,                             offsetof(Wireguard, fwmark)},
+#line 74 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.AllowLocalRemote",                  config_parse_tristate,                     0,                             offsetof(Tunnel, allow_localremote)},
+      {(char*)0},
+#line 69 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.IPv6FlowLabel",                     config_parse_ipv6_flowlabel,               0,                             offsetof(Tunnel, ipv6_flowlabel)},
+      {(char*)0},
+#line 59 "../src/network/netdev/netdev-gperf.gperf"
+      {"IPVTAP.Flags",                             config_parse_ipvlan_flags,                 0,                             offsetof(IPVlan, flags)},
+      {(char*)0}, {(char*)0},
+#line 210 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.STP",                               config_parse_tristate,                     0,                             offsetof(Bridge, stp)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 116 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.L2MissNotification",                 config_parse_bool,                         0,                             offsetof(VxLan, l2miss)},
+#line 62 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.TOS",                               config_parse_unsigned,                     0,                             offsetof(Tunnel, tos)},
+#line 96 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.UDPCheckSum",                         config_parse_bool,                         0,                             offsetof(L2tpTunnel, udp_csum)},
+      {(char*)0},
+#line 72 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.Independent",                       config_parse_bool,                         0,                             offsetof(Tunnel, independent)},
+#line 111 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.TOS",                                config_parse_unsigned,                     0,                             offsetof(VxLan, tos)},
+#line 115 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.ReduceARPProxy",                     config_parse_bool,                         0,                             offsetof(VxLan, arp_proxy)},
+      {(char*)0},
+#line 75 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.FooOverUDP",                        config_parse_bool,                         0,                             offsetof(Tunnel, fou_tunnel)},
+#line 89 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.TunnelId",                            config_parse_l2tp_tunnel_id,               0,                             offsetof(L2tpTunnel, tunnel_id)},
+#line 169 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tun.Group",                                config_parse_string,                       0,                             offsetof(TunTap, group_name)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 177 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bond.TransmitHashPolicy",                  config_parse_bond_xmit_hash_policy,        0,                             offsetof(Bond, xmit_hash_policy)},
+      {(char*)0},
+#line 63 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.TTL",                               config_parse_unsigned,                     0,                             offsetof(Tunnel, ttl)},
+      {(char*)0}, {(char*)0},
+#line 204 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.GroupForwardMask",                  config_parse_uint16,                       0,                             offsetof(Bridge, group_fwd_mask)},
+      {(char*)0}, {(char*)0},
+#line 94 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.Remote",                              config_parse_l2tp_tunnel_address,          0,                             offsetof(L2tpTunnel, remote)},
+      {(char*)0},
+#line 224 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.PersistentKeepalive",        config_parse_wireguard_keepalive,          0,                             0},
+      {(char*)0},
+#line 39 "../src/network/netdev/netdev-gperf.gperf"
+      {"Match.Host",                               config_parse_net_condition,                CONDITION_HOST,                offsetof(NetDev, conditions)},
+#line 225 "../src/network/netdev/netdev-gperf.gperf"
+      {"Xfrm.InterfaceId",                         config_parse_uint32,                       0,                             offsetof(Xfrm, if_id)},
+      {(char*)0},
+#line 82 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.ISATAP",                            config_parse_tristate,                     0,                             offsetof(Tunnel, isatap)},
+#line 219 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.AllowedIPs",                 config_parse_wireguard_allowed_ips,        0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 91 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.UDPSourcePort",                       config_parse_ip_port,                      0,                             offsetof(L2tpTunnel, l2tp_udp_sport)},
+#line 42 "../src/network/netdev/netdev-gperf.gperf"
+      {"Match.KernelVersion",                      config_parse_net_condition,                CONDITION_KERNEL_VERSION,      offsetof(NetDev, conditions)},
+      {(char*)0},
+#line 81 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.SerializeTunneledPackets",          config_parse_tristate,                     0,                             offsetof(Tunnel, gre_erspan_sequence)},
+#line 126 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.RemoteChecksumRx",                   config_parse_bool,                         0,                             offsetof(VxLan, remote_csum_rx)},
+      {(char*)0},
+#line 135 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.Id",                                config_parse_geneve_vni,                   0,                             offsetof(Geneve, id)},
+#line 65 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.InputKey",                          config_parse_tunnel_key,                   0,                             offsetof(Tunnel, ikey)},
+#line 102 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TPSession.Name",                         config_parse_l2tp_session_name,            0,                             0},
+#line 220 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.Endpoint",                   config_parse_wireguard_endpoint,           0,                             0},
+#line 43 "../src/network/netdev/netdev-gperf.gperf"
+      {"Match.Architecture",                       config_parse_net_condition,                CONDITION_ARCHITECTURE,        offsetof(NetDev, conditions)},
+      {(char*)0},
+#line 40 "../src/network/netdev/netdev-gperf.gperf"
+      {"Match.Virtualization",                     config_parse_net_condition,                CONDITION_VIRTUALIZATION,      offsetof(NetDev, conditions)},
+      {(char*)0},
+#line 79 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.IPv6RapidDeploymentPrefix",         config_parse_6rd_prefix,                   0,                             0},
+      {(char*)0},
+#line 122 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDP6ZeroChecksumRx",                 config_parse_bool,                         0,                             offsetof(VxLan, udp6zerocsumrx)},
+      {(char*)0}, {(char*)0},
+#line 211 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.MulticastIGMPVersion",              config_parse_uint8,                        0,                             offsetof(Bridge, igmp_version)},
+#line 139 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.UDPChecksum",                       config_parse_bool,                         0,                             offsetof(Geneve, udpcsum)},
+      {(char*)0},
+#line 137 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.TOS",                               config_parse_uint8,                        0,                             offsetof(Geneve, tos)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 149 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveChannel.Port",                config_parse_macsec_port,                  0,                             0},
+      {(char*)0},
+#line 125 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.RemoteChecksumTx",                   config_parse_bool,                         0,                             offsetof(VxLan, remote_csum_tx)},
+      {(char*)0},
+#line 97 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.UDP6CheckSumRx",                      config_parse_bool,                         0,                             offsetof(L2tpTunnel, udp6_csum_rx)},
+      {(char*)0},
+#line 146 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.FlowLabel",                         config_parse_geneve_flow_label,            0,                             0},
+#line 202 "../src/network/netdev/netdev-gperf.gperf"
+      {"Bridge.ForwardDelaySec",                   config_parse_sec,                          0,                             offsetof(Bridge, forward_delay)},
+      {(char*)0}, {(char*)0},
+#line 138 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.TTL",                               config_parse_geneve_ttl,                   0,                             offsetof(Geneve, ttl)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 124 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDP6ZeroChecksumTx",                 config_parse_bool,                         0,                             offsetof(VxLan, udp6zerocsumtx)},
+      {(char*)0}, {(char*)0},
+#line 95 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.EncapsulationType",                   config_parse_l2tp_encap_type,              0,                             offsetof(L2tpTunnel, l2tp_encap_type)},
+      {(char*)0}, {(char*)0},
+#line 77 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.FOUSourcePort",                     config_parse_ip_port,                      0,                             offsetof(Tunnel, encap_src_port)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 76 "../src/network/netdev/netdev-gperf.gperf"
+      {"Tunnel.FOUDestinationPort",                config_parse_ip_port,                      0,                             offsetof(Tunnel, fou_destination_port)},
+#line 150 "../src/network/netdev/netdev-gperf.gperf"
+      {"MACsecReceiveChannel.MACAddress",          config_parse_macsec_hw_address,            0,                             0},
+      {(char*)0}, {(char*)0},
+#line 98 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TP.UDP6CheckSumTx",                      config_parse_bool,                         0,                             offsetof(L2tpTunnel, udp6_csum_tx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 100 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TPSession.PeerSessionId",                config_parse_l2tp_session_id,              0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 41 "../src/network/netdev/netdev-gperf.gperf"
+      {"Match.KernelCommandLine",                  config_parse_net_condition,                CONDITION_KERNEL_COMMAND_LINE, offsetof(NetDev, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 141 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.UDP6ZeroChecksumRx",                config_parse_bool,                         0,                             offsetof(Geneve, udp6zerocsumrx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 99 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TPSession.SessionId",                    config_parse_l2tp_session_id,              0,                             0},
+      {(char*)0}, {(char*)0},
+#line 121 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDP6ZeroCheckSumRx",                 config_parse_bool,                         0,                             offsetof(VxLan, udp6zerocsumrx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 222 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.PresharedKey",               config_parse_wireguard_preshared_key,      0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 223 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.PresharedKeyFile",           config_parse_wireguard_preshared_key_file, 0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 143 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.UDP6ZeroChecksumTx",                config_parse_bool,                         0,                             offsetof(Geneve, udp6zerocsumtx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 123 "../src/network/netdev/netdev-gperf.gperf"
+      {"VXLAN.UDP6ZeroCheckSumTx",                 config_parse_bool,                         0,                             offsetof(VxLan, udp6zerocsumtx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 217 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuard.PrivateKey",                     config_parse_wireguard_private_key,        0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 221 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuardPeer.PublicKey",                  config_parse_wireguard_public_key,         0,                             0},
+      {(char*)0},
+#line 140 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.UDP6ZeroCheckSumRx",                config_parse_bool,                         0,                             offsetof(Geneve, udp6zerocsumrx)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 142 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.UDP6ZeroCheckSumTx",                config_parse_bool,                         0,                             offsetof(Geneve, udp6zerocsumtx)},
+      {(char*)0},
+#line 145 "../src/network/netdev/netdev-gperf.gperf"
+      {"GENEVE.IPDoNotFragment",                   config_parse_geneve_df,                    0,                             offsetof(Geneve, geneve_df)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 101 "../src/network/netdev/netdev-gperf.gperf"
+      {"L2TPSession.Layer2SpecificHeader",         config_parse_l2tp_session_l2spec,          0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 218 "../src/network/netdev/netdev-gperf.gperf"
+      {"WireGuard.PrivateKeyFile",                 config_parse_wireguard_private_key_file,   0,                             0}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = network_netdev_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/network/networkd-gperf.c b/build/src/network/networkd-gperf.c
new file mode 100644
index 0000000000..96b3fe2611
--- /dev/null
+++ b/build/src/network/networkd-gperf.c
@@ -0,0 +1,76 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/network/networkd-gperf.c ../src/network/networkd-gperf.gperf  */
+/* Computed positions: -k'' */
+
+#line 1 "../src/network/networkd-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "networkd-conf.h"
+#include "networkd-manager.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 5
+#define MIN_WORD_LENGTH 13
+#define MAX_WORD_LENGTH 29
+#define MIN_HASH_VALUE 13
+#define MAX_HASH_VALUE 29
+/* maximum key range = 17, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+/*ARGSUSED*/
+static unsigned int
+networkd_gperf_hash (register const char *str, register size_t len)
+{
+  return len;
+}
+
+const struct ConfigPerfItem *
+networkd_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 24 "../src/network/networkd-gperf.gperf"
+      {"DHCP.DUIDType",                 config_parse_duid_type,                 0,          offsetof(Manager, duid)},
+      {(char*)0}, {(char*)0},
+#line 25 "../src/network/networkd-gperf.gperf"
+      {"DHCP.DUIDRawData",              config_parse_duid_rawdata,              0,          offsetof(Manager, duid)},
+      {(char*)0},
+#line 21 "../src/network/networkd-gperf.gperf"
+      {"Network.SpeedMeter",            config_parse_bool,                      0,          offsetof(Manager, use_speed_meter)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 23 "../src/network/networkd-gperf.gperf"
+      {"Network.ManageForeignRoutes",   config_parse_bool,                      0,          offsetof(Manager, manage_foreign_routes)},
+      {(char*)0},
+#line 22 "../src/network/networkd-gperf.gperf"
+      {"Network.SpeedMeterIntervalSec", config_parse_sec,                       0,          offsetof(Manager, speed_meter_interval_usec)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = networkd_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/network/networkd-network-gperf.c b/build/src/network/networkd-network-gperf.c
new file mode 100644
index 0000000000..945ee02954
--- /dev/null
+++ b/build/src/network/networkd-network-gperf.c
@@ -0,0 +1,1297 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/network/networkd-network-gperf.c ../src/network/networkd-network-gperf.gperf  */
+/* Computed positions: -k'1,6,9-10,12,16,20,24,29,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/network/networkd-network-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "netem.h"
+#include "network-internal.h"
+#include "networkd-can.h"
+#include "networkd-conf.h"
+#include "networkd-dhcp-common.h"
+#include "networkd-dhcp-server.h"
+#include "networkd-dhcp4.h"
+#include "networkd-dhcp6.h"
+#include "networkd-ipv4ll.h"
+#include "networkd-ndisc.h"
+#include "networkd-network.h"
+#include "qdisc.h"
+#include "tclass.h"
+#include "vlan-util.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 388
+#define MIN_WORD_LENGTH 8
+#define MAX_WORD_LENGTH 69
+#define MIN_HASH_VALUE 18
+#define MAX_HASH_VALUE 1299
+/* maximum key range = 1282, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+network_network_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned short asso_values[] =
+    {
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300,   80,   25, 1300, 1300,
+         0, 1300,    0, 1300,  175, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300,  105,   65,   90,    0,  465,
+       170,  105,  420,   60, 1300,    0,  175,  215,   60,  385,
+        25,  170,    0,   30,   30,  360,  395,   10,    0, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300,    0,  180,   10,
+       100,    0,  140,    5,  265,    5, 1300,   10,    0,  205,
+         0,   10,  365,   95,    5,    0,    5,   30,    0,   40,
+       225,  380,   30, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
+      1300, 1300, 1300, 1300, 1300, 1300
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[28]];
+      /*FALLTHROUGH*/
+      case 28:
+      case 27:
+      case 26:
+      case 25:
+      case 24:
+        hval += asso_values[(unsigned char)str[23]];
+      /*FALLTHROUGH*/
+      case 23:
+      case 22:
+      case 21:
+      case 20:
+        hval += asso_values[(unsigned char)str[19]];
+      /*FALLTHROUGH*/
+      case 19:
+      case 18:
+      case 17:
+      case 16:
+        hval += asso_values[(unsigned char)str[15]];
+      /*FALLTHROUGH*/
+      case 15:
+      case 14:
+      case 13:
+      case 12:
+        hval += asso_values[(unsigned char)str[11]];
+      /*FALLTHROUGH*/
+      case 11:
+      case 10:
+        hval += asso_values[(unsigned char)str[9]];
+      /*FALLTHROUGH*/
+      case 9:
+        hval += asso_values[(unsigned char)str[8]];
+      /*FALLTHROUGH*/
+      case 8:
+      case 7:
+      case 6:
+        hval += asso_values[(unsigned char)str[5]];
+      /*FALLTHROUGH*/
+      case 5:
+      case 4:
+      case 3:
+      case 2:
+      case 1:
+        hval += asso_values[(unsigned char)str[0]];
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct ConfigPerfItem *
+network_network_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 188 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.SendRelease",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_send_release)},
+      {(char*)0},
+#line 407 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.RouteTable",                             config_parse_section_route_table,                         0,                             0},
+      {(char*)0}, {(char*)0},
+#line 189 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.SendDecline",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_send_decline)},
+      {(char*)0},
+#line 175 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.Hostname",                             config_parse_hostname,                                    0,                             offsetof(Network, dhcp_hostname)},
+#line 170 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseRoutes",                            config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_routes)},
+#line 169 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseDomains",                           config_parse_dhcp_use_domains,                            0,                             offsetof(Network, dhcp_use_domains)},
+#line 168 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseHostname",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_hostname)},
+      {(char*)0},
+#line 413 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseDomainName",                        config_parse_dhcp_use_domains,                            0,                             offsetof(Network, dhcp_use_domains)},
+      {(char*)0},
+#line 187 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.ListenPort",                           config_parse_uint16,                                      0,                             offsetof(Network, dhcp_client_port)},
+#line 185 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseTimezone",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_timezone)},
+      {(char*)0},
+#line 367 "../src/network/networkd-network-gperf.gperf"
+      {"PIE.Handle",                                  config_parse_qdisc_handle,                                QDISC_KIND_PIE,                0},
+#line 190 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.BlackList",                            config_parse_dhcp_black_listed_ip_address,                0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 406 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.RouteMetric",                            config_parse_dhcp_route_metric,                           0,                             0},
+      {(char*)0},
+#line 128 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.Table",                     config_parse_routing_policy_rule_table,                   0,                             0},
+      {(char*)0},
+#line 366 "../src/network/networkd-network-gperf.gperf"
+      {"PIE.Parent",                                  config_parse_qdisc_parent,                                QDISC_KIND_PIE,                0},
+      {(char*)0},
+#line 139 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.User",                      config_parse_routing_policy_rule_uid_range,               0,                             0},
+      {(char*)0},
+#line 220 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.DNS",                              config_parse_dhcp_server_dns,                             0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 137 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.InvertRule",                config_parse_routing_policy_rule_invert,                  0,                             0},
+      {(char*)0},
+#line 368 "../src/network/networkd-network-gperf.gperf"
+      {"PIE.PacketLimit",                             config_parse_pie_packet_limit,                            QDISC_KIND_PIE,                0},
+#line 405 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.DUIDRawData",                            config_parse_duid_rawdata,                                0,                             offsetof(Network, duid)},
+#line 184 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RouteTable",                           config_parse_section_route_table,                         0,                             0},
+#line 136 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.DestinationPort",           config_parse_routing_policy_rule_port_range,              0,                             0},
+      {(char*)0},
+#line 131 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.To",                        config_parse_routing_policy_rule_prefix,                  0,                             0},
+#line 400 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.RequestBroadcast",                       config_parse_bool,                                        0,                             offsetof(Network, dhcp_broadcast)},
+      {(char*)0},
+#line 135 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.SourcePort",                config_parse_routing_policy_rule_port_range,              0,                             0},
+      {(char*)0},
+#line 132 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.IncomingInterface",         config_parse_routing_policy_rule_device,                  0,                             0},
+      {(char*)0}, {(char*)0},
+#line 165 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseNTP",                               config_parse_dhcp_use_ntp,                                0,                             0},
+#line 409 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.IAID",                                   config_parse_iaid,                                        0,                             0},
+#line 129 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.FirewallMark",              config_parse_routing_policy_rule_fwmark_mask,             0,                             0},
+      {(char*)0}, {(char*)0},
+#line 183 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RouteMetric",                          config_parse_dhcp_route_metric,                           0,                             0},
+#line 224 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.SIP",                              config_parse_dhcp_server_sip,                             0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 134 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.IPProtocol",                config_parse_routing_policy_rule_ip_protocol,             0,                             0},
+#line 232 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.PoolSize",                         config_parse_uint32,                                      0,                             offsetof(Network, dhcp_server_pool_size)},
+#line 191 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.IPServiceType",                        config_parse_dhcp_ip_service_type,                        0,                             offsetof(Network, ip_service_type)},
+      {(char*)0},
+#line 225 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.POP3Servers",                      config_parse_dhcp_server_pop3_servers,                    0,                             0},
+      {(char*)0},
+#line 230 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.Timezone",                         config_parse_timezone,                                    0,                             offsetof(Network, dhcp_server_timezone)},
+#line 244 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.Learning",                             config_parse_tristate,                                    0,                             offsetof(Network, learning)},
+      {(char*)0},
+#line 226 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.SMTPServers",                      config_parse_dhcp_server_smtp_servers,                    0,                             0},
+#line 164 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RoutesToDNS",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_routes_to_dns)},
+      {(char*)0},
+#line 81 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Domains",                             config_parse_domains,                                     0,                             0},
+#line 235 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.Cost",                                 config_parse_uint32,                                      0,                             offsetof(Network, cost)},
+      {(char*)0},
+#line 75 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DefaultRouteOnDevice",                config_parse_bool,                                        0,                             offsetof(Network, default_route_on_device)},
+      {(char*)0},
+#line 133 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.OutgoingInterface",         config_parse_routing_policy_rule_device,                  0,                             0},
+      {(char*)0}, {(char*)0},
+#line 166 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseSIP",                               config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_sip)},
+#line 57 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Description",                         config_parse_string,                                      0,                             offsetof(Network, description)},
+#line 369 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairBlue.Parent",                   config_parse_qdisc_parent,                                QDISC_KIND_SFB,                0},
+      {(char*)0}, {(char*)0},
+#line 163 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseDNS",                               config_parse_dhcp_use_dns,                                0,                             0},
+#line 222 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.NTP",                              config_parse_dhcp_server_ntp,                             0,                             0},
+#line 218 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.DefaultLeaseTimeSec",              config_parse_sec,                                         0,                             offsetof(Network, dhcp_server_default_lease_time_usec)},
+#line 180 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UserClass",                            config_parse_dhcp_user_class,                             AF_INET,                       offsetof(Network, dhcp_user_class)},
+      {(char*)0}, {(char*)0},
+#line 237 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.HairPin",                              config_parse_tristate,                                    0,                             offsetof(Network, hairpin)},
+#line 371 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairBlue.PacketLimit",              config_parse_stochastic_fair_blue_u32,                    QDISC_KIND_SFB,                0},
+#line 277 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.BitRate",                                 config_parse_can_bitrate,                                 0,                             offsetof(Network, can_bitrate)},
+#line 142 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Destination",                           config_parse_destination,                                 0,                             0},
+#line 373 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairnessQueueing.Handle",           config_parse_qdisc_handle,                                QDISC_KIND_SFQ,                0},
+#line 150 "../src/network/networkd-network-gperf.gperf"
+      {"Route.GatewayOnlink",                         config_parse_gateway_onlink,                              0,                             0},
+#line 285 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.Termination",                             config_parse_tristate,                                    0,                             offsetof(Network, can_termination)},
+      {(char*)0}, {(char*)0},
+#line 372 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairnessQueueing.Parent",           config_parse_qdisc_parent,                                QDISC_KIND_SFQ,                0},
+#line 152 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Protocol",                              config_parse_route_protocol,                              0,                             0},
+#line 278 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.SamplePoint",                             config_parse_permille,                                    0,                             offsetof(Network, can_sample_point)},
+      {(char*)0},
+#line 144 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Metric",                                config_parse_route_priority,                              0,                             0},
+#line 284 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.TripleSampling",                          config_parse_tristate,                                    0,                             offsetof(Network, can_triple_sampling)},
+      {(char*)0},
+#line 194 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RouteMTUBytes",                        config_parse_mtu,                                         AF_INET,                       offsetof(Network, dhcp_route_mtu)},
+      {(char*)0},
+#line 143 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Source",                                config_parse_destination,                                 0,                             0},
+#line 401 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.CriticalConnection",                     config_parse_tristate,                                    0,                             offsetof(Network, dhcp_critical)},
+      {(char*)0},
+#line 159 "../src/network/networkd-network-gperf.gperf"
+      {"Route.MultiPathRoute",                        config_parse_multipath_route,                             0,                             0},
+#line 292 "../src/network/networkd-network-gperf.gperf"
+      {"CAKE.Parent",                                 config_parse_qdisc_parent,                                QDISC_KIND_CAKE,               0},
+#line 308 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFO.Parent",                                config_parse_qdisc_parent,                                QDISC_KIND_PFIFO,              0},
+#line 374 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairnessQueueing.PerturbPeriodSec", config_parse_stochastic_fairness_queueing_perturb_period, QDISC_KIND_SFQ,                0},
+#line 415 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.Parent",                        config_parse_qdisc_parent,             _QDISC_KIND_INVALID,           0},
+#line 242 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.MulticastToUnicast",                   config_parse_tristate,                                    0,                             offsetof(Network, multicast_to_unicast)},
+      {(char*)0},
+#line 248 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.MulticastRouter",                      config_parse_multicast_router,                            0,                             offsetof(Network, multicast_router)},
+#line 176 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RequestBroadcast",                     config_parse_bool,                                        0,                             offsetof(Network, dhcp_broadcast)},
+#line 68 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Tunnel",                              config_parse_stacked_netdev,                              _NETDEV_KIND_TUNNEL,           offsetof(Network, stacked_netdev_names)},
+#line 414 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.CriticalConnection",                   config_parse_tristate,                                    0,                             offsetof(Network, dhcp_critical)},
+#line 411 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.RapidCommit",                            config_parse_bool,                                        0,                             offsetof(Network, rapid_commit)},
+      {(char*)0}, {(char*)0},
+#line 239 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.AllowPortToBeRoot",                    config_parse_tristate,                                    0,                             offsetof(Network, allow_port_to_be_root)},
+      {(char*)0},
+#line 418 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.NetworkEmulatorLossRate",       config_parse_network_emulator_rate,    0,                             0},
+      {(char*)0},
+#line 177 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.VendorClassIdentifier",                config_parse_string,                                      0,                             offsetof(Network, dhcp_vendor_class_identifier)},
+#line 283 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.RestartSec",                              config_parse_sec,                                         0,                             offsetof(Network, can_restart_us)},
+      {(char*)0},
+#line 419 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.NetworkEmulatorDuplicateRate",  config_parse_network_emulator_rate,    0,                             0},
+#line 110 "../src/network/networkd-network-gperf.gperf"
+      {"Address.Peer",                                config_parse_address,                                     0,                             0},
+      {(char*)0},
+#line 420 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.NetworkEmulatorPacketLimit",    config_parse_network_emulator_packet_limit, 0,                        0},
+      {(char*)0},
+#line 416 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.NetworkEmulatorDelaySec",       config_parse_network_emulator_delay,   0,                             0},
+#line 310 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFO.PacketLimit",                           config_parse_pfifo_size,                                  QDISC_KIND_PFIFO,              0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 417 "../src/network/networkd-network-gperf.gperf"
+      {"TrafficControlQueueingDiscipline.NetworkEmulatorDelayJitterSec", config_parse_network_emulator_delay,   0,                             0},
+      {(char*)0}, {(char*)0},
+#line 107 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IgnoreCarrierLoss",                   config_parse_tristate,                                    0,                             offsetof(Network, ignore_carrier_loss)},
+#line 82 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DNS",                                 config_parse_dns,                                         0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 91 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPMasquerade",                        config_parse_bool,                                        0,                             offsetof(Network, ip_masquerade)},
+#line 155 "../src/network/networkd-network-gperf.gperf"
+      {"Route.InitialAdvertisedReceiveWindow",        config_parse_tcp_window,                                  0,                             0},
+#line 289 "../src/network/networkd-network-gperf.gperf"
+      {"BFIFO.Parent",                                config_parse_qdisc_parent,                                QDISC_KIND_BFIFO,              0},
+#line 162 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.ClientIdentifier",                     config_parse_dhcp_client_identifier,                      0,                             offsetof(Network, dhcp_client_identifier)},
+      {(char*)0},
+#line 279 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.DataBitRate",                             config_parse_can_bitrate,                                 0,                             offsetof(Network, can_data_bitrate)},
+#line 186 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.IAID",                                 config_parse_iaid,                                        0,                             0},
+#line 346 "../src/network/networkd-network-gperf.gperf"
+      {"GenericRandomEarlyDetection.DefaultVirtualQueue", config_parse_generic_random_early_detection_u32,      QDISC_KIND_GRED,               0},
+      {(char*)0},
+#line 74 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv4LLRoute",                         config_parse_bool,                                        0,                             offsetof(Network, ipv4ll_route)},
+      {(char*)0},
+#line 389 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.ClientIdentifier",                       config_parse_dhcp_client_identifier,                      0,                             offsetof(Network, dhcp_client_identifier)},
+      {(char*)0},
+#line 99 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv4AcceptLocal",                     config_parse_tristate,                                    0,                             offsetof(Network, ipv4_accept_local)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 83 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DNSDefaultRoute",                     config_parse_tristate,                                    0,                             offsetof(Network, dns_default_route)},
+#line 240 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.UnicastFlood",                         config_parse_tristate,                                    0,                             offsetof(Network, unicast_flood)},
+      {(char*)0},
+#line 89 "../src/network/networkd-network-gperf.gperf"
+      {"Network.NTP",                                 config_parse_ntp,                                         0,                             offsetof(Network, ntp)},
+      {(char*)0}, {(char*)0},
+#line 343 "../src/network/networkd-network-gperf.gperf"
+      {"GenericRandomEarlyDetection.Parent",          config_parse_qdisc_parent,                                QDISC_KIND_GRED,               0},
+      {(char*)0}, {(char*)0},
+#line 111 "../src/network/networkd-network-gperf.gperf"
+      {"Address.Broadcast",                           config_parse_broadcast,                                   0,                             0},
+      {(char*)0},
+#line 88 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DNSSECNegativeTrustAnchors",          config_parse_dnssec_negative_trust_anchors,               0,                             0},
+#line 281 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.FDMode",                                  config_parse_tristate,                                    0,                             offsetof(Network, can_fd_mode)},
+#line 274 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6RoutePrefix.Route",                       config_parse_route_prefix,                                0,                             0},
+      {(char*)0},
+#line 202 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.VendorClass",                          config_parse_dhcp_vendor_class,                           0,                             offsetof(Network, dhcp6_vendor_class)},
+#line 100 "../src/network/networkd-network-gperf.gperf"
+      {"Network.ActiveSlave",                         config_parse_bool,                                        0,                             offsetof(Network, active_slave)},
+      {(char*)0},
+#line 227 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.LPRServers",                       config_parse_dhcp_server_lpr_servers,                     0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 275 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6RoutePrefix.LifetimeSec",                 config_parse_route_prefix_lifetime,                       0,                             0},
+      {(char*)0},
+#line 154 "../src/network/networkd-network-gperf.gperf"
+      {"Route.InitialCongestionWindow",               config_parse_tcp_window,                                  0,                             0},
+      {(char*)0}, {(char*)0},
+#line 309 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFO.Handle",                                config_parse_qdisc_handle,                                QDISC_KIND_PFIFO,              0},
+      {(char*)0},
+#line 64 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPVTAP",                              config_parse_stacked_netdev,                              NETDEV_KIND_IPVTAP,            offsetof(Network, stacked_netdev_names)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 156 "../src/network/networkd-network-gperf.gperf"
+      {"Route.QuickAck",                              config_parse_quickack,                                    0,                             0},
+#line 410 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.ListenPort",                             config_parse_uint16,                                      0,                             offsetof(Network, dhcp_client_port)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 323 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.Handle",                         config_parse_qdisc_handle,                                QDISC_KIND_FQ,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 241 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.MulticastFlood",                       config_parse_tristate,                                    0,                             offsetof(Network, multicast_flood)},
+      {(char*)0}, {(char*)0},
+#line 322 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.Parent",                         config_parse_qdisc_parent,                                QDISC_KIND_FQ,                 0},
+#line 329 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.Buckets",                        config_parse_fair_queueing_u32,                           QDISC_KIND_FQ,                 0},
+#line 251 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeFDB.Destination",                       config_parse_fdb_destination,                             0,                             0},
+#line 56 "../src/network/networkd-network-gperf.gperf"
+      {"Link.RequiredForOnline",                      config_parse_required_for_online,                         0,                             0},
+#line 197 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.UseNTP",                               config_parse_dhcp_use_ntp,                                0,                             0},
+#line 331 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.Pacing",                         config_parse_fair_queueing_bool,                          QDISC_KIND_FQ,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 209 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.RouteMetric",                          config_parse_dhcp_route_metric,                           0,                             0},
+#line 58 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Bridge",                              config_parse_ifname,                                      0,                             offsetof(Network, bridge_name)},
+      {(char*)0}, {(char*)0},
+#line 130 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.From",                      config_parse_routing_policy_rule_prefix,                  0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 238 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.FastLeave",                            config_parse_tristate,                                    0,                             offsetof(Network, fast_leave)},
+#line 290 "../src/network/networkd-network-gperf.gperf"
+      {"BFIFO.Handle",                                config_parse_qdisc_handle,                                QDISC_KIND_BFIFO,              0},
+      {(char*)0},
+#line 87 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DNSSEC",                              config_parse_dnssec_mode,                                 0,                             offsetof(Network, dnssec_mode)},
+      {(char*)0},
+#line 204 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.ForceDHCPv6PDOtherInformation",        config_parse_bool,                                        0,                             offsetof(Network, dhcp6_force_pd_other_information)},
+      {(char*)0}, {(char*)0},
+#line 105 "../src/network/networkd-network-gperf.gperf"
+      {"Network.BindCarrier",                         config_parse_strv,                                        0,                             offsetof(Network, bind_carrier)},
+      {(char*)0},
+#line 118 "../src/network/networkd-network-gperf.gperf"
+      {"Address.AutoJoin",                            config_parse_address_flags,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 254 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeVLAN.PVID",                             config_parse_brvlan_pvid,                                 0,                             0},
+#line 147 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Table",                                 config_parse_route_table,                                 0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 287 "../src/network/networkd-network-gperf.gperf"
+      {"QDisc.Parent",                                config_parse_qdisc_parent,                                _QDISC_KIND_INVALID,           0},
+#line 196 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.UseDNS",                               config_parse_dhcp_use_dns,                                0,                             0},
+#line 333 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.Parent",          config_parse_qdisc_parent,                                QDISC_KIND_FQ_CODEL,           0},
+      {(char*)0},
+#line 201 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.UserClass",                            config_parse_dhcp_user_class,                             AF_INET6,                      offsetof(Network, dhcp6_user_class)},
+#line 90 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPForward",                           config_parse_address_family_with_kernel,                  0,                             offsetof(Network, ip_forward)},
+#line 119 "../src/network/networkd-network-gperf.gperf"
+      {"Address.DuplicateAddressDetection",           config_parse_duplicate_address_detection,                 0,                             0},
+#line 335 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.PacketLimit",     config_parse_fair_queueing_controlled_delay_u32,          QDISC_KIND_FQ_CODEL,           0},
+#line 151 "../src/network/networkd-network-gperf.gperf"
+      {"Route.IPv6Preference",                        config_parse_ipv6_route_preference,                       0,                             0},
+#line 146 "../src/network/networkd-network-gperf.gperf"
+      {"Route.PreferredSource",                       config_parse_preferred_src,                               0,                             0},
+      {(char*)0}, {(char*)0},
+#line 149 "../src/network/networkd-network-gperf.gperf"
+      {"Route.GatewayOnLink",                         config_parse_gateway_onlink,                              0,                             0},
+#line 79 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Address",                             config_parse_address,                                     0,                             0},
+      {(char*)0},
+#line 339 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.TargetSec",       config_parse_fair_queueing_controlled_delay_usec,         QDISC_KIND_FQ_CODEL,           0},
+#line 112 "../src/network/networkd-network-gperf.gperf"
+      {"Address.Label",                               config_parse_label,                                       0,                             0},
+      {(char*)0}, {(char*)0},
+#line 312 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFOFast.Handle",                            config_parse_qdisc_handle,                                QDISC_KIND_PFIFO_FAST,         0},
+#line 377 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.Rate",                      config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+      {(char*)0},
+#line 376 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.Handle",                    config_parse_qdisc_handle,                                QDISC_KIND_TBF,                0},
+      {(char*)0},
+#line 382 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.PeakRate",                  config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+#line 66 "../src/network/networkd-network-gperf.gperf"
+      {"Network.L2TP",                                config_parse_stacked_netdev,                              NETDEV_KIND_L2TP,              offsetof(Network, stacked_netdev_names)},
+      {(char*)0},
+#line 116 "../src/network/networkd-network-gperf.gperf"
+      {"Address.PrefixRoute",                         config_parse_address_flags,                               0,                             0 /* deprecated */},
+      {(char*)0},
+#line 311 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFOFast.Parent",                            config_parse_qdisc_parent,                                QDISC_KIND_PFIFO_FAST,         0},
+#line 296 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.Parent",                      config_parse_qdisc_parent,                                QDISC_KIND_CODEL,              0},
+#line 158 "../src/network/networkd-network-gperf.gperf"
+      {"Route.TTLPropagate",                          config_parse_route_ttl_propagate,                         0,                             0},
+#line 375 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.Parent",                    config_parse_qdisc_parent,                                QDISC_KIND_TBF,                0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 51 "../src/network/networkd-network-gperf.gperf"
+      {"Link.ARP",                                    config_parse_tristate,                                    0,                             offsetof(Network, arp)},
+      {(char*)0},
+#line 43 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Host",                                  config_parse_net_condition,                               CONDITION_HOST,                offsetof(Network, conditions)},
+#line 217 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.MaxLeaseTimeSec",                  config_parse_sec,                                         0,                             offsetof(Network, dhcp_server_max_lease_time_usec)},
+#line 300 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.IntervalSec",                 config_parse_controlled_delay_usec,                       QDISC_KIND_CODEL,              0},
+#line 205 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.AssignAcquiredDelegatedPrefixAddress", config_parse_bool,                                        0,                             offsetof(Network, dhcp6_pd_assign_prefix)},
+#line 46 "../src/network/networkd-network-gperf.gperf"
+      {"Match.KernelVersion",                         config_parse_net_condition,                               CONDITION_KERNEL_VERSION,      offsetof(Network, conditions)},
+#line 299 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.TargetSec",                   config_parse_controlled_delay_usec,                       QDISC_KIND_CODEL,              0},
+      {(char*)0},
+#line 36 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Driver",                                config_parse_match_strv,                                  0,                             offsetof(Network, match_driver)},
+#line 383 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.LatencySec",                config_parse_token_bucket_filter_latency,                 QDISC_KIND_TBF,                0},
+#line 340 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.IntervalSec",     config_parse_fair_queueing_controlled_delay_usec,         QDISC_KIND_FQ_CODEL,           0},
+#line 44 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Virtualization",                        config_parse_net_condition,                               CONDITION_VIRTUALIZATION,      offsetof(Network, conditions)},
+      {(char*)0},
+#line 298 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.PacketLimit",                 config_parse_controlled_delay_u32,                        QDISC_KIND_CODEL,              0},
+      {(char*)0}, {(char*)0},
+#line 109 "../src/network/networkd-network-gperf.gperf"
+      {"Address.Address",                             config_parse_address,                                     0,                             0},
+#line 381 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.MPUBytes",                  config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+#line 265 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.EmitDomains",            config_parse_bool,                                        0,                             offsetof(Network, router_emit_domains)},
+#line 378 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.Burst",                     config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+      {(char*)0}, {(char*)0},
+#line 380 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.MTUBytes",                  config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+#line 379 "../src/network/networkd-network-gperf.gperf"
+      {"TokenBucketFilter.LimitSize",                 config_parse_token_bucket_filter_size,                    QDISC_KIND_TBF,                0},
+      {(char*)0},
+#line 388 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv4LL",                              config_parse_ipv4ll,                                      0,                             offsetof(Network, link_local)},
+#line 160 "../src/network/networkd-network-gperf.gperf"
+      {"NextHop.Id",                                  config_parse_nexthop_id,                                  0,                             0},
+      {(char*)0},
+#line 76 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6Token",                           config_parse_address_generation_type,                     0,                             0},
+#line 252 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeFDB.VNI",                               config_parse_fdb_vxlan_vni,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 101 "../src/network/networkd-network-gperf.gperf"
+      {"Network.PrimarySlave",                        config_parse_bool,                                        0,                             offsetof(Network, primary_slave)},
+      {(char*)0},
+#line 59 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Bond",                                config_parse_ifname,                                      0,                             offsetof(Network, bond_name)},
+#line 140 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.SuppressPrefixLength",      config_parse_routing_policy_rule_suppress_prefixlen,      0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 341 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.CEThresholdSec",  config_parse_fair_queueing_controlled_delay_usec,         QDISC_KIND_FQ_CODEL,           0},
+#line 263 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.EmitDNS",                config_parse_bool,                                        0,                             offsetof(Network, router_emit_dns)},
+#line 302 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.ECN",                         config_parse_controlled_delay_bool,                       QDISC_KIND_CODEL,              0},
+      {(char*)0},
+#line 106 "../src/network/networkd-network-gperf.gperf"
+      {"Network.ConfigureWithoutCarrier",             config_parse_bool,                                        0,                             offsetof(Network, configure_without_carrier)},
+#line 288 "../src/network/networkd-network-gperf.gperf"
+      {"QDisc.Handle",                                config_parse_qdisc_handle,                                _QDISC_KIND_INVALID,           0},
+      {(char*)0}, {(char*)0},
+#line 39 "../src/network/networkd-network-gperf.gperf"
+      {"Match.SSID",                                  config_parse_match_strv,                                  0,                             offsetof(Network, match_ssid)},
+      {(char*)0},
+#line 262 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.RouterPreference",       config_parse_router_preference,                           0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 267 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.DNSLifetimeSec",         config_parse_sec,                                         0,                             offsetof(Network, router_dns_lifetime_usec)},
+      {(char*)0},
+#line 332 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.CEThresholdSec",                 config_parse_fair_queueing_usec,                          QDISC_KIND_FQ,                 0},
+#line 259 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.RouterLifetimeSec",      config_parse_sec,                                         0,                             offsetof(Network, router_lifetime_usec)},
+#line 264 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.DNS",                    config_parse_radv_dns,                                    0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 94 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6AcceptRouterAdvertisements",      config_parse_tristate,                                    0,                             offsetof(Network, ipv6_accept_ra)},
+      {(char*)0},
+#line 394 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseDomains",                             config_parse_dhcp_use_domains,                            0,                             offsetof(Network, dhcp_use_domains)},
+#line 103 "../src/network/networkd-network-gperf.gperf"
+      {"Network.ProxyARP",                            config_parse_tristate,                                    0,                             offsetof(Network, proxy_arp)},
+#line 73 "../src/network/networkd-network-gperf.gperf"
+      {"Network.LinkLocalAddressing",                 config_parse_link_local_address_family,                   0,                             offsetof(Network, link_local)},
+#line 395 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseDomainName",                          config_parse_dhcp_use_domains,                            0,                             offsetof(Network, dhcp_use_domains)},
+#line 396 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseRoutes",                              config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_routes)},
+      {(char*)0}, {(char*)0},
+#line 117 "../src/network/networkd-network-gperf.gperf"
+      {"Address.AddPrefixRoute",                      config_parse_address_flags,                               0,                             0},
+      {(char*)0}, {(char*)0},
+#line 85 "../src/network/networkd-network-gperf.gperf"
+      {"Network.MulticastDNS",                        config_parse_resolve_support,                             0,                             offsetof(Network, mdns)},
+#line 40 "../src/network/networkd-network-gperf.gperf"
+      {"Match.BSSID",                                 config_parse_hwaddrs,                                     0,                             offsetof(Network, match_bssid)},
+#line 171 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseGateway",                           config_parse_tristate,                                    0,                             offsetof(Network, dhcp_use_gateway)},
+      {(char*)0},
+#line 63 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPVLAN",                              config_parse_stacked_netdev,                              NETDEV_KIND_IPVLAN,            offsetof(Network, stacked_netdev_names)},
+#line 291 "../src/network/networkd-network-gperf.gperf"
+      {"BFIFO.LimitSize",                             config_parse_bfifo_size,                                  QDISC_KIND_BFIFO,              0},
+#line 243 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.NeighborSuppression",                  config_parse_tristate,                                    0,                             offsetof(Network, neighbor_suppression)},
+#line 297 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.Handle",                      config_parse_qdisc_handle,                                QDISC_KIND_CODEL,              0},
+#line 167 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.UseMTU",                               config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_mtu)},
+#line 363 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.LossRate",                    config_parse_network_emulator_rate,                       QDISC_KIND_NETEM,              0},
+      {(char*)0},
+#line 173 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.Anonymize",                            config_parse_bool,                                        0,                             offsetof(Network, dhcp_anonymize)},
+#line 359 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.Parent",                      config_parse_qdisc_parent,                                QDISC_KIND_NETEM,              0},
+#line 404 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.DUIDType",                               config_parse_duid_type,                                   0,                             offsetof(Network, duid)},
+#line 67 "../src/network/networkd-network-gperf.gperf"
+      {"Network.MACsec",                              config_parse_stacked_netdev,                              NETDEV_KIND_MACSEC,            offsetof(Network, stacked_netdev_names)},
+#line 98 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6MTUBytes",                        config_parse_mtu,                                         AF_INET6,                      offsetof(Network, ipv6_mtu)},
+#line 408 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseTimezone",                            config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_timezone)},
+#line 192 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.SendOption",                           config_parse_dhcp_send_option,                            AF_INET,                       offsetof(Network, dhcp_client_send_options)},
+      {(char*)0},
+#line 364 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.DuplicateRate",               config_parse_network_emulator_rate,                       QDISC_KIND_NETEM,              0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 337 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.Flows",           config_parse_fair_queueing_controlled_delay_u32,          QDISC_KIND_FQ_CODEL,           0},
+#line 52 "../src/network/networkd-network-gperf.gperf"
+      {"Link.Multicast",                              config_parse_tristate,                                    0,                             offsetof(Network, multicast)},
+      {(char*)0},
+#line 207 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.WithoutRA",                            config_parse_bool,                                        0,                             offsetof(Network, dhcp6_without_ra)},
+#line 273 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.Assign",                           config_parse_prefix_assign,                               0,                             0},
+#line 260 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.Managed",                config_parse_bool,                                        0,                             offsetof(Network, router_managed)},
+#line 361 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.DelaySec",                    config_parse_network_emulator_delay,                      QDISC_KIND_NETEM,              0},
+#line 362 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.DelayJitterSec",              config_parse_network_emulator_delay,                      QDISC_KIND_NETEM,              0},
+#line 195 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.FallbackLeaseLifetimeSec",             config_parse_dhcp_fallback_lease_lifetime,                0,                             0},
+#line 365 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.PacketLimit",                 config_parse_network_emulator_packet_limit,               QDISC_KIND_NETEM,              0},
+      {(char*)0},
+#line 324 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.PacketLimit",                    config_parse_fair_queueing_u32,                           QDISC_KIND_FQ,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 193 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.SendVendorOption",                     config_parse_dhcp_send_option,                            0,                             offsetof(Network, dhcp_client_send_vendor_options)},
+      {(char*)0},
+#line 249 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeFDB.MACAddress",                        config_parse_fdb_hwaddr,                                  0,                             0},
+#line 127 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.Priority",                  config_parse_routing_policy_rule_priority,                0,                             0},
+      {(char*)0},
+#line 182 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.DUIDRawData",                          config_parse_duid_rawdata,                                0,                             offsetof(Network, duid)},
+#line 174 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.SendHostname",                         config_parse_bool,                                        0,                             offsetof(Network, dhcp_send_hostname)},
+      {(char*)0},
+#line 231 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.PoolOffset",                       config_parse_uint32,                                      0,                             offsetof(Network, dhcp_server_pool_offset)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 102 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv4ProxyARP",                        config_parse_tristate,                                    0,                             offsetof(Network, proxy_arp)},
+      {(char*)0},
+#line 327 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.InitialQuantum",                 config_parse_fair_queueing_size,                          QDISC_KIND_FQ,                 0},
+#line 304 "../src/network/networkd-network-gperf.gperf"
+      {"DeficitRoundRobinScheduler.Handle",           config_parse_qdisc_handle,                                QDISC_KIND_DRR,                0},
+#line 387 "../src/network/networkd-network-gperf.gperf"
+      {"/* backwards compatibility: do not add new entries to this section */"},
+      {(char*)0},
+#line 234 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.SendOption",                       config_parse_dhcp_send_option,                            0,                             offsetof(Network, dhcp_server_send_options)},
+#line 325 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.FlowLimit",                      config_parse_fair_queueing_u32,                           QDISC_KIND_FQ,                 0},
+#line 303 "../src/network/networkd-network-gperf.gperf"
+      {"DeficitRoundRobinScheduler.Parent",           config_parse_qdisc_parent,                                QDISC_KIND_DRR,                0},
+      {(char*)0},
+#line 153 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Type",                                  config_parse_route_type,                                  0,                             0},
+      {(char*)0}, {(char*)0},
+#line 305 "../src/network/networkd-network-gperf.gperf"
+      {"DeficitRoundRobinSchedulerClass.Parent",      config_parse_tclass_parent,                               TCLASS_KIND_DRR,               0},
+      {(char*)0},
+#line 115 "../src/network/networkd-network-gperf.gperf"
+      {"Address.ManageTemporaryAddress",              config_parse_address_flags,                               0,                             0},
+#line 390 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseDNS",                                 config_parse_dhcp_use_dns,                                0,                             0},
+      {(char*)0}, {(char*)0},
+#line 236 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.UseBPDU",                              config_parse_tristate,                                    0,                             offsetof(Network, use_bpdu)},
+#line 181 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.DUIDType",                             config_parse_duid_type,                                   0,                             offsetof(Network, duid)},
+#line 145 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Scope",                                 config_parse_route_scope,                                 0,                             0},
+#line 95 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6DuplicateAddressDetection",       config_parse_int,                                         0,                             offsetof(Network, ipv6_dad_transmits)},
+      {(char*)0},
+#line 403 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UserClass",                              config_parse_dhcp_user_class,                             AF_INET,                       offsetof(Network, dhcp_user_class)},
+      {(char*)0}, {(char*)0},
+#line 233 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.SendVendorOption",                 config_parse_dhcp_send_option,                            0,                             offsetof(Network, dhcp_server_send_vendor_options)},
+      {(char*)0},
+#line 336 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.MemoryLimit",     config_parse_fair_queueing_controlled_delay_size,         QDISC_KIND_FQ_CODEL,           0},
+#line 247 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.Priority",                             config_parse_bridge_port_priority,                        0,                             offsetof(Network, priority)},
+      {(char*)0},
+#line 77 "../src/network/networkd-network-gperf.gperf"
+      {"Network.LLDP",                                config_parse_lldp_mode,                                   0,                             offsetof(Network, lldp_mode)},
+#line 141 "../src/network/networkd-network-gperf.gperf"
+      {"Route.Gateway",                               config_parse_gateway,                                     0,                             0},
+      {(char*)0}, {(char*)0},
+#line 172 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.RequestOptions",                       config_parse_dhcp_request_options,                        AF_INET,                       0},
+#line 258 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6PDSubnetId",                      config_parse_router_prefix_subnet_id,                     0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 391 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseNTP",                                 config_parse_dhcp_use_ntp,                                0,                             0},
+      {(char*)0},
+#line 84 "../src/network/networkd-network-gperf.gperf"
+      {"Network.LLMNR",                               config_parse_resolve_support,                             0,                             offsetof(Network, llmnr)},
+#line 286 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.ListenOnly",                              config_parse_tristate,                                    0,                             offsetof(Network, can_listen_only)},
+#line 370 "../src/network/networkd-network-gperf.gperf"
+      {"StochasticFairBlue.Handle",                   config_parse_qdisc_handle,                                QDISC_KIND_SFB,                0},
+#line 272 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.PreferredLifetimeSec",             config_parse_prefix_lifetime,                             0,                             0},
+#line 157 "../src/network/networkd-network-gperf.gperf"
+      {"Route.FastOpenNoCookie",                      config_parse_fast_open_no_cookie,                         0,                             0},
+#line 257 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6PrefixDelegation",                config_parse_router_prefix_delegation,                    0,                             0},
+#line 246 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.ProxyARPWiFi",                         config_parse_tristate,                                    0,                             offsetof(Network, bridge_proxy_arp_wifi)},
+      {(char*)0},
+#line 228 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.EmitRouter",                       config_parse_bool,                                        0,                             offsetof(Network, dhcp_server_emit_router)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 245 "../src/network/networkd-network-gperf.gperf"
+      {"Bridge.ProxyARP",                             config_parse_tristate,                                    0,                             offsetof(Network, bridge_proxy_arp)},
+      {(char*)0},
+#line 360 "../src/network/networkd-network-gperf.gperf"
+      {"NetworkEmulator.Handle",                      config_parse_qdisc_handle,                                QDISC_KIND_NETEM,              0},
+      {(char*)0},
+#line 397 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.Anonymize",                              config_parse_bool,                                        0,                             offsetof(Network, dhcp_anonymize)},
+#line 270 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.AddressAutoconfiguration",         config_parse_prefix_flags,                                0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 41 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Name",                                  config_parse_match_ifnames,                               1,                             offsetof(Network, match_name)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 219 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.EmitDNS",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_server_emit_dns)},
+#line 280 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.DataSamplePoint",                         config_parse_permille,                                    0,                             offsetof(Network, can_data_sample_point)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 120 "../src/network/networkd-network-gperf.gperf"
+      {"Address.Scope",                               config_parse_address_scope,                               0,                             0},
+#line 148 "../src/network/networkd-network-gperf.gperf"
+      {"Route.MTUBytes",                              config_parse_route_mtu,                                   AF_UNSPEC,                     0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 266 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.Domains",                config_parse_radv_search_domains,                         0,                             0},
+      {(char*)0},
+#line 96 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6HopLimit",                        config_parse_int,                                         0,                             offsetof(Network, ipv6_hop_limit)},
+      {(char*)0},
+#line 385 "../src/network/networkd-network-gperf.gperf"
+      {"TrivialLinkEqualizer.Handle",                 config_parse_qdisc_handle,                                QDISC_KIND_TEQL,               0},
+#line 72 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DHCPServer",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_server)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 122 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AddressLabel.Label",                      config_parse_address_label,                               0,                             0},
+      {(char*)0},
+#line 317 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueing.Handle",                    config_parse_qdisc_handle,                                QDISC_KIND_QFQ,                0},
+      {(char*)0},
+#line 123 "../src/network/networkd-network-gperf.gperf"
+      {"Neighbor.Address",                            config_parse_neighbor_address,                            0,                             0},
+#line 384 "../src/network/networkd-network-gperf.gperf"
+      {"TrivialLinkEqualizer.Parent",                 config_parse_qdisc_parent,                                QDISC_KIND_TEQL,               0},
+#line 223 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.EmitSIP",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_server_emit_sip)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 71 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DHCP",                                config_parse_dhcp,                                        0,                             offsetof(Network, dhcp)},
+#line 178 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.MUDURL",                               config_parse_dhcp_mud_url,                                0,                             0},
+#line 316 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueing.Parent",                    config_parse_qdisc_parent,                                QDISC_KIND_QFQ,                0},
+      {(char*)0}, {(char*)0},
+#line 53 "../src/network/networkd-network-gperf.gperf"
+      {"Link.AllMulticast",                           config_parse_tristate,                                    0,                             offsetof(Network, allmulticast)},
+#line 229 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.EmitTimezone",                     config_parse_bool,                                        0,                             offsetof(Network, dhcp_server_emit_timezone)},
+#line 306 "../src/network/networkd-network-gperf.gperf"
+      {"DeficitRoundRobinSchedulerClass.ClassId",     config_parse_tclass_classid,                              TCLASS_KIND_DRR,               0},
+#line 93 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6AcceptRA",                        config_parse_tristate,                                    0,                             offsetof(Network, ipv6_accept_ra)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 114 "../src/network/networkd-network-gperf.gperf"
+      {"Address.HomeAddress",                         config_parse_address_flags,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 320 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueingClass.Weight",               config_parse_quick_fair_queueing_weight,                  TCLASS_KIND_QFQ,               0},
+#line 80 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Gateway",                             config_parse_gateway,                                     0,                             0},
+#line 345 "../src/network/networkd-network-gperf.gperf"
+      {"GenericRandomEarlyDetection.VirtualQueues",   config_parse_generic_random_early_detection_u32,          QDISC_KIND_GRED,               0},
+#line 268 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.Prefix",                           config_parse_prefix,                                      0,                             0},
+#line 213 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.UseDomains",                     config_parse_dhcp_use_domains,                            0,                             offsetof(Network, ipv6_accept_ra_use_domains)},
+      {(char*)0},
+#line 161 "../src/network/networkd-network-gperf.gperf"
+      {"NextHop.Gateway",                             config_parse_nexthop_gateway,                             0,                             0},
+      {(char*)0}, {(char*)0},
+#line 221 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPServer.EmitNTP",                          config_parse_bool,                                        0,                             offsetof(Network, dhcp_server_emit_ntp)},
+      {(char*)0},
+#line 314 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFOHeadDrop.Handle",                        config_parse_qdisc_handle,                                QDISC_KIND_PFIFO_HEAD_DROP,    0},
+#line 126 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.TypeOfService",             config_parse_routing_policy_rule_tos,                     0,                             0},
+#line 216 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.BlackList",                      config_parse_ndisc_black_listed_prefix,                   0,                             0},
+      {(char*)0},
+#line 318 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueingClass.Parent",               config_parse_tclass_parent,                               TCLASS_KIND_QFQ,               0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 121 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AddressLabel.Prefix",                     config_parse_address_label_prefix,                        0,                             0},
+#line 344 "../src/network/networkd-network-gperf.gperf"
+      {"GenericRandomEarlyDetection.Handle",          config_parse_qdisc_handle,                                QDISC_KIND_GRED,               0},
+#line 313 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFOHeadDrop.Parent",                        config_parse_qdisc_parent,                                QDISC_KIND_PFIFO_HEAD_DROP,    0},
+      {(char*)0},
+#line 208 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.SendOption",                           config_parse_dhcp_send_option,                            AF_INET6,                      offsetof(Network, dhcp6_client_send_options)},
+#line 86 "../src/network/networkd-network-gperf.gperf"
+      {"Network.DNSOverTLS",                          config_parse_dns_over_tls_mode,                           0,                             offsetof(Network, dns_over_tls_mode)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 212 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.UseDNS",                         config_parse_bool,                                        0,                             offsetof(Network, ipv6_accept_ra_use_dns)},
+#line 315 "../src/network/networkd-network-gperf.gperf"
+      {"PFIFOHeadDrop.PacketLimit",                   config_parse_pfifo_size,                                  QDISC_KIND_PFIFO_HEAD_DROP,    0},
+      {(char*)0}, {(char*)0},
+#line 215 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.RouteTable",                     config_parse_section_route_table,                         0,                             0},
+      {(char*)0}, {(char*)0},
+#line 250 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeFDB.VLANId",                            config_parse_fdb_vlan_id,                                 0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "../src/network/networkd-network-gperf.gperf"
+      {"Match.MACAddress",                            config_parse_hwaddrs,                                     0,                             offsetof(Network, match_mac)},
+#line 104 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6ProxyNDPAddress",                 config_parse_ipv6_proxy_ndp_address,                      0,                             0},
+#line 203 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.SendVendorOption",                     config_parse_dhcp_send_option,                            AF_INET6,                      offsetof(Network, dhcp6_client_send_vendor_options)},
+      {(char*)0},
+#line 108 "../src/network/networkd-network-gperf.gperf"
+      {"Network.KeepConfiguration",                   config_parse_keep_configuration,                          0,                             offsetof(Network, keep_configuration)},
+      {(char*)0}, {(char*)0},
+#line 179 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv4.MaxAttempts",                          config_parse_dhcp_max_attempts,                           0,                             0},
+      {(char*)0},
+#line 48 "../src/network/networkd-network-gperf.gperf"
+      {"Link.MACAddress",                             config_parse_hwaddr,                                      0,                             offsetof(Network, mac)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 97 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6ProxyNDP",                        config_parse_tristate,                                    0,                             offsetof(Network, ipv6_proxy_ndp)},
+#line 293 "../src/network/networkd-network-gperf.gperf"
+      {"CAKE.Handle",                                 config_parse_qdisc_handle,                                QDISC_KIND_CAKE,               0},
+      {(char*)0},
+#line 47 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Architecture",                          config_parse_net_condition,                               CONDITION_ARCHITECTURE,        offsetof(Network, conditions)},
+      {(char*)0},
+#line 338 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.Quantum",         config_parse_fair_queueing_controlled_delay_size,         QDISC_KIND_FQ_CODEL,           0},
+      {(char*)0},
+#line 69 "../src/network/networkd-network-gperf.gperf"
+      {"Network.Xfrm",                                config_parse_stacked_netdev,                              NETDEV_KIND_XFRM,              offsetof(Network, stacked_netdev_names)},
+#line 386 "../src/network/networkd-network-gperf.gperf"
+      {"TrivialLinkEqualizer.Id",                     config_parse_trivial_link_equalizer_id,                   QDISC_KIND_TEQL,               0},
+      {(char*)0}, {(char*)0},
+#line 402 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.VendorClassIdentifier",                  config_parse_string,                                      0,                             offsetof(Network, dhcp_vendor_class_identifier)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 65 "../src/network/networkd-network-gperf.gperf"
+      {"Network.VXLAN",                               config_parse_stacked_netdev,                              NETDEV_KIND_VXLAN,             offsetof(Network, stacked_netdev_names)},
+      {(char*)0},
+#line 326 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.Quantum",                        config_parse_fair_queueing_size,                          QDISC_KIND_FQ,                 0},
+#line 70 "../src/network/networkd-network-gperf.gperf"
+      {"Network.VRF",                                 config_parse_ifname,                                      0,                             offsetof(Network, vrf_name)},
+#line 206 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.PrefixDelegationHint",                 config_parse_dhcp6_pd_hint,                               0,                             0},
+#line 399 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.Hostname",                               config_parse_hostname,                                    0,                             offsetof(Network, dhcp_hostname)},
+      {(char*)0},
+#line 113 "../src/network/networkd-network-gperf.gperf"
+      {"Address.PreferredLifetime",                   config_parse_lifetime,                                    0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 125 "../src/network/networkd-network-gperf.gperf"
+      {"Neighbor.MACAddress",                         config_parse_neighbor_hwaddr,                             0,                             0 /* deprecated */},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 38 "../src/network/networkd-network-gperf.gperf"
+      {"Match.WLANInterfaceType",                     config_parse_match_strv,                                  0,                             offsetof(Network, match_wlan_iftype)},
+#line 54 "../src/network/networkd-network-gperf.gperf"
+      {"Link.Unmanaged",                              config_parse_bool,                                        0,                             offsetof(Network, unmanaged)},
+      {(char*)0},
+#line 200 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.RequestOptions",                       config_parse_dhcp_request_options,                        AF_INET6,                      0},
+      {(char*)0},
+#line 347 "../src/network/networkd-network-gperf.gperf"
+      {"GenericRandomEarlyDetection.GenericRIO",      config_parse_generic_random_early_detection_bool,         QDISC_KIND_GRED,               0},
+#line 307 "../src/network/networkd-network-gperf.gperf"
+      {"DeficitRoundRobinSchedulerClass.Quantum",     config_parse_drr_size,                                    TCLASS_KIND_DRR,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 328 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.MaximumRate",                    config_parse_fair_queueing_max_rate,                      QDISC_KIND_FQ,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 334 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.Handle",          config_parse_qdisc_handle,                                QDISC_KIND_FQ_CODEL,           0},
+#line 37 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Type",                                  config_parse_match_strv,                                  0,                             offsetof(Network, match_type)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 294 "../src/network/networkd-network-gperf.gperf"
+      {"CAKE.Bandwidth",                              config_parse_cake_bandwidth,                              QDISC_KIND_CAKE,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 255 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeVLAN.VLAN",                             config_parse_brvlan_vlan,                                 0,                             0},
+      {(char*)0}, {(char*)0},
+#line 45 "../src/network/networkd-network-gperf.gperf"
+      {"Match.KernelCommandLine",                     config_parse_net_condition,                               CONDITION_KERNEL_COMMAND_LINE, offsetof(Network, conditions)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 269 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.OnLink",                           config_parse_prefix_flags,                                0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 199 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.MUDURL",                               config_parse_dhcp6_mud_url,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 55 "../src/network/networkd-network-gperf.gperf"
+      {"Link.IPv6LinkLocalAddressGenerationMode",     config_parse_link_ipv6_address_gen_mode,                  0,                             offsetof(Network, ipv6_address_gen_mode)},
+      {(char*)0}, {(char*)0},
+#line 261 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6PrefixDelegation.OtherInformation",       config_parse_bool,                                        0,                             offsetof(Network, router_other_information)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 214 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.DHCPv6Client",                   config_parse_ipv6_accept_ra_start_dhcp6_client,           0,                             offsetof(Network, ipv6_accept_ra_start_dhcp6_client)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 60 "../src/network/networkd-network-gperf.gperf"
+      {"Network.VLAN",                                config_parse_stacked_netdev,                              NETDEV_KIND_VLAN,              offsetof(Network, stacked_netdev_names)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 342 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueingControlledDelay.ECN",             config_parse_fair_queueing_controlled_delay_bool,         QDISC_KIND_FQ_CODEL,           0},
+#line 398 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.SendHostname",                           config_parse_bool,                                        0,                             offsetof(Network, dhcp_send_hostname)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 321 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueingClass.MaxPacketSize",        config_parse_quick_fair_queueing_max_packet,              TCLASS_KIND_QFQ,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 319 "../src/network/networkd-network-gperf.gperf"
+      {"QuickFairQueueingClass.ClassId",              config_parse_tclass_classid,                              TCLASS_KIND_QFQ,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 138 "../src/network/networkd-network-gperf.gperf"
+      {"RoutingPolicyRule.Family",                    config_parse_routing_policy_rule_family,                  0,                             0},
+      {(char*)0},
+#line 78 "../src/network/networkd-network-gperf.gperf"
+      {"Network.EmitLLDP",                            config_parse_lldp_emit,                                   0,                             offsetof(Network, lldp_emit)},
+      {(char*)0},
+#line 211 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.UseOnLinkPrefix",                config_parse_bool,                                        0,                             offsetof(Network, ipv6_accept_ra_use_onlink_prefix)},
+      {(char*)0}, {(char*)0},
+#line 393 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseHostname",                            config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_hostname)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 92 "../src/network/networkd-network-gperf.gperf"
+      {"Network.IPv6PrivacyExtensions",               config_parse_ipv6_privacy_extensions,                     0,                             offsetof(Network, ipv6_privacy_extensions)},
+#line 62 "../src/network/networkd-network-gperf.gperf"
+      {"Network.MACVTAP",                             config_parse_stacked_netdev,                              NETDEV_KIND_MACVTAP,           offsetof(Network, stacked_netdev_names)},
+      {(char*)0},
+#line 210 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6AcceptRA.UseAutonomousPrefix",            config_parse_bool,                                        0,                             offsetof(Network, ipv6_accept_ra_use_autonomous_prefix)},
+#line 330 "../src/network/networkd-network-gperf.gperf"
+      {"FairQueueing.OrphanMask",                     config_parse_fair_queueing_u32,                           QDISC_KIND_FQ,                 0},
+      {(char*)0},
+#line 256 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeVLAN.EgressUntagged",                   config_parse_brvlan_untagged,                             0,                             0},
+      {(char*)0},
+#line 271 "../src/network/networkd-network-gperf.gperf"
+      {"IPv6Prefix.ValidLifetimeSec",                 config_parse_prefix_lifetime,                             0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 35 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Path",                                  config_parse_match_strv,                                  0,                             offsetof(Network, match_path)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 34 "../src/network/networkd-network-gperf.gperf"
+      {"Match.PermanentMACAddress",                   config_parse_hwaddrs,                                     0,                             offsetof(Network, match_permanent_mac)},
+      {(char*)0}, {(char*)0},
+#line 49 "../src/network/networkd-network-gperf.gperf"
+      {"Link.MTUBytes",                               config_parse_mtu,                                         AF_UNSPEC,                     offsetof(Network, mtu)},
+      {(char*)0},
+#line 301 "../src/network/networkd-network-gperf.gperf"
+      {"ControlledDelay.CEThresholdSec",              config_parse_controlled_delay_usec,                       QDISC_KIND_CODEL,              0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 61 "../src/network/networkd-network-gperf.gperf"
+      {"Network.MACVLAN",                             config_parse_stacked_netdev,                              NETDEV_KIND_MACVLAN,           offsetof(Network, stacked_netdev_names)},
+      {(char*)0}, {(char*)0},
+#line 295 "../src/network/networkd-network-gperf.gperf"
+      {"CAKE.Overhead",                               config_parse_cake_overhead,                               QDISC_KIND_CAKE,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 198 "../src/network/networkd-network-gperf.gperf"
+      {"DHCPv6.RapidCommit",                          config_parse_bool,                                        0,                             offsetof(Network, rapid_commit)},
+#line 253 "../src/network/networkd-network-gperf.gperf"
+      {"BridgeFDB.AssociatedWith",                    config_parse_fdb_ntf_flags,                               0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 352 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucket.Handle",                 config_parse_qdisc_handle,                                QDISC_KIND_HTB,                0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 357 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucketClass.Rate",              config_parse_hierarchy_token_bucket_rate,                 TCLASS_KIND_HTB,               0},
+      {(char*)0},
+#line 351 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucket.Parent",                 config_parse_qdisc_parent,                                QDISC_KIND_HTB,                0},
+      {(char*)0},
+#line 358 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucketClass.CeilRate",          config_parse_hierarchy_token_bucket_rate,                 TCLASS_KIND_HTB,               0},
+      {(char*)0}, {(char*)0},
+#line 354 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucketClass.Parent",            config_parse_tclass_parent,                               TCLASS_KIND_HTB,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 282 "../src/network/networkd-network-gperf.gperf"
+      {"CAN.FDNonISO",                                config_parse_tristate,                                    0,                             offsetof(Network, can_non_iso)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 276 "../src/network/networkd-network-gperf.gperf"
+      {"LLDP.MUDURL",                                 config_parse_lldp_mud,                                    0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 392 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.UseMTU",                                 config_parse_bool,                                        0,                             offsetof(Network, dhcp_use_mtu)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 124 "../src/network/networkd-network-gperf.gperf"
+      {"Neighbor.LinkLayerAddress",                   config_parse_neighbor_lladdr,                             0,                             0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 355 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucketClass.ClassId",           config_parse_tclass_classid,                              TCLASS_KIND_HTB,               0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 349 "../src/network/networkd-network-gperf.gperf"
+      {"HeavyHitterFilter.Handle",                    config_parse_qdisc_handle,                                QDISC_KIND_HHF,                0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 348 "../src/network/networkd-network-gperf.gperf"
+      {"HeavyHitterFilter.Parent",                    config_parse_qdisc_parent,                                QDISC_KIND_HHF,                0},
+#line 50 "../src/network/networkd-network-gperf.gperf"
+      {"Link.Group",                                  config_parse_uint32,                                      0,                             offsetof(Network, group)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 350 "../src/network/networkd-network-gperf.gperf"
+      {"HeavyHitterFilter.PacketLimit",               config_parse_heavy_hitter_filter_packet_limit,            QDISC_KIND_HHF,                0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 42 "../src/network/networkd-network-gperf.gperf"
+      {"Match.Property",                              config_parse_match_property,                              0,                             offsetof(Network, match_property)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 412 "../src/network/networkd-network-gperf.gperf"
+      {"DHCP.ForceDHCPv6PDOtherInformation",          config_parse_bool,                                        0,                             offsetof(Network, dhcp6_force_pd_other_information)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 353 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucket.DefaultClass",           config_parse_hierarchy_token_bucket_default_class,        QDISC_KIND_HTB,                0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 356 "../src/network/networkd-network-gperf.gperf"
+      {"HierarchyTokenBucketClass.Priority",          config_parse_hierarchy_token_bucket_u32,                  TCLASS_KIND_HTB,               0}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = network_network_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/nspawn/nspawn-gperf.c b/build/src/nspawn/nspawn-gperf.c
new file mode 100644
index 0000000000..687ae4f957
--- /dev/null
+++ b/build/src/nspawn/nspawn-gperf.c
@@ -0,0 +1,253 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/nspawn/nspawn-gperf.c ../src/nspawn/nspawn-gperf.gperf  */
+/* Computed positions: -k'12,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/nspawn/nspawn-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "nspawn-settings.h"
+#include "nspawn-expose-ports.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 57
+#define MIN_WORD_LENGTH 9
+#define MAX_WORD_LENGTH 28
+#define MIN_HASH_VALUE 9
+#define MAX_HASH_VALUE 85
+/* maximum key range = 77, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+nspawn_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 30, 86,  0, 50, 15,
+      86, 30, 86, 35, 86,  5, 10, 86, 30,  5,
+      55, 86, 40, 25, 20,  5, 30, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 20, 86, 86,
+      40,  5,  0, 25, 86, 10, 86, 86, 25, 50,
+      15,  5,  0, 86,  5, 10,  0, 30,  0, 86,
+      86, 20, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+      86, 86, 86, 86, 86, 86
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[11]];
+      /*FALLTHROUGH*/
+      case 11:
+      case 10:
+      case 9:
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct ConfigPerfItem *
+nspawn_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 21 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Boot",                    config_parse_boot,           0,                 0},
+      {(char*)0}, {(char*)0},
+#line 77 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.Port",                 config_parse_expose_port,    0,                 0},
+      {(char*)0},
+#line 26 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.User",                    config_parse_string,         0,                 offsetof(Settings, user)},
+#line 57 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.ResolvConf",              config_parse_resolv_conf,    0,                 offsetof(Settings, resolv_conf)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.PivotRoot",               config_parse_pivot_root,     0,                 0},
+#line 69 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.Private",              config_parse_tristate,       0,                 offsetof(Settings, private_network)},
+      {(char*)0},
+#line 76 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.Zone",                 config_parse_network_zone,   0,                 0},
+#line 73 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.VirtualEthernet",      config_parse_tristate,       0,                 offsetof(Settings, network_veth)},
+#line 55 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.OOMScoreAdjust",          config_parse_oom_score_adjust, 0,               0},
+#line 24 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Parameters",              config_parse_strv,           0,                 offsetof(Settings, parameters)},
+#line 36 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.SystemCallFilter",        config_parse_syscall_filter, 0,                 0,},
+#line 70 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.Interface",            config_parse_strv,           0,                 offsetof(Settings, network_interfaces)},
+#line 65 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.Inaccessible",           config_parse_inaccessible,   0,                 0},
+#line 61 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.Volatile",               config_parse_volatile_mode,  0,                 offsetof(Settings, volatile_mode)},
+#line 23 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.ProcessTwo",              config_parse_pid2,           0,                 0},
+#line 25 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Environment",             config_parse_strv,           0,                 offsetof(Settings, environment)},
+#line 34 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.PrivateUsers",            config_parse_private_users,  0,                 0},
+#line 59 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Timezone",                config_parse_timezone,       0,                 offsetof(Settings, timezone)},
+#line 41 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitCORE",               config_parse_rlimit,         RLIMIT_CORE,       offsetof(Settings, rlimit)},
+#line 54 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.NoNewPrivileges",         config_parse_tristate,       0,                 offsetof(Settings, no_new_privileges)},
+#line 43 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitNOFILE",             config_parse_rlimit,         RLIMIT_NOFILE,     offsetof(Settings, rlimit)},
+#line 46 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitMEMLOCK",            config_parse_rlimit,         RLIMIT_MEMLOCK,    offsetof(Settings, rlimit)},
+#line 68 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.PrivateUsersChown",      config_parse_tristate,       0,                 offsetof(Settings, userns_chown)},
+#line 28 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.DropCapability",          config_parse_capability,     0,                 offsetof(Settings, drop_capability)},
+#line 40 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitSTACK",              config_parse_rlimit,         RLIMIT_STACK,      offsetof(Settings, rlimit)},
+#line 51 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitRTPRIO",             config_parse_rlimit,         RLIMIT_RTPRIO,     offsetof(Settings, rlimit)},
+      {(char*)0},
+#line 63 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.BindReadOnly",           config_parse_bind,           1,                 0},
+#line 22 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Ephemeral",               config_parse_bool,           0,                 offsetof(Settings, ephemeral)},
+#line 47 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitLOCKS",              config_parse_rlimit,         RLIMIT_LOCKS,      offsetof(Settings, rlimit)},
+#line 56 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.CPUAffinity",             config_parse_cpu_affinity,   0,                 0},
+      {(char*)0},
+#line 74 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.VirtualEthernetExtra", config_parse_veth_extra,     0,                 0},
+#line 60 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.ReadOnly",               config_parse_tristate,       0,                 offsetof(Settings, read_only)},
+#line 62 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.Bind",                   config_parse_bind,           0,                 0},
+#line 52 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitRTTIME",             config_parse_rlimit,         RLIMIT_RTTIME,     offsetof(Settings, rlimit)},
+      {(char*)0},
+#line 66 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.Overlay",                config_parse_overlay,        0,                 0},
+#line 72 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.IPVLAN",               config_parse_strv,           0,                 offsetof(Settings, network_ipvlan)},
+#line 38 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitFSIZE",              config_parse_rlimit,         RLIMIT_FSIZE,      offsetof(Settings, rlimit)},
+#line 30 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Personality",             config_parse_personality,    0,                 offsetof(Settings, personality)},
+      {(char*)0},
+#line 49 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitMSGQUEUE",           config_parse_rlimit,         RLIMIT_MSGQUEUE,   offsetof(Settings, rlimit)},
+#line 75 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.Bridge",               config_parse_ifname,         0,                 offsetof(Settings, network_bridge)},
+#line 27 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Capability",              config_parse_capability,     0,                 offsetof(Settings, capability)},
+#line 67 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.OverlayReadOnly",        config_parse_overlay,        1,                 0},
+#line 44 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitAS",                 config_parse_rlimit,         RLIMIT_AS,         offsetof(Settings, rlimit)},
+#line 42 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitRSS",                config_parse_rlimit,         RLIMIT_RSS,        offsetof(Settings, rlimit)},
+#line 50 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitNICE",               config_parse_rlimit,         RLIMIT_NICE,       offsetof(Settings, rlimit)},
+#line 29 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.KillSignal",              config_parse_signal,         0,                 offsetof(Settings, kill_signal)},
+#line 32 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.WorkingDirectory",        config_parse_path,           0,                 offsetof(Settings, working_directory)},
+      {(char*)0},
+#line 53 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.Hostname",                config_parse_hostname,       0,                 offsetof(Settings, hostname)},
+#line 31 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.MachineID",               config_parse_id128,          0,                 offsetof(Settings, machine_id)},
+#line 45 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitNPROC",              config_parse_rlimit,         RLIMIT_NPROC,      offsetof(Settings, rlimit)},
+#line 58 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LinkJournal",             config_parse_link_journal,   0,                 0},
+      {(char*)0},
+#line 37 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitCPU",                config_parse_rlimit,         RLIMIT_CPU,        offsetof(Settings, rlimit)},
+#line 39 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitDATA",               config_parse_rlimit,         RLIMIT_DATA,       offsetof(Settings, rlimit)},
+#line 71 "../src/nspawn/nspawn-gperf.gperf"
+      {"Network.MACVLAN",              config_parse_strv,           0,                 offsetof(Settings, network_macvlan)},
+#line 35 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.NotifyReady",             config_parse_bool,           0,                 offsetof(Settings, notify_ready)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 64 "../src/nspawn/nspawn-gperf.gperf"
+      {"Files.TemporaryFileSystem",    config_parse_tmpfs,          0,                 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 48 "../src/nspawn/nspawn-gperf.gperf"
+      {"Exec.LimitSIGPENDING",         config_parse_rlimit,         RLIMIT_SIGPENDING, offsetof(Settings, rlimit)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = nspawn_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/resolve/dns_type-from-name.h b/build/src/resolve/dns_type-from-name.h
new file mode 100644
index 0000000000..d977e557ff
--- /dev/null
+++ b/build/src/resolve/dns_type-from-name.h
@@ -0,0 +1,357 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_dns_type -H hash_dns_type_name -p -C src/resolve/dns_type-from-name.gperf  */
+/* Computed positions: -k'1-2,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/resolve/dns_type-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/resolve/dns_type-from-name.gperf"
+struct dns_type_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 77
+#define MIN_WORD_LENGTH 1
+#define MAX_WORD_LENGTH 10
+#define MIN_HASH_VALUE 7
+#define MAX_HASH_VALUE 177
+/* maximum key range = 171, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_dns_type_name (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+       25,  15,   0,  75,  50, 178,  10, 178, 178, 178,
+      178, 178, 178, 178, 178,   5,  50,  30,  25,  75,
+       65,  80,  75,  10, 178,  35,  75,  15,  10,  60,
+        5, 178,   5,   5,   0,  65,   5,  60,  20,  35,
+      178, 178, 178, 178, 178, 178, 178,   5,  50,  30,
+       25,  75,  65,  80,  75,  10, 178,  35,  75,  15,
+       10,  60,   5, 178,   5,   5,   0,  65,   5,  60,
+       20,  35, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
+      178, 178, 178, 178, 178, 178
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[1]];
+      /*FALLTHROUGH*/
+      case 1:
+        hval += asso_values[(unsigned char)str[0]];
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct dns_type_name *
+lookup_dns_type (register const char *str, register size_t len)
+{
+  static const struct dns_type_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 29 "src/resolve/dns_type-from-name.gperf"
+      {"RT", DNS_TYPE_RT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 9 "src/resolve/dns_type-from-name.gperf"
+      {"A", DNS_TYPE_A},
+#line 84 "src/resolve/dns_type-from-name.gperf"
+      {"TA", DNS_TYPE_TA},
+#line 20 "src/resolve/dns_type-from-name.gperf"
+      {"PTR", DNS_TYPE_PTR},
+#line 42 "src/resolve/dns_type-from-name.gperf"
+      {"ATMA", DNS_TYPE_ATMA},
+      {(char*)0}, {(char*)0},
+#line 25 "src/resolve/dns_type-from-name.gperf"
+      {"RP", DNS_TYPE_RP},
+#line 41 "src/resolve/dns_type-from-name.gperf"
+      {"SRV", DNS_TYPE_SRV},
+#line 36 "src/resolve/dns_type-from-name.gperf"
+      {"AAAA", DNS_TYPE_AAAA},
+#line 52 "src/resolve/dns_type-from-name.gperf"
+      {"SSHFP", DNS_TYPE_SSHFP},
+      {(char*)0},
+#line 10 "src/resolve/dns_type-from-name.gperf"
+      {"NS", DNS_TYPE_NS},
+#line 24 "src/resolve/dns_type-from-name.gperf"
+      {"TXT", DNS_TYPE_TXT},
+#line 30 "src/resolve/dns_type-from-name.gperf"
+      {"NSAP", DNS_TYPE_NSAP},
+#line 43 "src/resolve/dns_type-from-name.gperf"
+      {"NAPTR", DNS_TYPE_NAPTR},
+      {(char*)0},
+#line 17 "src/resolve/dns_type-from-name.gperf"
+      {"MR", DNS_TYPE_MR},
+#line 31 "src/resolve/dns_type-from-name.gperf"
+      {"NSAP-PTR", DNS_TYPE_NSAP_PTR},
+#line 28 "src/resolve/dns_type-from-name.gperf"
+      {"ISDN", DNS_TYPE_ISDN},
+#line 80 "src/resolve/dns_type-from-name.gperf"
+      {"MAILA", DNS_TYPE_MAILA},
+      {(char*)0}, {(char*)0},
+#line 38 "src/resolve/dns_type-from-name.gperf"
+      {"NXT", DNS_TYPE_NXT},
+#line 78 "src/resolve/dns_type-from-name.gperf"
+      {"AXFR", DNS_TYPE_AXFR},
+#line 58 "src/resolve/dns_type-from-name.gperf"
+      {"NSEC3", DNS_TYPE_NSEC3},
+      {(char*)0},
+#line 51 "src/resolve/dns_type-from-name.gperf"
+      {"DS", DNS_TYPE_DS},
+      {(char*)0},
+#line 77 "src/resolve/dns_type-from-name.gperf"
+      {"IXFR", DNS_TYPE_IXFR},
+#line 59 "src/resolve/dns_type-from-name.gperf"
+      {"NSEC3PARAM", DNS_TYPE_NSEC3PARAM},
+      {(char*)0}, {(char*)0},
+#line 83 "src/resolve/dns_type-from-name.gperf"
+      {"CAA", DNS_TYPE_CAA},
+      {(char*)0}, {(char*)0},
+#line 64 "src/resolve/dns_type-from-name.gperf"
+      {"TALINK", DNS_TYPE_TALINK},
+#line 34 "src/resolve/dns_type-from-name.gperf"
+      {"PX", DNS_TYPE_PX},
+#line 69 "src/resolve/dns_type-from-name.gperf"
+      {"NID", DNS_TYPE_NID},
+#line 55 "src/resolve/dns_type-from-name.gperf"
+      {"NSEC", DNS_TYPE_NSEC},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 81 "src/resolve/dns_type-from-name.gperf"
+      {"ANY", DNS_TYPE_ANY},
+#line 48 "src/resolve/dns_type-from-name.gperf"
+      {"SINK", DNS_TYPE_SINK},
+      {(char*)0},
+#line 40 "src/resolve/dns_type-from-name.gperf"
+      {"NIMLOC", DNS_TYPE_NIMLOC},
+#line 23 "src/resolve/dns_type-from-name.gperf"
+      {"MX", DNS_TYPE_MX},
+#line 53 "src/resolve/dns_type-from-name.gperf"
+      {"IPSECKEY", DNS_TYPE_IPSECKEY},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 65 "src/resolve/dns_type-from-name.gperf"
+      {"CDS", DNS_TYPE_CDS},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 11 "src/resolve/dns_type-from-name.gperf"
+      {"MD", DNS_TYPE_MD},
+#line 49 "src/resolve/dns_type-from-name.gperf"
+      {"OPT", DNS_TYPE_OPT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 14 "src/resolve/dns_type-from-name.gperf"
+      {"SOA", DNS_TYPE_SOA},
+#line 75 "src/resolve/dns_type-from-name.gperf"
+      {"TKEY", DNS_TYPE_TKEY},
+#line 79 "src/resolve/dns_type-from-name.gperf"
+      {"MAILB", DNS_TYPE_MAILB},
+#line 56 "src/resolve/dns_type-from-name.gperf"
+      {"DNSKEY", DNS_TYPE_DNSKEY},
+#line 44 "src/resolve/dns_type-from-name.gperf"
+      {"KX", DNS_TYPE_KX},
+#line 68 "src/resolve/dns_type-from-name.gperf"
+      {"SPF", DNS_TYPE_SPF},
+#line 63 "src/resolve/dns_type-from-name.gperf"
+      {"RKEY", DNS_TYPE_RKEY},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 82 "src/resolve/dns_type-from-name.gperf"
+      {"URI", DNS_TYPE_URI},
+#line 60 "src/resolve/dns_type-from-name.gperf"
+      {"TLSA", DNS_TYPE_TLSA},
+#line 62 "src/resolve/dns_type-from-name.gperf"
+      {"NINFO", DNS_TYPE_NINFO},
+      {(char*)0},
+#line 72 "src/resolve/dns_type-from-name.gperf"
+      {"LP", DNS_TYPE_LP},
+#line 50 "src/resolve/dns_type-from-name.gperf"
+      {"APL", DNS_TYPE_APL},
+#line 76 "src/resolve/dns_type-from-name.gperf"
+      {"TSIG", DNS_TYPE_TSIG},
+#line 22 "src/resolve/dns_type-from-name.gperf"
+      {"MINFO", DNS_TYPE_MINFO},
+      {(char*)0}, {(char*)0},
+#line 61 "src/resolve/dns_type-from-name.gperf"
+      {"HIP", DNS_TYPE_HIP},
+#line 35 "src/resolve/dns_type-from-name.gperf"
+      {"GPOS", DNS_TYPE_GPOS},
+#line 54 "src/resolve/dns_type-from-name.gperf"
+      {"RRSIG", DNS_TYPE_RRSIG},
+      {(char*)0},
+#line 66 "src/resolve/dns_type-from-name.gperf"
+      {"CDNSKEY", DNS_TYPE_CDNSKEY},
+#line 32 "src/resolve/dns_type-from-name.gperf"
+      {"SIG", DNS_TYPE_SIG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 19 "src/resolve/dns_type-from-name.gperf"
+      {"WKS", DNS_TYPE_WKS},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 46 "src/resolve/dns_type-from-name.gperf"
+      {"A6", DNS_TYPE_A6},
+#line 85 "src/resolve/dns_type-from-name.gperf"
+      {"DLV", DNS_TYPE_DLV},
+#line 45 "src/resolve/dns_type-from-name.gperf"
+      {"CERT", DNS_TYPE_CERT},
+#line 67 "src/resolve/dns_type-from-name.gperf"
+      {"OPENPGPKEY", DNS_TYPE_OPENPGPKEY},
+      {(char*)0}, {(char*)0},
+#line 39 "src/resolve/dns_type-from-name.gperf"
+      {"EID", DNS_TYPE_EID},
+      {(char*)0},
+#line 47 "src/resolve/dns_type-from-name.gperf"
+      {"DNAME", DNS_TYPE_DNAME},
+      {(char*)0},
+#line 15 "src/resolve/dns_type-from-name.gperf"
+      {"MB", DNS_TYPE_MB},
+#line 70 "src/resolve/dns_type-from-name.gperf"
+      {"L32", DNS_TYPE_L32},
+      {(char*)0},
+#line 13 "src/resolve/dns_type-from-name.gperf"
+      {"CNAME", DNS_TYPE_CNAME},
+      {(char*)0}, {(char*)0},
+#line 27 "src/resolve/dns_type-from-name.gperf"
+      {"X25", DNS_TYPE_X25},
+      {(char*)0},
+#line 26 "src/resolve/dns_type-from-name.gperf"
+      {"AFSDB", DNS_TYPE_AFSDB},
+      {(char*)0}, {(char*)0},
+#line 71 "src/resolve/dns_type-from-name.gperf"
+      {"L64", DNS_TYPE_L64},
+      {(char*)0},
+#line 57 "src/resolve/dns_type-from-name.gperf"
+      {"DHCID", DNS_TYPE_DHCID},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 74 "src/resolve/dns_type-from-name.gperf"
+      {"EUI64", DNS_TYPE_EUI64},
+      {(char*)0},
+#line 12 "src/resolve/dns_type-from-name.gperf"
+      {"MF", DNS_TYPE_MF},
+#line 33 "src/resolve/dns_type-from-name.gperf"
+      {"KEY", DNS_TYPE_KEY},
+      {(char*)0},
+#line 21 "src/resolve/dns_type-from-name.gperf"
+      {"HINFO", DNS_TYPE_HINFO},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 18 "src/resolve/dns_type-from-name.gperf"
+      {"NULL", DNS_TYPE_NULL},
+#line 73 "src/resolve/dns_type-from-name.gperf"
+      {"EUI48", DNS_TYPE_EUI48},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 37 "src/resolve/dns_type-from-name.gperf"
+      {"LOC", DNS_TYPE_LOC},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 16 "src/resolve/dns_type-from-name.gperf"
+      {"MG", DNS_TYPE_MG}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_dns_type_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/resolve/dns_type-to-name.h b/build/src/resolve/dns_type-to-name.h
new file mode 100644
index 0000000000..812b1bf70f
--- /dev/null
+++ b/build/src/resolve/dns_type-to-name.h
@@ -0,0 +1,83 @@
+const char *dns_type_to_string(int type) {
+	switch(type) {
+        case DNS_TYPE_A: return "A";
+        case DNS_TYPE_NS: return "NS";
+        case DNS_TYPE_MD: return "MD";
+        case DNS_TYPE_MF: return "MF";
+        case DNS_TYPE_CNAME: return "CNAME";
+        case DNS_TYPE_SOA: return "SOA";
+        case DNS_TYPE_MB: return "MB";
+        case DNS_TYPE_MG: return "MG";
+        case DNS_TYPE_MR: return "MR";
+        case DNS_TYPE_NULL: return "NULL";
+        case DNS_TYPE_WKS: return "WKS";
+        case DNS_TYPE_PTR: return "PTR";
+        case DNS_TYPE_HINFO: return "HINFO";
+        case DNS_TYPE_MINFO: return "MINFO";
+        case DNS_TYPE_MX: return "MX";
+        case DNS_TYPE_TXT: return "TXT";
+        case DNS_TYPE_RP: return "RP";
+        case DNS_TYPE_AFSDB: return "AFSDB";
+        case DNS_TYPE_X25: return "X25";
+        case DNS_TYPE_ISDN: return "ISDN";
+        case DNS_TYPE_RT: return "RT";
+        case DNS_TYPE_NSAP: return "NSAP";
+        case DNS_TYPE_NSAP_PTR: return "NSAP-PTR";
+        case DNS_TYPE_SIG: return "SIG";
+        case DNS_TYPE_KEY: return "KEY";
+        case DNS_TYPE_PX: return "PX";
+        case DNS_TYPE_GPOS: return "GPOS";
+        case DNS_TYPE_AAAA: return "AAAA";
+        case DNS_TYPE_LOC: return "LOC";
+        case DNS_TYPE_NXT: return "NXT";
+        case DNS_TYPE_EID: return "EID";
+        case DNS_TYPE_NIMLOC: return "NIMLOC";
+        case DNS_TYPE_SRV: return "SRV";
+        case DNS_TYPE_ATMA: return "ATMA";
+        case DNS_TYPE_NAPTR: return "NAPTR";
+        case DNS_TYPE_KX: return "KX";
+        case DNS_TYPE_CERT: return "CERT";
+        case DNS_TYPE_A6: return "A6";
+        case DNS_TYPE_DNAME: return "DNAME";
+        case DNS_TYPE_SINK: return "SINK";
+        case DNS_TYPE_OPT: return "OPT";
+        case DNS_TYPE_APL: return "APL";
+        case DNS_TYPE_DS: return "DS";
+        case DNS_TYPE_SSHFP: return "SSHFP";
+        case DNS_TYPE_IPSECKEY: return "IPSECKEY";
+        case DNS_TYPE_RRSIG: return "RRSIG";
+        case DNS_TYPE_NSEC: return "NSEC";
+        case DNS_TYPE_DNSKEY: return "DNSKEY";
+        case DNS_TYPE_DHCID: return "DHCID";
+        case DNS_TYPE_NSEC3: return "NSEC3";
+        case DNS_TYPE_NSEC3PARAM: return "NSEC3PARAM";
+        case DNS_TYPE_TLSA: return "TLSA";
+        case DNS_TYPE_HIP: return "HIP";
+        case DNS_TYPE_NINFO: return "NINFO";
+        case DNS_TYPE_RKEY: return "RKEY";
+        case DNS_TYPE_TALINK: return "TALINK";
+        case DNS_TYPE_CDS: return "CDS";
+        case DNS_TYPE_CDNSKEY: return "CDNSKEY";
+        case DNS_TYPE_OPENPGPKEY: return "OPENPGPKEY";
+        case DNS_TYPE_SPF: return "SPF";
+        case DNS_TYPE_NID: return "NID";
+        case DNS_TYPE_L32: return "L32";
+        case DNS_TYPE_L64: return "L64";
+        case DNS_TYPE_LP: return "LP";
+        case DNS_TYPE_EUI48: return "EUI48";
+        case DNS_TYPE_EUI64: return "EUI64";
+        case DNS_TYPE_TKEY: return "TKEY";
+        case DNS_TYPE_TSIG: return "TSIG";
+        case DNS_TYPE_IXFR: return "IXFR";
+        case DNS_TYPE_AXFR: return "AXFR";
+        case DNS_TYPE_MAILB: return "MAILB";
+        case DNS_TYPE_MAILA: return "MAILA";
+        case DNS_TYPE_ANY: return "ANY";
+        case DNS_TYPE_URI: return "URI";
+        case DNS_TYPE_CAA: return "CAA";
+        case DNS_TYPE_TA: return "TA";
+        case DNS_TYPE_DLV: return "DLV";
+        default: return NULL;
+	}
+}
+
diff --git a/build/src/resolve/resolved-dnssd-gperf.c b/build/src/resolve/resolved-dnssd-gperf.c
new file mode 100644
index 0000000000..7126ad3df0
--- /dev/null
+++ b/build/src/resolve/resolved-dnssd-gperf.c
@@ -0,0 +1,129 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/resolve/resolved-dnssd-gperf.c ../src/resolve/resolved-dnssd-gperf.gperf  */
+/* Computed positions: -k'9,12' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/resolve/resolved-dnssd-gperf.gperf"
+
+#include <stddef.h>
+#include "conf-parser.h"
+#include "resolved-conf.h"
+#include "resolved-dnssd.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 7
+#define MIN_WORD_LENGTH 12
+#define MAX_WORD_LENGTH 16
+#define MIN_HASH_VALUE 12
+#define MAX_HASH_VALUE 22
+/* maximum key range = 11, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+resolved_dnssd_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23,  5, 23,
+      23, 23, 23, 23, 23, 23, 23, 23,  5, 23,
+       0, 23, 23, 23,  0, 23, 23,  0, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23,  5, 23,  0, 23, 23, 23, 23, 23, 23,
+      23,  0, 23, 23, 23, 23,  0, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
+      23, 23, 23, 23, 23, 23
+    };
+  return len + asso_values[(unsigned char)str[11]] + asso_values[(unsigned char)str[8]];
+}
+
+const struct ConfigPerfItem *
+resolved_dnssd_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 20 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.Port",     config_parse_ip_port,            0,                 offsetof(DnssdService, port)},
+      {(char*)0},
+#line 22 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.Weight",   config_parse_uint16,             0,                 offsetof(DnssdService, weight)},
+#line 23 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.TxtText",  config_parse_dnssd_txt,          DNS_TXT_ITEM_TEXT, 0},
+#line 21 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.Priority", config_parse_uint16,             0,                 offsetof(DnssdService, priority)},
+#line 19 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.Type",     config_parse_dnssd_service_type, 0,                 0},
+      {(char*)0}, {(char*)0},
+#line 24 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.TxtData",  config_parse_dnssd_txt,          DNS_TXT_ITEM_DATA, 0},
+      {(char*)0},
+#line 18 "../src/resolve/resolved-dnssd-gperf.gperf"
+      {"Service.Name",     config_parse_dnssd_service_name, 0,                 0}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = resolved_dnssd_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/resolve/resolved-gperf.c b/build/src/resolve/resolved-gperf.c
new file mode 100644
index 0000000000..3b083cf3e1
--- /dev/null
+++ b/build/src/resolve/resolved-gperf.c
@@ -0,0 +1,140 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/resolve/resolved-gperf.c ../src/resolve/resolved-gperf.gperf  */
+/* Computed positions: -k'9' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/resolve/resolved-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "resolved-conf.h"
+#include "resolved-manager.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 10
+#define MIN_WORD_LENGTH 11
+#define MAX_WORD_LENGTH 23
+#define MIN_HASH_VALUE 11
+#define MAX_HASH_VALUE 28
+/* maximum key range = 18, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+resolved_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 15,  0, 29,
+       0, 29, 29, 29, 29, 29,  0,  5, 29, 29,
+      29, 29,  0, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
+      29, 29, 29, 29, 29, 29
+    };
+  return len + asso_values[(unsigned char)str[8]];
+}
+
+const struct ConfigPerfItem *
+resolved_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 21 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.DNS",             config_parse_dns_servers,            DNS_SERVER_SYSTEM,   0},
+      {(char*)0},
+#line 24 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.LLMNR",           config_parse_resolve_support,        0,                   offsetof(Manager, llmnr_support)},
+#line 26 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.DNSSEC",          config_parse_dnssec_mode,            0,                   offsetof(Manager, dnssec_mode)},
+#line 23 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.Domains",         config_parse_search_domains,         0,                   0},
+      {(char*)0}, {(char*)0},
+#line 27 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.DNSOverTLS",      config_parse_dns_over_tls_mode,      0,                   offsetof(Manager, dns_over_tls_mode)},
+#line 22 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.FallbackDNS",     config_parse_dns_servers,            DNS_SERVER_FALLBACK, 0},
+#line 30 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.ReadEtcHosts",    config_parse_bool,                   0,                   offsetof(Manager, read_etc_hosts)},
+      {(char*)0}, {(char*)0},
+#line 29 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.DNSStubListener", config_parse_dns_stub_listener_mode, 0,                   offsetof(Manager, dns_stub_listener_mode)},
+      {(char*)0},
+#line 25 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.MulticastDNS",    config_parse_resolve_support,        0,                   offsetof(Manager, mdns_support)},
+      {(char*)0}, {(char*)0},
+#line 28 "../src/resolve/resolved-gperf.gperf"
+      {"Resolve.Cache",           config_parse_dns_cache_mode,         DNS_CACHE_MODE_YES,  offsetof(Manager, enable_cache)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = resolved_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/shared/ip-protocol-from-name.h b/build/src/shared/ip-protocol-from-name.h
new file mode 100644
index 0000000000..e4a20653f7
--- /dev/null
+++ b/build/src/shared/ip-protocol-from-name.h
@@ -0,0 +1,245 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t --ignore-case -N lookup_ip_protocol -H hash_ip_protocol_name -p -C src/shared/ip-protocol-from-name.gperf  */
+/* Computed positions: -k'1-3' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/shared/ip-protocol-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/shared/ip-protocol-from-name.gperf"
+struct ip_protocol_name { const char* name; int id; };
+
+#define TOTAL_KEYWORDS 32
+#define MIN_WORD_LENGTH 2
+#define MAX_WORD_LENGTH 8
+#define MIN_HASH_VALUE 2
+#define MAX_HASH_VALUE 76
+/* maximum key range = 75, duplicates = 0 */
+
+#ifndef GPERF_DOWNCASE
+#define GPERF_DOWNCASE 1
+static unsigned char gperf_downcase[256] =
+  {
+      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
+     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
+     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
+     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
+     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
+    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
+    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
+    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
+    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
+    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
+    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
+    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
+    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
+    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
+    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
+    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
+    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
+    255
+  };
+#endif
+
+#ifndef GPERF_CASE_STRCMP
+#define GPERF_CASE_STRCMP 1
+static int
+gperf_case_strcmp (register const char *s1, register const char *s2)
+{
+  for (;;)
+    {
+      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
+      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
+      if (c1 != 0 && c1 == c2)
+        continue;
+      return (int)c1 - (int)c2;
+    }
+}
+#endif
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_ip_protocol_name (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77,  5,  0,  5,  5, 35,
+      25, 10,  5,  0, 77, 77, 45,  0,  0, 20,
+       0, 77,  5,  0, 25, 10, 35, 10, 77, 77,
+      77, 77, 77, 77, 77, 77, 77,  5,  0,  5,
+       5, 35, 25, 10,  5,  0, 77, 77, 45,  0,
+       0, 20,  0, 77,  5,  0, 25, 10, 35, 10,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
+      77, 77, 77, 77, 77, 77
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[2]];
+      /*FALLTHROUGH*/
+      case 2:
+        hval += asso_values[(unsigned char)str[1]];
+      /*FALLTHROUGH*/
+      case 1:
+        hval += asso_values[(unsigned char)str[0]];
+        break;
+    }
+  return hval;
+}
+
+const struct ip_protocol_name *
+lookup_ip_protocol (register const char *str, register size_t len)
+{
+  static const struct ip_protocol_name wordlist[] =
+    {
+      {(char*)0}, {(char*)0},
+#line 28 "src/shared/ip-protocol-from-name.gperf"
+      {"IP", IPPROTO_IP},
+#line 11 "src/shared/ip-protocol-from-name.gperf"
+      {"PIM", IPPROTO_PIM},
+#line 17 "src/shared/ip-protocol-from-name.gperf"
+      {"IPIP", IPPROTO_IPIP},
+      {(char*)0}, {(char*)0},
+#line 24 "src/shared/ip-protocol-from-name.gperf"
+      {"MH", IPPROTO_MH},
+#line 16 "src/shared/ip-protocol-from-name.gperf"
+      {"IDP", IPPROTO_IDP},
+#line 31 "src/shared/ip-protocol-from-name.gperf"
+      {"ICMP", IPPROTO_ICMP},
+      {(char*)0},
+#line 37 "src/shared/ip-protocol-from-name.gperf"
+      {"ICMPV6", IPPROTO_ICMPV6},
+#line 23 "src/shared/ip-protocol-from-name.gperf"
+      {"AH", IPPROTO_AH},
+#line 15 "src/shared/ip-protocol-from-name.gperf"
+      {"PUP", IPPROTO_PUP},
+#line 36 "src/shared/ip-protocol-from-name.gperf"
+      {"IGMP", IPPROTO_IGMP},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 27 "src/shared/ip-protocol-from-name.gperf"
+      {"UDP", IPPROTO_UDP},
+#line 39 "src/shared/ip-protocol-from-name.gperf"
+      {"DCCP", IPPROTO_DCCP},
+      {(char*)0}, {(char*)0},
+#line 40 "src/shared/ip-protocol-from-name.gperf"
+      {"UDPLITE", IPPROTO_UDPLITE},
+#line 19 "src/shared/ip-protocol-from-name.gperf"
+      {"RAW", IPPROTO_RAW},
+#line 35 "src/shared/ip-protocol-from-name.gperf"
+      {"NONE", IPPROTO_NONE},
+      {(char*)0}, {(char*)0},
+#line 26 "src/shared/ip-protocol-from-name.gperf"
+      {"TP", IPPROTO_TP},
+#line 25 "src/shared/ip-protocol-from-name.gperf"
+      {"MTP", IPPROTO_MTP},
+#line 38 "src/shared/ip-protocol-from-name.gperf"
+      {"COMP", IPPROTO_COMP},
+      {(char*)0}, {(char*)0},
+#line 29 "src/shared/ip-protocol-from-name.gperf"
+      {"HOPOPTS", IPPROTO_HOPOPTS},
+#line 18 "src/shared/ip-protocol-from-name.gperf"
+      {"TCP", IPPROTO_TCP},
+#line 21 "src/shared/ip-protocol-from-name.gperf"
+      {"SCTP", IPPROTO_SCTP},
+      {(char*)0}, {(char*)0},
+#line 34 "src/shared/ip-protocol-from-name.gperf"
+      {"DSTOPTS", IPPROTO_DSTOPTS},
+#line 13 "src/shared/ip-protocol-from-name.gperf"
+      {"ESP", IPPROTO_ESP},
+#line 20 "src/shared/ip-protocol-from-name.gperf"
+      {"IPV6", IPPROTO_IPV6},
+      {(char*)0}, {(char*)0},
+#line 9 "src/shared/ip-protocol-from-name.gperf"
+      {"ROUTING", IPPROTO_ROUTING},
+#line 32 "src/shared/ip-protocol-from-name.gperf"
+      {"FRAGMENT", IPPROTO_FRAGMENT},
+#line 22 "src/shared/ip-protocol-from-name.gperf"
+      {"RSVP", IPPROTO_RSVP},
+#line 12 "src/shared/ip-protocol-from-name.gperf"
+      {"ENCAP", IPPROTO_ENCAP},
+      {(char*)0}, {(char*)0},
+#line 10 "src/shared/ip-protocol-from-name.gperf"
+      {"EGP", IPPROTO_EGP},
+#line 30 "src/shared/ip-protocol-from-name.gperf"
+      {"MPLS", IPPROTO_MPLS},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "src/shared/ip-protocol-from-name.gperf"
+      {"GRE", IPPROTO_GRE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 14 "src/shared/ip-protocol-from-name.gperf"
+      {"BEETPH", IPPROTO_BEETPH}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_ip_protocol_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && (((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strcmp (str, s))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/shared/ip-protocol-to-name.h b/build/src/shared/ip-protocol-to-name.h
new file mode 100644
index 0000000000..d47e26e35b
--- /dev/null
+++ b/build/src/shared/ip-protocol-to-name.h
@@ -0,0 +1,33 @@
+static const char* const ip_protocol_names[] = { 
+        [IPPROTO_ROUTING] = "routing",
+        [IPPROTO_EGP] = "egp",
+        [IPPROTO_PIM] = "pim",
+        [IPPROTO_ENCAP] = "encap",
+        [IPPROTO_ESP] = "esp",
+        [IPPROTO_BEETPH] = "beetph",
+        [IPPROTO_PUP] = "pup",
+        [IPPROTO_IDP] = "idp",
+        [IPPROTO_IPIP] = "ipip",
+        [IPPROTO_TCP] = "tcp",
+        [IPPROTO_RAW] = "raw",
+        [IPPROTO_IPV6] = "ipv6",
+        [IPPROTO_SCTP] = "sctp",
+        [IPPROTO_RSVP] = "rsvp",
+        [IPPROTO_AH] = "ah",
+        [IPPROTO_MH] = "mh",
+        [IPPROTO_MTP] = "mtp",
+        [IPPROTO_TP] = "tp",
+        [IPPROTO_UDP] = "udp",
+        [IPPROTO_IP] = "ip",
+        [IPPROTO_MPLS] = "mpls",
+        [IPPROTO_ICMP] = "icmp",
+        [IPPROTO_FRAGMENT] = "fragment",
+        [IPPROTO_GRE] = "gre",
+        [IPPROTO_DSTOPTS] = "dstopts",
+        [IPPROTO_NONE] = "none",
+        [IPPROTO_IGMP] = "igmp",
+        [IPPROTO_ICMPV6] = "icmpv6",
+        [IPPROTO_COMP] = "comp",
+        [IPPROTO_DCCP] = "dccp",
+        [IPPROTO_UDPLITE] = "udplite",
+};
diff --git a/build/src/test/test-hashmap-ordered.c b/build/src/test/test-hashmap-ordered.c
new file mode 100644
index 0000000000..06644426e8
--- /dev/null
+++ b/build/src/test/test-hashmap-ordered.c
@@ -0,0 +1,1101 @@
+/* GENERATED FILE */
+#define ORDERED
+/* SPDX-License-Identifier: LGPL-2.1+ */
+
+#include "alloc-util.h"
+#include "hashmap.h"
+#include "log.h"
+#include "nulstr-util.h"
+#include "stdio-util.h"
+#include "string-util.h"
+#include "strv.h"
+#include "time-util.h"
+#include "tests.h"
+
+void test_ordered_hashmap_funcs(void);
+
+static void test_ordered_hashmap_replace(void) {
+        OrderedHashmap *m;
+        char *val1, *val2, *val3, *val4, *val5, *r;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        val1 = strdup("val1");
+        assert_se(val1);
+        val2 = strdup("val2");
+        assert_se(val2);
+        val3 = strdup("val3");
+        assert_se(val3);
+        val4 = strdup("val4");
+        assert_se(val4);
+        val5 = strdup("val5");
+        assert_se(val5);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+        ordered_hashmap_put(m, "key 3", val3);
+        ordered_hashmap_put(m, "key 4", val4);
+
+        ordered_hashmap_replace(m, "key 3", val1);
+        r = ordered_hashmap_get(m, "key 3");
+        assert_se(streq(r, "val1"));
+
+        ordered_hashmap_replace(m, "key 5", val5);
+        r = ordered_hashmap_get(m, "key 5");
+        assert_se(streq(r, "val5"));
+
+        free(val1);
+        free(val2);
+        free(val3);
+        free(val4);
+        free(val5);
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_copy(void) {
+        OrderedHashmap *m, *copy;
+        char *val1, *val2, *val3, *val4, *r;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("val1");
+        assert_se(val1);
+        val2 = strdup("val2");
+        assert_se(val2);
+        val3 = strdup("val3");
+        assert_se(val3);
+        val4 = strdup("val4");
+        assert_se(val4);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+        ordered_hashmap_put(m, "key 3", val3);
+        ordered_hashmap_put(m, "key 4", val4);
+
+        copy = ordered_hashmap_copy(m);
+
+        r = ordered_hashmap_get(copy, "key 1");
+        assert_se(streq(r, "val1"));
+        r = ordered_hashmap_get(copy, "key 2");
+        assert_se(streq(r, "val2"));
+        r = ordered_hashmap_get(copy, "key 3");
+        assert_se(streq(r, "val3"));
+        r = ordered_hashmap_get(copy, "key 4");
+        assert_se(streq(r, "val4"));
+
+        ordered_hashmap_free_free(copy);
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_get_strv(void) {
+        OrderedHashmap *m;
+        char **strv;
+        char *val1, *val2, *val3, *val4;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("val1");
+        assert_se(val1);
+        val2 = strdup("val2");
+        assert_se(val2);
+        val3 = strdup("val3");
+        assert_se(val3);
+        val4 = strdup("val4");
+        assert_se(val4);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+        ordered_hashmap_put(m, "key 3", val3);
+        ordered_hashmap_put(m, "key 4", val4);
+
+        strv = ordered_hashmap_get_strv(m);
+
+#ifndef ORDERED
+        strv = strv_sort(strv);
+#endif
+
+        assert_se(streq(strv[0], "val1"));
+        assert_se(streq(strv[1], "val2"));
+        assert_se(streq(strv[2], "val3"));
+        assert_se(streq(strv[3], "val4"));
+
+        strv_free(strv);
+
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_move_one(void) {
+        OrderedHashmap *m, *n;
+        char *val1, *val2, *val3, *val4, *r;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("val1");
+        assert_se(val1);
+        val2 = strdup("val2");
+        assert_se(val2);
+        val3 = strdup("val3");
+        assert_se(val3);
+        val4 = strdup("val4");
+        assert_se(val4);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        n = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+        ordered_hashmap_put(m, "key 3", val3);
+        ordered_hashmap_put(m, "key 4", val4);
+
+        assert_se(ordered_hashmap_move_one(n, NULL, "key 3") == -ENOENT);
+        assert_se(ordered_hashmap_move_one(n, m, "key 5") == -ENOENT);
+        assert_se(ordered_hashmap_move_one(n, m, "key 3") == 0);
+        assert_se(ordered_hashmap_move_one(n, m, "key 4") == 0);
+
+        r = ordered_hashmap_get(n, "key 3");
+        assert_se(r && streq(r, "val3"));
+        r = ordered_hashmap_get(n, "key 4");
+        assert_se(r && streq(r, "val4"));
+        r = ordered_hashmap_get(m, "key 3");
+        assert_se(!r);
+
+        assert_se(ordered_hashmap_move_one(n, m, "key 3") == -EEXIST);
+
+        ordered_hashmap_free_free(m);
+        ordered_hashmap_free_free(n);
+}
+
+static void test_ordered_hashmap_move(void) {
+        OrderedHashmap *m, *n;
+        char *val1, *val2, *val3, *val4, *r;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("val1");
+        assert_se(val1);
+        val2 = strdup("val2");
+        assert_se(val2);
+        val3 = strdup("val3");
+        assert_se(val3);
+        val4 = strdup("val4");
+        assert_se(val4);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        n = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(n, "key 1", strdup(val1));
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+        ordered_hashmap_put(m, "key 3", val3);
+        ordered_hashmap_put(m, "key 4", val4);
+
+        assert_se(ordered_hashmap_move(n, NULL) == 0);
+        assert_se(ordered_hashmap_move(n, m) == 0);
+
+        assert_se(ordered_hashmap_size(m) == 1);
+        r = ordered_hashmap_get(m, "key 1");
+        assert_se(r && streq(r, "val1"));
+
+        r = ordered_hashmap_get(n, "key 1");
+        assert_se(r && streq(r, "val1"));
+        r = ordered_hashmap_get(n, "key 2");
+        assert_se(r && streq(r, "val2"));
+        r = ordered_hashmap_get(n, "key 3");
+        assert_se(r && streq(r, "val3"));
+        r = ordered_hashmap_get(n, "key 4");
+        assert_se(r && streq(r, "val4"));
+
+        ordered_hashmap_free_free(m);
+        ordered_hashmap_free_free(n);
+}
+
+static void test_ordered_hashmap_update(void) {
+        OrderedHashmap *m;
+        char *val1, *val2, *r;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        val1 = strdup("old_value");
+        assert_se(val1);
+        val2 = strdup("new_value");
+        assert_se(val2);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        r = ordered_hashmap_get(m, "key 1");
+        assert_se(streq(r, "old_value"));
+
+        assert_se(ordered_hashmap_update(m, "key 2", val2) == -ENOENT);
+        r = ordered_hashmap_get(m, "key 1");
+        assert_se(streq(r, "old_value"));
+
+        assert_se(ordered_hashmap_update(m, "key 1", val2) == 0);
+        r = ordered_hashmap_get(m, "key 1");
+        assert_se(streq(r, "new_value"));
+
+        free(val1);
+        free(val2);
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_put(void) {
+        OrderedHashmap *m = NULL;
+        int valid_ordered_hashmap_put;
+        void *val1 = (void*) "val 1";
+        void *val2 = (void*) "val 2";
+        _cleanup_free_ char* key1 = NULL;
+
+        log_info("/* %s */", __func__);
+
+        assert_se(ordered_hashmap_ensure_allocated(&m, &string_hash_ops) >= 0);
+        assert_se(m);
+
+        valid_ordered_hashmap_put = ordered_hashmap_put(m, "key 1", val1);
+        assert_se(valid_ordered_hashmap_put == 1);
+        assert_se(ordered_hashmap_put(m, "key 1", val1) == 0);
+        assert_se(ordered_hashmap_put(m, "key 1", val2) == -EEXIST);
+        key1 = strdup("key 1");
+        assert_se(ordered_hashmap_put(m, key1, val1) == 0);
+        assert_se(ordered_hashmap_put(m, key1, val2) == -EEXIST);
+
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_remove(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        char *r;
+
+        log_info("/* %s */", __func__);
+
+        r = ordered_hashmap_remove(NULL, "key 1");
+        assert_se(r == NULL);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        r = ordered_hashmap_remove(m, "no such key");
+        assert_se(r == NULL);
+
+        ordered_hashmap_put(m, "key 1", (void*) "val 1");
+        ordered_hashmap_put(m, "key 2", (void*) "val 2");
+
+        r = ordered_hashmap_remove(m, "key 1");
+        assert_se(streq(r, "val 1"));
+
+        r = ordered_hashmap_get(m, "key 2");
+        assert_se(streq(r, "val 2"));
+        assert_se(!ordered_hashmap_get(m, "key 1"));
+}
+
+static void test_ordered_hashmap_remove2(void) {
+        _cleanup_ordered_hashmap_free_free_free_ OrderedHashmap *m = NULL;
+        char key1[] = "key 1";
+        char key2[] = "key 2";
+        char val1[] = "val 1";
+        char val2[] = "val 2";
+        void *r, *r2;
+
+        log_info("/* %s */", __func__);
+
+        r = ordered_hashmap_remove2(NULL, "key 1", &r2);
+        assert_se(r == NULL);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        r = ordered_hashmap_remove2(m, "no such key", &r2);
+        assert_se(r == NULL);
+
+        ordered_hashmap_put(m, strdup(key1), strdup(val1));
+        ordered_hashmap_put(m, strdup(key2), strdup(val2));
+
+        r = ordered_hashmap_remove2(m, key1, &r2);
+        assert_se(streq(r, val1));
+        assert_se(streq(r2, key1));
+        free(r);
+        free(r2);
+
+        r = ordered_hashmap_get(m, key2);
+        assert_se(streq(r, val2));
+        assert_se(!ordered_hashmap_get(m, key1));
+}
+
+static void test_ordered_hashmap_remove_value(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        char *r;
+
+        char val1[] = "val 1";
+        char val2[] = "val 2";
+
+        log_info("/* %s */", __func__);
+
+        r = ordered_hashmap_remove_value(NULL, "key 1", val1);
+        assert_se(r == NULL);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        r = ordered_hashmap_remove_value(m, "key 1", val1);
+        assert_se(r == NULL);
+
+        ordered_hashmap_put(m, "key 1", val1);
+        ordered_hashmap_put(m, "key 2", val2);
+
+        r = ordered_hashmap_remove_value(m, "key 1", val1);
+        assert_se(streq(r, "val 1"));
+
+        r = ordered_hashmap_get(m, "key 2");
+        assert_se(streq(r, "val 2"));
+        assert_se(!ordered_hashmap_get(m, "key 1"));
+
+        r = ordered_hashmap_remove_value(m, "key 2", val1);
+        assert_se(r == NULL);
+
+        r = ordered_hashmap_get(m, "key 2");
+        assert_se(streq(r, "val 2"));
+        assert_se(!ordered_hashmap_get(m, "key 1"));
+}
+
+static void test_ordered_hashmap_remove_and_put(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        int valid;
+        char *r;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        valid = ordered_hashmap_remove_and_put(m, "invalid key", "new key", NULL);
+        assert_se(valid == -ENOENT);
+
+        valid = ordered_hashmap_put(m, "key 1", (void*) (const char *) "val 1");
+        assert_se(valid == 1);
+
+        valid = ordered_hashmap_remove_and_put(NULL, "key 1", "key 2", (void*) (const char *) "val 2");
+        assert_se(valid == -ENOENT);
+
+        valid = ordered_hashmap_remove_and_put(m, "key 1", "key 2", (void*) (const char *) "val 2");
+        assert_se(valid == 0);
+
+        r = ordered_hashmap_get(m, "key 2");
+        assert_se(streq(r, "val 2"));
+        assert_se(!ordered_hashmap_get(m, "key 1"));
+
+        valid = ordered_hashmap_put(m, "key 3", (void*) (const char *) "val 3");
+        assert_se(valid == 1);
+        valid = ordered_hashmap_remove_and_put(m, "key 3", "key 2", (void*) (const char *) "val 2");
+        assert_se(valid == -EEXIST);
+}
+
+static void test_ordered_hashmap_remove_and_replace(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        int valid;
+        void *key1 = UINT_TO_PTR(1);
+        void *key2 = UINT_TO_PTR(2);
+        void *key3 = UINT_TO_PTR(3);
+        void *r;
+        int i, j;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&trivial_hash_ops);
+        assert_se(m);
+
+        valid = ordered_hashmap_remove_and_replace(m, key1, key2, NULL);
+        assert_se(valid == -ENOENT);
+
+        valid = ordered_hashmap_put(m, key1, key1);
+        assert_se(valid == 1);
+
+        valid = ordered_hashmap_remove_and_replace(NULL, key1, key2, key2);
+        assert_se(valid == -ENOENT);
+
+        valid = ordered_hashmap_remove_and_replace(m, key1, key2, key2);
+        assert_se(valid == 0);
+
+        r = ordered_hashmap_get(m, key2);
+        assert_se(r == key2);
+        assert_se(!ordered_hashmap_get(m, key1));
+
+        valid = ordered_hashmap_put(m, key3, key3);
+        assert_se(valid == 1);
+        valid = ordered_hashmap_remove_and_replace(m, key3, key2, key2);
+        assert_se(valid == 0);
+        r = ordered_hashmap_get(m, key2);
+        assert_se(r == key2);
+        assert_se(!ordered_hashmap_get(m, key3));
+
+        /* Repeat this test several times to increase the chance of hitting
+         * the less likely case in ordered_hashmap_remove_and_replace where it
+         * compensates for the backward shift. */
+        for (i = 0; i < 20; i++) {
+                ordered_hashmap_clear(m);
+
+                for (j = 1; j < 7; j++)
+                        ordered_hashmap_put(m, UINT_TO_PTR(10*i + j), UINT_TO_PTR(10*i + j));
+                valid = ordered_hashmap_remove_and_replace(m, UINT_TO_PTR(10*i + 1),
+                                                   UINT_TO_PTR(10*i + 2),
+                                                   UINT_TO_PTR(10*i + 2));
+                assert_se(valid == 0);
+                assert_se(!ordered_hashmap_get(m, UINT_TO_PTR(10*i + 1)));
+                for (j = 2; j < 7; j++) {
+                        r = ordered_hashmap_get(m, UINT_TO_PTR(10*i + j));
+                        assert_se(r == UINT_TO_PTR(10*i + j));
+                }
+        }
+}
+
+static void test_ordered_hashmap_ensure_allocated(void) {
+        OrderedHashmap *m;
+        int valid_ordered_hashmap;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        valid_ordered_hashmap = ordered_hashmap_ensure_allocated(&m, &string_hash_ops);
+        assert_se(valid_ordered_hashmap == 0);
+
+        assert_se(m);
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_foreach_key(void) {
+        OrderedHashmap *m;
+        Iterator i;
+        bool key_found[] = { false, false, false, false };
+        const char *s;
+        const char *key;
+        static const char key_table[] =
+                "key 1\0"
+                "key 2\0"
+                "key 3\0"
+                "key 4\0";
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        NULSTR_FOREACH(key, key_table)
+                ordered_hashmap_put(m, key, (void*) (const char*) "my dummy val");
+
+        ORDERED_HASHMAP_FOREACH_KEY(s, key, m, i) {
+                assert(s);
+                if (!key_found[0] && streq(key, "key 1"))
+                        key_found[0] = true;
+                else if (!key_found[1] && streq(key, "key 2"))
+                        key_found[1] = true;
+                else if (!key_found[2] && streq(key, "key 3"))
+                        key_found[2] = true;
+                else if (!key_found[3] && streq(key, "fail"))
+                        key_found[3] = true;
+        }
+
+        assert_se(m);
+        assert_se(key_found[0] && key_found[1] && key_found[2] && !key_found[3]);
+
+        ordered_hashmap_free(m);
+}
+
+static void test_ordered_hashmap_foreach(void) {
+        OrderedHashmap *m;
+        Iterator i;
+        bool value_found[] = { false, false, false, false };
+        char *val1, *val2, *val3, *val4, *s;
+        unsigned count;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("my val1");
+        assert_se(val1);
+        val2 = strdup("my val2");
+        assert_se(val2);
+        val3 = strdup("my val3");
+        assert_se(val3);
+        val4 = strdup("my val4");
+        assert_se(val4);
+
+        m = NULL;
+
+        count = 0;
+        ORDERED_HASHMAP_FOREACH(s, m, i)
+                count++;
+        assert_se(count == 0);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        count = 0;
+        ORDERED_HASHMAP_FOREACH(s, m, i)
+                count++;
+        assert_se(count == 0);
+
+        ordered_hashmap_put(m, "Key 1", val1);
+        ordered_hashmap_put(m, "Key 2", val2);
+        ordered_hashmap_put(m, "Key 3", val3);
+        ordered_hashmap_put(m, "Key 4", val4);
+
+        ORDERED_HASHMAP_FOREACH(s, m, i) {
+                if (!value_found[0] && streq(s, val1))
+                        value_found[0] = true;
+                else if (!value_found[1] && streq(s, val2))
+                        value_found[1] = true;
+                else if (!value_found[2] && streq(s, val3))
+                        value_found[2] = true;
+                else if (!value_found[3] && streq(s, val4))
+                        value_found[3] = true;
+        }
+
+        assert_se(m);
+        assert_se(value_found[0] && value_found[1] && value_found[2] && value_found[3]);
+
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_merge(void) {
+        OrderedHashmap *m;
+        OrderedHashmap *n;
+        char *val1, *val2, *val3, *val4, *r;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("my val1");
+        assert_se(val1);
+        val2 = strdup("my val2");
+        assert_se(val2);
+        val3 = strdup("my val3");
+        assert_se(val3);
+        val4 = strdup("my val4");
+        assert_se(val4);
+
+        n = ordered_hashmap_new(&string_hash_ops);
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "Key 1", val1);
+        ordered_hashmap_put(m, "Key 2", val2);
+        ordered_hashmap_put(n, "Key 3", val3);
+        ordered_hashmap_put(n, "Key 4", val4);
+
+        assert_se(ordered_hashmap_merge(m, n) == 0);
+        r = ordered_hashmap_get(m, "Key 3");
+        assert_se(r && streq(r, "my val3"));
+        r = ordered_hashmap_get(m, "Key 4");
+        assert_se(r && streq(r, "my val4"));
+
+        assert_se(n);
+        assert_se(m);
+        ordered_hashmap_free(n);
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_contains(void) {
+        OrderedHashmap *m;
+        char *val1;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("my val");
+        assert_se(val1);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        assert_se(!ordered_hashmap_contains(m, "Key 1"));
+        ordered_hashmap_put(m, "Key 1", val1);
+        assert_se(ordered_hashmap_contains(m, "Key 1"));
+        assert_se(!ordered_hashmap_contains(m, "Key 2"));
+
+        assert_se(!ordered_hashmap_contains(NULL, "Key 1"));
+
+        assert_se(m);
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_isempty(void) {
+        OrderedHashmap *m;
+        char *val1;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("my val");
+        assert_se(val1);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        assert_se(ordered_hashmap_isempty(m));
+        ordered_hashmap_put(m, "Key 1", val1);
+        assert_se(!ordered_hashmap_isempty(m));
+
+        assert_se(m);
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_size(void) {
+        OrderedHashmap *m;
+        char *val1, *val2, *val3, *val4;
+
+        log_info("/* %s */", __func__);
+
+        val1 = strdup("my val");
+        assert_se(val1);
+        val2 = strdup("my val");
+        assert_se(val2);
+        val3 = strdup("my val");
+        assert_se(val3);
+        val4 = strdup("my val");
+        assert_se(val4);
+
+        assert_se(ordered_hashmap_size(NULL) == 0);
+        assert_se(ordered_hashmap_buckets(NULL) == 0);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "Key 1", val1);
+        ordered_hashmap_put(m, "Key 2", val2);
+        ordered_hashmap_put(m, "Key 3", val3);
+        ordered_hashmap_put(m, "Key 4", val4);
+
+        assert_se(m);
+        assert_se(ordered_hashmap_size(m) == 4);
+        assert_se(ordered_hashmap_buckets(m) >= 4);
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_get(void) {
+        OrderedHashmap *m;
+        char *r;
+        char *val;
+
+        log_info("/* %s */", __func__);
+
+        val = strdup("my val");
+        assert_se(val);
+
+        r = ordered_hashmap_get(NULL, "Key 1");
+        assert_se(r == NULL);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, "Key 1", val);
+
+        r = ordered_hashmap_get(m, "Key 1");
+        assert_se(streq(r, val));
+
+        r = ordered_hashmap_get(m, "no such key");
+        assert_se(r == NULL);
+
+        assert_se(m);
+        ordered_hashmap_free_free(m);
+}
+
+static void test_ordered_hashmap_get2(void) {
+        OrderedHashmap *m;
+        char *r;
+        char *val;
+        char key_orig[] = "Key 1";
+        void *key_copy;
+
+        log_info("/* %s */", __func__);
+
+        val = strdup("my val");
+        assert_se(val);
+
+        key_copy = strdup(key_orig);
+        assert_se(key_copy);
+
+        r = ordered_hashmap_get2(NULL, key_orig, &key_copy);
+        assert_se(r == NULL);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        ordered_hashmap_put(m, key_copy, val);
+        key_copy = NULL;
+
+        r = ordered_hashmap_get2(m, key_orig, &key_copy);
+        assert_se(streq(r, val));
+        assert_se(key_orig != key_copy);
+        assert_se(streq(key_orig, key_copy));
+
+        r = ordered_hashmap_get2(m, "no such key", NULL);
+        assert_se(r == NULL);
+
+        assert_se(m);
+        ordered_hashmap_free_free_free(m);
+}
+
+static void crippled_ordered_hashmap_func(const void *p, struct siphash *state) {
+        return trivial_hash_func(INT_TO_PTR(PTR_TO_INT(p) & 0xff), state);
+}
+
+static const struct hash_ops crippled_ordered_hashmap_ops = {
+        .hash = crippled_ordered_hashmap_func,
+        .compare = trivial_compare_func,
+};
+
+static void test_ordered_hashmap_many(void) {
+        OrderedHashmap *h;
+        unsigned i, j;
+        void *v, *k;
+        bool slow = slow_tests_enabled();
+        const struct {
+                const char *title;
+                const struct hash_ops *ops;
+                unsigned n_entries;
+        } tests[] = {
+                { "trivial_ordered_hashmap_ops",  NULL,                  slow ? 1 << 20 : 240 },
+                { "crippled_ordered_hashmap_ops", &crippled_ordered_hashmap_ops, slow ? 1 << 14 : 140 },
+        };
+
+        log_info("/* %s (%s) */", __func__, slow ? "slow" : "fast");
+
+        for (j = 0; j < ELEMENTSOF(tests); j++) {
+                usec_t ts = now(CLOCK_MONOTONIC), n;
+                char b[FORMAT_TIMESPAN_MAX];
+
+                assert_se(h = ordered_hashmap_new(tests[j].ops));
+
+                for (i = 1; i < tests[j].n_entries*3; i+=3) {
+                        assert_se(ordered_hashmap_put(h, UINT_TO_PTR(i), UINT_TO_PTR(i)) >= 0);
+                        assert_se(PTR_TO_UINT(ordered_hashmap_get(h, UINT_TO_PTR(i))) == i);
+                }
+
+                for (i = 1; i < tests[j].n_entries*3; i++)
+                        assert_se(ordered_hashmap_contains(h, UINT_TO_PTR(i)) == (i % 3 == 1));
+
+                log_info("%s %u <= %u * 0.8 = %g",
+                         tests[j].title, ordered_hashmap_size(h), ordered_hashmap_buckets(h), ordered_hashmap_buckets(h) * 0.8);
+
+                assert_se(ordered_hashmap_size(h) <= ordered_hashmap_buckets(h) * 0.8);
+                assert_se(ordered_hashmap_size(h) == tests[j].n_entries);
+
+                while (!ordered_hashmap_isempty(h)) {
+                        k = ordered_hashmap_first_key(h);
+                        v = ordered_hashmap_remove(h, k);
+                        assert_se(v == k);
+                }
+
+                ordered_hashmap_free(h);
+
+                n = now(CLOCK_MONOTONIC);
+                log_info("test took %s", format_timespan(b, sizeof b, n - ts, 0));
+        }
+}
+
+extern unsigned custom_counter;
+extern const struct hash_ops boring_hash_ops, custom_hash_ops;
+
+static void test_ordered_hashmap_free(void) {
+        OrderedHashmap *h;
+        bool slow = slow_tests_enabled();
+        usec_t ts, n;
+        char b[FORMAT_TIMESPAN_MAX];
+        unsigned n_entries = slow ? 1 << 20 : 240;
+
+        const struct {
+                const char *title;
+                const struct hash_ops *ops;
+                unsigned expect_counter;
+        } tests[] = {
+                { "string_hash_ops",      &boring_hash_ops, 2 * n_entries},
+                { "custom_free_hash_ops", &custom_hash_ops, 0 },
+        };
+
+        log_info("/* %s (%s, %u entries) */", __func__, slow ? "slow" : "fast", n_entries);
+
+        for (unsigned j = 0; j < ELEMENTSOF(tests); j++) {
+                ts = now(CLOCK_MONOTONIC);
+                assert_se(h = ordered_hashmap_new(tests[j].ops));
+
+                custom_counter = 0;
+                for (unsigned i = 0; i < n_entries; i++) {
+                        char s[DECIMAL_STR_MAX(unsigned)];
+                        char *k, *v;
+
+                        xsprintf(s, "%u", i);
+                        assert_se(k = strdup(s));
+                        assert_se(v = strdup(s));
+                        custom_counter += 2;
+
+                        assert_se(ordered_hashmap_put(h, k, v) >= 0);
+                }
+
+                ordered_hashmap_free(h);
+
+                n = now(CLOCK_MONOTONIC);
+                log_info("%s test took %s", tests[j].title, format_timespan(b, sizeof b, n - ts, 0));
+
+                assert_se(custom_counter == tests[j].expect_counter);
+        }
+}
+
+typedef struct Item {
+        int seen;
+} Item;
+static void item_seen(Item *item) {
+        item->seen++;
+}
+
+static void test_ordered_hashmap_free_with_destructor(void) {
+        OrderedHashmap *m;
+        struct Item items[4] = {};
+        unsigned i;
+
+        log_info("/* %s */", __func__);
+
+        assert_se(m = ordered_hashmap_new(NULL));
+        for (i = 0; i < ELEMENTSOF(items) - 1; i++)
+                assert_se(ordered_hashmap_put(m, INT_TO_PTR(i), items + i) == 1);
+
+        m = ordered_hashmap_free_with_destructor(m, item_seen);
+        assert_se(items[0].seen == 1);
+        assert_se(items[1].seen == 1);
+        assert_se(items[2].seen == 1);
+        assert_se(items[3].seen == 0);
+}
+
+static void test_ordered_hashmap_first(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        assert_se(!ordered_hashmap_first(m));
+        assert_se(ordered_hashmap_put(m, "key 1", (void*) "val 1") == 1);
+        assert_se(streq(ordered_hashmap_first(m), "val 1"));
+        assert_se(ordered_hashmap_put(m, "key 2", (void*) "val 2") == 1);
+#ifdef ORDERED
+        assert_se(streq(ordered_hashmap_first(m), "val 1"));
+        assert_se(ordered_hashmap_remove(m, "key 1"));
+        assert_se(streq(ordered_hashmap_first(m), "val 2"));
+#endif
+}
+
+static void test_ordered_hashmap_first_key(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        assert_se(!ordered_hashmap_first_key(m));
+        assert_se(ordered_hashmap_put(m, "key 1", NULL) == 1);
+        assert_se(streq(ordered_hashmap_first_key(m), "key 1"));
+        assert_se(ordered_hashmap_put(m, "key 2", NULL) == 1);
+#ifdef ORDERED
+        assert_se(streq(ordered_hashmap_first_key(m), "key 1"));
+        assert_se(ordered_hashmap_remove(m, "key 1") == NULL);
+        assert_se(streq(ordered_hashmap_first_key(m), "key 2"));
+#endif
+}
+
+static void test_ordered_hashmap_steal_first_key(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        assert_se(!ordered_hashmap_steal_first_key(m));
+        assert_se(ordered_hashmap_put(m, "key 1", NULL) == 1);
+        assert_se(streq(ordered_hashmap_steal_first_key(m), "key 1"));
+
+        assert_se(ordered_hashmap_isempty(m));
+}
+
+static void test_ordered_hashmap_steal_first(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        int seen[3] = {};
+        char *val;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        assert_se(ordered_hashmap_put(m, "key 1", (void*) "1") == 1);
+        assert_se(ordered_hashmap_put(m, "key 2", (void*) "22") == 1);
+        assert_se(ordered_hashmap_put(m, "key 3", (void*) "333") == 1);
+
+        while ((val = ordered_hashmap_steal_first(m)))
+                seen[strlen(val) - 1]++;
+
+        assert_se(seen[0] == 1 && seen[1] == 1 && seen[2] == 1);
+
+        assert_se(ordered_hashmap_isempty(m));
+}
+
+static void test_ordered_hashmap_clear_free_free(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+        assert_se(m);
+
+        assert_se(ordered_hashmap_put(m, strdup("key 1"), NULL) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 2"), NULL) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 3"), NULL) == 1);
+
+        ordered_hashmap_clear_free_free(m);
+        assert_se(ordered_hashmap_isempty(m));
+
+        assert_se(ordered_hashmap_put(m, strdup("key 1"), strdup("value 1")) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 2"), strdup("value 2")) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 3"), strdup("value 3")) == 1);
+
+        ordered_hashmap_clear_free_free(m);
+        assert_se(ordered_hashmap_isempty(m));
+}
+
+DEFINE_PRIVATE_HASH_OPS_WITH_KEY_DESTRUCTOR(test_hash_ops_key, char, string_hash_func, string_compare_func, free);
+DEFINE_PRIVATE_HASH_OPS_FULL(test_hash_ops_full, char, string_hash_func, string_compare_func, free, char, free);
+
+static void test_ordered_hashmap_clear_free_with_destructor(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&test_hash_ops_key);
+        assert_se(m);
+
+        assert_se(ordered_hashmap_put(m, strdup("key 1"), NULL) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 2"), NULL) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 3"), NULL) == 1);
+
+        ordered_hashmap_clear_free(m);
+        assert_se(ordered_hashmap_isempty(m));
+        m = ordered_hashmap_free(m);
+
+        m = ordered_hashmap_new(&test_hash_ops_full);
+        assert_se(m);
+
+        assert_se(ordered_hashmap_put(m, strdup("key 1"), strdup("value 1")) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 2"), strdup("value 2")) == 1);
+        assert_se(ordered_hashmap_put(m, strdup("key 3"), strdup("value 3")) == 1);
+
+        ordered_hashmap_clear_free(m);
+        assert_se(ordered_hashmap_isempty(m));
+}
+
+static void test_ordered_hashmap_reserve(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+
+        log_info("/* %s */", __func__);
+
+        m = ordered_hashmap_new(&string_hash_ops);
+
+        assert_se(ordered_hashmap_reserve(m, 1) == 0);
+        assert_se(ordered_hashmap_buckets(m) < 1000);
+        assert_se(ordered_hashmap_reserve(m, 1000) == 0);
+        assert_se(ordered_hashmap_buckets(m) >= 1000);
+        assert_se(ordered_hashmap_isempty(m));
+
+        assert_se(ordered_hashmap_put(m, "key 1", (void*) "val 1") == 1);
+
+        assert_se(ordered_hashmap_reserve(m, UINT_MAX) == -ENOMEM);
+        assert_se(ordered_hashmap_reserve(m, UINT_MAX - 1) == -ENOMEM);
+}
+
+static void test_path_ordered_hashmap(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *h = NULL;
+
+        log_info("/* %s */", __func__);
+
+        assert_se(h = ordered_hashmap_new(&path_hash_ops));
+
+        assert_se(ordered_hashmap_put(h, "foo", INT_TO_PTR(1)) >= 0);
+        assert_se(ordered_hashmap_put(h, "/foo", INT_TO_PTR(2)) >= 0);
+        assert_se(ordered_hashmap_put(h, "//foo", INT_TO_PTR(3)) == -EEXIST);
+        assert_se(ordered_hashmap_put(h, "//foox/", INT_TO_PTR(4)) >= 0);
+        assert_se(ordered_hashmap_put(h, "/foox////", INT_TO_PTR(5)) == -EEXIST);
+        assert_se(ordered_hashmap_put(h, "foo//////bar/quux//", INT_TO_PTR(6)) >= 0);
+        assert_se(ordered_hashmap_put(h, "foo/bar//quux/", INT_TO_PTR(8)) == -EEXIST);
+
+        assert_se(ordered_hashmap_get(h, "foo") == INT_TO_PTR(1));
+        assert_se(ordered_hashmap_get(h, "foo/") == INT_TO_PTR(1));
+        assert_se(ordered_hashmap_get(h, "foo////") == INT_TO_PTR(1));
+        assert_se(ordered_hashmap_get(h, "/foo") == INT_TO_PTR(2));
+        assert_se(ordered_hashmap_get(h, "//foo") == INT_TO_PTR(2));
+        assert_se(ordered_hashmap_get(h, "/////foo////") == INT_TO_PTR(2));
+        assert_se(ordered_hashmap_get(h, "/////foox////") == INT_TO_PTR(4));
+        assert_se(ordered_hashmap_get(h, "/foox/") == INT_TO_PTR(4));
+        assert_se(ordered_hashmap_get(h, "/foox") == INT_TO_PTR(4));
+        assert_se(!ordered_hashmap_get(h, "foox"));
+        assert_se(ordered_hashmap_get(h, "foo/bar/quux") == INT_TO_PTR(6));
+        assert_se(ordered_hashmap_get(h, "foo////bar////quux/////") == INT_TO_PTR(6));
+        assert_se(!ordered_hashmap_get(h, "/foo////bar////quux/////"));
+}
+
+static void test_string_strv_ordered_hashmap(void) {
+        _cleanup_ordered_hashmap_free_ OrderedHashmap *m = NULL;
+        char **s;
+
+        log_info("/* %s */", __func__);
+
+        assert_se(string_strv_ordered_hashmap_put(&m, "foo", "bar") == 1);
+        assert_se(string_strv_ordered_hashmap_put(&m, "foo", "bar") == 0);
+        assert_se(string_strv_ordered_hashmap_put(&m, "foo", "BAR") == 1);
+        assert_se(string_strv_ordered_hashmap_put(&m, "foo", "BAR") == 0);
+        assert_se(string_strv_ordered_hashmap_put(&m, "foo", "bar") == 0);
+        assert_se(ordered_hashmap_contains(m, "foo"));
+
+        s = ordered_hashmap_get(m, "foo");
+        assert_se(strv_equal(s, STRV_MAKE("bar", "BAR")));
+
+        assert_se(string_strv_ordered_hashmap_put(&m, "xxx", "bar") == 1);
+        assert_se(string_strv_ordered_hashmap_put(&m, "xxx", "bar") == 0);
+        assert_se(string_strv_ordered_hashmap_put(&m, "xxx", "BAR") == 1);
+        assert_se(string_strv_ordered_hashmap_put(&m, "xxx", "BAR") == 0);
+        assert_se(string_strv_ordered_hashmap_put(&m, "xxx", "bar") == 0);
+        assert_se(ordered_hashmap_contains(m, "xxx"));
+
+        s = ordered_hashmap_get(m, "xxx");
+        assert_se(strv_equal(s, STRV_MAKE("bar", "BAR")));
+}
+
+void test_ordered_hashmap_funcs(void) {
+        log_info("/************ %s ************/", __func__);
+
+        test_ordered_hashmap_copy();
+        test_ordered_hashmap_get_strv();
+        test_ordered_hashmap_move_one();
+        test_ordered_hashmap_move();
+        test_ordered_hashmap_replace();
+        test_ordered_hashmap_update();
+        test_ordered_hashmap_put();
+        test_ordered_hashmap_remove();
+        test_ordered_hashmap_remove2();
+        test_ordered_hashmap_remove_value();
+        test_ordered_hashmap_remove_and_put();
+        test_ordered_hashmap_remove_and_replace();
+        test_ordered_hashmap_ensure_allocated();
+        test_ordered_hashmap_foreach();
+        test_ordered_hashmap_foreach_key();
+        test_ordered_hashmap_contains();
+        test_ordered_hashmap_merge();
+        test_ordered_hashmap_isempty();
+        test_ordered_hashmap_get();
+        test_ordered_hashmap_get2();
+        test_ordered_hashmap_size();
+        test_ordered_hashmap_many();
+        test_ordered_hashmap_free();
+        test_ordered_hashmap_free_with_destructor();
+        test_ordered_hashmap_first();
+        test_ordered_hashmap_first_key();
+        test_ordered_hashmap_steal_first_key();
+        test_ordered_hashmap_steal_first();
+        test_ordered_hashmap_clear_free_free();
+        test_ordered_hashmap_clear_free_with_destructor();
+        test_ordered_hashmap_reserve();
+        test_path_ordered_hashmap();
+        test_string_strv_ordered_hashmap();
+}
diff --git a/build/src/test/test-libsystemd-sym.c b/build/src/test/test-libsystemd-sym.c
new file mode 100644
index 0000000000..c8a3dbf92a
--- /dev/null
+++ b/build/src/test/test-libsystemd-sym.c
@@ -0,0 +1,592 @@
+#include <stdio.h>
+#include "sd-bus.h"
+#include "sd-bus-protocol.h"
+#include "sd-bus-vtable.h"
+#include "sd-daemon.h"
+#include "sd-device.h"
+#include "sd-event.h"
+#include "sd-hwdb.h"
+#include "sd-id128.h"
+#include "sd-journal.h"
+#include "sd-login.h"
+#include "sd-messages.h"
+#include "sd-path.h"
+
+/* We want to check deprecated symbols too, without complaining */
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
+const void* symbols[] = {
+    sd_journal_print,
+    sd_journal_printv,
+    sd_journal_send,
+    sd_journal_sendv,
+    sd_journal_stream_fd,
+    sd_journal_open,
+    sd_journal_close,
+    sd_journal_previous,
+    sd_journal_next,
+    sd_journal_previous_skip,
+    sd_journal_next_skip,
+    sd_journal_get_realtime_usec,
+    sd_journal_get_monotonic_usec,
+    sd_journal_get_data,
+    sd_journal_enumerate_data,
+    sd_journal_restart_data,
+    sd_journal_add_match,
+    sd_journal_flush_matches,
+    sd_journal_seek_head,
+    sd_journal_seek_tail,
+    sd_journal_seek_monotonic_usec,
+    sd_journal_seek_realtime_usec,
+    sd_journal_seek_cursor,
+    sd_journal_get_cursor,
+    sd_journal_get_fd,
+    sd_journal_process,
+    sd_journal_print_with_location,
+    sd_journal_printv_with_location,
+    sd_journal_send_with_location,
+    sd_journal_sendv_with_location,
+    sd_journal_get_cutoff_realtime_usec,
+    sd_journal_get_cutoff_monotonic_usec,
+    sd_journal_wait,
+    sd_journal_open_directory,
+    sd_journal_add_disjunction,
+    sd_journal_perror,
+    sd_journal_perror_with_location,
+    sd_journal_get_usage,
+    sd_journal_test_cursor,
+    sd_journal_query_unique,
+    sd_journal_enumerate_unique,
+    sd_journal_restart_unique,
+    sd_journal_get_catalog,
+    sd_journal_get_catalog_for_message_id,
+    sd_journal_set_data_threshold,
+    sd_journal_get_data_threshold,
+    sd_journal_reliable_fd,
+    sd_journal_get_events,
+    sd_journal_get_timeout,
+    sd_journal_add_conjunction,
+    sd_journal_open_files,
+    sd_journal_open_container,
+    sd_booted,
+    sd_is_fifo,
+    sd_is_mq,
+    sd_is_socket,
+    sd_is_socket_inet,
+    sd_is_socket_unix,
+    sd_is_special,
+    sd_listen_fds,
+    sd_notify,
+    sd_notifyf,
+    sd_watchdog_enabled,
+    sd_id128_to_string,
+    sd_id128_from_string,
+    sd_id128_randomize,
+    sd_id128_get_machine,
+    sd_id128_get_boot,
+    sd_get_seats,
+    sd_get_sessions,
+    sd_get_uids,
+    sd_login_monitor_flush,
+    sd_login_monitor_get_fd,
+    sd_login_monitor_new,
+    sd_login_monitor_unref,
+    sd_pid_get_owner_uid,
+    sd_pid_get_session,
+    sd_seat_can_multi_session,
+    sd_seat_get_active,
+    sd_seat_get_sessions,
+    sd_session_get_seat,
+    sd_session_get_uid,
+    sd_session_is_active,
+    sd_uid_get_seats,
+    sd_uid_get_sessions,
+    sd_uid_get_state,
+    sd_uid_is_on_seat,
+    sd_pid_get_unit,
+    sd_session_get_service,
+    sd_session_get_type,
+    sd_session_get_class,
+    sd_session_get_display,
+    sd_session_get_state,
+    sd_seat_can_tty,
+    sd_seat_can_graphical,
+    sd_session_get_tty,
+    sd_login_monitor_get_events,
+    sd_login_monitor_get_timeout,
+    sd_pid_get_user_unit,
+    sd_pid_get_machine_name,
+    sd_get_machine_names,
+    sd_pid_get_slice,
+    sd_session_get_vt,
+    sd_session_is_remote,
+    sd_session_get_remote_user,
+    sd_session_get_remote_host,
+    sd_machine_get_class,
+    sd_peer_get_session,
+    sd_peer_get_owner_uid,
+    sd_peer_get_unit,
+    sd_peer_get_user_unit,
+    sd_peer_get_machine_name,
+    sd_peer_get_slice,
+    sd_uid_get_display,
+    sd_pid_notify,
+    sd_pid_notifyf,
+    sd_machine_get_ifindices,
+    sd_session_get_desktop,
+    sd_pid_notify_with_fds,
+    sd_pid_get_user_slice,
+    sd_peer_get_user_slice,
+    sd_bus_default,
+    sd_bus_default_user,
+    sd_bus_default_system,
+    sd_bus_open,
+    sd_bus_open_user,
+    sd_bus_open_system,
+    sd_bus_open_system_remote,
+    sd_bus_open_system_machine,
+    sd_bus_new,
+    sd_bus_set_address,
+    sd_bus_set_fd,
+    sd_bus_set_exec,
+    sd_bus_get_address,
+    sd_bus_set_bus_client,
+    sd_bus_is_bus_client,
+    sd_bus_set_server,
+    sd_bus_is_server,
+    sd_bus_set_anonymous,
+    sd_bus_is_anonymous,
+    sd_bus_set_trusted,
+    sd_bus_is_trusted,
+    sd_bus_set_monitor,
+    sd_bus_is_monitor,
+    sd_bus_set_description,
+    sd_bus_get_description,
+    sd_bus_negotiate_creds,
+    sd_bus_negotiate_timestamp,
+    sd_bus_negotiate_fds,
+    sd_bus_can_send,
+    sd_bus_get_creds_mask,
+    sd_bus_set_allow_interactive_authorization,
+    sd_bus_get_allow_interactive_authorization,
+    sd_bus_start,
+    sd_bus_close,
+    sd_bus_try_close,
+    sd_bus_ref,
+    sd_bus_unref,
+    sd_bus_is_open,
+    sd_bus_get_bus_id,
+    sd_bus_get_scope,
+    sd_bus_get_tid,
+    sd_bus_get_owner_creds,
+    sd_bus_send,
+    sd_bus_send_to,
+    sd_bus_call,
+    sd_bus_call_async,
+    sd_bus_get_fd,
+    sd_bus_get_events,
+    sd_bus_get_timeout,
+    sd_bus_process,
+    sd_bus_process_priority,
+    sd_bus_wait,
+    sd_bus_flush,
+    sd_bus_get_current_slot,
+    sd_bus_get_current_message,
+    sd_bus_get_current_handler,
+    sd_bus_get_current_userdata,
+    sd_bus_attach_event,
+    sd_bus_detach_event,
+    sd_bus_get_event,
+    sd_bus_add_filter,
+    sd_bus_add_match,
+    sd_bus_add_object,
+    sd_bus_add_fallback,
+    sd_bus_add_object_vtable,
+    sd_bus_add_fallback_vtable,
+    sd_bus_add_node_enumerator,
+    sd_bus_add_object_manager,
+    sd_bus_slot_ref,
+    sd_bus_slot_unref,
+    sd_bus_slot_get_bus,
+    sd_bus_slot_get_userdata,
+    sd_bus_slot_set_userdata,
+    sd_bus_slot_get_description,
+    sd_bus_slot_set_description,
+    sd_bus_slot_get_current_message,
+    sd_bus_slot_get_current_handler,
+    sd_bus_slot_get_current_userdata,
+    sd_bus_message_new_signal,
+    sd_bus_message_new_method_call,
+    sd_bus_message_new_method_return,
+    sd_bus_message_new_method_error,
+    sd_bus_message_new_method_errorf,
+    sd_bus_message_new_method_errno,
+    sd_bus_message_new_method_errnof,
+    sd_bus_message_ref,
+    sd_bus_message_unref,
+    sd_bus_message_get_type,
+    sd_bus_message_get_cookie,
+    sd_bus_message_get_reply_cookie,
+    sd_bus_message_get_priority,
+    sd_bus_message_get_expect_reply,
+    sd_bus_message_get_auto_start,
+    sd_bus_message_get_allow_interactive_authorization,
+    sd_bus_message_get_signature,
+    sd_bus_message_get_path,
+    sd_bus_message_get_interface,
+    sd_bus_message_get_member,
+    sd_bus_message_get_destination,
+    sd_bus_message_get_sender,
+    sd_bus_message_get_error,
+    sd_bus_message_get_errno,
+    sd_bus_message_get_monotonic_usec,
+    sd_bus_message_get_realtime_usec,
+    sd_bus_message_get_seqnum,
+    sd_bus_message_get_bus,
+    sd_bus_message_get_creds,
+    sd_bus_message_is_signal,
+    sd_bus_message_is_method_call,
+    sd_bus_message_is_method_error,
+    sd_bus_message_is_empty,
+    sd_bus_message_has_signature,
+    sd_bus_message_set_expect_reply,
+    sd_bus_message_set_auto_start,
+    sd_bus_message_set_allow_interactive_authorization,
+    sd_bus_message_set_destination,
+    sd_bus_message_set_priority,
+    sd_bus_message_append,
+    sd_bus_message_append_basic,
+    sd_bus_message_append_array,
+    sd_bus_message_append_array_space,
+    sd_bus_message_append_array_iovec,
+    sd_bus_message_append_array_memfd,
+    sd_bus_message_append_string_space,
+    sd_bus_message_append_string_iovec,
+    sd_bus_message_append_string_memfd,
+    sd_bus_message_append_strv,
+    sd_bus_message_open_container,
+    sd_bus_message_close_container,
+    sd_bus_message_copy,
+    sd_bus_message_read,
+    sd_bus_message_read_basic,
+    sd_bus_message_read_array,
+    sd_bus_message_read_strv,
+    sd_bus_message_skip,
+    sd_bus_message_enter_container,
+    sd_bus_message_exit_container,
+    sd_bus_message_peek_type,
+    sd_bus_message_verify_type,
+    sd_bus_message_at_end,
+    sd_bus_message_rewind,
+    sd_bus_get_unique_name,
+    sd_bus_request_name,
+    sd_bus_release_name,
+    sd_bus_list_names,
+    sd_bus_get_name_creds,
+    sd_bus_get_name_machine_id,
+    sd_bus_call_method,
+    sd_bus_call_method_async,
+    sd_bus_get_property,
+    sd_bus_get_property_trivial,
+    sd_bus_get_property_string,
+    sd_bus_get_property_strv,
+    sd_bus_set_property,
+    sd_bus_reply_method_return,
+    sd_bus_reply_method_error,
+    sd_bus_reply_method_errorf,
+    sd_bus_reply_method_errno,
+    sd_bus_reply_method_errnof,
+    sd_bus_emit_signal,
+    sd_bus_emit_properties_changed_strv,
+    sd_bus_emit_properties_changed,
+    sd_bus_emit_interfaces_added_strv,
+    sd_bus_emit_interfaces_added,
+    sd_bus_emit_interfaces_removed_strv,
+    sd_bus_emit_interfaces_removed,
+    sd_bus_query_sender_creds,
+    sd_bus_query_sender_privilege,
+    sd_bus_creds_new_from_pid,
+    sd_bus_creds_ref,
+    sd_bus_creds_unref,
+    sd_bus_creds_get_mask,
+    sd_bus_creds_get_augmented_mask,
+    sd_bus_creds_get_pid,
+    sd_bus_creds_get_ppid,
+    sd_bus_creds_get_tid,
+    sd_bus_creds_get_uid,
+    sd_bus_creds_get_euid,
+    sd_bus_creds_get_suid,
+    sd_bus_creds_get_fsuid,
+    sd_bus_creds_get_gid,
+    sd_bus_creds_get_egid,
+    sd_bus_creds_get_sgid,
+    sd_bus_creds_get_fsgid,
+    sd_bus_creds_get_supplementary_gids,
+    sd_bus_creds_get_comm,
+    sd_bus_creds_get_tid_comm,
+    sd_bus_creds_get_exe,
+    sd_bus_creds_get_cmdline,
+    sd_bus_creds_get_cgroup,
+    sd_bus_creds_get_unit,
+    sd_bus_creds_get_slice,
+    sd_bus_creds_get_user_unit,
+    sd_bus_creds_get_user_slice,
+    sd_bus_creds_get_session,
+    sd_bus_creds_get_owner_uid,
+    sd_bus_creds_has_effective_cap,
+    sd_bus_creds_has_permitted_cap,
+    sd_bus_creds_has_inheritable_cap,
+    sd_bus_creds_has_bounding_cap,
+    sd_bus_creds_get_selinux_context,
+    sd_bus_creds_get_audit_session_id,
+    sd_bus_creds_get_audit_login_uid,
+    sd_bus_creds_get_tty,
+    sd_bus_creds_get_unique_name,
+    sd_bus_creds_get_well_known_names,
+    sd_bus_creds_get_description,
+    sd_bus_error_free,
+    sd_bus_error_set,
+    sd_bus_error_setf,
+    sd_bus_error_set_const,
+    sd_bus_error_set_errno,
+    sd_bus_error_set_errnof,
+    sd_bus_error_set_errnofv,
+    sd_bus_error_get_errno,
+    sd_bus_error_copy,
+    sd_bus_error_is_set,
+    sd_bus_error_has_name,
+    sd_bus_error_add_map,
+    sd_bus_path_encode,
+    sd_bus_path_decode,
+    sd_bus_track_new,
+    sd_bus_track_ref,
+    sd_bus_track_unref,
+    sd_bus_track_get_bus,
+    sd_bus_track_get_userdata,
+    sd_bus_track_set_userdata,
+    sd_bus_track_add_sender,
+    sd_bus_track_remove_sender,
+    sd_bus_track_add_name,
+    sd_bus_track_remove_name,
+    sd_bus_track_count,
+    sd_bus_track_contains,
+    sd_bus_track_first,
+    sd_bus_track_next,
+    sd_event_default,
+    sd_event_new,
+    sd_event_ref,
+    sd_event_unref,
+    sd_event_add_io,
+    sd_event_add_time,
+    sd_event_add_signal,
+    sd_event_add_child,
+    sd_event_add_defer,
+    sd_event_add_post,
+    sd_event_add_exit,
+    sd_event_prepare,
+    sd_event_wait,
+    sd_event_dispatch,
+    sd_event_run,
+    sd_event_loop,
+    sd_event_exit,
+    sd_event_now,
+    sd_event_get_fd,
+    sd_event_get_state,
+    sd_event_get_tid,
+    sd_event_get_exit_code,
+    sd_event_set_watchdog,
+    sd_event_get_watchdog,
+    sd_event_source_ref,
+    sd_event_source_unref,
+    sd_event_source_get_event,
+    sd_event_source_get_userdata,
+    sd_event_source_set_userdata,
+    sd_event_source_set_description,
+    sd_event_source_get_description,
+    sd_event_source_set_prepare,
+    sd_event_source_get_pending,
+    sd_event_source_get_priority,
+    sd_event_source_set_priority,
+    sd_event_source_get_enabled,
+    sd_event_source_set_enabled,
+    sd_event_source_get_io_fd,
+    sd_event_source_set_io_fd,
+    sd_event_source_get_io_events,
+    sd_event_source_set_io_events,
+    sd_event_source_get_io_revents,
+    sd_event_source_get_time,
+    sd_event_source_set_time,
+    sd_event_source_set_time_accuracy,
+    sd_event_source_get_time_accuracy,
+    sd_event_source_get_time_clock,
+    sd_event_source_get_signal,
+    sd_event_source_get_child_pid,
+    sd_bus_emit_object_added,
+    sd_bus_emit_object_removed,
+    sd_bus_flush_close_unref,
+    sd_pid_get_cgroup,
+    sd_peer_get_cgroup,
+    sd_bus_default_flush_close,
+    sd_bus_path_decode_many,
+    sd_bus_path_encode_many,
+    sd_listen_fds_with_names,
+    sd_journal_has_runtime_files,
+    sd_journal_has_persistent_files,
+    sd_journal_enumerate_fields,
+    sd_journal_restart_fields,
+    sd_journal_open_directory_fd,
+    sd_journal_open_files_fd,
+    sd_event_get_iteration,
+    sd_bus_track_set_recursive,
+    sd_bus_track_get_recursive,
+    sd_bus_track_count_name,
+    sd_bus_track_count_sender,
+    sd_bus_set_exit_on_disconnect,
+    sd_bus_get_exit_on_disconnect,
+    sd_id128_get_invocation,
+    sd_id128_get_machine_app_specific,
+    sd_is_socket_sockaddr,
+    sd_bus_message_appendv,
+    sd_bus_message_new,
+    sd_bus_message_seal,
+    sd_bus_set_watch_bind,
+    sd_bus_get_watch_bind,
+    sd_bus_request_name_async,
+    sd_bus_release_name_async,
+    sd_bus_add_match_async,
+    sd_bus_match_signal,
+    sd_bus_match_signal_async,
+    sd_bus_is_ready,
+    sd_bus_set_connected_signal,
+    sd_bus_get_connected_signal,
+    sd_bus_set_sender,
+    sd_bus_get_sender,
+    sd_bus_message_set_sender,
+    sd_event_source_get_io_fd_own,
+    sd_event_source_set_io_fd_own,
+    sd_bus_get_n_queued_read,
+    sd_bus_get_n_queued_write,
+    sd_bus_open_with_description,
+    sd_bus_open_user_with_description,
+    sd_bus_open_system_with_description,
+    sd_bus_slot_get_floating,
+    sd_bus_slot_set_floating,
+    sd_bus_slot_get_destroy_callback,
+    sd_bus_slot_set_destroy_callback,
+    sd_bus_track_get_destroy_callback,
+    sd_bus_track_set_destroy_callback,
+    sd_event_add_inotify,
+    sd_event_source_get_inotify_mask,
+    sd_event_source_set_destroy_callback,
+    sd_event_source_get_destroy_callback,
+    sd_bus_message_readv,
+    sd_bus_set_method_call_timeout,
+    sd_bus_get_method_call_timeout,
+    sd_bus_error_move,
+    sd_bus_set_close_on_exit,
+    sd_bus_get_close_on_exit,
+    sd_device_ref,
+    sd_device_unref,
+    sd_device_new_from_syspath,
+    sd_device_new_from_devnum,
+    sd_device_new_from_subsystem_sysname,
+    sd_device_new_from_device_id,
+    sd_device_get_parent,
+    sd_device_get_parent_with_subsystem_devtype,
+    sd_device_get_syspath,
+    sd_device_get_subsystem,
+    sd_device_get_devtype,
+    sd_device_get_devnum,
+    sd_device_get_ifindex,
+    sd_device_get_driver,
+    sd_device_get_devpath,
+    sd_device_get_devname,
+    sd_device_get_sysname,
+    sd_device_get_sysnum,
+    sd_device_get_is_initialized,
+    sd_device_get_usec_since_initialized,
+    sd_device_get_tag_first,
+    sd_device_get_tag_next,
+    sd_device_get_devlink_first,
+    sd_device_get_devlink_next,
+    sd_device_get_property_first,
+    sd_device_get_property_next,
+    sd_device_get_sysattr_first,
+    sd_device_get_sysattr_next,
+    sd_device_has_tag,
+    sd_device_get_property_value,
+    sd_device_get_sysattr_value,
+    sd_device_set_sysattr_value,
+    sd_device_enumerator_new,
+    sd_device_enumerator_ref,
+    sd_device_enumerator_unref,
+    sd_device_enumerator_get_device_first,
+    sd_device_enumerator_get_device_next,
+    sd_device_enumerator_get_subsystem_first,
+    sd_device_enumerator_get_subsystem_next,
+    sd_device_enumerator_add_match_subsystem,
+    sd_device_enumerator_add_match_sysattr,
+    sd_device_enumerator_add_match_property,
+    sd_device_enumerator_add_match_sysname,
+    sd_device_enumerator_add_match_tag,
+    sd_device_enumerator_add_match_parent,
+    sd_device_enumerator_allow_uninitialized,
+    sd_hwdb_ref,
+    sd_hwdb_unref,
+    sd_hwdb_new,
+    sd_hwdb_get,
+    sd_hwdb_seek,
+    sd_hwdb_enumerate,
+    sd_id128_get_boot_app_specific,
+    sd_device_monitor_new,
+    sd_device_monitor_ref,
+    sd_device_monitor_unref,
+    sd_device_monitor_set_receive_buffer_size,
+    sd_device_monitor_attach_event,
+    sd_device_monitor_detach_event,
+    sd_device_monitor_get_event,
+    sd_device_monitor_get_event_source,
+    sd_device_monitor_start,
+    sd_device_monitor_stop,
+    sd_device_monitor_filter_add_match_subsystem_devtype,
+    sd_device_monitor_filter_add_match_tag,
+    sd_device_monitor_filter_update,
+    sd_device_monitor_filter_remove,
+    sd_event_source_get_floating,
+    sd_event_source_set_floating,
+    sd_bus_close_unref,
+    &sd_bus_object_vtable_format,
+    sd_event_source_disable_unref,
+    sd_bus_enqueue_for_read,
+    sd_bus_message_dump,
+    sd_bus_message_sensitive,
+    sd_event_add_child_pidfd,
+    sd_event_source_get_child_pidfd,
+    sd_event_source_get_child_pidfd_own,
+    sd_event_source_set_child_pidfd_own,
+    sd_event_source_get_child_process_own,
+    sd_event_source_set_child_process_own,
+    sd_event_source_send_child_signal,
+    sd_journal_open_namespace,
+    sd_bus_interface_name_is_valid,
+    sd_bus_service_name_is_valid,
+    sd_bus_member_name_is_valid,
+    sd_bus_object_path_is_valid,
+    sd_bus_call_methodv,
+    sd_bus_call_method_asyncv,
+    sd_bus_emit_signalv,
+    sd_bus_reply_method_errnofv,
+    sd_bus_reply_method_errorfv,
+    sd_bus_reply_method_returnv,
+    sd_bus_set_propertyv,
+    sd_path_lookup,
+    sd_path_lookup_strv,
+    sd_notify_barrier,
+};
+
+int main(void) {
+    unsigned i;
+    for (i = 0; i < sizeof(symbols)/sizeof(void*); i++)
+         printf("%p\n", symbols[i]);
+    return 0;
+}
diff --git a/build/src/test/test-libudev-sym.c b/build/src/test/test-libudev-sym.c
new file mode 100644
index 0000000000..e8d2af874c
--- /dev/null
+++ b/build/src/test/test-libudev-sym.c
@@ -0,0 +1,105 @@
+#include <stdio.h>
+#include "libudev.h"
+
+/* We want to check deprecated symbols too, without complaining */
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
+const void* symbols[] = {
+    udev_device_get_action,
+    udev_device_get_devlinks_list_entry,
+    udev_device_get_devnode,
+    udev_device_get_devnum,
+    udev_device_get_devpath,
+    udev_device_get_devtype,
+    udev_device_get_driver,
+    udev_device_get_is_initialized,
+    udev_device_get_parent,
+    udev_device_get_parent_with_subsystem_devtype,
+    udev_device_get_properties_list_entry,
+    udev_device_get_property_value,
+    udev_device_get_seqnum,
+    udev_device_get_subsystem,
+    udev_device_get_sysattr_list_entry,
+    udev_device_get_sysattr_value,
+    udev_device_get_sysname,
+    udev_device_get_sysnum,
+    udev_device_get_syspath,
+    udev_device_get_tags_list_entry,
+    udev_device_get_udev,
+    udev_device_get_usec_since_initialized,
+    udev_device_has_tag,
+    udev_device_new_from_devnum,
+    udev_device_new_from_environment,
+    udev_device_new_from_subsystem_sysname,
+    udev_device_new_from_syspath,
+    udev_device_ref,
+    udev_device_unref,
+    udev_enumerate_add_match_is_initialized,
+    udev_enumerate_add_match_parent,
+    udev_enumerate_add_match_property,
+    udev_enumerate_add_match_subsystem,
+    udev_enumerate_add_match_sysattr,
+    udev_enumerate_add_match_sysname,
+    udev_enumerate_add_match_tag,
+    udev_enumerate_add_nomatch_subsystem,
+    udev_enumerate_add_nomatch_sysattr,
+    udev_enumerate_add_syspath,
+    udev_enumerate_get_list_entry,
+    udev_enumerate_get_udev,
+    udev_enumerate_new,
+    udev_enumerate_ref,
+    udev_enumerate_scan_devices,
+    udev_enumerate_scan_subsystems,
+    udev_enumerate_unref,
+    udev_get_log_priority,
+    udev_get_userdata,
+    udev_list_entry_get_by_name,
+    udev_list_entry_get_name,
+    udev_list_entry_get_next,
+    udev_list_entry_get_value,
+    udev_monitor_enable_receiving,
+    udev_monitor_filter_add_match_subsystem_devtype,
+    udev_monitor_filter_add_match_tag,
+    udev_monitor_filter_remove,
+    udev_monitor_filter_update,
+    udev_monitor_get_fd,
+    udev_monitor_get_udev,
+    udev_monitor_new_from_netlink,
+    udev_monitor_receive_device,
+    udev_monitor_ref,
+    udev_monitor_set_receive_buffer_size,
+    udev_monitor_unref,
+    udev_new,
+    udev_queue_get_kernel_seqnum,
+    udev_queue_get_queue_is_empty,
+    udev_queue_get_queued_list_entry,
+    udev_queue_get_seqnum_is_finished,
+    udev_queue_get_seqnum_sequence_is_finished,
+    udev_queue_get_udev,
+    udev_queue_get_udev_is_active,
+    udev_queue_get_udev_seqnum,
+    udev_queue_new,
+    udev_queue_ref,
+    udev_queue_unref,
+    udev_ref,
+    udev_set_log_fn,
+    udev_set_log_priority,
+    udev_set_userdata,
+    udev_unref,
+    udev_util_encode_string,
+    udev_device_new_from_device_id,
+    udev_hwdb_new,
+    udev_hwdb_ref,
+    udev_hwdb_unref,
+    udev_hwdb_get_properties_list_entry,
+    udev_device_set_sysattr_value,
+    udev_queue_flush,
+    udev_queue_get_fd,
+};
+
+int main(void) {
+    unsigned i;
+    for (i = 0; i < sizeof(symbols)/sizeof(void*); i++)
+         printf("%p\n", symbols[i]);
+    return 0;
+}
diff --git a/build/src/timesync/timesyncd-gperf.c b/build/src/timesync/timesyncd-gperf.c
new file mode 100644
index 0000000000..b0acb3e979
--- /dev/null
+++ b/build/src/timesync/timesyncd-gperf.c
@@ -0,0 +1,154 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/timesync/timesyncd-gperf.c ../src/timesync/timesyncd-gperf.gperf  */
+/* Computed positions: -k'6,19' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/timesync/timesyncd-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "timesyncd-conf.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 6
+#define MIN_WORD_LENGTH 8
+#define MAX_WORD_LENGTH 23
+#define MIN_HASH_VALUE 8
+#define MAX_HASH_VALUE 33
+/* maximum key range = 26, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+timesyncd_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+       0, 34, 34, 34, 34, 34, 34, 34,  0, 34,
+       0, 34,  5,  0, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34,  5, 34, 34,
+      34, 34, 34, 34, 34,  0, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
+      34, 34, 34, 34, 34, 34
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[18]];
+      /*FALLTHROUGH*/
+      case 18:
+      case 17:
+      case 16:
+      case 15:
+      case 14:
+      case 13:
+      case 12:
+      case 11:
+      case 10:
+      case 9:
+      case 8:
+      case 7:
+      case 6:
+        hval += asso_values[(unsigned char)str[5]];
+        break;
+    }
+  return hval;
+}
+
+const struct ConfigPerfItem *
+timesyncd_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 20 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.NTP",                 config_parse_servers, SERVER_SYSTEM,   0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 21 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.Servers",             config_parse_servers, SERVER_SYSTEM,   0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 22 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.FallbackNTP",         config_parse_servers, SERVER_FALLBACK, 0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 24 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.PollIntervalMinSec",  config_parse_sec,     0,               offsetof(Manager, poll_interval_min_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 25 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.PollIntervalMaxSec",  config_parse_sec,     0,               offsetof(Manager, poll_interval_max_usec)},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 23 "../src/timesync/timesyncd-gperf.gperf"
+      {"Time.RootDistanceMaxSec",  config_parse_sec,     0,               offsetof(Manager, max_root_distance_usec)}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = timesyncd_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/udev/keyboard-keys-from-name.h b/build/src/udev/keyboard-keys-from-name.h
new file mode 100644
index 0000000000..65c94ffe95
--- /dev/null
+++ b/build/src/udev/keyboard-keys-from-name.h
@@ -0,0 +1,3808 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf -L ANSI-C -t -N keyboard_lookup_key -H hash_key_name -p -C src/udev/keyboard-keys-from-name.gperf  */
+/* Computed positions: -k'1-3,5-7,10,12,15,18,20,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "src/udev/keyboard-keys-from-name.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#line 6 "src/udev/keyboard-keys-from-name.gperf"
+struct key_name { const char* name; unsigned short id; };
+
+#define TOTAL_KEYWORDS 996
+#define MIN_WORD_LENGTH 1
+#define MAX_WORD_LENGTH 28
+#define MIN_HASH_VALUE 1
+#define MAX_HASH_VALUE 6252
+/* maximum key range = 6252, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+hash_key_name (register const char *str, register size_t len)
+{
+  static const unsigned short asso_values[] =
+    {
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,  295,  705,
+      1019,  554,   25,  811,  490,  956,  700,  135,   35,   65,
+         0,    0,    5,    0,    5,    0, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253,  200,  710,   50,   35,  150,
+       160,    0,  265,  796,  842, 1005, 1002,    5,  370,  200,
+       475,   15,   60, 1649,  345,   30,   20,  805, 1484, 1714,
+       430,  540,   10, 6253,   20,   10, 6253, 6253,    5,    0,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253,
+      6253, 6253, 6253, 6253
+    };
+  register unsigned int hval = len;
+
+  switch (hval)
+    {
+      default:
+        hval += asso_values[(unsigned char)str[19]];
+      /*FALLTHROUGH*/
+      case 19:
+      case 18:
+        hval += asso_values[(unsigned char)str[17]+8];
+      /*FALLTHROUGH*/
+      case 17:
+      case 16:
+      case 15:
+        hval += asso_values[(unsigned char)str[14]];
+      /*FALLTHROUGH*/
+      case 14:
+      case 13:
+      case 12:
+        hval += asso_values[(unsigned char)str[11]];
+      /*FALLTHROUGH*/
+      case 11:
+      case 10:
+        hval += asso_values[(unsigned char)str[9]];
+      /*FALLTHROUGH*/
+      case 9:
+      case 8:
+      case 7:
+        hval += asso_values[(unsigned char)str[6]];
+      /*FALLTHROUGH*/
+      case 6:
+        hval += asso_values[(unsigned char)str[5]+1];
+      /*FALLTHROUGH*/
+      case 5:
+        hval += asso_values[(unsigned char)str[4]];
+      /*FALLTHROUGH*/
+      case 4:
+      case 3:
+        hval += asso_values[(unsigned char)str[2]+1];
+      /*FALLTHROUGH*/
+      case 2:
+        hval += asso_values[(unsigned char)str[1]];
+      /*FALLTHROUGH*/
+      case 1:
+        hval += asso_values[(unsigned char)str[0]];
+        break;
+    }
+  return hval + asso_values[(unsigned char)str[len - 1]];
+}
+
+const struct key_name *
+keyboard_lookup_key (register const char *str, register size_t len)
+{
+  static const struct key_name wordlist[] =
+    {
+      {(char*)0},
+#line 399 "src/udev/keyboard-keys-from-name.gperf"
+      {"e", KEY_E},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 411 "src/udev/keyboard-keys-from-name.gperf"
+      {"k", KEY_K},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 400 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_e", KEY_E},
+#line 433 "src/udev/keyboard-keys-from-name.gperf"
+      {"z", KEY_Z},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 892 "src/udev/keyboard-keys-from-name.gperf"
+      {"ok", KEY_OK},
+      {(char*)0}, {(char*)0},
+#line 412 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_k", KEY_K},
+#line 417 "src/udev/keyboard-keys-from-name.gperf"
+      {"o", KEY_O},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 434 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_z", KEY_Z},
+#line 425 "src/udev/keyboard-keys-from-name.gperf"
+      {"t", KEY_T},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 418 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_o", KEY_O},
+#line 381 "src/udev/keyboard-keys-from-name.gperf"
+      {"4", KEY_4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 426 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_t", KEY_T},
+#line 423 "src/udev/keyboard-keys-from-name.gperf"
+      {"s", KEY_S},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 382 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_4", KEY_4},
+#line 393 "src/udev/keyboard-keys-from-name.gperf"
+      {"b", KEY_B},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 424 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_s", KEY_S},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 394 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_b", KEY_B},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 322 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_break", KEY_BREAK},
+#line 439 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_z", BTN_Z},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 481 "src/udev/keyboard-keys-from-name.gperf"
+      {"a", KEY_A},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 759 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpdot", KEY_KPDOT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 482 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_a", KEY_A},
+#line 419 "src/udev/keyboard-keys-from-name.gperf"
+      {"p", KEY_P},
+#line 791 "src/udev/keyboard-keys-from-name.gperf"
+      {"ab", KEY_AB},
+      {(char*)0}, {(char*)0},
+#line 495 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_4", BTN_4},
+      {(char*)0},
+#line 63 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sat", KEY_SAT},
+      {(char*)0}, {(char*)0},
+#line 285 "src/udev/keyboard-keys-from-name.gperf"
+      {"space", KEY_SPACE},
+      {(char*)0}, {(char*)0},
+#line 300 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_zoomreset", KEY_ZOOMRESET},
+      {(char*)0},
+#line 164 "src/udev/keyboard-keys-from-name.gperf"
+      {"paste", KEY_PASTE},
+      {(char*)0}, {(char*)0},
+#line 739 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_tape", KEY_TAPE},
+      {(char*)0},
+#line 420 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_p", KEY_P},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 435 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_b", BTN_B},
+      {(char*)0},
+#line 257 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_tab", KEY_TAB},
+      {(char*)0},
+#line 165 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_paste", KEY_PASTE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 110 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_prog4", KEY_PROG4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 132 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_props", KEY_PROPS},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 270 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_east", BTN_EAST},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 662 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_task", BTN_TASK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 597 "src/udev/keyboard-keys-from-name.gperf"
+      {"stop", KEY_STOP},
+#line 607 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_a", BTN_A},
+      {(char*)0}, {(char*)0},
+#line 215 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base", BTN_BASE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 729 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_previous", KEY_PREVIOUS},
+#line 253 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_bassboost", KEY_BASSBOOST},
+      {(char*)0},
+#line 185 "src/udev/keyboard-keys-from-name.gperf"
+      {"sport", KEY_SPORT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 279 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base4", BTN_BASE4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 473 "src/udev/keyboard-keys-from-name.gperf"
+      {"send", KEY_SEND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 57 "src/udev/keyboard-keys-from-name.gperf"
+      {"mode", KEY_MODE},
+#line 722 "src/udev/keyboard-keys-from-name.gperf"
+      {"scale", KEY_SCALE},
+      {(char*)0}, {(char*)0},
+#line 1004 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_bookmarks", KEY_BOOKMARKS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 222 "src/udev/keyboard-keys-from-name.gperf"
+      {"spreadsheet", KEY_SPREADSHEET},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 128 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_katakana", KEY_KATAKANA},
+#line 924 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp9", KEY_KP9},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 252 "src/udev/keyboard-keys-from-name.gperf"
+      {"bassboost", KEY_BASSBOOST},
+#line 191 "src/udev/keyboard-keys-from-name.gperf"
+      {"apostrophe", KEY_APOSTROPHE},
+      {(char*)0}, {(char*)0},
+#line 225 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_back", KEY_BACK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 224 "src/udev/keyboard-keys-from-name.gperf"
+      {"back", KEY_BACK},
+      {(char*)0},
+#line 792 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ab", KEY_AB},
+      {(char*)0},
+#line 256 "src/udev/keyboard-keys-from-name.gperf"
+      {"tab", KEY_TAB},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 723 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_scale", KEY_SCALE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 391 "src/udev/keyboard-keys-from-name.gperf"
+      {"9", KEY_9},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 68 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_slowreverse", KEY_SLOWREVERSE},
+      {(char*)0},
+#line 170 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_top", BTN_TOP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 997 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_dot", KEY_DOT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 70 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_data", KEY_DATA},
+#line 691 "src/udev/keyboard-keys-from-name.gperf"
+      {"zoom", KEY_ZOOM},
+#line 392 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_9", KEY_9},
+#line 161 "src/udev/keyboard-keys-from-name.gperf"
+      {"addressbook", KEY_ADDRESSBOOK},
+#line 200 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_database", KEY_DATABASE},
+      {(char*)0}, {(char*)0},
+#line 689 "src/udev/keyboard-keys-from-name.gperf"
+      {"msdos", KEY_MSDOS},
+      {(char*)0},
+#line 82 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_capslock", KEY_CAPSLOCK},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 395 "src/udev/keyboard-keys-from-name.gperf"
+      {"c", KEY_C},
+      {(char*)0},
+#line 154 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_back", BTN_BACK},
+      {(char*)0},
+#line 671 "src/udev/keyboard-keys-from-name.gperf"
+      {"media", KEY_MEDIA},
+      {(char*)0}, {(char*)0},
+#line 692 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_zoom", KEY_ZOOM},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 39 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sleep", KEY_SLEEP},
+#line 162 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_addressbook", KEY_ADDRESSBOOK},
+      {(char*)0},
+#line 838 "src/udev/keyboard-keys-from-name.gperf"
+      {"f4", KEY_F4},
+      {(char*)0}, {(char*)0},
+#line 396 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_c", KEY_C},
+#line 397 "src/udev/keyboard-keys-from-name.gperf"
+      {"d", KEY_D},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 800 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_cd", KEY_CD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 398 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_d", KEY_D},
+#line 454 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ejectcd", KEY_EJECTCD},
+#line 229 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_esc", KEY_ESC},
+#line 228 "src/udev/keyboard-keys-from-name.gperf"
+      {"esc", KEY_ESC},
+      {(char*)0},
+#line 509 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_9", BTN_9},
+      {(char*)0},
+#line 934 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_alterase", KEY_ALTERASE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 881 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_front", KEY_FRONT},
+      {(char*)0}, {(char*)0},
+#line 204 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_end", KEY_END},
+      {(char*)0}, {(char*)0},
+#line 954 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fastreverse", KEY_FASTREVERSE},
+      {(char*)0},
+#line 902 "src/udev/keyboard-keys-from-name.gperf"
+      {"pc", KEY_PC},
+      {(char*)0},
+#line 83 "src/udev/keyboard-keys-from-name.gperf"
+      {"redo", KEY_REDO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 436 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_c", BTN_C},
+      {(char*)0},
+#line 931 "src/udev/keyboard-keys-from-name.gperf"
+      {"ro", KEY_RO},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 742 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_program", KEY_PROGRAM},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 101 "src/udev/keyboard-keys-from-name.gperf"
+      {"connect", KEY_CONNECT},
+      {(char*)0},
+#line 995 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_close", KEY_CLOSE},
+      {(char*)0},
+#line 903 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pc", KEY_PC},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 666 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_setup", KEY_SETUP},
+      {(char*)0},
+#line 415 "src/udev/keyboard-keys-from-name.gperf"
+      {"m", KEY_M},
+      {(char*)0}, {(char*)0},
+#line 852 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_enter", KEY_ENTER},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 893 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ok", KEY_OK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 746 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_playpause", KEY_PLAYPAUSE},
+      {(char*)0},
+#line 416 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_m", KEY_M},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 56 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_macro", KEY_MACRO},
+      {(char*)0},
+#line 966 "src/udev/keyboard-keys-from-name.gperf"
+      {"stopcd", KEY_STOPCD},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 197 "src/udev/keyboard-keys-from-name.gperf"
+      {"radio", KEY_RADIO},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 690 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_msdos", KEY_MSDOS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 932 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ro", KEY_RO},
+      {(char*)0},
+#line 58 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_mode", KEY_MODE},
+      {(char*)0},
+#line 55 "src/udev/keyboard-keys-from-name.gperf"
+      {"macro", KEY_MACRO},
+      {(char*)0}, {(char*)0},
+#line 971 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_documents", KEY_DOCUMENTS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 845 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f9", KEY_F9},
+      {(char*)0},
+#line 930 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_backspace", KEY_BACKSPACE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 906 "src/udev/keyboard-keys-from-name.gperf"
+      {"last", KEY_LAST},
+      {(char*)0},
+#line 675 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_compose", KEY_COMPOSE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 44 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tr", BTN_TR},
+#line 799 "src/udev/keyboard-keys-from-name.gperf"
+      {"cd", KEY_CD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 907 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_last", KEY_LAST},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 478 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_comma", KEY_COMMA},
+      {(char*)0}, {(char*)0},
+#line 900 "src/udev/keyboard-keys-from-name.gperf"
+      {"del_eos", KEY_DEL_EOS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 133 "src/udev/keyboard-keys-from-name.gperf"
+      {"restart", KEY_RESTART},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 983 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_mode", BTN_MODE},
+      {(char*)0},
+#line 766 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_coffee", KEY_COFFEE},
+      {(char*)0}, {(char*)0},
+#line 316 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_e", KEY_FN_E},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 751 "src/udev/keyboard-keys-from-name.gperf"
+      {"red", KEY_RED},
+      {(char*)0},
+#line 98 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera", KEY_CAMERA},
+#line 975 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ejectclosecd", KEY_EJECTCLOSECD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 109 "src/udev/keyboard-keys-from-name.gperf"
+      {"prog4", KEY_PROG4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 532 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot4", KEY_BRL_DOT4},
+      {(char*)0},
+#line 775 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f4", KEY_FN_F4},
+#line 131 "src/udev/keyboard-keys-from-name.gperf"
+      {"props", KEY_PROPS},
+#line 401 "src/udev/keyboard-keys-from-name.gperf"
+      {"f", KEY_F},
+      {(char*)0},
+#line 664 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_s", KEY_FN_S},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 844 "src/udev/keyboard-keys-from-name.gperf"
+      {"f9", KEY_F9},
+#line 648 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_b", KEY_FN_B},
+#line 947 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpjpcomma", KEY_KPJPCOMMA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 884 "src/udev/keyboard-keys-from-name.gperf"
+      {"dashboard", KEY_DASHBOARD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 402 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f", KEY_F},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 640 "src/udev/keyboard-keys-from-name.gperf"
+      {"calc", KEY_CALC},
+#line 41 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_accept", KEY_KBDINPUTASSIST_ACCEPT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 33 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_frameback", KEY_FRAMEBACK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 988 "src/udev/keyboard-keys-from-name.gperf"
+      {"keyboard", KEY_KEYBOARD},
+#line 198 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_radio", KEY_RADIO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 870 "src/udev/keyboard-keys-from-name.gperf"
+      {"text", KEY_TEXT},
+#line 994 "src/udev/keyboard-keys-from-name.gperf"
+      {"close", KEY_CLOSE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 464 "src/udev/keyboard-keys-from-name.gperf"
+      {"0", KEY_0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 794 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_prevgroup", KEY_KBDINPUTASSIST_PREVGROUP},
+      {(char*)0},
+#line 465 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_0", KEY_0},
+#line 122 "src/udev/keyboard-keys-from-name.gperf"
+      {"screensaver", KEY_SCREENSAVER},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 116 "src/udev/keyboard-keys-from-name.gperf"
+      {"screenlock", KEY_SCREENLOCK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 203 "src/udev/keyboard-keys-from-name.gperf"
+      {"end", KEY_END},
+#line 783 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f9", KEY_FN_F9},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 1001 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_assistant", KEY_ASSISTANT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 226 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp3", KEY_KP3},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 111 "src/udev/keyboard-keys-from-name.gperf"
+      {"delete", KEY_DELETE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 670 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_playcd", KEY_PLAYCD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 321 "src/udev/keyboard-keys-from-name.gperf"
+      {"break", KEY_BREAK},
+      {(char*)0}, {(char*)0},
+#line 314 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_d", KEY_FN_D},
+      {(char*)0},
+#line 486 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_0", BTN_0},
+#line 269 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tl", BTN_TL},
+      {(char*)0}, {(char*)0},
+#line 280 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base6", BTN_BASE6},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 674 "src/udev/keyboard-keys-from-name.gperf"
+      {"compose", KEY_COMPOSE},
+#line 108 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_prog3", KEY_PROG3},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 639 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_extra", BTN_EXTRA},
+      {(char*)0},
+#line 421 "src/udev/keyboard-keys-from-name.gperf"
+      {"r", KEY_R},
+      {(char*)0}, {(char*)0},
+#line 271 "src/udev/keyboard-keys-from-name.gperf"
+      {"memo", KEY_MEMO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 672 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_media", KEY_MEDIA},
+      {(char*)0},
+#line 611 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_closecd", KEY_CLOSECD},
+      {(char*)0},
+#line 272 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_memo", KEY_MEMO},
+      {(char*)0}, {(char*)0},
+#line 195 "src/udev/keyboard-keys-from-name.gperf"
+      {"screen", KEY_SCREEN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 422 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_r", KEY_R},
+      {(char*)0}, {(char*)0},
+#line 1002 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_dead", BTN_DEAD},
+      {(char*)0},
+#line 880 "src/udev/keyboard-keys-from-name.gperf"
+      {"front", KEY_FRONT},
+      {(char*)0},
+#line 323 "src/udev/keyboard-keys-from-name.gperf"
+      {"forward", KEY_FORWARD},
+#line 524 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_zoomout", KEY_CAMERA_ZOOMOUT},
+#line 77 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_clear", KEY_CLEAR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 641 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_calc", KEY_CALC},
+#line 1003 "src/udev/keyboard-keys-from-name.gperf"
+      {"bookmarks", KEY_BOOKMARKS},
+#line 74 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_select", KEY_SELECT},
+      {(char*)0}, {(char*)0},
+#line 278 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base3", BTN_BASE3},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 413 "src/udev/keyboard-keys-from-name.gperf"
+      {"l", KEY_L},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 477 "src/udev/keyboard-keys-from-name.gperf"
+      {"comma", KEY_COMMA},
+      {(char*)0},
+#line 542 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot9", KEY_BRL_DOT9},
+      {(char*)0}, {(char*)0},
+#line 579 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpasterisk", KEY_KPASTERISK},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 299 "src/udev/keyboard-keys-from-name.gperf"
+      {"zoomreset", KEY_ZOOMRESET},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 871 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_text", KEY_TEXT},
+      {(char*)0},
+#line 414 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_l", KEY_L},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 763 "src/udev/keyboard-keys-from-name.gperf"
+      {"teen", KEY_TEEN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 318 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f", KEY_FN_F},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 885 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_dashboard", KEY_DASHBOARD},
+      {(char*)0}, {(char*)0},
+#line 848 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn", KEY_FN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 669 "src/udev/keyboard-keys-from-name.gperf"
+      {"playcd", KEY_PLAYCD},
+      {(char*)0},
+#line 764 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_teen", KEY_TEEN},
+      {(char*)0},
+#line 306 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_select", BTN_SELECT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 38 "src/udev/keyboard-keys-from-name.gperf"
+      {"sleep", KEY_SLEEP},
+#line 853 "src/udev/keyboard-keys-from-name.gperf"
+      {"cancel", KEY_CANCEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 873 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_esc", KEY_FN_ESC},
+#line 649 "src/udev/keyboard-keys-from-name.gperf"
+      {"dollar", KEY_DOLLAR},
+      {(char*)0},
+#line 84 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_redo", KEY_REDO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 51 "src/udev/keyboard-keys-from-name.gperf"
+      {"open", KEY_OPEN},
+#line 112 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_delete", KEY_DELETE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 520 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_copy", KEY_COPY},
+#line 104 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_prog1", KEY_PROG1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 461 "src/udev/keyboard-keys-from-name.gperf"
+      {"mp3", KEY_MP3},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 676 "src/udev/keyboard-keys-from-name.gperf"
+      {"player", KEY_PLAYER},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 531 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot4", KEY_BRL_DOT4},
+#line 784 "src/udev/keyboard-keys-from-name.gperf"
+      {"euro", KEY_EURO},
+      {(char*)0},
+#line 569 "src/udev/keyboard-keys-from-name.gperf"
+      {"stop_record", KEY_STOP_RECORD},
+      {(char*)0}, {(char*)0},
+#line 32 "src/udev/keyboard-keys-from-name.gperf"
+      {"frameback", KEY_FRAMEBACK},
+      {(char*)0},
+#line 431 "src/udev/keyboard-keys-from-name.gperf"
+      {"x", KEY_X},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 837 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f3", KEY_F3},
+#line 901 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_del_eos", KEY_DEL_EOS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 552 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_play", KEY_PLAY},
+      {(char*)0},
+#line 652 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_left", KEY_CAMERA_LEFT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 432 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_x", KEY_X},
+#line 102 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_connect", KEY_CONNECT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 621 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_angle", KEY_ANGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 234 "src/udev/keyboard-keys-from-name.gperf"
+      {"audio", KEY_AUDIO},
+#line 372 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f24", KEY_F24},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 19 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_grave", KEY_GRAVE},
+      {(char*)0}, {(char*)0},
+#line 922 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp8", KEY_KP8},
+#line 914 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp4", KEY_KP4},
+#line 682 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_taskmanager", KEY_TASKMANAGER},
+      {(char*)0}, {(char*)0},
+#line 62 "src/udev/keyboard-keys-from-name.gperf"
+      {"sat", KEY_SAT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 981 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_goto", KEY_GOTO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 266 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_email", KEY_EMAIL},
+#line 14 "src/udev/keyboard-keys-from-name.gperf"
+      {"deletefile", KEY_DELETEFILE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 737 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pause", KEY_PAUSE},
+      {(char*)0},
+#line 985 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_media_repeat", KEY_MEDIA_REPEAT},
+#line 955 "src/udev/keyboard-keys-from-name.gperf"
+      {"up", KEY_UP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 598 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_stop", KEY_STOP},
+      {(char*)0},
+#line 437 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_x", BTN_X},
+#line 744 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_zoomout", KEY_ZOOMOUT},
+      {(char*)0}, {(char*)0},
+#line 694 "src/udev/keyboard-keys-from-name.gperf"
+      {"news", KEY_NEWS},
+#line 292 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_3d_mode", KEY_3D_MODE},
+      {(char*)0}, {(char*)0},
+#line 973 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_left", KEY_LEFT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 709 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_twen", KEY_TWEN},
+      {(char*)0}, {(char*)0},
+#line 496 "src/udev/keyboard-keys-from-name.gperf"
+      {"n", KEY_N},
+#line 752 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_red", KEY_RED},
+#line 474 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_send", KEY_SEND},
+#line 860 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_scrolllock", KEY_SCROLLLOCK},
+      {(char*)0}, {(char*)0},
+#line 501 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_language", KEY_LANGUAGE},
+      {(char*)0}, {(char*)0},
+#line 665 "src/udev/keyboard-keys-from-name.gperf"
+      {"setup", KEY_SETUP},
+      {(char*)0}, {(char*)0},
+#line 541 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot9", KEY_BRL_DOT9},
+#line 865 "src/udev/keyboard-keys-from-name.gperf"
+      {"hp", KEY_HP},
+      {(char*)0}, {(char*)0},
+#line 591 "src/udev/keyboard-keys-from-name.gperf"
+      {"phone", KEY_PHONE},
+      {(char*)0}, {(char*)0},
+#line 497 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_n", KEY_N},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 596 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdillumup", KEY_KBDILLUMUP},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 999 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_next", KEY_KBDINPUTASSIST_NEXT},
+      {(char*)0},
+#line 265 "src/udev/keyboard-keys-from-name.gperf"
+      {"email", KEY_EMAIL},
+#line 385 "src/udev/keyboard-keys-from-name.gperf"
+      {"6", KEY_6},
+      {(char*)0}, {(char*)0},
+#line 9 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_start", BTN_START},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 66 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base5", BTN_BASE5},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 779 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f6", KEY_FN_F6},
+      {(char*)0},
+#line 248 "src/udev/keyboard-keys-from-name.gperf"
+      {"shop", KEY_SHOP},
+      {(char*)0},
+#line 869 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_left", BTN_LEFT},
+      {(char*)0},
+#line 386 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_6", KEY_6},
+#line 54 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_battery", KEY_BATTERY},
+      {(char*)0},
+#line 996 "src/udev/keyboard-keys-from-name.gperf"
+      {"dot", KEY_DOT},
+      {(char*)0},
+#line 668 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_cancel", KEY_KBDINPUTASSIST_CANCEL},
+      {(char*)0},
+#line 521 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpcomma", KEY_KPCOMMA},
+      {(char*)0},
+#line 551 "src/udev/keyboard-keys-from-name.gperf"
+      {"play", KEY_PLAY},
+      {(char*)0}, {(char*)0},
+#line 319 "src/udev/keyboard-keys-from-name.gperf"
+      {"hanja", KEY_HANJA},
+      {(char*)0},
+#line 1000 "src/udev/keyboard-keys-from-name.gperf"
+      {"assistant", KEY_ASSISTANT},
+      {(char*)0},
+#line 447 "src/udev/keyboard-keys-from-name.gperf"
+      {"record", KEY_RECORD},
+      {(char*)0},
+#line 617 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_undo", KEY_UNDO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 796 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_nextgroup", KEY_KBDINPUTASSIST_NEXTGROUP},
+#line 281 "src/udev/keyboard-keys-from-name.gperf"
+      {"menu", KEY_MENU},
+#line 677 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_player", KEY_PLAYER},
+      {(char*)0},
+#line 50 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_leftmeta", KEY_LEFTMETA},
+#line 364 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_semicolon", KEY_SEMICOLON},
+      {(char*)0}, {(char*)0},
+#line 134 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_restart", KEY_RESTART},
+      {(char*)0},
+#line 549 "src/udev/keyboard-keys-from-name.gperf"
+      {"yen", KEY_YEN},
+      {(char*)0}, {(char*)0},
+#line 188 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pageup", KEY_PAGEUP},
+      {(char*)0}, {(char*)0},
+#line 724 "src/udev/keyboard-keys-from-name.gperf"
+      {"next", KEY_NEXT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 237 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_unmute", KEY_UNMUTE},
+      {(char*)0}, {(char*)0},
+#line 145 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_edit", KEY_EDIT},
+      {(char*)0}, {(char*)0},
+#line 603 "src/udev/keyboard-keys-from-name.gperf"
+      {"chat", KEY_CHAT},
+#line 850 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_scrollup", KEY_SCROLLUP},
+#line 124 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_lens", BTN_TOOL_LENS},
+      {(char*)0},
+#line 594 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_6", BTN_6},
+      {(char*)0}, {(char*)0},
+#line 773 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f3", KEY_FN_F3},
+#line 117 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_screenlock", KEY_SCREENLOCK},
+#line 143 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_zoomin", KEY_ZOOMIN},
+      {(char*)0}, {(char*)0},
+#line 295 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_blue", KEY_BLUE},
+      {(char*)0}, {(char*)0},
+#line 17 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_title", KEY_TITLE},
+#line 610 "src/udev/keyboard-keys-from-name.gperf"
+      {"closecd", KEY_CLOSECD},
+#line 908 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp0", KEY_KP0},
+#line 69 "src/udev/keyboard-keys-from-name.gperf"
+      {"data", KEY_DATA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 312 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_iso", KEY_ISO},
+      {(char*)0},
+#line 511 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sound", KEY_SOUND},
+      {(char*)0},
+#line 517 "src/udev/keyboard-keys-from-name.gperf"
+      {"y", KEY_Y},
+      {(char*)0}, {(char*)0},
+#line 898 "src/udev/keyboard-keys-from-name.gperf"
+      {"down", KEY_DOWN},
+#line 126 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_games", KEY_GAMES},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 27 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f10", KEY_FN_F10},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 518 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_y", KEY_Y},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 592 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_phone", KEY_PHONE},
+#line 448 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_record", KEY_RECORD},
+#line 561 "src/udev/keyboard-keys-from-name.gperf"
+      {"help", KEY_HELP},
+      {(char*)0}, {(char*)0},
+#line 379 "src/udev/keyboard-keys-from-name.gperf"
+      {"3", KEY_3},
+      {(char*)0},
+#line 97 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera", KEY_CAMERA},
+      {(char*)0},
+#line 311 "src/udev/keyboard-keys-from-name.gperf"
+      {"iso", KEY_ISO},
+      {(char*)0},
+#line 875 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_insert", KEY_INSERT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 268 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_als_toggle", KEY_ALS_TOGGLE},
+#line 450 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f8", KEY_F8},
+#line 839 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f4", KEY_F4},
+#line 199 "src/udev/keyboard-keys-from-name.gperf"
+      {"database", KEY_DATABASE},
+#line 34 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot10", KEY_BRL_DOT10},
+#line 231 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_home", KEY_HOME},
+      {(char*)0},
+#line 241 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sat2", KEY_SAT2},
+#line 380 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_3", KEY_3},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 249 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_shop", KEY_SHOP},
+      {(char*)0}, {(char*)0},
+#line 623 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_presentation", KEY_PRESENTATION},
+      {(char*)0}, {(char*)0},
+#line 516 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_print", KEY_PRINT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 361 "src/udev/keyboard-keys-from-name.gperf"
+      {"f19", KEY_F19},
+      {(char*)0}, {(char*)0},
+#line 987 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_slash", KEY_SLASH},
+#line 72 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_computer", KEY_COMPUTER},
+#line 106 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_prog2", KEY_PROG2},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 613 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_zoomin", KEY_CAMERA_ZOOMIN},
+      {(char*)0}, {(char*)0},
+#line 438 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_y", BTN_Y},
+#line 681 "src/udev/keyboard-keys-from-name.gperf"
+      {"taskmanager", KEY_TASKMANAGER},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 548 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_controlpanel", KEY_CONTROLPANEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 896 "src/udev/keyboard-keys-from-name.gperf"
+      {"del_eol", KEY_DEL_EOL},
+      {(char*)0}, {(char*)0},
+#line 859 "src/udev/keyboard-keys-from-name.gperf"
+      {"scrolllock", KEY_SCROLLLOCK},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 13 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_touchpad_toggle", KEY_TOUCHPAD_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 297 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_homepage", KEY_HOMEPAGE},
+      {(char*)0},
+#line 18 "src/udev/keyboard-keys-from-name.gperf"
+      {"grave", KEY_GRAVE},
+      {(char*)0},
+#line 587 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_3", BTN_3},
+#line 786 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_mouse", BTN_TOOL_MOUSE},
+      {(char*)0},
+#line 144 "src/udev/keyboard-keys-from-name.gperf"
+      {"edit", KEY_EDIT},
+#line 693 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_pen", BTN_TOOL_PEN},
+      {(char*)0}, {(char*)0},
+#line 972 "src/udev/keyboard-keys-from-name.gperf"
+      {"left", KEY_LEFT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 967 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_stopcd", KEY_STOPCD},
+      {(char*)0},
+#line 957 "src/udev/keyboard-keys-from-name.gperf"
+      {"suspend", KEY_SUSPEND},
+#line 277 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_base2", BTN_BASE2},
+      {(char*)0},
+#line 189 "src/udev/keyboard-keys-from-name.gperf"
+      {"power", KEY_POWER},
+#line 324 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_forward", KEY_FORWARD},
+      {(char*)0}, {(char*)0},
+#line 781 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f8", KEY_FN_F8},
+      {(char*)0},
+#line 897 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_del_eol", KEY_DEL_EOL},
+#line 989 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_keyboard", KEY_KEYBOARD},
+#line 308 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_1", KEY_FN_1},
+#line 769 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f1", KEY_FN_F1},
+      {(char*)0},
+#line 73 "src/udev/keyboard-keys-from-name.gperf"
+      {"select", KEY_SELECT},
+      {(char*)0},
+#line 725 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_next", KEY_NEXT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 847 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn", KEY_FN},
+#line 654 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rotate_display", KEY_ROTATE_DISPLAY},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 765 "src/udev/keyboard-keys-from-name.gperf"
+      {"coffee", KEY_COFFEE},
+      {(char*)0},
+#line 627 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_reply", KEY_REPLY},
+      {(char*)0},
+#line 328 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pausecd", KEY_PAUSECD},
+#line 514 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_top2", BTN_TOP2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 963 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_time", KEY_TIME},
+      {(char*)0},
+#line 840 "src/udev/keyboard-keys-from-name.gperf"
+      {"f6", KEY_F6},
+#line 604 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_chat", KEY_CHAT},
+      {(char*)0},
+#line 593 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_rubber", BTN_TOOL_RUBBER},
+      {(char*)0},
+#line 741 "src/udev/keyboard-keys-from-name.gperf"
+      {"program", KEY_PROGRAM},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 680 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_forward", BTN_FORWARD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 463 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_side", BTN_SIDE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 332 "src/udev/keyboard-keys-from-name.gperf"
+      {"calendar", KEY_CALENDAR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 943 "src/udev/keyboard-keys-from-name.gperf"
+      {"minus", KEY_MINUS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 493 "src/udev/keyboard-keys-from-name.gperf"
+      {"leftbrace", KEY_LEFTBRACE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 47 "src/udev/keyboard-keys-from-name.gperf"
+      {"images", KEY_IMAGES},
+      {(char*)0}, {(char*)0},
+#line 616 "src/udev/keyboard-keys-from-name.gperf"
+      {"undo", KEY_UNDO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 650 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_dollar", KEY_DOLLAR},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 502 "src/udev/keyboard-keys-from-name.gperf"
+      {"xfer", KEY_XFER},
+      {(char*)0}, {(char*)0},
+#line 904 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpenter", KEY_KPENTER},
+      {(char*)0},
+#line 970 "src/udev/keyboard-keys-from-name.gperf"
+      {"documents", KEY_DOCUMENTS},
+#line 777 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f5", KEY_FN_F5},
+#line 174 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_leftalt", KEY_LEFTALT},
+      {(char*)0},
+#line 535 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot6", KEY_BRL_DOT6},
+#line 523 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_zoomout", KEY_CAMERA_ZOOMOUT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 288 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_info", KEY_INFO},
+#line 990 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_up", KEY_CAMERA_UP},
+#line 61 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_green", KEY_GREEN},
+#line 267 "src/udev/keyboard-keys-from-name.gperf"
+      {"als_toggle", KEY_ALS_TOGGLE},
+#line 656 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_uwb", KEY_UWB},
+#line 991 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_up", KEY_CAMERA_UP},
+      {(char*)0},
+#line 255 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_cycle", KEY_BRIGHTNESS_CYCLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 230 "src/udev/keyboard-keys-from-name.gperf"
+      {"home", KEY_HOME},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 821 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_messenger", KEY_MESSENGER},
+      {(char*)0},
+#line 220 "src/udev/keyboard-keys-from-name.gperf"
+      {"first", KEY_FIRST},
+      {(char*)0},
+#line 441 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_mhp", KEY_MHP},
+      {(char*)0},
+#line 600 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_zero", KEY_BRIGHTNESS_ZERO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 352 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f14", KEY_F14},
+#line 984 "src/udev/keyboard-keys-from-name.gperf"
+      {"media_repeat", KEY_MEDIA_REPEAT},
+      {(char*)0},
+#line 609 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_auto", KEY_BRIGHTNESS_AUTO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 916 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp5", KEY_KP5},
+      {(char*)0}, {(char*)0},
+#line 620 "src/udev/keyboard-keys-from-name.gperf"
+      {"angle", KEY_ANGLE},
+      {(char*)0},
+#line 745 "src/udev/keyboard-keys-from-name.gperf"
+      {"playpause", KEY_PLAYPAUSE},
+#line 836 "src/udev/keyboard-keys-from-name.gperf"
+      {"f3", KEY_F3},
+#line 565 "src/udev/keyboard-keys-from-name.gperf"
+      {"backslash", KEY_BACKSLASH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 529 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot3", KEY_BRL_DOT3},
+      {(char*)0}, {(char*)0},
+#line 820 "src/udev/keyboard-keys-from-name.gperf"
+      {"messenger", KEY_MESSENGER},
+#line 125 "src/udev/keyboard-keys-from-name.gperf"
+      {"games", KEY_GAMES},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 614 "src/udev/keyboard-keys-from-name.gperf"
+      {"option", KEY_OPTION},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 476 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_micmute", KEY_MICMUTE},
+      {(char*)0}, {(char*)0},
+#line 389 "src/udev/keyboard-keys-from-name.gperf"
+      {"8", KEY_8},
+      {(char*)0},
+#line 179 "src/udev/keyboard-keys-from-name.gperf"
+      {"henkan", KEY_HENKAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 375 "src/udev/keyboard-keys-from-name.gperf"
+      {"1", KEY_1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 553 "src/udev/keyboard-keys-from-name.gperf"
+      {"rewind", KEY_REWIND},
+      {(char*)0}, {(char*)0},
+#line 685 "src/udev/keyboard-keys-from-name.gperf"
+      {"list", KEY_LIST},
+#line 390 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_8", KEY_8},
+      {(char*)0}, {(char*)0},
+#line 494 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_leftbrace", KEY_LEFTBRACE},
+#line 88 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_scrolldown", KEY_SCROLLDOWN},
+#line 854 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_cancel", KEY_CANCEL},
+#line 320 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_hanja", KEY_HANJA},
+      {(char*)0},
+#line 635 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy4", BTN_TRIGGER_HAPPY4},
+      {(char*)0},
+#line 376 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_1", KEY_1},
+#line 366 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f20", KEY_F20},
+#line 333 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_calendar", KEY_CALENDAR},
+#line 127 "src/udev/keyboard-keys-from-name.gperf"
+      {"katakana", KEY_KATAKANA},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 659 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_previoussong", KEY_PREVIOUSSONG},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 467 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_again", KEY_AGAIN},
+#line 336 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_middle", BTN_MIDDLE},
+      {(char*)0}, {(char*)0},
+#line 686 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_list", KEY_LIST},
+#line 291 "src/udev/keyboard-keys-from-name.gperf"
+      {"3d_mode", KEY_3D_MODE},
+      {(char*)0}, {(char*)0},
+#line 964 "src/udev/keyboard-keys-from-name.gperf"
+      {"find", KEY_FIND},
+      {(char*)0}, {(char*)0},
+#line 515 "src/udev/keyboard-keys-from-name.gperf"
+      {"print", KEY_PRINT},
+      {(char*)0},
+#line 315 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_e", KEY_FN_E},
+#line 113 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_pencil", BTN_TOOL_PENCIL},
+#line 645 "src/udev/keyboard-keys-from-name.gperf"
+      {"exit", KEY_EXIT},
+#line 536 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot6", KEY_BRL_DOT6},
+      {(char*)0}, {(char*)0},
+#line 546 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f7", KEY_FN_F7},
+      {(char*)0}, {(char*)0},
+#line 173 "src/udev/keyboard-keys-from-name.gperf"
+      {"leftalt", KEY_LEFTALT},
+#line 817 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy24", BTN_TRIGGER_HAPPY24},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 959 "src/udev/keyboard-keys-from-name.gperf"
+      {"file", KEY_FILE},
+#line 657 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_8", BTN_8},
+      {(char*)0},
+#line 138 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_focus", KEY_CAMERA_FOCUS},
+#line 35 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot10", KEY_BRL_DOT10},
+      {(char*)0},
+#line 76 "src/udev/keyboard-keys-from-name.gperf"
+      {"clear", KEY_CLEAR},
+#line 329 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger", BTN_TRIGGER},
+      {(char*)0}, {(char*)0},
+#line 663 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_s", KEY_FN_S},
+#line 487 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_1", BTN_1},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 647 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_b", KEY_FN_B},
+#line 566 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_backslash", KEY_BACKSLASH},
+#line 688 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_frameforward", KEY_FRAMEFORWARD},
+      {(char*)0}, {(char*)0},
+#line 342 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy34", BTN_TRIGGER_HAPPY34},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 962 "src/udev/keyboard-keys-from-name.gperf"
+      {"time", KEY_TIME},
+#line 774 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f4", KEY_FN_F4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 196 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_screen", KEY_SCREEN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 918 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp6", KEY_KP6},
+#line 928 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_stylus", BTN_STYLUS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 867 "src/udev/keyboard-keys-from-name.gperf"
+      {"fastforward", KEY_FASTFORWARD},
+#line 310 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_2", KEY_FN_2},
+#line 771 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f2", KEY_FN_F2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 539 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot8", KEY_BRL_DOT8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 525 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot1", KEY_BRL_DOT1},
+      {(char*)0},
+#line 618 "src/udev/keyboard-keys-from-name.gperf"
+      {"tuner", KEY_TUNER},
+      {(char*)0}, {(char*)0},
+#line 638 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy9", BTN_TRIGGER_HAPPY9},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 153 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_equal", KEY_EQUAL},
+#line 595 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdillumup", KEY_KBDILLUMUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 651 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_left", KEY_CAMERA_LEFT},
+#line 349 "src/udev/keyboard-keys-from-name.gperf"
+      {"f13", KEY_F13},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 263 "src/udev/keyboard-keys-from-name.gperf"
+      {"editor", KEY_EDITOR},
+      {(char*)0},
+#line 562 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_help", KEY_HELP},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 805 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy14", BTN_TRIGGER_HAPPY14},
+      {(char*)0},
+#line 139 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_focus", KEY_CAMERA_FOCUS},
+      {(char*)0}, {(char*)0},
+#line 363 "src/udev/keyboard-keys-from-name.gperf"
+      {"semicolon", KEY_SEMICOLON},
+      {(char*)0}, {(char*)0},
+#line 374 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_save", KEY_SAVE},
+      {(char*)0},
+#line 822 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy29", BTN_TRIGGER_HAPPY29},
+#line 625 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_down", KEY_CAMERA_DOWN},
+#line 362 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f19", KEY_F19},
+      {(char*)0},
+#line 107 "src/udev/keyboard-keys-from-name.gperf"
+      {"prog3", KEY_PROG3},
+      {(char*)0},
+#line 578 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_attendant_toggle", KEY_ATTENDANT_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 530 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot3", KEY_BRL_DOT3},
+#line 142 "src/udev/keyboard-keys-from-name.gperf"
+      {"zoomin", KEY_ZOOMIN},
+#line 446 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f5", KEY_F5},
+#line 646 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_exit", KEY_EXIT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 403 "src/udev/keyboard-keys-from-name.gperf"
+      {"g", KEY_G},
+#line 503 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_xfer", KEY_XFER},
+      {(char*)0},
+#line 798 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_subtitle", KEY_SUBTITLE},
+      {(char*)0}, {(char*)0},
+#line 736 "src/udev/keyboard-keys-from-name.gperf"
+      {"pause", KEY_PAUSE},
+      {(char*)0},
+#line 452 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_channel", KEY_CHANNEL},
+      {(char*)0}, {(char*)0},
+#line 831 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy39", BTN_TRIGGER_HAPPY39},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 978 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_finger", BTN_TOOL_FINGER},
+#line 427 "src/udev/keyboard-keys-from-name.gperf"
+      {"u", KEY_U},
+#line 404 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_g", KEY_G},
+      {(char*)0},
+#line 313 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_d", KEY_FN_D},
+#line 48 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_images", KEY_IMAGES},
+      {(char*)0},
+#line 135 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_pinkie", BTN_PINKIE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 383 "src/udev/keyboard-keys-from-name.gperf"
+      {"5", KEY_5},
+      {(char*)0}, {(char*)0},
+#line 171 "src/udev/keyboard-keys-from-name.gperf"
+      {"mail", KEY_MAIL},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 428 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_u", KEY_U},
+#line 743 "src/udev/keyboard-keys-from-name.gperf"
+      {"zoomout", KEY_ZOOMOUT},
+      {(char*)0},
+#line 172 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_mail", KEY_MAIL},
+      {(char*)0},
+#line 980 "src/udev/keyboard-keys-from-name.gperf"
+      {"goto", KEY_GOTO},
+#line 586 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pause_record", KEY_PAUSE_RECORD},
+      {(char*)0},
+#line 303 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_doubletap", BTN_TOOL_DOUBLETAP},
+#line 533 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot5", KEY_BRL_DOT5},
+      {(char*)0},
+#line 912 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp2", KEY_KP2},
+#line 384 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_5", KEY_5},
+#line 933 "src/udev/keyboard-keys-from-name.gperf"
+      {"alterase", KEY_ALTERASE},
+      {(char*)0},
+#line 879 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_katakanahiragana", KEY_KATAKANAHIRAGANA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 849 "src/udev/keyboard-keys-from-name.gperf"
+      {"scrollup", KEY_SCROLLUP},
+      {(char*)0}, {(char*)0},
+#line 221 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_first", KEY_FIRST},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 960 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_file", KEY_FILE},
+      {(char*)0},
+#line 945 "src/udev/keyboard-keys-from-name.gperf"
+      {"vod", KEY_VOD},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 560 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_touchpad_off", KEY_TOUCHPAD_OFF},
+#line 449 "src/udev/keyboard-keys-from-name.gperf"
+      {"f8", KEY_F8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 160 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_camera_right", KEY_CAMERA_RIGHT},
+#line 810 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy19", BTN_TRIGGER_HAPPY19},
+      {(char*)0}, {(char*)0},
+#line 832 "src/udev/keyboard-keys-from-name.gperf"
+      {"f1", KEY_F1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 405 "src/udev/keyboard-keys-from-name.gperf"
+      {"h", KEY_H},
+      {(char*)0},
+#line 574 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_leftctrl", KEY_LEFTCTRL},
+      {(char*)0}, {(char*)0},
+#line 207 "src/udev/keyboard-keys-from-name.gperf"
+      {"sendfile", KEY_SENDFILE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 570 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_stop_record", KEY_STOP_RECORD},
+#line 727 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_cut", KEY_CUT},
+#line 590 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_5", BTN_5},
+#line 644 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_tripletap", BTN_TOOL_TRIPLETAP},
+#line 470 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy40", BTN_TRIGGER_HAPPY40},
+      {(char*)0},
+#line 216 "src/udev/keyboard-keys-from-name.gperf"
+      {"epg", KEY_EPG},
+      {(char*)0}, {(char*)0},
+#line 406 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_h", KEY_H},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 49 "src/udev/keyboard-keys-from-name.gperf"
+      {"leftmeta", KEY_LEFTMETA},
+      {(char*)0},
+#line 21 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_toggle", KEY_BRIGHTNESS_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 317 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f", KEY_FN_F},
+#line 264 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_editor", KEY_EDITOR},
+      {(char*)0}, {(char*)0},
+#line 738 "src/udev/keyboard-keys-from-name.gperf"
+      {"tape", KEY_TAPE},
+#line 920 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp7", KEY_KP7},
+#line 782 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f9", KEY_FN_F9},
+#line 915 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp4", KEY_KP4},
+#line 733 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_mute", KEY_MUTE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 944 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_minus", KEY_MINUS},
+#line 841 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f6", KEY_F6},
+#line 235 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_audio", KEY_AUDIO},
+#line 813 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy20", BTN_TRIGGER_HAPPY20},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 186 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sport", KEY_SPORT},
+      {(char*)0},
+#line 212 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_archive", KEY_ARCHIVE},
+      {(char*)0}, {(char*)0},
+#line 568 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sysrq", KEY_SYSRQ},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 968 "src/udev/keyboard-keys-from-name.gperf"
+      {"spellcheck", KEY_SPELLCHECK},
+#line 93 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_hanguel", KEY_HANGUEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 286 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_space", KEY_SPACE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 762 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_max", KEY_BRIGHTNESS_MAX},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 823 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy30", BTN_TRIGGER_HAPPY30},
+      {(char*)0}, {(char*)0},
+#line 100 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_move", KEY_MOVE},
+#line 282 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_menu", KEY_MENU},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 582 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_refresh", KEY_REFRESH},
+#line 453 "src/udev/keyboard-keys-from-name.gperf"
+      {"ejectcd", KEY_EJECTCD},
+      {(char*)0}, {(char*)0},
+#line 550 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_yen", KEY_YEN},
+      {(char*)0}, {(char*)0},
+#line 123 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_screensaver", KEY_SCREENSAVER},
+#line 508 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_logoff", KEY_LOGOFF},
+      {(char*)0},
+#line 726 "src/udev/keyboard-keys-from-name.gperf"
+      {"cut", KEY_CUT},
+#line 537 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot7", KEY_BRL_DOT7},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 472 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_left_up", KEY_LEFT_UP},
+#line 910 "src/udev/keyboard-keys-from-name.gperf"
+      {"kp1", KEY_KP1},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 872 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_esc", KEY_FN_ESC},
+      {(char*)0},
+#line 373 "src/udev/keyboard-keys-from-name.gperf"
+      {"save", KEY_SAVE},
+#line 754 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpplus", KEY_KPPLUS},
+      {(char*)0},
+#line 442 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_north", BTN_NORTH},
+#line 208 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_sendfile", KEY_SENDFILE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 78 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_touch", BTN_TOUCH},
+#line 24 "src/udev/keyboard-keys-from-name.gperf"
+      {"dvd", KEY_DVD},
+#line 359 "src/udev/keyboard-keys-from-name.gperf"
+      {"f18", KEY_F18},
+#line 351 "src/udev/keyboard-keys-from-name.gperf"
+      {"f14", KEY_F14},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 732 "src/udev/keyboard-keys-from-name.gperf"
+      {"mute", KEY_MUTE},
+      {(char*)0},
+#line 628 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_south", BTN_SOUTH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 938 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_attendant_off", KEY_ATTENDANT_OFF},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 993 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_del_line", KEY_DEL_LINE},
+#line 150 "src/udev/keyboard-keys-from-name.gperf"
+      {"aux", KEY_AUX},
+#line 15 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_deletefile", KEY_DELETEFILE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 801 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy10", BTN_TRIGGER_HAPPY10},
+#line 16 "src/udev/keyboard-keys-from-name.gperf"
+      {"title", KEY_TITLE},
+#line 466 "src/udev/keyboard-keys-from-name.gperf"
+      {"again", KEY_AGAIN},
+      {(char*)0},
+#line 687 "src/udev/keyboard-keys-from-name.gperf"
+      {"frameforward", KEY_FRAMEFORWARD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 36 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpslash", KEY_KPSLASH},
+#line 527 "src/udev/keyboard-keys-from-name.gperf"
+      {"brl_dot2", KEY_BRL_DOT2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 510 "src/udev/keyboard-keys-from-name.gperf"
+      {"sound", KEY_SOUND},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 760 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpdot", KEY_KPDOT},
+#line 835 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f2", KEY_F2},
+      {(char*)0},
+#line 673 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_brush", BTN_TOOL_BRUSH},
+#line 949 "src/udev/keyboard-keys-from-name.gperf"
+      {"10channelsup", KEY_10CHANNELSUP},
+#line 969 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_spellcheck", KEY_SPELLCHECK},
+      {(char*)0},
+#line 683 "src/udev/keyboard-keys-from-name.gperf"
+      {"left_down", KEY_LEFT_DOWN},
+#line 369 "src/udev/keyboard-keys-from-name.gperf"
+      {"f23", KEY_F23},
+#line 785 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_euro", KEY_EURO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 540 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot8", KEY_BRL_DOT8},
+      {(char*)0},
+#line 274 "src/udev/keyboard-keys-from-name.gperf"
+      {"102nd", KEY_102ND},
+#line 103 "src/udev/keyboard-keys-from-name.gperf"
+      {"prog1", KEY_PROG1},
+#line 260 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpleftparen", KEY_KPLEFTPAREN},
+      {(char*)0},
+#line 80 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pagedown", KEY_PAGEDOWN},
+      {(char*)0}, {(char*)0},
+#line 946 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_vod", KEY_VOD},
+#line 526 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot1", KEY_BRL_DOT1},
+#line 194 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_media_top_menu", KEY_MEDIA_TOP_MENU},
+#line 445 "src/udev/keyboard-keys-from-name.gperf"
+      {"f5", KEY_F5},
+      {(char*)0}, {(char*)0},
+#line 935 "src/udev/keyboard-keys-from-name.gperf"
+      {"onscreen_keyboard", KEY_ONSCREEN_KEYBOARD},
+#line 294 "src/udev/keyboard-keys-from-name.gperf"
+      {"blue", KEY_BLUE},
+      {(char*)0},
+#line 459 "src/udev/keyboard-keys-from-name.gperf"
+      {"vendor", KEY_VENDOR},
+#line 344 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f10", KEY_F10},
+      {(char*)0},
+#line 636 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy6", BTN_TRIGGER_HAPPY6},
+#line 290 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wakeup", KEY_WAKEUP},
+#line 87 "src/udev/keyboard-keys-from-name.gperf"
+      {"scrolldown", KEY_SCROLLDOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 240 "src/udev/keyboard-keys-from-name.gperf"
+      {"sat2", KEY_SAT2},
+#line 155 "src/udev/keyboard-keys-from-name.gperf"
+      {"root_menu", KEY_ROOT_MENU},
+      {(char*)0},
+#line 572 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rfkill", KEY_RFKILL},
+      {(char*)0},
+#line 387 "src/udev/keyboard-keys-from-name.gperf"
+      {"7", KEY_7},
+#line 137 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdillumtoggle", KEY_KBDILLUMTOGGLE},
+#line 29 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f11", KEY_FN_F11},
+      {(char*)0},
+#line 177 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpequal", KEY_KPEQUAL},
+#line 756 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_finance", KEY_FINANCE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 244 "src/udev/keyboard-keys-from-name.gperf"
+      {"pvr", KEY_PVR},
+      {(char*)0}, {(char*)0},
+#line 965 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_find", KEY_FIND},
+#line 571 "src/udev/keyboard-keys-from-name.gperf"
+      {"rfkill", KEY_RFKILL},
+#line 755 "src/udev/keyboard-keys-from-name.gperf"
+      {"finance", KEY_FINANCE},
+#line 156 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_root_menu", KEY_ROOT_MENU},
+#line 273 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy26", BTN_TRIGGER_HAPPY26},
+      {(char*)0}, {(char*)0},
+#line 388 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_7", KEY_7},
+#line 99 "src/udev/keyboard-keys-from-name.gperf"
+      {"move", KEY_MOVE},
+      {(char*)0}, {(char*)0},
+#line 888 "src/udev/keyboard-keys-from-name.gperf"
+      {"forwardmail", KEY_FORWARDMAIL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 843 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f7", KEY_F7},
+      {(char*)0},
+#line 94 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_thumb", BTN_THUMB},
+#line 887 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_bluetooth", KEY_BLUETOOTH},
+#line 925 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp9", KEY_KP9},
+#line 140 "src/udev/keyboard-keys-from-name.gperf"
+      {"numlock", KEY_NUMLOCK},
+      {(char*)0},
+#line 370 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f23", KEY_F23},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 828 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy36", BTN_TRIGGER_HAPPY36},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 343 "src/udev/keyboard-keys-from-name.gperf"
+      {"f10", KEY_F10},
+      {(char*)0},
+#line 851 "src/udev/keyboard-keys-from-name.gperf"
+      {"enter", KEY_ENTER},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 339 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_slow", KEY_SLOW},
+#line 929 "src/udev/keyboard-keys-from-name.gperf"
+      {"backspace", KEY_BACKSPACE},
+      {(char*)0},
+#line 889 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_forwardmail", KEY_FORWARDMAIL},
+#line 544 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightnessup", KEY_BRIGHTNESSUP},
+#line 504 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_7", BTN_7},
+#line 205 "src/udev/keyboard-keys-from-name.gperf"
+      {"appselect", KEY_APPSELECT},
+      {(char*)0},
+#line 262 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_quadtap", BTN_TOOL_QUADTAP},
+      {(char*)0}, {(char*)0},
+#line 816 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy23", BTN_TRIGGER_HAPPY23},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 193 "src/udev/keyboard-keys-from-name.gperf"
+      {"media_top_menu", KEY_MEDIA_TOP_MENU},
+      {(char*)0},
+#line 577 "src/udev/keyboard-keys-from-name.gperf"
+      {"attendant_toggle", KEY_ATTENDANT_TOGGLE},
+#line 748 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_display_off", KEY_DISPLAY_OFF},
+      {(char*)0}, {(char*)0},
+#line 409 "src/udev/keyboard-keys-from-name.gperf"
+      {"j", KEY_J},
+      {(char*)0},
+#line 53 "src/udev/keyboard-keys-from-name.gperf"
+      {"battery", KEY_BATTERY},
+      {(char*)0}, {(char*)0},
+#line 833 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f1", KEY_F1},
+#line 407 "src/udev/keyboard-keys-from-name.gperf"
+      {"i", KEY_I},
+#line 863 "src/udev/keyboard-keys-from-name.gperf"
+      {"vcr", KEY_VCR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 634 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy3", BTN_TRIGGER_HAPPY3},
+#line 826 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy33", BTN_TRIGGER_HAPPY33},
+#line 410 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_j", KEY_J},
+#line 905 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpenter", KEY_KPENTER},
+      {(char*)0},
+#line 147 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdinputassist_prev", KEY_KBDINPUTASSIST_PREV},
+      {(char*)0},
+#line 807 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy16", BTN_TRIGGER_HAPPY16},
+#line 408 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_i", KEY_I},
+#line 341 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_attendant_on", KEY_ATTENDANT_ON},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 377 "src/udev/keyboard-keys-from-name.gperf"
+      {"2", KEY_2},
+#line 602 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_stylus3", BTN_STYLUS3},
+      {(char*)0}, {(char*)0},
+#line 469 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_digits", KEY_DIGITS},
+      {(char*)0},
+#line 558 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_direction", KEY_DIRECTION},
+#line 236 "src/udev/keyboard-keys-from-name.gperf"
+      {"unmute", KEY_UNMUTE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 734 "src/udev/keyboard-keys-from-name.gperf"
+      {"audio_desc", KEY_AUDIO_DESC},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 589 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_search", KEY_SEARCH},
+#line 251 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_leftshift", KEY_LEFTSHIFT},
+      {(char*)0},
+#line 961 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_gear_up", BTN_GEAR_UP},
+#line 378 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_2", KEY_2},
+      {(char*)0}, {(char*)0},
+#line 606 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_volumeup", KEY_VOLUMEUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 588 "src/udev/keyboard-keys-from-name.gperf"
+      {"search", KEY_SEARCH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 735 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_audio_desc", KEY_AUDIO_DESC},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 500 "src/udev/keyboard-keys-from-name.gperf"
+      {"language", KEY_LANGUAGE},
+#line 522 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpcomma", KEY_KPCOMMA},
+#line 327 "src/udev/keyboard-keys-from-name.gperf"
+      {"pausecd", KEY_PAUSECD},
+#line 121 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_ins_line", KEY_INS_LINE},
+#line 468 "src/udev/keyboard-keys-from-name.gperf"
+      {"digits", KEY_DIGITS},
+      {(char*)0},
+#line 305 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_touchpad_on", KEY_TOUCHPAD_ON},
+      {(char*)0}, {(char*)0},
+#line 242 "src/udev/keyboard-keys-from-name.gperf"
+      {"linefeed", KEY_LINEFEED},
+      {(char*)0},
+#line 182 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_displaytoggle", KEY_DISPLAYTOGGLE},
+      {(char*)0}, {(char*)0},
+#line 804 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy13", BTN_TRIGGER_HAPPY13},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 167 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_channelup", KEY_CHANNELUP},
+#line 534 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot5", KEY_BRL_DOT5},
+#line 178 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpequal", KEY_KPEQUAL},
+      {(char*)0}, {(char*)0},
+#line 159 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_right", KEY_CAMERA_RIGHT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 824 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_west", BTN_WEST},
+#line 637 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy8", BTN_TRIGGER_HAPPY8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 492 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_2", BTN_2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 371 "src/udev/keyboard-keys-from-name.gperf"
+      {"f24", KEY_F24},
+#line 986 "src/udev/keyboard-keys-from-name.gperf"
+      {"slash", KEY_SLASH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 276 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy28", BTN_TRIGGER_HAPPY28},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 937 "src/udev/keyboard-keys-from-name.gperf"
+      {"attendant_off", KEY_ATTENDANT_OFF},
+#line 814 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy21", BTN_TRIGGER_HAPPY21},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 192 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_apostrophe", KEY_APOSTROPHE},
+#line 974 "src/udev/keyboard-keys-from-name.gperf"
+      {"ejectclosecd", KEY_EJECTCLOSECD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 307 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_1", KEY_FN_1},
+      {(char*)0}, {(char*)0},
+#line 52 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_open", KEY_OPEN},
+      {(char*)0}, {(char*)0},
+#line 91 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tr2", BTN_TR2},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 830 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy38", BTN_TRIGGER_HAPPY38},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 337 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy31", BTN_TRIGGER_HAPPY31},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 338 "src/udev/keyboard-keys-from-name.gperf"
+      {"slow", KEY_SLOW},
+#line 842 "src/udev/keyboard-keys-from-name.gperf"
+      {"f7", KEY_F7},
+      {(char*)0}, {(char*)0},
+#line 547 "src/udev/keyboard-keys-from-name.gperf"
+      {"controlpanel", KEY_CONTROLPANEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 331 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_right", KEY_RIGHT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 243 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_linefeed", KEY_LINEFEED},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 190 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_power", KEY_POWER},
+      {(char*)0},
+#line 958 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_suspend", KEY_SUSPEND},
+#line 166 "src/udev/keyboard-keys-from-name.gperf"
+      {"channelup", KEY_CHANNELUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 767 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy5", BTN_TRIGGER_HAPPY5},
+#line 992 "src/udev/keyboard-keys-from-name.gperf"
+      {"del_line", KEY_DEL_LINE},
+#line 25 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_dvd", KEY_DVD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 483 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_airbrush", BTN_TOOL_AIRBRUSH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 296 "src/udev/keyboard-keys-from-name.gperf"
+      {"homepage", KEY_HOMEPAGE},
+      {(char*)0}, {(char*)0},
+#line 678 "src/udev/keyboard-keys-from-name.gperf"
+      {"10channelsdown", KEY_10CHANNELSDOWN},
+      {(char*)0},
+#line 169 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_shuffle", KEY_SHUFFLE},
+#line 330 "src/udev/keyboard-keys-from-name.gperf"
+      {"right", KEY_RIGHT},
+      {(char*)0},
+#line 809 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy18", BTN_TRIGGER_HAPPY18},
+#line 136 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdillumtoggle", KEY_KBDILLUMTOGGLE},
+      {(char*)0},
+#line 740 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_right", BTN_RIGHT},
+#line 632 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy1", BTN_TRIGGER_HAPPY1},
+#line 802 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy11", BTN_TRIGGER_HAPPY11},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 818 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy25", BTN_TRIGGER_HAPPY25},
+#line 335 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f21", KEY_F21},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 862 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rightbrace", KEY_RIGHTBRACE},
+      {(char*)0}, {(char*)0},
+#line 184 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rightalt", KEY_RIGHTALT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 909 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp0", KEY_KP0},
+#line 95 "src/udev/keyboard-keys-from-name.gperf"
+      {"wordprocessor", KEY_WORDPROCESSOR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 353 "src/udev/keyboard-keys-from-name.gperf"
+      {"f15", KEY_F15},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 827 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy35", BTN_TRIGGER_HAPPY35},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 356 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f16", KEY_F16},
+#line 365 "src/udev/keyboard-keys-from-name.gperf"
+      {"f20", KEY_F20},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 287 "src/udev/keyboard-keys-from-name.gperf"
+      {"info", KEY_INFO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 661 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_config", KEY_CONFIG},
+      {(char*)0}, {(char*)0},
+#line 834 "src/udev/keyboard-keys-from-name.gperf"
+      {"f2", KEY_F2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 942 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_journal", KEY_JOURNAL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 206 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_appselect", KEY_APPSELECT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 163 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tl2", BTN_TL2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 141 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numlock", KEY_NUMLOCK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 895 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_channeldown", KEY_CHANNELDOWN},
+      {(char*)0}, {(char*)0},
+#line 619 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_tuner", KEY_TUNER},
+      {(char*)0},
+#line 806 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy15", BTN_TRIGGER_HAPPY15},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 864 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_vcr", KEY_VCR},
+      {(char*)0},
+#line 519 "src/udev/keyboard-keys-from-name.gperf"
+      {"copy", KEY_COPY},
+#line 982 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy7", BTN_TRIGGER_HAPPY7},
+      {(char*)0},
+#line 60 "src/udev/keyboard-keys-from-name.gperf"
+      {"green", KEY_GREEN},
+#line 811 "src/udev/keyboard-keys-from-name.gperf"
+      {"context_menu", KEY_CONTEXT_MENU},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 11 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_hiragana", KEY_HIRAGANA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 876 "src/udev/keyboard-keys-from-name.gperf"
+      {"cyclewindows", KEY_CYCLEWINDOWS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 218 "src/udev/keyboard-keys-from-name.gperf"
+      {"nextsong", KEY_NEXTSONG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 538 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot7", KEY_BRL_DOT7},
+      {(char*)0}, {(char*)0},
+#line 85 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdillumdown", KEY_KBDILLUMDOWN},
+      {(char*)0}, {(char*)0},
+#line 819 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy27", BTN_TRIGGER_HAPPY27},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 868 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fastforward", KEY_FASTFORWARD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 350 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f13", KEY_F13},
+      {(char*)0},
+#line 151 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_aux", KEY_AUX},
+      {(char*)0}, {(char*)0},
+#line 355 "src/udev/keyboard-keys-from-name.gperf"
+      {"f16", KEY_F16},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 829 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy37", BTN_TRIGGER_HAPPY37},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 939 "src/udev/keyboard-keys-from-name.gperf"
+      {"power2", KEY_POWER2},
+      {(char*)0}, {(char*)0},
+#line 899 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_down", KEY_DOWN},
+#line 202 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_volumedown", KEY_VOLUMEDOWN},
+      {(char*)0},
+#line 778 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f6", KEY_FN_F6},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 148 "src/udev/keyboard-keys-from-name.gperf"
+      {"next_favorite", KEY_NEXT_FAVORITE},
+#line 158 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_directory", KEY_DIRECTORY},
+#line 65 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rightmeta", KEY_RIGHTMETA},
+#line 81 "src/udev/keyboard-keys-from-name.gperf"
+      {"capslock", KEY_CAPSLOCK},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 46 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_zenkakuhankaku", KEY_ZENKAKUHANKAKU},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 633 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy2", BTN_TRIGGER_HAPPY2},
+#line 815 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy22", BTN_TRIGGER_HAPPY22},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 883 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wlan", KEY_WLAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 953 "src/udev/keyboard-keys-from-name.gperf"
+      {"fastreverse", KEY_FASTREVERSE},
+#line 23 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_reserved", KEY_RESERVED},
+      {(char*)0},
+#line 309 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_2", KEY_FN_2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 708 "src/udev/keyboard-keys-from-name.gperf"
+      {"twen", KEY_TWEN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 245 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_pvr", KEY_PVR},
+      {(char*)0},
+#line 825 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy32", BTN_TRIGGER_HAPPY32},
+      {(char*)0},
+#line 485 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_right_up", KEY_RIGHT_UP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 808 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy17", BTN_TRIGGER_HAPPY17},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 601 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_stylus2", BTN_STYLUS2},
+      {(char*)0},
+#line 695 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_news", KEY_NEWS},
+#line 105 "src/udev/keyboard-keys-from-name.gperf"
+      {"prog2", KEY_PROG2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 451 "src/udev/keyboard-keys-from-name.gperf"
+      {"channel", KEY_CHANNEL},
+#line 528 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brl_dot2", KEY_BRL_DOT2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 457 "src/udev/keyboard-keys-from-name.gperf"
+      {"video", KEY_VIDEO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 956 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_up", KEY_UP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 31 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_fn_f12", KEY_FN_F12},
+      {(char*)0}, {(char*)0},
+#line 347 "src/udev/keyboard-keys-from-name.gperf"
+      {"f12", KEY_F12},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 750 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_hangeul", KEY_HANGEUL},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 180 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_henkan", KEY_HENKAN},
+#line 803 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_trigger_happy12", BTN_TRIGGER_HAPPY12},
+#line 507 "src/udev/keyboard-keys-from-name.gperf"
+      {"logoff", KEY_LOGOFF},
+      {(char*)0}, {(char*)0},
+#line 340 "src/udev/keyboard-keys-from-name.gperf"
+      {"attendant_on", KEY_ATTENDANT_ON},
+#line 772 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f3", KEY_FN_F3},
+      {(char*)0}, {(char*)0},
+#line 976 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpminus", KEY_KPMINUS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 866 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_hp", KEY_HP},
+      {(char*)0}, {(char*)0},
+#line 753 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpplus", KEY_KPPLUS},
+      {(char*)0}, {(char*)0},
+#line 728 "src/udev/keyboard-keys-from-name.gperf"
+      {"previous", KEY_PREVIOUS},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 37 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpslash", KEY_KPSLASH},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 22 "src/udev/keyboard-keys-from-name.gperf"
+      {"reserved", KEY_RESERVED},
+      {(char*)0},
+#line 45 "src/udev/keyboard-keys-from-name.gperf"
+      {"zenkakuhankaku", KEY_ZENKAKUHANKAKU},
+#line 67 "src/udev/keyboard-keys-from-name.gperf"
+      {"slowreverse", KEY_SLOWREVERSE},
+      {(char*)0},
+#line 846 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_dpad_left", BTN_DPAD_LEFT},
+#line 882 "src/udev/keyboard-keys-from-name.gperf"
+      {"wlan", KEY_WLAN},
+      {(char*)0},
+#line 631 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_thumbr", BTN_THUMBR},
+      {(char*)0}, {(char*)0},
+#line 71 "src/udev/keyboard-keys-from-name.gperf"
+      {"computer", KEY_COMPUTER},
+#line 653 "src/udev/keyboard-keys-from-name.gperf"
+      {"rotate_display", KEY_ROTATE_DISPLAY},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 275 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_102nd", KEY_102ND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 238 "src/udev/keyboard-keys-from-name.gperf"
+      {"new", KEY_NEW},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 812 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_context_menu", KEY_CONTEXT_MENU},
+      {(char*)0}, {(char*)0},
+#line 357 "src/udev/keyboard-keys-from-name.gperf"
+      {"f17", KEY_F17},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 183 "src/udev/keyboard-keys-from-name.gperf"
+      {"rightalt", KEY_RIGHTALT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 630 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_thumbl", BTN_THUMBL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 919 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp6", KEY_KP6},
+      {(char*)0}, {(char*)0},
+#line 615 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_option", KEY_OPTION},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 554 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rewind", KEY_REWIND},
+      {(char*)0},
+#line 747 "src/udev/keyboard-keys-from-name.gperf"
+      {"display_off", KEY_DISPLAY_OFF},
+#line 622 "src/udev/keyboard-keys-from-name.gperf"
+      {"presentation", KEY_PRESENTATION},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 874 "src/udev/keyboard-keys-from-name.gperf"
+      {"insert", KEY_INSERT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 458 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_video", KEY_VIDEO},
+      {(char*)0},
+#line 42 "src/udev/keyboard-keys-from-name.gperf"
+      {"vcr2", KEY_VCR2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 115 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wwan", KEY_WWAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 345 "src/udev/keyboard-keys-from-name.gperf"
+      {"f11", KEY_F11},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 360 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f18", KEY_F18},
+#line 655 "src/udev/keyboard-keys-from-name.gperf"
+      {"uwb", KEY_UWB},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 157 "src/udev/keyboard-keys-from-name.gperf"
+      {"directory", KEY_DIRECTORY},
+#line 977 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpminus", KEY_KPMINUS},
+#line 346 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f11", KEY_F11},
+#line 861 "src/udev/keyboard-keys-from-name.gperf"
+      {"rightbrace", KEY_RIGHTBRACE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 92 "src/udev/keyboard-keys-from-name.gperf"
+      {"hanguel", KEY_HANGUEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 580 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpasterisk", KEY_KPASTERISK},
+      {(char*)0}, {(char*)0},
+#line 64 "src/udev/keyboard-keys-from-name.gperf"
+      {"rightmeta", KEY_RIGHTMETA},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 456 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_videophone", KEY_VIDEOPHONE},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 440 "src/udev/keyboard-keys-from-name.gperf"
+      {"mhp", KEY_MHP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 612 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_zoomin", KEY_CAMERA_ZOOMIN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 583 "src/udev/keyboard-keys-from-name.gperf"
+      {"rightctrl", KEY_RIGHTCTRL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 227 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp3", KEY_KP3},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 936 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_onscreen_keyboard", KEY_ONSCREEN_KEYBOARD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 219 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_nextsong", KEY_NEXTSONG},
+#line 298 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_dpad_up", BTN_DPAD_UP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 168 "src/udev/keyboard-keys-from-name.gperf"
+      {"shuffle", KEY_SHUFFLE},
+#line 660 "src/udev/keyboard-keys-from-name.gperf"
+      {"config", KEY_CONFIG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 886 "src/udev/keyboard-keys-from-name.gperf"
+      {"bluetooth", KEY_BLUETOOTH},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 247 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpplusminus", KEY_KPPLUSMINUS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 573 "src/udev/keyboard-keys-from-name.gperf"
+      {"leftctrl", KEY_LEFTCTRL},
+      {(char*)0}, {(char*)0},
+#line 302 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_favorites", KEY_FAVORITES},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 581 "src/udev/keyboard-keys-from-name.gperf"
+      {"refresh", KEY_REFRESH},
+      {(char*)0}, {(char*)0},
+#line 780 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f8", KEY_FN_F8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 367 "src/udev/keyboard-keys-from-name.gperf"
+      {"f22", KEY_F22},
+      {(char*)0},
+#line 643 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_right_down", KEY_RIGHT_DOWN},
+      {(char*)0}, {(char*)0},
+#line 768 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f1", KEY_FN_F1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 368 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f22", KEY_F22},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 556 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_video_next", KEY_VIDEO_NEXT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 490 "src/udev/keyboard-keys-from-name.gperf"
+      {"yellow", KEY_YELLOW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 75 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_tool_quinttap", BTN_TOOL_QUINTTAP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 354 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f15", KEY_F15},
+      {(char*)0}, {(char*)0},
+#line 950 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_10channelsup", KEY_10CHANNELSUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 460 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_vendor", KEY_VENDOR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 948 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpjpcomma", KEY_KPJPCOMMA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 512 "src/udev/keyboard-keys-from-name.gperf"
+      {"v", KEY_V},
+      {(char*)0},
+#line 878 "src/udev/keyboard-keys-from-name.gperf"
+      {"katakanahiragana", KEY_KATAKANAHIRAGANA},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 471 "src/udev/keyboard-keys-from-name.gperf"
+      {"left_up", KEY_LEFT_UP},
+      {(char*)0},
+#line 462 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_mp3", KEY_MP3},
+      {(char*)0}, {(char*)0},
+#line 475 "src/udev/keyboard-keys-from-name.gperf"
+      {"micmute", KEY_MICMUTE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 513 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_v", KEY_V},
+      {(char*)0},
+#line 951 "src/udev/keyboard-keys-from-name.gperf"
+      {"tv", KEY_TV},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 585 "src/udev/keyboard-keys-from-name.gperf"
+      {"pause_record", KEY_PAUSE_RECORD},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 334 "src/udev/keyboard-keys-from-name.gperf"
+      {"f21", KEY_F21},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 96 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wordprocessor", KEY_WORDPROCESSOR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 43 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_vcr2", KEY_VCR2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 584 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rightctrl", KEY_RIGHTCTRL},
+#line 605 "src/udev/keyboard-keys-from-name.gperf"
+      {"volumeup", KEY_VOLUMEUP},
+      {(char*)0}, {(char*)0},
+#line 259 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_unknown", KEY_UNKNOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 927 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_lights_toggle", KEY_LIGHTS_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 258 "src/udev/keyboard-keys-from-name.gperf"
+      {"unknown", KEY_UNKNOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 488 "src/udev/keyboard-keys-from-name.gperf"
+      {"voicecommand", KEY_VOICECOMMAND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 261 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kpleftparen", KEY_KPLEFTPAREN},
+      {(char*)0},
+#line 923 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp8", KEY_KP8},
+#line 776 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f5", KEY_FN_F5},
+      {(char*)0},
+#line 626 "src/udev/keyboard-keys-from-name.gperf"
+      {"reply", KEY_REPLY},
+#line 325 "src/udev/keyboard-keys-from-name.gperf"
+      {"tv2", KEY_TV2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 911 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp1", KEY_KP1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 223 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_spreadsheet", KEY_SPREADSHEET},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 59 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_dpad_right", BTN_DPAD_RIGHT},
+#line 86 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kbdillumdown", KEY_KBDILLUMDOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 209 "src/udev/keyboard-keys-from-name.gperf"
+      {"rightshift", KEY_RIGHTSHIFT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 749 "src/udev/keyboard-keys-from-name.gperf"
+      {"hangeul", KEY_HANGEUL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 26 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f10", KEY_FN_F10},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 797 "src/udev/keyboard-keys-from-name.gperf"
+      {"subtitle", KEY_SUBTITLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 358 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f17", KEY_F17},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 575 "src/udev/keyboard-keys-from-name.gperf"
+      {"kprightparen", KEY_KPRIGHTPAREN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 210 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_rightshift", KEY_RIGHTSHIFT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 250 "src/udev/keyboard-keys-from-name.gperf"
+      {"leftshift", KEY_LEFTSHIFT},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 952 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_tv", KEY_TV},
+      {(char*)0},
+#line 10 "src/udev/keyboard-keys-from-name.gperf"
+      {"hiragana", KEY_HIRAGANA},
+#line 758 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightnessdown", KEY_BRIGHTNESSDOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 217 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_epg", KEY_EPG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 684 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_left_down", KEY_LEFT_DOWN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 211 "src/udev/keyboard-keys-from-name.gperf"
+      {"archive", KEY_ARCHIVE},
+#line 790 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_brightness_min", KEY_BRIGHTNESS_MIN},
+      {(char*)0},
+#line 201 "src/udev/keyboard-keys-from-name.gperf"
+      {"volumedown", KEY_VOLUMEDOWN},
+      {(char*)0},
+#line 704 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_4", KEY_NUMERIC_4},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 129 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_b", KEY_NUMERIC_B},
+      {(char*)0},
+#line 917 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp5", KEY_KP5},
+#line 505 "src/udev/keyboard-keys-from-name.gperf"
+      {"q", KEY_Q},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 480 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_graphicseditor", KEY_GRAPHICSEDITOR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 181 "src/udev/keyboard-keys-from-name.gperf"
+      {"displaytoggle", KEY_DISPLAYTOGGLE},
+      {(char*)0},
+#line 716 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_a", KEY_NUMERIC_A},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 506 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_q", KEY_Q},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 348 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_f12", KEY_F12},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 120 "src/udev/keyboard-keys-from-name.gperf"
+      {"ins_line", KEY_INS_LINE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 545 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f7", KEY_FN_F7},
+      {(char*)0},
+#line 79 "src/udev/keyboard-keys-from-name.gperf"
+      {"pagedown", KEY_PAGEDOWN},
+#line 788 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wimax", KEY_WIMAX},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 890 "src/udev/keyboard-keys-from-name.gperf"
+      {"muhenkan", KEY_MUHENKAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 714 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_9", KEY_NUMERIC_9},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 283 "src/udev/keyboard-keys-from-name.gperf"
+      {"voicemail", KEY_VOICEMAIL},
+      {(char*)0},
+#line 576 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kprightparen", KEY_KPRIGHTPAREN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 718 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_c", KEY_NUMERIC_C},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 705 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_4", KEY_NUMERIC_4},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 720 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_d", KEY_NUMERIC_D},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 130 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_b", KEY_NUMERIC_B},
+      {(char*)0},
+#line 429 "src/udev/keyboard-keys-from-name.gperf"
+      {"w", KEY_W},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 301 "src/udev/keyboard-keys-from-name.gperf"
+      {"favorites", KEY_FAVORITES},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 717 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_a", KEY_NUMERIC_A},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 430 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_w", KEY_W},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 624 "src/udev/keyboard-keys-from-name.gperf"
+      {"camera_down", KEY_CAMERA_DOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 187 "src/udev/keyboard-keys-from-name.gperf"
+      {"pageup", KEY_PAGEUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 770 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f2", KEY_FN_F2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 891 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_muhenkan", KEY_MUHENKAN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 715 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_9", KEY_NUMERIC_9},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 719 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_c", KEY_NUMERIC_C},
+#line 979 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_gear_down", BTN_GEAR_DOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 721 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_d", KEY_NUMERIC_D},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 696 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_0", KEY_NUMERIC_0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 489 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_voicecommand", KEY_VOICECOMMAND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 246 "src/udev/keyboard-keys-from-name.gperf"
+      {"kpplusminus", KEY_KPPLUSMINUS},
+      {(char*)0}, {(char*)0},
+#line 921 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp7", KEY_KP7},
+#line 599 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_zero", KEY_BRIGHTNESS_ZERO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 608 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_auto", KEY_BRIGHTNESS_AUTO},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 926 "src/udev/keyboard-keys-from-name.gperf"
+      {"lights_toggle", KEY_LIGHTS_TOGGLE},
+      {(char*)0}, {(char*)0},
+#line 557 "src/udev/keyboard-keys-from-name.gperf"
+      {"direction", KEY_DIRECTION},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 543 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightnessup", KEY_BRIGHTNESSUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 697 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_0", KEY_NUMERIC_0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 443 "src/udev/keyboard-keys-from-name.gperf"
+      {"buttonconfig", KEY_BUTTONCONFIG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 479 "src/udev/keyboard-keys-from-name.gperf"
+      {"graphicseditor", KEY_GRAPHICSEDITOR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 913 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_kp2", KEY_KP2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 90 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_switchvideomode", KEY_SWITCHVIDEOMODE},
+      {(char*)0}, {(char*)0},
+#line 30 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f12", KEY_FN_F12},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 555 "src/udev/keyboard-keys-from-name.gperf"
+      {"video_next", KEY_VIDEO_NEXT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 118 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_6", KEY_NUMERIC_6},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 941 "src/udev/keyboard-keys-from-name.gperf"
+      {"journal", KEY_JOURNAL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 564 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_star", KEY_NUMERIC_STAR},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 326 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_tv2", KEY_TV2},
+#line 484 "src/udev/keyboard-keys-from-name.gperf"
+      {"right_up", KEY_RIGHT_UP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 702 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_3", KEY_NUMERIC_3},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 444 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_buttonconfig", KEY_BUTTONCONFIG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 152 "src/udev/keyboard-keys-from-name.gperf"
+      {"equal", KEY_EQUAL},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 119 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_6", KEY_NUMERIC_6},
+      {(char*)0}, {(char*)0},
+#line 28 "src/udev/keyboard-keys-from-name.gperf"
+      {"fn_f11", KEY_FN_F11},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 567 "src/udev/keyboard-keys-from-name.gperf"
+      {"sysrq", KEY_SYSRQ},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 940 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_power2", KEY_POWER2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 213 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_pound", KEY_NUMERIC_POUND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 114 "src/udev/keyboard-keys-from-name.gperf"
+      {"wwan", KEY_WWAN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 703 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_3", KEY_NUMERIC_3},
+      {(char*)0},
+#line 629 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_thumb2", BTN_THUMB2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 149 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_next_favorite", KEY_NEXT_FAVORITE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 712 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_8", KEY_NUMERIC_8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 698 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_1", KEY_NUMERIC_1},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 563 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_star", KEY_NUMERIC_STAR},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 757 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightnessdown", KEY_BRIGHTNESSDOWN},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 642 "src/udev/keyboard-keys-from-name.gperf"
+      {"right_down", KEY_RIGHT_DOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 787 "src/udev/keyboard-keys-from-name.gperf"
+      {"wimax", KEY_WIMAX},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 254 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_cycle", KEY_BRIGHTNESS_CYCLE},
+      {(char*)0},
+#line 706 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_5", KEY_NUMERIC_5},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 713 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_8", KEY_NUMERIC_8},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 699 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_1", KEY_NUMERIC_1},
+#line 856 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_11", KEY_NUMERIC_11},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 284 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_voicemail", KEY_VOICEMAIL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 658 "src/udev/keyboard-keys-from-name.gperf"
+      {"previoussong", KEY_PREVIOUSSONG},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 761 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_max", KEY_BRIGHTNESS_MAX},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 679 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_10channelsdown", KEY_10CHANNELSDOWN},
+      {(char*)0}, {(char*)0},
+#line 239 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_new", KEY_NEW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 707 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_5", KEY_NUMERIC_5},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 710 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_7", KEY_NUMERIC_7},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 789 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_min", KEY_BRIGHTNESS_MIN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 498 "src/udev/keyboard-keys-from-name.gperf"
+      {"question", KEY_QUESTION},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 998 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_next", KEY_KBDINPUTASSIST_NEXT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 877 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_cyclewindows", KEY_CYCLEWINDOWS},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 700 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_2", KEY_NUMERIC_2},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 293 "src/udev/keyboard-keys-from-name.gperf"
+      {"btn_dpad_down", BTN_DPAD_DOWN},
+      {(char*)0},
+#line 232 "src/udev/keyboard-keys-from-name.gperf"
+      {"wps_button", KEY_WPS_BUTTON},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 40 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_accept", KEY_KBDINPUTASSIST_ACCEPT},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 894 "src/udev/keyboard-keys-from-name.gperf"
+      {"channeldown", KEY_CHANNELDOWN},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 711 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_7", KEY_NUMERIC_7},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 214 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_pound", KEY_NUMERIC_POUND},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 20 "src/udev/keyboard-keys-from-name.gperf"
+      {"brightness_toggle", KEY_BRIGHTNESS_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 701 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_2", KEY_NUMERIC_2},
+#line 858 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_numeric_12", KEY_NUMERIC_12},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 304 "src/udev/keyboard-keys-from-name.gperf"
+      {"touchpad_on", KEY_TOUCHPAD_ON},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 559 "src/udev/keyboard-keys-from-name.gperf"
+      {"touchpad_off", KEY_TOUCHPAD_OFF},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 491 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_yellow", KEY_YELLOW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 289 "src/udev/keyboard-keys-from-name.gperf"
+      {"wakeup", KEY_WAKEUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 855 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_11", KEY_NUMERIC_11},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 731 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_video_prev", KEY_VIDEO_PREV},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 233 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_wps_button", KEY_WPS_BUTTON},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 12 "src/udev/keyboard-keys-from-name.gperf"
+      {"touchpad_toggle", KEY_TOUCHPAD_TOGGLE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 455 "src/udev/keyboard-keys-from-name.gperf"
+      {"videophone", KEY_VIDEOPHONE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 795 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_nextgroup", KEY_KBDINPUTASSIST_NEXTGROUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 499 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_question", KEY_QUESTION},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 793 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_prevgroup", KEY_KBDINPUTASSIST_PREVGROUP},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 857 "src/udev/keyboard-keys-from-name.gperf"
+      {"numeric_12", KEY_NUMERIC_12},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 175 "src/udev/keyboard-keys-from-name.gperf"
+      {"www", KEY_WWW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 176 "src/udev/keyboard-keys-from-name.gperf"
+      {"key_www", KEY_WWW},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0},
+#line 89 "src/udev/keyboard-keys-from-name.gperf"
+      {"switchvideomode", KEY_SWITCHVIDEOMODE},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 146 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_prev", KEY_KBDINPUTASSIST_PREV},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 667 "src/udev/keyboard-keys-from-name.gperf"
+      {"kbdinputassist_cancel", KEY_KBDINPUTASSIST_CANCEL},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 730 "src/udev/keyboard-keys-from-name.gperf"
+      {"video_prev", KEY_VIDEO_PREV}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = hash_key_name (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/src/udev/link-config-gperf.c b/build/src/udev/link-config-gperf.c
new file mode 100644
index 0000000000..1ec21d38ec
--- /dev/null
+++ b/build/src/udev/link-config-gperf.c
@@ -0,0 +1,218 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: /usr/bin/gperf --output-file src/udev/link-config-gperf.c ../src/udev/net/link-config-gperf.gperf  */
+/* Computed positions: -k'6-7' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../src/udev/net/link-config-gperf.gperf"
+
+#if __GNUC__ >= 7
+_Pragma("GCC diagnostic ignored \"-Wimplicit-fallthrough\"")
+#endif
+#include <stddef.h>
+#include "conf-parser.h"
+#include "ethtool-util.h"
+#include "link-config.h"
+#include "network-internal.h"
+#include <string.h>
+
+#define TOTAL_KEYWORDS 46
+#define MIN_WORD_LENGTH 9
+#define MAX_WORD_LENGTH 31
+#define MIN_HASH_VALUE 10
+#define MAX_HASH_VALUE 71
+/* maximum key range = 62, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+link_config_gperf_hash (register const char *str, register size_t len)
+{
+  static const unsigned char asso_values[] =
+    {
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72,  0, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 10, 20, 10, 20, 72,
+      72, 15, 55, 72, 72, 10, 10,  0, 20, 25,
+      25, 72,  5, 72,  0,  5, 40,  0, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 20, 72, 72,
+       0, 25, 72, 72, 72, 20, 72, 72, 10, 72,
+      72, 10, 72, 72, 25, 72,  5, 15, 72, 72,
+       0, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
+      72, 72, 72, 72, 72, 72
+    };
+  return len + asso_values[(unsigned char)str[6]] + asso_values[(unsigned char)str[5]];
+}
+
+const struct ConfigPerfItem *
+link_config_gperf_lookup (register const char *str, register size_t len)
+{
+  static const struct ConfigPerfItem wordlist[] =
+    {
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+      {(char*)0}, {(char*)0},
+#line 27 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Type",                      config_parse_match_strv,               0,                             offsetof(link_config, match_type)},
+      {(char*)0}, {(char*)0},
+#line 42 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.MTUBytes",                   config_parse_mtu,                      AF_UNSPEC,                     offsetof(link_config, mtu)},
+      {(char*)0},
+#line 57 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TxChannels",                 config_parse_channel,                  0,                             offsetof(link_config, channels)},
+#line 22 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.MACAddress",                config_parse_hwaddrs,                  0,                             offsetof(link_config, match_mac)},
+#line 64 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TxBufferSize",               config_parse_nic_buffer_size,          0,                             offsetof(link_config, ring)},
+#line 66 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TxFlowControl",              config_parse_tristate,                 0,                             offsetof(link_config, tx_flow_control)},
+      {(char*)0},
+#line 56 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.RxChannels",                 config_parse_channel,                  0,                             offsetof(link_config, channels)},
+      {(char*)0},
+#line 61 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.RxBufferSize",               config_parse_nic_buffer_size,          0,                             offsetof(link_config, ring)},
+#line 65 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.RxFlowControl",              config_parse_tristate,                 0,                             offsetof(link_config, rx_flow_control)},
+#line 60 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Advertise",                  config_parse_advertise,                0,                             offsetof(link_config, advertise)},
+#line 36 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.MACAddress",                 config_parse_hwaddr,                   0,                             offsetof(link_config, mac)},
+#line 62 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.RxMiniBufferSize",           config_parse_nic_buffer_size,          0,                             offsetof(link_config, ring)},
+#line 63 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.RxJumboBufferSize",          config_parse_nic_buffer_size,          0,                             offsetof(link_config, ring)},
+#line 33 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Architecture",              config_parse_net_condition,            CONDITION_ARCHITECTURE,        offsetof(link_config, conditions)},
+#line 32 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.KernelVersion",             config_parse_net_condition,            CONDITION_KERNEL_VERSION,      offsetof(link_config, conditions)},
+#line 41 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Alias",                      config_parse_ifalias,                  0,                             offsetof(link_config, alias)},
+#line 35 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.MACAddressPolicy",           config_parse_mac_address_policy,       0,                             offsetof(link_config, mac_address_policy)},
+#line 26 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Driver",                    config_parse_match_strv,               0,                             offsetof(link_config, match_driver)},
+#line 31 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.KernelCommandLine",         config_parse_net_condition,            CONDITION_KERNEL_COMMAND_LINE, offsetof(link_config, conditions)},
+#line 46 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.WakeOnLan",                  config_parse_wol,                      0,                             offsetof(link_config, wol)},
+#line 25 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Path",                      config_parse_match_strv,               0,                             offsetof(link_config, match_path)},
+      {(char*)0},
+#line 51 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TCPSegmentationOffload",     config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_TSO])},
+#line 52 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TCP6SegmentationOffload",    config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_TSO6])},
+#line 28 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Property",                  config_parse_match_property,           0,                             offsetof(link_config, match_property)},
+#line 39 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.AlternativeName",            config_parse_ifnames,                  1,                             offsetof(link_config, alternative_names)},
+#line 59 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.CombinedChannels",           config_parse_channel,                  0,                             offsetof(link_config, channels)},
+      {(char*)0},
+#line 24 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.OriginalName",              config_parse_match_ifnames,            0,                             offsetof(link_config, match_name)},
+#line 47 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Port",                       config_parse_port,                     0,                             offsetof(link_config, port)},
+#line 45 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.AutoNegotiation",            config_parse_tristate,                 0,                             offsetof(link_config, autonegotiation)},
+#line 44 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Duplex",                     config_parse_duplex,                   0,                             offsetof(link_config, duplex)},
+#line 40 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.AlternativeNamesPolicy",     config_parse_alternative_names_policy, 0,                             offsetof(link_config, alternative_names_policy)},
+#line 58 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.OtherChannels",              config_parse_channel,                  0,                             offsetof(link_config, channels)},
+#line 38 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Name",                       config_parse_ifname,                   0,                             offsetof(link_config, name)},
+#line 23 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.PermanentMACAddress",       config_parse_hwaddrs,                  0,                             offsetof(link_config, match_permanent_mac)},
+      {(char*)0},
+#line 53 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.UDPSegmentationOffload",     config_parse_warn_compat,              DISABLED_LEGACY,               0},
+#line 49 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.TransmitChecksumOffload",    config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_TX])},
+#line 55 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.LargeReceiveOffload",        config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_LRO])},
+#line 37 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.NamePolicy",                 config_parse_name_policy,              0,                             offsetof(link_config, name_policy)},
+#line 67 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.AutoNegotiationFlowControl", config_parse_tristate,                 0,                             offsetof(link_config, autoneg_flow_control)},
+#line 48 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.ReceiveChecksumOffload",     config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_RX])},
+#line 43 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.BitsPerSecond",              config_parse_si_uint64,                0,                             offsetof(link_config, speed)},
+      {(char*)0},
+#line 30 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Virtualization",            config_parse_net_condition,            CONDITION_VIRTUALIZATION,      offsetof(link_config, conditions)},
+#line 34 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.Description",                config_parse_string,                   0,                             offsetof(link_config, description)},
+      {(char*)0}, {(char*)0}, {(char*)0},
+#line 29 "../src/udev/net/link-config-gperf.gperf"
+      {"Match.Host",                      config_parse_net_condition,            CONDITION_HOST,                offsetof(link_config, conditions)},
+#line 54 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.GenericReceiveOffload",      config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_GRO])},
+      {(char*)0}, {(char*)0}, {(char*)0}, {(char*)0},
+#line 50 "../src/udev/net/link-config-gperf.gperf"
+      {"Link.GenericSegmentationOffload", config_parse_tristate,                 0,                             offsetof(link_config, features[NET_DEV_FEAT_GSO])}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register unsigned int key = link_config_gperf_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE)
+        {
+          register const char *s = wordlist[key].section_and_lvalue;
+
+          if (s && *str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff --git a/build/version.h b/build/version.h
new file mode 100644
index 0000000000..7ae404d10f
--- /dev/null
+++ b/build/version.h
@@ -0,0 +1,8 @@
+/* Detailed project version that includes git commit when not built from a release.
+ * Use this in preference to PROJECT_VERSION, with the following exceptions:
+ * - where a simplified form is expected for compatibility, for example
+ *   'udevadm version',
+ * - where a simplified machine-parsable form is more useful, for example
+ *   pkgconfig files and version information written to binary files.
+ */
+#define GIT_VERSION "245-1623-g2233c27"
