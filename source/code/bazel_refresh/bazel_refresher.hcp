class
❪string❫
❪vector❫
❪"code/bazel_refresh/conversion_test/bazel_conversion_tests"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫

⚞⚟

◀public: static▶ void ☀Refresh()❰
    
    
    Bazel_Conversion_Tests x;
    x.tests.emplace_back(Empty_Unilang_To_Protobuf());
    x.tests.emplace_back(Empty_Unilang_To_Protobuf_To_Cpp_Object());
    
    
    
    //change the root of the repo
    //Set_Path("/home/thickey/Desktop/everything");
❱

◀private: static▶ Bazel_Conversion_Test ☀Empty_Unilang_To_Protobuf()❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain.emplace_back(Artifact_Type::UNILANG);
    test.transcompilation_chain.emplace_back(Artifact_Type::PROTOBUF);
    test.feature_categorization.emplace_back("empty");
    test.contents.source_contents = R"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = R"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Unilang_To_Protobuf_To_Cpp_Object()❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain.emplace_back(Artifact_Type::UNILANG);
    test.transcompilation_chain.emplace_back(Artifact_Type::PROTOBUF);
    test.transcompilation_chain.emplace_back(Artifact_Type::CPP);
    test.feature_categorization.emplace_back("empty");
    test.contents.source_contents = R"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = R"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱

◀private: static▶ std::string ☀Readme_Text()❰
    std::string message;
    Append_With_Newline(message,"Here is where we test the unilang transcompiler from within the build itself.");
    Append_With_Newline(message,"Using the unilang-toolchain, we convert unilang code down into other languages.");
    Append_With_Newline(message,"Then we run the specific language toolchains as necessary.");
    Append_With_Newline(message,"This is all done from inside specific unilang bazel build rules.");
    Append_With_Newline(message,"");
    Append_With_Newline(message,"These bazel tests have been auto-generated by the 'bazel refresh' tool.");
    Append_With_Newline(message,"Do not change them directly.");
    return message;
❱