class
❪string❫
❪vector❫
❪"code/bazel_refresh/conversion_test/bazel_conversion_tests"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟


◀public: static▶ Bazel_Conversion_Tests ☀Create_All_Bazel_Tests()❰
    Bazel_Conversion_Tests x;
    x.tests.emplace_back(Empty_Unilang_To_Protobuf());
    x.tests.emplace_back(Empty_Unilang_To_Protobuf_To_Cpp_Object());
    return x;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Unilang_To_Protobuf()❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain.emplace_back(Artifact_Type::UNILANG);
    test.transcompilation_chain.emplace_back(Artifact_Type::PROTOBUF);
    test.feature_categorization.emplace_back("empty");
    test.contents.source_contents = R"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = R"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Unilang_To_Protobuf_To_Cpp_Object()❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain.emplace_back(Artifact_Type::UNILANG);
    test.transcompilation_chain.emplace_back(Artifact_Type::PROTOBUF);
    test.transcompilation_chain.emplace_back(Artifact_Type::CPP);
    test.feature_categorization.emplace_back("empty");
    test.contents.source_contents = R"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = R"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱