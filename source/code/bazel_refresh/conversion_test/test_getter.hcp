class
❪string❫
❪vector❫
❪"code/bazel_refresh/conversion_test/bazel_conversion_tests"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/transcompilers/unilang/tokens/builder/token_builder"❫
⚞⚟


◀public: static▶ Bazel_Conversion_Tests ☀Create_All_Bazel_Tests()❰
    Bazel_Conversion_Tests x;
    
    auto tokens = Get_Tokens::Get();
    
    //unilang to x
    x.tests.emplace_back(Empty_File_Unilang_To_Protobuf(tokens));
    x.tests.emplace_back(Empty_File_Unilang_To_Protobuf_To_Cpp_Object(tokens));
    x.tests.emplace_back(Empty_Global_Unilang_To_Protobuf(tokens));
    x.tests.emplace_back(Empty_Global_Unilang_To_Protobuf_To_Cpp_Object(tokens));
    x.tests.emplace_back(Empty_Product_Unilang_To_Protobuf(tokens));
    x.tests.emplace_back(Empty_Product_Unilang_To_Protobuf_To_Cpp_Object(tokens));
    x.tests.emplace_back(Empty_Sum_Unilang_To_Protobuf(tokens));
    x.tests.emplace_back(Empty_Sum_Unilang_To_Protobuf_To_Cpp_Object(tokens));
    
    //protobuf to x
    
    
    return x;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_File_Unilang_To_Protobuf(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("file");
    test.contents.source_contents = LR"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_File_Unilang_To_Protobuf_To_Cpp_Object(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf_Cpp();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("file");
    test.contents.source_contents = LR"RAW_LITERAL()RAW_LITERAL";
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱

◀private: static▶ Bazel_Conversion_Test ☀Empty_Global_Unilang_To_Protobuf(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("global");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"g");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Global_Unilang_To_Protobuf_To_Cpp_Object(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf_Cpp();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("global");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"g");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱


◀private: static▶ Bazel_Conversion_Test ☀Empty_Product_Unilang_To_Protobuf(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("product");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"p");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Product_Unilang_To_Protobuf_To_Cpp_Object(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf_Cpp();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("product");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"p");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱

◀private: static▶ Bazel_Conversion_Test ☀Empty_Sum_Unilang_To_Protobuf(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("sum");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"s");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf.bzl", "unilang_to_protobuf")
unilang_to_protobuf(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Sum_Unilang_To_Protobuf_To_Cpp_Object(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Unilang_Protobuf_Cpp();
    test.feature_categorization.emplace_back("empty");
    test.feature_categorization.emplace_back("sum");
    test.contents.source_contents = Token_Builder::Create_User_Typed_Token(all_tokens,Token_Name::META_DATA_CODE_TYPE,"s");
    test.contents.build_contents = LR"RAW_LITERAL(
package(default_visibility = ["//visibility:public"])
load("//bazel/cookbook/unilang:unilang_to_protobuf_to_cpp.bzl", "unilang_to_protobuf_to_cpp")
unilang_to_protobuf_to_cpp(
  name = "example"
)
)RAW_LITERAL";
    return test;
❱
◀private: static▶ Bazel_Conversion_Test ☀Empty_Protobuf_To_Cpp_Object(All_Language_Tokens const& all_tokens)❰
    Bazel_Conversion_Test test;
    test.transcompilation_chain = Transcompilation_Chain_Protobuf_Cpp();
    test.feature_categorization.emplace_back("empty");
    test.contents.source_contents = LR"RAW_LITERAL(
syntax = "proto3";
)RAW_LITERAL";
    test.contents.test_contents = LR"RAW_LITERAL(
#include <iostream>
#include "code/hello_world/protobuf/empty/example.pb.h"
int main(){
    GOOGLE_PROTOBUF_VERIFY_VERSION;
        return 0;
}
)RAW_LITERAL";
    test.contents.build_contents = LR"RAW_LITERAL(
load("//bazel/cookbook/cpp:main.bzl", "cpp_main")
load("//bazel/cookbook/protobuf:cpp.bzl", "cpp_proto_object")
package(
    default_visibility = ["//visibility:public"],
)

cpp_proto_object(
  name = "hello"
)

cpp_main(
    name = "main",
    deps = [":hello_cpp_proto"]
)
)RAW_LITERAL";
    return test;
❱





















//utility
◀private: static▶ std::vector<Artifact_Type> ☀Transcompilation_Chain_Unilang_Protobuf()❰
    std::vector<Artifact_Type> artifacts;
    artifacts.emplace_back(Artifact_Type::UNILANG);
    artifacts.emplace_back(Artifact_Type::PROTOBUF);
    return artifacts;
❱
◀private: static▶ std::vector<Artifact_Type> ☀Transcompilation_Chain_Unilang_Protobuf_Cpp()❰
    std::vector<Artifact_Type> artifacts;
    artifacts.emplace_back(Artifact_Type::UNILANG);
    artifacts.emplace_back(Artifact_Type::PROTOBUF);
    artifacts.emplace_back(Artifact_Type::CPP);
    return artifacts;
❱
◀private: static▶ std::vector<Artifact_Type> ☀Transcompilation_Chain_Protobuf_Cpp()❰
    std::vector<Artifact_Type> artifacts;
    artifacts.emplace_back(Artifact_Type::PROTOBUF);
    artifacts.emplace_back(Artifact_Type::CPP);
    return artifacts;
❱

