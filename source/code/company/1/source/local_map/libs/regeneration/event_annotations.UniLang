􏶞g􏶟
􏷲Local Map Regeneration Trigger Framework data and configuration􏷱
􏷰Contains data types created by and used within the framework.􏷯
􏷮Regeneration􏷭
􏷬Trevor Hickey􏷫

􏷞local_map􏷝􏷞statik􏷝

􏳃mock􏳄
􏳁mock􏳂
􏲿map_ref_id􏳀

􏳃mock􏳄
􏳁mock􏳂
􏲿lane_neighbor_annotation􏳀

􏳃mock􏳄
􏳁mock􏳂
􏲿route_plan_identifier􏳀


􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬element_id􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬map_index􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔map_ref_id􏷓􏶮string􏶭􏶬entry_point_id􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔lane_neighbor_annotation􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬route_identifier􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬target_identifier􏶫
􏶨mock􏶧􏶦mock􏶥􏶘+􏶙􏶰􏶯􏷔route_plan_identifier􏷓􏶮string􏶭􏶬chunk_identifier􏶫













􏳃Lane information within a particular route􏳄
􏳁Lane information for a single element from a translated route􏳂
􏲿lane_info􏳀

􏶨the identity of the lane􏶧
􏶦derived from the lane sequence of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_info􏷓􏶮map_ref_id􏶭􏲷mlp􏲸􏲷lane_graph􏲸􏶬map ref􏶫
􏲹mlp/messages/map_ref_id􏲺
􏲱mlp/messages/map_ref_id􏲲

􏶨Lane information within a particular route􏶧
􏶦Lane information for a single element from a translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_info􏷓􏶮lane_neighbor_annotation􏶭􏲷route_planning􏲸􏶬annotation􏶫
􏲹route_planner/messages/route_plan􏲺
􏲱route_planner/messages/route_planner_messages􏲲

􏶊The various event states that can occur on lanes􏶉
􏶈The regeneration framework will tag events to particular lane􏶇
􏵮􏵯􏶀event action􏶋
􏶆regenerate􏶅􏶂causes the regenerate trigger to be called on the corresponding lane􏶁
􏶆none􏶅􏶂causes nothing to trigger for the corresponding lane􏶁

􏶊The reason we are regenerating on a particular lane􏶉
􏶈Primarily used to aid in debugging􏶇
􏵮􏵯􏶀regeneration reason􏶋
􏶆distance􏶅􏶂regenerating because of distance􏶁
􏶆submap loop􏶅􏶂regenerating because of submap loops􏶁
􏶆none􏶅􏶂no reason to regenerate􏶁

􏶊An interpretation on how to process the route based on the state of the event view􏶉
􏶈We keep an interval over the route in order to determine what events need to be processed
however, a new route can't have a starting position in the interval (because no previous lane was visited)
and an expired route has no ending position in the interval (because the progress index may no longer correlate to the route)
we observe the optionality of the event view to determine the contextual state of the route􏶇
􏵮􏵯􏶀route status􏶋
􏶆new route􏶅􏶂no previous lane was visited.  we can assume all lanes up to the current􏶁
􏶆existing route􏶅􏶂we have a previous and current lane giving us a valid interval over the route􏶁
􏶆expired􏶅􏶂no current lane is given.  we an assume all lanes from the previous to the end of the route􏶁
􏶆invalid􏶅􏶂we do not have a valid interval over the route at all􏶁

􏳃A lane with annotated event information􏳄
􏳁contains event information about the particular lane􏳂
􏲿lane_event􏳀

􏶨the lane that the event may occur on􏶧
􏶦derived from the annotation and lane sequence of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔lane_event􏷓􏶮lane_info􏶭􏶬lane􏶫

􏶨a regeneration event that will trigger when the lane is reached􏶧
􏶦a user callback will be made for the event of the given lane􏶥
􏶘+􏶙􏶰􏶯􏷔lane_event􏷓􏶮event_action􏶭􏶬entrance event􏶫􏶪event_action_none􏶩

􏶨Why we may be regenerating on a lane􏶧
􏶦provides explanation on why a regeneration event is present􏶥
􏶘+􏶙􏶰􏶯􏷔lane_event􏷓􏶮regeneration_reason􏶭􏶬reason􏶫􏶪regeneration_reason_none􏶩

􏳃the previously determined lane, and the new currently determined lane􏳄
􏳁creates an interval of lanes to evaluate for events.
This is a partially open interval (prev,curr]
Why are they optionals?
A new route has no previous index
If the car drives past the end of the route, there is no current index􏳂
􏲿event_view􏳀

􏶨The previous lane observed􏶧
􏶦interval end is open􏶥
􏶘+?􏶙􏶰􏶯􏷔event_view􏷓􏶮i32􏶭􏶬previous􏶫

􏶨The current lane observed􏶧
􏶦interval end is closed􏶥
􏶘+?􏶙􏶰􏶯􏷔event_view􏷓􏶮i32􏶭􏶬current􏶫

􏳃The sequence of regeneration events that occur along a route􏳄
􏳁The events will be triggered in the order of the sequence􏳂
􏲿event_annotated_route􏳀

􏶨A name for the route􏶧
􏶦This is mainly for debugging and experimentation
You can leave it blank􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮string􏶭􏶬name􏶫

􏶨The unique id of the route plan.􏶧
􏶦sourced from navigator􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮route_plan_identifier􏶭􏲷local_map􏲸􏲷internal􏲸􏲷serializable􏲸􏶬route_plan_id􏶫
􏲹local_map/libs/route/serializable/route_plan_identifier􏲺
􏲱local_map/libs/route/serializable/serializable_route_overlay􏲲

􏶨The regeneration events that should occur on the change of particular lanes􏶧
􏶦The change in lanes is expected to be in the same order that they appear in the original route.
The sequence may contain duplicate lanes.
We are simply taking an existing route, and tagging it with events􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮seq􏶭􏳟lane_event􏳠􏶬event_lanes􏶫

􏶨The interval of lanes that need to be evaluated for events􏶧
􏶦Uses the previous and current lanes observed to create an interval for evaluation.
The reason we do this, is because we may not evaluate every lane as we pass over them.
We need to make sure we don't forget to evaluate lanes that we have already passed over􏶥
􏶘+􏶙􏶰􏶯􏷔event_annotated_route􏷓􏶮event_view􏶭􏶬evaluation range􏶫







􏳃Testing input used to create lanes during experimentation􏳄
􏳁The lane creation input can be turned into a translated route's actual lane􏳂
􏲿lane_creation_input􏳀

􏶨a unique number to represent the submap a lane is in􏶧
􏶦converted to guid internally􏶥
􏶘+􏶙􏶰􏶯􏷔lane_creation_input􏷓􏶮i32􏶭􏶬submap_id􏶫􏶪0􏶩

􏶨The length of a particular lane􏶧
􏶦becomes the distance annotation of the lane􏶥
􏶘+􏶙􏶰􏶯􏷔lane_creation_input􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛􏶪0􏶩

􏳃Testing input used to annotate lanes􏳄
􏳁The marking input can be used to call the appropriate lane marking APIs􏳂
􏲿marking_input􏳀

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬exceeding accumulated distance􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬before exceeding accumulated distance􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬prior to loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬first lane loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬all lanes loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬after loop􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬submap transition􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬first􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬last􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬all􏶫􏶪false􏶩

􏶨use particular marking strategy when annotating a route􏶧
􏶦can be used during testing to mark based on an API􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮bool􏶭􏶬regen sla􏶫􏶪false􏶩

􏶨the distance to use when applying a marking strategy􏶧
􏶦not all marking strategies require a distance.
Multiple strategies will use the same distance.􏶥
􏶘+􏶙􏶰􏶯􏷔marking_input􏷓􏶮d􏶭􏶬distance􏶫􏵚meters􏵛􏶪0􏶩

􏳃Testing input used to create translated routes during experimentation􏳄
􏳁The route creation input can be turned into a translated route for testing with algorithms􏳂
􏲿route_creation_input􏳀

􏶨A name for the input􏶧
􏶦This is mainly for debugging and having test routes with particular names􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮string􏶭􏶬name􏶫

􏶨Each of the creation information needed for making lanes􏶧
􏶦Used to create each lane of the translated route􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮seq􏶭􏳟lane_creation_input􏳠􏶬lane_inputs􏶫

􏶨The marking strategies to use when annotating the route􏶧
􏶦This is mainly for debugging and having test routes with particular marking APIs called􏶥
􏶘+􏶙􏶰􏶯􏷔route_creation_input􏷓􏶮marking_input􏶭􏶬marking_strategy􏶫












