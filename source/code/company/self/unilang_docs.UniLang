

􏱭0􏱮􏱕􏱖􏱫A universal programming language􏱬
􏱥.readme/unilang-trimmed.png􏱦􏱣unilang logo􏱤􏱡unilang􏱢􏱓395􏱔􏱑112􏱒

􏱭1􏱮􏱕􏱖􏱫Introduction􏱬
􏱩unilang is a programming language that unifies software development practices into a single abstract model􏱪
􏱩it is a reconstructed approach on how we should use language to facilitate the creation and lifecycle of software􏱪􏱟􏱠􏱧􏱨
􏱩much like other GPLs, Unilang can be used to generate programs, as well as the source code of other languages􏱪􏱟􏱠􏱧􏱨
􏱩The design of the language allows for many other kinds of artifact creation􏱪􏱟􏱠􏱧􏱨
􏱩in fact, what you are reading now is generated from Unilang􏱪􏱟􏱠􏱧􏱨

􏱩unilang is the unification of programming concepts into a single programming model used for driving software development􏱪􏱟quick_definition􏱠􏱧this raises more questions than answers.  what is a programming concept?􏱨
􏱩a conceptual model is used to raise the design and implementation abstraction above other high level languages􏱪􏱟􏱠􏱧􏱨
􏱩you can use Unilang to transcompile down to other languages and data formats􏱪􏱟􏱠􏱧􏱨
􏱩in fact, what you are reading now was generated from Unilang􏱪􏱟􏱠􏱧􏱨
􏱩unilang has an abundance of interesting code transformations and static analysis techniques􏱪􏱟􏱠􏱧􏱨
􏱩it was built to improve the efficiency of the modern software engineer􏱪􏱟􏱠􏱧􏱨
􏱩the language empowers a level of engineering discipline that users would not be able to sustain in other languages􏱪􏱟􏱠􏱧􏱨

􏱭1􏱮􏱕􏱖􏱫Language Design􏱬
􏱩in this section, we will discuss the theory of what a programming language should look like and how it has shaped the design of unilang.􏱪
􏱩we show unilang's position within the realm of existing programming languages􏱪

􏱭2􏱮􏱕􏱖􏱫The hierarchy of language􏱬
􏱩consider the current language abstractions within the software engineering domain􏱪
􏱩unilang and its conceptual model are placed above these high level languages􏱪
􏱥.readme/language-abstraction.png􏱦􏱣software engineering language abstraction with unilang placed at the top􏱤
􏱩unilang can transcompile down to other languages􏱪

􏱭2􏱮􏱕􏱖􏱫The structure of language􏱬
􏱩many programming languages represent their syntactic structure as an abstract syntax tree􏱪
􏱩other languages like Lisp and its derivations choose nested lists􏱪
􏱩the structure of unilang is a composed set of algebraic data types􏱪
􏱥.readme/choosing-structure.png􏱦􏱣choosing the unilang structure􏱤
􏱩this is a subtle but important distinction􏱪
􏱩an ADT models the concise structure and shape of programming concepts􏱪
􏱩this allows us to work backwards and enable programmers to efficiently populate this structure􏱪
􏱩trying to contort a variety of programming concepts syntactically, and then extracting them out with regular expressions and grammars into generic data structures such as trees and lists has proven insufficient for semantic analysis􏱪
􏱩its the reason that parsing errors are often confusing and unhelpful􏱪
􏱩its the reason that community tooling on code transformation is often limited􏱪
􏱩most importantly, its the reason a language's evolution tends to stagnate as more abstract concepts are squeezed into an existing syntax and grammar􏱪

􏱭2􏱮􏱕􏱖􏱫The look of language􏱬
􏱩this is where we talk about discrete infinity􏱪