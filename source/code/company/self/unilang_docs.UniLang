􏱭0􏱮􏱕􏱖􏱫A universal programming language􏱬
􏱥.readme/unilang-trimmed.png􏱦􏱣Unilang􏱤􏱡Unilang􏱢􏱓395􏱔􏱑112􏱒

􏱭1􏱮􏱕􏱖􏱫Introduction􏱬
􏱩welcome to the Unilang language􏱪􏱟􏱠􏱧􏱨
􏱩we'll start by getting you acquainted with the big picture􏱪􏱟􏱠􏱧􏱨
􏱩unilang is a tool for writing software􏱪􏱟􏱠􏱧􏱨
􏱩Like all tools in software, it takes an input and produces an output􏱪􏱟􏱠􏱧􏱨
􏱩the scope of unilang's input is ambitiously defined as *everything a software engineer can express when accomplishing a task*􏱪􏱟􏱠􏱧􏱨
􏱩the output of unilang is defined as *all of the chosen artifacts that facilitate accomplishing that task*􏱪􏱟􏱠􏱧􏱨
􏱩From a programming language perspective, we unify an encode all of software development into a single abstract model􏱪􏱟􏱠􏱧􏱨
􏱩this abstract model is used to create various software artifacts􏱪􏱟􏱠􏱧􏱨
􏱥.readme/unilang_overview.png􏱦􏱣very high level overview of unilang􏱤
􏱩this explanation may appear imprecise􏱪􏱟􏱠􏱧􏱨
􏱩Consider the transformation process of source code to other languages􏱪􏱟􏱠􏱧􏱨
􏱩however, the scope of these other languages often don't entail all of the work that needs to be done for software􏱪􏱟􏱠􏱧􏱨
􏱥.readme/typical_gpl_overview.png􏱦􏱣high level overview of a GPL􏱤
􏱩much like other general purpose programming languages (GPLs), Unilang can be used to generate programs for any domain􏱪􏱟􏱠􏱧􏱨
􏱩A key feature of unilang is that it can target source code of other languages􏱪􏱟􏱠􏱧􏱨
􏱩in this regard, Unilang will act as a transcompiler to other programming languages􏱪􏱟􏱠􏱧􏱨
􏱥.readme/unilang_as_a_transcompiler.png􏱦􏱣unilang as a transcompiler􏱤
􏱩There are many other types of artifacts that should be created alongside software􏱪􏱟􏱠􏱧􏱨
􏱩unilang facilitates the creation of all related artifacts􏱪􏱟􏱠􏱧􏱨
􏱥.readme/unilang_to_many_artifacts.png􏱦􏱣unilang to many artifacts􏱤
􏱩what you are reading right now was generated from Unilang􏱪􏱟􏱠􏱧􏱨