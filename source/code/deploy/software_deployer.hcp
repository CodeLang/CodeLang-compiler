class
❪string❫
❪iostream❫
⚯
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/deskstock/documentation_getter"❫

❪"code/utilities/pdf/pdf_settings"❫
❪"code/utilities/pdf/pdf_creator"❫
⚞⚟

◀public: static▶ void ☀Deploy()❰

    //get all the debian packages out of this repository
    auto exported_path = Bazel_Working_Directory() + "/bazel-bin/code";
    auto debs = Recursively_Get_All_Paths_To_Non_Symlink_Deb_Files_Of_Path(exported_path);
    
    
      //go to repo we are adding things to
      std::string repo_path = Full_Path_To_Desktop() + "luxe.github.com";
      Set_Path(repo_path);
  
      Deploy_Deskstock(debs);
    
❱


◀private: static▶ void ☀Deploy_Deskstock(std::vector<std::string> const& debs)❰

    Create_Path_If_It_Doesnt_Already_Exist_And_Step_Into_It("deskstock");

    //find deskstock debs
    auto specific_debs = Filter(debs,[&](std::string const& file){
        return File_Name_Starts_With(file,"deskstock_");
    });
    
    //create pdf documentation
    auto doc_structure = Documentation_Getter::Get();
    Pdf_Settings pdf_settings;
    pdf_settings.latex_template = "temp_latex.tex";
    pdf_settings.md_format = "temp_markdown.md";
    pdf_settings.resulting_pdf = "deskstock.pdf";
    Pdf_Creator::Create_Pdf(doc_structure,pdf_settings);
    
    for (auto it: specific_debs){
        std::cout << it << std::endl;
    }
❱
