class
❪string❫
❪iostream❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/structure/model/structure"❫
⚯
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/deskstock/deskstock_documentation_getter"❫
❪"code/tools/mario/mario_documentation_getter"❫
❪"code/tools/noogle/noogle_documentation_getter"❫
❪"code/transcompilers/unilang/main/program_input"❫

❪"code/utilities/pdf/pdf_settings"❫
❪"code/utilities/pdf/pdf_creator"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/utilities/git-related/git_updater"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/utilities/filesystem/files/creating/lib"❫
⚞⚟

◀public: static▶ void ☀Deploy()❰

    //get all the debian packages out of this repository
    auto exported_path = Bazel_Working_Directory() + "/bazel-bin/code";
    auto debs = Recursively_Get_All_Paths_To_Non_Symlink_Deb_Files_Of_Path(exported_path);
    
    
      //go to repo we are adding things to
      std::string repo_path = Full_Path_To_Desktop() + "luxe.github.com";
      Set_Path(repo_path);
  
      {
        auto doc_structure = Deskstock_Documentation_Getter::Get();
        Deploy_Program(debs,doc_structure,"deskstock");
      }
      
      {
        auto doc_structure = Noogle_Documentation_Getter::Get();
        Deploy_Program(debs,doc_structure,"noogle");
      }
      
      {
        auto doc_structure = Mario_Documentation_Getter::Get();
        Deploy_Program(debs,doc_structure,"mario");
      }
      
      Git_Updater::Update_All_Changes("redeploy");
      
      //https://www.guyrutenberg.com/2016/07/15/creating-a-personal-apt-repository-using-dpkg-scanpackages/
      //https://askubuntu.com/questions/71510/how-do-i-create-a-ppa/71516#71516
      //https://assafmo.github.io/2019/05/02/ppa-repo-hosted-on-github.html
      //https://github.com/assafmo/ppa/blob/master/update.sh
    
❱

◀private: static▶ void ☀Deploy_Program(std::vector<std::string> const& debs, Structure const& doc_structure, std::string const& program_name)❰

    std::string folder_name = "releases/" + program_name;
    Create_Path_And_Temporarily_Move_To_It_To_Call_Function(folder_name,[&](){
    
        //find program's debs and copy them over
        auto specific_debs = Filter(debs,[&](std::string const& file){
            auto deb_files_should_start_with = program_name + "_";
            return File_Name_Starts_With(file,deb_files_should_start_with);
        });
        Copy_Files_To_Current_Directory(specific_debs);
        
        Create_Path_And_Temporarily_Move_To_It_To_Call_Function("docs",[&](){
          //create pdf documentation
          Pdf_Settings pdf_settings;
          pdf_settings.latex_template = "temp_latex.tex";
          pdf_settings.md_format = "temp_markdown.md";
          pdf_settings.resulting_pdf = program_name + ".pdf";
          pdf_settings.font_size = 10;
          Pdf_Creator::Create_Pdf(doc_structure,pdf_settings);
          
          std::string markdown_file_name = program_name + ".md";
          std::string html_file_name = program_name + ".html";
          Create_Markdown(doc_structure,markdown_file_name);
          
          // create html file
          execute("pandoc " + program_name + ".md --from markdown --to html5 > " + html_file_name);
          
          for (auto it: specific_debs){
              std::cout << it << std::endl;
          }
        });
        
        Create_Packages_File(program_name);
    });
❱



◀private: static▶ void ☀Create_Packages_File()❰
  
  //why does this create a different file each time?
  execute("dpkg-scanpackages -m . | gzip -c > Packages.gz");
❱

◀private: static▶ void ☀Create_Packages_File(std::string const& program_name)❰
  
  std::string content = "deb [trusted=yes] https://github.com/luxe/luxe.github.com/raw/master/releases/" + program_name + " /";
  std::string file_name = program_name + ".list";
  Write_To_File(file_name,content);
❱

◀private: static▶ void ☀Create_Markdown(Structure const& structure, std::string const& file_name)❰

    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = false;
    
    auto result = Markdown_Str_Getter::Get(structure,contributors,md_settings);
    Write_To_File(file_name,result);
    
❱

