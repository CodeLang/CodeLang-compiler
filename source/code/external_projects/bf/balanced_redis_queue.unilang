􏶞o􏶟
􏷲a balanced redis queue􏷱
􏷰a balanced redis queue is an implementation of a queue data structure which internally uses multiple redis nodes to distribute the data across the cluster.
Its important to know that the lifetime of the queue persists before and after the queue data structure is created (since it exists in redis)
Therefore, two redis queues with the same name, would in fact be the same underlying redis queues􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞instance􏷝􏷞shard􏷝

􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦java.util.Set􏷥
􏷤􏷣􏷦java.util.HashSet􏷥
􏷤􏷣􏷦java.util.Iterator􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisPool􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥
􏷤􏷣􏷦build.buildfarm.common.StringVisitor􏷥

􏲏􏲐􏲍build.buildfarm.instance.shard.JedisClusterFactory􏲎
􏲏􏲐􏲍build.buildfarm.instance.shard.RedisQueue􏲎
􏲏􏲐􏲍build.buildfarm.instance.shard.BalancedRedisQueue􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍java.util.ArrayList􏲎
􏲏􏲐􏲍java.util.Arrays􏲎
􏲏􏲐􏲍org.junit.Test􏲎
􏲏􏲐􏲍org.junit.runner.RunWith􏲎
􏲏􏲐􏲍org.junit.runners.JUnit4􏲎
􏲏􏲐􏲍java.lang.Thread􏲎
􏲏􏲐􏲍java.util.concurrent.TimeUnit􏲎
􏲏􏲐􏲍java.lang.RuntimeException􏲎
􏲏i􏲐􏲍com.google.common.truth.Truth.assertThat􏲎
􏲏􏲐􏲍build.buildfarm.common.StringVisitor􏲎


􏶨the unique name of the queue􏶧
􏶦the name is used as a template for the internal queues distributed across nodes
hashtags are added to this base name􏶥
􏶘-􏶙􏶰c􏶯􏶮string􏶭􏶬name􏶫􏶪􏶩

􏶨internal queues used to distribute data across redis nodes􏶧
􏶦although these are multiple queues, the balanced redis queue treats them as one in its interface􏶥
􏶘-􏶙􏶰􏶯􏶮List<RedisQueue>􏶭􏶬queues􏶫􏶪new ArrayList<RedisQueue>()􏶩

􏶨the current queue to act push on􏶧
􏶦used in a round-robin fashion to ensure an even distribution of pushes and appropriate ordering of pops􏶥
􏶘-􏶙􏶰􏶯􏶮i􏶭􏶬current push queue􏶫􏶪0􏶩

􏶨the current queue to act pop on􏶧
􏶦used in a round-robin fashion to ensure an even distribution of pushes and appropriate ordering of pops􏶥
􏶘-􏶙􏶰􏶯􏶮i􏶭􏶬current pop queue􏶫􏶪0􏶩

􏷐constructor􏷏
􏶠construct a named redis queue with an established redis cluster􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒balanced redis queue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄redis􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶴
    this.name = unhashedName(name);
    List<String> hashtags = RedisNodeHashes.getEvenlyDistributedHashesWithFallback(redis);
    createHashedQueues(redis,this.name,hashtags);
􏶳
􏴱derive hashes constructs without error􏴲
􏲝the queue can be constructed with a valid cluster instance and name􏲞
􏲛the queue is throwing an exception upon construction􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    
    //ACT
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
􏴮

􏷐constructor􏷏
􏶠construct a named redis queue with an established redis cluster􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒balanced redis queue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄redis􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶜􏶝􏷆List<String>􏷅􏷄hashtags􏷃􏷀hashtags to distribute queue data􏶿
􏶴
    this.name = unhashedName(name);
    createHashedQueues(redis,this.name,hashtags);
    
􏶳
􏴱create hashes constructs without error􏴲
􏲝the queue can be constructed with a valid cluster instance and name􏲞
􏲛the queue is throwing an exception upon construction􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    List<String> hashtags = RedisNodeHashes.getEvenlyDistributedHashes(redis);
    
    //ACT
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test",hashtags);
􏴮

􏷐push a value onto the queue􏷏
􏶠adds the value into one of the internal backend redis queues􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒push􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to push onto the queue􏶿
􏶴
    queues.get(currentPushQueue).push(val);
    currentPushQueue = nextQueueInRoundRobin(currentPushQueue);
􏶳
􏴱push without error􏴲
􏲝the queue can have a value pushed onto it􏲞
􏲛the queue is throwing an exception upon push􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
􏴮
􏴱push different without error􏴲
􏲝the queue can have the different values pushed onto it􏲞
􏲛the queue is throwing an exception upon pushing different values􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
􏴮
􏴱push same without error􏴲
􏲝the queue can have the same values pushed onto it􏲞
􏲛the queue is throwing an exception upon pushing the same values􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("foo");
􏴮
􏴱push many􏴲
􏲝the queue can have many values pushed into it􏲞
􏲛the queue is throwing an exception upon pushing many values􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    for (int i = 0; i < 1000; ++i){
        queue.push("foo" + String.valueOf(i));
    }
􏴮
􏴱push increases size􏴲
􏲝the queue size increases as elements are pushed􏲞
􏲛the queue size is not accurately reflecting the pushes􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT / ASSERT
    assertThat(queue.size()).isEqualTo(0);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(1);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(2);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(3);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(4);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(5);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(6);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(7);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(8);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(9);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(10);
􏴮

􏷐pop a value off of the queue􏷏
􏶠takes the tail value at the end of the conceptually balanced queue􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop􏷑
􏶾string􏶽􏶼pop_val􏶻􏶺the popped value􏶹
􏶴
    //as a best effort, skip popping the current queue if
    //there is the possibility of another internal queue having data
    int startQueue = currentPopQueue;
    while (queues.get(currentPopQueue).empty()){
        currentPopQueue = nextQueueInRoundRobin(currentPopQueue);
        if (startQueue == currentPopQueue){
            break;
        }
    }
    
    // we either found a queue that was not empty,
    // or we did a full trip around all the queues
    // and discovered all of them were empty.
    // either way, we will attempt to pop where
    // we ended up.
    String val = queues.get(currentPopQueue).pop();
    currentPopQueue = nextQueueInRoundRobin(currentPopQueue);
    return val;
􏶳
􏴱value can be popped􏴲
􏲝the queue can have a value pushed and popped off􏲞
􏲛the queue was unable to push and pop the same value off􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    String val = queue.pop();
    
    //ASSERT
    assertThat(val).isEqualTo("foo");
􏴮
􏴱value popped in order􏴲
􏲝the queue can have a value pushed and popped off in the correct order􏲞
􏲛the queue was unable to push and pop values in the correct order􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("element 1");
    queue.push("element 2");
    queue.push("element 3");
    queue.push("element 4");
    queue.push("element 5");
    queue.push("element 6");
    String element1 = queue.pop();
    String element2 = queue.pop();
    String element3 = queue.pop();
    String element4 = queue.pop();
    String element5 = queue.pop();
    String element6 = queue.pop();
    
    //ASSERT
    assertThat(element1).isEqualTo("element 1");
    assertThat(element2).isEqualTo("element 2");
    assertThat(element3).isEqualTo("element 3");
    assertThat(element4).isEqualTo("element 4");
    assertThat(element5).isEqualTo("element 5");
    assertThat(element6).isEqualTo("element 6");
􏴮
􏴱pop decreases size􏴲
􏲝the queue size decreases as elements are popped􏲞
􏲛the queue size is not accurately reflecting the pops􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT / ASSERT
    queue.push("foo");
    queue.push("foo");
    queue.push("foo");
    queue.push("foo");
    queue.push("foo");
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(6);
    queue.pop();
    assertThat(queue.size()).isEqualTo(5);
    queue.pop();
    assertThat(queue.size()).isEqualTo(4);
    queue.pop();
    assertThat(queue.size()).isEqualTo(3);
    queue.pop();
    assertThat(queue.size()).isEqualTo(2);
    queue.pop();
    assertThat(queue.size()).isEqualTo(1);
    queue.pop();
    assertThat(queue.size()).isEqualTo(0);
􏴮

􏷐remove element from queue􏷏
􏶠removes an element from a queue and specifies whether it was removed􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to remove􏶿
􏶾bool􏶽􏶼was removed􏶻􏶺whether or not the value was removed􏶹
􏶴
    for (RedisQueue queue: queues){
        if (queue.remove(val)){
            return true;
        }
    }
    return false;
􏶳
􏴱false on empty􏴲
􏲝removing returns false because the queue is empty and there is nothing to remove􏲞
􏲛the queue was either not empty, or an error occured while removing from an empty queue􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    Boolean success = queue.remove("foo");
    
    //ASSERT
    assertThat(success).isFalse();
􏴮
􏴱false when value is missing􏴲
􏲝removing returns false because the queue does not contain the value to be removed􏲞
􏲛the queue was either contained the value or incorrectly reported a deletion􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    Boolean success = queue.remove("baz");
    
    //ASSERT
    assertThat(success).isFalse();
􏴮
􏴱true when value exists􏴲
􏲝removing returns true because the queue contained the value before removing􏲞
􏲛the queue either did not contain the value or incorrectly reported a deletion􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    Boolean success = queue.remove("bar");
    
    //ASSERT
    assertThat(success).isTrue();
􏴮
􏴱size changes when value is removed􏴲
􏲝removing the value decreases the size􏲞
􏲛the size does not accurately reflect the removal􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    queue.remove("bar");
    
    //ASSERT
    assertThat(queue.size()).isEqualTo(2);
􏴮
􏴱does not remove multiple􏴲
􏲝remove does not remove all values that match (only 1)􏲞
􏲛remove is no longer removing a single element􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("foo");
    queue.push("bar");
    queue.push("foo");
    queue.push("foo");
    queue.remove("foo");
    
    //ASSERT
    assertThat(queue.size()).isEqualTo(4);
􏴮

􏷐remove all elements that match from queue􏷏
􏶠removes all matching elements from the queue and specifies whether it was removed􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove all􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to remove􏶿
􏶾bool􏶽􏶼was removed􏶻􏶺whether or not the value was removed􏶹
􏶴
    boolean removed = false;
    for (RedisQueue queue: queues){
        if (queue.removeAll(val)){
            removed = true;
        }
    }
    return removed;
􏶳
􏴱false on empty􏴲
􏲝removing returns false because the queue is empty and there is nothing to remove􏲞
􏲛the queue was either not empty, or an error occured while removing from an empty queue􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    Boolean success = queue.removeAll("foo");
    
    //ASSERT
    assertThat(success).isFalse();
􏴮
􏴱false when value is missing􏴲
􏲝removing returns false because the queue does not contain the value to be removed􏲞
􏲛the queue was either contained the value or incorrectly reported a deletion􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    Boolean success = queue.removeAll("baz");
    
    //ASSERT
    assertThat(success).isFalse();
􏴮
􏴱true when value exists􏴲
􏲝removing returns true because the queue contained the value before removing􏲞
􏲛the queue either did not contain the value or incorrectly reported a deletion􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    Boolean success = queue.removeAll("bar");
    
    //ASSERT
    assertThat(success).isTrue();
􏴮
􏴱size changes when value is removed􏴲
􏲝removing the value decreases the size􏲞
􏲛the size does not accurately reflect the removal􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    queue.removeAll("bar");
    
    //ASSERT
    assertThat(queue.size()).isEqualTo(2);
􏴮
􏴱does remove multiple􏴲
􏲝remove removes all values that match (not just 1)􏲞
􏲛remove is no longer removing all matching elements􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("foo");
    queue.push("bar");
    queue.push("foo");
    queue.push("foo");
    queue.removeAll("foo");
    
    //ASSERT
    assertThat(queue.size()).isEqualTo(1);
􏴮

􏷐clear the queue􏷏
􏶠delete all elements in the queue so that it is empty􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒clear􏷑
􏶴
    for (RedisQueue queue : queues) {
        queue.clear();
    }
􏶳
􏴱clearing empty is safe􏴲
􏲝it is safe to clear an already empty queue􏲞
􏲛clearing a queue should not fail􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.clear();
􏴮
􏴱clearing a full queue is safe􏴲
􏲝it is safe to clear a  queue of values􏲞
􏲛clearing a queue should not fail􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    queue.clear();
􏴮
􏴱clearing sets size to zero􏴲
􏲝clearing a queue sets its size to zero􏲞
􏲛clearing a queue does not reflect the appropriate size􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baz");
    queue.clear();
    
    //ASSERT
    assertThat(queue.size()).isEqualTo(0);
􏴮

􏷐pop element into another queue􏷏
􏶠this pops the element from one queue and pushes it onto another queue
it will wait indefinitely until the thread is interrupted
null is returned if the thread is interrupted􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop into􏷑
􏶜􏶝􏷆RedisQueue􏷅􏷄into queue􏷃􏷀the queue to obtain the popped the value􏶿
􏶾string􏶽􏶼val􏶻􏶺the value of the transfered element.  null if the thread was interrupted􏶹
􏶴
    String val = queues.get(currentPopQueue).popInto(intoQueue);
    currentPopQueue = nextQueueInRoundRobin(currentPopQueue);
    return val;
􏶳
􏴱transfer item effects sizes􏴲
􏲝transferring items changes the size of the two queues􏲞
􏲛the queue sizes do not reflect the transfer􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue1 = new BalancedRedisQueue(redis,"queue-1");
    RedisQueue queue2 = new RedisQueue(redis,"queue-2");
    
    //ACT
    queue1.push("foo");
    queue1.popInto(queue2);
    
    //ASSERT
    assertThat(queue1.size()).isEqualTo(0);
    assertThat(queue2.size()).isEqualTo(1);
􏴮
􏴱transfer large queue􏴲
􏲝transferring items changes the size of the two queues􏲞
􏲛the queue sizes do not reflect the transfer􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue1 = new BalancedRedisQueue(redis,"queue-1");
    RedisQueue queue2 = new RedisQueue(redis,"queue-2");
    
    //ACT
    for (int i = 0; i < 1000; ++i){
        queue1.push("foo" + String.valueOf(i));
    }
    for (int i = 0; i < 1000; ++i){
        queue1.popInto(queue2);
    }
    
    //ASSERT
    assertThat(queue1.size()).isEqualTo(0);
    assertThat(queue2.size()).isEqualTo(1000);
    
    for (int i = 0; i < 1000; ++i){
        assertThat(queue2.pop()).isEqualTo("foo" + String.valueOf(i));
    }
􏴮
􏴱transfer item effects sizes with delayed push􏴲
􏲝transferring items changes the size of the two queues (even when the initial push is delayed)􏲞
􏲛the queue sizes do not reflect the transfer􏲜
􏴭
    // ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue1 = new BalancedRedisQueue(redis, "queue-1");
    RedisQueue queue2 = new RedisQueue(redis, "queue-2");
    
    // ACT
    //start a delayed push
    //we do this because internally
    //the implementation may have a timeout while it checks for thread interruptions
    //timeouts had caused an NPE, which this test was written for when fixing.
    Thread push = new Thread(() -> {
                try {
                  TimeUnit.SECONDS.sleep(2);
                  queue1.push("foo");
                }
                catch(Exception e) {
                    throw new RuntimeException(e);
                }
              });
    push.start();
    
    //waiting to pop
    Thread popInto = new Thread(() -> queue1.popInto(queue2));
    popInto.start();
    push.join();
    popInto.join();
    
    // ASSERT
    assertThat(queue1.size()).isEqualTo(0);
    assertThat(queue2.size()).isEqualTo(1);
􏴮

􏷐pop element into another queue􏷏
􏶠this pops the element from one queue and pushes it onto another queue
it will wait indefinitely until the thread is interrupted
null is returned if the thread is interrupted􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop into􏷑
􏶜􏶝􏷆BalancedRedisQueue􏷅􏷄into queue􏷃􏷀the queue to obtain the popped the value􏶿
􏶾string􏶽􏶼val􏶻􏶺the value of the transfered element.  null if the thread was interrupted􏶹
􏶴
    String val = queues.get(currentPopQueue).popInto(intoQueue.getInternalQueue(currentPopQueue));
    currentPopQueue = nextQueueInRoundRobin(currentPopQueue);
    return val;
􏶳

􏷐get the current pop queue􏷏
􏶠get the queue that the balanced queue intends to pop from next􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get current pop queue􏷑
􏶾RedisQueue􏶽􏶼current pop queue􏶻􏶺the queue that the balanced queue intends to pop from next􏶹
􏶴
    return queues.get(currentPopQueue);
􏶳

􏷐get the current pop queue index􏷏
􏶠get the index of the queue that the balanced queue intends to pop from next􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get current pop queue index􏷑
􏶾i􏶽􏶼current pop queue index􏶻􏶺the index of the queue that the balanced queue intends to pop from next􏶹
􏶴
    return currentPopQueue;
􏶳

􏷐get queue at index􏷏
􏶠get the internal queue at the specified index􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒get internal queue􏷑
􏶜􏶝􏷆i􏷅􏷄index􏷃􏷀the index to the internal queue (must be in bounds)􏶿
􏶾RedisQueue􏶽􏶼internal queue􏶻􏶺the internal queue found at that index􏶹
􏶴
    return queues.get(index);
􏶳



􏷐get name􏷏
􏶠get the name of the queue.  this is the redis key used as base name for internal queues􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get name􏷑
􏶾string􏶽􏶼name􏶻􏶺the base name of the queue􏶹
􏶴
    return name;
􏶳
􏴱name is stored􏴲
􏲝the name can be received􏲞
􏲛name does not match what it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"queue_name");
    
    //ACT
    String name = queue.getName();
    
    //ASSERT
    assertThat(name).isEqualTo("queue_name");
􏴮
􏴱name has hashtag removed front􏴲
􏲝the name is stored without a hashtag􏲞
􏲛name does not match what it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"{hash}queue_name");
    
    //ACT
    String name = queue.getName();
    
    //ASSERT
    assertThat(name).isEqualTo("queue_name");
􏴮
􏴱name has hashtag removed back􏴲
􏲝the name is stored without a hashtag􏲞
􏲛name does not match what it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"queue_name{hash}");
    
    //ACT
    String name = queue.getName();
    
    //ASSERT
    assertThat(name).isEqualTo("queue_name");
􏴮
􏴱name has hashtag removed middle􏴲
􏲝the name is stored without a hashtag􏲞
􏲛name does not match what it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"queue_{hash}name");
    
    //ACT
    String name = queue.getName();
    
    //ASSERT
    assertThat(name).isEqualTo("queue_name");
􏴮
􏴱name has hashtag removed front back􏴲
􏲝the name is stored without a hashtag􏲞
􏲛name does not match what it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"{hash}queue_name{hash}");
    
    //ACT
    String name = queue.getName();
    
    //ASSERT
    assertThat(name).isEqualTo("queue_name");
􏴮

􏷐peek the next queue value􏷏
􏶠similar to a pop, peek will preserve the item in the queue.
be careful about peeking with multiple threads.
a thread that peeks cannot assume they will get that value when popping due to other threads􏶡
􏷘+􏷗􏴅Observer􏴆􏷒peek􏷑
􏶾string􏶽􏶼peek_val􏶻􏶺the peeked value􏶹
􏶴
    return queues.get(currentPopQueue).peek();
􏶳
􏴱value can be peeked􏴲
􏲝the correct value is peeked from the queue􏲞
􏲛the queue sizes do not reflect the transfer􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baze");
    String peeked = queue.peek();
    
    //ASSERT
    assertThat(peeked).isEqualTo("foo");
􏴮
􏴱peeking is idempotent􏴲
􏲝the same value is peeked from the queue if not popped􏲞
􏲛peeking is not idempotent􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    queue.push("bar");
    queue.push("baze");
    
    //ASSERT
    assertThat(queue.peek()).isEqualTo("foo");
    assertThat(queue.peek()).isEqualTo("foo");
    assertThat(queue.peek()).isEqualTo("foo");
􏴮

􏷐get size􏷏
􏶠checks the current length of the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒size􏷑
􏶾l􏶽􏶼length􏶻􏶺the current length of the queue􏶹
􏶴
    //the accumulated size of all of the queues
    return queues.stream().mapToInt(i -> (int)i.size()).sum();
􏶳
􏴱adjust push pop􏴲
􏲝size adjusts with push and pop􏲞
􏲛size is incorrectly reporting the expected queue size􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
   BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT / ASSERT
    assertThat(queue.size()).isEqualTo(0);
    queue.push("foo");
    assertThat(queue.size()).isEqualTo(1);
    queue.push("bar");
    assertThat(queue.size()).isEqualTo(2);
    queue.push("baz");
    assertThat(queue.size()).isEqualTo(3);
    queue.push("baz");
    assertThat(queue.size()).isEqualTo(4);
    queue.push("baz");
    assertThat(queue.size()).isEqualTo(5);
    queue.push("baz");
    assertThat(queue.size()).isEqualTo(6);
    queue.pop();
    assertThat(queue.size()).isEqualTo(5);
    queue.pop();
    assertThat(queue.size()).isEqualTo(4);
    queue.pop();
    assertThat(queue.size()).isEqualTo(3);
    queue.pop();
    assertThat(queue.size()).isEqualTo(2);
    queue.pop();
    assertThat(queue.size()).isEqualTo(1);
    queue.pop();
    assertThat(queue.size()).isEqualTo(0);
􏴮

􏷐check if the queue is empty􏷏
􏶠checks whether the queue is empty; i.e. has no elements􏶡
􏷘+􏷗􏴅Observer􏴆􏷒empty􏷑
􏶾bool􏶽􏶼is empty􏶻􏶺whether the queue is empty or not􏶹
􏶴
    for (RedisQueue queue : queues) {
        if (!queue.empty()){
            return false;
        }
    }
    return true;
􏶳
􏴱empty on construction􏴲
􏲝the queue is empty on construction􏲞
􏲛empty is incorrectly reporting the expected queue state􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    Boolean isEmpty = queue.empty();
    
    //ASSERT
    assertThat(isEmpty).isTrue();
􏴮
􏴱nonempty after pushes􏴲
􏲝the queue is not empty after pushing a value􏲞
􏲛empty is incorrectly reporting the expected queue state􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    queue.push("foo");
    Boolean isEmpty = queue.empty();
    
    //ASSERT
    assertThat(isEmpty).isFalse();
􏴮

􏷐visit each element in the queue􏷏
􏶠enacts a visitor over each element in the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒visit􏷑
􏶜􏶝􏷆StringVisitor􏷅􏷄visitor􏷃􏷀a visitor for each visited element in the queue􏶿
􏶴
    for (RedisQueue queue: queues){
        queue.visit(visitor);
    }
􏶳
􏴱check visit of each element􏴲
􏲝each element in the queue can be visited􏲞
􏲛we are unable to visit each element in the queue􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    queue.push("element 1");
    queue.push("element 2");
    queue.push("element 3");
    queue.push("element 4");
    queue.push("element 5");
    queue.push("element 6");
    queue.push("element 7");
    queue.push("element 8");
    
    // ACT
    List<String> visited = new ArrayList<String>();
    StringVisitor visitor =
        new StringVisitor() {
          public void visit(String entry) {
            visited.add(entry);
          }
        };
    queue.visit(visitor);
    
    //ASSERT
    assertThat(visited.size()).isEqualTo(8);
    assertThat(visited.contains("element 1")).isTrue();
    assertThat(visited.contains("element 2")).isTrue();
    assertThat(visited.contains("element 3")).isTrue();
    assertThat(visited.contains("element 4")).isTrue();
    assertThat(visited.contains("element 5")).isTrue();
    assertThat(visited.contains("element 6")).isTrue();
    assertThat(visited.contains("element 7")).isTrue();
    assertThat(visited.contains("element 8")).isTrue();
􏴮

􏷐check that the internal queues have evenly distributed the values􏷏
􏶠we are checking that the size of all the internal queues are the same
this means, the balanced queue will be evenly distributed on every n elements pushed, where n is the number of internal queues􏶡
􏷘+􏷗􏴅observer􏴆􏷒is evenly distributed􏷑
􏶾bool􏶽􏶼is evenly distributed􏶻􏶺whether or not the queues values are evenly distributed by internal queues􏶹
􏶴
    long size = queues.get(0).size();
    for (RedisQueue queue: queues){
        if (queue.size() != size){
            return false;
        }
    }
    return true;
􏶳
􏴱empty is evenly distributed􏴲
􏲝an empty queue is always already evenly distributed􏲞
􏲛evenly distributed is not working on the empty queue􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test");
    
    //ACT
    Boolean isEvenlyDistributed = queue.isEvenlyDistributed();
    
    //ASSERT
    assertThat(isEvenlyDistributed).isTrue();
􏴮
􏴱four nodes four hundred pushes is even􏴲
􏲝having 4 nodes and pushing 400 elements should show that the elements are evenly distributed􏲞
􏲛queue is not evenly distributing as it should􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    List<String> hashtags = Arrays.asList("node1","node2","node3","node4");
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test",hashtags);
    
    //ACT
    for (int i = 0; i < 400; ++i){
        queue.push("foo");
    }
    Boolean isEvenlyDistributed = queue.isEvenlyDistributed();
    
    //ASSERT
    assertThat(isEvenlyDistributed).isTrue();
􏴮
􏴱four nodes four hundred one pushes is not even􏴲
􏲝having 4 nodes and pushing 401 elements should show that the elements are not evenly distributed􏲞
􏲛queue is incorrectly reporting an even distribution􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    List<String> hashtags = Arrays.asList("node1","node2","node3","node4");
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test",hashtags);
    
    //ACT
    for (int i = 0; i < 401; ++i){
        queue.push("foo");
    }
    Boolean isEvenlyDistributed = queue.isEvenlyDistributed();
    
    //ASSERT
    assertThat(isEvenlyDistributed).isFalse();
􏴮
􏴱single node always evenly distributes􏴲
􏲝having a single node means the values are always evenly distributed over that node􏲞
􏲛queue is incorrectly reporting an even distribution􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    List<String> hashtags = Arrays.asList("single_node");
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test",hashtags);
    
    //ACT / ASSERT
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    
􏴮
􏴱two node example􏴲
􏲝this example shows how a two internal queues affect the even distribution􏲞
􏲛queue is incorrectly reporting an even distribution􏲜
􏴭
    //ARRANGE
    JedisCluster redis = JedisClusterFactory.createTest();
    List<String> hashtags = Arrays.asList("node_1","node_2");
    BalancedRedisQueue queue = new BalancedRedisQueue(redis,"test",hashtags);
    
    //ACT / ASSERT
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.push("foo");
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isFalse();
    queue.pop();
    assertThat(queue.isEvenlyDistributed()).isTrue();
􏴮

􏷐create multiple queues for each of the hashes given􏷏
􏶠create the multiple queues that will act as a single balanced queue􏶡
􏷘-􏷗􏴅Transformer􏴆􏷒create hashed queues􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄redis􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶜􏶝􏷆List<String>􏷅􏷄hashtags􏷃􏷀hashtags to distribute queue data􏶿
􏶴
    //create an internal queue for each of the provided hashtags
    for (String hashtag: hashtags){
        queues.add(new RedisQueue(redis,hashedName(name,hashtag)));
    }
    
    //if there were no hashtags, we'll create a single internal queue
    //so that the balanced redis queue can still function.
    //we'll use the basename provided to create the single internal queue without a hashtag
    if (hashtags.isEmpty()){
        queues.add(new RedisQueue(redis,name));
    }
􏶳

􏷐append the hashtag value to the base queue name􏷏
􏶠creates a valid queue name for one of the entire queues􏶡
􏷘-􏷗􏴅observer􏴆􏷒hashed name􏷑
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶜􏶝􏷆string􏷅􏷄hashtag􏷃􏷀a hashtag for an individual internal queue􏶿
􏶾string􏶽􏶼queue name􏶻􏶺a valid queue name for one of the internal queues􏶹
􏶴
    return name + "{" + hashtag + "}";
􏶳

􏷐remove any existing redis hashtag from the key name􏷏
􏶠creates a valid key name with any existing hashtags removed􏶡
􏷘-􏷗􏴅observer􏴆􏷒unhashed name􏷑
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶾string􏶽􏶼queue name􏶻􏶺a valid keyname without hashtags􏶹
􏶴
    return name.replaceAll("\\{.*?\\}", "");
􏶳

􏷐get the next queue in the round robin􏷏
􏶠if we are currently on the last queue it becomes the first queue􏶡
􏷘-􏷗􏴅Transformer􏴆􏷒next queue in round robin􏷑
􏶜􏶝􏷆i􏷅􏷄index􏷃􏷀current queue index􏶿
􏶾i􏶽􏶼adjusted current queue􏶻􏶺and adjusted val based on the current queue index􏶹
􏶴
    if (index >= queues.size()-1){
        return 0;
    }
    return index+1;
􏶳

􏷐get the previous queue in the round robin􏷏
􏶠if we are currently on the first queue it becomes the last queue􏶡
􏷘-􏷗􏴅Transformer􏴆􏷒previous queue in round robin􏷑
􏶜􏶝􏷆i􏷅􏷄index􏷃􏷀current queue index􏶿
􏶾i􏶽􏶼adjusted current queue􏶻􏶺and adjusted val based on the current queue index􏶹
􏶴
    if (index == 0){
        return queues.size()-1;
    }
    return index-1;
􏶳