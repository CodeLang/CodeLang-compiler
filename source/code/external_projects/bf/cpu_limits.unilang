􏶞o􏶟
􏷲CPU resource limitations imposed on specific actions􏷱
􏷰These resource limitations are often specified by the client (via: exec_properties), but ultimately validated and decided by the server
Restricting core count can be beneficial to preventing hungry actions from bogging down the worker and affecting neighboring actions that may be sharing the same hardware.
More importantly, being able to apply restrictions allows for a more efficient utilization of shared compute across different action profiles
For example, you could imagine a high core machine taking on highly parallel actions, while allowing lower core machines to take on single threaded actions
These restrictions will also encourage action writers to implement their actions more efficiently or instead opt for local execution as an alternative􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞worker􏷝

􏷤􏷣􏷦com.google.common.collect.LinkedHashMultimap􏷥
􏷤􏷣􏷦com.google.common.collect.Lists􏷥
􏷤􏷣􏷦com.google.common.collect.SetMultimap􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦build.buildfarm.common.redis.BalancedRedisQueue􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦java.util.HashSet􏷥
􏷤􏷣􏷦java.util.Map􏷥
􏷤􏷣􏷦java.util.Set􏷥
􏷤􏷣􏷦com.google.common.collect.ImmutableSet􏷥
􏷤􏷣􏷦com.google.common.collect.ImmutableSetMultimap􏷥
􏷤􏷣􏷦java.util.stream.Collectors􏷥

􏶨whether or not we perform cpu core limiting on the action􏶧
􏶦depending on the server implementation, we may skip any restrictions made to cores􏶥
􏶘+􏶙􏶰􏶯􏶮boolean􏶭􏶬limit􏶫􏶪􏶩

􏶨the minimum cpu cores required􏶧
􏶦client can suggests this though exec_properties􏶥
􏶘+􏶙􏶰􏶯􏶮i􏶭􏶬min􏶫􏶪􏶩

􏶨the maximum cpu cores required􏶧
􏶦client can suggests this though exec_properties􏶥
􏶘+􏶙􏶰􏶯􏶮i􏶭􏶬max􏶫􏶪􏶩
