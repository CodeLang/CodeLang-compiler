􏶞o􏶟
􏷲Finds operations based on search settings􏷱
􏷰Operations can be found based on different search queries depending on the context a caller has or wants to filter on􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞common􏷝
􏷤􏷣􏷦com.google.protobuf.Duration􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Deadline􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecuteRequest􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.ExecutionGrpc􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.RequestMetadata􏷥
􏷤􏷣􏷦build.bazel.remote.execution.v2.WaitExecutionRequest􏷥
􏷤􏷣􏷦build.buildfarm.common.Time􏷥
􏷤􏷣􏷦build.buildfarm.common.Watcher􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpoint􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.GrpcEndpointHandler􏷥
􏷤􏷣􏷦build.buildfarm.common.grpc.TracingMetadataUtils􏷥
􏷤􏷣􏷦build.buildfarm.instance.Instance􏷥
􏷤􏷣􏷦build.buildfarm.metrics.MetricsPublisher􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.FutureCallback􏷥
􏷤􏷣􏷦com.google.common.util.concurrent.ListenableFuture􏷥
􏷤􏷣􏷦com.google.longrunning.Operation􏷥
􏷤􏷣􏷦com.google.protobuf.util.Durations􏷥
􏷤􏷣􏷦io.grpc.Context􏷥
􏷤􏷣􏷦io.grpc.Status􏷥
􏷤􏷣􏷦io.grpc.stub.ServerCallStreamObserver􏷥
􏷤􏷣􏷦io.grpc.stub.StreamObserver􏷥
􏷤􏷣􏷦java.util.concurrent.CancellationException􏷥
􏷤􏷣􏷦java.util.concurrent.ScheduledExecutorService􏷥
􏷤􏷣􏷦java.util.concurrent.TimeUnit􏷥
􏷤􏷣􏷦java.util.logging.Level􏷥
􏷤􏷣􏷦java.util.logging.Logger􏷥
􏷤􏷣􏷦javax.annotation.Nullable􏷥
􏷤i􏷣􏷦com.google.common.util.concurrent.MoreExecutors.directExecutor􏷥
􏷤􏷣􏷦redis.clients.jedis.Jedis􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥
􏷤􏷣􏷦redis.clients.jedis.Response􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanParams􏷥
􏷤􏷣􏷦redis.clients.jedis.ScanResult􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦java.util.ArrayList􏷥


􏷐Finds operations based on search settings􏷏
􏶠Operations can be found based on different search queries depending on the context a caller has or wants to filter on􏶡
􏷘+s􏷗􏴅Observers􏴆􏷒find operations􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄cluster􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆FindOperationsSettings􏷅􏷄settings􏷃􏷀settings on how to find and filter operations􏶿
􏶾FindOperationsResults􏶽􏶼results􏶻􏶺results from searching for operations􏶹
􏶴
    FindOperationsResults results = new FindOperationsResults();
    results.operations = new ArrayList<>();
    
    //JedisCluster only supports SCAN commands with MATCH patterns containing hash-tags.
    //This prevents us from using the cluster's SCAN to traverse all of the operations.  
    //That's why we choose to scan each of the jedisNode's individually.
    cluster.getClusterNodes().values().stream()
        .forEach(
            pool -> {
              try (Jedis node = pool.getResource()) {
                findOperationNode(cluster,node,settings,results);
              }
            });

    return results;
􏶳

􏷐Scan all operation entires on existing Jedis node and keep ones that meet query requirements􏷏
􏶠Results are accumulated onto􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒find operation node􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄cluster􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆Jedis􏷅􏷄node􏷃􏷀a node of the cluster􏶿
􏶜􏶝􏷆FindOperationsSettings􏷅􏷄settings􏷃􏷀settings on what operations to find and keep􏶿
􏶜􏶝􏷆FindOperationsResults􏷅􏷄results􏷃􏷀accumulating results from performing a search􏶿
􏶴
    // iterate over all operation entries via scanning
    String cursor = "0";
    do {
      List<String> operationKeys = scanOperations(node,cursor,settings);
      collectOperations(cluster, operationKeys, settings.user, results);
      
    } while (!cursor.equals("0"));
􏶳

􏷐scan the operations list to obtain operation keys􏷏
􏶠scanning is done incrementally via a cursor􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒scan operations􏷑
􏶜􏶝􏷆Jedis􏷅􏷄node􏷃􏷀a node of the cluster􏶿
􏶜􏶝􏷆String􏷅􏷄cursor􏷃􏷀scan cursor􏶿
􏶜􏶝􏷆FindOperationsSettings􏷅􏷄settings􏷃􏷀settings on how to traverse the Operations􏶿
􏶾List<String>􏶽􏶼operation keys􏶻􏶺resulting operation keys from scanning􏶹
􏶴
    // construct query
    ScanParams params = new ScanParams();
    params.match(settings.operationQuery);
    params.count(settings.scanAmount);
    
    // perform scan iteration
    ScanResult scanResult = node.scan(cursor, params);
    if (scanResult != null) {
        cursor = scanResult.getCursor();
        return scanResult.getResult();
    }
    return new ArrayList<>();
􏶳

􏷐collect operations based on settings􏷏
􏶠populates results􏶡
􏷘-s􏷗􏴅Observers􏴆􏷒collect operations􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄cluster􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆List<String>􏷅􏷄operation keys􏷃􏷀keys to get operations from􏶿
􏶜􏶝􏷆String􏷅􏷄user􏷃􏷀the user operations to search for􏶿
􏶜􏶝􏷆FindOperationsResults􏷅􏷄results􏷃􏷀accumulating results from finding operations􏶿
􏶴
    for (String operationKey : operationKeys) {
      results.operations.add(operationKey);
    }
􏶳