􏶞o􏶟
􏷲a queue that is designed to hold particularly provisioned elements􏷱
􏷰a provisioned redis queue is an implementation of a queue data structure which internally uses a redis cluster to distribute the data across shards.
Its important to know that the lifetime of the queue persists before and after the queue data structure is created (since it exists in redis)
Therefore, two redis queues with the same name, would in fact be the same underlying redis queue

This redis queue comes with a list of required provisions
if the queue element does not meet the required provisions, it should not be stored in the queue

Provision queues are intended to represent particular operations that should only be processed by particular workers.
An example use case for this would be to have two dedicated provision queues for CPU and GPU operations.
CPU/GPU requirements would be determined through the remote api's command platform properties.
We designate provision queues to have a set of "required provisions" (which match the platform properties).
This allows the scheduler to distribute operations by their properties and allows workers to dequeue from particular queues􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞common􏷝􏷞redis􏷝

􏷤􏷣􏷦com.google.common.collect.LinkedHashMultimap􏷥
􏷤􏷣􏷦com.google.common.collect.Lists􏷥
􏷤􏷣􏷦com.google.common.collect.SetMultimap􏷥
􏷤􏷣􏷦java.util.List􏷥
􏷤􏷣􏷦build.buildfarm.common.redis.BalancedRedisQueue􏷥
􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥

􏲏􏲐􏲍build.buildfarm.instance.shard.JedisClusterFactory􏲎
􏲏􏲐􏲍build.buildfarm.common.redis.BalancedRedisQueue􏲎
􏲏􏲐􏲍build.buildfarm.common.StringVisitor􏲎
􏲏􏲐􏲍redis.clients.jedis.JedisCluster􏲎
􏲏􏲐􏲍org.junit.Test􏲎
􏲏􏲐􏲍java.util.List􏲎
􏲏􏲐􏲍java.util.ArrayList􏲎
􏲏􏲐􏲍org.junit.runner.RunWith􏲎
􏲏􏲐􏲍org.junit.runners.JUnit4􏲎
􏲏􏲐􏲍java.lang.Thread􏲎
􏲏􏲐􏲍java.util.concurrent.TimeUnit􏲎
􏲏􏲐􏲍java.lang.RuntimeException􏲎
􏲏􏲐􏲍java.io.IOException􏲎
􏲏􏲐􏲍java.util.function.Supplier􏲎
􏲏􏲐􏲍org.mockito.Mock􏲎
􏲏􏲐􏲍org.mockito.MockitoAnnotations􏲎
􏲏􏲐􏲍java.util.Arrays􏲎
􏲏i􏲐􏲍com.google.common.truth.Truth.assertThat􏲎
􏲏i􏲐􏲍org.mockito.Mockito.eq􏲎
􏲏i􏲐􏲍org.mockito.Mockito.mock􏲎
􏲏i􏲐􏲍org.mockito.Mockito.times􏲎
􏲏i􏲐􏲍org.mockito.Mockito.verify􏲎
􏲏i􏲐􏲍org.mockito.Mockito.when􏲎
􏲏i􏲐􏲍org.mockito.Mockito.any􏲎


􏶨the required provisions of the queue􏶧
􏶦The required provisions to allow workers and operations to be added to the queue.  
These often match the remote api's command platform properties􏶥
􏶘-􏶙􏶰􏶯􏶮SetMultimap<String, String>􏶭􏶬required provisions􏶫􏶪􏶩

􏶨the queue itself􏶧
􏶦a balanced redis queue designed to hold particularly provisioned elements􏶥
􏶘-􏶙􏶰􏶯􏶮BalancedRedisQueue􏶭􏶬queue􏶫􏶪􏶩

􏷐constructor􏷏
􏶠construct the provision queue􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒redis_provision_queue􏷑
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶜􏶝􏷆List<String>􏷅􏷄hashtags􏷃􏷀hashtags to distribute queue data􏶿
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄required provisions􏷃􏷀the required provisions of the queue􏶿
􏶴
    this.queue = new BalancedRedisQueue(name,hashtags);
    this.requiredProvisions = requiredProvisions;
􏶳
􏴱can construct􏴲􏴯regular􏴰
􏲝the object can be constructed􏲞
􏲛the object cannot be constructed􏲜
􏴭
    RedisProvisionQueue queue = new RedisProvisionQueue();
􏴮

􏷐checks required provisions􏷏
􏶠checks whether the provisions given fulfill all of the required provisions of the queue􏶡
􏷘+􏷗􏴅Observers􏴆􏷒is eligible􏷑
􏶜􏶝􏷆SetMultimap<String, String>􏷅􏷄provisions􏷃􏷀provisions to check that requirements are met􏶿
􏶾bool􏶽􏶼is eligible􏶻􏶺whether the queue is eligible based on the provisions given􏶹
􏶴
    for (String checkedProvision : requiredProvisions.asMap().keySet()) {
      if (!provisions.asMap().containsKey(checkedProvision)) {
        return false;
      }
    }
    return true;
􏶳

􏷐get queue􏷏
􏶠obtain the internal queue􏶡
􏷘+􏷗􏴅Getters􏴆􏷒queue􏷑
􏶾BalancedRedisQueue􏶽􏶼queue􏶻􏶺the internal queue􏶹
􏶴
    return queue;
􏶳

􏷐get provisions􏷏
􏶠obtain the required provisions􏶡
􏷘+􏷗􏴅Getters􏴆􏷒provisions􏷑
􏶾SetMultimap<String, String>􏶽􏶼provisions􏶻􏶺the required provisions􏶹
􏶴
    return requiredProvisions;
􏶳
