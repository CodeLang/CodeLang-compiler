􏶞o􏶟
􏷲a redis queue􏷱
􏷰a redis queue is an implementation of a queue data structure which internally uses a redis cluster to distribute the data across shards.
Its important to know that the lifetime of the queue persists before and after the queue data structure is created (since it exists in redis)
Therefore, two redis queues with the same name, would in fact be the same underlying redis queue􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞instance􏷝􏷞shard􏷝

good inspiration and alternatives
https://github.com/redisson/redisson

redis list operations:
https://redis.io/commands#list

might want to try a jedis mock:
https://github.com/fppt/jedis-mock


􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥

􏶨the unique name of the queue􏶧
􏶦the name is used by the redis cluster client to access the queue data.
If two queues had the same name, they would be instances of the same underlying redis queue􏶥
􏶘-􏶙􏶰c􏶯􏶮string􏶭􏶬name􏶫􏶪􏶩

􏶨the redis cluster client􏶧
􏶦given to the queue upon construction this is the redis cluster client that is used to access the sharded queue data􏶥
􏶘-􏶙􏶰c􏶯􏶮JedisCluster􏶭􏶬redis􏶫􏶪􏶩

􏷐constructor􏷏
􏶠construct a named redis queue with an established redis cluster􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒redis_queue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄redis􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶴
    this.redis = redis;
    this.name = name;
􏶳
􏴯constructs without error􏴰
􏲝the queue can be constructed with a valid cluster instance and name􏲞
􏲛the queue is throwing an exception upon construction􏲜
􏴭
    //ARRANGE
    //route r;
    //marking_input settings;
    
    //ACT
    //auto indexes = select_lanes(r,settings);
    
    //ASSERT
    //EXPECT_TRUE(indexes.empty());
􏴮

􏷐push a value onto the queue􏷏
􏶠adds the value into the backend redis queue􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒push􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to push onto the queue􏶿
􏶴
    redis.lpush(name,val);
􏶳

􏷐pop a value off of the queue􏷏
􏶠takes the tail value at the end of the queue􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop􏷑
􏶾string􏶽􏶼pop_val􏶻􏶺the popped value􏶹
􏶴
    return redis.brpop(popTimeout(),name).get(1);
􏶳

􏷐remove element from list􏷏
􏶠removes an element from a list and specifies whether it was removed􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒remove􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to remove􏶿
􏶾bool􏶽􏶼was removed􏶻􏶺whether or not the value was removed􏶹
􏶴
    return redis.lrem(name, -1, val) != 0;
􏶳

􏷐clear the queue􏷏
􏶠delete all elements in the queue so that it is empty􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒clear􏷑
􏶴
    redis.del(name);
􏶳

􏷐pop element into another queue􏷏
􏶠this pops the element from one queue and pushes it onto the queue
it will wait indefinitely until the thread is interrupted
null is returned if the thread is interrupted􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop into􏷑
􏶜􏶝􏷆RedisQueue􏷅􏷄into queue􏷃􏷀the queue to obtain the popped the value􏶿
􏶾string􏶽􏶼val􏶻􏶺the value of the transfered element.  null if the thread was interrupted􏶹
􏶴
    String val;
    do {
      val = redis.brpoplpush(name, intoQueue.getName(), 1);
      
      // right here is an operation loss risk
      if (Thread.currentThread().isInterrupted()) {
        return null;
      }
    } while (val == null);
    return val;
􏶳



􏷐get name􏷏
􏶠get the name of the queue.  this is the redis key used for the list􏶡
􏷘+􏷗􏴅Observer􏴆􏷒get name􏷑
􏶾string􏶽􏶼name􏶻􏶺the name of the queue􏶹
􏶴
    return name;
􏶳

􏷐peek the next queue value􏷏
􏶠similar to a pop, peek will preserve the item in the queue.
be careful about peeking with multiple threads.
a thread that peeks cannot assume they will get that value when popping due to other threads􏶡
􏷘+􏷗􏴅Observer􏴆􏷒peek􏷑
􏶾string􏶽􏶼peek_val􏶻􏶺the peeked value􏶹
􏶴
    return redis.lrange(name,-1,-1).get(0);
􏶳

􏷐observe an element at a particular index􏷏
􏶠index must be in bounds􏶡
􏷘+􏷗􏴅Observer􏴆􏷒at􏷑
􏶜􏶝􏷆long􏷅􏷄index􏷃􏷀the index􏶿
􏶾String􏶽􏶼val􏶻􏶺the value at the index􏶹
􏶴
    return redis.lindex(name,index);
􏶳

􏷐check if value exists in the list􏷏
􏶠O(n) not performant.  consider using a set􏶡
􏷘+􏷗􏴅Observer􏴆􏷒exists􏷑
􏶜􏶝􏷆string􏷅􏷄search val􏷃􏷀the value to check for in the list􏶿
􏶾bool􏶽􏶼exists􏶻􏶺whether or not the value exits in the list􏶹
􏶴
    for (long i = 0; i < size(); ++i){
        if (at(i) == searchVal){
            return true;
        }
    }
    return false;
􏶳

􏷐get size􏷏
􏶠checks the current length of the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒size􏷑
􏶾l􏶽􏶼length􏶻􏶺the current length of the queue􏶹
􏶴
    return redis.llen(name);
􏶳

􏷐check if the queue is empty􏷏
􏶠checks whether the queue is empty; i.e. has no elements􏶡
􏷘+􏷗􏴅Observer􏴆􏷒empty􏷑
􏶾bool􏶽􏶼is empty􏶻􏶺whether the queue is empty or not􏶹
􏶴
    return redis.llen(name) == 0;
􏶳

􏷐pop timeout􏷏
􏶠the amount of time in seconds to wait when we are unable to pop􏶡
􏷘-􏷗􏴅Observer􏴆􏷒pop timeout􏷑
􏶾int􏶽􏶼pop timeout􏶻􏵜seconds􏵝􏶺the number seconds to wait when unable to pop􏶹
􏶴
    //block indefinitely
    return 0;
􏶳