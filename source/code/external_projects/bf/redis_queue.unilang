􏶞o􏶟
􏷲a redis queue􏷱
􏷰a redis queue is an implementation of a queue data structure which internally uses a redis cluster to distribute the data across shards.
Its important to know that the lifetime of the queue persists before and after the queue data structure is created (since it exists in redis)
Therefore, two shard queues with the same name, would in fact be the same underlying redis queue􏷯
􏷞build􏷝􏷞buildfarm􏷝􏷞instance􏷝􏷞shard􏷝


􏷤􏷣􏷦redis.clients.jedis.JedisCluster􏷥

􏶨the unique name of the queue􏶧
􏶦the name is used by the redis cluster client to access the queue data.
If two queues had the same name, they would be instances of the same underlying redis queue􏶥
􏶘-􏶙􏶰c􏶯􏶮string􏶭􏶬name􏶫􏶪􏶩

􏶨the redis cluster client􏶧
􏶦given to the queue upon construction this is the redis cluster client that is used to access the sharded queue data􏶥
􏶘-􏶙􏶰c􏶯􏶮JedisCluster􏶭􏶬redis􏶫􏶪􏶩

􏷐constructor􏷏
􏶠construct a named redis queue with an established redis cluster􏶡
􏷘+􏷗􏴅Constructor􏴆􏷒redis_queue􏷑
􏶜􏶝􏷆JedisCluster􏷅􏷄redis􏷃􏷀an established redis cluster􏶿
􏶜􏶝􏷆string􏷅􏷄name􏷃􏷀the global name of the queue􏶿
􏶴
    this.redis = redis;
    this.name = name;
􏶳

􏷐push a value onto the queue􏷏
􏶠adds the value into the backend redis queue􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒push􏷑
􏶜􏶝􏷆string􏷅􏷄val􏷃􏷀the value to push onto the queue􏶿
􏶴
    redis.lpush(name,val);
􏶳

􏷐pop a value off of the queue􏷏
􏶠takes the tail value at the end of the queue􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒pop􏷑
􏶾string􏶽􏶼pop_val􏶻􏶺the popped value􏶹
􏶴
    return redis.brpop(1,name).get(1);
􏶳

􏷐clear the queue􏷏
􏶠delete all elements in the queue so that it is empty􏶡
􏷘+􏷗􏴅Transformer􏴆􏷒clear􏷑
􏶴
    redis.del(name);
􏶳

􏷐get size􏷏
􏶠checks the current length of the queue􏶡
􏷘+􏷗􏴅Observer􏴆􏷒size􏷑
􏶾l􏶽􏶼length􏶻􏶺the current length of the queue􏶹
􏶴
    return redis.llen(name);
􏶳

􏷐check if the queue is empty􏷏
􏶠checks whether the queue is empty; i.e. has no elements􏶡
􏷘+􏷗􏴅Observer􏴆􏷒empty􏷑
􏶾bool􏶽􏶼is empty􏶻􏶺whether the queue is empty or not􏶹
􏶴
    return redis.llen(name) == 0;
􏶳