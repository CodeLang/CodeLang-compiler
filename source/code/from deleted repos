this all junk.  its random notes and thoughts.  it will be organized and slowly dissolved/deleted

Unilang
========
//WHY WE NEED A HIGHER HIGH LEVEL GUI LANGUAGE:
//things that are dumb, that code generation will fix:
//- having to write two files for global code (only one file now)
//- having to write two/three files for object code (only one file now)
//- but what if the object is just data without methods? (configurable to any number of exported files (likely just the one file containing that struct of data)

//-repetitions that are no longer an issue:
// - source files automatically include their corresponding header files, with a header comment
// - no need to write both function decelerations and definitions.
// - no need to match the parameter name for doxygen comments
// - no need to figure out what the include guards are, and no need to type them.
// - no need to type the giant doxygen comment block header thing we use.

//dealing with boilerplate code:
//  - hard to keep consistent across files (generated automatically now)
//  - structs having that unnecessary extra name
//    (doesn't matter now.  All the structs you need are generated 
//    automatically based on member variables,functions, and the file name)
//hungarian notation is terrible.  This softens the blow, as the correct notation can be generated and met at the function signature level.
//Since you shouldn't be writing any code outside of functions, this analogous to static enforcement by the compiler.
//make a better write up later...

//at meta level:

//at import level:

//macro level:

//enum level:




//at the function level:  
// parameters are passed based on their passed intent instead of through specific language features such as references/pointers
// empty functions don't need to specify void
// deceleration/definition is done automatically
// documentation is duplicated automatically
// doxygen parameter names and in/out notation is derived automatically
// notation is derived automatically




//SPECIFC TERMINOLOGY YOU MAY ENCOUNTER:
//terminology: manager methods / lifetime methods
//definition: categorizes constructors and destructors under one name.
//resources: http://stackoverflow.com/questions/33788300/is-there-an-umbrella-term-for-constructor-destructor-methods

//terminology: state specifier
//definition: 
//resources: 

//terminology: operation category(this might go away)
//definition: 
//resources: 








get-formula
===========
they would ask questions involving 4 or 5 numbers, with multiple choice solutions.
Not knowing what formula to even apply in order to find the answer, I wrote this program to brute force the most plausible formula used.
This is both useful for when all of the multiple choice answers are difficult to arrive at using the numbers given, except for the correct answer,
and it was also useful for me when I googled the question and got an answer key involving different data.
This program can take an n amount of variables, and an n amount of possible solutions,
to give a ranking of the most plausible answer, and most plausible formula.

git-all
=======

####What does it do?
`git-all` applies a git command recusively to a directory tree, but only to appropiate nodes that are git repository roots.

####What?
Imagine a file tree where not every sub directory is a git repository, but the ones that are git repositories, are not gaurented to be at the same depth:
```
.
├── games
│   ├── game_maker        <- git repo
│   ├── puzzle_games      <- NOT
│   │   ├── manjog        <- git repo
│   │   └── sudoku        <- git repo
│   └── strategy_games    <- NOT
│       └── battle_ship   <- git repo
└── tools                 <- NOT
    ├── finance           <- NOT
    │   ├── calculator    <- git repo
    │   └── stock_reader  <- git repo
    └── rss_feeder        <- git repo
```
*Keep in mind, I didn't print the child directories of the git repos, but there is obviously more folders inside them.
I don't need to look any deeper though, because I arrived at the git repository root.
Once at the git respository root, I can run any git command I need for that repository.

####Ok. Continue.
It would be useful to automatically run the same git command on all of these repositories from the root of the tree.
This program does exactly that.  I made it mainly just for pushes and pulls, as I'm sometimes jumping between projects, and then realize I have to leave.  I would always forget to push some of my changes upstream, and then when I got to a different machine later in the day. and went to pull my changes back down and continue working, they wouldn't be there. 
  
Here is a comic to describe how I use this program myself:  
"oh shit, I have to leave."   
*executes `git-all --force-up`*  
hours later I arrive at a different machine
*executes `git-all --force-down`*
"now where was I.."

####Isn't that abusing the purpose of git?
I dunno. When I'm working on projects alone, I don't think it really matters if the master branch build breaks because of it.
And besides, I could always put my changes on a devleopment branch.  It makes sense to me since I have two work stations.  Also, it's a nice feeling to know that you just backed all your files onto github, before you left and the apartment caught on fire.

####How do you use it?
`git-all --force-up` does the following:  


`git-all --force-down` does the following: 

`git-all --custom="type an actual command here.`  
for example: `git-all --custom="commit -am "backups""` does the following:  



Things I need to do
=======
####The Yak Graph The Yack Graph is an acyclic dependency graph listing activities that I need to do.
I called it a yack graph, because everything except the leafs are more or less yak shaving activities.
The root items in blue are things I need to do for the sake of being able to do the things in green.
When I finally complete a blue item, I'll pop it off the graph, and all of the children which no longer have a parent, will be changed to blue.
This is a better way of keeping track what I need to do, and it helps me not forget the point of what I am doing as I tumble down the rabbit hole. 
####The Back Burner Things I want to do one day (old but I should have a graph for all this)
but don't really have the time since I'm knee deep in other stuff that I currently care more about.
*no paticular order, although I tend to filter ones to the top based on how much I like the idea,
as well how easy it would be to do, as well how relevant it would be do to it sooner or before others listed.
I still kinda pick and choose what to do though. Still pretty much out of order though.
    misspellings twitter (julie idea)
    my own build system
    visual programming
        start with a web-based approach to programming
        will rely on custom build system
        look for nice graph representations for browsers
    my website
    mud
    enum options
    object maker
        header_db (part of build-system)
        flag_db (part of build-system)
        Doxygen Built in
        precompiled headers
    project tracker(video time lapse thing / other statistics)
    multiple twitters
        extend twitter bot_maker
    blog follower
    fix capitalize program
        extend to lowercase
    scrap base
    wiki race
    extend terminal mood
        I think there is a bug fix in process
    organize desktop
    manpage maker


delete the eels game
====================
