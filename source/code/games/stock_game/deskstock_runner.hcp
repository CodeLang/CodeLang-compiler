class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
❪"code/utilities/screen/good_bad/good_bad_screen_tint_settings"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/games/stock_game/deskstock_settings"❫
❪"code/games/stock_game/deskstock_state"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
❪"code/utilities/locale/locale_setter"❫
❪"code/utilities/web/lib"❫
❪iostream❫
❪"nlohmann/json.hpp"❫
❪"code/games/stock_game/default_settings_getter"❫
❪"code/utilities/config/config_monitor"❫
❪"code/utilities/config/config_monitor_settings"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/shell/lib"❫
⚞⚟

◀public: static▶ void ☀Run() ❰

    //Load the program state for usage in the rest of the program
    auto state = Get_Program_State();
    
    
    //how to source the value
    //we can get a float from anywhere
    //here we customize on a web endpoint that returns json
    auto how_to_source_value = [&](){
        Config_Monitor::Monitor_Changes(state.ms,state.current_settings,state.default_settings);
        return Source_The_Float_Value(state);
    };
    
    //whether we consider the value changed and should take action
    //if the values are different we take action
    auto should_take_action = [&](float previous, float current){
        return previous != current;
    };
    
    // if the config was updated, we should reset the main loop
    // this is because, the sleep time might have been changed.
    // we could refactor this away, by fixing the main program loop.
    auto should_reset = [&](){
        return Config_Monitor::Trigger_Update(state.ms);
    };
    
    // what to do when the value changes
    auto on_value_change = [&](float current){
        Effect_The_System(state,current);
    };
    
    // infinite program loop
    // all the lambdas are a little sloppy, improvements are welcome.
    Locale_Setter::Set(state.current_settings.locale);
    //Installed_Program_Checker::Ensure_Installed(state.current_settings.must_have_programs);
    When_Value_Changes(state.current_settings.ms_to_fetch_changing_data,
                       how_to_source_value,
                       should_reset,
                       should_take_action,
                       on_value_change);
❱


◀private: static▶ Deskstock_State ☀Get_Program_State() ❰
    Deskstock_State state;
    state.ms.config_path = Full_Path_To_Home() + "/.destock";
    Config_Monitor::Monitor_Changes(state.ms,state.current_settings,state.default_settings);
    return state;
❱


◀private: static▶ float ☀Source_The_Float_Value(Deskstock_State & state) ❰
    float current = 0;
    
    //extract from simulation
    if (state.current_settings.how_to_get_value.through_simulation.simulate){
        current = state.current_settings.how_to_get_value.through_simulation.cycled_values[state.current_settings.how_to_get_value.through_simulation.current_simulation_index];
        
        //update index 
        if (state.current_settings.how_to_get_value.through_simulation.current_simulation_index >= state.current_settings.how_to_get_value.through_simulation.cycled_values.size()-1){
            state.current_settings.how_to_get_value.through_simulation.current_simulation_index = 0;
        }
        else{
            state.current_settings.how_to_get_value.through_simulation.current_simulation_index++;
        }
    }
    
    //extract from web
    else{
        current = Extract_Web_Json_Float(state.current_settings.how_to_get_value.through_web);
    }
    
    //TODO(anyone): Add additional ways to source a value
    return current;
❱

◀private: static▶ void ☀Effect_The_System(Deskstock_State & state, const float & current)❰

    //effect 1
    state.current_settings.system_effects.screen_tint.current_value = current;
    Screen_Tint_Setter::Adjust_Screen_On_Good_Bad_Evaluation(state.current_settings.system_effects.screen_tint);
    
    //effect 2
    if (state.current_settings.system_effects.run_user_commands){
        for (auto const& it: state.current_settings.system_effects.user_commands){
            auto real_command = string_replace_all(it,"{{value}}",std::to_string(current));
            system(real_command);
        }
    }
    
    //effect 3
    //TODO(thickey): change terminal
    //dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/background-color "'rgb(0,0,255)'"
    
    //effect n
    //TODO(anyone):  Add additional system effects to perform on a changing value
❱



// this is kind of sloppy.  I just wanted a generic "do this every time a value changes" kind of function.
// I ended up slipping in a lot of lambdas as the tool grew.
// It's still feels event based, which is nice.
// But this is the engine that runs in a loop and dispatches to all the behaviors passed in.
◀private: template <typename Fun1, typename Fun2, typename Fun3, typename Fun4>
static void When_Value_Changes(int & check_mseconds, Fun1 source_action, Fun2 should_reset, Fun3 should_take_action, Fun4 change_action){
    
    float previous = 0;
    float current = 0;
    while (true){
        For_Every_N_Milliseconds_With_Exception_Catching(check_mseconds,[&](){
            
            //if current value has changed
            current = source_action();
            if (should_take_action(previous,current)){
                
                //tint screen accordingly
                change_action(current);
            }
            
            //store previous value for next iteration
            previous = current;
            
        },should_reset);
    }
}
▶