class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
❪"code/utilities/screen/good_bad/good_bad_screen_tint_settings"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/games/stock_game/deskstock_settings"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/transcompilers/unilang/compiler-frontends/slidy/slidy_exporter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
❪"code/utilities/upload/file_uploader"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
❪"code/utilities/locale/locale_setter"❫
❪"code/utilities/web/lib"❫
❪iostream❫
❪"nlohmann/json.hpp"❫
❪"code/games/stock_game/default_settings_getter"❫
❪"code/utilities/config/config_monitor"❫
❪"code/utilities/config/config_monitor_settings"❫
⚞⚟

◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    auto default_settings = Default_Settings_Getter::Get();
    
    Deskstock_Settings settings;
    Config_Monitor_Settings ms;
    Config_Monitor::Monitor_Changes(ms,settings,default_settings);
    
    //nlohmann::json j = settings;
    //std::cout << j.dump(2) << std::endl;
    //while(true){}
    
    
    //how to source the value
    auto how_to_source_value = [&](){
        Config_Monitor::Monitor_Changes(ms,settings,default_settings);
        return Extract_Web_Json_Float(settings.value_get);
    };
    
    // what to do when the value changes
    auto on_value_change = [&](float current){
        settings.screen_tint.current_value = current;
        Screen_Tint_Setter::Adjust_Screen_On_Good_Bad_Evaluation(settings.screen_tint);
        //dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/background-color "'rgb(0,0,255)'"
    };
    
    // infinite program loop to monitor
    Locale_Setter::Set(settings.locale);
    When_Value_Changes(settings.seconds_to_fetch_changing_data,how_to_source_value,on_value_change);
❱


◀private: template <typename Fun1, typename Fun2>
static void When_Value_Changes(int check_seconds, Fun1 source_action, Fun2 change_action){
    
    float previous = 0;
    float current = 0;
    For_Every_N_Seconds_With_Exception_Catching(check_seconds,[&](){
        
        
        //if current value has changed
        current = source_action();
        if (previous != current){
            
            //tint screen accordingly
            change_action(current);
        }
        
        //store previous value for next iteration
        previous = current;
        
    });
}
▶