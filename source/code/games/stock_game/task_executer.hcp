class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/transcompilers/unilang/compiler-frontends/slidy/slidy_exporter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
❪"code/utilities/upload/file_uploader"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //Unicode please
    Set_English_UTF8_Locale();
    
    float previous = 0;
    auto open = Stock_Getter::Get_Uber_Open_Stock_Price();
    For_Every_N_Seconds_With_Exception_Catching(1,[&](){
        
        auto current = Stock_Getter::Get_Uber_Regular_Stock_Price();
        if (previous != current){
            Change_Screen_Based_On_Number(open, current);
        }
        previous = current;
        
    });
❱

◀private: static▶ void ☀Change_Screen_Based_On_Number(float open, float current) ❰

    if (current < open){
        auto difference = open-current;
        std::cout << "diff: " << difference << std::endl;
        Tint_Red(difference);
    }
    else if (current > open){
        auto difference = current-open;
        std::cout << "diff: " << difference << std::endl;
        Tint_Green(difference);
    }
❱

◀private: static▶ void ☀Tint_Red(float relative_difference)❰
    auto percent = map_value_across_range(relative_difference,0,1.5,0,1);
    std::cout << "red: " << percent << std::endl;
    Screen_Tint_Setter::Set_Redness(1.0 - percent);
❱
◀private: static▶ void ☀Tint_Green(float relative_difference)❰
    auto percent = map_value_across_range(relative_difference,0,1.5,0,1);
    std::cout << "green: " << percent << std::endl;
    Screen_Tint_Setter::Set_Greeness(1.0 - percent);
❱


◀private: static▶ float ☀map_value_across_range(float s, float a1, float a2, float b1, float b2)❰

    return b1 + (s-a1)*(b2-b1)/(a2-a1);
❱