class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
❪"code/utilities/screen/good_bad_screen_tint_settings"❫
❪"code/utilities/time/sleeping/lib"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/transcompilers/unilang/compiler-frontends/slidy/slidy_exporter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
❪"code/utilities/upload/file_uploader"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
❪iostream❫
❪"nlohmann/json.hpp"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //Unicode please
    Set_English_UTF8_Locale();
    
    //initialize settings
    Good_Bad_Screen_Tint_Settings settings;
    settings.standard_value = 0;
    settings.current_value = Stock_Getter::Get_Uber_Regular_Market_Change_Percent();
    settings.below_color = Rgb_Section::RED;
    settings.above_color = Rgb_Section::GREEN;
    settings.expected_max_positive_difference = 5.0;
    settings.expected_max_negative_difference = 5.0;
    settings.positive_low_rgb_value = .4;
    settings.positive_high_rgb_value = 1;
    settings.negative_low_rgb_value = .4;
    settings.negative_high_rgb_value = 1;
    settings.debug_data = true;
    settings.show_screen_tint = true;
    int seconds_to_fetch_changing_data = 1;
    
    nlohmann::json j = settings;
    std::cout << j.dump(2) << std::endl;
    while(true){}
    
    
    //how to source the value
    auto how_to_source_value = [&](){return Stock_Getter::Get_Uber_Regular_Market_Change_Percent();};
    
    // what to do when the value changes
    auto on_value_change = [&](float current){
        settings.current_value = current;
        Screen_Tint_Setter::Adjust_Screen_On_Good_Bad_Evaluation(settings);
    };
    
    // monitor the changing value
    When_Value_Changes(seconds_to_fetch_changing_data,how_to_source_value,on_value_change);
❱


◀private:

template <typename Fun1, typename Fun2>
static void When_Value_Changes(int check_seconds, Fun1 source_action, Fun2 change_action){
    
    float previous = 0;
    float current = source_action();
    For_Every_N_Seconds_With_Exception_Catching(check_seconds,[&](){
        
        
        //if current value has changed
        current = source_action();
        if (previous != current){
            
            //tint screen accordingly
            change_action(current);
        }
        
        //store previous value for next iteration
        previous = current;
        
    });
}
▶