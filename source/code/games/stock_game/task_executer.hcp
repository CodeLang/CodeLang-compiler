class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/transcompilers/unilang/compiler-frontends/slidy/slidy_exporter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
❪"code/utilities/upload/file_uploader"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //Unicode please
    Set_English_UTF8_Locale();
    
    
    
    float previous = 0;
    while(true){
        
        try{
            auto current = Get_Uber_Stock_Price();
            
            if (previous != current){
                Change_Screen_Based_On_Number(current);
            }
            
            previous = current;
            Sleep_For_N_Seconds(1);
        }
        catch(std::exception e){
            std::cout << "FAILING NOT SURE WHY" << std::endl;
            std::cout << e.what() << std::endl;
        }
    }
❱

◀private: static▶ float ☀Get_Uber_Stock_Price() ❰
    return Stock_Getter::Get_Regular_Market_Price("UBER");
❱

◀private: static▶ void ☀Change_Screen_Based_On_Number(float num) ❰

    auto tint_value = map_value_across_range(num,20,60,500,6000);
    std::cout << num << std::endl;
    
    //Screen_Tint_Setter::Set_Tint(tint_value);
❱


◀private: static▶ float ☀map_value_across_range(float s, float a1, float a2, float b1, float b2)❰

    return b1 + (s-a1)*(b2-b1)/(a2-a1);
❱