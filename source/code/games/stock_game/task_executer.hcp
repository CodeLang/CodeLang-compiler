class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/chinese/chinese_translations"❫
❪"code/utilities/screen/good_bad/good_bad_screen_tint_settings"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/games/stock_game/deskstock_settings"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/screen/screen_tint_setter"❫
❪"code/utilities/stock/stock_getter"❫
❪"code/utilities/locale/locale_setter"❫
❪"code/utilities/web/lib"❫
❪iostream❫
❪"nlohmann/json.hpp"❫
❪"code/games/stock_game/default_settings_getter"❫
❪"code/utilities/config/config_monitor"❫
❪"code/utilities/config/config_monitor_settings"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/shell/lib"❫
⚞⚟

◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    auto default_settings = Default_Settings_Getter::Get();
    
    Deskstock_Settings settings;
    Config_Monitor_Settings ms;
    ms.config_path = Full_Path_To_Home() + "/.destock";
    Config_Monitor::Monitor_Changes(ms,settings,default_settings);
    
    
    //how to source the value
    //we can get a float from anywhere
    //here we customize on a web endpoint that returns json
    auto how_to_source_value = [&](){
        Config_Monitor::Monitor_Changes(ms,settings,default_settings);
        
        float current = 0;
        
        //extract from simulation
        if (settings.how_to_get_value.through_simulation.simulate){
            current = settings.how_to_get_value.through_simulation.cycled_values[settings.how_to_get_value.through_simulation.current_simulation_index];
            
            //update index 
            if (settings.how_to_get_value.through_simulation.current_simulation_index >= settings.how_to_get_value.through_simulation.cycled_values.size()-1){
                settings.how_to_get_value.through_simulation.current_simulation_index = 0;
            }
            else{
                settings.how_to_get_value.through_simulation.current_simulation_index++;
            }
        }
        
        //extract from web
        else{
            current = Extract_Web_Json_Float(settings.how_to_get_value.through_web);
        }
        return current;
    };
    
    // whether we consider the value changed and should take action
    auto should_take_action = [&](float previous, float current){ 
        if (previous != current){
            return true;
        }
        
        return false;
    };
    
    
    // if the config was updated, we should reset
    auto should_reset = [&](){
        if (ms.was_updated){
            ms.was_updated = false;
            return true;
        }
        return false;
    };
    
    // what to do when the value changes
    auto on_value_change = [&](float current){
        settings.system_effects.screen_tint.current_value = current;
        Screen_Tint_Setter::Adjust_Screen_On_Good_Bad_Evaluation(settings.system_effects.screen_tint);
        
        //TODO(thickey): change terminal
        //dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/background-color "'rgb(0,0,255)'"
        
        if (settings.system_effects.run_user_commands){
            for (auto const& it: settings.system_effects.user_commands){
                auto real_command = string_replace_all(it,"{{value}}",std::to_string(current));
                execute(real_command);
            }
        }
    };
    
    // infinite program loop to monitor
    Locale_Setter::Set(settings.locale);
    When_Value_Changes(settings.ms_to_fetch_changing_data,
                       how_to_source_value,
                       should_reset,
                       should_take_action,
                       on_value_change);
❱


◀private: template <typename Fun1, typename Fun2, typename Fun3, typename Fun4>
static void When_Value_Changes(int & check_mseconds, Fun1 source_action, Fun2 should_reset, Fun3 should_take_action, Fun4 change_action){
    
    float previous = 0;
    float current = 0;
    while (true){
        For_Every_N_Milliseconds_With_Exception_Catching(check_mseconds,[&](){
            
            //if current value has changed
            current = source_action();
            if (should_take_action(previous,current)){
                
                //tint screen accordingly
                change_action(current);
            }
            
            //store previous value for next iteration
            previous = current;
            
        },should_reset);
    }
}
▶