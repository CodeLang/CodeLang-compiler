class
❪"code/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"SDL.h"❫
⚯
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
❪"code/utilities/graphics/imgui/ui/window/window_renderer"❫
❪"code/utilities/graphics/imgui/ui/window/window_position_finder"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/imgui_type_utility"❫
❪"code/utilities/keyboard/key_detector"❫
❪"code/ide/frame/fullscreener"❫
❪"code/ide/frame/background_drawer"❫
❪"code/ide/frame/mouse_selection_drawer"❫
❪"code/ide/frame/label_cursor_action_doer"❫
❪"code/utilities/graphics/imgui/ui/draw/line/line_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_position_getter"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/multi_color_bitmap/multi_color_bitmap_drawer"❫
⚞⚟




◀public: static▶ void ☀Draw(Ide_Settings & settings)❰
        
    //object for drawing everything
    ImDrawList *draw_list = ImGui::GetWindowDrawList();
    
    
    //draw the background for the entire application
    Background_Drawer::Draw_Background(draw_list,settings);
    
    //the closest to the corner we can get
    //this is basically used as our pseudo (0,0) for drawing anything in our application
    auto pos = Window_Position_Finder::attempted_perfect_top_left_corner();
    pos.x += 30;
    pos.y += 10;
        
    //auto time = ImGui::GetTime();
    //auto time = ImGui::GetFrameCount();
    //settings.test_label.message = std::to_string(time);
    Label_Drawer::Draw(draw_list,settings.unilang_font_lookup,pos,settings.test_label);
    for (auto & it: settings.test_label.cursors){
        Handle_Cursor_Selections(draw_list,settings,pos,settings.test_label,it);
        Draw_Mouse_Cursor_Connector(draw_list,settings,it);
        
        
    }
    //auto test_pos = pos;
    //test_pos.x+= 100;
    //test_pos.y += 100;
    //Rectangle_Drawer::draw_rectangle(draw_list,pos,settings.rec_test);
        
    Render_Mouse_Components(draw_list,settings);
❱

◀public: static▶ void ☀Render_Mouse_Components(ImDrawList *draw_list, Ide_Settings & settings)❰

    //the transparent box created by clicking and dragging the mouse
    Mouse_Selection_Drawer::Draw(draw_list,settings);
    
    //the actual mouse cursor
    auto mouse_pos = Mouse_Events_Checker::Get_Mouse_Position();
    Multi_Color_Bitmap_Drawer::Draw(draw_list,mouse_pos,settings.mouse.bitmap);
❱

◀private: static▶ void ☀Draw_Mouse_Cursor_Connector(ImDrawList *draw_list, Ide_Settings & settings, Label_Cursor_Selection & it)❰
        //draw cursor to mouse connector
        // if (settings.cursor_mouse_connector.draw){
        //     settings.cursor_mouse_connector.line.pos = Mouse_Position_Getter::Get();
        //     settings.cursor_mouse_connector.line.pos.x -= it.recommended_cursor_pos.x;
        //     settings.cursor_mouse_connector.line.pos.y -= it.recommended_cursor_pos.y + selection.label_cursor.tick.shape.shape.height;
        //     auto start_pos = it.recommended_cursor_pos;
        //     start_pos.y += selection.label_cursor.tick.shape.shape.height;
        //     Line_Drawer::Draw(draw_list,start_pos,settings.cursor_mouse_connector.line);
        // }
❱

◀private: static▶ void ☀Handle_Cursor_Selections(ImDrawList *draw_list, Ide_Settings & settings, Position pos, Label_Settings & label, Label_Cursor_Selection & selection)❰
    
    if (label.user_state.is_active){
        Label_Cursor_Action_Doer::Handle_Actions(settings.unilang_font_lookup,pos,label,selection);
        
        Adjust_Based_On_Mouse_Selection(settings,label,selection);
        
        //draw label cursor
        selection.label_cursor.tick.shape.pos = selection.recommended_cursor_pos;
        selection.label_cursor.highlight.shape.pos = selection.recommended_cursor_pos;
        Rectangle_Drawer::draw_rectangle(draw_list,selection.label_cursor.tick.shape);
        
        selection.label_cursor.highlight.shape.shape.dimensions.width = selection.additional_chars_selected * 6;
        selection.label_cursor.highlight.shape.shape.dimensions.height = 13;
        Rectangle_Drawer::draw_rectangle(draw_list,selection.label_cursor.highlight.shape);
    }
❱

◀private: static▶ void ☀Adjust_Based_On_Mouse_Selection(Ide_Settings const& settings, Label_Settings & label, Label_Cursor_Selection & selection)❰
    
    if (selection.additional_chars_selected != 0){
        //std::cout << selection.additional_chars_selected << std::endl;
    }
❱



