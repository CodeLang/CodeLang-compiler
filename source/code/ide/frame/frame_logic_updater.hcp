class
❪"code/ide/settings/ide_settings"❫
❪"code/ide/frame/frame_elements"❫
⚯
❪"code/ide/frame/mouse_selection_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_position_getter"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/window/window_position_finder"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_drawer"❫
❪"code/ide/frame/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟



◀public: static▶ Frame_Elements ☀each_frame(Ide_Settings & settings)❰
    Frame_Elements elements;
    
    elements.types.emplace_back(settings.background.main_window_backdrop);
    Draw_Label(elements,settings);
    Render_Mouse_Components(elements,settings);
    
    return elements;
❱

◀public: static▶ void ☀Render_Mouse_Components(Frame_Elements & elements, Ide_Settings & settings)❰

    //the transparent box created by clicking and dragging the mouse
    Mouse_Selection_Drawer::Draw(elements,settings);
    
    //the actual global mouse cursor
    auto mouse_pos = Mouse_Events_Checker::Get_Mouse_Position();
    settings.mouse.bitmap.pos = mouse_pos;
    elements.types.emplace_back(settings.mouse.bitmap);
❱

◀public: static▶ void ☀Draw_Label(Frame_Elements & elements, Ide_Settings & settings)❰

    //the closest to the corner we can get
    //this is basically used as our pseudo (0,0) for drawing anything in our application
    Position pos = settings.view_anchor;
    //pos = Window_Position_Finder::attempted_perfect_top_left_corner();
    
    
    settings.test_label.pos.x = pos.x + 30;
    settings.test_label.pos.y = pos.y + 10;
    
    //std::cout << settings.mouse.right_selection.shape.shape.dimensions.width << "x" << settings.mouse.right_selection.shape.shape.dimensions.height << std::endl;
    
    elements.types += Label_Drawer::Draw(settings.unilang_font_lookup,settings.test_label).types;
    for (auto & it: settings.test_label.label.cursors){
        Handle_Cursor_Selections(elements,settings,settings.test_label,it);
        //Draw_Mouse_Cursor_Connector(draw_list,settings,it);
    }
❱

◀private: static▶ void ☀Draw_Mouse_Cursor_Connector(ImDrawList *draw_list, Ide_Settings & settings, Label_Cursor_Selection & it)❰
        //draw cursor to mouse connector
        // if (settings.cursor_mouse_connector.draw){
        //     settings.cursor_mouse_connector.line.pos = Mouse_Position_Getter::Get();
        //     settings.cursor_mouse_connector.line.pos.x -= it.recommended_cursor_pos.x;
        //     settings.cursor_mouse_connector.line.pos.y -= it.recommended_cursor_pos.y + selection.label_cursor.tick.shape.shape.height;
        //     auto start_pos = it.recommended_cursor_pos;
        //     start_pos.y += selection.label_cursor.tick.shape.shape.height;
        //     Line_Drawer::Draw(draw_list,start_pos,settings.cursor_mouse_connector.line);
        // }
❱

◀private: static▶ void ☀Handle_Cursor_Selections(Frame_Elements & elements, Ide_Settings & settings, Positioned_Label & label, Label_Cursor_Selection & selection)❰
    
    if (label.label.user_state.is_active){
        Label_Cursor_Action_Doer::Handle_Actions(settings.unilang_font_lookup,label,selection);
        Draw_Label_Cursor(elements, selection);
    }
❱

◀private: static▶ void ☀Draw_Label_Cursor(Frame_Elements & elements, Label_Cursor_Selection & selection)❰
    
    //draw label cursor
    selection.label_cursor.tick.shape.pos = selection.recommended_cursor_pos;
    selection.label_cursor.highlight.shape.pos = selection.recommended_cursor_pos;
    elements.types.emplace_back(selection.label_cursor.tick.shape);
    
    //draw selected box over selected text
    selection.label_cursor.highlight.shape.shape.dimensions.width = selection.additional_chars_selected * 6;
    selection.label_cursor.highlight.shape.shape.dimensions.height = 13;
    elements.types.emplace_back(selection.label_cursor.highlight.shape);
❱

