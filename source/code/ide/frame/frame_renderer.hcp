class
❪"code/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"SDL.h"❫
⚯
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
❪"code/utilities/graphics/imgui/ui/window/window_renderer"❫
❪"code/utilities/graphics/imgui/ui/window/window_position_finder"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/imgui_type_utility"❫
❪"code/ide/frame/cursor_mover"❫
⚞⚟



◀public: static▶ void ☀each_frame(Ide_Settings & settings,SDL_Window* window)❰

    Possibly_Fullscreen(settings,window);
    
    //create a giant window that spans the entire application
    //since we are using imgui, we have found it better to draw bitmaps on what imgui considers a window.  
    //it does not seem possible to draw directly on the background.  Additionally, an imgui window has some extra frills
    //that also prevent it from being colored everywhere.  We grow the window larger than the application window,
    //so that we have an entire drawable surface.
    Position window_end_position = Imgui_Type_Utility::Display_Size_Position();
    window_end_position.x += 8;
    Update_Background_For_Window_Size(settings,window_end_position);
    ImGui::SetNextWindowPos(Imgui_Type_Utility::To_ImVec2(settings.main_window_backdrop_starting_position));
    ImGui::SetNextWindowSize(Imgui_Type_Utility::To_ImVec2(window_end_position));
    
    //Draw the main window and render everything inside of it
    Draw_Everything(settings);
        
       bool flag = true;
       ImGui::ShowDemoWindow(&flag);
    
❱

◀public: static▶ void ☀Update_Background_For_Window_Size(Ide_Settings & settings, Position const& window_end_position)❰
    settings.main_window_backdrop.width = window_end_position.x;
    settings.main_window_backdrop.height = window_end_position.y;
❱
◀private: static▶ void ☀Draw_Background(ImDrawList *draw_list, Ide_Settings const& settings)❰
    Rectangle_Drawer::draw_rectangle(draw_list,settings.main_window_backdrop_starting_position,settings.main_window_backdrop);
❱
◀private: static▶ void ☀Draw_Everything(Ide_Settings & settings)❰
    Window_Renderer::render(settings.main_window,[&](){
        
        
    //object for drawing everything
    ImDrawList *draw_list = ImGui::GetWindowDrawList();
    
    //draw the background for the entire application
    Draw_Background(draw_list,settings);
    
    //the closest to the corner we can get
    //this is basically used as our pseudo (0,0) for drawing anything in our application
    auto pos = Window_Position_Finder::attempted_perfect_top_left_corner();
    pos.x += 10;
    pos.y += 10;
        
    //auto time = ImGui::GetTime();
    //auto time = ImGui::GetFrameCount();
    //settings.test_label.message = std::to_string(time);
    auto sel = Label_Drawer::Draw(draw_list,settings.unilang_font_lookup,pos,settings.test_label);
    if (sel){
        settings.cursor_position = sel->recommended_cursor_pos;
    }
    
    
    Cursor_Mover::Move_As_Needed(settings);
    Rectangle_Drawer::draw_rectangle(draw_list,settings.cursor_position,settings.cursor.shape);
    
    
    //Cursor_Drawer::Draw(draw_list,pos,settings.cursor);
    
    });
❱
◀private: static▶ void ☀Possibly_Fullscreen(Ide_Settings & settings, SDL_Window* window)❰

    if (F5_Pressed()){
        if (settings.init.main_window.fullscreen){
            SDL_SetWindowFullscreen(window,0);
            settings.init.main_window.fullscreen = false;
        }
        else{
            SDL_SetWindowFullscreen(window,SDL_WINDOW_FULLSCREEN_DESKTOP);
            settings.init.main_window.fullscreen = true;
        }
    }
❱

◀private: static▶ bool ☀F5_Pressed()❰
    if (ImGui::IsKeyPressed(62,true)){
        return true;
    }
    return false;
❱