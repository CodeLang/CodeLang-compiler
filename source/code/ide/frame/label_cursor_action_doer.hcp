class
❪"code/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"SDL.h"❫
⚯
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
❪"code/utilities/graphics/imgui/ui/window/window_renderer"❫
❪"code/utilities/graphics/imgui/ui/window/window_position_finder"❫
❪"code/utilities/keyboard/key_detector"❫
⚞⚟

◀public: static▶ void ☀Handle_Actions(Label_Settings & label, Label_Cursor_Selection & selection)❰
    Arrow_Cursor_Movement(label,selection);
    Character_Edition(label,selection);
    Handle_All_Selection(label,selection);
    //TODO: more?
❱

◀private: static▶ void ☀Arrow_Cursor_Movement(Label_Settings & label, Label_Cursor_Selection & selection)❰
    Handle_Forwards_Navigation(label,selection);
    Handle_Backwards_Navigation(label,selection);
❱
◀private: static▶ void ☀Character_Edition(Label_Settings & label, Label_Cursor_Selection & selection)❰
    Handle_Fowards_Insertion(label,selection);
    Handle_Backwards_Deletion(label,selection);
❱

◀private: static▶ void ☀Handle_Backwards_Navigation(Label_Settings & label, Label_Cursor_Selection & selection)❰

    if (Key_Detector::Left_Key_Pressed()){
        if (Key_Detector::Shift_Down()){
            Selection_Backwards(label,selection);
        }
        else{
            NonSelection_Backwards(label,selection);
        }
    }
❱
◀private: static▶ void ☀Handle_Forwards_Navigation(Label_Settings & label, Label_Cursor_Selection & selection)❰

    if (Key_Detector::Right_Key_Pressed()){
        if (Key_Detector::Shift_Down()){
            Selection_Forwards(label,selection);
        }
        else{
            NonSelection_Forwards(label,selection);
        }
    }
❱

◀private: static▶ void ☀Selection_Backwards(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (!Cursor_At_Beginning(selection)){
        Move_Selector_Backward(label,selection);
        Adjust_For_Backwards_Selection(label,selection);
    }
❱
◀private: static▶ void ☀NonSelection_Backwards(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (!Cursor_At_Beginning(selection)){
        if (!Highlighted_Chars_Exist(selection)){
            Move_Selector_Backward(label,selection);
        }
    }
    selection.additional_chars_selected = 0;
❱
◀private: static▶ void ☀Selection_Forwards(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (!Cursor_At_End(label,selection)){
        Move_Selector_Forward(label,selection);
        Adjust_For_Forwards_Selection(label,selection);
    }
❱
◀private: static▶ void ☀NonSelection_Forwards(Label_Settings & label, Label_Cursor_Selection & selection)❰

    if (!Cursor_At_End(label,selection)){
       if (!Highlighted_Chars_Exist(selection)){
            Move_Selector_Forward(label,selection);
        }
    }
    selection.additional_chars_selected = 0;
❱










◀private: static▶ void ☀Handle_Fowards_Insertion(Label_Settings & label, Label_Cursor_Selection & selection)❰

    for (auto const& c: Currently_Buffered_User_Input_Chars()){
        if (Char_Is_Valid(c)){
            label.message.insert(selection.label_index+1,1,c);
            Move_Selector_Forward(label,selection);
        }
    }
❱

◀private: static▶ void ☀Handle_Backwards_Deletion(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (Key_Detector::Backspace_Pressed()){
        if (Highlighted_Chars_Exist(selection)){
            Backspace_On_Selection(label,selection);
        }
        else{
            Backspace_On_NonSelection(label,selection);
        }
    }
❱

◀private: static▶ std::vector<char> ☀Currently_Buffered_User_Input_Chars()❰
    std::vector<char> x;
    ImGuiIO& io = ImGui::GetIO();
    IM_ARRAYSIZE(io.InputCharacters);
    for (int i = 0; i < IM_ARRAYSIZE(io.InputCharacters); i++){
        x.emplace_back((unsigned char)io.InputCharacters[i]);
    }
    return x;
❱

◀private: static▶ bool ☀Char_Is_Valid(char c)❰
    if (c != 0){
        if (isprint(c) || isspace(c))
        {
            return true;
        }
    }
    return false;
❱



◀private: static▶ void ☀Backspace_On_Selection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    Clear_Selection(label,selection);
    selection.additional_chars_selected = 0;
❱
◀private: static▶ void ☀Backspace_On_NonSelection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (selection.label_index > -1){
        label.message.erase(selection.label_index,1);
        Move_Selector_Backward(label,selection);
    }
❱


◀private: static▶ void ☀Clear_Selection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (selection.additional_chars_selected < 0){
        label.message.erase(selection.label_index+selection.additional_chars_selected+1,std::abs(selection.additional_chars_selected));
        for (size_t i = 0; i < std::abs(selection.additional_chars_selected); ++i){
            Move_Selector_Backward(label,selection);
        }
    }
    else{
        label.message.erase(selection.label_index+1,selection.additional_chars_selected);
    }
❱









◀private: static▶ void ☀Handle_All_Selection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (Key_Detector::CtrlA_Pressed()){
        Set_Cursor_At_End(label,selection);
        selection.additional_chars_selected = label.message.size() * -1;
        selection.label_index -= label.message.size()-1;
        //selection.recommended_cursor_pos.x = label.message.size()+1 * 6;
    }
❱









//state checking / settings
◀private: static▶ bool ☀Cursor_At_Beginning(Label_Cursor_Selection const& selection)❰
    return (selection.label_index == -1);
❱
◀private: static▶ bool ☀Cursor_At_End(Label_Settings const& label, Label_Cursor_Selection const& selection)❰
    return (selection.label_index == static_cast<int>(label.message.size())-1);
❱
◀private: static▶ bool ☀Highlighted_Chars_Exist(Label_Cursor_Selection const& selection)❰
    return (selection.additional_chars_selected != 0);
❱
◀private: static▶ void ☀Set_Cursor_At_End(Label_Settings const& label, Label_Cursor_Selection & selection)❰
    selection.label_index = static_cast<int>(label.message.size())-1;
❱
◀private: static▶ void ☀Set_Cursor_At_Beginning(Label_Cursor_Selection & selection)❰
    selection.label_index = -1;
❱


//selection movement
◀private: static▶ void ☀Adjust_For_Backwards_Selection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (Key_Detector::Shift_Down()){
        selection.additional_chars_selected += 1;
    }
    else{
        selection.additional_chars_selected = 0;
    }
❱
◀private: static▶ void ☀Adjust_For_Forwards_Selection(Label_Settings & label, Label_Cursor_Selection & selection)❰
    if (Key_Detector::Shift_Down()){
        selection.additional_chars_selected -= 1;
    }
    else{
        selection.additional_chars_selected = 0;
    }
❱

//cursor movement
◀private: static▶ void ☀Move_Selector_Backward(Label_Settings & label, Label_Cursor_Selection & selection)❰
    selection.recommended_cursor_pos.x -= 6;
    selection.label_index -= 1;
❱
◀private: static▶ void ☀Move_Selector_Forward(Label_Settings & label, Label_Cursor_Selection & selection)❰
    selection.recommended_cursor_pos.x += 6;
    selection.label_index += 1;
❱