class
❪"code/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"code/ide/frame/frame_elements"❫
⚯
⚞⚟


◀public: static▶ void ☀Draw(Frame_Elements & elements, Ide_Settings & settings)❰
        
    Handle_Left_Click(elements,settings);
    Handle_Right_Click(elements,settings);
❱

◀private: static▶ void ☀Handle_Left_Click(Frame_Elements & elements, Ide_Settings & settings)❰

    if (ImGui::IsMouseClicked(0)){
        auto mouse_pos = ImGui::GetMousePos();
        settings.mouse.left_selection.shape.pos.x = mouse_pos.x;
        settings.mouse.left_selection.shape.pos.y = mouse_pos.y;
    }
    
    if (ImGui::IsMouseDown(0)){
        auto mouse_pos = ImGui::GetMousePos();
        settings.mouse.left_selection.shape.shape.dimensions.width = mouse_pos.x - settings.mouse.left_selection.shape.pos.x;
        settings.mouse.left_selection.shape.shape.dimensions.height = mouse_pos.y - settings.mouse.left_selection.shape.pos.y;
        elements.types.emplace_back(settings.mouse.left_selection.shape);
    }
    
    if (ImGui::IsMouseReleased(0)){
        settings.mouse.left_selection.shape.shape.dimensions.width = 0;
        settings.mouse.left_selection.shape.shape.dimensions.height = 0;
    }
❱

◀private: static▶ void ☀Handle_Right_Click(Frame_Elements & elements, Ide_Settings & settings)❰

    if (ImGui::IsMouseClicked(1)){
        auto mouse_pos = ImGui::GetMousePos();
        settings.mouse.right_selection.shape.pos.x = mouse_pos.x;
        settings.mouse.right_selection.shape.pos.y = mouse_pos.y;
        
        settings.prev_position.x = mouse_pos.x;
        settings.prev_position.y = mouse_pos.y;
    }
    
    if (ImGui::IsMouseDown(1)){
        auto mouse_pos = ImGui::GetMousePos();
        settings.mouse.right_selection.shape.shape.dimensions.width = mouse_pos.x - settings.mouse.right_selection.shape.pos.x;
        settings.mouse.right_selection.shape.shape.dimensions.height = mouse_pos.y - settings.mouse.right_selection.shape.pos.y;
        elements.types.emplace_back(settings.mouse.right_selection.shape);
        Adjust_The_View_Anchor(settings,mouse_pos);
    }
    
    if (ImGui::IsMouseReleased(1)){
        settings.mouse.right_selection.shape.shape.dimensions.width = 0;
        settings.mouse.right_selection.shape.shape.dimensions.height = 0;
    }
❱

◀private: static▶ void ☀Adjust_The_View_Anchor(Ide_Settings & settings, ImVec2 const& mouse_pos)❰

        auto x_change = mouse_pos.x - settings.prev_position.x;
        auto y_change = mouse_pos.y - settings.prev_position.y;
        
        settings.view_anchor.x += x_change;
        settings.view_anchor.y += y_change;
        
        
        settings.prev_position.x = mouse_pos.x;
        settings.prev_position.y = mouse_pos.y;
❱