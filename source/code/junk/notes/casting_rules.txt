when the expression is used as the argument when calling a function that is declared with T2 as parameter; 
void function(T2 t2){}
T1 t1;
function(t1);

when the expression is used as an operand with an operator that expects T2
T1 t1;
T2 t2;
t2 += t1;

when initializing a new object of type T2, including return statement in a function returning T2; 
T2 t2 = T1();

when initializing a new object of type T2, including return statement in a function returning T2; 
T1 function(){}
T2 t2 = function();


when the expression is used in a switch statement (T2 is integral type);
T1 t1;
switch(t1){}

when the expression is used in an if statement or a loop (T2 is bool).
T1 t1;
if(t1){}

If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled. 

there's clearly something bad swimming inside.  if I cut my temple to let some blood out maybe it will hurt less.