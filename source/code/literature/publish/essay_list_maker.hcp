class
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/tokens/generic_token"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/pdf/pdf_settings"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/tools/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/tools/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/tools/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/utilities/pdf/latex_template_getter"❫
❪"code/utilities/web/dropbox/dropbox_uploader"❫
❪"code/utilities/secret/secret_getter"❫
❪"code/utilities/filesystem/files/temp_file"❫
❪"code/utilities/pdf/pdf_creator"❫
❪"code/tools/transcompilers/unilang/user-frontend/file_to_structure_converter"❫
❪"code/utilities/upload/file_upload_settings"❫
❪"code/utilities/upload/file_uploader"❫
❪"code/utilities/html/basic_html_template_getter"❫
❪"code/utilities/html/html_list_maker"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
⚞⚟


◀public: static▶ void ☀Make(std::vector<std::string> const& all_essays) ❰

    auto link_and_names = Gather_Links_And_Names(all_essays);
    Generate_Essay_List(link_and_names);
❱

◀private: static▶ std::vector<std::pair<std::string,std::string>> ☀Gather_Links_And_Names(std::vector<std::string> const& all_essays) ❰
    std::vector<std::pair<std::string,std::string>> x;
    for (auto const& it: all_essays){
        auto structure = File_To_Structure_Converter::Convert(it + ".unilang");
        //auto title = as_string(structure.literature.paragraphs[0].title.value);
        auto title = Case_Modifier::As_Modified_Casing(Case_Format_Style::CAPITAL,structure.name);
        auto link = it + ".pdf";
        x.emplace_back(link,title);
    }
    return x;
❱

◀private: static▶ void ☀Generate_Essay_List(std::vector<std::pair<std::string,std::string>> const& link_and_names) ❰
    
    //build html sections
    auto css = Get_Css();
    
    //body
    std::string body;
    Append_With_Newline(body,"<div>");
    Append_With_Newline(body,"<h2>Essays</h2>");
    Append_With_Newline(body,Html_List_Maker::Get(link_and_names));
    Append_With_Newline(body,"</div>");
    
    //build html
    std::string html = Basic_Html_Template_Getter::Get("Essays",css,body);
    
    auto local_file_name = Full_Path_For_Desktop_File("essays.html");
    Write_To_File(local_file_name,html);
    
    //upload to github
    File_Upload_Settings upload_settings;
    
    //generic
    upload_settings.local_file_name = local_file_name;
    upload_settings.remote_file_name = "essays/essays.html";
    
    //dropbox specific
    upload_settings.upload_to_dropbox = false;
    
    //github specific
    upload_settings.upload_to_github = true;
    upload_settings.github_settings.pull_first = false;
    upload_settings.github_settings.update = true;
    
    File_Uploader::Upload(upload_settings);
❱



◀private: static▶ std::string ☀Get_Css()❰
    std::string css;
    Append_With_Newline(css,"div {");
    Append_With_Newline(css,"  margin: 30px;");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"@media only screen and (max-width: 1125px) {");
        Append_With_Newline(css,"h2 {");
        Append_With_Newline(css,"  font: 400 140px/1.5 Helvetica, Verdana, sans-serif;");
        Append_With_Newline(css,"  margin: 0;");
        Append_With_Newline(css,"  padding: 0;");
        Append_With_Newline(css,"}");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"@media only screen and (min-width: 1125px) {");
        Append_With_Newline(css,"h2 {");
        Append_With_Newline(css,"  font: 400 40px/1.5 Helvetica, Verdana, sans-serif;");
        Append_With_Newline(css,"  margin: 0;");
        Append_With_Newline(css,"  padding: 0;");
        Append_With_Newline(css,"}");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"ul {");
    Append_With_Newline(css,"  list-style-type: none;");
    Append_With_Newline(css,"  margin: 0;");
    Append_With_Newline(css,"  padding: 0;");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"@media only screen and (max-width: 1125px) {");
        Append_With_Newline(css,"li {");
        Append_With_Newline(css,"  font: 200 80px/1.5 Helvetica, Verdana, sans-serif;");
        Append_With_Newline(css,"  padding-top: 22px;");
        Append_With_Newline(css,"}");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"@media only screen and (min-width: 1125px) {");
        Append_With_Newline(css,"li {");
        Append_With_Newline(css,"  font: 200 20px/1.5 Helvetica, Verdana, sans-serif;");
        Append_With_Newline(css,"  padding-top: 22px;");
        Append_With_Newline(css,"}");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"li:last-child {");
    Append_With_Newline(css,"  border: none;");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"li a {");
    Append_With_Newline(css,"  text-decoration: none;");
    Append_With_Newline(css,"  color: #000;");
    Append_With_Newline(css,"  display: block;");
    Append_With_Newline(css,"}");

    Append_With_Newline(css,"li a:hover {");
    Append_With_Newline(css,"}");
    return css;
❱