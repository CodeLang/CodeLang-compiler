class
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/tokens/generic_token"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/formats/pdf/pdf_settings"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/program/common_actions/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/tools/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/tools/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/tools/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/utilities/formats/pdf/latex_template_getter"❫
❪"code/utilities/web/dropbox/dropbox_uploader"❫
❪"code/utilities/personal/secret/secret_getter"❫
❪"code/utilities/filesystem/files/temp/temp_file"❫
❪"code/utilities/formats/pdf/pdf_creator"❫
❪"code/tools/transcompilers/unilang/user-frontend/file_to_structure_converter"❫
❪"code/utilities/output/upload/file_upload_settings"❫
❪"code/utilities/output/upload/file_uploader"❫
❪"code/utilities/formats/html/basic_html_template_getter"❫
❪"code/utilities/formats/html/body/html_list_maker"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/formats/html/style/link_list_styling"❫
❪"code/utilities/formats/html/full/list_of_links"❫
⚞⚟


◀public: static▶ void ☀Make(std::vector<std::string> const& all_essays) ❰

    auto link_and_names = Gather_Links_And_Names(all_essays);
    Generate_Essay_List(link_and_names);
❱

◀private: static▶ std::vector<std::pair<std::string,std::string>> ☀Gather_Links_And_Names(std::vector<std::string> const& all_essays) ❰
    std::vector<std::pair<std::string,std::string>> x;
    for (auto const& it: all_essays){
        auto structure = File_To_Structure_Converter::Convert(it + ".unilang");
        //auto title = as_string(structure.literature.paragraphs[0].title.value);
        auto title = Case_Modifier::As_Modified_Casing(Case_Format_Style::CAPITAL,structure.name);
        auto link = it + ".pdf";
        x.emplace_back(link,title);
    }
    return x;
❱

◀private: static▶ void ☀Generate_Essay_List(std::vector<std::pair<std::string,std::string>> const& link_and_names) ❰
    

    //create html file
    auto local_file_name = Full_Path_For_Desktop_File("essays.html");
    auto html = List_Of_Links::Get_Html("Essays",link_and_names);
    auto temp_html = Temp_File(local_file_name,html);
    
    //upload it
    File_Upload_Settings upload_settings;
    upload_settings.local_file_name = local_file_name;
    upload_settings.remote_file_name = "essays/essays.html";
    
    //dropbox specific
    upload_settings.upload_to_dropbox = false;
    
    //github specific
    upload_settings.upload_to_github = true;
    upload_settings.github_settings.pull_first = false;
    upload_settings.github_settings.update = true;
    
    File_Uploader::Upload(upload_settings);
❱