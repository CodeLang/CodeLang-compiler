class
⚯
⚞⚟

◀public: static▶ void ☀Export_Metrics(std::string const& all_file, std::string const& metrics_file) ❰
    
❱
◀private: static▶ void ☀Collect_Status_Metrics(std::string const& all_pit_room_events_file) ❰

        //read in data
        Gcal_Rooms pit_rooms;
        std::cout << "loading..." << std::endl;
        Json_File_Io::Read_Json_From_File(pit_rooms,all_pit_room_events_file);
        
        //flatten it
        Unique_Counter<std::string> counter;
        std::cout << "collecting..." << std::endl;
        for (auto const& x: pit_rooms.rooms){
            for (auto const& y: x.events){
                if (y.find("status") != y.end()){
                    counter.Add(y["status"]);
                }
            }
        }
        
        for (auto const& it: counter.hash_table){
            std::cout << it.second << " " << it.first << std::endl;
        }
❱
◀private: static▶ void ☀Collect_Atendee_Metrics(std::string const& all_pit_room_events_file) ❰

        //read in data
        Gcal_Rooms pit_rooms;
        std::cout << "loading..." << std::endl;
        Json_File_Io::Read_Json_From_File(pit_rooms,all_pit_room_events_file);
        
        //flatten it
        Unique_Counter<std::string> counter;
        std::cout << "collecting..." << std::endl;
        for (auto const& x: pit_rooms.rooms){
            for (auto const& y: x.events){
                    counter.Add("total");
                    counter.Add(std::to_string(y["attendees"].size()));
            }
        }
        
        for (auto const& it: counter.hash_table){
            std::cout << it.second << " " << it.first << std::endl;
        }
❱



    /*
    size_t total_events = 0;
    for (auto const& it: pit_rooms.rooms){
        total_events += it.events.size();
    }
    std::cout << "total events: " << total_events << std::endl;
    */