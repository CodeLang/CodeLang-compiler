class
⚯
⚞⚟

◀public: static▶ void ☀Apply(Ide_Element & it)❰
    
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                
                
                //x.state.settings.schema = Buildable_Schema_Faced_Tree_Default_Schema::Get();
                
                //actually... reset all of these settings
                x.state.settings = Default_Schema_Path_Settings::Get();
            },
            [&](Positioned_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Animated_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Rectangle_Settings & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Select_Menu & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Label & x) {
                //NOT NEEDED
                (void)x;
            },
        }, it.element);
❱


◀public: static▶ void ☀Apply_Schema_Only(Ide_Element & it)❰
    
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                
                
                x.state.settings.schema = Buildable_Schema_Faced_Tree_Default_Schema::Get();
            },
            [&](Positioned_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Animated_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Rectangle_Settings & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Select_Menu & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Label & x) {
                //NOT NEEDED
                (void)x;
            },
        }, it.element);
❱