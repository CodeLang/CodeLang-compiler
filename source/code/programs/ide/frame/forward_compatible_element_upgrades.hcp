class
⚯
⚞⚟

◀public: static▶ void ☀Upgrade_If_Needed(Ide_Element & it)❰



        
    
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                int version = x.state.settings.schema_version;
                Upgrade_Schema_Compadibility(x,version);
            },
            [&](Positioned_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Animated_Image_Data & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Rectangle_Settings & x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Select_Menu & x) {
                //NOT NEEDED
                (void)x;
            },
        }, it.element);

❱


◀private: static▶ void ☀Upgrade_Schema_Compadibility(Positioned_Buildable_Schema_Faced_Tree & j, int version)❰

    auto patches = Schema_Patch_Settings_Getter::Get();
    Generic_Patcher::Apply_Any_Needed_Patches(j,patches,version);


❱