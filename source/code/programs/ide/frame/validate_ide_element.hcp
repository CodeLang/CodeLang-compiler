class
⚯
⚞⚟

◀public: static▶ std::vector<::tree<Buttoned_Faced_Label>::pre_order_iterator> ☀Validate(Ide_Element const& it)❰


        std::vector<::tree<Buttoned_Faced_Label>::pre_order_iterator> found;
        
    
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree const& x) {
                found = Buildable_Schema_Faced_Tree_Validate_Schema::Find_Schema_Violations(x);
            },
            [&](Positioned_Image_Data const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Animated_Image_Data const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Select_Menu const& x) {
                //NOT NEEDED
                (void)x;
            },
        }, it.element);
        
        
        return found;
❱

◀public: static▶ std::vector<std::string> ☀Validate_And_Get_Names(Ide_Element const& it)❰


        std::vector<std::string> found;
        
    
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree const& x) {
                found = Buildable_Schema_Faced_Tree_Validate_Schema::Find_Schema_Violations_By_Name(x);
            },
            [&](Positioned_Image_Data const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Animated_Image_Data const& x) {
                //NOT NEEDED
                (void)x;
            },
            [&](Positioned_Select_Menu const& x) {
                //NOT NEEDED
                (void)x;
            },
        }, it.element);
        
        
        return found;
❱

