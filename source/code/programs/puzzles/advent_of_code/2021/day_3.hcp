class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    int binary_size = lines[0].size();
    
    
    int ones = 0;
    int zeros = 0;
    
    std::string most_sig;
    std::string least_sig;
    
    for (size_t i = 0; i < binary_size; ++i){
        for (auto const& line: lines){
            if (line[i] == '0'){
                zeros++;
            }
            else{
                ones++;
            }
        }
        
        //build 
        if (ones > zeros){
            most_sig += "1";
            least_sig += "0";
        }
        else{
            most_sig += "0";
            least_sig += "1";
        }
        
        //clear
        ones = 0;
        zeros = 0;
    }
    
    std::cout << most_sig << std::endl;
    std::cout << most_sig << " = " << Binary_To_Decimal(most_sig) << std::endl;
    std::cout << least_sig << " = " << Binary_To_Decimal(least_sig) << std::endl;
    std::cout << Binary_To_Decimal(most_sig) * Binary_To_Decimal(least_sig) << std::endl;

❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰


❱