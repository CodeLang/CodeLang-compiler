class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    // Example1();
    // exit(0);
    
    Instructions_Getter_Settings settings;
    settings.nop = "noop";
    settings.acc = "addx";
    settings.jmp = "jmp";
    
    auto instructions = Instructions_Getter::Get_Instructions(lines,settings);
    
    auto results = Run(instructions);
    auto answer = Accumulate(results);
    Exit_If_Not_Equal(answer,13140);

❱



◀public: static▶ void ☀Example1() ❰

std::vector<std::string> lines;
lines.emplace_back("addx 15");
lines.emplace_back("addx -11");
lines.emplace_back("addx 6");
lines.emplace_back("addx -3");
lines.emplace_back("addx 5");
lines.emplace_back("addx -1");
lines.emplace_back("addx -8");
lines.emplace_back("addx 13");
lines.emplace_back("addx 4");
lines.emplace_back("noop");
lines.emplace_back("addx -1");
lines.emplace_back("addx 5");
lines.emplace_back("addx -1");
lines.emplace_back("addx 5");
lines.emplace_back("addx -1");
lines.emplace_back("addx 5");
lines.emplace_back("addx -1");
lines.emplace_back("addx 5");
lines.emplace_back("addx -1");
lines.emplace_back("addx -35");
lines.emplace_back("addx 1");
lines.emplace_back("addx 24");
lines.emplace_back("addx -19");
lines.emplace_back("addx 1");
lines.emplace_back("addx 16");
lines.emplace_back("addx -11");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 21");
lines.emplace_back("addx -15");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx -3");
lines.emplace_back("addx 9");
lines.emplace_back("addx 1");
lines.emplace_back("addx -3");
lines.emplace_back("addx 8");
lines.emplace_back("addx 1");
lines.emplace_back("addx 5");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx -36");
lines.emplace_back("noop");
lines.emplace_back("addx 1");
lines.emplace_back("addx 7");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 2");
lines.emplace_back("addx 6");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 7");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("addx -13");
lines.emplace_back("addx 13");
lines.emplace_back("addx 7");
lines.emplace_back("noop");
lines.emplace_back("addx 1");
lines.emplace_back("addx -33");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 2");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 8");
lines.emplace_back("noop");
lines.emplace_back("addx -1");
lines.emplace_back("addx 2");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("addx 17");
lines.emplace_back("addx -9");
lines.emplace_back("addx 1");
lines.emplace_back("addx 1");
lines.emplace_back("addx -3");
lines.emplace_back("addx 11");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx -13");
lines.emplace_back("addx -19");
lines.emplace_back("addx 1");
lines.emplace_back("addx 3");
lines.emplace_back("addx 26");
lines.emplace_back("addx -30");
lines.emplace_back("addx 12");
lines.emplace_back("addx -1");
lines.emplace_back("addx 3");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx -9");
lines.emplace_back("addx 18");
lines.emplace_back("addx 1");
lines.emplace_back("addx 2");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 9");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx -1");
lines.emplace_back("addx 2");
lines.emplace_back("addx -37");
lines.emplace_back("addx 1");
lines.emplace_back("addx 3");
lines.emplace_back("noop");
lines.emplace_back("addx 15");
lines.emplace_back("addx -21");
lines.emplace_back("addx 22");
lines.emplace_back("addx -6");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("addx 2");
lines.emplace_back("addx 1");
lines.emplace_back("noop");
lines.emplace_back("addx -10");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("addx 20");
lines.emplace_back("addx 1");
lines.emplace_back("addx 2");
lines.emplace_back("addx 2");
lines.emplace_back("addx -6");
lines.emplace_back("addx -11");
lines.emplace_back("noop");
lines.emplace_back("noop");
lines.emplace_back("noop");

    Instructions_Getter_Settings settings;
    settings.nop = "noop";
    settings.acc = "addx";
    settings.jmp = "jmp";
    
    auto instructions = Instructions_Getter::Get_Instructions(lines,settings);
    
    auto results = Run(instructions);
    
    auto answer = Accumulate(results);
    Exit_If_Not_Equal(answer,13140);
    
    
    
❱


◀private: static▶ std::vector<int> ☀Run(std::vector<Instruction> const& instructions) ❰


    std::set<int> cycle_times;
    cycle_times.insert(20);
    cycle_times.insert(60);
    cycle_times.insert(100);
    cycle_times.insert(140);
    cycle_times.insert(180);
    cycle_times.insert(220);
    
    std::vector<int> results;
    
    std::vector<std::string> crt;
    for (size_t i = 0; i < 40*6; ++i){
        crt.emplace_back(".");
    }
    
    int total = 1;
    
        int cycle = 0;
        for (size_t i = 0; i < instructions.size(); ++i){
            
            ++cycle;
            Handle_Cycle(cycle_times,cycle,total,crt,results);
            
            if (instructions[i].op_code == Operation_Type::NOP){
            }
            
            if (instructions[i].op_code == Operation_Type::ACC){
                
                ++cycle;
                Handle_Cycle(cycle_times,cycle,total,crt,results);
                
                total += instructions[i].args[0];
                
            }
        }
        
        
        
    int index = 0;
    for (size_t i = 0; i < 6; ++i){
        for (size_t j = 0; j < 40; ++j){
            std::cout << crt[index];
            ++index;
        }
        std::cout << std::endl;
    }
    
    std::cout << std::endl;
    //exit(0);
    
    
    
    
    
    return results;

❱


◀private: static▶ void ☀Handle_Cycle(std::set<int> const& cycle_times, int & cycle, int total, std::vector<std::string> & crt, std::vector<int> & results) ❰

    if (cycle_times.count(cycle)){
        
        //std::cout << cycle << " = " << total << std::endl;
        results.emplace_back(cycle * total);
    }
    
    
    int test_cycle = (cycle-1);
    
    while (test_cycle >= 40){
        test_cycle-=40;
    }
    
    std::cout << total << " == " << cycle << std::endl;
    if (total == test_cycle-1 || total == test_cycle || total == test_cycle+1 ){
        crt[cycle] = "#";
    }

❱



◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰
    
❱

