class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    auto parts = Split_Each_Line_By_Space(lines);
    
    //settings
    int win_bonus = 6;
    int draw_bonus = 3;
    int lose_bonus = 0;
    
    std::map<std::string,Rock_Paper_Scissors_Move> move_symbol;
    move_symbol.insert({"A",Rock_Paper_Scissors_Move::ROCK});
    move_symbol.insert({"X",Rock_Paper_Scissors_Move::ROCK});
    move_symbol.insert({"B",Rock_Paper_Scissors_Move::PAPER});
    move_symbol.insert({"Y",Rock_Paper_Scissors_Move::PAPER});
    move_symbol.insert({"C",Rock_Paper_Scissors_Move::SCISSORS});
    move_symbol.insert({"Z",Rock_Paper_Scissors_Move::SCISSORS});
    
    std::map<Rock_Paper_Scissors_Move,int> move_bonus;
    move_bonus.insert({Rock_Paper_Scissors_Move::ROCK,1});
    move_bonus.insert({Rock_Paper_Scissors_Move::PAPER,2});
    move_bonus.insert({Rock_Paper_Scissors_Move::SCISSORS,3});
    
    
    
    int total_score = 0;
    for (auto it: parts){
        auto p1 = move_symbol.find(it[0])->second;
        auto p2 = move_symbol.find(it[1])->second;
        
        //draw
        if (p1 == p2){
            total_score += draw_bonus;
        }
        
        //someone wins
        else if (p2 == Rock_Paper_Scissors_Move::ROCK && p1 == Rock_Paper_Scissors_Move::SCISSORS){
            total_score += win_bonus;
        }
        else if (p2 == Rock_Paper_Scissors_Move::PAPER && p1 == Rock_Paper_Scissors_Move::ROCK){
            total_score += win_bonus;
        }
        else if (p2 == Rock_Paper_Scissors_Move::SCISSORS && p1 == Rock_Paper_Scissors_Move::PAPER){
            total_score += win_bonus;
        }
        else{
            total_score += lose_bonus;
        }
        
        
        //move bonus
        total_score += move_bonus.find(p2)->second;
    }
    
     Exit_If_Not_Equal(total_score,13526);
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

    auto parts = Split_Each_Line_By_Space(lines);
    
    //settings
    int win_bonus = 6;
    int draw_bonus = 3;
    int lose_bonus = 0;
    
    std::map<std::string,Rock_Paper_Scissors_Move> move_symbol;
    move_symbol.insert({"A",Rock_Paper_Scissors_Move::ROCK});
    move_symbol.insert({"X",Rock_Paper_Scissors_Move::ROCK});
    move_symbol.insert({"B",Rock_Paper_Scissors_Move::PAPER});
    move_symbol.insert({"Y",Rock_Paper_Scissors_Move::PAPER});
    move_symbol.insert({"C",Rock_Paper_Scissors_Move::SCISSORS});
    move_symbol.insert({"Z",Rock_Paper_Scissors_Move::SCISSORS});
    
    std::map<Rock_Paper_Scissors_Move,int> move_bonus;
    move_bonus.insert({Rock_Paper_Scissors_Move::ROCK,1});
    move_bonus.insert({Rock_Paper_Scissors_Move::PAPER,2});
    move_bonus.insert({Rock_Paper_Scissors_Move::SCISSORS,3});
    
    
    
    int total_score = 0;
    for (auto it: parts){
        auto p1 = move_symbol.find(it[0])->second;
        auto p2 = move_symbol.find(it[1])->second;
        
        p2 = Choose_Move(p1,p2);
        
        //draw
        if (p1 == p2){
            total_score += draw_bonus;
        }
        
        //someone wins
        else if (p2 == Rock_Paper_Scissors_Move::ROCK && p1 == Rock_Paper_Scissors_Move::SCISSORS){
            total_score += win_bonus;
        }
        else if (p2 == Rock_Paper_Scissors_Move::PAPER && p1 == Rock_Paper_Scissors_Move::ROCK){
            total_score += win_bonus;
        }
        else if (p2 == Rock_Paper_Scissors_Move::SCISSORS && p1 == Rock_Paper_Scissors_Move::PAPER){
            total_score += win_bonus;
        }
        else{
            total_score += lose_bonus;
        }
        
        
        //move bonus
        total_score += move_bonus.find(p2)->second;
    }
    
     Exit_If_Not_Equal(total_score,14204);
    
❱

◀public: static▶ Rock_Paper_Scissors_Move ☀Choose_Move(Rock_Paper_Scissors_Move p1, Rock_Paper_Scissors_Move result) ❰

    // must lose
    if (result == Rock_Paper_Scissors_Move::ROCK){
        
        if (p1 == Rock_Paper_Scissors_Move::ROCK){
            return Rock_Paper_Scissors_Move::SCISSORS;
        }
        if (p1 == Rock_Paper_Scissors_Move::PAPER){
            return Rock_Paper_Scissors_Move::ROCK;
        }
        if (p1 == Rock_Paper_Scissors_Move::SCISSORS){
            return Rock_Paper_Scissors_Move::PAPER;
        }
    }
    
    // must draw
    if (result == Rock_Paper_Scissors_Move::PAPER){
            return p1;
    }
    
    //must win
    if (p1 == Rock_Paper_Scissors_Move::ROCK){
        return Rock_Paper_Scissors_Move::PAPER;
    }
    if (p1 == Rock_Paper_Scissors_Move::PAPER){
        return Rock_Paper_Scissors_Move::SCISSORS;
    }
    if (p1 == Rock_Paper_Scissors_Move::SCISSORS){
        return Rock_Paper_Scissors_Move::ROCK;
    }
    
    //shouldn't happen
    return Rock_Paper_Scissors_Move::PAPER;

❱

