class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰


    int sum = 0;

    for (auto it: lines){
        auto split = Split_In_Half(it);
        
        auto s1 = Create_From_String(split.first);
        auto s2 = Create_From_String(split.second);
        
        auto intersect = Get_Intersection(s1,s2);
        
        for (auto it: intersect){
            sum += Convert_To_Priority(it);
        }
    }
    
    Exit_If_Not_Equal(sum,7763);
    

❱

◀public: static▶ int ☀Convert_To_Priority(char c) ❰
    
    if (c >= 'a' && c <= 'z'){
        return static_cast<int>(c) - 96;
    }
    
    return static_cast<int>(c) - 38;
    
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

    int sum = 0;

    auto sections = Split_Every_N(lines,3);
    for (auto section: sections){
        
        auto s1 = Create_From_String(section[0]);
        auto s2 = Create_From_String(section[1]);
        auto s3 = Create_From_String(section[2]);
        
        auto intersect = Get_Intersection(s1,s2);
        auto intersect2 = Get_Intersection(intersect,s3);
        
        for (auto it: intersect2){
            sum += Convert_To_Priority(it);
        }
    }
    
    
    
    Exit_If_Not_Equal(sum,2569);
❱