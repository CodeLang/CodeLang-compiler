class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    
    auto parts = Split_By_Spaces(lines);
    
    
    //convert the ascii drawing to an easier structure
    auto stack_lines = parts[0];
    stack_lines = Get_Better_Format_Stack_Lines(stack_lines);
    
    //create actual stacks
    auto stacks = Create_Stacks(stack_lines);
    
    //run operations

❱

◀private: static▶ std::vector<std::string>  ☀Get_Better_Format_Stack_Lines(std::vector<std::string> stack_lines) ❰

    Remove_Last_Element(stack_lines);
    for (auto & it: stack_lines){
        it = string_replace_first_instance_until_no_change(it,"     "," [0] ");
        it = string_replace_all(it," ","");
        it = string_replace_all(it,"[","");
        it = string_replace_all(it,"]","");
    }
    
        for (auto it: stack_lines){
        std::cout << it << std::endl;
    }
    
    auto longest = Get_Longest_String_Length_In_Vector(stack_lines);
    for (auto & it: stack_lines){
        Append_N_Times(it,"0",longest-it.size());
    }
    
    
    for (auto it: stack_lines){
        std::cout << it << std::endl;
    }
    std::cout << std::endl;
    
    stack_lines = rotate90(stack_lines);
    
    for (auto & it: stack_lines){
        Remove_All_Instances_Of_Char(it,'0');
    }
    return stack_lines;
❱

◀private: static▶ string_stacks  ☀Create_Stacks(std::vector<std::string> stack_lines)❰

    string_stacks results;
    for (auto const& it: stack_lines){
        std::stack<std::string> s;
        for (auto x: it){
            std::string str;
            str += x;
            s.push(str);
        }
        results.emplace_back(s);
    }
    
    return results;
❱
    


◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

❱

