class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    
    auto parts = Split_By_Spaces(lines);
    
    
    //convert the ascii drawing to an easier structure
    auto stack_lines = parts[0];
    stack_lines = Get_Better_Format_Stack_Lines(stack_lines);
    
    //create actual stacks
    auto stacks = Create_Stacks(stack_lines);
    
    //run operations
    auto actions = Get_Actions(parts[1]);
    for (auto numbers: actions){
        
        
        for (size_t i = 0; i < numbers[0]; ++i){
            
            // move element
            auto top = stacks[numbers[1]-1].top();
            stacks[numbers[1]-1].pop();
            
            stacks[numbers[2]-1].push(top);
        }
    }
    
    
    std::string answer;
    for (auto it: stacks){
        answer += it.top();
    }
    
    Exit_If_Not_Equal(answer,"GRTSWNJHH");

❱

◀private: static▶ std::vector<std::string>  ☀Get_Better_Format_Stack_Lines(std::vector<std::string> stack_lines) ❰

    Remove_Last_Element(stack_lines);
    for (auto & it: stack_lines){
        it = string_replace_first_instance_until_no_change(it,"     "," [0] ");
        it = string_replace_all(it," ","");
        it = string_replace_all(it,"[","");
        it = string_replace_all(it,"]","");
    }
    
    auto longest = Get_Longest_String_Length_In_Vector(stack_lines);
    for (auto & it: stack_lines){
        Append_N_Times(it,"0",longest-it.size());
    }
    
    
    
    stack_lines = rotate90(stack_lines);
    
    for (auto & it: stack_lines){
        Remove_All_Instances_Of_Char(it,'0');
    }
    return stack_lines;
❱

◀private: static▶ string_stacks  ☀Create_Stacks(std::vector<std::string> stack_lines)❰

    string_stacks results;
    for (auto const& it: stack_lines){
        std::stack<std::string> s;
        for (auto x: it){
            std::string str;
            str += x;
            s.push(str);
        }
        results.emplace_back(s);
    }
    
    return results;
❱


◀private: static▶ std::vector<std::vector<int>> ☀Get_Actions(std::vector<std::string> action_lines)❰

    std::vector<std::vector<int>> results;

    for (auto it: action_lines){
        
        
        it = string_replace_all(it,"move ","");
        it = string_replace_all(it,"from ","");
        it = string_replace_all(it,"to ","");
        auto numbers = Default_Boost_Tokenize(it);
        
        std::vector<int> temp;
        temp.emplace_back(as_signed(numbers[0]));
        temp.emplace_back(as_signed(numbers[1]));
        temp.emplace_back(as_signed(numbers[2]));
        
        results.emplace_back(temp);
    }
    
    return results;
    
❱


◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰


    auto parts = Split_By_Spaces(lines);
    
    
    
    //convert the ascii drawing to an easier structure
    auto stack_lines = parts[0];
    stack_lines = Get_Better_Format_Stack_Lines(stack_lines);
    
    //create actual stacks
    auto stacks = Create_Stacks(stack_lines);
    
    //run operations
    auto actions = Get_Actions(parts[1]);
    
    for (auto numbers: actions){
        
        
        std::vector<std::string> temp;
        for (size_t i = 0; i < numbers[0]; ++i){
            
            // move element
            auto top = stacks[numbers[1]-1].top();
            stacks[numbers[1]-1].pop();
            
            temp.emplace_back(top);
        }
        
        
        //add them on
        for (size_t i = temp.size(); i > 0; --i){
            stacks[numbers[2]-1].push(temp[i-1]);
        }
        
        
    }
    
    
    std::string answer;
    for (auto it: stacks){
        answer += it.top();
    }
    
    Exit_If_Not_Equal(answer,"QLFQDBBHM");
    

❱

