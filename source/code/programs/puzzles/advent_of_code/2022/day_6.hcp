class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    //settings
    int chunk_amount = 4;

    //test cases
    Exit_If_Not_Equal(5,Get_Index("bvwbjplbgvbhsrlpgdmjqwftvncz",chunk_amount));
    Exit_If_Not_Equal(6,Get_Index("nppdvjthqldpwncqszvftbrmjlhg",chunk_amount));
    Exit_If_Not_Equal(10,Get_Index("nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg",chunk_amount));
    Exit_If_Not_Equal(11,Get_Index("zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw",chunk_amount));
    
    //puzzle input
    Exit_If_Not_Equal(1848,Get_Index(lines[0],chunk_amount));
    

❱

◀private: static▶ size_t ☀Get_Index(std::string str, int chunk_amount) ❰

    std::vector<char> vec;
    for (size_t i = 0; i < str.size(); ++i){
        
        
        auto found = Get_Index_Of_Element_If_Exists(vec,str[i]);
        if (found != -1){
            Remove_Element_Range(vec,0,found);
        }
        
        Add(vec,str[i]);
        
        
        
        if (vec.size() == chunk_amount){
            return i+1;
        }
    }


❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

    //settings
    int chunk_amount = 14;
    
    //puzzle input
    Exit_If_Not_Equal(2308,Get_Index(lines[0],chunk_amount));
❱