class
⚯
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰


    //Example();


    Cleanup_Input(lines);
    auto tree = Create_File_Tree(lines);
    auto answer = Calculate_Total(tree);
    Exit_If_Not_Equal(answer,1350966);
❱




◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

    Cleanup_Input(lines);
    auto tree = Create_File_Tree(lines);
    
    size_t total_disk_space = 70000000;
    size_t current_utlization = Calculate_SubTotal(tree,tree.nodes.begin());
    size_t current_free_space = total_disk_space - current_utlization;
    size_t needed_space = 30000000;
    size_t how_much_needs_to_be_deleted = needed_space - current_free_space;
    
    
    auto nums = Calculate_SubTotals(tree);

    auto answer = Get_Lowest_Val_Above_Amount(nums,how_much_needs_to_be_deleted);
    
    Exit_If_Not_Equal(answer,6296435);
    
❱



◀private: static▶ size_t ☀Get_Lowest_Val_Above_Amount(std::vector<size_t> nums, size_t num) ❰

std::sort(nums.begin(),nums.end());

    for (auto it: nums){
        if (it > num){
            return it;
        }
    }
    return 0;
❱



◀private: static▶ void ☀Example() ❰

std::vector<std::string> lines;
lines.emplace_back("$ cd /");
lines.emplace_back("$ ls");
lines.emplace_back("dir a");
lines.emplace_back("14848514 b.txt");
lines.emplace_back("8504156 c.dat");
lines.emplace_back("dir d");
lines.emplace_back("$ cd a");
lines.emplace_back("$ ls");
lines.emplace_back("dir e");
lines.emplace_back("29116 f");
lines.emplace_back("2557 g");
lines.emplace_back("62596 h.lst");
lines.emplace_back("$ cd e");
lines.emplace_back("$ ls");
lines.emplace_back("584 i");
lines.emplace_back("$ cd ..");
lines.emplace_back("$ cd ..");
lines.emplace_back("$ cd d");
lines.emplace_back("$ ls");
lines.emplace_back("4060174 j");
lines.emplace_back("8033020 d.log");
lines.emplace_back("5626152 d.ext");
lines.emplace_back("7214296 k");


Cleanup_Input(lines);
auto tree = Create_File_Tree(lines);
//Print_Tree_As_Json_Blob_Tree::Print(tree.nodes);
auto answer = Calculate_Total(tree);
Exit_If_Not_Equal(answer,95437);


❱

◀private: static▶ void ☀Cleanup_Input(std::vector<std::string> & lines) ❰

    // get rid of stuff we don't need
    Remove_First_Element(lines);
    Remove_Element(lines,std::string("$ ls"));
❱

◀private: static▶ String_Int_Tree ☀Create_File_Tree(std::vector<std::string> const& lines) ❰

    String_Int_Tree tree;
    
    
    //create root node
    auto iter = tree.nodes.begin();
    iter = tree.nodes.insert(iter, {"/",0});
    
    for (auto it: lines){
        
        // add a dir
        if (Begins_With(it,"dir")){
            auto dir_name = Split_By_Spaces(it)[1];
            tree.nodes.append_child(iter, {dir_name,0});
        }
        
        // move up a dir
        else if (Begins_With(it,"$ cd ..")){
            iter = tree.nodes.parent(iter);
        }
        
        // move down a dir
        else if (Begins_With(it,"$ cd ")){
            auto dir_name = Split_By_Spaces(it)[2];
            
            for (size_t i = 0; i < tree.nodes.number_of_children(iter); ++i){
                auto child = tree.nodes.child(iter,i);
                if (child->first == dir_name){
                    iter = child;
                }
            }
        }
        
        //store file
        else {
            auto size = Split_By_Spaces(it)[0];
            auto file_name = Split_By_Spaces(it)[1];
            tree.nodes.append_child(iter, {file_name,as_signed(size)});
        }
        
    }
    
    return tree;
❱

◀private: static▶ int ☀Calculate_Total(String_Int_Tree const& tr) ❰
    int total = 0;
    
    auto subtotals = Calculate_SubTotals(tr);
    
    for (auto subtotal: subtotals){
        if (subtotal < 100000){
            total += subtotal;
        }
    }
    
    return total;
❱

◀private: static▶ std::vector<size_t> ☀Calculate_SubTotals(String_Int_Tree const& tr) ❰
    std::vector<size_t> totals;
    for (auto it = tr.nodes.begin(); it != tr.nodes.end(); ++it){
        int subtotal = Calculate_SubTotal(tr,it);
        totals.emplace_back(subtotal);
    }
    
    return totals;
❱

◀private: static▶ size_t ☀Calculate_SubTotal(String_Int_Tree const& tr, tree<std::pair<std::string,int>>::pre_order_iterator subnode) ❰

    size_t total = 0;
    for (auto it = tree<std::pair<std::string,int>>::pre_order_iterator(subnode.begin()); it != tree<std::pair<std::string,int>>::pre_order_iterator(subnode.end()); ++it){
        total += it->second;
    }
    
    return total;

❱