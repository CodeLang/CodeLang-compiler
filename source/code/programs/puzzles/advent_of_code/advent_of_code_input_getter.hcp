class
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/streams/filestreams/write_all/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/program/wrappers/curl/curl_runner"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪pybind11/embed.h❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Get(std::string const& year, std::string const& day) ❰


    //where to get the input from
    auto storage_folder = Full_Path_To_Desktop() + "aoc/";
    Create_Path_If_It_Doesnt_Already_Exist(storage_folder);
    
    std::string domain = "adventofcode.com";
    
    std::cout << "day " << day << "..." << std::endl;
    
    
    //download the problem statement in case we want to work on the problems offline.
    std::string desc_url = "https://" + domain + "/" + year + "/day/" + day;
    std::string desc_file = storage_folder + "advent_" + year + "_" + day + "_desc.txt";
    Get_Input_From_Cache_Or_Website(desc_url,desc_file);
    
    //download the input file to make automation easier/faster/work offline.
    std::string input_url = "https://" + domain + "/" + year + "/day/" + day + "/input";
    std::string input_file = storage_folder + "advent_" + year + "_" + day + ".txt";
    return Get_Input_From_Cache_Or_Website(input_url,input_file);
❱


◀private: static▶ std::vector<std::string> ☀Get_Input_From_Cache_Or_Website(std::string const& url, std::string const& file) ❰

    std::vector<std::string> lines;
    if (File_Exists(file)){
        lines = Read_Each_Line_Of_File_Into_Vector(file);
    }
    else{
        lines = Get_From_Website(url);
        
        //cache the file locally so we don't have to keep querying the server.
        Write_Each_Line_Of_Vector_Into_File(file,lines);
    }
    
    return lines;
❱


◀private: static▶ std::vector<std::string> ☀Get_From_Website(std::string const& url) ❰

    //return Get_Content_Through_Headless_Selenium_Browser(url);
    return Get_Content_Through_Curl(url);
❱

◀private: static▶ std::vector<std::string> ☀Get_Content_Through_Headless_Selenium_Browser(std::string const& url) ❰

    //get the input (we have to use a browser driver because we need to be logged in)
    pybind11::scoped_interpreter py_guard{};
    auto settings = Default_Browser_Settings_Getter::Get();
    settings.headless = true;
    Browser_Creator::Create(settings);
    auto lines = Browser_Navigator::Go_To_Url_And_Extract_Lines(settings,url);
    
    //there's some html cruft to remove
    Keep_End_Chars_Until_Char_Is_Found(lines[0],'>');
    Remove_Last_Element(lines);
    
    return lines;
❱

◀private: static▶ std::vector<std::string> ☀Get_Content_Through_Curl(std::string const& url) ❰
    std::string cookie = "_ga=GA1.2.1084420399.1669903674; _gid=GA1.2.1141345242.1669903674; session=53616c7465645f5f819fde3bc717bfb0ea434131b473684e8d0ea35e48fc0689c5ab5c1dd7500b5d21c29c185ec0aed05a538df64d02f0d7a066d6cb8a45bf3e";
    auto result = Curl_Runner::Run(url,cookie);
    return Split_Into_Parts_From_Newline(result);
❱

