class
⚯
⚞⚟

◀public: static▶ void ☀Refresh()❰

    //main file
    Write_To_File(Get_Bazelrc_File_Path(),Create_Bazelrc_Contents());
    
    //sub-files
    Write_To_File(Get_General_Bazelrc_File_Path(),Create_General_Bazelrc_Contents());
    Write_To_File(Get_Sanitizer_Bazelrc_File_Path(),Create_Sanitizer_Bazelrc_Contents());
    Write_To_File(Get_Clang_Tidy_Bazelrc_File_Path(),Create_Clang_Tidy_Bazelrc_Contents());
    Write_To_File(Get_IWYU_Bazelrc_File_Path(),Create_IWYU_Bazelrc_Contents());
    Write_To_File(Get_Remote_Bazelrc_File_Path(),Create_Remote_Bazelrc_Contents());
    Write_To_File(Get_Wasm_Bazelrc_File_Path(),Create_Wasm_Bazelrc_Contents());
    


❱

◀private: static▶ std::string ☀Create_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.general");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.sanitizers");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.clang_tidy");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.iwyu");
    Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.remote");
    //Append_With_Newline(str,"import %workspace%/bazel/config/bazelrc.wasm");
    
    return str;
❱

◀private: static▶ std::string ☀Create_Wasm_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    return str;
❱


◀private: static▶ std::string ☀Create_General_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    //backwards compatibility junk (Try to remove these)
    //Append_With_Newline(str,"build --incompatible_disable_crosstool_file=false");
    //Append_With_Newline(str,"build --incompatible_use_python_toolchains=false");
    //Append_With_Newline(str,"build --incompatible_use_specific_tool_files=false");
    
    //Sometimes we want to keep going (depends on state of the repo)
    //Append_With_Newline(str,"build --keep_going");
    
    //trying to fix java jni issue
    //Append_With_Newline(str,"build --javabase=@embedded_jdk//:jdk");
    //Append_With_Newline(str,"build --javabase=@bazel_tools//tools/jdk:remote_jdk");
    
    
    //hermetic toolchain
    //we don't need to pass crosstool_top anymore and it will one day be deprecated
    //Append_With_Newline(str,"build --crosstool_top=@llvm_toolchain//:toolchain");
    
    //instead we allow cc_toolchain resolution to choose the correct toolchain that was registered through bazel rules
    //one day this flag will be the default and we can remove it here as well
    //TODO(thickey): remove flag
    
    Append_With_Newline(str,"# compatibility flags");
    Append_With_Newline(str,"build --incompatible_enable_cc_toolchain_resolution");
    Append_With_Newline(str,"");
    //Append_With_Newline(str,"build --incompatible_restrict_string_escapes=false");
    
    
    //faster to build here?
    //codeship does not have this.
    //https://app.codeship.com/projects/340017/builds/44589606?pipeline=53b461c2-ec88-4fb5-9c37-c59f7a29c29f
    //Append_With_Newline(str,"build --experimental_sandbox_base=/run/shm");
    
    //I don't want the symlinks showing up in the repository.
    //Its bad for IDEs, and prevents code from accidentally relying on their existence
    //Append_With_Newline(str,"build --experimental_convenience_symlinks=ignore");
    
    
    //BES Stuff
    // build --bes_results_url=http://localhost:8080/invocation/
    // build --bes_backend=grpc://localhost:1985
    // build --remote_cache=grpc://localhost:1985
    
    //allow unilang to write to places outside of the main repo
    
    Append_With_Newline(str,"# performance and resources");
    Append_With_Newline(str,"build --jobs=HOST_CPUS*2");
    Append_With_Newline(str,"build --sandbox_base=/dev/shm");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Unilang exporting");
    Append_With_Newline(str,"build:unilang --sandbox_writable_path=" + Full_Path_To_Desktop() + "repos");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# repository cache related");
    Append_With_Newline(str,"common --repository_cache=/home/luxe/Desktop/unilang_repo_cache");
    Append_With_Newline(str,"");
    
    // Breaks repository cache a lot when regenerating build files (even when regenerated files haven't actually changed)
    //Append_With_Newline(str,"common --experimental_repository_cache_urls_as_default_canonical_id");
    
    
    Append_With_Newline(str,"# Java Stuff");
    std::vector<std::string> verbs {"fetch", "sync", "build", "test"}; //can't do common because it breaks "query".
    for (auto const& it: verbs){
        Append_With_Newline(str,it + " --java_language_version=11");
        Append_With_Newline(str,it + " --java_runtime_version=remotejdk_11");
    }
    Append_With_Newline(str,"");
    
    return str;
❱

◀private: static▶ std::string ☀Create_Sanitizer_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    //make fuzzing possible
    Append_With_Newline(str,"# Make asan fuzzing possible");
    
    Append_With_Newline(str,"# --config=libfuzzer");
    Append_With_Newline(str,"build:libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer");
    Append_With_Newline(str,"build:libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# --config=asan-libfuzzer");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer");
    Append_With_Newline(str,"build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan");
    Append_With_Newline(str,"");

    Append_With_Newline(str,"# --config=msan-libfuzzer");
    Append_With_Newline(str,"build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer");
    Append_With_Newline(str,"build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer");
    Append_With_Newline(str,"build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=msan");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# --config=honggfuzz");
    Append_With_Newline(str,"build:honggfuzz --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:honggfuzz");
    Append_With_Newline(str,"build:honggfuzz --@rules_fuzzing//fuzzing:cc_engine_instrumentation=honggfuzz");
    Append_With_Newline(str,"");

    Append_With_Newline(str,"# --config=asan-honggfuzz");
    Append_With_Newline(str,"build:asan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:honggfuzz");
    Append_With_Newline(str,"build:asan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine_instrumentation=honggfuzz");
    Append_With_Newline(str,"build:asan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan");
    Append_With_Newline(str,"");

    Append_With_Newline(str,"# --config=msan-honggfuzz");
    Append_With_Newline(str,"build:msan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:honggfuzz");
    Append_With_Newline(str,"build:msan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine_instrumentation=honggfuzz");
    Append_With_Newline(str,"build:msan-honggfuzz --@rules_fuzzing//fuzzing:cc_engine_sanitizer=msan");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# --config=replay");
    Append_With_Newline(str,"build:replay --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:replay");
    Append_With_Newline(str,"build:replay --@rules_fuzzing//fuzzing:cc_engine_instrumentation=none");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# --config=asan-replay");
    Append_With_Newline(str,"build:asan-replay --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:replay");
    Append_With_Newline(str,"build:asan-replay --@rules_fuzzing//fuzzing:cc_engine_instrumentation=none");
    Append_With_Newline(str,"build:asan-replay --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan");
    Append_With_Newline(str,"");

    Append_With_Newline(str,"# --config=jazzer (Jazzer without sanitizer - Java only)");
    Append_With_Newline(str,"build:jazzer --@rules_fuzzing//fuzzing:java_engine=@rules_fuzzing//fuzzing/engines:jazzer");
    Append_With_Newline(str,"build:jazzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=jazzer");
    Append_With_Newline(str,"build:jazzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=none");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# --config=asan-jazzer");
    Append_With_Newline(str,"build:asan-jazzer --@rules_fuzzing//fuzzing:java_engine=@rules_fuzzing//fuzzing/engines:jazzer");
    Append_With_Newline(str,"build:asan-jazzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=jazzer");
    Append_With_Newline(str,"build:asan-jazzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan");
    Append_With_Newline(str,"");
    
    //enable other sanitizers
    Append_With_Newline(str,"# Make asan possible");
    Append_With_Newline(str,"build:asan --copt=-fsanitize=address");
    Append_With_Newline(str,"build:asan --linkopt=-fsanitize=address");
                            // "-fno-sanitize-recover=all",
                            // "-DADDRESS_SANITIZER",
                            // "-DLEAK_SANITIZER",
                            // # https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
                            // "-U_FORTIFY_SOURCE",
                            // "-mllvm",
                            // "-asan-use-private-alias=1",
                            // --linkopts=-fsanitize-link-c++-runtime
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Make ubsan possible");
    Append_With_Newline(str,"build:ubsan --copt=-fsanitize=undefined");
    Append_With_Newline(str,"build:ubsan --copt=-fno-sanitize-recover=all");
    Append_With_Newline(str,"build:ubsan --linkopt=-fsanitize=undefined");
                            // "-DUNDEFINED_BEHAVIOR_SANITIZER",
                            // "-fno-sanitize=float-divide-by-zero",
                            // "-fno-sanitize=vptr",
                            // # https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
                            // "-U_FORTIFY_SOURCE",
                            // --linkopts=-fsanitize-link-c++-runtime
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Make msan possible");
    Append_With_Newline(str,"build:msan --copt=-fsanitize=memory");
    Append_With_Newline(str,"build:msan --copt=-fsanitize-memory-track-origins");
    Append_With_Newline(str,"build:msan --copt=-fno-sanitize-recover=all");
    Append_With_Newline(str,"build:msan --linkopt=-fsanitize=memory");
                            // "-DMEMORY_SANITIZER",
                            // # https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
                            // "-U_FORTIFY_SOURCE",
                            // --linkopts=-fsanitize-link-c++-runtime
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Make tsan possible");
    Append_With_Newline(str,"build:tsan --copt=-fsanitize=thread");
    Append_With_Newline(str,"build:tsan --copt=-fno-sanitize-recover=all");
    Append_With_Newline(str,"build:tsan --linkopt=-fsanitize=thread");
                            // "-DTHREAD_SANITIZER",
                            // # https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
                            // "-U_FORTIFY_SOURCE",
                            // --linkopts=-fsanitize-link-c++-runtime
    Append_With_Newline(str,"");

    
    return str;
❱


◀private: static▶ std::string ☀Create_Clang_Tidy_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    Append_With_Newline(str,"# Required for bazel_clang_tidy to operate as expected");
    Append_With_Newline(str,"build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect");
    Append_With_Newline(str,"build:clang-tidy --output_groups=report");
    Append_With_Newline(str,"");
    Append_With_Newline(str,"# Optionally override the .clang-tidy config file target");
    Append_With_Newline(str,"build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config");
    Append_With_Newline(str,"");
    Append_With_Newline(str,"# by default, bazel_clang_tidy uses the system provided clang-tidy. If you have a hermetic build, you can use your own clang-tidy target like this:");
    Append_With_Newline(str,"build:clang-tidy --@bazel_clang_tidy//:clang_tidy_executable=@llvm_toolchain//:bin/clang-tidy");

    
    return str;

❱

◀private: static▶ std::string ☀Create_IWYU_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    Append_With_Newline(str,"# Allow running the aspect to find C/C++ header corrections");
    Append_With_Newline(str,"build:iwyu --aspects @com_github_storypku_bazel_iwyu//bazel/iwyu:iwyu.bzl%iwyu_aspect");
    Append_With_Newline(str,"build:iwyu --output_groups=report");

    
    return str;

❱



◀private: static▶ std::string ☀Create_Remote_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    Append_With_Newline(str,"# A good reference for remote configs can be found here:");
    Append_With_Newline(str,"# https://github.com/bazelbuild/bazel-toolchains/blob/master/bazelrc/");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Where is the RBE system?");
    Append_With_Newline(str,"# Assume localhost");
    Append_With_Newline(str,"build:remote --remote_executor=grpc://127.0.0.1:8980");
    Append_With_Newline(str,"");
    
    
    Append_With_Newline(str,"# C++ related:");
    Append_With_Newline(str,"build:remote --crosstool_top=@rbe_default//cc:toolchain");
    Append_With_Newline(str,"build:remote --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Java related:");
    Append_With_Newline(str,"# Set several flags related to specifying the platform, toolchain and java properties.");
    Append_With_Newline(str,"# These flags should only be used as is for the rbe-ubuntu16-04 container");
    Append_With_Newline(str,"# and need to be adapted to work with other toolchain containers.");
    Append_With_Newline(str,"build:remote --java_runtime_version=rbe_jdk");
    Append_With_Newline(str,"build:remote --tool_java_runtime_version=rbe_jdk");
    Append_With_Newline(str,"build:remote --extra_toolchains=@rbe_default//java:all");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Platform related:");
    Append_With_Newline(str,"# The toolchain container used for execution is defined in the target indicated");
    Append_With_Newline(str,"# by \"extra_execution_platforms\", \"host_platform\" and \"platforms\".");
    Append_With_Newline(str,"# More about platforms: https://docs.bazel.build/versions/master/platforms.html");
    Append_With_Newline(str,"build:remote --extra_toolchains=@rbe_default//config:cc-toolchain");
    Append_With_Newline(str,"build:remote --extra_execution_platforms=//:rbe_default");
    Append_With_Newline(str,"build:remote --host_platform=//:rbe_default");
    Append_With_Newline(str,"build:remote --platforms=//:rbe_default");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Depending on how many machines are in the remote execution instance, setting");
    Append_With_Newline(str,"# this higher can make builds faster by allowing more jobs to run in parallel.");
    Append_With_Newline(str,"# Setting it too high can result in jobs that timeout, however, while waiting");
    Append_With_Newline(str,"# for a remote machine to execute them.");
    Append_With_Newline(str,"build:remote --jobs=50");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Starting with Bazel 0.27.0 strategies do not need to be explicitly");
    Append_With_Newline(str,"# defined. See https://github.com/bazelbuild/bazel/issues/7480");
    Append_With_Newline(str,"# https://github.com/bazelbuild/bazel/issues/7254");
    Append_With_Newline(str,"build:remote --define=EXECUTOR=remote");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Enforce stricter environment rules, which eliminates some non-hermetic");
    Append_With_Newline(str,"# behavior and therefore improves both the remote cache hit rate and the");
    Append_With_Newline(str,"# correctness and repeatability of the build.");
    Append_With_Newline(str,"build:remote --incompatible_strict_action_env=true");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# # Set a higher timeout value, just in case.");
    Append_With_Newline(str,"# build:remote --remote_timeout=3600");
    Append_With_Newline(str,"");
    
    Append_With_Newline(str,"# Enable authentication. This will pick up application default credentials by");
    Append_With_Newline(str,"# default. You can use --google_credentials=some_file.json to use a service");
    Append_With_Newline(str,"# account credential instead.");
    Append_With_Newline(str,"build:remote --google_default_credentials=true");
    Append_With_Newline(str,"");

    
    return str;
❱


◀private: static▶ std::string ☀Get_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/.bazelrc";
    return f;
❱
◀private: static▶ std::string ☀Get_General_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.general";
    return f;
❱
◀private: static▶ std::string ☀Get_Sanitizer_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.sanitizers";
    return f;
❱
◀private: static▶ std::string ☀Get_Clang_Tidy_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.clang_tidy";
    return f;
❱
◀private: static▶ std::string ☀Get_IWYU_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.iwyu";
    return f;
❱
◀private: static▶ std::string ☀Get_Remote_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.remote";
    return f;
❱
◀private: static▶ std::string ☀Get_Wasm_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/bazel/config/bazelrc.wasm";
    return f;
❱