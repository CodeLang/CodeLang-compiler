class
⚯

⚞⚟

◀public:

    //unique name for the 3rd party dependency in the monorepo
    std::string ፠lib_name፠;

    std::string ፠download_rule፠ = "http_archive";
    
    //information for fetching the dependency remotely
    std::string ፠owner_name፠;
    std::string ፠repo_name፠;
    std::string ፠sha256፠;
    std::string ፠at_commit፠;
    std::string ፠format፠="tar.gz";
    std::string ፠further_prefix_strip፠;
    
    //if the dependency cannot be mirrored in github, we can provide a direct URL
    //this will avoid all the above pieces that are usually used to construct a URL.
    std::string ፠direct_url፠;
    
    //information for assuming the dependency is already on the system
    //ideally, we don't want this at all, but sometimes its a necessity when hermetics is too hard to achieve.
    //that being said, we really only want 1 dependency to be system.
    //it should be a system dependency for the whole system,
    //and the build file for it includes all of the unhermetic references in 1 place
    bool ፠system፠=false;
    std::string ፠system_path፠;
    
    //all the settings related to patching the dependency
    int ፠patch_commands፠;
    int ፠patch_files፠;
    
    //for dependencies that need dependencies, these are often mapped in
    int ፠repo_mappings፠;
    
    //sometimes the dependency itself is a bazel repo that already has bazel files inside of it.
    //in that case, we don't need to point to our own maintained BUILD rule.
    //if that's the case, we can set this to true.
    //sometimes repositories do have their own bazel BUILD files but they are still hard to integrate.
    //in those cases you sometimes see patch files deleting them, and this staying at false.
    bool ፠build_content_in_dependency፠=false;
    
    bool ፠has_build_file_content፠;
    
    //Sometimes the dependencies need to also put stuff in the repo's main workspace
    bool ፠has_workspace_content፠;
    int ፠workspace_enabled፠;
    int ፠workspace_priority፠;
    
    // We want each all third party dependencies directly referenced by 1 or more wrapper targets
    // The rest of the codebase will access the wrapper targets.
    // This is done to make the includes / bazel deps more predictable.
    // It also helps isolate these third party dependencies for easier repo management
    int ፠wrapper_targets፠;
▶
