class
⚯
⚞⚟


// This creates an HTML table that is helpful for looking at all the current dependencies and stats about them.
◀public: static▶ void ☀Create(Dependency_Specifications const& all_specs)❰


    // Build up html components
    // Using https://datatables.net/
    Basic_Html_Template_Settings settings;
    settings.import_scripts.emplace_back("https://code.jquery.com/jquery-3.5.1.js");
    settings.import_scripts.emplace_back("https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js");
    
    settings.css_imports.emplace_back("https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css");
    
    settings.js = R"RAW_STRING(

$(document).ready(function () {
    $('#data_table').DataTable({
        paging: true,
        ordering: true,
        info: false,
        compact: true,
        autoWidth: false,
        scrollX: true,
    });
});

)RAW_STRING";
    settings.body = Create_Table_Html(all_specs);
    auto page = Basic_Html_Template_Getter::Get(settings);
    
    // write to file
    auto path = "/tmp/bazel_deps_table.html";
    Temp_File tmp(path,page);
    
    
    //upload it
    File_Upload_Settings upload_settings;
    upload_settings.local_file_name = path;
    upload_settings.remote_file_name = "unilang/deps.html";
    
    //dropbox specific
    upload_settings.upload_to_dropbox = false;
    
    //github specific
    upload_settings.upload_to_github = true;
    upload_settings.github_settings.pull_first = false;
    upload_settings.github_settings.update = false;
    
    File_Uploader::Upload(upload_settings);

❱


◀private: static▶ std::string ☀Create_Table_Html(Dependency_Specifications const& all_specs)❰
    std::string str;
    Append_With_Newline(str,"<table id='data_table' class='display' style='width:100%'>");
    
    auto table_entries = Convert_To_Table_Entries(all_specs);
    Append_With_Newline(str,Get_Html_Table_Header(table_entries));
    
    
    Append_With_Newline(str,"<tbody>");
    for (auto it: table_entries){
        Append_With_Newline(str,Get_Html_Table_Row(it));
    }
    Append_With_Newline(str,"</tbody>");
    
    Append_With_Newline(str,"</table>");
    
    
    return str;
❱


◀private: static▶ std::string ☀Get_Html_Table_Header(std::vector<Dependency_Specification_Table_Entry> const& all_entries)❰
    std::string str;
    Append_With_Newline(str,"<thead><tr>");
        nlohmann::json j = all_entries[0];
        std::vector<std::string> keys = Observers::Get_Keys(j);
        for (auto const& key: keys){
            Append(str,"<th>");
            Append(str,key);
            Append_With_Newline(str,"</th>");
        }
        
    Append_With_Newline(str,"</tr></thead>");
    return str;
❱

◀private: static▶ std::string ☀Get_Html_Table_Row(Dependency_Specification_Table_Entry const& entry)❰
    std::string str;
    Append_With_Newline(str,"<tr>");
        nlohmann::json j = entry;
        std::vector<std::string> vals = Observers::Get_Values(j);
        for (auto const& val: vals){
            Append(str,"<td>");
            Append(str,val);
            Append_With_Newline(str,"</td>");
        }
        
    Append_With_Newline(str,"</tr>");
    return str;
❱

◀private: static▶ std::vector<Dependency_Specification_Table_Entry> ☀Convert_To_Table_Entries(Dependency_Specifications const& all_specs)❰
    std::vector<Dependency_Specification_Table_Entry> results;
    
    //convert the data structure to a flat table entry representation of the data structure.
    for (auto const& it: all_specs.specs){
        Dependency_Specification_Table_Entry entry;
        entry.lib_name = it.lib_name;
        entry.download_rule = it.download_rule;
        if (!it.locations.empty()){
            entry.owner_name = it.locations[0].owner_name;
            entry.repo_name = it.locations[0].repo_name;
            entry.sha256 = it.locations[0].sha256;
            entry.at_commit = it.locations[0].at_commit;
            entry.format = it.locations[0].format;
            entry.further_prefix_strip = it.locations[0].further_prefix_strip;
            entry.direct_url = it.locations[0].direct_url;
        }
        entry.system = it.system;
        entry.system_path = it.system_path;
        
        entry.patch_commands = static_cast<int>(it.patch.patch_cmds.size());
        entry.patch_files = static_cast<int>(it.patch.patch_files.size());
        entry.repo_mappings = static_cast<int>(it.repo_mapping.size());
        entry.build_content_in_dependency = it.build_content_in_dependency;
        
        entry.has_build_file_content = !it.build_defs.raw_starlark.empty();
        entry.has_workspace_content = !it.workspace.raw_starlark.empty();
        
        entry.workspace_enabled = it.workspace.enable;
        entry.workspace_priority = it.workspace.priority;
        entry.wrapper_targets = static_cast<int>(it.dep_integration.wrapper_targets.size());
        
        
        
        
        
        results.emplace_back(entry);
    }
    
    
    return results;

❱