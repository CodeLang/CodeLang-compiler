class
⚯
⚞⚟

//TODO: use git_repository instead

◀public: static▶ void ☀Create(Dependency_Specifications const& all_specs)❰

    //move into the folder where all the deps are
    Temporarily_Move_To_Path_To_Call_Function(Bazel_Deps_Directory(),[&](){
    
    
        for (auto it: all_specs.specs){
            
                //create folder
                auto folder_name = As_Removed_Dashes(it.lib_name);
                Create_Path_If_It_Doesnt_Already_Exist(folder_name);
                
                //generate the needed files
                Make_Sure_A_BUILD_File_Is_Available(folder_name);
                Possibily_Print_Get_File(it,folder_name);
        }
    });
❱

◀private: static▶ void ☀Make_Sure_A_BUILD_File_Is_Available(std::string const& folder_name)❰
    
    std::string file_name = folder_name + "/BUILD";
    std::string content = "package(default_visibility = [\"//visibility:public\"])";
    Write_To_File_With_Auto_Gen_Comment(file_name,Source_Language::PYTHON,content);
❱


◀private: static▶ void ☀Possibily_Print_Get_File(Dependency_Specification const& spec, std::string const& folder_name)❰

        if (Should_Print_Get_File(spec)){
            auto source_data  = Create_Get_File_Content(spec,folder_name);
            Write_To_File_With_Auto_Gen_Comment(folder_name + "/get.bzl",Source_Language::PYTHON,source_data);
        }
❱


◀private: static▶ bool ☀Should_Print_Get_File(Dependency_Specification const& spec)❰

    //since not every dependency has been converted or supported for programmatic generation yet,
    //we will only generate these "get files" if they have actual locations on where to get the code.
    if (spec.locations.empty() && !spec.system){
        return false;
    }
    return true;
❱

◀private: static▶ std::string ☀Create_Get_File_Content(Dependency_Specification const& spec, std::string const& folder_name)❰

    //dependency is on the system
    if (spec.system){
        return Create_Local_Get_File_Content(spec,folder_name);
    }
    
    //dependency is hosted remotely
    return Create_Http_Archive_Get_File_Content(spec,folder_name);
❱

◀private: static▶ std::string ☀Create_Http_Archive_Get_File_Content(Dependency_Specification spec, std::string const& folder_name)❰
    std::string result;
    
    Append_With_Newline(result,"load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")");
    Append_With_Newline(result,"load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_file\")");
    Append_With_Newline(result,"load(\"//bazel/deps:deps_config.bzl\", \"main_mirror_url\")");
    Append_With_Newline(result,"");
    Append(result,"def ");
    Append(result,Fix_Casing_For_Bazel(spec.lib_name));
    Append_With_Newline(result,"():");
    Append(result,"    ");
    Append_Download_Rule_Name(result,spec);
    Append_With_Newline(result,"(");
    
    //add name
    Append(result,"        ");
    Append_Key_Value(result,"name",As_Removed_Dashes(spec.lib_name));
    Append_With_Newline(result,",");
    
    //add all the properties
    Add_Build_File(result,folder_name,spec);
    Add_Executable_Flag(result,spec);
    Add_Sha256(result,spec);
    Add_Strip_Prefix(result,spec);
    
    //add urls
    Append(result,"        ");
    Append_With_Newline(result,"urls = [");
    
    for (auto const& it: spec.locations){
        Append(result,"            ");
        Append_In_DQuotes(result,Decide_Url(it));
        Append_With_Newline(result,",");
    }
    
    Append(result,"        ");
    Append(result,"],");
    
    Add_Patch_Files(result,spec,folder_name);
    
    //add patch args
    if (!spec.patch.patch_args.empty()){
        Append(result,"        ");
        Append(result,As_Named_Python_List_Of_Strings("patch_args",spec.patch.patch_args));
        Append_With_Newline(result,",");
    }
    
    //add patch commands
    if (!spec.patch.patch_cmds.empty()){
        Append(result,"        ");
        Append(result,As_Named_Python_List_Of_Strings("patch_cmds",spec.patch.patch_cmds));
        Append_With_Newline(result,",");
    }
    
    //add repo mapping
    if (!spec.repo_mapping.empty()){
        Append(result,"        ");
        Append_With_Newline(result,"repo_mapping = {");
        for (auto const& it: spec.repo_mapping){
            Append(result,"            ");
            Append_In_DQuotes(result,"@" + it.first);
            Append(result," : ");
            Append_In_DQuotes(result,"@" + it.second);
            Append_With_Newline(result,",");
        }
        Append(result,"        ");
        Append_With_Newline(result,"},");
    }
    
    Append_With_Newline(result,"");
    Append(result,"    ");
    Append_With_Newline(result,")");
    
    return result;
❱

◀private: static▶ void ☀Add_Build_File(std::string & result, std::string const& folder_name, Dependency_Specification const& spec)❰

    if (!spec.build_content_in_dependency){
        Append(result,"        ");
        Append_Key_Value(result,"build_file","//bazel/deps/" + folder_name + ":build.BUILD");
        Append_With_Newline(result,",");
    }
❱
◀private: static▶ void ☀Add_Executable_Flag(std::string & result, Dependency_Specification const& spec)❰

    if (spec.download_rule == "http_file"){
        Append(result,"        ");
        Append_Key_True(result,"executable");
        Append_With_Newline(result,",");
    }
❱

◀private: static▶ void ☀Add_Sha256(std::string & result, Dependency_Specification const& spec)❰
    if (!spec.locations[0].sha256.empty()){
        Append(result,"        ");
        Append_Key_Value(result,"sha256",spec.locations[0].sha256);
        Append_With_Newline(result,",");
    }   
❱
◀private: static▶ void ☀Add_Strip_Prefix(std::string & result, Dependency_Specification const& spec)❰
    if (!spec.locations[0].repo_name.empty() && !spec.locations[0].at_commit.empty()){
        Append(result,"        ");
        
        //decide value
        std::string strip_prefix;
        Append(strip_prefix,spec.locations[0].repo_name);
        Append(strip_prefix,"-");
        Append(strip_prefix,spec.locations[0].at_commit);
        if (!spec.locations[0].further_prefix_strip.empty()){
            Append(strip_prefix,"/");
            Append(strip_prefix,spec.locations[0].further_prefix_strip);
        }
        
        Append_Key_Value(result,"strip_prefix",strip_prefix);
        Append_With_Newline(result,",");
    }
❱

◀private: static▶ void ☀Append_Download_Rule_Name(std::string & result, Dependency_Specification const& it)❰

    if (it.download_rule.empty()){
        Append(result,"http_archive");
        return;
    }

    Append(result,it.download_rule);
❱


◀private: static▶ std::string ☀Decide_Url(Dependency_Location const& it)❰

    if (!it.direct_url.empty()){
        return it.direct_url;
    }

    return Github_Url_Getter::Common_Http_Archive_Url(it.owner_name,it.repo_name,it.at_commit,it.format);
❱

◀private: static▶ void ☀Add_Patch_Files(std::string & result, Dependency_Specification spec, std::string const& folder_name)❰

    //transform the patch files if they are relative patches
    std::vector<std::string> patch_files = spec.patch.patch_files;
    for (auto & it: patch_files){
        if (!Begins_With(it,"//")){
            it = "//bazel/deps/" + folder_name + "/patches:" + it + ".patch";
        }
    }
    
    
    //add patch files
    if (!spec.patch.patch_files.empty()){
        Append(result,"        ");
        Append(result,As_Named_Python_List_Of_Strings("patches",patch_files));
        Append_With_Newline(result,",");
    }
❱


◀private: static▶ std::string ☀Create_Local_Get_File_Content(Dependency_Specification spec, std::string const& folder_name)❰

    std::string result;
    Append_With_Newline(result,"");
    Append(result,"def ");
    Append(result,Fix_Casing_For_Bazel(spec.lib_name));
    Append_With_Newline(result,"():");
    Append(result,"    ");
    Append_With_Newline(result,"native.new_local_repository(");
    
    //add name
    Append(result,"        ");
    Append_Key_Value(result,"name",As_Removed_Dashes(spec.lib_name));
    Append_With_Newline(result,",");
    
    //add build file
    if (!spec.build_content_in_dependency){
        Append(result,"        ");
        Append_Key_Value(result,"build_file","//bazel/deps/" + folder_name + ":build.BUILD");
        Append_With_Newline(result,",");
    }
    
    //add path
    Append(result,"        ");
    Append_Key_Value(result,"path",spec.system_path);
    Append_With_Newline(result,",");
    
    Append_With_Newline(result,"");
    Append(result,"    ");
    Append_With_Newline(result,")");
    
    return result;
❱


◀private: static▶ std::string ☀Fix_Casing_For_Bazel(std::string const& str)❰
    //return str;
    auto without_dashes = string_replace_all(str,"-","_");
    return Case_Modifier::As_Modified_Casing(Case_Format_Style::LOWER_CAMEL_CASE,without_dashes);
❱


//string util
◀private: static▶ std::string ☀As_Named_Python_List_Of_Strings(std::string const& name, std::vector<std::string> const& strs)❰
    std::string result;
    Append(result,name);
    Append_With_Newline(result," = [");
    
    for (auto const& it: strs){
        Append(result,"            ");
        Append_In_DQuotes(result,it);
        Append_With_Newline(result,",");
    }
    Append(result,"        ");
    Append(result,"]");
        
    return result;
❱