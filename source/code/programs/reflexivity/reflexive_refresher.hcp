class
❪string❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/programs/reflexivity/settings/reflexive_refresh_settings"❫
❪"code/programs/reflexivity/publish/essays/all_essay_publisher"❫
⚯
❪"code/programs/reflexivity/docker/dockerfile_refresher"❫
❪"code/programs/reflexivity/bazelrc/bazelrc_refresher"❫
❪"code/programs/reflexivity/bazel_wrapper/bazel_wrapper_refresher"❫
❪"code/programs/reflexivity/deps_define/refresh/deps_definition_refresher"❫
❪"code/programs/reflexivity/settings/reflexive_refresh_settings_getter"❫
❪"code/utilities/program/common_actions/locale/lib"❫
❪"code/utilities/program/name/program_name_getter"❫
❪"code/utilities/output/publisher/essay/essay_publisher"❫
❪"code/utilities/code/artifacts/concept_tree/concept_tree_to_image"❫
❪"code/programs/reflexivity/deps_define/scan/deps_repo_scanner"❫
❪"code/utilities/build/self_builder"❫
❪"code/programs/reflexivity/target_build_file_refresher"❫
❪"code/utilities/logo/unilang_logo_creator"❫
❪"code/utilities/code/artifacts/animate/unilang_hello_world_gif"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/files/transformers/lib"❫
❪"code/programs/reflexivity/publish/unilang_documentation_generator"❫
❪"code/utilities/code/artifacts/code_pipeline/code_pipeline_image_maker"❫
❪"code/utilities/code/artifacts/split_concept_tree/split_tree_to_image"❫
⚞⚟


// Parts of the repository (this repository, right here) need generated programatically.  
// The reason we need to generate parts programatically, is so we can try to automatically upgrade portions of the repo infrastructure.
// Like most things, more possibilities open up, when the repo infrastructure is expressed in a data model.
// So this refresh includes all things generated inside the repository,
// as well as some things that are exported from the repo.
    

//other bazel reflectivity tools:
//https://github.com/bazelbuild/buildtools
//https://github.com/spotify/bazel-tools

◀public: static▶ void ☀Refresh()❰

    Perform_Refresh();
❱

◀public: static▶ void ☀Perform_Refresh()❰

    //utf please
    Set_English_UTF8_Locale();
    
    auto settings = Reflexive_Refresh_Settings_Getter::Get();
    
    //things to do
    Target_Build_File_Refresher::Refresh(settings);
    Other_File_Autofix(settings);
    
    // TODO: These should be regular build rules.
    Generate_Documentation_Artifacts(settings);
    Generate_Essays(settings);
    
    
    //TODO: calculate macro usage within BUILD files.  For example, we want to make sure everything is on hcp_derive
    //1. calculate hcp usage in utilities/...
    //2. move code into bootstrap and make everything hcp_derive
    std::string path = Bazel_Workspace_Directory() + "/code/utilities/";
    auto build_files = Recursively_Get_BUILD_Files_From_Path(path);
    
    
    std::vector<std::string> paths_to_fix;
    for (auto const& it: build_files){
        
        
        // Skip paths that are allowed to use other rulesetss
        if (Begins_With(it,Bazel_Workspace_Directory() + "/code/utilities/deps/")){
            break;
        }
        if (Begins_With(it,Bazel_Workspace_Directory() + "/code/utilities/bootstrap/")){
            break;
        }
        
        // the remaining paths SHOULD NOT use hcp.
        // This is because we have a better rule now to derive parts of hcp
        auto content = Read_Entire_File_Into_String(it);
        if (countSubstring(content,"hcp(") > 0){
            paths_to_fix.emplace_back(it);
        }
    }
    
    if (!paths_to_fix.empty()){
        std::cerr << "The following BUILD files are using rulesets that are not allowed:" << std::endl;
        for (auto it: paths_to_fix){
            std::cerr << it << std::endl;
        }
        exit(-1);
    }
    
    
    
    //Other responsibilities for maintaining a mono-repo:
    //Outside resources can be fetched reliably (additional mirrors; solutions without Internet)
    //Ensure 3rd party libraries are up-to-date. Update them as necessary.
    //Ensure CI is always passing (debug, optimized, sanitizers) (worker bot)
    //Ensure CI is as fast as possible
    //Ensure Build is as fast as possible
    //Flaky Tests / Flaky Builds
    
    //dependencies should auto sync with upstream:
    // we build everything from source via a mirror.
    // We want code that can automatically compare the mirror to the original source and
    // let us know how far behind it is. Additionally it could try to update to
    // the latest and see if everything still builds / passes tests.
❱

◀private: static▶ void ☀Other_File_Autofix(Reflexive_Refresh_Settings const& settings)❰

    (void)settings;
    
    auto scan_path = Bazel_Derived_Root_Of_Repo();
    scan_path += "source/code";
    auto headers = Recursively_Get_All_Paths_To_hpp_Files_Of_Path(scan_path);
    for (auto const& it: headers){
        Add_Newline_If_File_Does_Not_End_With_Newline(it);
    }
❱


◀private: static▶ void ☀Generate_Documentation_Artifacts(Reflexive_Refresh_Settings const& settings)❰

    //generate unilang documentation
    if (settings.refresh_unilang_documentation){
        std::cout << "Generating Unilang Documentation..." << std::endl;
        Unilang_Documentation_Generator::Generate();
    }
    
    if (settings.refresh_unilang_logo){
        std::cout << "Generating Unilang Logo..." << std::endl;
        Unilang_Logo_Creator::Create();
    }
    
    if (settings.refresh_unilang_hello_world_gif){
        std::cout << "Hello World Gif..." << std::endl;
        Unilang_Hello_World_Gif::Create();
    }
    
    if (settings.refresh_unilang_code_pipeline_image){
        std::cout << "Unilang Code Pipeline..." << std::endl;
        Code_Pipeline_Image_Maker::Create();
    }
    
    if (settings.refresh_unilang_concept_tree_image){
        std::cout << "Generating Unilang Concept Tree Image..." << std::endl;
        Concept_Tree_To_Image::Create();
    }
    
    if (settings.refresh_unilang_split_concept_tree_image){
        std::cout << "Generating Unilang Split Concept Tree Image..." << std::endl;
        Split_Tree_To_Image::Create();
    }
❱

◀private: static▶ void ☀Generate_Essays(Reflexive_Refresh_Settings const& settings)❰
    if (settings.refresh_essays){
        std::cout << "Generating Essays..." << std::endl;
        All_Essay_Publisher::Generate_And_Publish();
    }
❱

