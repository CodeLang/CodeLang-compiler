class
❪iostream❫
❪fstream❫
❪"code/programs/repo_tools/file_size_grapher/program_options/program_options"❫
⚯
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/program/wrappers/git/commits/git_all_file_commits"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    // get all commits for the file
    Set_Path(repo_context.repo.path);
    auto commits = Git_All_File_Commits::Get(options.File());
    
    
    // loop through content for all file versions
    for (auto it: commits){
        std::string content = Get_File_Content(it,options.File());
        std::cout << Count_Newlines(content) << std::endl;
    }
    
    
    
❱


◀private: static▶ std::string ☀Get_File_Content(std::string const& commit, std::string const& file_path) ❰

    std::string command;
    command += "git cat-file -p ";
    command += commit;
    command += ":";
    command += file_path;
    return execute(command);
❱
