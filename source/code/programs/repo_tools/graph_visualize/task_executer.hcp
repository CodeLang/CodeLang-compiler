class
❪iostream❫
❪string❫
❪utility❫
❪vector❫
❪queue❫
❪"code/programs/repo_tools/graph_visualize/program_options/program_options"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/formats/serialization/protobuf"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰


    // Get and Run
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    // auto results = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,options.Target());
    // std::cout << Protobuf_Message_To_Json(results.aquery_result) << std::endl;
    
    
    
    
    auto spawns = Bazel_Runner::Get_Spawn_Information_As_Cmd_Map(repo_context.program_to_run_build,
                                                                 repo_context.build_settings,
                                                                 repo_context.bazel_setup_settings.config_settings,
                                                                 options.Target());
    
    
    
    for (auto const& it: spawns) {
        for (auto const& input: it.second.inputs()){
            //std::cout << Protobuf_Message_To_Json(it.second) << std::endl;
        }
        
        
        // std::cout << it.first << std::endl;
        // std::cout << "--------------" << std::endl;
        // std::cout << Protobuf_Message_To_Json(it.second) << std::endl;
    }
    
    
    
❱