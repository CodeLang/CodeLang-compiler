class
❪iostream❫
❪string❫
❪utility❫
❪"code/programs/repo_tools/header_remover/program_options/program_options"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/streams/filestreams/write_all/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫

❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/build/profiler/profile_compilation_timer"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/linguistics/computer/header_detection/cpp_header_detector"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    
    //step into the repo
    Set_Path(options.Run_Dir());

    bool passes = Test_Header_Removal(options);
    if (!passes){
        std::cerr << "Doesn't pass to begin with." << std::endl;
        std::cerr << "We won't be able to evaluate pruning if the build is already failing." << std::endl;
        exit(-1);
    }

    //get all the files to prune
    auto files = Get_All_Files_To_Prune(options);
    std::cout << "Files to prune: " << files.size();
    for (size_t i = 0; i < files.size(); ++i){
        std::cout << "[ " << i+1 << " / " << files.size() << " ]" << std::endl;
        Prune_File(files[i],options);
    }
    
❱

◀private: static▶ void ☀Prune_File(std::string file, Program_Options const& options) ❰

    //open the file
    auto file_lines = Read_Each_Line_Of_File_Into_Vector(file);
    
    //get all the header lines
    auto header_indexes = Cpp_Header_Detector::Get_All_Indexes_Of_Lines_That_Are_Header_Includes(file_lines);
    
    std::cout << header_indexes.size() << " headers detected ";
    //std::cout << Profile_Compilation_Timer::Profile(file) << std::endl;
    
    //try to remove each header
    for (auto index: header_indexes){
        
        auto include_statement = file_lines[index];
        
        //check its not the self header
        if (Is_Self_Header(include_statement,file)){
            std::cout << "skipping self header: " << include_statement << std::endl;
            continue;
        }

        //get rid of the include statement
        file_lines[index] = "";
        Write_Each_Line_Of_Vector_Into_File(file,file_lines);
        
        std::cout << "removing " << include_statement << " ";
        
        //test the removal
        //auto profile_time = Profile_Compilation_Timer::Profile(file);
        auto successfully_removed = Test_Header_Removal(options);
        
        
        //the header can stay removed
        if (successfully_removed){
            std::cout << "REMOVED " << std::endl;
        }
        
        
        //the header can not stay removed
        else{
            std::cout << "REQUIRED" << std::endl;
            
            //restore header
            file_lines[index] = include_statement;
            Write_Each_Line_Of_Vector_Into_File(file,file_lines);
        }
    }
    
    
    //print how many headers were removed
    auto header_indexes_after = Cpp_Header_Detector::Get_All_Indexes_Of_Lines_That_Are_Header_Includes(file_lines);
    auto headers_removed = header_indexes.size() - header_indexes_after.size();
    std::cout << headers_removed << " headers removed." << std::endl;

❱

◀private: static▶ std::vector<std::string> ☀Get_All_Files_To_Prune(Program_Options const& options) ❰
    std::vector<std::string> files;

    // Do a single file
    if (!options.File().empty()){
        files.emplace_back(options.File());
        return files;
    }

    //Do many files
    files = Recursively_Get_All_Paths_To_Files_From_Path(options.Dir());

    return files;

❱

◀private: static▶ bool ☀Is_Self_Header(std::string const& include, std::string file) ❰

    Replace_File_Extension(file,"hh");
    return Contains_Substring(include,file);
❱

◀private: static▶ bool ☀Test_Via_Compilation_Target(Program_Options const& options) ❰

    std::string command;
    command += "./bazel build ";
    command += options.Target();
    
    auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
    
    if (results.return_code != 0){
        return false;
    }
    
    return true;
❱

◀private: static▶ bool ☀Test_Header_Removal(Program_Options const& options) ❰

    bool show_stderr = true;

    //precondition check
    if (options.Commands().empty() && options.Target().empty()){
        std::cerr << "Need to pass commands or target." << std::endl;
        exit(0);
    }

    //strategy 1
    if (!options.Target().empty()){
        return Test_Via_Compilation_Target(options);
    }

    //strategy 2
    for (auto command: options.Commands()){
        auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
        if (results.return_code != 0){
            if (show_stderr){
                std::cerr << "ERROR: " << results.stderr << std::endl;
            }
            return false;
        }
    }

    return true;
❱