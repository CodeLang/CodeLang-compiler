class
❪iostream❫
❪string❫
❪utility❫
❪regex❫
❪"code/programs/repo_tools/visibility_adjuster/program_options/program_options"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/streams/filestreams/write_all/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫

❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/build/profiler/profile_compilation_timer"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
❪"code/utilities/linguistics/computer/header_detection/cpp_header_detector"❫
❪"code/utilities/types/strings/observers/regex/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    
    //step into the repo
    Set_Path(options.Run_Dir());

    bool passes = Test_That_Code_Builds(options);
    if (!passes){
        std::cerr << "Doesn't pass to begin with." << std::endl;
        std::cerr << "We won't be able to evaluate pruning if the build is already failing." << std::endl;
        exit(-1);
    }

    //get all the files to prune
    auto files = Get_All_Files_To_Prune(options);
    std::cout << "Files to prune: " << files.size();
    for (size_t i = options.Start_At(); i < files.size(); ++i){
        std::cout << "[ " << i+1 << " / " << files.size() << " ]" << std::endl;
        Prune_File(files[i],options);
    }
    
❱

◀private: static▶ std::string ☀Search_And_Replace(const std::string& input, const std::regex& pattern, const std::string& replacement) ❰
    return std::regex_replace(input, pattern, replacement);
❱
◀private: static▶ std::vector<size_t> ☀Get_Indexes(const std::vector<std::string> & lines, Program_Options const& options) ❰
    if (!options.Find().empty())
    {
        return Get_Indexes_Where_Regex_Matches(lines,options.Find());
    }
    return Get_Index_Of_All_Lines_That_Contain_Substring(lines,options.Literal_Find());
❱
◀private: static▶ std::string ☀Perform_Search_And_Replace(std::string str, Program_Options const& options)
❰
    if (!options.Find().empty())
    {
        return Search_And_Replace(str,std::regex(options.Find()),options.Replace());
    }
    return string_replace_all(str,options.Literal_Find(),options.Replace());
❱


◀private: static▶ void ☀Prune_File(std::string file, Program_Options const& options) ❰

    //open the file
    auto file_lines = Read_Each_Line_Of_File_Into_Vector(file);

    auto file_indexes = Get_Indexes(file_lines,options);

   std::cout << file_indexes.size() << " visibilities detected." << std::endl;
    //std::cout << Profile_Compilation_Timer::Profile(file) << std::endl;
    
    //try to remove each header
    for (auto index: file_indexes){
        
        auto visibility_line = file_lines[index];

        //get rid of the include statement
        file_lines[index] = Perform_Search_And_Replace(file_lines[index],options);
        Write_Each_Line_Of_Vector_Into_File(file,file_lines);
        
        std::cout << "removing " << visibility_line << " ";
        
        //test the removal
        //auto profile_time = Profile_Compilation_Timer::Profile(file);
        auto successfully_removed = Test_That_Code_Builds(options);
        
        
        //the header can stay removed
        if (successfully_removed){
            std::cout << "REMOVED " << std::endl;
        }
        
        
        //the header can not stay removed
        else{
            std::cout << "REQUIRED" << std::endl;
            
            //restore header
            file_lines[index] = visibility_line;
            Write_Each_Line_Of_Vector_Into_File(file,file_lines);
        }
    }
    
    
    //print how many visibilities were fixed
    auto file_indexes_after = Get_Indexes(file_lines,options);
    auto visibilities_fixed = file_indexes.size() - file_indexes_after.size();
    std::cout << visibilities_fixed << " visibilities fixed." << std::endl;

❱

◀private: static▶ std::vector<std::string> ☀Get_All_Files_To_Prune(Program_Options const& options) ❰
    std::vector<std::string> files;

    // Do a single file
    if (!options.File().empty()){
        files.emplace_back(options.File());
        return files;
    }

    //Do many files
    files = Recursively_Get_All_Paths_To_Files_From_Path(options.Dir());

    return files;

❱

◀private: static▶ bool ☀Test_Via_Compilation_Target(Program_Options const& options) ❰

    std::string command;
    command += "./bazel build ";
    command += options.Target();
    
    auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
    
    if (results.return_code != 0){
        return false;
    }
    
    return true;
❱

◀private: static▶ bool ☀Test_That_Code_Builds(Program_Options const& options) ❰

    bool show_stderr = false;

    //precondition check
    if (options.Commands().empty() && options.Target().empty()){
        std::cerr << "Need to pass commands or target." << std::endl;
        exit(0);
    }

    //strategy 1
    if (!options.Target().empty()){
        return Test_Via_Compilation_Target(options);
    }

    //strategy 2
    for (auto command: options.Commands()){
        auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
        if (results.return_code != 0){
            if (show_stderr){
                std::cerr << "ERROR: " << results.stderr << std::endl;
            }
            return false;
        }
    }

    return true;
❱