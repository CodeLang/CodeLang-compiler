class
❪iostream❫
❪string❫
❪fstream❫
❪"code/programs/transcompilers/hcp-compiler/official/structure/class_structure"❫
❪"code/programs/transcompilers/hcp-compiler/official/settings/hcp_settings"❫
⚯
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/wstrings/transformers/trimming/lib"❫
❪"code/utilities/types/wstrings/transformers/other/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"include_file_printer"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/programs/transcompilers/shared/json_gen"❫
❪"code/programs/transcompilers/hcp-compiler/official/outputs/hcp_outputs_getter"❫
❪"code/programs/transcompilers/hcp-compiler/official/self_header_decider"❫
⚞⚟


◀public: static▶ void ☀Compile_HCP_File(Class_Structure const& structure, Hcp_Settings const& settings)❰

    //use the structure to print the cpp and hpp versions of the file
  
    auto outputs = Hcp_Outputs_Getter::Get(structure,settings);
    std::wofstream hpp_stream(outputs.header_path);
    std::wofstream cpp_stream(outputs.source_path);
    
    
    auto str = Self_Header_Decider::Get(structure,settings);
    std::wstring wstr = as_wstring(str);
    cpp_stream << "#include " << '"' << wstr << '"' << '\n';
    hpp_stream << "#pragma once\n";
    Include_File_Printer::Print(hpp_stream,structure.Header_Includes());
    Include_File_Printer::Print(cpp_stream,structure.Source_Includes());
    hpp_stream << '\n';
    hpp_stream << as_wstring(boost_serialization_headers());
    hpp_stream << as_wstring(Json_Gen::all_nlohmann_serialization_headers());
    
    
    
    hpp_stream << '\n';
    cpp_stream << '\n';

    //dump hpp code wrapped in class name
    Dump_HPP(hpp_stream,structure,structure.File_Name(),settings);
    Dump_CPP(cpp_stream,structure,structure.File_Name(),settings);
    
    
    //JUNK NOTSES
    //add the json exporting function
    /*
    cpp_stream << "//functions added automatically by hcp-compiler\n";
    
        //json function implementation
        cpp_stream << "nlohmann::json As_JSON_Assignable(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tnlohmann::json j;\n";
        for (auto const& data_member: structure.Data_Members()){
            cpp_stream << "\tj[\"" << data_member << "\"] = As_JSON_Assignable(class_object." << data_member << ");\n";
        }
        cpp_stream << "\treturn j;\n}";
        
        //class name function implementation
        cpp_stream << "std::string Class_Name(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\treturn \"" <<  class_name << "\";\n}";
        
        //As YAML String
        cpp_stream << "std::string As_YAML_String(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tstd::string yaml_str;\n";
        cpp_stream << "\treturn yaml_str;\n}";
        
        //As XML String
        cpp_stream << "std::string As_XML_String(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tstd::string xml_str;\n";
        cpp_stream << "\treturn xml_str;\n}";
    */
❱

◀private: static▶ std::string ☀Get_Class_Name(Class_Structure const& structure, Hcp_Settings const& settings)❰

    //old way. based on filename
    std::string name = Make_Capital_And_Underscored_In_User_Type_Format(As_Removed_Suffix(structure.File_Name()));
    
    //new way. the class name is given to the compiler
    if (!settings.output_basename.empty()){
        name = Make_Capital_And_Underscored_In_User_Type_Format(settings.output_basename);
    }
    
    return name;
❱

◀private: static▶ void ☀Dump_HPP(std::wofstream & outfile, Class_Structure const& structure, std::string const& hcp_file, Hcp_Settings const& settings)❰
    (void)hcp_file;
    auto str = Get_Class_Name(structure, settings);
    std::wstring wstr = as_wstring(str);
    outfile << "class " << wstr;
    if (!structure.Inheritance().empty()){
        outfile << ": " << structure.Inheritance();
    }
    outfile << "{\n";

    //dump
    outfile << structure.HPP_Code();
    
    if (settings.utility_functions){
      
      /*
      outfile << "//functions added automatically by hcp-compiler\n";
      outfile << "public:\n";
      outfile << "\tfriend  std::string Class_Name(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend nlohmann::json As_JSON_Assignable(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend  std::string As_YAML_String(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend  std::string As_XML_String(" <<  wstr << " const& class_object);\n";
      */
      
      outfile << "public:\n";
      outfile << as_wstring(boost_serialization_interface_methods(structure));
    }
    
    outfile << "};";
    outfile << "\n";
    
    if (settings.utility_functions){
      outfile << as_wstring(Json_Gen::nlohmann_serialization_interface_methods(str));
    }
    
❱

◀private: static▶ void ☀Dump_CPP(std::wofstream & outfile, Class_Structure const& structure, std::string const& hcp_file, Hcp_Settings const& settings)❰
  outfile << structure.CPP_Code();
  auto str = Get_Class_Name(structure,settings);
  
  if (settings.utility_functions){
    
    std::vector<std::string> data_member_strs;
    for (auto const& data_member: structure.Data_Members()){
      data_member_strs.emplace_back(as_string(data_member));
    }
    outfile << as_wstring(Json_Gen::nlohmann_serialization_implementation_methods(str,data_member_strs));
  }
❱


//serialization related
◀private: static▶ std::string ☀boost_serialization_interface_methods(Class_Structure const& structure)❰
  std::string str;
  str += "template<class Archive>\n";
  str += "void serialize(Archive & ar, const unsigned int version){\n";
  str += "(void)ar; //avoid warning \n";
  str += "(void)version; //avoid warning \n";
  for (auto const& data_member: structure.Data_Members()){
      str += "\tar & " + as_string(data_member) + ";\n";
  }
  str += "}\n";
  return str;
❱

◀private: static▶ std::string ☀boost_serialization_headers()❰
  std::string str;

  str += "#pragma clang diagnostic push\n";
  str += "#pragma clang diagnostic ignored \"-Wreserved-id-macro\"\n";
  str += "#define _LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR\n";
  str += "#pragma clang diagnostic pop\n";
  str += "#define BOOST_NO_AUTO_PTR\n";
  str += "#include <boost/archive/text_oarchive.hpp>\n";
  str += "#include <boost/archive/text_iarchive.hpp>\n";
  return str;
❱

