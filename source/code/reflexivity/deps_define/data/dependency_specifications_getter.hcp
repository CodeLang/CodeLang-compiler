class
❪string❫
❪vector❫
❪"code/reflexivity/deps_define/data/dependency_specifications"❫
⚯
⚞⚟


◀public: static▶ Dependency_Specifications ☀Get_All_Bazel_Tests()❰
    Dependency_Specifications x;
    
    //C++
    x.specs.emplace_back(Boost());
    x.specs.emplace_back(Abseil());
    
    //Testing
    x.specs.emplace_back(Gtest());
    x.specs.emplace_back(Lcov());
    
    //Benchmarking
    x.specs.emplace_back(Google_Benchmark());
    x.specs.emplace_back(Gperf());
    
    //Logging
    x.specs.emplace_back(Spdlog());
    
    //Serialization / Parsers
    x.specs.emplace_back(RapidJson());
    x.specs.emplace_back(NlohmannJson());
    x.specs.emplace_back(YamlCpp());
    x.specs.emplace_back(Captnproto());
    x.specs.emplace_back(Protobuf());
    x.specs.emplace_back(Apache_Thrift());
    x.specs.emplace_back(Cereal());
    x.specs.emplace_back(Expat());
    x.specs.emplace_back(Flatbuffers());
    x.specs.emplace_back(Snappy());
    
    //Data Structures
    x.specs.emplace_back(Andres_Graph());
    x.specs.emplace_back(Date());
    
    //Math
    x.specs.emplace_back(Gmp());
    x.specs.emplace_back(FXdiv());
    
    //Graphics
    x.specs.emplace_back(Sdl2());
    x.specs.emplace_back(Glfw());
    x.specs.emplace_back(Imgui());
    x.specs.emplace_back(Cairo());
    x.specs.emplace_back(Lib_Png());
    x.specs.emplace_back(Lib_Jpeg());
    x.specs.emplace_back(GD());
    x.specs.emplace_back(Open_CV());
    x.specs.emplace_back(Open_CV_Test_Data());
    x.specs.emplace_back(Pixman());
    x.specs.emplace_back(Ncurses());
    
    //Font
    x.specs.emplace_back(Freetype2());
    x.specs.emplace_back(Font_Config());
    
    //Database
    x.specs.emplace_back(Sqlite3());
    
    //Web Query
    x.specs.emplace_back(Cpr());
    x.specs.emplace_back(Zlib());
    x.specs.emplace_back(Open_SSL());
    x.specs.emplace_back(Curl());
    x.specs.emplace_back(Chrome_Drivers());
    x.specs.emplace_back(CxxUrl());
    
    //CLI
    x.specs.emplace_back(Cli11());
    
    //Language Interop
    x.specs.emplace_back(Pybind11());
    
    //Threading / Workflow
    x.specs.emplace_back(Cpp_Taskflow());
    x.specs.emplace_back(Tbb());
    
    //Other
    x.specs.emplace_back(Grpc());
    x.specs.emplace_back(Fmt());
    x.specs.emplace_back(Xdo());
    x.specs.emplace_back(Python3());
    x.specs.emplace_back(Tippecanoe());
    
    //Device Inputs
    x.specs.emplace_back(Getch());
    x.specs.emplace_back(Xorg_Xinput());
    
    return x;
❱


◀private: static▶ Dependency_Specification ☀Boost()❰
    Dependency_Specification spec;
    spec.lib_name = "boost";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Abseil()❰
    Dependency_Specification spec;
    spec.lib_name = "abseil";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gtest()❰
    Dependency_Specification spec;
    spec.lib_name = "gtest";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lcov()❰
    Dependency_Specification spec;
    spec.lib_name = "lcov";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Google_Benchmark()❰
    Dependency_Specification spec;
    spec.lib_name = "google_benchmark";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gperf()❰
    Dependency_Specification spec;
    spec.lib_name = "gperf";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Spdlog()❰
    Dependency_Specification spec;
    spec.lib_name = "spdlog";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀RapidJson()❰
    Dependency_Specification spec;
    spec.lib_name = "rapid_json";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀NlohmannJson()❰
    Dependency_Specification spec;
    spec.lib_name = "nlohmann_json";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀YamlCpp()❰
    Dependency_Specification spec;
    spec.lib_name = "yaml_cpp";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Captnproto()❰
    Dependency_Specification spec;
    spec.lib_name = "captnproto";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Protobuf()❰
    Dependency_Specification spec;
    spec.lib_name = "protobuf";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Apache_Thrift()❰
    Dependency_Specification spec;
    spec.lib_name = "apache_thrift";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cereal()❰
    Dependency_Specification spec;
    spec.lib_name = "cereal";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Expat()❰
    Dependency_Specification spec;
    spec.lib_name = "expat";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Flatbuffers()❰
    Dependency_Specification spec;
    spec.lib_name = "flat_buffers";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Snappy()❰
    Dependency_Specification spec;
    spec.lib_name = "snappy";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Andres_Graph()❰
    Dependency_Specification spec;
    spec.lib_name = "andres_graph";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Date()❰
    Dependency_Specification spec;
    spec.lib_name = "date";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gmp()❰
    Dependency_Specification spec;
    spec.lib_name = "gmp";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fxdiv()❰
    Dependency_Specification spec;
    spec.lib_name = "fx_div";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sdl2()❰
    Dependency_Specification spec;
    spec.lib_name = "sdl2";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Glfw()❰
    Dependency_Specification spec;
    spec.lib_name = "glfw";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Imgui()❰
    Dependency_Specification spec;
    spec.lib_name = "imgui";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cairo()❰
    Dependency_Specification spec;
    spec.lib_name = "cairo";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Png()❰
    Dependency_Specification spec;
    spec.lib_name = "libpng";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Jpeg()❰
    Dependency_Specification spec;
    spec.lib_name = "libjpeg";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GD()❰
    Dependency_Specification spec;
    spec.lib_name = "gd";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV()❰
    Dependency_Specification spec;
    spec.lib_name = "open_cv";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV_Test_Data()❰
    Dependency_Specification spec;
    spec.lib_name = "open_cv_testdata";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pixman()❰
    Dependency_Specification spec;
    spec.lib_name = "pixman";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Ncurses()❰
    Dependency_Specification spec;
    spec.lib_name = "ncurses";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Freetype2()❰
    Dependency_Specification spec;
    spec.lib_name = "freetype2";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Font_Config()❰
    Dependency_Specification spec;
    spec.lib_name = "fontconfig";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sqlite3()❰
    Dependency_Specification spec;
    spec.lib_name = "sqlite3";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpr()❰
    Dependency_Specification spec;
    spec.lib_name = "cpr";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Zlib()❰
    Dependency_Specification spec;
    spec.lib_name = "zlib";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_SSL()❰
    Dependency_Specification spec;
    spec.lib_name = "openssl";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Curl()❰
    Dependency_Specification spec;
    spec.lib_name = "curl";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Chrome_Drivers()❰
    Dependency_Specification spec;
    spec.lib_name = "chrome_drivers";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CxxUrl()❰
    Dependency_Specification spec;
    spec.lib_name = "cxx_url";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cli11()❰
    Dependency_Specification spec;
    spec.lib_name = "cli11";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pybind11()❰
    Dependency_Specification spec;
    spec.lib_name = "pybind11";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Taskflow()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_taskflow";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tbb()❰
    Dependency_Specification spec;
    spec.lib_name = "tbb";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Grpc()❰
    Dependency_Specification spec;
    spec.lib_name = "grpc";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fmt()❰
    Dependency_Specification spec;
    spec.lib_name = "fmt";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xdo()❰
    Dependency_Specification spec;
    spec.lib_name = "xdo";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Python3()❰
    Dependency_Specification spec;
    spec.lib_name = "python3";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tippecanoe()❰
    Dependency_Specification spec;
    spec.lib_name = "tippecanoe";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Getch()❰
    Dependency_Specification spec;
    spec.lib_name = "getch";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xorg_Xinput()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_xinput";
    spec.repo_name = "";
    spec.sha256 = "";
    spec.at_commit = "";
    
    spec.build_content = "";
    spec.patch_content = "";
    return spec;
❱





// # TODO(thickey): we can't trust that these git repos will always exist.  
// # make copies and store them somewhere else.  Give multiple mirrors
// # for the urls.  the first url can be where we host it.
// # Also, github is a single source of failure here.  
// # Its probably okay to clone on github and use that as a mirror,
// # but we may also want additional hosting elsewhere (ex: buildfactory)
// # we may want to set up our own servers in case of another world war and we lose github

// # TODO(thickey): as a rule of thumb, we do not want patch files.  
// # when a patch file is created, we need to work with the original author to merge it back.
// # In the worst case scenarios where an agreement cannot be made with the author, or
// # the original author is unresponsive, we can fork the project.

// #other dependencies needed:
// #gmp (this was hard)
// #pretty_printers
// #pstreams
// #add-range-v3 library
// #add klmr-cpp11-range

// #need to make hermetic
// #sudo apt-get install xdotool
// #sudo apt-get install libxdo-dev
// #sudo apt-get install libxtst-dev
// # http_archive(
// #     name = "xdo",
// #     build_file = "//bazel/deps/build_files/xdo:xdo.BUILD",
// #     commit = "08c8e2d6cad60a69ce415499e34865157a1b66fd",
// #     remote = "https://github.com/jordansissel/xdotool.git",
// # )

// def third_party_libraries():
    
//     # https://github.com/jupp0r/prometheus-cpp
