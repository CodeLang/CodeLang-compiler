class
❪string❫
❪vector❫
❪"code/reflexivity/deps_define/data/dependency_specifications_getter"❫
❪"code/utilities/filesystem/paths/lib"❫
⚯
❪"code/utilities/filesystem/files/creating/lib"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰
    auto all_specs = Dependency_Specifications_Getter::Get_All_Bazel_Tests();
    auto path = Bazel_Deps_Directory();
    Set_Path(path);
    
    
    auto source_data = Create_Main_Third_Party_Sourcing_File(all_specs);
    Write_To_File("third_party_libraries.bzl",source_data);
    
❱

◀private: static▶ std::string ☀Bazel_Deps_Directory()❰
    return Bazel_Workspace_Directory() + "/bazel/deps/";
❱

◀private: static▶ std::string ☀Create_Main_Third_Party_Sourcing_File(Dependency_Specifications const& all_specs)❰
    std::string result;
    
    //add load statements
    for (auto const& it: all_specs.specs){
        result += "load(\"//bazel/deps/get:";
        result += it.lib_name;
        result += ".bzl";
        result += "\"";
        result += ", \"";
        result += it.lib_name;
        result += "\")\n";
    }
    
    result += "def third_party_libraries():\n";
    for (auto const& it: all_specs.specs){
        result += "    ";
        result += it.lib_name;
        result += "()\n";
    }
    
    return result;
❱