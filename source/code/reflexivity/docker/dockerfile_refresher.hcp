class
❪string❫
❪vector❫
❪"code/reflexivity/docker/data/apt_get_command"❫
❪"code/reflexivity/docker/data/docker_settings"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/transcompilers/unilang/file_extension_getter/file_extension_getter"❫
❪"code/reflexivity/docker/data/docker_settings_getter"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰

    auto settings = Docker_Settings_Getter::Get_Uncached_Dockerfile();
    Write_To_File(Get_DockerFile_Path(),Create_Dockerfile_Contents(settings));
    
    //maybe upload to dockerhub
    
    settings = Docker_Settings_Getter::Get_Cached_Dockerfile();
    Write_To_File(Get_DockerFile_Path(),Create_Dockerfile_Contents(settings));

❱

◀private: static▶ std::string ☀Get_DockerFile_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "Dockerfile";
    return f;
❱
◀private: static▶ std::string ☀Get_Docker_From_Command(Docker_Settings const& settings)❰
    std::string statement;
    statement += "FROM ";
    statement += settings.base_container;
    return statement;
❱





◀private: static▶ std::string ☀Docker_Intro_Comments(Docker_Settings const& settings)❰
std::string str;
Append_With_Newline(str,settings.intro_comment);
str += Get_Docker_From_Command(settings);
Append_With_Newline(str,settings.pre_steps);
return str;
❱

◀private: static▶ std::string ☀Create_Dockerfile_Contents(Docker_Settings const& settings)❰

    auto str = Docker_Intro_Comments(settings);
    
    //create all the ppa commands
    for (auto const& it: settings.ppas){
        str += "RUN add-apt-repository ";
        str += "ppa:";
        str += it.user;
        str += "/";
        str += it.ppa_name;
        str += "\n";
    }
    
    //create all the apt get install commands
    for (auto const& it: settings.gets){
        str += "RUN ";
        for (auto const& def: it.defines){
            str += def.first + "=" + def.second + " ";
        }
        str += "apt-get install -y ";
        str += it.name;
        str += "\n";
    }
    str += settings.post_steps;
    return str;
❱