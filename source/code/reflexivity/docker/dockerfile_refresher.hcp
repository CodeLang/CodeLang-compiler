class
❪string❫
❪vector❫
❪"code/reflexivity/docker/apt_get_command"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/transcompilers/unilang/file_extension_getter/file_extension_getter"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰

    //get dockerfile path
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "Dockerfile";
    
    
    auto apt_get_commands = Get_Apt_Get_Commands();
    Write_To_File(f,Create_Dockerfile(apt_get_commands));

❱


◀private: static▶ std::vector<Apt_Get_Command> ☀Get_Apt_Get_Commands()❰
    std::vector<Apt_Get_Command> commands;
    {
        Apt_Get_Command command;
        command.name = "git";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "patch";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "python";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "zip";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "wget";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "m4";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libgmp-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libgmp3-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "xorg";
        command.defines.emplace_back("DEBIAN_FRONTEND","noninteractive");
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl2-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsfml-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl2-image-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl2-image-2.0-0";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "locales";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libxdo-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "xutils-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libncurses5-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libncursesw5-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libxtst-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libxaw7-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "imagemagick";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "netpbm";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libmikmod-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libfishsound1-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsmpeg-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "liboggz2-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libflac-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libfluidsynth-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl2-mixer-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl2-mixer-2.0-0";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "libsdl-mixer1.2-dev";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "git-lfs";
        commands.emplace_back(command);
    }
    {
        Apt_Get_Command command;
        command.name = "openjdk-8-jdk";
        commands.emplace_back(command);
    }
    
    return commands;
❱

◀private: static▶ std::string ☀Docker_Intro_Comments()❰
std::string str = R"RAW(
# Why does this docker container exist?
# I'd like to build everything from source, but that's not always easy.
# From Cmake to autotools; the world is full of exotic builds and difficult to pin-down dependencies.
# For non-bazel projects, I usually have to rewrite the tool's build files in skylark.
# This can be difficult.  For example, when build files generate other build files for the build, it can be too much work.
# We use the docker container when we can't figure out how to build certain projects.
# As an aspiration, I'd want to migrate as many package manager-related actions into the build rules.
# But if it's too hard, they can stay here.
# It's also nice to have Dockerfiles for CIs and containerized contexts for different tools.

# Other thoughts on reducing this Dockerfile:
# I think there is a way to include debian packages directly in bazel rules.  We could look into that.
# Although its a better practice to run all of these commands a a single command since it will create less layers,
# I'm keeping them separated as it makes debugging easier.

# We try to upgrade to the latest Ubuntu when available
FROM ubuntu:18.04

# All of the necessary apt-get installs
# Strangely, wget was not working on a different machine??
# Which is confusing because I was building a docker container; why would the host machine matter.
# The fix was to use --fix-missing on the update.
# With the transition from Ubuntu 14.04 to 18.04, installing xorg would pause for user input on country
# This has been mitigated using the "noninteractive".
RUN apt-get update --fix-missing
)RAW";
return str;
❱

◀private: static▶ std::string ☀Docker_End_Stuff()❰
std::string str = R"RAW(
# The build runs certain tools that need a particular locale to be available
# I had to do this differently when transitioning from Ubuntu 14.04 to 18.04
# This will ensure the en_US.UTF-8 locale is available.
# Ideally, I'd like to fix the tools so this is not needed in the Dockerfile.
RUN echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections
RUN echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections
RUN rm "/etc/locale.gen"
RUN dpkg-reconfigure --frontend noninteractive locales

# Copy the content of your repository into the image
COPY . ./
)RAW";
return str;
❱



◀private: static▶ std::string ☀Create_Dockerfile(std::vector<Apt_Get_Command> const& apt_commands)❰

    auto str = Docker_Intro_Comments();
    for (auto const& it: apt_commands){
        str += "RUN ";
        for (auto const& def: it.defines){
            str += def.first + "=" + def.second + " ";
        }
        str += "apt-get install -y ";
        str += it.name;
        str += "\n";
    }
    str += Docker_End_Stuff();
    return str;
❱