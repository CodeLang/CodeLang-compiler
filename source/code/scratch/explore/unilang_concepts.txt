carry-over notes for unilang concepts

sticky note:
relational algos
use all algos in vec (unicode shorthand)
pair flip (global swap)
print header level components
print conceptual groups

sticky note:
warn about arguments being unused
allow passing arguments unused (uses attribute in export)
doxygen subgroup document printing
warn if function does not have subgroup tag

sticky note (how to make code more annoying):
bring back @file
comment include guard (why the unclude guard is there)
comment include block (why including)
comment extern guard (why extern)
doxygen subgrouping
block comment public decls / private decls / public defs / private defs
more not_null pre and attr

sticky note:
who is expected to change token
theme tokens
copy construct is expected to pass correct type- not void

paper:
swap generation
swap functions
remove all whitespace
whitespace insensitive comparing
It would be sly to expand template moustache stamping to re-stamp out entire files for object consumption
has transitioned (uses transition attribute (could be similar to comparable))
doxygen name tag for functions?

notecards:
-output dia diagram into some kind of text format
-parse through the text tree create type traits for each node (maybe an excpetion for leaf nodes... they can just be regular functions
-stat files in directories, should make note of type categories, type, and behaviour categories

Design by directory. Create images and type traits through the directory parsing. All the names have to be unique so you will concatenate each name on going down. If we can storeit in a tree data structure, maybe there are better ways to output it

finish dia digram (figure out types & stuff)
^ ACTUALLY THIS WOULD WORK BETTER AS A MIND MAP
make folders math diagram

accept n arguments; n != 0
accept lvalues and rvalues
return n arguments when appropriate
^ (overlad void and uple implicit casts?)

templates & type traits (pro: smaller binary)

ctags

paper:not added yet, max_align_t
is intptr_t really a fixed width integer?

I dont agree with char and bool being integral. I would argue that they simply get the promotion for convienve, but the integral does not describe their intended use case

c++ book errata:
UMLtoText maker
are const references always more effeccient than moves (when passed into a function)
When to use tempaltes and when to use inheritance

paper:
have a parameter create a function?
Object o ("test");
o.test();

Create a function like:
Print_("phrase")2_times; // classes
Print"phrase"_2_times
output_2_times("phrase")
How do you add a function like "reverse" to std::string

paper:
transition meaning
[op]value
[op]value
[meaning] (use indentifier name if it exists, else use the ADT type name)
(allow the defaykt fallback if no tranisiton meanings are applied)
the [op][value] could be a bool function

log transition changes [log token][function generation]
printable functions[token][function generation]
compare functions[function generation]
add opertation to value meaning
add meaning to value constraint (what a bout and/or operations)
Does a semicolon mark the exnd of an expression