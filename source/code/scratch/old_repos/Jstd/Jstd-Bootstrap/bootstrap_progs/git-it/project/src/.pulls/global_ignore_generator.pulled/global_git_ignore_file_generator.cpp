#include "global_git_ignore_file_generator.hpp"
#include "utilities.hpp"
#include "file_system_traverser.hpp"

void Global_Git_Ignore_File_Generator::Generate_Ignore_File_At_Project_Root(){


	//remember where we were when we called this function
	auto current_path = Current_Path();

	Go_To_Root_And_Generate_File();

	//restore the path to where we were
	Set_Path(current_path);

	return;
}

void Global_Git_Ignore_File_Generator::Go_To_Root_And_Generate_File(){

    //step to the root of the git repo or error out if we're not in a repo.
    if (Inside_Git_Repository()){ Go_To_Git_Repo_Root();}
    else{Exit_With_Error("you are not in a git repo.\n");}

    //create a stream to build a global .gitignore file
    std::ofstream ignore_file(".gitignore");
    	ignore_file << "#in case it's a generative dependency\n";
	ignore_file << "main.symsource\n\n"; 
	ignore_file << "#generated files by git-it\n";
	ignore_file << ".gitignore\n"; 

    Add_Ignore_Git_It_Generated_Files(ignore_file);

    ignore_file << "\n#sophisticated files generated by build system\n";
    Add_Any_Generated_HPP_Or_CPP_Files(ignore_file);

	return;
}
void Global_Git_Ignore_File_Generator::Add_Ignore_Git_It_Generated_Files(std::ofstream & ignore_file){

	Add_Any_Pulled_Folders_From_Pulls_Directory(ignore_file);
	Add_Any_Symbolic_Links_To_Generated_Files(ignore_file);

	return;
}
void Global_Git_Ignore_File_Generator::Add_Any_Pulled_Folders_From_Pulls_Directory(std::ofstream & ignore_file){

	auto pulls_directories = Recursively_Get_All_Paths_To_Directories_Of_Given_Name_From_Path(".pulls");
	for (auto dir: pulls_directories){
		ignore_file << dir.erase(0,2) << "/*.pulled\n";
	}

	return;
}
void Global_Git_Ignore_File_Generator::Add_Any_Symbolic_Links_To_Generated_Files(std::ofstream & ignore_file){

	auto pulled_directories = Recursively_Get_All_Paths_To_Directories_Of_Given_Name_From_Path("\\*.pulled");
	for (auto const& dir: pulled_directories){
		auto files = Get_Everything_At_Path(dir);
		for (auto const& it: files){
			ignore_file << Get_Path_As_Two_Directories_Back(dir).erase(0,2) + it << std::endl;
		}

	}

	return;
}
void Global_Git_Ignore_File_Generator::Add_Any_Generated_HPP_Or_CPP_Files(std::ofstream & ignore_file){
	auto paths_to_hcp_files = Recursively_Get_All_Paths_To_Files_Of_Given_File_Extension_From_Path("hcp");

	for (auto const& path: paths_to_hcp_files){
		ignore_file << As_Replaced_Extension(path,"hpp").erase(0,2) << '\n';
		ignore_file << As_Replaced_Extension(path,"cpp").erase(0,2) << '\n';
	}

	return;
}
