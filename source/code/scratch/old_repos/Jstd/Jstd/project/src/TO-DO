pseudo library scanner should not be recursive.  Put it into a loop.

void Scanner::Check_Code_File(Program_Options const& program_options, Warn_Machine & warn_machine){
	//I have nothing in particular to check right now, but it should try to
	//read in all of the code information,  to make sure that it's valid.
	//yes,  the actual exporting does this as well,  but we should not expect the exporter
	//to be responsible for validating the pseudo library.
	//eventually check that the compacts are actually being used, that it's all lowercase, and that category/behavior reference things are valid
	return;
}

*Some features and functionality from 1.1.0 have been removed, but will be properly merged back in up-coming releases.


run some things in parallel

NOTE: comment font
http://patorjk.com/software/taag/#p=display&v=3&c=c%2B%2B&f=Graceful&t=Document%0A

wen you search from something on the site, and it doesn't show up, it gets logged and we can consider adding it.
Users might get a message like "Shucks we don't have that function yet, but guess what, it's been added to the list, and we'll consider adding it in the next release."
If a documentation page is found, then at the bottom of the page, we'll have a little, "was that helpful"?  And we'll record what pages get visited the most!  Maybe even see what examples people copy into their clipboard the most, and rank those higher on the documentation page.



---------------
BUILDING ISSUE:
---------------
perhaps when building, we should try to build the static and dynamic libraries at the same time
(not building ALL the objects first and then building the libraries).  That way we can save space.

I think the fastest way though, would be dumping all the code into one file, and hen making the library.
This is because all the higher level namespaces get turned into objects that are about the same size as their cumulative children sizes.
i.e. the linker is probably throwing out tons and tons of repeated sumbols
I.E. I.E. the objects are taking up a lot of space, because they all have duplicate code in them.
Maybe we'll make this a flag, so that you can keep each object if you want.  (But it won't be the default...)
If linking the library takes too long, then we can keep the objects, and write some intelligent machinery to only link against the objects they actually need.

use inline namespaces instead?

put a marker file in the jstd pseudo library to makr the leaf nodes where the type ends and the functionality decomposition begins.  That way we can calculate how many types the jstd has functions for.


Need a cleaner logo
dependency checker (like check that boost is intalled.. check that c++11 compiler is there etc..)

fix project exporter. rm jstd-tool that's in jstd/ (probably needs better html output also)
unique function counter could be wrong due to expressions that generate duplicate results-- maybe the scanner should spot these so that they can be fixed

*everything needs more gui

is --no_stats flag working?
build a stats tree
only collect stats on files that are newer than a date.
..or have a program only do it at a position you are at and update that number.  Which means, a program will have to run down the tree and collect all those numbers to get a total.

--cases error comes up too late! (MESSAGE: --cases does not have enough values specified.) Also, is this working?

*conncect blog with facebook

*Need a gui for pseudo code.hpp files

Builder Object:
- handle Windows Builds
- handle single header build (should be easier now that the headers are seperated away into other files)
    
Scanner Object:
- Check for regular expressions that can generate the duplicate results.  Have them reported
- Output Scan Stats (maybe flag also?)
- check that the other behaviour references are valid, and non-repeating
- make sure the compacts used are actually there
- make sure all the regular expressions are lowercase letters. No underscores or anything.
    
Exporter Object:
- implement the exporting of attributes
- Output Export Stats (maybe flag also?)
- Output_Stats(function bases/synonyms) --> into stats folder
- have other behaviour references in side pseudo code block


*Add exception specification for optimzied performance

    
Optimizer Object:
- optimize away headers in source_hpps and header_hpps (probably by removing and attempting to re-compile..
   

Flags:
hmm.. think about macro case that uses spaces(like the "print var" library I saw)
-  --no_documentation  
-  --no_windows      
-  --no_linux
-  --no_stats
 
Other:
    Choose a lisense? (http://choosealicense.com/licenses/)
    [NO ] change int numbers to unbounded int AKA GMP
    [NO ] Don't re-export files that haven't been changed.  Won't this mess up unique markers (inclusion gaurds and pragma once marker)?
    variadic template implementations (looking into- might also do a && to handle rvalues. how return variadics though?)
