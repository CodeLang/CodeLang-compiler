
//these are the header files we used. header files are other code that gets pulled in to the program ok
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <stack>
#include "print.hpp"


//Julie, Hickey, VanKoot (A-TEAM)
//not bob or travis
//we might use an enum



using namespace std;

struct User_Input{
  
  User_Input(int const& how_many_in, vector<int> const& coin_values_in, int const& goal_in)
  : how_many(how_many_in)
  , coin_values(coin_values_in)
  , goal(goal_in)
  {}
  
  
  int how_many;
  vector<int> coin_values;
  int goal;
  
};

void Solve_Problem(vector<int> coin_values, int const& goal);
vector<int> Get_First_Soultion(vector<int> coin_values, int const& goal);



//UTILITIES

//two utility functions for popping and pushing that keep track of the coin total
void push(stack<int> & stack, int const& added_value, int & total, int const& goal, int & solutions);
void pop(stack<int> & stack, int & total);
bool Is_Valid_Solution(int const& total,int const& goal);
void Print_Stack(stack<int> stack);

//is the current stack invalid as we've over stepped out goal?
bool StackOverflowed(int const& goal, int const& total);

int main() {
  
  
  
  
  //input
  int how_many;
  int value;
  vector<int> coin_values;
  int goal;
  
  cin >> how_many;
  
  for(int i = 0; i < how_many; i++) {
      cin >> value;
      coin_values.push_back(value);
  }
  sort(coin_values.begin(),coin_values.end());
  
  cin >> goal;
  
  Solve_Problem(coin_values,goal);
  
   return 0;
}

void Solve_Problem(vector<int> coin_values, int const& goal){
  
  vector<int> expansion = Get_First_Soultion(coin_values,goal);
  cout << expansion << endl;
  
  return;
}

vector<int> Get_First_Soultion(vector<int> coin_values, int const& goal){
  
  vector<int> solution;
  stack<int>
  
  for (int i = 0; i < coin_values.size(); ++i){
  }
  
  return solution;
}
  


//UTILITIES
void push(stack<int> & stack, int const& added_value, int & total, int const& goal, int & solutions){
  
  //push the value on and update the total
  total+= added_value;
  stack.push(added_value);
  
  //check to see if that push caused a winning solution
  if (total == goal){
    ++solutions;
  }
  
  
  return;
}
void pop(stack<int> & stack, int & total){
  
  total -= stack.top();
  stack.pop();
  
  return;
}
bool StackOverflowed(int const& goal, int const& total){
  
  bool overflowed = false;
  if (total > goal){overflowed = true;}
  return overflowed;
}
bool Is_Valid_Solution(int const& total,int const& goal){
  return total == goal;
}
void Print_Stack(stack<int> stack){
  
  cout << "[";
  while(!stack.empty()){
    cout << stack.top() << " ";
    stack.pop();
  }
   cout << "]";
  
  return;
}









