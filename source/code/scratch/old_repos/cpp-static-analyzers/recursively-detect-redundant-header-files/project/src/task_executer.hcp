class
❪"utilities"❫
❪"systems"❫
❪"program_options"❫
⚯
❪"recursive_file_processor"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& program_options) ❰
  Recursive_File_Processor::Process(program_options, Do);
❱

◀private: static▶ std::vector<std::string>& ☀Do(std::vector<std::string>& vec) ❰

    std::set<std::string> found_names;
    for (auto it: vec){
        trim(it);
        if (Begins_With(it,"#include")){
            Remove_First_N_Chars(it,std::string("#include").size());
            trim(it);
            
            
            auto final = Get_Substring_Found_Between_First_Instance_Of_Two_Characters(it,'"','"');
            
            if (!final.empty()){
                if (Exists_In_Set(found_names,final)){
                    std::cout << vec[32] << std::endl;
                    std::cout << vec[33] << std::endl;
                    std::cout << vec[34] << std::endl;
                    std::cout << vec[35] << std::endl;
                    std::cout << vec[36] << std::endl;
                    std::cout << "already seen: " << final << std::endl;
                    std::cout << std::endl;
                }else{
                    Add_To_Set(found_names,final);
                }
            }
        }
    }

  
  return vec;
❱