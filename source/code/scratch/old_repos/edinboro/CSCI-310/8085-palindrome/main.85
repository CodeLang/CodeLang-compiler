;+------------------------+;+------------+;
;|      Trevor Hickey     |;|            |;
;|       May 4, 2013      |;| Palindrome |;
;|        8085 prog       |;|            |;
;+------------------------+;+------------+;
;+---------------------------------------+;
;| The Problem:                          |;
;+---------------------------------------+;
;| Check to see if a particular 8-bit    |;
;| number is a palindrome.  The 8-bit    |;
;| will be stored in 0070H.  If it is a  |;
;| palindrome, then the address 0071H    |;
;| will be stored with the value AAH.    |;
;| If it is not a palindrome, then 0071H |;
;| will be stored with the value FFH.    |;
;+---------------------------------------+;
;+---------------------------------------+;
;| User Input:                           |;
;+---------------------------------------+;
;| Fill the memory address of 0x0070     |;
;| with the value you are testing to see |;
;| is a palindrome or not. Below are a   |;
;| few examples:                         |;
;|                                       |;
;|      FF(11111111)  =  Palindrome      |;
;|      00(00000000)  =  Palindrome      |;
;|      81(10000001)  =  Palindrome      |;
;|      3C(00111100)  =  Palindrome      |;
;|      DB(11011011)  =  Palindrome      |;
;|      F0(11110000) !=  Palindrome      |;
;|      A7(10100111) !=  Palindrome      |;
;|      6F(01101111) !=  Palindrome      |;
;|      DC(11011100) !=  Palindrome      |;
;|      FE(11111110) !=  Palindrome      |;
;|                                       |;
.setbyte 0x0070,0x00; <- set this number |;
;+---------------------------------------+;

;+---------------------------------------+;
;| Marks the begining of Instructions &  |;
;|           Program Execution           |;
;+---------------------------------------+;
.org 0;   <- where instructions start    |;
.begin 0; <- where PC starts             |;
;----------------------------------------+;

;+---------------------------------------+;
;| Main:                                 |;
;|                                       |;
;| Pre-Conditions: we assume 0x0070      |;
;| stores a value for testing.           |;
;|                                       |;
;| Registers Used: A,B,C,D               |;
;| A - accumulator                       |;
;| B - original value which gets shifted |;
;| C - where I build the reversed number |;
;| D - copy of original value            |;
;|                                       |;
;| Post-Conditions: 0071H will store the |;
;| result.  It will be AAH if the value  |;
;| is a palindrome, and FFH if it is not |;
;+---------------------------------------+;
call TestPalindrome; <- run the test     |;
JMP Exit;            <- then quit        |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function: Tests for palindrome        |;
;|           and stores result           |;
;+---------------------------------------+;
TestPalindrome:;                         |;
    call Setup;      <- setup registers  |;
    call FlipNumber; <- reverse a copy   |;
    call Evaluate;   <- test if pali     |;
    call Output;     <- output results   |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function: Sets up Registers           |;
;+---------------------------------------+;
Setup:;                                  |;
    lda 0x0070; <- load in the value     |;       
    mov d,a;    <- put copy of value     |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function: creates a reversed copy of  |;
;|           the original string         |;
;+---------------------------------------+;
FlipNumber:;                             |;
    call Rotate;                         |;
    call Rotate;                         |;
    call Rotate;                         |;
    call Rotate;                         |;
    call Rotate;                         |;
    call Rotate;                         |;
    call Rotate;                         |;
    call NonShiftingRotate;              |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function:                             |;
;| performs part of the value reversal   |;
;+---------------------------------------+;
Rotate:;                                 |;
    rar;                                 |;
    call LoadFlipped;                    |;
    jnc RtDone;                          |;
    adi 0x0001;                          |;
    RtDone:;                             |;
    rlc;                                 |;
    call LoadOriginal;                   |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function:                             |;
;| performs the last part of the value   |;
;| reversal.                             |;
;|                                       |;
;| *Basically, I add the carry           |;
;| to the reverse value, but don't       |;
;| left shift, because its the final     |;
;| digit, and if I did shift, I'd loose  |;
;| my first carry value.                 |;
;+---------------------------------------+;        
NonShiftingRotate:;                      |;
    rar;                                 |;
    call LoadFlipped;                    |;
    jnc NrtDone;                         |;
    adi 0x0001;                          |;
    NrtDone:;                            |;
    call LoadOriginal;                   |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function:                             |;
;| load the reverse value into accum.    |;
;| preserve the value already in accum.  |;
;+---------------------------------------+;
LoadFlipped:;                            |;
    mov b,a;                             |;
    mov a,c;                             |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function:                             |;
;| load the original, but manipulated    |;
;| value back into the accum. perserve   |;
;| the value already in the accum.       |;
;+---------------------------------------+;    
LoadOriginal:;                           |;
    mov c,a;                             |;
    mov a,b;                             |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function: Decide if the reverse value |;
;| is indeed a palindrome of the original|;
;+---------------------------------------+;
Evaluate:;                               |;
    mov a,d;                             |;
    sub c;                               |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Function: based on whether or not the |;
;| value is a palindrome, output the     |;
;| appropiate result to a memory location|;
;+---------------------------------------+;
Output:;                                 |;
    JNZ NotAPalindrome;                  |;
    mvi a, 0x00AA;                       |;
    sta 0x0071;                          |;
    ret;                                 |;
    NotAPalindrome:;                     |;
    mvi a, 0x00FF;                       |;
    sta 0x0071;                          |;
ret;                                     |;
;----------------------------------------+;

;+---------------------------------------+;
;| Exit The Program                      |;
;+---------------------------------------+;
Exit: hlt
