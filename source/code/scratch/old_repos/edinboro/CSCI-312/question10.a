// Trevor Hickey
// Prof. Bennett
// Feb 22. 2012
// CSCI 312 (Architecture)

// HOMEWORK NUMBER 10:
// Write a program that will read input from the user until a 0 is entered. 
// Your program should then print out (in the following order), 
// the maximum value, the minimum value, the number of values, 
// and the average value. Your program should be well documented.

// PROGRAM DESCRIPTION:
// This program reads in as many values 
// as the user wishes to give. These values
// are then sorted. The program then finds
// the maximum, minimum, total, and average
// value to print out to the screen.

// ALGORITHM:
// 1. Get Values From User
// 1a. Get User Input
// 2a. If (The User value is not 0) goto 2c else go to 3
// 2c. Store User Value In Next Array Index
// 2d. Get User Input. Go to step 2a.
// 3. Store Total
// 4. Loop through each index in user array
// 4a. Set current Max
// 4b. Set current Min
// 4c. Increment Average
// 5. Calculate Average
// 6. Output Results
// 6a. Ouput Max
// 6b. Output Min
// 6c. Output Total
// 6d. Output Average

// NOTES:
// There is a potential danger that the user may
// enter too many values and run out of ram to store
// them or the instructions

;;;;;;;;;;;;;;;;;;;;;;
;; START OF PROGRAM ;;
;;;;;;;;;;;;;;;;;;;;;;
   
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;        GET VALUES FROM USER         ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;   ASM INSTRUCTIONS   ;; PSEUDO CODE ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            ;;
        LOOP1:              ;;
            read            ;;
            store input     ;; 
                            ;;
            jmpz LOOP1_EXIT ;;
            load i          ;;
            add i           ;;   get input from user
            addi array      ;;   for(int i = 0; i != 0; ++i){
            store index     ;;       array[i] = input
                            ;;       get input from user
            load input      ;;   }
            storei index    ;;
                            ;;
            load i          ;;
            addi 1          ;;
            store i         ;;
                            ;;
            jmp LOOP1       ;;
        LOOP1_EXIT:         ;;
                            ;;
           load i           ;; Display all zeros
           jmpz OUTPUT      ;; if the user did not enter any values
                            ;;
                            ;;
                            ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;            STORE THE TOTAL          ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;   ASM INSTRUCTIONS   ;; PSEUDO CODE ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            ;;
        load i              ;;
        store total         ;; total = i (which is the lastIndex + 1)
        subtract one        ;; i-= 1
        store i             ;;
                            ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;        LOOP THROUGH USER ARRAY      ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;   ASM INSTRUCTIONS   ;; PSEUDO CODE ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            ;;
                            ;;
                            ;;
        LOOP2:              ;;
            load i2         ;;
            subtract i      ;;
            jmpz LOOP2_EXIT ;; for (int i = array.size; i >= 0; --i){
                            ;;     set current max
            load i          ;;     set current min
            add i           ;;     add value to avg variable
            addi array      ;; }
            store index     ;;
                            ;;

            loadi index        ;;
            subtract max       ;;
            jmpn  NO_NEW_MAX1  ;; Compare the new value with the current max
            loadi index        ;; set the new max to the current value if
            store max          ;; the current value is larger
            NO_NEW_MAX1:       ;;

            loadi index            ;;
            subtract min           ;;
            jmpn LESS_THAN_ZERO_1  ;;
            ;;write                ;; Compare the new value with the current min
            jmp end1               ;; set the new min to the current value if
            LESS_THAN_ZERO_1:      ;; the current value is smaller
            loadi index            ;;
            store min              ;;

            end1:






            loadi index     ;;
            add avg         ;; ++avg
            store avg       ;;
 
            load i          ;;
            subtract one    ;; --i
            store i         ;;

            jmp LOOP2
        LOOP2_EXIT:


    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;  Perform Operations For Last Index  ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;   ASM INSTRUCTIONS   ;; PSEUDO CODE ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            ;;
            load i          ;;
            add i           ;;
            addi array      ;; Index will now be at first value
            store index     ;;
                            ;;
                            ;;

            loadi index        ;;
            subtract max       ;;
            jmpn  NO_NEW_MAX   ;; Compare the new value with the current max
            loadi index        ;; set the new max to the current value if
            store max          ;; the current value is larger
            NO_NEW_MAX:        ;;

            loadi index           ;;
            subtract min          ;;
            jmpn LESS_THAN_ZERO_2 ;;
            ;;write               ;; Compare the new value with the current min
            jmp end2              ;; set the new min to the current value if
            LESS_THAN_ZERO_2:     ;; the current value is smaller
            loadi index           ;;
            store min             ;;

            end2:


            loadi index       ;;
            add avg           ;; ++avg
            store avg         ;;

           load total         ;;
           jmpz SKIP          ;;
           load avg           ;;
           divide total       ;; Calculate Average
           store avg          ;;
           SKIP:              ;;

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;            OUTPUT RESULTS           ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;   ASM INSTRUCTIONS   ;; PSEUDO CODE ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            ;;
    OUTPUT:                 ;;
        load max            ;;
        write               ;;
        load min            ;; output the max
        write               ;; output the min
        load total          ;; output the total
        write               ;; output the avg
        load avg            ;;
        write               ;;
        
;;;;;;;;;;;;;;;;;;
;; QUIT PROGRAM ;;
;;;;;;;;;;;;;;;;;;
END_PROGRAM:
    STOP




;;;;;;;;;;;;;;;;;;;;;;;;;
;; STORAGE FOR NUMBERS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
input:  .data 2 0;
i:      .data 2 0;
i2:     .data 2 0;
index:  .data 2 0;
array:  .data 50 0;

max:    .data 2 0;
min:    .data 2 10;
total:  .data 2 0;
avg:    .data 2 0;

one: .data 2 1;
