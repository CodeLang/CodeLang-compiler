class
❪"systems"❫
❪"composed_program_options"❫
❪"utilities"❫
⚯
⚞⚟
◀public: static▶ void ☀Process(Composed_Program_Options const& program_options, std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    //process from input
    if (program_options.input_files.empty()){
        Perform_From_Std_In(bulk_line_processing_function);
    }else{
        
        if (program_options.in_place){
            Perform_From_Files_In_Place(program_options.input_files,bulk_line_processing_function);
        }else{
            Perform_From_Files_Through_Std_Out(program_options.input_files,bulk_line_processing_function);
        }
    }
❱

◀private: static▶ void ☀Perform_From_Std_In(std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    //process all std input in bulk
    auto lines = Read_In_All_Of_Std_Input_As_Vector_Of_Lines();
    bulk_line_processing_function(lines);
    Print_Each_Element_On_A_Line(lines);
❱
◀private: static▶ void ☀Perform_From_Files_In_Place(std::vector<std::string> const& files, std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    // we need to hold onto all of the lines because this is bulk line processing
    for (auto const& file: files){
        if (File_Exists(file)){
            Perform_From_File_In_Place(file,bulk_line_processing_function);
        }
        else{
            std::cerr << file << " does not exist.\n";
        }
    }
    
❱
◀private: static▶ void ☀Perform_From_Files_Through_Std_Out(std::vector<std::string> const& files, std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    // we need to hold onto all of the lines because this is bulk line processing
    for (auto const& file: files){
        if (File_Exists(file)){
            Perform_From_File_Through_Std_Out(file,bulk_line_processing_function);
        }else{
            std::cerr << file << " does not exist.\n";
        }
    }
❱

◀private: static▶ void ☀Perform_From_File_In_Place(std::string const& file, std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    auto lines = Read_Each_Line_Of_File_Into_Vector(file);
    bulk_line_processing_function(lines);
    Print_Each_Element_To_A_File_On_A_Seperate_Line(lines,file);
❱
◀private: static▶ void ☀Perform_From_File_Through_Std_Out(std::string const& file, std::function<std::vector<std::string>& (std::vector<std::string> &)> const& bulk_line_processing_function) ❰

    auto lines = Read_Each_Line_Of_File_Into_Vector(file);
    bulk_line_processing_function(lines);
    Print_Each_Element_On_A_Line(lines);
❱
