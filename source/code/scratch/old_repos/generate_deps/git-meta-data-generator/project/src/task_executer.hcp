class
❪"utilities"❫
❪"systems"❫
❪"program_options"❫
❪"repository"❫
❪"program_input"❫
⚯
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(Program_Input const& input) ❰
    
    //header
    std::ofstream header("git_meta_data.hpp");
    Print_To_Stream_With_Newline(header,"#pragma once");
    Print_To_Stream_With_Newline(header,"#include <string>");
    Print_To_Stream_With_Newline(header,"#include \"utilities.hpp\"");
    Print_To_Stream_With_Newline(header,"");
    Print_To_Stream_With_Newline(header,"struct Git_Meta_Data{");
    Print_To_Stream_With_Newline(header,"  static const std::string PROJECT_NAME;");
    Print_To_Stream_With_Newline(header,"  static const std::string USER_NAME;");
    Print_To_Stream_With_Newline(header,"");
    Print_To_Stream_With_Newline(header,"  static void Recursively_Transfer_Symbolic_Plugin_Files(){");
    Print_To_Stream_With_Newline(header,"  ");
    Print_To_Stream_With_Newline(header,"    //generatively completely recursively generically encapsulated now");
    Print_To_Stream_With_Newline(header,"    const std::string LIBRARY_DIRECTORY = \"~/.github/\" + USER_NAME + \"/\" + PROJECT_NAME + \"/project/src/\" + PROJECT_NAME + \"/\";");
    Print_To_Stream_With_Newline(header,"    execute_quietly((\"cp -r \" + LIBRARY_DIRECTORY + \"* .\").c_str());");
    Print_To_Stream_With_Newline(header,"  }");
    Print_To_Stream_With_Newline(header,"};");
    
    //source
    std::ofstream source("git_meta_data.cpp");
    Repository r(Get_Project_URL());
    Print_To_Stream_With_Newline(source,"#include \"git_meta_data.hpp\"");
    Print_To_Stream_With_Newline(source,"");
    Print_To_Stream_With_Newline(source,"const std::string Git_Meta_Data::PROJECT_NAME = \"" + Get_Project_Name() + "\";");
    Print_To_Stream_With_Newline(source,"const std::string Git_Meta_Data::USER_NAME = \"" + r.User_Name() + "\";");
❱
