class
❪"utilities"❫
❪"systems"❫
❪"program_options"❫
⚯
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& program_options) ❰
std::ofstream outfile("range_combinator.hcp");
outfile << R"DELIM(class
ļ❪"systems"ļ❫
ļ❪"utilities"ļ❫
ļ⚯
ļ⚞ļ⚟
ļ◀public:ļ▶ ļ☀ļ◈(std::vector<std::pair<int,int>> const& ranges_in)ļ❰

ranges = ranges_in;
last = ranges.size() - 1;
current = last;
all_exausted = false;

  for (auto it: ranges){
    current_vals.push_back(it.first);
  }
  
ļ❱

ļ◀public:ļ▶ std::vector<int> ļ☀Next() ļ❰
  all_exausted = Adjust();
  return current_vals;
ļ❱
ļ◀public:ļ▶ std::vector<int> ļ☀Current() ļ❰
  return current_vals;
ļ❱


ļ◀public:ļ▶ bool ļ☀Done() ļ❰
  return all_exausted;
ļ❱

 

 ļ◀private:ļ▶ bool ļ☀Adjust() ļ❰
 if (current_vals[current] < ranges[current].second){
    current_vals[current]++;
 }else{
    
    while (current_vals[current] == ranges[current].second){
      current--;
    }
    
    if (current < 0){
      return true;
    }
    
    Reset_From_Current_Back(current+1);
    current_vals[current]++;
    current = last;
 }
 return false;
ļ❱

 ļ◀private:ļ▶ void ļ☀Reset_From_Current_Back(int from)ļ❰
 
 for (int i = from; i <= last; ++i){
  current_vals[i] = ranges[i].first;
 }
 
ļ❱


ļ◀private:ļ▶

ļ◀
std::vector<std::pair<int,int>> ranges;
int current;
int last;
bool all_exausted;
std::vector<int> current_vals;
ļ▶
)DELIM";
❱
