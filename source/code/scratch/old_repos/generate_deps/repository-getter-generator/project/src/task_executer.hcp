class
❪"systems"❫
❪"program_options"❫
❪"utilities"❫
⚯
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& program_options) ❰

    std::ofstream outfile("repository_getter.hcp");
    outfile << R"DELIM(class
ļ❪"systems"ļ❫
ļ❪"repository"ļ❫
ļ⚯
ļ❪"utilities"ļ❫
ļ⚞ļ⚟
ļ◀public: staticļ▶ std::vector<Repository> ļ☀Get_Repos_Of_User(std::string const& user_name) ļ❰
    //gets all the ssh urls for the passed in usernames. pass them into a repo class for construction
    const std::string NUMBER_OF_REPOS_TO_GET{"9999999999999999"};
    auto html = Get_HTML_Of_Site("https://api.github.com/users/" + user_name + "/repos?per_page=" + NUMBER_OF_REPOS_TO_GET);
    auto lines = Put_Each_Line_Of_String_Into_A_Vector(html);
    std::vector<Repository> repos;
    const std::string SEARCH_PART{"\"ssh_url\": \""};
    for (auto const& it: lines){
        if (Begins_With(As_Left_Trimmed(it),SEARCH_PART)){
            repos.emplace_back(As_Last_N_Chars_Removed(As_First_N_Chars_Removed(As_Left_Trimmed(it),SEARCH_PART.size()),2));
        }
    }
    return repos;
ļ❱
ļ◀public: staticļ▶ std::vector<Repository> ļ☀Get_Repos_Of_Organization(std::string const& user_name) ļ❰
    //gets all the ssh urls for the passed in usernames. pass them into a repo class for construction
    const std::string NUMBER_OF_REPOS_TO_GET{"9999999999999999"};
    auto html = Get_HTML_Of_Site("https://api.github.com/orgs/" + user_name + "/repos?per_page=" + NUMBER_OF_REPOS_TO_GET);
    auto lines = Put_Each_Line_Of_String_Into_A_Vector(html);
    std::vector<Repository> repos;
    const std::string SEARCH_PART{"\"ssh_url\": \""};
    for (auto const& it: lines){
        if (Begins_With(As_Left_Trimmed(it),SEARCH_PART)){
            repos.emplace_back(As_Last_N_Chars_Removed(As_First_N_Chars_Removed(As_Left_Trimmed(it),SEARCH_PART.size()),2));
        }
    }
    return repos;
ļ❱
)DELIM";

❱
