class
❪"utilities"❫
❪"systems"❫
❪"settings"❫
❪"component"❫
⚯
❪"settings_getter"❫
❪"component_getter"❫
❪"notifier"❫
❪"exporter"❫
❪"copier"❫
❪"styler"❫
❪"documenter"❫
❪"cleaner"❫
❪"tester"❫
⚞⚟

◀public: static▶ void ☀Transfer() ❰

    //get the workflow settings
    auto settings = Settings_Getter::Get();
    
    //get all the components that we want to transfer
    auto components = Component_Getter::Get(settings);
    
    //transcompile and transfer each component
    for (auto const& it: components){
        Transcompile_And_Transfer(it,settings);
    }
❱

◀private: static▶ void ☀Transcompile_And_Transfer(Component component, Settings const& settings) ❰
    
    Temporarily_Move_To_Path_To_Call_Function(settings.Full_Path_To_Unilang_Root() + component.path_to_file,[&](){
        
        //process of transferring a good code base to a company code base
        Notifier::Print_Whats_Happening(component,settings);
        Exporter::Export(component,settings);
        Copier::Copy(component,settings);
        Styler::Style(component,settings);
        Tester::Transfer_Over_Any_Test_Wrappers(component,settings);
        Documenter::Document(component,settings);
        Cleaner::Remove_Generated_Code_From_Work_Area(component,settings);
        std::cout << std::endl;
    });
❱
