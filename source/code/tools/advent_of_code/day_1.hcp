class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
⚞⚟

◀private: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    Divide_Each_Line_By(lines,3);
    Subtract_Each_Line_By(lines,2);
    auto total = Accumulate(lines);
    std::cout << total << std::endl;
❱
◀private: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

    //todo: reduce_to_zero
    int total = 0;
    for (auto const& line: lines){
        auto num = (as_signed(line) / 3) -2;
        total += num;
        
        auto left_over = (num/3)-2;
        while (left_over >= 0){
            total += left_over;
            left_over = (left_over/3)-2;
        }
    }
    std::cout << total << std::endl;
❱