class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/tools/advent_of_code/int_code_computer"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    //get program input
    auto num_strs = Split_Into_Parts_From_Comma(lines[0]);
    auto nums = VecStringToVecInt(num_strs);
    
    
    //set memory directly
    nums[1] = 12;
    nums[2] = 2;
    
    
    //run computer
    Int_Code_Computer_State state;
    state.memory = nums;
    state.pc = 0;
    Int_Code_Computer::Run(state,{});
    
    
    //observe memory directly
    Exit_If_Not_Equal(state.memory[0],4714701);
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰

    //get program input
    auto num_strs = Split_Into_Parts_From_Comma(lines[0]);
    auto nums = VecStringToVecInt(num_strs);
    
    
    auto seek_result = 19690720;
    size_t answer = 0;
    
    Nested_Loop(0,100,0,100,[&](size_t i, size_t j, bool & stop){
        
        auto nums2 = nums;
        
        //set memory directly
        nums2[1] = i;
        nums2[2] = j;
        
        //run computer
        Int_Code_Computer_State state;
        state.memory = nums2;
        state.pc = 0;
        Int_Code_Computer::Run(state,{});
        
        if (state.memory[0] == seek_result){
            answer = 100 * i + j;
            stop = true;
        }
    });
    
    Exit_If_Not_Equal(answer,5121);
❱