class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰
    auto nums = Split_Into_Parts_From_Comma(lines[0]);
    
    
    for (size_t i = 0; i < 100; i++){
        for (size_t j = 0; j < 100; j++){
            if (Program_Result(nums,i,j) == 19690720){
                exit(0);
            }
        }
    }
    
    
    
    std::cout << nums[0] << std::endl;
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰
    //todo: unmerge part 1/2
❱

◀public: static▶ int ☀Program_Result(std::vector<std::string> nums, int input1, int input2) ❰
    //99 means stop
    //1 means read next two, add and store in third
    //2 multiplies
    nums[1] = std::to_string(input1);
    nums[2] = std::to_string(input2);
    //std::cout << nums << std::endl;
    
    size_t pc = 0;
    while(nums[pc] != "99"){
        if (nums[pc] == "1"){
            auto a = as_signed(nums[as_signed(nums[pc+1])]);
            auto b = as_signed(nums[as_signed(nums[pc+2])]);
            nums[as_signed(nums[pc+3])] = std::to_string(a+b);
            //std::cout << "add: " << a << " " << b << " " << pc+3 << std::endl;
            pc+=4;
        }
        else if (nums[pc] == "2"){
            auto a = as_signed(nums[as_signed(nums[pc+1])]);
            auto b = as_signed(nums[as_signed(nums[pc+2])]);
            nums[as_signed(nums[pc+3])] = std::to_string(a*b);
            //std::cout << "mul: " << a << " " << b << " " << pc+3 << std::endl;
            pc+=4;
        }
        else{
            break;
            pc++;
        }
    }
    std::cout << nums[0] << std::endl;
    return as_signed(nums[0]);
❱