class
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/point/point_line"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/utilities/types/int/int"❫
❪"code/tools/advent_of_code/int_code_computer"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    //get program input
    auto num_strs = Split_Into_Parts_From_Comma(lines[0]);
    auto nums = VecStringToVecInt(num_strs);
    
    auto combos = Int::permutations(5,5);
    //std::cout << combos << std::endl;
    //exit(0);
    
    
    std::vector<int> totals;
    for (auto combo: combos){
        auto nums2 = nums;
        int result = 0;
        result = Int_Code_Computer::Run(nums,{combo[0],result})[0];
        result = Int_Code_Computer::Run(nums,{combo[1],result})[0];
        result = Int_Code_Computer::Run(nums,{combo[2],result})[0];
        result = Int_Code_Computer::Run(nums,{combo[3],result})[0];
        result = Int_Code_Computer::Run(nums,{combo[4],result})[0];
        totals.emplace_back(result);
    }
    
    Sort_And_Remove_Duplicates(totals);
    std::cout << totals << std::endl;
    
    //run computer
    //auto result = Int_Code_Computer::Run(nums,{1});

❱
◀public: static▶ void ☀Part_2(std::vector<std::string> const& lines) ❰

❱



