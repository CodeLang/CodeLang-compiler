class
❪vector❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_line_intersections_getter"❫
❪"code/utilities/data_structures/point/point_line_to_points"❫
❪"code/utilities/types/int/int"❫
⚞⚟

◀public: static▶ std::vector<int> ☀Run(std::vector<int> & memory, std::vector<int> const& inputs) ❰


    int opcode_stop = 99;
    int opcode_add = 1;
    int opcode_mul = 2;
    int opcode_input = 3;
    int opcode_output = 4;
    int jump_if_true = 5;
    int jump_if_false = 6;
    int less_than = 7;
    int equals = 8;

    size_t pc = 0;
    size_t current_input = 0;
    std::vector<int> outputs;
    
    auto op_code = Int::get_last_n_digits(memory[pc],2);
    Index_Mode i1 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],2));
    Index_Mode i2 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],3));
    Index_Mode i3 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],4));
    
    
    while(op_code != opcode_stop){
        
        if (op_code == opcode_add){
            Mode_Linear_Addition(memory,pc,i1,i2,i3);
        }
        else if (op_code == opcode_mul){
            Mode_Linear_Multiply(memory,pc,i1,i2,i3);
        }
        else if (op_code == opcode_input){
            Position_Mode_Set(memory,pc,inputs[current_input]);
            ++current_input;
        }
        else if (op_code == opcode_output){
            outputs.emplace_back(Mode_Get(memory,pc,i1));
        }
        else if (op_code == jump_if_true){
            Mode_Jump_If_True(memory,pc,i1,i2);
        }
        else if (op_code == jump_if_false){
            Mode_Jump_If_False(memory,pc,i1,i2);
        }
        else if (op_code == less_than){
            Mode_Jump_Less_Than(memory,pc,i1,i2,i3);
        }
        else if (op_code == equals){
            Mode_Jump_Equals(memory,pc,i1,i2,i3);
        }
        op_code = Int::get_last_n_digits(memory[pc],2);
        i1 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],2));
        i2 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],3));
        i3 = static_cast<Index_Mode>(Int::get_nth_digit_from_back(memory[pc],4));
    }
    
    return outputs;
❱