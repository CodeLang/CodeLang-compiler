class
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/advent_of_code/advent_of_code_input_getter"❫
❪pybind11/embed.h❫
⚞⚟

◀public: static▶ void ☀Execute_Needed_Tasks() ❰
    
    //auto lines = Advent_Of_Code_Input_Getter::Get("1");
    //Day_1_Part_1(lines);
    //Day_1_Part_2(lines);

    auto lines = Advent_Of_Code_Input_Getter::Get("2");
    Day_2_Part_1(lines);
    Day_2_Part_2(lines);
❱

◀private: static▶ void ☀Day_1_Part_1(std::vector<std::string> lines) ❰

    Divide_Each_Line_By(lines,3);
    Subtract_Each_Line_By(lines,2);
    auto total = Accumulate(lines);
    std::cout << total << std::endl;
❱
◀private: static▶ void ☀Day_1_Part_2(std::vector<std::string> const& lines) ❰
    int total = 0;
    for (auto const& line: lines){
        auto num = (as_signed(line) / 3) -2;
        total += num;
        
        auto left_over = (num/3)-2;
        while (left_over >= 0){
            total += left_over;
            left_over = (left_over/3)-2;
        }
    }
    std::cout << total << std::endl;
❱

◀private: static▶ void ☀Day_2_Part_1(std::vector<std::string> lines) ❰
❱
◀private: static▶ void ☀Day_2_Part_2(std::vector<std::string> lines) ❰
❱