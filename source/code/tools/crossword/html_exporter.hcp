class
❪string❫
❪"code/tools/crossword/settings/crossword_puzzle_settings"❫
⚯
❪iostream❫
❪"code/utilities/types/vectors/creators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟

◀public: static▶ void ☀Export(std::vector<std::vector<std::string>> const& grid, Crossword_Puzzle_Settings const& settings)❰

    //create artifact
    auto str = As_Html_Format(grid,settings.words);
    Write_To_File(settings.file_name,str);
❱

◀private: static▶ std::string ☀As_Html_Format(std::vector<std::vector<std::string>> const& grid, std::vector<std::string> const& words)❰
    std::string x;
    Append_With_Newline(x,"<!doctype html>");
    Append_With_Newline(x,"<html>");
    Append_With_Newline(x,"<head>");
    Append_With_Newline(x,"<style>");
    Append_With_Newline(x,"table, th, td { border: 0px solid black; }");
    Append_With_Newline(x,"table { padding-bottom: 60px; }");
    Append_With_Newline(x,"tr { text-align: center; }");
    Append_With_Newline(x,"</style>");
    Append_With_Newline(x,"</head>");
    Append_With_Newline(x,"<body>");
    
    Append_With_Newline(x,"<strong> T&T word search game </strong>");
    
    //puzzle box and word bank
    Append_With_Newline(x,As_Html_Table(grid));
    Append_With_Newline(x,As_Html_Table(words,4));
    
    Append_With_Newline(x,"</body>");
    Append_With_Newline(x,"</html>");
    
    return x;
❱

◀private: static▶ std::string ☀As_Html_Table(std::vector<std::vector<std::string>> const& grid)❰

    std::string x;
    Append_With_Newline(x,"<table style=\"width:100%\">");
    for (auto const& a: grid){
        Append_With_Newline(x,"<tr>");
        for (auto const& b: a){
            Append_With_Newline(x,"<td>");
            Append_With_Newline(x,b);
            Append_With_Newline(x,"</td>");
        }
        Append_With_Newline(x,"</tr>");
    }
    Append_With_Newline(x,"</table>");
    return x;
❱

◀private: static▶ std::string ☀As_Html_Table(std::vector<std::string> const& words, int per_row)❰

    std::string x;
    Append_With_Newline(x,"<table style=\"width:100%\">");
    int count = 0;
    Append_With_Newline(x,"<tr>");
    for (auto const& word: words){
        if (count == per_row){
            count = 0;
            Append_With_Newline(x,"</tr>");
            Append_With_Newline(x,"<tr>");
        }
        
            Append_With_Newline(x,"<td>");
            Append_With_Newline(x,word);
            Append_With_Newline(x,"</td>");
        
        ++count;
    }
    Append_With_Newline(x,"</tr>");
    Append_With_Newline(x,"</table>");
    return x;
❱