class
❪string❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/deskstock/deskstock_documentation_getter"❫
❪"code/tools/games/mario/mario_documentation_getter"❫
❪"code/tools/noogle/noogle_documentation_getter"❫
❪"code/tools/gcalviz/gcalviz_documentation_getter"❫
❪"code/tools/repo_tools/external_deps_analysis/external_deps_analysis_documentation_getter"❫
❪"code/tools/repo_tools/shared_object_trace/shared_object_trace_documentation_getter"❫
❪"code/tools/repo_tools/build_determinism/build_determinism_documentation_getter"❫
❪"code/tools/repo_tools/build_tools/build_tools_documentation_getter"❫
❪"code/tools/transcompilers/unilang/main/program_input"❫
❪"code/utilities/formats/pdf/pdf_settings"❫
❪"code/utilities/formats/pdf/pdf_creator"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/utilities/program/wrappers/git/update/git_updater"❫
❪"code/tools/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/personal/hosting/hosting_repo"❫
⚞⚟

◀public: static▶ void ☀Deploy()❰

    //get all the debian packages out of this repository
    auto exported_path = Bazel_Working_Directory() + "/bazel-bin/code";
    auto debs = Recursively_Get_All_Paths_To_Non_Symlink_Deb_Files_Of_Path(exported_path);
    
    // for (auto deb: debs){
    //   std::cout << deb << std::endl;
    // }
    
    
      //go to repo we are adding things to
      std::string repo_path = Hosting_Repo::Get();
      Set_Path(repo_path);
      
      auto docs = Get_Documentation_Structures();
      for (auto const& doc: docs){
        Deploy_Program(debs,doc);
      }
      
      Git_Update_Settings settings;
      settings.message = "redeploy";
      Git_Updater::Update_All_Changes(settings);
      
      //https://www.guyrutenberg.com/2016/07/15/creating-a-personal-apt-repository-using-dpkg-scanpackages/
      //https://askubuntu.com/questions/71510/how-do-i-create-a-ppa/71516#71516
      //https://assafmo.github.io/2019/05/02/ppa-repo-hosted-on-github.html
      //https://github.com/assafmo/ppa/blob/master/update.sh
      
      //work into bazel:
      //https://github.com/graknlabs/bazel-distribution
    
❱

◀private: static▶ std::vector<Structure> ☀Get_Documentation_Structures()❰
  std::vector<Structure> docs;
  //docs.emplace_back(Deskstock_Documentation_Getter::Get());
  //docs.emplace_back(Noogle_Documentation_Getter::Get());
  //docs.emplace_back(Mario_Documentation_Getter::Get());
  //docs.emplace_back(Gcalviz_Documentation_Getter::Get());
  //docs.emplace_back(External_Deps_Analysis_Documentation_Getter::Get());
  //docs.emplace_back(Shared_Object_Trace_Documentation_Getter::Get());
  docs.emplace_back(Build_Determinism_Documentation_Getter::Get());
  //docs.emplace_back(Build_Tools_Documentation_Getter::Get());
  return docs;
❱

◀private: static▶ void ☀Deploy_Program(std::vector<std::string> const& debs, Structure const& doc_structure)❰

    std::string program_name = as_string(doc_structure.name);
    std::string folder_name = "releases/" + program_name;
    Create_Path_And_Temporarily_Move_To_It_To_Call_Function(folder_name,[&](){
    
        //find program's debs and copy them over
        auto specific_debs = Filter(debs,[&](std::string const& file){
            auto deb_files_should_start_with = program_name + "_";
            return File_Name_Starts_With(file,deb_files_should_start_with);
        });
        Copy_Files_To_Current_Directory(specific_debs);
        
        Create_Path_And_Temporarily_Move_To_It_To_Call_Function("docs",[&](){
          //create pdf documentation
          Pdf_Settings pdf_settings;
          pdf_settings.pandoc_settings.latex_template = "temp_latex.tex";
          pdf_settings.pandoc_settings.md_format = "temp_markdown.md";
          pdf_settings.pandoc_settings.resulting_pdf = program_name + ".pdf";
          pdf_settings.pandoc_settings.font_size = 10;
          pdf_settings.markdown_settings = Get_Pdf_Markdown_Settings();
          Pdf_Creator::Create_Pdf(doc_structure,pdf_settings);
          
          std::string markdown_file_name = program_name + ".md";
          std::string html_file_name = program_name + ".html";
          Create_Markdown(doc_structure,markdown_file_name);
          
          // create html file
          execute("pandoc " + program_name + ".md --from markdown --to html5 > " + html_file_name);
          
          for (auto it: specific_debs){
              std::cout << it << std::endl;
          }
        });
        
        Create_List_File(program_name);
        Create_Packages_File();
    });
❱

◀private: static▶ Markdown_Settings ☀Get_Pdf_Markdown_Settings()❰

    Program_Input input;
    input.settings = Root_Settings_Getter::Get();

    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = true;
    md_settings.tables.as_list = true;
    md_settings.image.style = Markdown_Image_Style::CLASSIC;

    return md_settings;
❱



◀private: static▶ void ☀Create_Packages_File()❰
  
  //why does this create a different file each time?
  execute("dpkg-scanpackages -m . | gzip -c > Packages.gz");
❱

◀private: static▶ void ☀Create_List_File(std::string const& program_name)❰
  
  std::string content = "deb [trusted=yes] https://github.com/luxe/luxe.github.com/raw/master/releases/" + program_name + " /";
  std::string file_name = program_name + ".list";
  Write_To_File(file_name,content);
❱

◀private: static▶ void ☀Create_Markdown(Structure const& structure, std::string const& file_name)❰

    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = false;
    
    auto result = Markdown_Str_Getter::Get(structure,contributors,md_settings);
    Write_To_File(file_name,result);
    
❱

