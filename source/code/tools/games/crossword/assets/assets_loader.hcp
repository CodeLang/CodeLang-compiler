class
❪string❫
❪iostream❫
❪memory❫
❪utility❫
❪"code/tools/games/crossword/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Audio.hpp❫
⚯
⚞⚟

◀public: static▶ Assets ☀Load() ❰
    Assets x;
    //Load_Font(x.main_font,"/home/laptop/Desktop/math_game/fonts/Neat_Chalk.ttf");
    //Load_Font(x.main_font,"/usr/share/fonts/truetype/tlwg/Loma.ttf");
    // Load_Font(x.main_font,"/home/laptop/Desktop/math_game/fonts/chinese.ttf");
    
    // x.title_text.setString(L"我爱你");
    // x.title_text.setFont(x.main_font);
    // x.title_text.setCharacterSize(1);
    // Center_Text(x.title_text);
    // x.title_text.move(-200,-300);
    
    Load_Font(x.main_font,"/home/laptop/Desktop/DroidSansMono.ttf");
    
    // x.score.setString("0");
    // x.score.setFont(x.main_font);
    // x.score.setCharacterSize(150);
    // //Center_Text(x.score);
    // x.score.move(0,200);
    
    //x.letters.emplace_back(std::move(x.score));
    
    
    //sf::Text temp;
    //temp.setColor(sf::Color(255, 255, 255));
    
    sf::Text temp;
    temp.setFont(x.main_font);
    temp.setCharacterSize(150);
    
    temp.setString("A");
    x.letters.emplace_back(temp);
    
    temp.setString("B");
    x.letters.emplace_back(temp);
    
    temp.setString("C");
    x.letters.emplace_back(temp);
    
    temp.setString("D");
    x.letters.emplace_back(temp);
    
    temp.setString("E");
    x.letters.emplace_back(temp);
    
    temp.setString("F");
    x.letters.emplace_back(temp);
    
    temp.setString("G");
    x.letters.emplace_back(temp);
    
    
    int width = 200;
    for (auto & it: x.letters){
        it.setPosition(width,300);
        width += 100;
    }
    
    
    
    return x;
    
    
❱

◀private: static▶ void ☀Center_Text(sf::Text & text)❰
    text.setPosition(sf::VideoMode::getDesktopMode().width/2.0f,sf::VideoMode::getDesktopMode().height/2.0f);
    text.setOrigin(text.getLocalBounds().left + text.getLocalBounds().width / 2.0f,
                           text.getLocalBounds().top + text.getLocalBounds().height / 2.0f);
❱

◀private: static▶ void ☀Load_Font(sf::Font & font, std::string const& file_name)❰

    if (!font.loadFromFile(file_name)){
        std::cerr << "failed to load " << file_name << std::endl;
        exit(0);
    }
❱