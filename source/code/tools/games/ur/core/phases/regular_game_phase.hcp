class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/tools/games/ur/assets/assets"❫
❪"code/tools/games/ur/state/game_state"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/formats/json/functions/lib"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/data/f310_events"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/map/lib"❫
❪"code/utilities/types/vectors/observers/size_frequency_counter"❫
❪"code/utilities/linguistics/speak/word_speaker"❫
❪"code/utilities/colors/converters"❫
❪"code/utilities/colors/color_transitioner"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_event_synthesizer"❫
❪"code/utilities/games/ur/ur_logic"❫
❪"code/tools/games/ur/core/phases/roll_phase"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(F310_Events const& events, Game_State & state, Assets & assets) ❰
    
    
    //handle player turns

    if (state.ur_state.player_turn == 0){
        assets.game_state.setString("Player 1 Turn");
        Handle_Player_Turn_Event(state,state.ur_state.players[0],events.left,assets);
    }
    else if (state.ur_state.player_turn == 1){
        assets.game_state.setString("Player 2 Turn");
        Handle_Player_Turn_Event(state,state.ur_state.players[1],events.right,assets);
    }
    
    
    //update graphics
    Update_Graphics(state,assets);
❱


◀private: static▶ void ☀Update_Graphics(Game_State & state, Assets & assets) ❰

    //update graphics
    for (size_t i = 0 ; i < state.ur_state.players[0].pieces.size(); ++i){
        auto spot_name = state.ur_state.players[0].pieces[i].current_spot;
        auto pos = Spot_Name_Position(assets.spots,spot_name);
        assets.p1_pieces[i].setPosition(pos);
    }
    for (size_t i = 0 ; i < state.ur_state.players[1].pieces.size(); ++i){
        auto spot_name = state.ur_state.players[1].pieces[i].current_spot;
        auto pos = Spot_Name_Position(assets.spots,spot_name);
        assets.p2_pieces[i].setPosition(pos);
    }
❱

◀private: static▶ sf::Vector2f ☀Spot_Name_Position(Named_Rectangles const& spots, std::string const& spot_name) ❰
    sf::Vector2f results;
    
    for (auto const& it: spots.shapes){
        if (it.name == spot_name){
            return it.shape.getPosition();
        }
    }
    
    return results;
❱


◀private: static▶ void ☀Handle_Player_Turn_Event(Game_State & state, Ur_Player_State & pstate, std::vector<F310_Event> const& events, Assets & assets) ❰

    //roll phase
    if (pstate.phase == Player_Phase::ROLL){
        assets.game_state.setString(assets.game_state.getString() + " roll");
        Roll_Phase::Run(state,pstate,events);
    }
    
    //choose phase
    else if (pstate.phase == Player_Phase::CHOOSE){
        assets.game_state.setString(assets.game_state.getString() + " choose ");
        assets.game_state.setString(assets.game_state.getString() + std::to_string(pstate.roll));
        Handle_Choose_Phase(state,pstate,events,assets);
    }
    
    //move phase
    else if (pstate.phase == Player_Phase::MOVE){
        auto current_spot = pstate.pieces[pstate.possible_selections[pstate.piece_chosen]].current_spot;
        auto new_spot = Follow_Path_Or(pstate.path,current_spot,pstate.roll,std::string(""));
        
        
        //move piece
        pstate.pieces[pstate.possible_selections[pstate.piece_chosen]].current_spot = new_spot;
        
        Move_To_Next_Player(state,assets);
    }


    
❱


◀private: static▶ void ☀Reset_Player_For_Turn(Ur_Player_State & pstate) ❰
    pstate.phase = Player_Phase::ROLL;
    pstate.possible_selections.clear();
    pstate.piece_chosen = 0;
❱


◀private: static▶ void ☀Move_To_Next_Player(Game_State & state, Assets & assets) ❰

        if (state.ur_state.player_turn == 1){
            state.ur_state.player_turn = 0;
        }
        else {
            state.ur_state.player_turn = 1;
        }
        
        Reset_Player_For_Turn(state.ur_state.players[0]);
        Reset_Player_For_Turn(state.ur_state.players[1]);
        assets.piece_selector.setPosition(-100,-100);
❱

◀private: static▶ void ☀Handle_Choose_Phase(Game_State & state, Ur_Player_State & pstate, std::vector<F310_Event> const& events, Assets & assets) ❰

    if (!pstate.possible_selections.empty()){
        if (In_Vector(events,F310_Event::ARROWS_RIGHT_CLICKED)){
            Set_Next_Index_In_Round_Robin(pstate.possible_selections,pstate.piece_chosen);
        }
        else if (In_Vector(events,F310_Event::ARROWS_LEFT_CLICKED)){
            Set_Previous_Index_In_Round_Robin(pstate.possible_selections,pstate.piece_chosen);
        }
        else if (In_Vector(events,F310_Event::BUTTONS_RIGHT_CLICKED)){
            pstate.phase = Player_Phase::MOVE;
        }
        
        auto spot_name = pstate.pieces[pstate.possible_selections[pstate.piece_chosen]].current_spot;
        auto pos = Spot_Name_Position(assets.spots,spot_name);
        pos.y -= 40;
        pos.x += 40;
        assets.piece_selector.setPosition(pos);
    }
    else {
        if (In_Vector(events,F310_Event::BUTTONS_RIGHT_CLICKED)){
            Move_To_Next_Player(state,assets);
        }
    }
❱