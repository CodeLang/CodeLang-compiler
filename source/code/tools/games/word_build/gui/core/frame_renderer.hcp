class
❪string❫
❪iostream❫
❪vector❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/formats/json/functions/lib"❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/tools/games/word_build/gui/assets/assets"❫
⚯
⚞⚟

◀public: static▶ void ☀Run_Frame_Render(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰
    window.clear(sf::Color(state.color.r, state.color.g, state.color.b));
    
    
    if (!state.start_game){
        Render_Active_Game(window,state,assets);
    }
    
    window.display();
❱



◀private: static▶ void ☀Render_Active_Game(sf::RenderWindow & window, Game_State & state, Assets & assets) ❰

    for (auto const& it: assets.letters){
        window.draw(it);
    }
    
    window.draw(assets.p1.pointer);
    window.draw(assets.p2.pointer);
    window.draw(assets.countdown);
    window.draw(assets.score);
    
    for (auto const& it: assets.answers){
        window.draw(it);
    }
    
    for (auto const& it: assets.p1.selections){
        window.draw(it);
    }
    for (auto const& it: assets.p2.selections){
        window.draw(it);
    }
    
    window.draw(assets.p1.score);
    window.draw(assets.p2.score);
    
    // sf::CircleShape shape(50);
    // shape.setFillColor(sf::Color(150, 50, 250));

    // // set a 10-pixel wide orange outline
    // shape.setOutlineThickness(10);
    // shape.setOutlineColor(sf::Color(250, 150, 100));
    
    // shape.setPosition(state.x,state.y);
    // window.draw(shape);
❱
