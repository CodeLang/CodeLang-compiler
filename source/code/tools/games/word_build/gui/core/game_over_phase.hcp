class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/tools/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚯
❪"code/utilities/types/strings/sfml/sfml_text"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(Game_State & state, Assets & assets) ❰

    //restart the game when user is ready
    if (!state.controller.left.previous.center.start && state.controller.left.current.center.start){
        state.phase = Game_Phase::STARTING_GAME;
    }
    if (!state.controller.right.previous.center.start && state.controller.right.current.center.start){
        state.phase = Game_Phase::STARTING_GAME;
    }
    
    //back to menu
    if (!state.controller.left.previous.center.center && state.controller.left.current.center.center){
        state.phase = Game_Phase::MAIN_MENU;
    }
    if (!state.controller.right.previous.center.center && state.controller.right.current.center.center){
        state.phase = Game_Phase::MAIN_MENU;
    }
    
    //let the users analyze the end results
    if (!state.controller.right.previous.buttons.right && state.controller.right.current.buttons.right){
        Sfml_Text::Sort_By_Length(assets.answers);
    }
    if (!state.controller.left.previous.buttons.right && state.controller.left.current.buttons.right){
        Sfml_Text::Sort_By_Length(assets.answers);
    }
    
    if (!state.controller.right.previous.buttons.left && state.controller.right.current.buttons.left){
        Sfml_Text::Alphabetize(assets.answers);
    }
    if (!state.controller.left.previous.buttons.left && state.controller.left.current.buttons.left){
        Sfml_Text::Alphabetize(assets.answers);
    }
    
    
    
    int move_speed = 10;
    
    if (state.controller.right.current.arrows.left){
        for (auto & it: assets.answers){
            it.move(move_speed * -1,0);
        }
        assets.p1.stats.move(move_speed * -1,0);
        assets.p2.stats.move(move_speed * -1,0);
        assets.end_percentage.move(move_speed * -1,0);
    }
    if (state.controller.right.current.arrows.right){
        for (auto & it: assets.answers){
            it.move(move_speed,0);
        }
        assets.p1.stats.move(move_speed,0);
        assets.p2.stats.move(move_speed,0);
        assets.end_percentage.move(move_speed,0);
        
    }
    
    if (state.controller.left.current.arrows.left){
        for (auto & it: assets.answers){
            it.move(move_speed * -1,0);
        }
        assets.p1.stats.move(move_speed * -1,0);
        assets.p2.stats.move(move_speed * -1,0);
        assets.end_percentage.move(move_speed * -1,0);
    }
    if (state.controller.left.current.arrows.right){
        for (auto & it: assets.answers){
            it.move(move_speed,0);
        }
        assets.p1.stats.move(move_speed,0);
        assets.p2.stats.move(move_speed,0);
        assets.end_percentage.move(move_speed,0);
    }
    
❱