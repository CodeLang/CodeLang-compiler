class
❪string❫
❪iostream❫
❪vector❫
❪thread❫
❪algorithm❫
❪"code/tools/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚯
❪"code/utilities/linguistics/build_word/game/puzzle_builder"❫
⚞⚟

◀public: static▶ void ☀Run_Phase(Game_State & state, Assets & assets) ❰

    //generate a new puzzle
    state.puzzle = Puzzle_Builder::Create_Puzzles(state.puzzle_build_settings)[0];
    
    
    //recolor if needed
    assets.p1.pointer.setFillColor(state.p1_state.color);
    assets.p2.pointer.setFillColor(state.p2_state.color);
    assets.p1.stats.setFillColor(state.p1_state.color);
    assets.p2.stats.setFillColor(state.p2_state.color);
    assets.p1.combo_bar.setFillColor(state.p1_state.color);
    assets.p2.combo_bar.setFillColor(state.p2_state.color);
    assets.p1.combo_number.setFillColor(state.p1_state.color);
    assets.p2.combo_number.setFillColor(state.p2_state.color);
    
    //turn the new puzzle into assets
    assets.letters.clear();
    sf::Text temp;
    temp.setFont(assets.main_font);
    temp.setCharacterSize(150);
    for (auto const& letter: state.puzzle.letters){

        temp.setString(letter);
        temp.setFillColor(state.letter_color);
        assets.letters.emplace_back(temp);
    }
    
    int width = 200;
    for (auto & it: assets.letters){
        it.setPosition(width,300);
        width += 100;
    }
    
    //position the score
    assets.score.setPosition(width,335);
    assets.percentage.setPosition(width+5,430);
    
    //position the answers
    width += 250;
    assets.answers.clear();
    temp.setCharacterSize(25);
    temp.setFillColor(state.bg_color);
    auto parts = Split_Every_N(state.puzzle.words,24);
    for (auto const& row: parts){
        
        int height = 40;
        for (auto const& col: row){
            temp.setPosition(width,height);
            temp.setString(col);
            assets.answers.emplace_back(temp);
            height += 40;
        }
        width += 180;
    }
    
    //clear the game answers
    assets.game_answers.clear();
    
    assets.p1.stats.setString("");
    assets.p2.stats.setString("");
    assets.p1.stats.setPosition(410,500);
    assets.p2.stats.setPosition(410,10);
    
    
    //reset the game timer
    state.countdown.restart();
    
    //reset the user state
    state.p1_state.current_letter_selection = 0;
    state.p1_state.selected_letters.clear();
    assets.p1.selections.clear();
    assets.p1.score.setString("0");
    state.p1_state.combo_countdown.restart();
    state.p1_state.current_combo = 0;
    state.p1_state.current_combo_timeout_ms = state.p1_state.start_combo_timeout_ms;
    
    state.p2_state.current_letter_selection = 0;
    state.p2_state.selected_letters.clear();
    assets.p2.selections.clear();
    assets.p2.score.setString("0");
    state.p2_state.combo_countdown.restart();
    state.p2_state.current_combo = 0;
    state.p2_state.current_combo_timeout_ms = state.p1_state.start_combo_timeout_ms;
    
    
    assets.p1.combo_bar.setSize(sf::Vector2f(0, 20));
    assets.p2.combo_bar.setSize(sf::Vector2f(0, 20));
    
    assets.p1.combo_number.setString("");
    assets.p2.combo_number.setString("");
    
    assets.new_round.sound.play();
    
    state.p1_state.found_words.clear();
    state.p2_state.found_words.clear();
    
❱