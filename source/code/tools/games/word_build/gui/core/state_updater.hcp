class
❪string❫
❪iostream❫
❪vector❫
❪"code/tools/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_gamepads_state_getter"❫
❪"code/utilities/formats/json/functions/lib"❫
❪"code/tools/games/word_build/gui/assets/assets_loader"❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action
    state.controller_current = F310_Gamepads_State_Getter::Get();
    
    Handle_Score_Change(window,state,assets);
    
    state.controller_previous = state.controller_current;
❱

◀private: static▶ void ☀Handle_Score_Change(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //std::cout << state.controller_current.left.left_joystick.vertical_axis << std::endl;

    int move_speed = 10;
    
    if (state.controller_current.left.left_joystick.vertical_axis > 1){
        state.y -= move_speed;
    }
    if (state.controller_current.left.left_joystick.vertical_axis < -1){
        state.y += move_speed;
    }
    if (state.controller_current.left.left_joystick.horizontal_axis < 1){
        state.x -= move_speed;
    }
    if (state.controller_current.left.left_joystick.horizontal_axis > -1){
        state.x += move_speed;
    }
❱












