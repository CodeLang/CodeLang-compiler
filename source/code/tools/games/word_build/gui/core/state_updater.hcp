class
❪string❫
❪iostream❫
❪vector❫
❪"code/tools/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_gamepads_state_getter"❫
❪"code/utilities/formats/json/functions/lib"❫
❪"code/tools/games/word_build/gui/assets/assets_loader"❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
❪"code/utilities/linguistics/build_word/game/puzzle_builder"❫
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action
    state.controller_current = F310_Gamepads_State_Getter::Get();
    
    if (state.start_game){
        Start_Game(state,assets);
        state.start_game = false;
    }
    
    Handle_Player_Input(window,state,assets);
    
    state.controller_previous = state.controller_current;
❱

◀private: static▶ void ☀Start_Game(Game_State & state, Assets & assets) ❰

    assets.letters.clear();
    
    
    state.puzzle = Puzzle_Builder::Create_Puzzles(state.puzzle_build_settings)[0];
    
    
    
    sf::Text temp;
    temp.setFont(assets.main_font);
    temp.setCharacterSize(150);
    
    for (auto const& letter: state.puzzle.letters){

        temp.setString(letter);
        assets.letters.emplace_back(temp);
    }
    
    
    int width = 200;
    for (auto & it: assets.letters){
        it.setPosition(width,300);
        width += 100;
    }
    
    
❱


◀private: static▶ void ☀Handle_Player_Input(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //std::cout << state.controller_current.left.left_joystick.vertical_axis << std::endl;

    int move_speed = 10;
    
    if (state.controller_current.left.left_joystick.vertical_axis > 1){
        state.y -= move_speed;
    }
    if (state.controller_current.left.left_joystick.vertical_axis < -1){
        state.y += move_speed;
    }
    if (state.controller_current.left.left_joystick.horizontal_axis < 1){
        state.x -= move_speed;
    }
    if (state.controller_current.left.left_joystick.horizontal_axis > -1){
        state.x += move_speed;
    }
    
    if (!state.controller_previous.left.center.start && state.controller_current.left.center.start){
        state.start_game = true;
    }
❱












