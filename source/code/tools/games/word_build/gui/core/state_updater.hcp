class
❪string❫
❪iostream❫
❪vector❫
❪"code/tools/games/word_build/gui/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/peripheral/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/peripheral/keyboard/F310_gamepad/functions/f310_gamepads_state_getter"❫
❪"code/utilities/formats/json/functions/lib"❫
❪"code/tools/games/word_build/gui/assets/assets_loader"❫
❪"code/tools/games/word_build/gui/state/game_state"❫
❪"code/utilities/math/math"❫
❪"code/utilities/types/vectors/observers/lib"❫
⚯
❪"code/utilities/peripheral/keyboard/joycons/joystick_rotating_checker"❫
❪"code/utilities/linguistics/build_word/game/puzzle_builder"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action

    auto controller_state = F310_Gamepads_State_Getter::Get();
    state.controller.left.current = controller_state.left;
    state.controller.right.current = controller_state.right;
    
    //possibly restart the game
    if (state.start_game){
        Start_Game(state,assets);
        state.start_game = false;
    }
    else if (state.game_over){
        Game_Over(state,assets);
    }
    else {
        Regular_Game_Frame(state,assets);
    }
    
    //store previous user actions
    state.controller.left.previous = controller_state.left;
    state.controller.right.previous = controller_state.right;
❱

◀private: static▶ void ☀Regular_Game_Frame(Game_State & state, Assets & assets) ❰

    //handle user input
    Handle_Player_Input(state,assets);

    Update_Game_State(state,assets);
❱

◀private: static▶ void ☀Start_Game(Game_State & state, Assets & assets) ❰

    //generate a new puzzle
    state.puzzle = Puzzle_Builder::Create_Puzzles(state.puzzle_build_settings)[0];
    
    //turn the new puzzle into assets
    assets.letters.clear();
    sf::Text temp;
    temp.setFont(assets.main_font);
    temp.setCharacterSize(150);
    for (auto const& letter: state.puzzle.letters){

        temp.setString(letter);
        assets.letters.emplace_back(temp);
    }
    
    int width = 200;
    for (auto & it: assets.letters){
        it.setPosition(width,300);
        width += 100;
    }
    
    //position the score
    assets.score.setPosition(width,335);
    
    //position the answers
    width += 250;
    assets.answers.clear();
    temp.setCharacterSize(25);
    temp.setFillColor(state.color);
    auto parts = Split_Every_N(state.puzzle.words,24);
    for (auto const& row: parts){
        
        int height = 100;
        for (auto const& col: row){
            temp.setPosition(width,height);
            temp.setString(col);
            assets.answers.emplace_back(temp);
            height += 40;
        }
        width += 180;
    }
    
    
    //reset the game timer
    state.countdown.restart();
    
    //reset the user state
    state.p1_state.current_letter_selection = 0;
    state.p1_state.selected_letters.clear();
    assets.p1.selections.clear();
    assets.p1.score.setString("0");
    
    state.p2_state.current_letter_selection = 0;
    state.p2_state.selected_letters.clear();
    assets.p2.selections.clear();
    assets.p2.score.setString("0");
    
❱


◀private: static▶ void ☀Handle_Player_Input(Game_State & state, Assets & assets)❰

    //std::cout << state.controller.left.current.left_joystick.vertical_axis << std::endl;

    // int move_speed = 10;
    
    // if (state.controller.left.current.left_joystick.vertical_axis > 1){
    //     state.y -= move_speed;
    // }
    // if (state.controller.left.current.left_joystick.vertical_axis < -1){
    //     state.y += move_speed;
    // }
    // if (state.controller.left.current.left_joystick.horizontal_axis < 1){
    //     state.x -= move_speed;
    // }
    // if (state.controller.left.current.left_joystick.horizontal_axis > -1){
    //     state.x += move_speed;
    // }
    
    
    
    //set plalyer 1 pointer
    if (!state.controller.left.previous.arrows.left && state.controller.left.current.arrows.left){
        Set_Previous_Index_In_Round_Robin(state.puzzle.letters,state.p1_state.current_letter_selection);
    }
    if (!state.controller.left.previous.arrows.right && state.controller.left.current.arrows.right){
        Set_Next_Index_In_Round_Robin(state.puzzle.letters,state.p1_state.current_letter_selection);
    }
    assets.p1.pointer.setPosition((state.p1_state.current_letter_selection*100) + 225,480);
    
    //set player 1 selection
    if (!state.controller.left.previous.buttons.right && state.controller.left.current.buttons.right){
        if (!In_Vector(state.p1_state.selected_letters,state.p1_state.current_letter_selection)){
            state.p1_state.selected_letters.emplace_back(state.p1_state.current_letter_selection);
            
            sf::RectangleShape rectangle(sf::Vector2f(80, 5));
            rectangle.setPosition(205 + (100 * state.p1_state.current_letter_selection),455);
            rectangle.setFillColor(state.p1_state.color);
            assets.p1.selections.emplace_back(rectangle);
        }
    }
    
    //drop player 1 selection
    if (!state.controller.left.previous.buttons.down && state.controller.left.current.buttons.down){
        state.p1_state.selected_letters.clear();
        assets.p1.selections.clear();
    }
    
    
    Player_Match_Check(state.p1_state,assets.p1,state,assets);
    Player_Match_Check(state.p2_state,assets.p2,state,assets);
    
    
    
    
    
    //set plalyer 2 pointer
    if (!state.controller.right.previous.arrows.left && state.controller.right.current.arrows.left){
        Set_Previous_Index_In_Round_Robin(state.puzzle.letters,state.p2_state.current_letter_selection);
    }
    if (!state.controller.right.previous.arrows.right && state.controller.right.current.arrows.right){
        Set_Next_Index_In_Round_Robin(state.puzzle.letters,state.p2_state.current_letter_selection);
    }
    assets.p2.pointer.setPosition((state.p2_state.current_letter_selection*100) + 270,315);
    
    //set player 2 selection
    if (!state.controller.right.previous.buttons.right && state.controller.right.current.buttons.right){
        if (!In_Vector(state.p2_state.selected_letters,state.p2_state.current_letter_selection)){
            state.p2_state.selected_letters.emplace_back(state.p2_state.current_letter_selection);
            
            sf::RectangleShape rectangle(sf::Vector2f(80, 5));
            rectangle.setPosition(205 + (100 * state.p2_state.current_letter_selection),333);
            rectangle.setFillColor(state.p2_state.color);
            assets.p2.selections.emplace_back(rectangle);
        }
    }
    
    //drop player 2 selection
    if (!state.controller.right.previous.buttons.down && state.controller.right.current.buttons.down){
        state.p2_state.selected_letters.clear();
        assets.p2.selections.clear();
    }
    
    
    //restart the game
    if (!state.controller.left.previous.center.start && state.controller.left.current.center.start){
        state.start_game = true;
    }
    if (!state.controller.right.previous.center.start && state.controller.right.current.center.start){
        state.start_game = true;
    }
    
    if (!state.controller.left.previous.center.back && state.controller.left.current.center.back){
        state.game_over = true;
        Show_All_The_Answers(state,assets);
    }
    if (!state.controller.right.previous.center.back && state.controller.right.current.center.back){
        state.game_over = true;
        Show_All_The_Answers(state,assets);
    }
❱

// ◀private: static▶ void ☀Player_Selection_Changes(User_State & user, User_Assets & user_assets, Game_State & state, Assets & assets)❰

//     //set plalyer pointer
//     if (!state.controller.left.previous.arrows.left && state.controller.left.current.arrows.left){
//         Set_Previous_Index_In_Round_Robin(state.puzzle.letters,state.p1_state.current_letter_selection);
//     }
//     if (!state.controller.left.previous.arrows.right && state.controller.left.current.arrows.right){
//         Set_Next_Index_In_Round_Robin(state.puzzle.letters,state.p1_state.current_letter_selection);
//     }
//     assets.p1.pointer.setPosition((state.p1_state.current_letter_selection*100) + 225,480);
    
//     //set player selection
//     if (!state.controller.left.previous.buttons.right && state.controller.left.current.buttons.right){
//         if (!In_Vector(state.p1_state.selected_letters,state.p1_state.current_letter_selection)){
//             state.p1_state.selected_letters.emplace_back(state.p1_state.current_letter_selection);
            
//             sf::RectangleShape rectangle(sf::Vector2f(80, 5));
//             rectangle.setPosition(205 + (100 * state.p1_state.current_letter_selection),455);
//             rectangle.setFillColor(state.p1_state.color);
//             assets.p1.selections.emplace_back(rectangle);
//         }
//     }
    
//     //drop player selection
//     if (!state.controller.left.previous.buttons.down && state.controller.left.current.buttons.down){
//         state.p1_state.selected_letters.clear();
//         assets.p1.selections.clear();
//     }
// ❱

◀private: static▶ void ☀Player_Match_Check(User_State & user, User_Assets & user_assets, Game_State & state, Assets & assets)❰
    std::string current_word;
    for (auto const& it: user.selected_letters){
        current_word += state.puzzle.letters[it];
    }
    
    auto found_index = Get_Index_Of_Element_If_Exists(state.puzzle.words,current_word);
    if (found_index != -1){
        if (assets.answers[found_index].getFillColor() == state.color){
            Player_Found_Answer(user,user_assets,assets,found_index);
        }
    }
❱

◀private: static▶ void ☀Player_Found_Answer(User_State & user, User_Assets & user_assets, Assets & assets, size_t index)❰

    // set the color
    assets.answers[index].setFillColor(user.color);
    
    //increment the player's score
    user_assets.score.setString(std::to_string(as_signed(user_assets.score.getString()) + 1));
    
    //clear the player's selection
    user.selected_letters.clear();
    user_assets.selections.clear();
    
    Handle_User_Combo_Behaviour(user,user_assets);
❱

◀private: static▶ void ☀Handle_User_Combo_Behaviour(User_State & user, User_Assets & user_assets)❰
    
    if (user.current_combo == 0){
        user_assets.combo1.sound.play();
    }
❱


◀private: static▶ void ☀Update_Game_State(Game_State & state, Assets & assets) ❰

    int game_seconds = 180;
    
    //update timer
    sf::Time elapsed_time = state.countdown.getElapsedTime();
    long time_left = game_seconds - elapsed_time.asSeconds();
    assets.countdown.setString(std::to_string(time_left));
    
    //end the game if the time has run out
    if (time_left <= 0){
        assets.countdown.setString("0");
        
        Show_All_The_Answers(state,assets);
        
        state.game_over = true;
    }
    
    //update score
    std::string score = std::to_string(state.puzzle.words.size());
    assets.score.setString(+ "=" +score);
    
    //update answers

❱

◀private: static▶ void ☀Show_All_The_Answers(Game_State & state, Assets & assets) ❰
        for (auto & it: assets.answers){
            if (it.getFillColor() == state.color){
                it.setFillColor(sf::Color(189, 170, 176));
            }
        }
❱

◀private: static▶ void ☀Game_Over(Game_State & state, Assets & assets) ❰

    //restart the game
    if (!state.controller.left.previous.center.start && state.controller.left.current.center.start){
        state.start_game = true;
        state.game_over = false;
    }
    
    
    if (state.controller.right.current.arrows.up){
        for (auto & it: assets.answers){
            it.move(0,-5);
        }
    }
    if (state.controller.right.current.arrows.down){
        for (auto & it: assets.answers){
            it.move(0,5);
        }
    }
    if (state.controller.right.current.arrows.left){
        for (auto & it: assets.answers){
            it.move(-5,0);
        }
    }
    if (state.controller.right.current.arrows.right){
        for (auto & it: assets.answers){
            it.move(5,0);
        }
    }
    
    if (state.controller.left.current.arrows.up){
        for (auto & it: assets.answers){
            it.move(0,-5);
        }
    }
    if (state.controller.left.current.arrows.down){
        for (auto & it: assets.answers){
            it.move(0,5);
        }
    }
    if (state.controller.left.current.arrows.left){
        for (auto & it: assets.answers){
            it.move(-5,0);
        }
    }
    if (state.controller.left.current.arrows.right){
        for (auto & it: assets.answers){
            it.move(5,0);
        }
    }
    
❱











