class
❪iostream❫
❪string❫
❪set❫
⚯
❪"code/utilities/gcal/data/gcal_sorted_events"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
❪"code/utilities/time/date/rfc333_datetime_within_range_checker"❫
❪"code/utilities/data_structures/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/gcal/data/gcal_rooms"❫
❪"code/utilities/json/attribute_check/json_attribute_check_settings"❫
❪"code/utilities/json/attribute_check/json_attribute_checker"❫
❪"code/utilities/signals/lib"❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
⚞⚟

◀public: static▶ void ☀Export_Info(std::string const& email_file, std::string const& whober_file) ❰

        //read in data
        std::set<std::string> emails;
        std::cout << "loading..." << std::endl;
        Read_Json_From_File(emails,email_file);
        
        
        std::map<std::string,nlohmann::json> whober_data;
        
        
        //make sure we have a python environment going for the duration of the program (RAII)
        signal_SIGINT_to_exit();
        pybind11::scoped_interpreter py_guard{};

        Browser_Settings b_settings = Default_Browser_Settings_Getter::Get();
        b_settings.headless = false;
        b_settings.start_maximized = false;
        Browser_Creator::Create(b_settings);
        auto source = Browser_Navigator::Get_React_State_Of_Page(b_settings,"https://whober.uberinternal.com/thickeyuber.com");
        if (source){
            source->erase("badges");
            std::cout << source->dump(2) << std::endl;
        }
        else{
            std::cout << "not found" << std::endl;
        }
        
❱