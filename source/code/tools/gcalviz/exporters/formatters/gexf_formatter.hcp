class
❪iostream❫
❪string❫
❪set❫
❪"code/tools/gcalviz/exporters/data/node_edge_data"❫
❪"code/tools/gcalviz/exporters/data/edge_data"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
❪"code/utilities/time/date/rfc333_datetime_within_range_checker"❫
❪"code/utilities/gcal/data/gcal_sorted_events"❫
⚯
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/data_structures/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ std::string ☀Format(Node_Edge_Data const& node_edge_data)❰
    std::string file_results = Start();
    
    //nodes
    Append_With_Newline(file_results,"<nodes>");
    for (auto const& node: node_edge_data.nodes){
        Append(file_results,"<node ");
        Append_Key_Value(file_results,"id",node);
        Append_Key_Value(file_results,"label",node);
        Append_With_Newline(file_results,"/>");
    }
    Append_With_Newline(file_results,"</nodes>");
    
    //edges
    Append_With_Newline(file_results,"<edges>");
    for (auto const& edge: node_edge_data.edges.hash_table){
        auto e = From_JSON_String<Edge_Data>(edge.first);
        Append(file_results,"<edge ");
        Append_Key_Value(file_results,"source",e.connection.source);
        Append_Key_Value(file_results,"target",e.connection.target);
        
        auto start_epoch = std::to_string(Rfc333_Datetime_To_Epoch_Converter::Convert(e.interval.start));
        auto end_epoch = std::to_string(Rfc333_Datetime_To_Epoch_Converter::Convert(e.interval.end));
        Append_Key_Value(file_results,"start",start_epoch);
        Append_Key_Value(file_results,"end",end_epoch);
        Append_Key_Value(file_results,"weight",std::to_string(edge.second));
        Append_With_Newline(file_results,"/>");
    }
    Append_With_Newline(file_results,"</edges>");
    
    Append(file_results,End());
    return file_results;
❱

◀private: static▶ void ☀Append_Key_Value(std::string & str, std::string const& key, std::string const& val)❰
        Append(str,key);
        Append(str,"=\"");
        Append(str,val);
        Append(str,"\" ");
❱

◀private: static▶ std::string ☀Start()❰

        std::string graph_mode = "dynamic";
        std::string edge_type = "undirected";

        std::string str;
        Append_With_Newline(str,"<gexf xmlns=\"http://www.gexf.net/1.1draft\"");
        Append_With_Newline(str,"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
        Append_With_Newline(str,"xsi:schemaLocation=\"http://www.gexf.net/1.1draft");
        Append_With_Newline(str,"http://www.gexf.net/1.1draft/gexf.xsd\"");
        Append_With_Newline(str,"version=\"1.1\">");
        Append(str,"<graph ");
        Append_Key_Value(str,"mode",graph_mode);
        Append_Key_Value(str,"defaultedgetype",edge_type);
        Append_With_Newline(str,">");
        return str;
❱
◀private: static▶ std::string ☀End()❰
    std::string str;
    Append_With_Newline(str,"</graph>");
    Append_With_Newline(str,"</gexf>");
    return str;
❱