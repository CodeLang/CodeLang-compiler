class
❪iostream❫
❪fstream❫
❪string❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/utilities/documentation/common_documentation_getter"❫
⚯
❪"code/utilities/converters/lib"❫
❪"code/utilities/json/functions/lib"❫
⚞⚟

◀public: static▶ Structure ☀Get() ❰
    Structure s;
    s.literature.paragraphs.emplace_back(Title());
    s.literature.paragraphs.emplace_back(Introduction());
    s.literature.paragraphs.emplace_back(Common_Documentation_Getter::Common_Installation_Instructions("gcalviz"));
    s.literature.paragraphs.emplace_back(Setting_Up_Your_Calendar());
    //s.literature.paragraphs.emplace_back(Presentation_Commentary());
    return s;
❱


◀private: static▶ Paragraph ☀Title() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Visualize your google calendar as a social network");
    
    Sentence s;
    Sentence_Image img;
    img.alternative_text.value = as_wstring("Gcalviz");
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
    return p;
❱

◀private: static▶ Paragraph ☀Introduction() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Introduction");
    
    Add_Sentence(p,"an organization can be represented as a social network");
    Add_Sentence(p,"the interactions between individuals occur through many different mediums");
    Add_Sentence(p,"one of these mediums is through scheduled meetings");
    Add_Sentence(p,"google calendar can be used to configure meeting rooms as separate calendars used for scheduling");
    Add_Sentence(p,"assuming meetings are scheduled publicly, those who have access to scheduling a room, also have access to the meta information of the meetings that takes place");
    Add_Sentence(p,"this includes all of the attendees of a meeting");
    Add_Sentence(p,"by scraping google calendar we can construct a graph of iterations between participants of meetings");
    Add_Sentence(p,"doing so may gleam insight into the inter-workings of an organization's social structure");
    return p;
❱

◀private: static▶ Paragraph ☀Setting_Up_Your_Calendar() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Setting up your calendar");
    
    Add_Sentence(p,"We'll assume you have access to various calendars in which you want to turn into a social network");
    Add_Sentence(p,"you can use any number of calendars to form your network");
    Add_Sentence(p,"In order for the scraper to detect these calendars however, you have to explicitly add yourself as a subscriber");
    Add_Sentence(p,"This can be done by using the \"other calendars\" panel found on the left side of the google calendar app and selecting various calendars to subscribe to");
    Add_Sentence(p,"the calendars do not have to remain visible for the analysis");
    Add_Sentence(p,"they only need to be listed in your \"other calendars\" side panel");
    return p;
❱

◀private: static▶ Paragraph ☀Presentation_Commentary() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Presentation Commentary");
    
    Add_Sentence(p,"How the experiment is presented through dialog");
    return p;
❱

◀private: static▶ void ☀Add_Sentence(Paragraph & p, std::string const& str) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    p.sentences.emplace_back(s);
❱
◀private: static▶ void ☀Add_Sentence_With_Code(Paragraph & p, std::string const& str, std::string const& code) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Code_Line line;
    line.line.value = as_wstring(code);
    s.codes.emplace_back(line);
    p.sentences.emplace_back(s);
❱

◀private: static▶ void ☀Add_Sentence_With_Image(Paragraph & p, std::string const& str, std::string const& image_path) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Sentence_Image img;
    img.image_path.value = as_wstring(image_path);
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
❱