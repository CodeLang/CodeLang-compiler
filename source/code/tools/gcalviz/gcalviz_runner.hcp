class
❪"code/tools/gcalviz/meta_settings"❫
❪iostream❫
❪set❫
⚯
❪"code/utilities/gcal/gcal_getter"❫
❪"code/utilities/gcal/gcal_credentials"❫
❪"code/utilities/gcal/data/gcal_sorted_events"❫
❪"code/tools/gcalviz/settings/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
❪"code/utilities/time/date/rfc333_datetime_within_range_checker"❫
❪"code/utilities/data_structures/unique_counter/unique_counter"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/json/attribute_check/json_attribute_check_settings"❫
❪"code/utilities/json/attribute_check/json_attribute_checker"❫
❪"code/tools/gcalviz/exporters/connections_exporter"❫
❪"code/tools/gcalviz/exporters/metrics_exporter"❫
❪"code/tools/gcalviz/exporters/email_exporter"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/browser/default_browser_settings_getter"❫
⚞⚟

◀public: static▶ void ☀Run(Meta_Settings const& meta) ❰
    
    //load in all of the settings
    auto settings = Default_Settings_Getter::Get();
    
    
    //Browser_Settings b_settings = Default_Browser_Settings_Getter::Get();
    //Browser_Creator::Create(b_settings);
    //exit(0);
    
    //scrape all the meetings (this will connect directly to gcal and make rest calls)
    //unless we decide to only scrape the top and append it to an onshore copy somewhere.
    if (settings.exports.pit_rooms.do_export){
        auto pit_rooms = Gcal_Getter::Get_All_Pittsburgh_Room_Events(settings.credentials);
        Write_Json_To_File(pit_rooms,settings.exports.pit_rooms.path);
    }
    
    //we got a lot of data, but in terms of employee interaction, there is a lot of "junk data".
    //junk data being "hidden meetings", "meetings without start times", "meetings without attendees".
    if (settings.exports.pit_events.do_export){
        Filter_Sort_By_Original_Start_Time(settings.exports.pit_rooms.path,settings.exports.pit_events.path);
    }
    
    //all of the events we have are valid for social network analysis, and organized chronologically
    //now we can build a social network out of it in various ways
    if (settings.exports.pit_connections.do_export){
        Connections_Exporter::CreateGraphML(settings.exports.pit_events.path,settings.exports.pit_connections.path,settings.exports.pit_connections_file_gexf);
    }
    
    //in terms of all the data we scraped, lets extract out the emails
    if (settings.exports.pit_emails.do_export){
        Email_Exporter::Export_Emails(settings.exports.pit_rooms.path,settings.exports.pit_emails.path);
    }
    
    //in terms of all the data we scraped, lets just get some various metrics about it
    if (settings.exports.pit_emails.do_export){
        Metrics_Exporter::Export_Metrics(settings.exports.pit_rooms.path,settings.exports.pit_metrics.path);
    }
    
    //https://gephi.org/
    
    //automating gephi:
    //https://gephi.org/toolkit/
    //https://github.com/kwonoh/gephi-cli
    
    //socnetv
    
    
    //Calculating The Betweenness Centrality In Gephi
    //tells us the importance of an individual as an intermediator
    //https://www.youtube.com/watch?v=PuWNYB0u_gM
    
    //Identifying Influencers Using Pagerank Analysis.
    //https://www.youtube.com/watch?v=OzyPZwSisZ0
    
    //centrality - a general term for how close a node is relative to the network as a whole
    //degree = the number of links connected to a node (two types of directed networks)
    //closeness = average length of the shortest path between the node and al    
    
    //centrality - a general term for how close a nl other nodes in the graph
    //betweenness = based on the number of times a node is crossed by each of the least cost paths (shortest route between nodes)
    
    //clustering
    //clustering coefficient = compares the number of connections to other nodes
    //compared to the potential number of connections to the other nodes in the group
    //a clustering coefficient of 1 indicates a clique; a set where each node is connected all others in the set
    
    
    //gephi require Java 8.  Anything higher seems to not work
    //sudo apt install openjdk-8-jdk-headless
    //sudo apt install oracle-java8-set-default
    //worked for me when
    //javac -version
    //javac 1.8.0_222
    
❱
◀public: static▶ void ☀Filter_Sort_By_Original_Start_Time(std::string const& all_pit_room_events_file, std::string const& sorted_room_events_file) ❰

        //read in all the room data
        Gcal_Rooms pit_rooms;
        std::cout << "loading..." << std::endl;
        Read_Json_From_File(pit_rooms,all_pit_room_events_file);
        
        
        //filter out anything that doesn't have these attributes
        Json_Attribute_Check_Settings check_settings;
        check_settings.attributes = {
            {"originalStartTime","dateTime"},
            {"attendees"}
        };
        
        //flatten away the rooms and only keep events that have certain attributes
        std::cout << "flattening..." << std::endl;
        Gcal_Sorted_Events sorted;
        for (auto const& x: pit_rooms.rooms){
            for (auto const& y: x.events){
                if (Json_Attribute_Checker::Has_Attributes(y,check_settings)){
                    sorted.events.emplace_back(y);
                }
            }
        }
        
        //sort them chronologically
        std::cout << "sorting..." << std::endl;
        std::sort(sorted.events.begin(),sorted.events.end(),[](nlohmann::json const& a, nlohmann::json const& b){
            
            auto result = Rfc333_Datetime_To_Epoch_Converter::Convert(a["originalStartTime"]["dateTime"])
            < Rfc333_Datetime_To_Epoch_Converter::Convert(b["originalStartTime"]["dateTime"]);
            
            return result;
        });
        
        //write the events back
        std::cout << "writing..." << std::endl;
        Write_Json_To_File(sorted,sorted_room_events_file);
❱
