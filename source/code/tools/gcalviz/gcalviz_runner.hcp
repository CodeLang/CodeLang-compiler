class
❪"code/tools/gcalviz/meta_settings"❫
❪iostream❫
⚯
❪"code/utilities/gcal/gcal_getter"❫
❪"code/utilities/gcal/gcal_credentials"❫
❪"code/utilities/gcal/data/gcal_sorted_events"❫
❪"code/tools/gcalviz/settings/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/json/functions/lib"❫
❪"code/utilities/time/date/rfc333_datetime_to_epoch_converter"❫
⚞⚟

◀public: static▶ void ☀Run(Meta_Settings const& meta) ❰
    
    bool download_and_scrape_all_pit_room_events = false;
    bool convert_pit_room_events_into_sorted_events = true;
    std::string all_pit_room_events_file = "/home/thickey/Desktop/pit_room_events.json";
    std::string sorted_room_events_file = "/home/thickey/Desktop/pit_room_events_sorted.json";
    
    //load in google creds
    auto settings = Default_Settings_Getter::Get();
    
    //std::cout << Rfc333_Datetime_To_Epoch_Converter::Convert("2016-03-29T08:00:00-07:00") << std::endl;
    //std::cout << Rfc333_Datetime_To_Epoch_Converter::Convert("2016-05-17T08:00:00-07:00") << std::endl;
    //exit(0);
    
    
    
    //scrape all the meetings
    if (download_and_scrape_all_pit_room_events){
        auto pit_rooms = Gcal_Getter::Get_All_Pittsburgh_Room_Events(settings.credentials);
        Write_Json_To_File(pit_rooms,all_pit_room_events_file);
    }
    
    if (convert_pit_room_events_into_sorted_events){
        
        //read in data
        Gcal_Rooms pit_rooms;
        std::cout << "loading..." << std::endl;
        Read_Json_From_File(pit_rooms,all_pit_room_events_file);
        
        //flatten it
        std::cout << "flattening..." << std::endl;
        Gcal_Sorted_Events sorted;
        for (auto const& x: pit_rooms.rooms){
            for (auto const& y: x.events){
                sorted.events.emplace_back(y);
            }
        }
        
        //sort it
        std::cout << "sorting..." << std::endl;
        std::sort(sorted.events.begin(),sorted.events.end(),[](nlohmann::json const& a, nlohmann::json const& b){
            
            auto result = Rfc333_Datetime_To_Epoch_Converter::Convert(a["originalStartTime"]["dateTime"])
            < Rfc333_Datetime_To_Epoch_Converter::Convert(b["originalStartTime"]["dateTime"]);
            
            return result;
        });
        
        //write it
        std::cout << "writing..." << std::endl;
        Write_Json_To_File(sorted.events,sorted_room_events_file);
    }
    
    
    /*
    size_t total_events = 0;
    for (auto const& it: pit_rooms.rooms){
        total_events += it.events.size();
    }
    std::cout << "total events: " << total_events << std::endl;
    */
    
    /*
    for (auto const& it: pit_rooms){
        auto events = Gcal_Getter::Get_All_Events_Of_Calendar(settings.credentials, it["id"]);
        std::string file_name = "/home/thickey/Desktop/events/";
        std::string summary = it["summary"];
        replace_spaces_with_underscore(summary);
        file_name += summary;
        
        std::cout << "writing " << file_name << std::endl;
        //Write_To_File(file_name,events);
        Write_Json_To_File(events,file_name);
    }
    */
    
    //auto sfo_rooms = Gcal_Getter::Get_San_Francisco_Rooms(creds);
    //std::cout << sfo_rooms.size() << std::endl;
    
    //https://gephi.org/
❱