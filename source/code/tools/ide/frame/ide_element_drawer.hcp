class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/graphics/imgui/loop/mechanics"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_frame_getter"❫
❪"code/utilities/data_structures/graphics/objects/faced_grid/grid_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_is_mouse_over"❫
❪"code/utilities/data_structures/graphics/objects/cursor/cursor_drawer"❫
❪"code/utilities/data_structures/graphics/objects/slider/slider_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_face_tree_drawer"❫
❪"code/utilities/types/variant/lib"❫
❪"code/tools/ide/frame/move_all_ide_elements"❫
❪"code/tools/ide/frame/convert_all_ide_elements"❫
❪"code/tools/ide/frame/find_mouse_over_index"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Get(Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    Frame_Elements elements;
    bool was_performed = Adjust_First_Mouse_Over_Element_Via_View_Anchor(settings,pc_input);
    
    if (!was_performed){
        Update_All_Positions_Via_View_Anchor(settings);
    }
    
    elements.types = Convert_All_Ide_Elements::Convert(settings.elements,settings,pc_input).types;
    return elements;
❱

◀private: static▶ bool ☀Adjust_First_Mouse_Over_Element_Via_View_Anchor(Ide_Settings & settings, Pc_Input_State const& pc_input)❰

    Position pos = settings.desktop.mouse.change;
    auto index = Find_Mouse_Over_Index::Find(settings,pc_input);
    
    if (index != -1){
        
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                x.pos.x += pos.x;
                x.pos.y += pos.y;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                x.pos.x += pos.x;
                x.pos.y += pos.y;
            },
            [&](Positioned_Image_Data & x) {
                x.pos.x += pos.x;
                x.pos.y += pos.y;
            },
        }, settings.elements.types[index].element);
    
        return true;
    
    }
    return false;
    
❱

◀private: static▶ void ☀Update_All_Positions_Via_View_Anchor(Ide_Settings & settings)❰
    Move_All_Ide_Elements::Move(settings,settings.desktop.mouse.change);
❱