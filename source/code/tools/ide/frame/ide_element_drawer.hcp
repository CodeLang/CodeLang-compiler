class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/graphics/imgui/loop/mechanics"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_frame_getter"❫
❪"code/utilities/data_structures/graphics/objects/faced_grid/grid_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_is_mouse_over"❫
❪"code/utilities/data_structures/graphics/objects/cursor/cursor_drawer"❫
❪"code/utilities/data_structures/graphics/objects/slider/slider_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_face_tree_drawer"❫
❪"code/utilities/types/variant/lib"❫
❪"code/tools/ide/frame/move_all_ide_elements"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Get(Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    Frame_Elements elements;
    bool was_performed = Adjust_First_Mouse_Over_Element_Via_View_Anchor(settings,pc_input);
    
    if (!was_performed){
        Update_All_Positions_Via_View_Anchor(settings);
    }
    
    Draw_Ide_Elements(elements,settings,pc_input);
    return elements;
❱

◀private: static▶ void ☀Draw_Ide_Elements(Frame_Elements & elements, Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    
    elements.types = Convert_To_Frame_Elements(settings.elements,settings,pc_input).types;

❱

◀private: static▶ Frame_Elements ☀Convert_To_Frame_Elements(Ide_Elements & e, Ide_Settings const& settings, Pc_Input_State const& pc_input)❰

    Frame_Elements elements;
    for (auto & it: e.types){
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                elements.types += Buildable_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,x,pc_input).types;
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                elements.types += Buildable_Schema_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,x,pc_input).types;
            },
            [&](Positioned_Image_Data & x) {
                elements.types.emplace_back(x);
            }
        }, it.element);
    }
    return elements;
❱

◀private: static▶ bool ☀Adjust_First_Mouse_Over_Element_Via_View_Anchor(Ide_Settings & settings, Pc_Input_State const& pc_input)❰

    Position pos = settings.desktop.mouse.change;
    Position prev_pos = settings.desktop.previous_input.mouse.pos;
    
    bool was_performed = false;
    
    
    for (auto & it: settings.elements.types){
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                was_performed = Buildable_Face_Tree_Is_Mouse_Over::Check(settings.desktop.unilang_font_lookup,x,prev_pos);
                if (was_performed){
                    x.pos.x += pos.x;
                    x.pos.y += pos.y;
                }
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                //x.pos.x += pos.x;
                //x.pos.y += pos.y;
            },
            [&](Positioned_Image_Data & x) {
            },
        }, it.element);
        
        if (was_performed){
            return true;
        }
    }
    
    return false;
❱

◀private: static▶ void ☀Update_All_Positions_Via_View_Anchor(Ide_Settings & settings)❰
    Move_All_Ide_Elements::Move(settings,settings.desktop.mouse.change);
❱

◀private: static▶ bool ☀Is_Mouse_Over_Ide_Element(Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    
    bool found = false;
    for (auto & it: settings.elements.types){
        std::visit(overloaded {
            [&](Positioned_Buildable_Face_Tree & x) {
                found = Buildable_Face_Tree_Is_Mouse_Over::Check(settings.desktop.unilang_font_lookup,x,pc_input);
            },
            [&](Positioned_Buildable_Schema_Faced_Tree & x) {
                //found = 
            },
            [&](Positioned_Image_Data & x) {
            },
        }, it.element);
        
        if (found){
            return found;
        }
    }
    
    return found;
    
❱