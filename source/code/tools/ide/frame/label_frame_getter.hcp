class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/tools/ide/frame/logic/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
⚯
❪"code/tools/ide/frame/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/window/window_position_finder"❫
❪"code/utilities/graphics/imgui/ui/draw/label/functions/label_drawer"❫
❪"code/tools/ide/frame/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/tools/ide/frame/mouse_frame_getter"❫
❪"code/utilities/graphics/imgui/ui/draw/label/functions/grid_label_drawer"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Get(Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    Frame_Elements elements;
    Draw_Label(elements,settings,pc_input);
    return elements;
❱

◀private: static▶ void ☀Draw_Label(Frame_Elements & elements, Ide_Settings & settings, Pc_Input_State const& pc_input)❰

    //the closest to the corner we can get
    //this is basically used as our pseudo (0,0) for drawing anything in our application
    Position pos = settings.view_anchor;
    //pos = Window_Position_Finder::attempted_perfect_top_left_corner();
    
    
    settings.test_label.pos.x = pos.x + 30;
    settings.test_label.pos.y = pos.y + 30;
    
    //std::cout << settings.mouse.right_selection.shape.shape.dimensions.width << "x" << settings.mouse.right_selection.shape.shape.dimensions.height << std::endl;
    
    
    //face label
    
        //label events
        Label_Drawer::Event_It(settings.unilang_font_lookup,settings.test_label.pos, settings.test_label.state,pc_input.mouse);
        
        //draw label
        elements.types += Label_Drawer::Draw(settings.unilang_font_lookup,settings.test_label,pc_input.mouse).types;
        
        //cursor events
        Event_It(settings,settings.test_label,pc_input);
        
        //draw cursor
        Draw_Cursor(elements,settings,settings.test_label);
        
    
    
    
    
    
    
    
    
    //TEST (faced label):
    settings.test_label2.pos.x = pos.x + 60;
    settings.test_label2.pos.y = pos.y + 60;
    Positioned_Label x;
    x.pos = settings.test_label2.pos;
    x.state = settings.test_label2.faces[settings.test_label2.index].label;
    elements.types += Label_Drawer::Draw(settings.unilang_font_lookup,x,pc_input.mouse).types;
    settings.test_label2.faces[settings.test_label2.index].label = x.state;
    
    
    
    //TEST (faced grid):
    settings.grid.pos.x = pos.x + 120;
    settings.grid.pos.y = pos.y + 120;
    elements.types += Grid_Label_Drawer::Draw(settings.unilang_font_lookup,settings.grid,pc_input.mouse).types;
❱

◀private: static▶ void ☀Event_It(Ide_Settings & settings, Positioned_Label & label, Pc_Input_State const& pc_input)❰

    for (auto & it: settings.test_label.state.cursors){
        if (label.state.user_state.is_active){
            Label_Cursor_Action_Doer::Handle_Actions(settings.unilang_font_lookup,label,it,pc_input);
        }
    }
❱

◀private: static▶ void ☀Draw_Cursor(Frame_Elements & elements, Ide_Settings & settings, Positioned_Label & label)❰
    
    for (auto & it: settings.test_label.state.cursors){
        if (label.state.user_state.is_active){
            Draw_Label_Cursor(elements, label, it);
        }
    }
❱

◀private: static▶ void ☀Draw_Label_Cursor(Frame_Elements & elements, Positioned_Label & label, Label_Cursor_Selection & selection)❰
    
    //draw label cursor
    selection.label_cursor.tick.shape.pos = Calculate_Position(label,selection);
    selection.label_cursor.highlight.shape.pos = Calculate_Position(label,selection);
    elements.types.emplace_back(selection.label_cursor.tick.shape);
    
    //draw selected box over selected text
    selection.label_cursor.highlight.shape.shape.dimensions.width = selection.additional_chars_selected * 6;
    selection.label_cursor.highlight.shape.shape.dimensions.height = 13;
    elements.types.emplace_back(selection.label_cursor.highlight.shape);
❱

◀private: static▶ Position ☀Calculate_Position(Positioned_Label & label, Label_Cursor_Selection & selection)❰
    Position p;
    p = label.pos;
    p.y -= 9;
    p.x += (selection.label_index+1) * 6;
    return p;
❱
