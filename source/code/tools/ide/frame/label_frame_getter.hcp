class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/graphics/imgui/loop/mechanics"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/label/label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_frame_getter"❫
❪"code/utilities/data_structures/graphics/objects/faced_grid/grid_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_tree/tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_tree_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_face_tree_drawer"❫
❪"code/utilities/data_structures/graphics/objects/cursor/cursor_drawer"❫
❪"code/utilities/data_structures/graphics/objects/slider/slider_drawer"❫
❪"code/utilities/data_structures/graphics/objects/buildable_schema_faced_tree/buildable_schema_face_tree_drawer"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Get(Ide_Settings & settings, Pc_Input_State const& pc_input)❰
    Frame_Elements elements;
    Draw_Label(elements,settings,pc_input);
    return elements;
❱

◀private: static▶ void ☀Draw_Label(Frame_Elements & elements, Ide_Settings & settings, Pc_Input_State const& pc_input)❰


    //settings.test_label.state.message = std::to_string(static_cast<int>(ImGui::GetIO().Framerate));

    Update_All_Positions_Via_View_Anchor(settings);
    
    //standalone label
    // elements.types += Label_Drawer::Full_Draw(settings.unilang_font_lookup,settings.test_label,pc_input).types;
    
    // //standalone label
    // elements.types += Label_Drawer::Full_Draw(settings.unilang_font_lookup,settings.regular_label,pc_input).types;
        
    // //faced label:
    // elements.types += Faced_Label_Drawer::Full_Draw(settings.unilang_font_lookup,settings.test_label2,pc_input).types;
    
    
    //faced grid:
    //elements.types += Grid_Label_Drawer::Draw(settings.unilang_font_lookup,settings.grid,pc_input).types;
    
    //faced tree:
    //elements.types += Button_Tree_Label_Drawer::Draw(settings.unilang_font_lookup,settings.tree,pc_input).types;
    
    //buildable faced tree
    elements.types += Buildable_Schema_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,settings.btree,pc_input).types;
    
    
    
    elements.types += Buildable_Face_Tree_Drawer::Draw(settings.desktop.unilang_font_lookup,settings.gtree,pc_input).types;
    
    //slider:
    //elements.types += Slider_Drawer::Draw(settings.unilang_font_lookup,settings.slider,pc_input).types;
    
    //elements.types.emplace_back(settings.test_image);
    
    //if (settings.global_select_menu.visible){
        //elements.types += Tree_Label_Drawer::Draw(settings.unilang_font_lookup,settings.global_select_menu.menu,settings.global_select_menu.pos,pc_input).types;
    //}
❱


◀private: static▶ void ☀Update_All_Positions_Via_View_Anchor(Ide_Settings & settings)❰

    Position pos = settings.desktop.mouse.view_anchor;
    
    //loop over all elements
    settings.gtree.pos.x = pos.x + 400;
    settings.gtree.pos.y = pos.y + 100;
    
    settings.btree.pos.x = pos.x + 220;
    settings.btree.pos.y = pos.y + 100;
    
❱

◀private: static▶ Position ☀Anchor_Adjusted(Ide_Settings const& settings, Position const& pos)❰
    Position new_pos;
    new_pos.x = pos.x + settings.desktop.mouse.view_anchor.x;
    new_pos.y = pos.y + settings.desktop.mouse.view_anchor.y;
    return new_pos;
❱
