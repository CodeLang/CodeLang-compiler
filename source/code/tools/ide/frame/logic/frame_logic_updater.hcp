class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/render/frame_elements"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_selection_drawer"❫
❪"code/utilities/peripheral/mouse/state/mouse_position_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/window/window_position_finder"❫
❪"code/utilities/data_structures/graphics/objects/functions/label_drawer"❫
❪"code/tools/ide/frame/label_cursor_action_doer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/peripheral/keyboard/key_detector"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/mouse_frame_getter"❫
❪"code/tools/ide/frame/label_frame_getter"❫
❪"code/utilities/data_structures/graphics/objects/mouse/draw/view_anchor_adjuster"❫
❪"code/utilities/peripheral/keyboard/state/imgui_keyboard_state_getter"❫
❪"code/utilities/peripheral/pc/pc_input_state_getter"❫
⚞⚟



◀public: static▶ Frame_Elements ☀each_frame(Ide_Settings & settings)❰
    
    //lets make sure the exact same mouse state is used for the entire frame of logic.
    //this will avoid any issues with a fast moving mouse whose position may change faster than the frame rate.
    //same situation with a keyboard
    settings.input = Pc_Input_State_Getter::Get();
    
    
    Handle_Global_Actions(settings);
    
    //before deciding all the frame elements to draw, adjust the global viewing anchor
    //the surface spread of frame elements may be infinite .  larger than anyone's screen.
    //a user will find ways to view sub portions of this space (likely represented by the size of their monitor).
    //the view anchor represents their location.
    View_Anchor_Adjuster::Adjust(settings.mouse,settings.input.mouse);
    
    //this decides everything needed by the frame drawer
    //the data structure returned here is a representation that could be drawn anywhere
    //to your screen, to an image, or dumped as json.
    return Decide_Every_Element_Of_The_Frame(settings,settings.input);
❱


◀public: static▶ void ☀Handle_Global_Actions(Ide_Settings & settings)❰

    if (settings.input.keyboard.esc == Key_State::PRESSED){
        exit(0);
    }
    
    //cycle over frames
    if (settings.input.keyboard.one == Key_State::PRESSED){
        Set_Previous_Index_In_Round_Robin(settings.test_label2.faces,settings.test_label2.index);
    }
    if (settings.input.keyboard.two == Key_State::PRESSED){
        Set_Next_Index_In_Round_Robin(settings.test_label2.faces,settings.test_label2.index);
    }
    
    
    if (settings.input.keyboard.three == Key_State::PRESSED){
        for (auto & it: settings.grid.cell){
            for (auto & l: it.faces){
                
                l.label.styles.regular_active.width.grow_width = false;
                l.label.styles.regular_nonactive.width.grow_width = false;
                    
                l.label.styles.hovered_active.width.grow_width = false;
                l.label.styles.hovered_nonactive.width.grow_width = false;
            }
        }
    }
    
    if (settings.input.keyboard.four == Key_State::PRESSED){
        for (auto & it: settings.grid.cell){
            for (auto & l: it.faces){
                
                l.label.styles.regular_active.width.grow_width = true;
                l.label.styles.regular_nonactive.width.grow_width = true;
                    
                l.label.styles.hovered_active.width.grow_width = true;
                l.label.styles.hovered_nonactive.width.grow_width = true;
            }
        }
    }
    
    
    auto new_fixed_width = settings.slider.state.current_length + 100;
    for (auto & it: settings.grid.cell){
        for (auto & l: it.faces){
            l.label.styles.regular_active.width.fixed_width = new_fixed_width;
            l.label.styles.regular_nonactive.width.fixed_width = new_fixed_width;
                
            l.label.styles.hovered_active.width.fixed_width = new_fixed_width;
            l.label.styles.hovered_nonactive.width.fixed_width = new_fixed_width;
        }
    }
    
❱


◀private: static▶ Frame_Elements ☀Decide_Every_Element_Of_The_Frame(Ide_Settings & settings, Pc_Input_State const& pc_input)❰

    //the order that the frame elements are added, are the order they are drawn.
    //the last element added has the highest z-index.
    Frame_Elements elements;
    
    //draw the background
    elements.types.emplace_back(settings.background.main_window_backdrop);
    
    //draw the content model
    elements.types += Label_Frame_Getter::Get(settings,pc_input).types;
    
    //draw the mouse
    elements.types += Mouse_Frame_Getter::Get(settings,pc_input.mouse).types;
    
    return elements;
❱
