class
❪string❫
❪unordered_map❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/label/complexity/faced/regular/label_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/pixel/pixel_slider"❫
❪"code/utilities/colors/rectangle_shades"❫
⚯
❪"code/tools/transcompilers/unilang/language-and-theme-creator/font/unilang_font"❫
❪"code/tools/ide/settings/standard_bitmap_cursor"❫
⚞⚟

◀public: static▶ Ide_Settings ☀Get()❰

    //SDL and Imgui related init settings
    Ide_Settings settings;
    settings.init = Initialization_Settings();
    settings.background.main_window = Main_Window_Settings();
    
    //the backdrop of the main window used for drawing
    settings.background.main_window_backdrop = Main_Background();
    
    //font related settings
    settings.unilang_font_lookup = Get_Character_Lookup_Table();
    
    //mouse
    settings.mouse = Create_Mouse_Settings();
    
    //shape between cursor and mouse
    //(something dumb for connecting the textbox cursor with the user's mouse)
    //settings.cursor_mouse_connector.draw = true;
    //settings.cursor_mouse_connector.line.thickness = 1;
    //settings.cursor_mouse_connector.line.color_fill = Imgui_Type_Utility::Red();
    
    //label cursor
    //settings.label_cursor = Create_Label_Cursor_Settings();
    
    //experimentation:
    settings.test_label.label.message = "abcdefghijklmnopqrstuvwxyz(){}[]!@#$%^&*1234567890-this is the end!";
    settings.test_label.label.styles = Label_Style_1();
    
    settings.test_label2 = Faced_Label_Example();
    
    
    
    
    // //tests
    // settings.rec_test.dimensions.width = 200;
    // settings.rec_test.dimensions.height = 20;
    // settings.rec_test.edge.thickness = 0;
    // settings.rec_test.edge.rounding  = 0.0;
    // settings.rec_test.hooks.draw_border = false;
    // settings.rec_test.hooks.draw_fill = true;
    // settings.rec_test.colors = Rectangle_Shades::Red_Blue_Fade();
    
    return settings;
❱

◀private: static▶ Positioned_Rectangle_Settings ☀Main_Background()❰
    Positioned_Rectangle_Settings x;
    x.shape.dimensions.width = 0;
    x.shape.dimensions.height = 0;
    x.shape.edge.thickness = 1;
    x.shape.edge.rounding  = 0.0;
    x.shape.colors.border = Imgui_Type_Utility::Light_Blue();
    x.shape.colors.fill = Imgui_Type_Utility::Light_Blue();
    x.pos.x = -4;
    x.pos.y = 0;
    return x;
❱

◀private: static▶ Sdl_Init_Settings ☀Initialization_Settings()❰
    Sdl_Init_Settings x;
    x.main_window.title = "Unilang IDE";
    x.main_window.maximized = false;
    x.main_window.fullscreen = false;
    x.main_window.fullscreen_desktop = false;
    x.main_window.use_opengl = true;
    x.main_window.use_vulkan = false;
    x.main_window.hidden = false;
    x.main_window.borderless = false;
    x.main_window.resizeable = true;
    x.main_window.minimized = false;
    x.main_window.maximized = false;
    x.main_window.input_grabbed = false;
    x.main_window.allow_high_dpi = false;
    x.main_window.transparency = 1.0;
    return x;
❱

◀private: static▶ Mouse ☀Create_Mouse_Settings()❰

    Mouse x;
    
    //mouse selection 1
    //(the transparent rectangle that globally highlights anything)
    //generally left mouse click
    x.left_selection.shape.shape.dimensions.width = 1;
    x.left_selection.shape.shape.dimensions.height = 13;
    x.left_selection.shape.shape.edge.thickness = 0;
    x.left_selection.shape.shape.edge.rounding  = 0.0;
    x.left_selection.shape.shape.hooks.draw_border = false;
    x.left_selection.shape.shape.hooks.draw_fill = true;
    x.left_selection.shape.shape.colors.border = Imgui_Type_Utility::Red();
    x.left_selection.shape.shape.colors.fill = Imgui_Type_Utility::Red();
    x.left_selection.shape.shape.colors.border.alpha = 100;
    x.left_selection.shape.shape.colors.fill.alpha = 100;
    x.left_selection.shape.pos.x = 30;
    x.left_selection.shape.pos.y = 30;
    
    //mouse selection 2
    //(the transparent rectangle that globally highlights anything)
    //generally right mouse click
    //we keep this hidden
    x.right_selection.shape.shape.dimensions.width = 1;
    x.right_selection.shape.shape.dimensions.height = 13;
    x.right_selection.shape.shape.edge.thickness = 0;
    x.right_selection.shape.shape.edge.rounding  = 0.0;
    x.right_selection.shape.shape.hooks.draw_border = false;
    x.right_selection.shape.shape.hooks.draw_fill = false;
    x.right_selection.shape.shape.colors.border = Imgui_Type_Utility::Dark_Blue();
    x.right_selection.shape.shape.colors.fill = Imgui_Type_Utility::Dark_Blue();
    x.right_selection.shape.shape.colors.border.alpha = 100;
    x.right_selection.shape.shape.colors.fill.alpha = 100;
    x.right_selection.shape.pos.x = 30;
    x.right_selection.shape.pos.y = 30;
    
    // the mouse
    x.bitmap.bitmap = Standard_Bitmap_Cursor::Create();
    x.bitmap.pos.x = 0;
    x.bitmap.pos.y = 0;
    return x;
❱

◀private: static▶ Window_Settings ☀Main_Window_Settings()❰

    //the main imgui window used for drawing
    Window_Settings x;
    x.title              = "Main Window";
    x.menu.title         = "Main Window";
    x.menu.shortcut      = "";
    x.position.x         = 20;
    x.position.y         = 38;
    x.position.condition = ImGuiCond_Once;
    x.size.width         = 800;
    x.size.height        = 410;
    x.size.condition     = ImGuiCond_Once;
    x.titlebar           = false;
    x.scrollbar          = false;
    x.has_menu           = false;
    x.move               = false;
    x.resize             = false;
    x.collapse           = false;
    x.nav                = false;
    x.close              = false;
    x.is_open            = false;
    x.focus              = false;
    x.refocus_on_use     = false;
    x.bg_alpha           = 1;
    return x;
❱

◀private: static▶ Positioned_Faced_Label ☀Faced_Label_Example()❰
    Positioned_Faced_Label x;
    Label_Face face;
    
    //add face 1
    face.name = "face 1";
    face.label.message = "hello this is face number 1";
    face.label.styles = Label_Style_1();
    x.faces.emplace_back(face);
    
    
    face.name = "face 2";
    face.label.message = "whats good. face number 2 here";
    face.label.styles = Label_Style_2();
    x.faces.emplace_back(face);
    
    return x;
❱

◀private: static▶ Label_Styles ☀Label_Style_1()❰
    Label_Styles x;
    
    int default_box_thickness = 1;
    int default_fixed_width = 100;
    
    //not selected
    x.regular_nonactive.box.edge.thickness = default_box_thickness;
    x.regular_nonactive.box.edge.rounding  = 0.0;
    x.regular_nonactive.box.colors.border = Imgui_Type_Utility::Black();
    x.regular_nonactive.box.colors.fill = Imgui_Type_Utility::White();
    x.regular_nonactive.text = Imgui_Type_Utility::Black();
    x.regular_nonactive.width.grow_width = false;
    x.regular_nonactive.width.fixed_width = default_fixed_width;
    x.regular_nonactive.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.regular_nonactive.box.shades = Rectangle_Shades::Orange_White_Fade();
    x.regular_nonactive.box.hooks.draw_fill = true;
    x.regular_nonactive.box.hooks.draw_shade = true;

    x.hovered_nonactive.box.edge.thickness = default_box_thickness;
    x.hovered_nonactive.box.edge.rounding  = 0.0;
    x.hovered_nonactive.box.colors.border = Imgui_Type_Utility::Black();
    x.hovered_nonactive.box.colors.fill = Imgui_Type_Utility::Black();
    x.hovered_nonactive.text = Imgui_Type_Utility::White();
    x.hovered_nonactive.width.grow_width = false;
    x.hovered_nonactive.width.fixed_width = default_fixed_width;
    x.hovered_nonactive.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.hovered_nonactive.box.shades = Rectangle_Shades::Orange_White_Fade();
    x.hovered_nonactive.box.hooks.draw_fill = true;
    x.hovered_nonactive.box.hooks.draw_shade = true;
    
    //selected
    x.hovered_active.box.edge.thickness = default_box_thickness;
    x.hovered_active.box.edge.rounding  = 0.0;
    x.hovered_active.box.colors.border = Imgui_Type_Utility::Red();
    x.hovered_active.box.colors.fill = Imgui_Type_Utility::Black();
    x.hovered_active.text = Imgui_Type_Utility::White();
    x.hovered_active.width.grow_width = true;
    x.hovered_active.width.fixed_width = default_fixed_width;
    x.hovered_active.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.hovered_active.box.shades = Rectangle_Shades::Orange_White_Fade();
    x.hovered_active.box.hooks.draw_fill = true;
    x.hovered_active.box.hooks.draw_shade = true;
    
    x.regular_active.box.edge.thickness = default_box_thickness;
    x.regular_active.box.edge.rounding  = 0.0;
    x.regular_active.box.colors.border = Imgui_Type_Utility::Red();
    x.regular_active.box.colors.fill = Imgui_Type_Utility::White();
    x.regular_active.text = Imgui_Type_Utility::Black();
    x.regular_active.width.grow_width = true;
    x.regular_active.width.fixed_width = default_fixed_width;
    x.regular_active.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.regular_active.box.shades = Rectangle_Shades::Orange_White_Fade();
    x.regular_active.box.hooks.draw_fill = true;
    x.regular_active.box.hooks.draw_shade = true;
    
    return x;
❱
◀private: static▶ Label_Styles ☀Label_Style_2()❰
    Label_Styles x;
    
    int default_box_thickness = 1;
    int default_fixed_width = 100;
    
    //not selected
    x.regular_nonactive.box.edge.thickness = default_box_thickness;
    x.regular_nonactive.box.edge.rounding  = 0.0;
    x.regular_nonactive.box.colors.border = Imgui_Type_Utility::Black();
    x.regular_nonactive.box.colors.fill = Imgui_Type_Utility::White();
    x.regular_nonactive.text = Imgui_Type_Utility::Black();
    x.regular_nonactive.width.grow_width = false;
    x.regular_nonactive.width.fixed_width = default_fixed_width;
    x.regular_nonactive.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.regular_nonactive.box.shades = Rectangle_Shades::Red_Blue_Fade();
    x.regular_nonactive.box.hooks.draw_fill = true;
    x.regular_nonactive.box.hooks.draw_shade = true;

    x.hovered_nonactive.box.edge.thickness = default_box_thickness;
    x.hovered_nonactive.box.edge.rounding  = 0.0;
    x.hovered_nonactive.box.colors.border = Imgui_Type_Utility::Black();
    x.hovered_nonactive.box.colors.fill = Imgui_Type_Utility::Black();
    x.hovered_nonactive.text = Imgui_Type_Utility::White();
    x.hovered_nonactive.width.grow_width = false;
    x.hovered_nonactive.width.fixed_width = default_fixed_width;
    x.hovered_nonactive.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.hovered_nonactive.box.shades = Rectangle_Shades::Red_Blue_Fade();
    x.hovered_nonactive.box.hooks.draw_fill = true;
    x.hovered_nonactive.box.hooks.draw_shade = true;
    
    //selected
    x.hovered_active.box.edge.thickness = default_box_thickness;
    x.hovered_active.box.edge.rounding  = 0.0;
    x.hovered_active.box.colors.border = Imgui_Type_Utility::Red();
    x.hovered_active.box.colors.fill = Imgui_Type_Utility::Black();
    x.hovered_active.text = Imgui_Type_Utility::White();
    x.hovered_active.width.grow_width = true;
    x.hovered_active.width.fixed_width = default_fixed_width;
    x.hovered_active.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.hovered_active.box.shades = Rectangle_Shades::Red_Blue_Fade();
    x.hovered_active.box.hooks.draw_fill = true;
    x.hovered_active.box.hooks.draw_shade = true;
    
    x.regular_active.box.edge.thickness = default_box_thickness;
    x.regular_active.box.edge.rounding  = 0.0;
    x.regular_active.box.colors.border = Imgui_Type_Utility::Red();
    x.regular_active.box.colors.fill = Imgui_Type_Utility::White();
    x.regular_active.text = Imgui_Type_Utility::Black();
    x.regular_active.width.grow_width = true;
    x.regular_active.width.fixed_width = default_fixed_width;
    x.regular_active.width.pixel_slide = Create_Normal_Pixel_Slider();
    x.regular_active.box.shades = Rectangle_Shades::Red_Blue_Fade();
    x.regular_active.box.hooks.draw_fill = true;
    x.regular_active.box.hooks.draw_shade = true;
    
    return x;
❱

◀private: static▶ Pixel_Slider ☀Create_Normal_Pixel_Slider()❰
    Pixel_Slider slider;
    slider.cycle_offset = 0;
    slider.cycle_offset_pixel_jump = 1;
    slider.slide_clock.rate = .05;
    return slider;
❱

◀private: static▶ std::unordered_map<int,Character_Segment> ☀Get_Character_Lookup_Table()❰
    auto unilang_font = Unilang_Font::Get();
    std::unordered_map<int,Character_Segment> unilang_font_lookup;
    for (auto const& it: unilang_font){
        unilang_font_lookup[static_cast<int>(it.glyph_index)] = it;
    }
    return unilang_font_lookup;
❱



