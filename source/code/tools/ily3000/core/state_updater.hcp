class
❪string❫
❪iostream❫
❪vector❫
❪"code/tools/ily3000/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/tools/ily3000/assets/assets_loader"❫
❪"code/tools/ily3000/state/game_state"❫
⚯
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action
    state.joycons_current = Joycon_State_Getter::Get();
    
    Handle_Score_Change(window,state,assets);
    
    state.joycons_previous = state.joycons_current;
❱

◀private: static▶ void ☀Handle_Score_Change(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    if (state.joycons_previous.left.joystick.left && (state.joycons_current.left.joystick.up && state.joycons_current.left.joystick.up)){++state.score;}
    if ((state.joycons_previous.left.joystick.left && state.joycons_previous.left.joystick.up) && state.joycons_current.left.joystick.right){++state.score;}
    if (state.joycons_previous.left.joystick.right && state.joycons_current.left.joystick.down){++state.score;}
    if (state.joycons_previous.left.joystick.down && state.joycons_current.left.joystick.left){++state.score;}
    
    if (state.joycons_previous.right.joystick.left && state.joycons_current.right.joystick.up){++state.score;}
    if (state.joycons_previous.right.joystick.up && state.joycons_current.right.joystick.right){++state.score;}
    if (state.joycons_previous.right.joystick.right && state.joycons_current.right.joystick.down){++state.score;}
    if (state.joycons_previous.right.joystick.down && state.joycons_current.right.joystick.left){++state.score;}
    
    if (state.score > 3000){
        state.score = 3000;
    }
    assets.score.setString(std::to_string(state.score));
❱













