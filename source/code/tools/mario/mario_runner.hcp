class
❪"code/utilities/x11/events/global_event_listener"❫
❪"code/tools/mario/engine/user_input/user_action"❫
❪"code/tools/mario/sprites/sprites"❫
❪"code/tools/mario/engine/physics_state"❫
⚯
❪"code/utilities/sound/music_player"❫
❪iostream❫
❪string❫
❪cstdlib❫
❪unistd.h❫
❪X11/Xlib.h❫
❪X11/Xutil.h❫
❪X11/xpm.h❫
❪X11/extensions/shape.h❫
❪sys/time.h❫
❪signal.h❫
❪"code/utilities/x11/main_state/x11_main_state_creator"❫
❪"code/utilities/x11/loop/x11_looper"❫
❪"code/utilities/x11/sprite/sprite_loader"❫
❪"code/utilities/x11/sprite/sprite_window_creator"❫
❪"code/utilities/x11/sprite/sprite_window_drawer"❫
❪"code/tools/mario/sprites/sprites_loader"❫
❪"code/tools/mario/sound/sounds_loader"❫
❪"code/tools/mario/engine/user_input/user_action_getter"❫
❪"code/utilities/types/booleans/lib"❫
⚞⚟


//can i rotate images?
//http://refspecs.linuxbase.org/LSB_5.0.0/LSB-Desktop-generic/LSB-Desktop-generic/app-libxrender.html

//detecting windows:
//https://cboard.cprogramming.com/linux-programming/125534-accessing-windows-x11.html
//https://tronche.com/gui/x/xlib/window-information/XQueryTree.html

◀public: static▶ void ☀Run() ❰
    
    //create the main display (connect to the X Server). Basically just get everything setup to use X11.
    //hoping this is all typical x11 boilerplate.
    //I'm not sure I did it all correctly, but wanted to abstract it away.
    //hopefully customizable enough for most use cases and I don't have to dig into this much.
    Setup_Display_Settings settings;
    settings.syncronize_debug_mode = false;
    settings.set_error_handler = false;
    settings.check_for_shape_extension = true;
    auto state = X11_Main_State_Creator::Create(settings);
    
    //we intend to spy on keyboard/mouse events everywhere.
    //this is like a keylogger.  You could be moving a cusor in
    //an editor and it will still be registered by the game.
    Global_Event_Listener::Enable_Events(state);
    
    //load all the sprites
    auto sprites = Sprites_Loader::Load(state);
    auto sounds = Sounds_Loader::Load();
    
    //start some music
    auto m = Music_Player::Play(sounds.main_theme.full_path);
    
    //create mario at a starting position
    Physics_State phys;
    auto mario = Sprite_Window_Creator::Create(state,sprites.mario_stand_right);
    mario.x = 700;
    mario.y = 100;
    bool facing_right = true;
    
    
    //X11 is notorious for image tearing i guess
    //originally, I had one giant window, and I used PutImage each cycle to put the sprite in a different place.
    //this flickered and looked bad.  So Now I make little windows for each sprite, and place the sprite in the window at 0,0 always.
    //instead of moving the images each cycle, we move the entire window instead.  This looks clean but feels wrong.
    //I'm not sure if there are any ramifications to doing this.
    //It basically means that my mario game will have an X11 window for every sprite being shown.
    //unless i totally missed something in terms of writing images and moving them around in x11, this is the best I can do.
    //And based on the various complaints I've heard about X this may actually be a correct way to go about this.
    //fwiw, I see everyone on the internet talking about how X11 tears because its old, and its one of the reasons for wayland.
    //so I don't know. This model can be revised later.
    User_Action action;
    X11_Looper::typical_x11_game_loop(state,[&](){
        
    Sprite_Window_Drawer::Draw(state,mario);
    
    // what does the user want to do
    action = User_Action_Getter::Get(action,state);
    
     // adjust the actors based on user's request
     if (action.right_button){
        mario.x += 1;
        facing_right = true;
     }
     if (action.left_button){
        mario.x -= 1;
        facing_right = false;
     }
     
     // change the way things look based on action and curent actor's state
     Decide_Mario_Look(action,mario.sprite,sprites,facing_right);
     
      
    });
❱

◀public: static▶ void ☀Decide_Mario_Look(User_Action const& action, Sprite & sprite, Sprites const& sprites, bool facing_right) ❰
    
    if (facing_right){
        if (action.down_button){
            sprite = sprites.mario_duck_right;
            //sprite = sprites.mario_stand;
        }
        else{
            //figure out
            sprite = sprites.mario_stand_right;
        }
    }
    else{
        if (action.down_button){
            sprite = sprites.mario_duck_left;
            //sprite = sprites.mario_stand;
        }
        else{
            //figure out
            sprite = sprites.mario_stand_left;
        }
    }
❱



