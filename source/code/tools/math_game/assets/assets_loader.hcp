class
❪string❫
❪iostream❫
❪"code/tools/math_game/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Audio.hpp❫
⚯
⚞⚟

◀public: static▶ Assets ☀Load(sf::RenderWindow const& window) ❰
    Assets x;
    
    //where the resources are located
    std::string font_dir = "/home/laptop/Desktop/math_game/fonts/";
    std::string img_dir = "/home/laptop/Desktop/math_game/img/";
    std::string snd_dir = "/home/laptop/Desktop/math_game/snd/";
    
    Load_Fonts(x,font_dir);
    Load_Textured_Sprites(x,img_dir);
    Load_Audio(x,snd_dir);
    
    //load background
    x.main_bg.sprite.setPosition(0,0);
    
    //set user's pointers (DONT THINK IM GOING TO USE THIS)
    x.player1_mouse = x.chalk_stick.sprite;
    x.player2_mouse = x.chalk_stick.sprite;
    x.player1_mouse.setPosition(0,0);
    x.player2_mouse.setPosition(0,0);
    
    Setup_Title_Screen(x);
    Setup_Character_Selection(x);
    
    //audio
    x.mus_main->setVolume(80);
    x.mus_main->setLoop(true);
    x.mus_main->play();
    
    x.mus_ambient->setVolume(80);
    x.mus_ambient->setLoop(true);
    x.mus_ambient->play();
    
    
    return x;
    
    
    //notes on positioning stuff
    //x.title_screen.player1_status.setPosition(0+buffer_space_x,0+buffer_space_y);
    // x.title_screen.player2_status.setPosition(sf::VideoMode::getDesktopMode().width-(x.title_screen.player2_status.getLocalBounds().left
    //                             + x.title_screen.player2_status.getLocalBounds().width)-buffer_space_x,0+buffer_space_y);


    //main screen (Complete)
        //press to start
        //checks controllers

    //character selection
        //cycle through each
        //moves on when both selected
        //(able to go back)

    //game type
        //both can select which game to play
        //time attack (set time)
        //play to (set amount)
        //change settings on the kind of math
        //sound settings
        //(able to go back)

    //actual game
        //play game

    //results page
        //play again
        //back to game type select
    
❱

◀private: static▶ void ☀Load_Fonts(Assets & x, std::string const& font_dir)❰
    Load_Font(x.main_font,font_dir + "Right_Chalk.ttf");
    Load_Font(x.sub_font,font_dir + "Right_Chalk.ttf");
❱
◀private: static▶ void ☀Load_Textured_Sprites(Assets & x, std::string const& img_dir)❰
    Load_Textured_Sprite(x.main_bg,img_dir + "chalkboard_bg.jpg");
    Load_Textured_Sprite(x.chalk_stick,img_dir + "chalk.png");
    Load_Textured_Sprite(x.left_arrow,img_dir + "left_arrow_2.png");
    Load_Textured_Sprite(x.right_arrow,img_dir + "right_arrow_2.png");
❱
◀private: static▶ void ☀Load_Audio(Assets & x, std::string const& snd_dir)❰
    Load_Sound(x.snd_selection,snd_dir + "chalk_hit.ogg");
    Load_Sound(x.snd_select_back,snd_dir + "erase.ogg");
    Load_Sound(x.snd_lets_go_fast,snd_dir + "lets_go_fast.ogg");
    
    x.mus_main = std::make_shared<sf::Music>();
    Load_Music(*x.mus_main,snd_dir + "bg_music.ogg");
    
    x.mus_ambient = std::make_shared<sf::Music>();
    Load_Music(*x.mus_ambient,snd_dir + "ambient_classroom.ogg");
❱

◀private: static▶ void ☀Setup_Title_Screen(Assets & x)❰

    //set main title text
    x.title_screen.title_text.setString("MATH GAME");
    x.title_screen.title_text.setFont(x.main_font);
    x.title_screen.title_text.setCharacterSize(150);
    Center_Text(x.title_screen.title_text);
    x.title_screen.title_text.move(0,-100);
    
    //load player statuses
    x.title_screen.player1_status.setString("PLAYER 1 not connected");
    x.title_screen.player1_status.setFont(x.sub_font);
    x.title_screen.player1_status.setCharacterSize(50);
    Center_Text(x.title_screen.player1_status);
    x.title_screen.player1_status.move(0,200);
    x.title_screen.player1_status.move(0,-100);
    
    x.title_screen.player2_status.setString("PLAYER 2 not connected");
    x.title_screen.player2_status.setFont(x.sub_font);
    x.title_screen.player2_status.setCharacterSize(50);
    Center_Text(x.title_screen.player2_status);
    x.title_screen.player2_status.move(0,280);
    x.title_screen.player2_status.move(0,-100);
❱

◀private: static▶ void ☀Setup_Character_Selection(Assets & x)❰

    //set character title text
    x.character_selection.title_text.setString("CHOOSE A CHARACTER");
    x.character_selection.title_text.setFont(x.main_font);
    x.character_selection.title_text.setCharacterSize(80);
    Center_Text(x.character_selection.title_text);
    x.character_selection.title_text.move(0,-300);
    
    
    x.character_selection.player1_character_title.setString("UNKNOWN");
    x.character_selection.player1_character_title.setFont(x.sub_font);
    x.character_selection.player1_character_title.setCharacterSize(50);
    Center_Text(x.character_selection.player1_character_title);
    x.character_selection.player1_character_title.move(-500,-125);
    
    x.character_selection.player2_character_title.setString("UNKNOWN");
    x.character_selection.player2_character_title.setFont(x.sub_font);
    x.character_selection.player2_character_title.setCharacterSize(50);
    Center_Text(x.character_selection.player2_character_title);
    x.character_selection.player2_character_title.move(500,-125);
    
    
    x.character_selection.player1_left_arrow = x.left_arrow.sprite;
    Center_Sprite(x.character_selection.player1_left_arrow);
    x.character_selection.player1_left_arrow.move(-700,-50);
    
    x.character_selection.player1_right_arrow = x.right_arrow.sprite;
    Center_Sprite(x.character_selection.player1_right_arrow);
    x.character_selection.player1_right_arrow.move(-300,-50);
    
    x.character_selection.player2_left_arrow = x.left_arrow.sprite;
    Center_Sprite(x.character_selection.player2_left_arrow);
    x.character_selection.player2_left_arrow.move(300,-50);
    
    x.character_selection.player2_right_arrow = x.right_arrow.sprite;
    Center_Sprite(x.character_selection.player2_right_arrow);
    x.character_selection.player2_right_arrow.move(700,-50);
    x.character_selection.player2_right_arrow.setColor(sf::Color::Red);
    
❱

◀private: static▶ void ☀Center_Text(sf::Text & text)❰
    text.setPosition(sf::VideoMode::getDesktopMode().width/2.0f,sf::VideoMode::getDesktopMode().height/2.0f);
    text.setOrigin(text.getLocalBounds().left + text.getLocalBounds().width / 2.0f,
                           text.getLocalBounds().top + text.getLocalBounds().height / 2.0f);
❱
◀private: static▶ void ☀Center_Sprite(sf::Sprite & text)❰
    text.setPosition(sf::VideoMode::getDesktopMode().width/2.0f,sf::VideoMode::getDesktopMode().height/2.0f);
    text.setOrigin(text.getLocalBounds().left + text.getLocalBounds().width / 2.0f,
                           text.getLocalBounds().top + text.getLocalBounds().height / 2.0f);
❱

◀private: static▶ void ☀Load_Font(sf::Font & font, std::string const& file_name)❰
    if (!font.loadFromFile(file_name)){
        std::cerr << "failed to load " << file_name << std::endl;
        exit(0);
    }
❱
◀private: static▶ void ☀Load_Textured_Sprite(Textured_Sprite & ts, std::string const& file_name)❰
    if (!ts.texture.loadFromFile(file_name)){
        std::cerr << "failed to load " << file_name << std::endl;
        exit(0);
    }
    ts.sprite.setTexture(ts.texture);
❱
◀private: static▶ void ☀Load_Sound(Sound & s, std::string const& file_name)❰
    if (!s.buffer.loadFromFile(file_name)){
        std::cerr << "failed to load " << file_name << std::endl;
        exit(0);
    }
    s.sound.setBuffer(s.buffer);
❱
◀private: static▶ void ☀Load_Music(sf::Music & mus, std::string const& file_name)❰
    if (!mus.openFromFile(file_name)){
        std::cerr << "failed to load " << file_name << std::endl;
        exit(0);
    }
❱

◀private: static▶ void ☀Make_Sprite_Fullscreen(Textured_Sprite & ts, sf::RenderWindow const& window)❰

    auto TextureSize = ts.texture.getSize(); //Get size of texture.
    auto WindowSize = window.getSize();             //Get size of window.

    float ScaleX = (float) WindowSize.x / TextureSize.x;
    float ScaleY = (float) WindowSize.y / TextureSize.y;     //Calculate scale.
    
    ts.sprite.setScale(ScaleX, ScaleY);
❱
