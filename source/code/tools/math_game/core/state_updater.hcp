class
❪string❫
❪iostream❫
❪vector❫
❪"code/tools/math_game/assets/assets"❫
❪SFML/Window.hpp❫
❪SFML/Window/Joystick.hpp❫
❪SFML/Graphics.hpp❫
❪SFML/Graphics/Transformable.hpp❫
❪"code/utilities/keyboard/joycons/joycon_state_getter"❫
❪"code/utilities/json/functions/lib"❫
❪"code/tools/math_game/assets/assets_loader"❫
❪"code/tools/math_game/state/game_state"❫
❪"code/tools/math_game/core/main_screen_handler"❫
⚯
⚞⚟

◀public: static▶ void ☀Run_Frame_Logic(sf::RenderWindow & window, sf::Time const& TimePerFrame, Game_State & state, Assets & assets) ❰
    
    //make decisions based on user action
    state.joycons_current = Joycon_State_Getter::Get();
    
    if (state.screen == Current_Screen::MAIN){
        Main_Screen_Handler::Handle_Main(window,state,assets);
    }
    else if (state.screen == Current_Screen::CHARACTER_SELECT){
        Handle_Character_Select(window,state,assets);
    }
    else if (state.screen == Current_Screen::GAME_SELECT){
        Handle_Game_Select(window,state,assets);
    }
    
    state.joycons_previous = state.joycons_current;
❱

◀private: static▶ void ☀Handle_Character_Select(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    Player_Hits_Back(window,state,assets);
    Players_Want_To_Change_Character(window,state,assets);
❱

◀private: static▶ void ☀Player_Hits_Back(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //one of the players wants to go back a page
    if (state.joycons_current.left.left || state.joycons_current.right.left){
        state.screen = Current_Screen::MAIN;
    }
    
❱

◀private: static▶ void ☀Players_Want_To_Change_Character(sf::RenderWindow & window, Game_State & state, Assets & assets)❰

    //player 1 wants to see the next player
    if (state.joycons_current.left.joystick.right && !state.joycons_previous.left.joystick.right){
        
        state.player1_selected_character += 1;
        if (state.player1_selected_character == assets.characters.size()){
            state.player1_selected_character = 0;
        }
        //TODO
            assets.character_selection.player1_character_title= 
            assets.character_selection.player1_character_selection = 
        
    }
    
    //player 1 wants to see the previous player
    if (state.joycons_current.left.joystick.left && !state.joycons_previous.left.joystick.left){
        if (state.player1_selected_character == 0){
            state.player1_selected_character = assets.characters.size()-1;
        }
        else{
            state.player1_selected_character -= 1;
        }
    }
    
    //player 2 wants to see the next player
    if (state.joycons_current.right.joystick.right && !state.joycons_previous.right.joystick.right){
        
        state.player2_selected_character += 1;
        if (state.player2_selected_character == assets.characters.size()){
            state.player2_selected_character = 0;
        }
        
    }
    
    //player 2 wants to see the previous player
    if (state.joycons_current.right.joystick.left && !state.joycons_previous.right.joystick.left){
        if (state.player2_selected_character == 0){
            state.player2_selected_character = assets.characters.size()-1;
        }
        else{
            state.player2_selected_character -= 1;
        }
    }
❱



◀private: static▶ void ☀Handle_Game_Select(sf::RenderWindow & window, Game_State & state, Assets & assets)❰
    
❱













