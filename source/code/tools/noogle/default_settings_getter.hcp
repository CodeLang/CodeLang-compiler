class
❪"code/tools/noogle/settings/noogle_settings"❫
⚯
❪iostream❫
❪"code/utilities/web/chrome/driver/chrome_driver_selector"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/secret/secret_getter"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟


◀public: static▶ Noogle_Settings ☀Get() ❰
    Noogle_Settings settings;
    
    settings.query_expand = Default_Query_Expand_Settings();
    
    
    settings.browser = Default_Browser_Settings();
    settings.devise_google_search_urls = Google_Search_Settings();
    settings.devise_google_query_urls = Google_Query_Settings();
    settings.devise_bing_query_urls = Bing_Query_Settings();
    
    settings.token_identifier.use_spirit_numeric_identity = true;
    settings.token_identifier.use_english_name_identity = true;
    
    settings.word_filter.use_spirit_numerical = true;
    settings.word_filter.use_blacklisted = true;
    settings.word_filter.blacklisted_words = Get_Blacklisted_Words();
    settings.word_filter.use_has_numeric = true;
    
    return settings;
❱

◀private: static▶ Query_Expand_Settings ☀Default_Query_Expand_Settings() ❰
    Query_Expand_Settings settings;
    
    settings.add_extra_search_terms = true;
    settings.extra_search_terms.emplace_back("number");
    settings.extra_search_terms.emplace_back("has");
    settings.extra_search_terms.emplace_back("how many");
    settings.extra_search_terms.emplace_back("total");
    settings.extra_search_terms.emplace_back("amount");
    settings.extra_search_terms.emplace_back("count");
    settings.extra_search_terms.emplace_back("facts");
    settings.extra_search_terms.emplace_back("result");
    settings.extra_search_terms.emplace_back("stats");
    
    //years
    //times
    //dates
    
    
    return settings;
❱

◀private: static▶ Browser_Settings ☀Default_Browser_Settings() ❰

    Browser_Settings settings;
    settings.headless = false;
    settings.ignore_certificate_errors = true;
    settings.disable_notifications = true;
    settings.disable_extensions = true;
    settings.start_maximized = true;
    settings.use_user_agent = true;
    settings.user_agent = My_User_Agent();
    
    settings.use_browser_profile = true;
    settings.browser_profile = Full_Path_To_Home() + "/.config/google-chrome/Default";
    
    //waiting
    settings.set_implicit_wait = true;
    settings.implicit_wait_s = 10;
    
    //names
    settings.browser_name = "browser";
    
    // other settings
    settings.use_direct_driver_path = false;
    settings.direct_driver_path = "";
    settings.chrome_driver_derive = Chrome_Driver_Selector::Default_Settings();
    
    return settings;
❱

◀private: static▶ Google_Search_Url_Devise_Settings ☀Google_Search_Settings()❰

    Google_Search_Url_Devise_Settings settings;
    settings.base_url = "https://www.google.com/search?q=";
    settings.page_count = 3;
    settings.results_per_page = 100; //max 100
    return settings;
❱
◀private: static▶ Google_Json_Url_Devise_Settings ☀Google_Query_Settings()❰

    Google_Json_Url_Devise_Settings settings;
    settings.base_url = "https://www.googleapis.com/customsearch/v1?q=";
    settings.page_count = 10; //if the total results go over 100 no more results
    settings.results_per_page = 10; //max 10
    
    settings.lr = "lang_en";
    //where to get these keys:
    //https://developers.google.com/custom-search/v1/overview
    settings.api_key = Secret_Getter::Google_Search_Api_Key();
    //settings.api_key = "AIzaSyB1n0TXJdPuLnzq5FSPPy3rLXsgQ3oeWl0";
    //settings.api_key = "AIzaSyCTLQa10iaQUCXA8JR0em8becvOxc_rsrU";
    //settings.api_key = "AIzaSyBpqi_cAkBv4M2PDRk_9OY0d5L7Jamrrcs";
    //settings.api_key = "AIzaSyBhrthz5VLdgobwvygfK_N_ZX894PR6O2g";
    //settings.api_key = "AIzaSyBQTWvlJQAaenqSpsHJrtpJKtE22SSym8o";
    //settings.api_key = "AIzaSyD_Llog80YUj8N6RhupWdv9rfCH026lA20";
    //settings.api_key = "AIzaSyAhVYEGA75ZPyFvhsIIXf05mqCF8jYZ3ic";
    settings.cx = Secret_Getter::Google_Search_Cx();
    return settings;
❱

◀private: static▶ Bing_Json_Url_Devise_Settings ☀Bing_Query_Settings()❰
    Bing_Json_Url_Devise_Settings settings;
    settings.base_url = "https://api.cognitive.microsoft.com/bing/v7.0/search?q=";
    settings.page_count = 5;
    settings.results_per_page = 50;
    return settings;
❱
◀private: static▶ std::string ☀My_User_Agent()❰
    return "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36";
❱
◀private: static▶ std::string ☀Spoofed_User_Agent()❰
    return "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/601.7.7 (KHTML, like Gecko) Version/9.1.2 Safari/601.7.7";
❱





◀private: static▶ std::vector<std::string> ☀Get_Blacklisted_Words()❰
    std::vector<std::string> words;
    words += Get_Webish_Words();
    words += Get_Boring_Words();
    return words;
❱

◀private: static▶ std::vector<std::string> ☀Get_Webish_Words()❰
    std::vector<std::string> web_words;
    web_words.emplace_back("25rem");
    web_words.emplace_back("2n");
    web_words.emplace_back("625rem");
    web_words.emplace_back("cdata");
    web_words.emplace_back("chrome");
    web_words.emplace_back("chromium");
    web_words.emplace_back("domready");
    web_words.emplace_back("element");
    web_words.emplace_back("gmt");
    web_words.emplace_back("navbar");
    web_words.emplace_back("utc");
    web_words.emplace_back("video");
    web_words.emplace_back("a");
    web_words.emplace_back("abort");
    web_words.emplace_back("aborted");
    web_words.emplace_back("about");
    web_words.emplace_back("addpageaction");
    web_words.emplace_back("addservice");
    web_words.emplace_back("adjust");
    web_words.emplace_back("align");
    web_words.emplace_back("api");
    web_words.emplace_back("appendchild");
    web_words.emplace_back("applicationtime");
    web_words.emplace_back("arguments");
    web_words.emplace_back("assetduration");
    web_words.emplace_back("async");
    web_words.emplace_back("auto");
    web_words.emplace_back("automax");
    web_words.emplace_back("b");
    web_words.emplace_back("background");
    web_words.emplace_back("body");
    web_words.emplace_back("border");
    web_words.emplace_back("bottom");
    web_words.emplace_back("c");
    web_words.emplace_back("calc");
    web_words.emplace_back("call");
    web_words.emplace_back("called");
    web_words.emplace_back("catch");
    web_words.emplace_back("cbtime");
    web_words.emplace_back("cd");
    web_words.emplace_back("char");
    web_words.emplace_back("charat");
    web_words.emplace_back("characterdata");
    web_words.emplace_back("clear");
    web_words.emplace_back("clearrect");
    web_words.emplace_back("cn");
    web_words.emplace_back("cnn");
    web_words.emplace_back("cnnsans");
    web_words.emplace_back("color");
    web_words.emplace_back("commentcount");
    web_words.emplace_back("containers");
    web_words.emplace_back("count");
    web_words.emplace_back("css");
    web_words.emplace_back("d");
    web_words.emplace_back("data");
    web_words.emplace_back("datemodified");
    web_words.emplace_back("datepublished");
    web_words.emplace_back("density");
    web_words.emplace_back("deskstop");
    web_words.emplace_back("dev");
    web_words.emplace_back("display");
    web_words.emplace_back("div");
    web_words.emplace_back("document");
    web_words.emplace_back("e");
    web_words.emplace_back("el");
    web_words.emplace_back("else");
    web_words.emplace_back("enable");
    web_words.emplace_back("enumerable");
    web_words.emplace_back("err");
    web_words.emplace_back("everythingexceptflag");
    web_words.emplace_back("exp");
    web_words.emplace_back("f");
    web_words.emplace_back("false");
    web_words.emplace_back("flex");
    web_words.emplace_back("fn");
    web_words.emplace_back("font");
    web_words.emplace_back("for");
    web_words.emplace_back("frameborder");
    web_words.emplace_back("front");
    web_words.emplace_back("full");
    web_words.emplace_back("function");
    web_words.emplace_back("g");
    web_words.emplace_back("googletag");
    web_words.emplace_back("gt");
    web_words.emplace_back("h");
    web_words.emplace_back("head");
    web_words.emplace_back("height");
    web_words.emplace_back("html");
    web_words.emplace_back("i");
    web_words.emplace_back("id");
    web_words.emplace_back("ids");
    web_words.emplace_back("idx");
    web_words.emplace_back("if");
    web_words.emplace_back("important");
    web_words.emplace_back("index");
    web_words.emplace_back("indexof");
    web_words.emplace_back("insert");
    web_words.emplace_back("ishidden");
    web_words.emplace_back("isoutstream");
    web_words.emplace_back("isprivate");
    web_words.emplace_back("item");
    web_words.emplace_back("j");
    web_words.emplace_back("jpg");
    web_words.emplace_back("js");
    web_words.emplace_back("k");
    web_words.emplace_back("l");
    web_words.emplace_back("left");
    web_words.emplace_back("length");
    web_words.emplace_back("line");
    web_words.emplace_back("listener");
    web_words.emplace_back("load");
    web_words.emplace_back("loaded");
    web_words.emplace_back("loader");
    web_words.emplace_back("m");
    web_words.emplace_back("margin");
    web_words.emplace_back("max");
    web_words.emplace_back("md");
    web_words.emplace_back("media");
    web_words.emplace_back("mode");
    web_words.emplace_back("n");
    web_words.emplace_back("nav");
    web_words.emplace_back("networkid");
    web_words.emplace_back("new");
    web_words.emplace_back("ngcontent");
    web_words.emplace_back("nrdev");
    web_words.emplace_back("null");
    web_words.emplace_back("o");
    web_words.emplace_back("onload");
    web_words.emplace_back("onloadcalled");
    web_words.emplace_back("opacity");
    web_words.emplace_back("order");
    web_words.emplace_back("outline");
    web_words.emplace_back("overflow");
    web_words.emplace_back("p");
    web_words.emplace_back("padding");
    web_words.emplace_back("page");
    web_words.emplace_back("passive");
    web_words.emplace_back("pg");
    web_words.emplace_back("port");
    web_words.emplace_back("position");
    web_words.emplace_back("px");
    web_words.emplace_back("r");
    web_words.emplace_back("radius");
    web_words.emplace_back("readystate");
    web_words.emplace_back("rem");
    web_words.emplace_back("return");
    web_words.emplace_back("rgb");
    web_words.emplace_back("rgba");
    web_words.emplace_back("right");
    web_words.emplace_back("routename");
    web_words.emplace_back("s");
    web_words.emplace_back("scale");
    web_words.emplace_back("script");
    web_words.emplace_back("search");
    web_words.emplace_back("shadow");
    web_words.emplace_back("sites");
    web_words.emplace_back("size");
    web_words.emplace_back("sizes");
    web_words.emplace_back("solid");
    web_words.emplace_back("spacing");
    web_words.emplace_back("split");
    web_words.emplace_back("src");
    web_words.emplace_back("status");
    web_words.emplace_back("stn");
    web_words.emplace_back("substr");
    web_words.emplace_back("substring");
    web_words.emplace_back("supersection");
    web_words.emplace_back("svg");
    web_words.emplace_back("t");
    web_words.emplace_back("text");
    web_words.emplace_back("this");
    web_words.emplace_back("thrown");
    web_words.emplace_back("title");
    web_words.emplace_back("to");
    web_words.emplace_back("tostring");
    web_words.emplace_back("top");
    web_words.emplace_back("totalcbs");
    web_words.emplace_back("transform");
    web_words.emplace_back("translate");
    web_words.emplace_back("translatex");
    web_words.emplace_back("translatey");
    web_words.emplace_back("translatez");
    web_words.emplace_back("true");
    web_words.emplace_back("try");
    web_words.emplace_back("type");
    web_words.emplace_back("typename");
    web_words.emplace_back("u");
    web_words.emplace_back("uc");
    web_words.emplace_back("undefined");
    web_words.emplace_back("utf");
    web_words.emplace_back("v");
    web_words.emplace_back("value");
    web_words.emplace_back("var");
    web_words.emplace_back("visibility");
    web_words.emplace_back("void");
    web_words.emplace_back("w");
    web_words.emplace_back("webkit");
    web_words.emplace_back("weight");
    web_words.emplace_back("wgaddriverabtestidtargeting");
    web_words.emplace_back("wgaddriverdelaytimeout");
    web_words.emplace_back("wgaddrivermoattrackingforfeaturedvideoadsampling");
    web_words.emplace_back("wgaddriverplayadsonnextfvfrequency");
    web_words.emplace_back("wgaddriverporvatamoattrackingsampling");
    web_words.emplace_back("wgaddriverstickyslotslines");
    web_words.emplace_back("wgenabletrackingoptinmodal");
    web_words.emplace_back("wgfollowedpagespagerlimit");
    web_words.emplace_back("wgfollowedpagespagerlimitajax");
    web_words.emplace_back("wgmaxuploadsize");
    web_words.emplace_back("wgminimalpasswordlength");
    web_words.emplace_back("wgmobilequalaroo");
    web_words.emplace_back("wgnamespacenumber");
    web_words.emplace_back("wgstyleversion");
    web_words.emplace_back("wgtrackid");
    web_words.emplace_back("wgwikiamaxnamechars");
    web_words.emplace_back("widget");
    web_words.emplace_back("width");
    web_words.emplace_back("widthtype");
    web_words.emplace_back("window");
    web_words.emplace_back("wllimit");
    web_words.emplace_back("writable");
    web_words.emplace_back("x");
    web_words.emplace_back("xfbml");
    web_words.emplace_back("xhr");
    web_words.emplace_back("y");
    web_words.emplace_back("you");
    web_words.emplace_back("z");
    web_words.emplace_back("zn");
    web_words.emplace_back("zoom");
    web_words.emplace_back("©");
    return web_words;
❱

◀private: static▶ std::vector<std::string> ☀Get_Boring_Words()❰
    std::vector<std::string> web_words;
    web_words.emplace_back("of");
    web_words.emplace_back("is");
    web_words.emplace_back("the");
    web_words.emplace_back("in");
    web_words.emplace_back("than");
    web_words.emplace_back("at");
    web_words.emplace_back("and");
    web_words.emplace_back("or");
    web_words.emplace_back("but");
    web_words.emplace_back("was");
    web_words.emplace_back("ver");
    web_words.emplace_back("now");
    web_words.emplace_back("as");
    web_words.emplace_back("only");
    web_words.emplace_back("that");
    web_words.emplace_back("this");
    web_words.emplace_back("with");
    web_words.emplace_back("them");
    web_words.emplace_back("by");
    web_words.emplace_back("on");
    web_words.emplace_back("another");
    web_words.emplace_back("had");
    web_words.emplace_back("from");
    web_words.emplace_back("are");
    web_words.emplace_back("has");
    return web_words;
❱
