class
❪iostream❫
❪fstream❫
❪string❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/structure/model/structure"❫
⚯
❪sstream❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/json/functions/lib"❫
❪"code/tools/noogle/program_options/program_options"❫
⚞⚟

◀public: static▶ Structure ☀Get() ❰
    Structure s;
    s.literature.paragraphs.emplace_back(Title());
    s.literature.paragraphs.emplace_back(Introduction());
    s.literature.paragraphs.emplace_back(Installation());
    s.literature.paragraphs.emplace_back(Command_Line());
    s.literature.paragraphs.emplace_back(Steps());
    s.literature.paragraphs.emplace_back(Configuration());
    return s;
❱


◀private: static▶ Paragraph ☀Title() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Like google but you get back numbers");
    
    Sentence s;
    Sentence_Image img;
    img.alternative_text.value = as_wstring("noogle");
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
    return p;
❱

◀private: static▶ Paragraph ☀Introduction() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Introduction");
    
    Add_Sentence(p,"noogle is like google but you get back numbers");
    Add_Sentence(p,"it runs various search engines, culminates the data, and provides you the most common numerical results shared across various websites");
    Add_Sentence(p,"for example, if you noogled 'us flag' you'd expect to get back 50 states");
    Add_Sentence(p,"if you noogled 'snow white' you'd expect to get back 7 dwarfs");
    return p;
❱

◀private: static▶ Paragraph ☀Installation() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Installation");
    
    Add_Sentence(p,"software can be installed through apt-get");
    
    std::string example;
    example += "sudo curl -s --compressed -o /etc/apt/sources.list.d/noogle.list 'https://raw.githubusercontent.com/luxe/luxe.github.com/master/releases/noogle/noogle.list'\n";
    example += "sudo apt update\n";
    example += "sudo apt install noogle\n";
    Add_Sentence_With_Code(p,"the following commands will add the ppa and install the software",example);
    
    example = "sudo apt remove noogle";
    Add_Sentence_With_Code(p,"to uninstall you can use:",example);
    
    Add_Sentence(p,"the debian file can also be installed/uninstalled directly");
    return p;
❱

◀private: static▶ Paragraph ☀Command_Line() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Command Line");
    
    std::stringstream ss;
    char *args[] = {
        (char*)"--query test",
        NULL
    };
    Program_Options po(1,args);
    Add_Sentence_With_Code(p,"The tool can be used from the command line",po.Get_Help_Message());
    return p;
❱

◀private: static▶ Paragraph ☀Steps() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Steps");
    
    Add_Sentence_With_Image(p,"These are the general phases noogle uses to produce results:","img/noogle-steps.png");
    return p;
❱

◀private: static▶ Paragraph ☀Configuration() ❰
    Paragraph p;
    p.depth.value = as_wstring("0");
    p.title.value = as_wstring("Configuration");
    
    Add_Sentence(p,"all configuration for noogle will be found in your home directory inside the file **.noogle**");
    Add_Sentence(p,"this is a json file that will be automatically loaded by the program");
    Add_Sentence(p,"if you specify malformed json, or your json does not match the schema known to the program, it will tell you");
    Add_Sentence(p,"the best way to fix this, is to simply delete the configuration file");
    Add_Sentence(p,"the program will automatically re-create it with a valid default configuration");
    Add_Sentence(p,"in the following sections, we will cover more specifically the different areas of configuration");
    return p;
❱

◀private: static▶ void ☀Add_Sentence(Paragraph & p, std::string const& str) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    p.sentences.emplace_back(s);
❱
◀private: static▶ void ☀Add_Sentence_With_Code(Paragraph & p, std::string const& str, std::string const& code) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Code_Line line;
    line.line.value = as_wstring(code);
    s.codes.emplace_back(line);
    p.sentences.emplace_back(s);
❱

◀private: static▶ void ☀Add_Sentence_With_Image(Paragraph & p, std::string const& str, std::string const& image_path) ❰
    Sentence s;
    s.text.value = as_wstring(str);
    
    Sentence_Image img;
    img.image_path.value = as_wstring(image_path);
    s.images.emplace_back(img);
    p.sentences.emplace_back(s);
❱