class
❪"code/tools/noogle/meta_settings"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/tools/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/safe_queue.h"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/tools/noogle/noogle_running_stats"❫
❪"code/tools/noogle/noogle_result"❫
❪atomic❫
❪"code/tools/noogle/program_options/program_options"❫
⚯
❪iostream❫
❪thread❫
❪"code/utilities/web/chrome/driver/chrome_driver_selector"❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/tools/noogle/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/google/google_search_url_deviser"❫
❪"code/utilities/web/lib"❫
❪boost/asio/thread_pool.hpp❫
❪boost/asio/post.hpp❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/characteristic/spirit_numeric_checker"❫
⚞⚟

//apt-get install python3-bs4

//can you noogle a googol?
//should return a very large number (mpz support)

◀public: static▶ void ☀Run(Meta_Settings const& meta, Program_Options const& options) ❰


    //when the python scoped interpreter exists, I can't ctrl+c the program
    //we'll remedy that with a custom signal handler.
    //find out why this is, maybe we can do something better.
    //https://github.com/pybind/pybind11/issues/1813
    signal(SIGINT,[](int signum){
        exit(signum);
    });


    //settings
    auto settings = Default_Settings_Getter::Get();
    Noogle_Running_Stats stats;
    
    //make sure we have a python environment going for the duration of the program (RAII)
    pybind11::scoped_interpreter guard{};
    
    //add python implementations
    add_beautiful_soup_function();
    
    //create a browser to automate queries on
    Browser_Creator::Create(settings.browser);
    
    //get all of the google urls to search with
    auto google_search_urls = Google_Search_Url_Deviser::Devise(settings.devise_google_search_urls,options.Query());
    
    
    FinishableSafeQueue<std::string> result_urls;
    FinishableSafeQueue<std::string> html_results;
    FinishableSafeQueue<std::string> sanitized_text;
    FinishableSafeQueue<Noogle_Result> noogle_results;
    
    std::thread t1(Show_Results,std::cref(stats),std::ref(noogle_results));
    std::thread t2(Google_Search_Urls_To_Google_Result_Urls,settings.browser,std::ref(stats),google_search_urls,std::ref(result_urls));
    std::thread t3(Convert_Result_Urls_To_Html,settings.browser,std::ref(stats),std::ref(result_urls),std::ref(html_results));
    std::thread t4(Sanitize_Html,std::ref(stats),std::ref(html_results),std::ref(sanitized_text));
    std::thread t5(Parse_For_Noogle_Results,std::ref(stats),std::ref(sanitized_text),std::ref(noogle_results));
    
    t1.join();
    t2.join();
    t3.join();
    t4.join();
    t5.join();
    
❱


◀private: static▶ std::string ☀parse_away_html_tags(std::string & html)❰
    make_python_str(html);
    auto parsed = pybind11::eval("parse_html(" + html + ")").cast<std::string>();
    return parsed;
❱

◀private: static▶ void ☀make_python_str(std::string & str)❰
    str += "\"\"\"\n";
    str = std::string("\"\"\"\n") + str;
❱

◀private: static▶ void ☀add_beautiful_soup_function()❰
    pybind11::exec("from bs4 import BeautifulSoup");
    pybind11::exec(R"(
def parse_html(x):
    soup = BeautifulSoup(x, 'html.parser')
    return soup.get_text()
)");
❱



//STEP 1
◀private: static▶ void ☀Google_Search_Urls_To_Google_Result_Urls(Browser_Settings const& settings, Noogle_Running_Stats & stats, std::vector<std::string> const& google_search_urls, FinishableSafeQueue<std::string> & q)❰
    for (auto const& search_url: google_search_urls){
        std::cout << search_url << std::endl;
        auto result_urls = Get_Google_Result_Urls(settings,search_url);
        for (auto const& result_url: result_urls){
            if (Google_Result_Url_Is_Valid_For_Exploring(result_url)){
                ++stats.sites_total;
                q.add(result_url);
                ++stats.sites_current;
            }
        }
    }
    q.mark_finished();
❱

◀private: static▶ bool ☀Google_Result_Url_Is_Valid_For_Exploring(std::string const& url)❰
    if (Begins_With(url,"https://www.google.com/search?")){
        return false;
    }
    return true;
❱


//STEP 2
◀private: static▶ void ☀Convert_Result_Urls_To_Html(Browser_Settings const& settings, Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & urls_in, FinishableSafeQueue<std::string> & html_out)❰
    
    //int threadNumbers = std::thread::hardware_concurrency();
    int threadNumbers = 10;
    boost::asio::thread_pool pool(threadNumbers);
    while(!urls_in.is_finished()){
        auto str = urls_in.get();
        ++stats.htmls_total;
        boost::asio::post(pool, [&,str]() {
            Html_Fetch_Settings fetch_settings;
            fetch_settings.url = str;
            auto html = Get_Html_Of_Site(fetch_settings);
            html_out.add(html);
            ++stats.htmls_current;
            
            if (html.empty()){
                //std::cout << fetch_settings.url << std::endl;
            }
        });
    }
    pool.join();
    html_out.mark_finished();
❱

//STEP 3
◀private: static▶ void ☀Sanitize_Html(Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & html_results, FinishableSafeQueue<std::string> & sanitized_text)❰
    while(!html_results.is_finished()){
        auto str = html_results.get();
            ++stats.sanitized_total;
            //std::cout << "parsing away" << std::endl;
            //sanitized_text.add(parse_away_html_tags(str));
            sanitized_text.add(str);
            //std::cout << "sdfs parsing away" << std::endl;
            ++stats.sanitized_current;
    }
    sanitized_text.mark_finished();
❱

//STEP 4
◀private: static▶ void ☀Parse_For_Noogle_Results(Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & sanitized_text, FinishableSafeQueue<Noogle_Result> & noogle_results)❰
    while(!sanitized_text.is_finished()){
        
        auto str = sanitized_text.get();
        auto tokens = Default_Boost_Tokenize(str);
        for (size_t i = 0; i < tokens.size(); ++i){
            Decide_If_Token_Is_A_Result(tokens[i],tokens,i,noogle_results);
        }
    }
    
    noogle_results.mark_finished();
❱
◀private: static▶ void ☀Decide_If_Token_Is_A_Result(std::string const& token, std::vector<std::string> const& tokens, size_t index, FinishableSafeQueue<Noogle_Result> & noogle_results)❰

    if (Spirit_Numeric_Checker::Is_Numeric(token)){
        Noogle_Result result;
        result.number = token;
        noogle_results.add(result);
        //std::cout << token << std::endl;
    }
    
    noogle_results.mark_finished();
❱



//SHOW STEP
◀private: static▶ void ☀Show_Results(Noogle_Running_Stats const& stats, FinishableSafeQueue<Noogle_Result> & noogle_results)❰

    while(!noogle_results.is_finished()){
        std::string progress;
        progress += "urls [" + std::to_string(stats.sites_current) + "/" + std::to_string(stats.sites_total) + "]";
        progress += " ";
        progress += "htmls [" + std::to_string(stats.htmls_current) + "/" + std::to_string(stats.htmls_total) + "]";
        progress += " ";
        progress += "texts [" + std::to_string(stats.sanitized_current) + "/" + std::to_string(stats.sanitized_total) + "]";
        progress += " ";
        progress += "results: " + std::to_string(stats.results);
        Clear_Terminal3();
        std::cout << progress;
        std::cout.flush();
        Sleep_For_N_Milliseconds(500);
    }
❱




//browser navigating
◀private: static▶ std::vector<std::string> ☀Get_Google_Result_Urls(Browser_Settings const& settings, std::string const& url)❰
    Go_To_Url(settings,url);
    return Get_Search_Result_Urls_From_Page(settings);
❱
◀private: static▶ void ☀Go_To_Google_And_Search_Something(Browser_Settings const& settings, std::string const& search_query)❰
    Go_To_Google_And_Search_Something_Go_To_Page_First(settings,search_query);
❱

◀private: static▶ void ☀Go_To_Google_And_Search_Something_Go_To_Page_First(Browser_Settings const& settings, std::string const& search_query)❰
    Go_To_Google(settings);
    pybind11::exec("thing = " + settings.browser_name + ".find_element_by_name('q')");
    pybind11::exec("thing.send_keys('" + search_query + "')");
    pybind11::exec("thing.send_keys(Keys.RETURN)");
    //pybind11::exec("thing.submit()");
❱

◀private: static▶ void ☀Go_To_Google(Browser_Settings const& settings)❰
    Go_To_Url(settings,"http://google.com");
❱

◀private: static▶ void ☀Go_To_Url(Browser_Settings const& browser, std::string const& url)❰
    
    pybind11::exec(browser.browser_name + ".get('" + url + "')");
❱

◀private: static▶ std::vector<std::string> ☀Convert_Python_Strings_To_Vec(std::string const& var_name)❰
    auto py_obj = pybind11::eval("linkList").cast<pybind11::list>();
    std::vector<std::string> results;
    for (pybind11::handle o : py_obj) {
        std::string str = pybind11::cast<std::string>(o);
        results.emplace_back(str);
    }
    return results;
❱

◀private: static▶ std::string ☀Get_Raw_Text_Of_Webpage(std::string const& html)❰

    pybind11::str py_s = pybind11::str(html);
    return html;
❱

◀private: static▶ std::vector<std::string> ☀Get_Google_Next_Prev_Pages(Browser_Settings const& browser)❰

    pybind11::exec("linkBox = " + browser.browser_name + ".find_element_by_xpath('//*[@id=\"nav\"]/tbody/tr')");
    pybind11::exec("links = linkBox.find_elements_by_css_selector('a')");
    pybind11::exec("linkList = []");
    pybind11::exec("for link in links: linkList.append(link.get_attribute('href'))");
    auto result = Convert_Python_Strings_To_Vec("linkList");
    return result;
    
❱

◀private: static▶ std::vector<std::string> ☀Get_Search_Result_Urls_From_Page(Browser_Settings const& browser)❰

    pybind11::exec("results = " + browser.browser_name + ".find_elements_by_css_selector('div.g')");
    pybind11::exec("linkList = []");
    pybind11::exec("for link in results: linkList.append(link.find_element_by_tag_name('a').get_attribute('href'))");
    auto result = Convert_Python_Strings_To_Vec("linkList");
    
    
    //should go further, and try to parse the url?
    //import urlparse
    //print(urlparse.parse_qs(urlparse.urlparse(href).query)["q"])
    
    return result;
❱