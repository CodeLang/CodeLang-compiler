class
❪"code/tools/noogle/meta_settings"❫
❪"code/utilities/web/automate/browser/browser_settings"❫
❪"code/tools/noogle/settings/noogle_settings"❫
❪"code/utilities/data_structures/queue/safe_queue.h"❫
❪"code/utilities/data_structures/queue/finishable_safe_queue.h"❫
❪"code/tools/noogle/noogle_running_stats"❫
❪"code/tools/noogle/noogle_result"❫
❪atomic❫
❪unordered_set❫
❪"code/tools/noogle/program_options/program_options"❫
⚯
❪iostream❫
❪thread❫
❪"code/utilities/web/chrome/driver/chrome_driver_selector"❫
❪pybind11/embed.h❫
❪"code/utilities/web/automate/browser/browser_creator"❫
❪"code/utilities/web/automate/navigation/browser_navigator"❫
❪"code/tools/noogle/default_settings_getter"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/squeeze/lib"❫
❪"code/utilities/time/sleeping/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/web/google/google_search_url_deviser"❫
❪"code/utilities/web/google/google_json_url_deviser"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/exits/lib"❫
❪boost/asio/thread_pool.hpp❫
❪boost/asio/post.hpp❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/characteristic/spirit_numeric_checker"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/char/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/chart/ascii/chart_getter"❫
❪"url.hpp"❫
❪"code/utilities/types/sets/lib"❫
⚞⚟

//apt-get install python3-bs4

//can you noogle a googol?
//should return a very large number (mpz support)

◀public: static▶ void ☀Run(Meta_Settings const& meta, Program_Options const& options) ❰


    //when the python scoped interpreter exists, I can't ctrl+c the program
    //we'll remedy that with a custom signal handler.
    //find out why this is, maybe we can do something better.
    //https://github.com/pybind/pybind11/issues/1813
    signal(SIGINT,[](int signum){
        exit(signum);
    });
    
    //catch crashes
    // signal(SIGSEGV,[](int signum){
    //     ::signal(signum, SIG_DFL);
    //     boost::stacktrace::safe_dump_to("./backtrace.dump");
    //     ::raise(SIGABRT);
    // });
    // signal(SIGABRT,[](int signum){
    //     ::signal(signum, SIG_DFL);
    //     boost::stacktrace::safe_dump_to("./backtrace.dump");
    //     ::raise(SIGABRT);
    // });


    //settings
    auto settings = Default_Settings_Getter::Get();
    Noogle_Running_Stats stats;
    
    //make sure we have a python environment going for the duration of the program (RAII)
    pybind11::scoped_interpreter guard{};
    
    //add python implementations
    add_beautiful_soup_function();
    
    //create a browser to automate queries on
    //Browser_Creator::Create(settings.browser);
    
    //get all of the google urls to search with
    auto google_search_urls = Google_Search_Url_Deviser::Devise(settings.devise_google_search_urls,options.Query());
    auto google_query_urls = Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query());
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " number");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " has");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " how many");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " total");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " amount");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " count");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " facts");
    google_query_urls += Google_Json_Url_Deviser::Devise(settings.devise_google_query_urls,options.Query() + " result");
    
    //for (auto const& it: google_query_urls){
    //    std::cout << it << std::endl;
    //}
    //exit(0);
    
    
    FinishableSafeQueue<std::string> result_urls;
    FinishableSafeQueue<std::string> html_results;
    FinishableSafeQueue<std::string> sanitized_text;
    FinishableSafeQueue<Noogle_Result> noogle_results;
    
    std::vector<std::thread> jobs;
    jobs.emplace_back(Show_Results,std::cref(stats),std::ref(noogle_results));
    //jobs.emplace_back(Google_Search_Urls_To_Google_Result_Urls,settings.browser,std::ref(stats),google_search_urls,std::ref(result_urls));
    jobs.emplace_back(Google_Query_Urls_To_Google_Result_Urls,settings.browser,std::ref(stats),google_query_urls,std::ref(result_urls));
    jobs.emplace_back(Convert_Result_Urls_To_Html,settings.browser,std::ref(stats),std::ref(result_urls),std::ref(html_results));
    jobs.emplace_back(Sanitize_Html,std::ref(stats),std::ref(html_results),std::ref(sanitized_text));
    jobs.emplace_back(Parse_For_Noogle_Results,std::ref(stats),std::ref(sanitized_text),std::ref(noogle_results));
    
    for (auto & it: jobs){
        it.join();
    }
    
❱


◀private: static▶ std::string ☀parse_away_html_tags(std::string & html)❰
    make_python_str(html);
    auto parsed = pybind11::eval("parse_html(" + html + ")").cast<std::string>();
    return parsed;
❱

◀private: static▶ void ☀make_python_str(std::string & str)❰
    str += "\"\"\"\n";
    str = std::string("\"\"\"\n") + str;
❱

◀private: static▶ void ☀add_beautiful_soup_function()❰
    pybind11::exec("from bs4 import BeautifulSoup");
    pybind11::exec(R"(
def parse_html(x):
    soup = BeautifulSoup(x, 'html.parser')
    result = soup.get_text()
    # print(result)
    return result
)");
❱

◀private: static▶ void ☀add_beautiful_soup_function_on_path()❰
    pybind11::exec("from bs4 import BeautifulSoup");
    pybind11::exec(R"(
def parse_html(path):

    with open(path, 'r') as content_file:
        content = content_file.read()
    soup = BeautifulSoup(content 'html.parser')
    return soup.get_text()
)");
❱



//STEP 1 (A)
◀private: static▶ void ☀Google_Search_Urls_To_Google_Result_Urls(Browser_Settings const& settings, Noogle_Running_Stats & stats, std::vector<std::string> const& google_search_urls, FinishableSafeQueue<std::string> & q)❰

    std::unordered_set<std::string> seen_hosts;
    
    for (auto const& search_url: google_search_urls){
        auto result_urls = Browser_Navigator::Get_Google_Result_Urls(settings,search_url);
        for (auto const& result_url: result_urls){
            if (Google_Result_Url_Is_Valid_For_Exploring(result_url,seen_hosts)){
                ++stats.sites.total;
                q.add(result_url);
                ++stats.sites.current;
            }
        }
    }
    q.mark_finished();
    stats.sites.finished = true;
❱

◀private: static▶ bool ☀Google_Result_Url_Is_Valid_For_Exploring(std::string const& url,std::unordered_set<std::string> & seen_hosts)❰
   
   try {
       Url parsed_url(url);
       auto host_name = parsed_url.host();
       auto parts = Split_Into_Parts_From_Dot(host_name);
       while (parts.size() > 2){
            Remove_First_Element(parts);
       }
       std::string new_host_name = "";
       if (!parts.empty()){
            new_host_name = parts[0];
       }
       
        if (Begins_With(url,"https://www.google.com/search?")){
            return false;
        }
        
        if (Begins_With(url,"mailto:")){
            return false;
        }
        
        if (seen_hosts.find(new_host_name) != seen_hosts.end()){
            //std::cout << "dropping " << new_host_name << std::endl;
            return false;
        }
        
        //std::cout << new_host_name << std::endl;
        seen_hosts.insert(new_host_name);
    }
    catch(...){
    }
    return true;
❱

//STEP 1 (B)
◀private: static▶ void ☀Google_Query_Urls_To_Google_Result_Urls(Browser_Settings const& settings, Noogle_Running_Stats & stats, std::vector<std::string> const& google_query_urls, FinishableSafeQueue<std::string> & q)❰
    
    std::unordered_set<std::string> seen_hosts;
    
    for (auto const& search_url: google_query_urls){
        
        //query json endpoint
        Html_Fetch_Settings fetch_settings;
        fetch_settings.url = search_url;
        auto response = Get_Html_Of_Site(fetch_settings);
        
        auto j = nlohmann::json::parse(response);
        for (auto it: j["items"]){
            auto result_url = it["link"].get<std::string>();
            if (Google_Result_Url_Is_Valid_For_Exploring(result_url,seen_hosts)){
                ++stats.sites.total;
                q.add(result_url);
                ++stats.sites.current;
            }
        }
    }
    q.mark_finished();
    stats.sites.finished = true;
❱

//STEP 2
◀private: static▶ void ☀Convert_Result_Urls_To_Html(Browser_Settings const& settings, Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & urls_in, FinishableSafeQueue<std::string> & html_out)❰
    
    
    std::unordered_set<std::string> duplicate_htmls;
    
    //int threadNumbers = std::thread::hardware_concurrency();
    int threadNumbers = 10;
    boost::asio::thread_pool pool(threadNumbers);
    while(!urls_in.is_finished() || !urls_in.is_empty()){
        auto str = urls_in.get();
        ++stats.htmls.total;
        boost::asio::post(pool, [&,str]() {
            Html_Fetch_Settings fetch_settings;
            fetch_settings.url = str;
            auto html = Get_Html_Of_Site(fetch_settings);
            
            if (duplicate_htmls.find(html) == duplicate_htmls.end()){
                html_out.add(html);
                ++stats.htmls.current;
                duplicate_htmls.insert(html);
            }
            
            if (html.empty()){
                //std::cout << fetch_settings.url << std::endl;
            }
        });
    }
    pool.join();
    html_out.mark_finished();
    stats.htmls.finished = true;
❱

//STEP 3
◀private: static▶ void ☀Sanitize_Html(Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & html_results, FinishableSafeQueue<std::string> & sanitized_text)❰
    while(!html_results.is_finished() || !html_results.is_empty()){
        auto str = html_results.get();
            ++stats.sanitized.total;
            try{
                sanitized_text.add(parse_away_html_tags(str));
            }
            catch(...){
                //sanitized_text.add(str);
            }
            ++stats.sanitized.current;
    }
    sanitized_text.mark_finished();
    stats.sanitized.finished = true;
❱

//STEP 4
◀private: static▶ void ☀Parse_For_Noogle_Results(Noogle_Running_Stats & stats, FinishableSafeQueue<std::string> & sanitized_text, FinishableSafeQueue<Noogle_Result> & noogle_results)❰
    while(!sanitized_text.is_finished() || !sanitized_text.is_empty()){
        
        auto blob = sanitized_text.get();
        Parse_Html_Blob(blob,stats,noogle_results);
    }
    
    noogle_results.mark_finished();
❱

◀private: static▶ void ☀Parse_Html_Blob(std::string const& blob, Noogle_Running_Stats & stats, FinishableSafeQueue<Noogle_Result> & noogle_results)❰



    std::unordered_set<std::string> local_site_results;
    auto tokens = Default_Boost_Tokenize(blob);
    for (size_t i = 0; i < tokens.size(); ++i){
        Decide_If_Token_Is_A_Result(stats,tokens[i],tokens,i,local_site_results);
    }
    
    //add local site results to global
    for (auto const& it: local_site_results){
        Noogle_Result result;
        result.number = it;
        noogle_results.add(result);
        stats.currated_results.Add(result.number);
        ++stats.results;
        
    }
❱



◀private: static▶ void ☀Decide_If_Token_Is_A_Result(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index,  std::unordered_set<std::string> & local_site_results)❰

    
    if (Spirit_Numeric_Checker::Is_Numeric(token) || Is_English_Number(token)){
        
        auto as_number = English_Number_To_Integral(token);
        
        Add_Left_Window(stats,as_number,tokens,index,local_site_results);
        Add_Right_Window(stats,as_number,tokens,index,local_site_results);
    }
❱

◀private: static▶ void ☀Add_Left_Window(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results)❰
    if (index != 0){
        auto window_word = tokens[index-1];
        if (!Spirit_Numeric_Checker::Is_Numeric(window_word) && !Is_A_Webish_Word(window_word) && !Is_A_Boring_Word(window_word) && !Has_A_Numeric_Character(window_word)){
            local_site_results.insert(window_word + " " + token);
        }
    }
❱
◀private: static▶ void ☀Add_Right_Window(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results)❰
    if (index+1 < tokens.size()){
        auto window_word = tokens[index+1];
        if (!Spirit_Numeric_Checker::Is_Numeric(window_word) && !Is_A_Webish_Word(window_word) && !Is_A_Boring_Word(window_word) && !Has_A_Numeric_Character(window_word)){
            local_site_results.insert(token + " " + window_word);
        }
    }
❱
◀private: static▶ void ☀Add_Exact(Noogle_Running_Stats & stats, std::string const& token, std::vector<std::string> const& tokens, size_t index, std::unordered_set<std::string> & local_site_results)❰
    local_site_results.insert(token);
❱

◀private: static▶ bool ☀Is_A_Webish_Word(std::string const& str)❰
    std::vector<std::string> web_words;
    web_words.emplace_back("width");
    web_words.emplace_back("a");
    web_words.emplace_back("x");
    web_words.emplace_back("y");
    web_words.emplace_back("css");
    web_words.emplace_back("height");
    web_words.emplace_back("isOutstream");
    web_words.emplace_back("id");
    web_words.emplace_back("ids");
    web_words.emplace_back("i");
    web_words.emplace_back("size");
    web_words.emplace_back("index");
    web_words.emplace_back("margin");
    web_words.emplace_back("right");
    web_words.emplace_back("bottom");
    web_words.emplace_back("t");
    web_words.emplace_back("rgb");
    web_words.emplace_back("rgba");
    web_words.emplace_back("25rem");
    web_words.emplace_back("rem");
    web_words.emplace_back("important");
    web_words.emplace_back("left");
    web_words.emplace_back("top");
    web_words.emplace_back("type");
    web_words.emplace_back("t");
    web_words.emplace_back("padding");
    web_words.emplace_back("Element");
    web_words.emplace_back("GMT");
    web_words.emplace_back("UTC");
    web_words.emplace_back("media");
    web_words.emplace_back("cnn");
    web_words.emplace_back("weight");
    web_words.emplace_back("scale");
    web_words.emplace_back("sites");
    web_words.emplace_back("assetDuration");
    web_words.emplace_back("zn");
    web_words.emplace_back("border");
    web_words.emplace_back("color");
    web_words.emplace_back("625rem");
    web_words.emplace_back("js");
    web_words.emplace_back("idx");
    web_words.emplace_back("webkit");
    web_words.emplace_back("opacity");
    web_words.emplace_back("auto");
    web_words.emplace_back("position");
    web_words.emplace_back("pg");
    web_words.emplace_back("translate");
    web_words.emplace_back("Video");
    web_words.emplace_back("px");
    web_words.emplace_back("2n");
    web_words.emplace_back("cd");
    web_words.emplace_back("front");
    web_words.emplace_back("containers");
    web_words.emplace_back("cnnsans");
    web_words.emplace_back("clear");
    web_words.emplace_back("body");
    web_words.emplace_back("jpg");
    web_words.emplace_back("search");
    web_words.emplace_back("widget");
    web_words.emplace_back("spacing");
    web_words.emplace_back("char");
    web_words.emplace_back("o");
    web_words.emplace_back("z");
    web_words.emplace_back("supersection");
    web_words.emplace_back("title");
    web_words.emplace_back("isPrivate");
    web_words.emplace_back("full");
    web_words.emplace_back("length");
    web_words.emplace_back("about");
    web_words.emplace_back("Navbar");
    web_words.emplace_back("navbar");
    web_words.emplace_back("n");
    web_words.emplace_back("void");
    web_words.emplace_back("var");
    web_words.emplace_back("s");
    web_words.emplace_back("calc");
    web_words.emplace_back("r");
    web_words.emplace_back("typename");
    web_words.emplace_back("c");
    web_words.emplace_back("transform");
    web_words.emplace_back("display");
    web_words.emplace_back("insert");
    web_words.emplace_back("radius");
    web_words.emplace_back("this");
    web_words.emplace_back("gt");
    web_words.emplace_back("function");
    web_words.emplace_back("e");
    web_words.emplace_back("if");
    web_words.emplace_back("script");
    web_words.emplace_back("flex");
    web_words.emplace_back("density");
    web_words.emplace_back("nav");
    web_words.emplace_back("order");
    web_words.emplace_back("text");
    web_words.emplace_back("shadow");
    web_words.emplace_back("translateY");
    web_words.emplace_back("translateX");
    web_words.emplace_back("uc");
    web_words.emplace_back("el");
    web_words.emplace_back("cn");
    web_words.emplace_back("data");
    web_words.emplace_back("isHidden");
    web_words.emplace_back("value");
    web_words.emplace_back("autoMax");
    web_words.emplace_back("src");
    web_words.emplace_back("sizes");
    web_words.emplace_back("arguments");
    web_words.emplace_back("ngcontent");
    web_words.emplace_back("exp");
    web_words.emplace_back("h");
    web_words.emplace_back("w");
    web_words.emplace_back("l");
    web_words.emplace_back("font");
    web_words.emplace_back("async");
    web_words.emplace_back("head");
    web_words.emplace_back("j");
    web_words.emplace_back("new");
    web_words.emplace_back("return");
    web_words.emplace_back("window");
    web_words.emplace_back("for");
    web_words.emplace_back("split");
    web_words.emplace_back("d");
    web_words.emplace_back("appendChild");
    web_words.emplace_back("charAt");
    web_words.emplace_back("dateModified");
    web_words.emplace_back("f");
    web_words.emplace_back("else");
    web_words.emplace_back("window");
    web_words.emplace_back("document");
    web_words.emplace_back("undefined");
    web_words.emplace_back("api");
    web_words.emplace_back("writable");
    web_words.emplace_back("enumerable");
    web_words.emplace_back("dev");
    web_words.emplace_back("aborted");
    web_words.emplace_back("try");
    web_words.emplace_back("p");
    web_words.emplace_back("call");
    web_words.emplace_back("k");
    web_words.emplace_back("g");
    web_words.emplace_back("routeName");
    web_words.emplace_back("addPageAction");
    web_words.emplace_back("abort");
    web_words.emplace_back("item");
    web_words.emplace_back("catch");
    web_words.emplace_back("you");
    web_words.emplace_back("utf");
    web_words.emplace_back("xhr");
    web_words.emplace_back("status");
    web_words.emplace_back("loaded");
    web_words.emplace_back("characterData");
    web_words.emplace_back("m");
    web_words.emplace_back("loaded");
    web_words.emplace_back("listener");
    web_words.emplace_back("err");
    web_words.emplace_back("background");
    web_words.emplace_back("totalCbs");
    web_words.emplace_back("u");
    web_words.emplace_back("b");
    web_words.emplace_back("thrown");
    web_words.emplace_back("fn");
    web_words.emplace_back("port");
    web_words.emplace_back("cbTime");
    web_words.emplace_back("called");
    web_words.emplace_back("datePublished");
    web_words.emplace_back("overflow");
    web_words.emplace_back("xfbml");
    web_words.emplace_back("align");
    web_words.emplace_back("load");
    web_words.emplace_back("passive");
    web_words.emplace_back("everythingExceptFlag");
    web_words.emplace_back("clearRect");
    web_words.emplace_back("addService");
    web_words.emplace_back("readyState");
    web_words.emplace_back("max");
    web_words.emplace_back("googletag");
    web_words.emplace_back("stn");
    web_words.emplace_back("onloadCalled");
    web_words.emplace_back("onload");
    web_words.emplace_back("nrDev");
    web_words.emplace_back("loader");
    web_words.emplace_back("DOMReady");
    web_words.emplace_back("div");
    web_words.emplace_back("adjust");
    web_words.emplace_back("Chrome");
    web_words.emplace_back("substring");
    web_words.emplace_back("©");
    web_words.emplace_back("true");
    web_words.emplace_back("false");
    web_words.emplace_back("v");
    web_words.emplace_back("page");
    web_words.emplace_back("E");
    web_words.emplace_back("B");
    web_words.emplace_back("wgNamespaceNumber");
    web_words.emplace_back("toString");
    web_words.emplace_back("zoom");
    web_words.emplace_back("wllimit");
    web_words.emplace_back("mode");
    web_words.emplace_back("enable");
    web_words.emplace_back("deskstop");
    web_words.emplace_back("widthType");
    web_words.emplace_back("wgWikiaMaxNameChars");
    web_words.emplace_back("wgTrackID");
    web_words.emplace_back("wgStyleVersion");
    web_words.emplace_back("wgMobileQualaroo");
    web_words.emplace_back("wgMinimalPasswordLength");
    web_words.emplace_back("wgMaxUploadSize");
    web_words.emplace_back("wgFollowedPagesPagerLimitAjax");
    web_words.emplace_back("wgFollowedPagesPagerLimit");
    web_words.emplace_back("wgEnableTrackingOptInModal");
    web_words.emplace_back("wgAdDriverStickySlotsLines");
    web_words.emplace_back("wgAdDriverPorvataMoatTrackingSampling");
    web_words.emplace_back("wgAdDriverPlayAdsOnNextFVFrequency");
    web_words.emplace_back("wgAdDriverMoatTrackingForFeaturedVideoAdSampling");
    web_words.emplace_back("wgAdDriverDelayTimeout");
    web_words.emplace_back("wgAdDriverAbTestIdTargeting");
    web_words.emplace_back("to");
    web_words.emplace_back("null");
    web_words.emplace_back("line");
    web_words.emplace_back("substr");
    web_words.emplace_back("md");
    web_words.emplace_back("visibility");
    web_words.emplace_back("solid");
    web_words.emplace_back("translateZ");
    web_words.emplace_back("svg");
    web_words.emplace_back("count");
    web_words.emplace_back("frameborder");
    web_words.emplace_back("outline");
    web_words.emplace_back("Chromium");
    web_words.emplace_back("applicationTime");
    web_words.emplace_back("appendChild");
    web_words.emplace_back("CDATA");
    web_words.emplace_back("networkId");
    web_words.emplace_back("O");
    web_words.emplace_back("A");
    
    
    return String_In_Vector(web_words,str);
❱

◀private: static▶ bool ☀Is_A_Boring_Word(std::string const& str)❰
    std::vector<std::string> web_words;
    web_words.emplace_back("of");
    web_words.emplace_back("is");
    web_words.emplace_back("the");
    web_words.emplace_back("in");
    web_words.emplace_back("than");
    web_words.emplace_back("at");
    web_words.emplace_back("and");
    web_words.emplace_back("or");
    web_words.emplace_back("but");
    web_words.emplace_back("was");
    web_words.emplace_back("ver");
    web_words.emplace_back("now");
    
    return String_In_Vector(web_words,As_Lowercase(str));
❱

◀private: static▶ bool ☀Is_English_Number(std::string const& str)❰

    std::vector<std::string> number_words;
    number_words.emplace_back("one");
    number_words.emplace_back("two");
    number_words.emplace_back("three");
    number_words.emplace_back("four");
    number_words.emplace_back("five");
    number_words.emplace_back("six");
    number_words.emplace_back("seven");
    number_words.emplace_back("eight");
    number_words.emplace_back("nine");
    number_words.emplace_back("ten");
    number_words.emplace_back("eleven");
    number_words.emplace_back("twelve");
    number_words.emplace_back("thirteen");
    
    return String_In_Vector(number_words,As_Lowercase(str));
❱

◀private: static▶ std::string ☀English_Number_To_Integral(std::string const& str)❰

    auto word = As_Lowercase(str);
    std::map<std::string,std::string> mapping;
    mapping.insert({"zero","0"});
    mapping.insert({"one","1"});
    mapping.insert({"two","2"});
    mapping.insert({"three","3"});
    mapping.insert({"four","4"});
    mapping.insert({"five","5"});
    mapping.insert({"six","6"});
    mapping.insert({"seven","7"});
    mapping.insert({"eight","8"});
    mapping.insert({"nine","9"});
    mapping.insert({"ten","10"});
    mapping.insert({"eleven","11"});
    mapping.insert({"twelve","12"});
    mapping.insert({"thirteen","13"});
    
    auto found = mapping.find(word);
    if (found != mapping.end()){
        return found->second;
    }
    return str;
❱





//SHOW STEP
◀private: static▶ void ☀Show_Results(Noogle_Running_Stats const& stats, FinishableSafeQueue<Noogle_Result> & noogle_results)❰

    int chart_height = 0;
    while(!noogle_results.is_finished()){
        Clear_Terminal_Up_N_Lines(chart_height);
        
        auto results = stats.currated_results.Top_N_Most_Common(40);
        auto chart = Chart_Getter::Get(results);
        chart_height = height(chart);
        std::cout << Build_Progress_Message(stats,chart);
        std::cout.flush();
        Sleep_For_N_Milliseconds(500);
    }
❱

◀private: static▶ std::string ☀Build_Progress_Message(Noogle_Running_Stats const& stats, std::string const& chart)❰
        std::string progress;
        progress += " ";
        progress += "urls [" + std::to_string(stats.sites.current) + "/" + std::to_string(stats.sites.total) + "]";
        progress += " ";
        progress += "htmls [" + std::to_string(stats.htmls.current) + "/" + std::to_string(stats.htmls.total) + "]";
        progress += " ";
        progress += "texts [" + std::to_string(stats.sanitized.current) + "/" + std::to_string(stats.sanitized.total) + "]";
        progress += " ";
        progress += "results: " + std::to_string(stats.results);
        progress += "\n";
        progress += chart;
        
        return progress;
❱

