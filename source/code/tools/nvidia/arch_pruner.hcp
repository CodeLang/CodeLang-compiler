class
❪string❫
❪vector❫
❪iostream❫
❪"code/utilities/formats/compression/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/formats/objects/cuda_arch_symbol_counter"❫
❪"code/utilities/filesystem/files/observers/filename_size_printer"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/random/files/random_files"❫
❪"code/utilities/formats/objects/cuda_arch_pruner"❫
❪"code/utilities/formats/objects/cuda_arch_prune_analyzer"❫
⚯
⚞⚟

◀public: static▶ void ☀Prune(Arch_Prune_Settings const& settings)❰

    
    Filename_Size_Printer::Print(settings.file_name);
    Unzip_Do_Rezip_TGZ(settings.file_name,[&](std::string const& unziped_area){
        auto objs = Recursively_Get_All_Paths_To_Static_Libraries_Of_Path(unziped_area);
        for (auto const& it: objs){
            //Cuda_Arch_Prune_Analyzer::Analyze_Via_Prunning(settings,unziped_area,it);
            
            Filename_Size_Printer::Print(it);
            Cuda_Arch_Pruner::Prune(it,settings.keep_archs,it);
            Filename_Size_Printer::Print(it);
        }
    });
    Filename_Size_Printer::Print(settings.file_name);
    
❱

