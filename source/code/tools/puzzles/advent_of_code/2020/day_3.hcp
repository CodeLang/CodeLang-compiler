class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    Point pos;
    auto grid = String_Grid_Builder::Create_Character_Grid_From_Lines(lines);
    auto height = grid.size();
    auto width = grid[0].size();
    
    auto movements = Get_Movements();
    
    int total=0;
    
    while(true){
        Point_Mover::Move_In_Direction(pos,movements);
        
        //wrap in grid
        if (pos.x >= width){
            pos.x -= width;
        }
        
        if (pos.y < height){
            auto element = grid[pos.y][pos.x];
            if (element == "#"){
                ++total;
            }
        }
        
        if (pos.y >= height){
            break;
        }
    }
    
    
    std::cout << total << std::endl;
❱

◀private: static▶ Compass_Direction_Diagnonal_Movements ☀Get_Movements() ❰
    Compass_Direction_Diagnonal_Movements results;
    Compass_Direction_Diagnonal_Movement x;
    
    x.magnitude = 3;
    x.direction = Compass_Direction_Diagnonal::EAST;
    results.movements.emplace_back(x);
    
    x.magnitude = 1;
    x.direction = Compass_Direction_Diagnonal::SOUTH;
    results.movements.emplace_back(x);
    return results;
❱

◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰
❱