class
❪vector❫
❪string❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/string_grid/string_grid_builder"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movement"❫
❪"code/utilities/data_structures/compass_directions/compass_direction_diagnonal_movements"❫
⚯
❪"code/utilities/data_structures/point/point"❫
❪"code/utilities/data_structures/point/point_mover"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
⚞⚟

◀public: static▶ void ☀Part_1(std::vector<std::string> lines) ❰

    auto passports = Split_By_Spaces(lines);
    int total = 0;
    for (auto const& it: passports){
        
        std::string all;
        for (auto const& x: it){
            all += x + " ";
        }
        auto key_vals = Split_By_Spaces(all);
        if (Check(key_vals)){
            total += 1;
        }
    }
    std::cout << total << std::endl;
    
❱
◀public: static▶ bool ☀Check(std::vector<std::string> const& key_vals) ❰

    bool byr = false;
    bool iyr = false;
    bool eyr = false;
    bool hgt = false;
    bool hcl = false;
    bool ecl = false;
    bool pid = false;

    for (auto it: key_vals){
        trim(it);
        auto key = Split_Into_Parts_From_Colon(it)[0];
        if (key == "byr"){
            byr = true;
        }
        if (key == "iyr"){
            iyr = true;
        }
        if (key == "eyr"){
            eyr = true;
        }
        if (key == "hgt"){
            hgt = true;
        }
        if (key == "hcl"){
            hcl = true;
        }
        if (key == "ecl"){
            ecl = true;
        }
        if (key == "pid"){
            pid = true;
        }
    }
    
    return     byr &&
    iyr &&
    eyr &&
    hgt &&
    hcl &&
    ecl &&
    pid;

❱

◀public: static▶ void ☀Part_2(std::vector<std::string> lines) ❰
❱