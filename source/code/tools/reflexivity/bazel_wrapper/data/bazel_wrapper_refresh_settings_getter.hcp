class
❪vector❫
❪string❫
❪"code/tools/reflexivity/bazel_wrapper/data/bazel_wrapper_refresh_settings"❫
⚯

⚞⚟

◀public: static▶ Bazel_Wrapper_Refresh_Settings ☀Get()❰
    Bazel_Wrapper_Refresh_Settings settings;
    
    
    //known bazel versions
    Add_Linux_x86_64(settings.infos,"2.2.0","b2f002ea0e6194a181af6ac84cd94bd8dc797722eb2354690bebac92dda233ff");
    Add_Linux_x86_64(settings.infos,"3.0.0","3efb903ef885339a271445a9940642df704f97297fbe268f131d4fe36b02ea80");
    Add_Linux_x86_64(settings.infos,"3.1.0","753434f4fa730266cf5ce21d1fdd425e1e167dd9347ad3e8adc19e8c0d54edca");
    Add_Linux_x86_64(settings.infos,"3.2.0","db0201df83ae6a9f6c19a9103edaeb6b7ce228040244b90a6e3b1c85da4a2152");
    Add_Linux_x86_64(settings.infos,"3.3.0","427d2262ac0b2e696294bef856176fda48d902833a6c75426164e4aa9d8c8d37");
    Add_Linux_x86_64(settings.infos,"3.3.1","7d9e80bddd2cbfbd83da415373e75b9a77cf9f7c784f74382b8f9f8b412bde20");
    Add_Linux_x86_64(settings.infos,"3.4.0","07dc9c37231ff9eae9f1c767e03cfb6b67fcfb6e43cbef3f4a4aa9279dc2fcb6");
    Add_Linux_x86_64(settings.infos,"3.4.1","1a64c807716e10c872f1618852d95f4893d81667fe6e691ef696489103c9b460");
    
    //choose
    settings.bazel_version = "3.4.1";
    
    
    //programs needed by bazel wrapper for bootstrapping
    Add_Needed_Programs(settings.programs_needed,"command");
    Add_Needed_Programs(settings.programs_needed,"echo");
    Add_Needed_Programs(settings.programs_needed,"exit");
    Add_Needed_Programs(settings.programs_needed,"mkdir");
    Add_Needed_Programs(settings.programs_needed,"rm");
    Add_Needed_Programs(settings.programs_needed,"chmod");
    Add_Needed_Programs(settings.programs_needed,"trap");
    Add_Needed_Programs(settings.programs_needed,"tty");
    Add_Needed_Programs(settings.programs_needed,"wget");
    Add_Needed_Programs(settings.programs_needed,"sha256sum");
    
    return settings;
❱

◀private: static▶ void ☀Add_Linux_x86_64(std::vector<Bazel_Version_Info> & infos, std::string const& version, std::string const& hash)❰
    Bazel_Version_Info x;
    x.os = "linux";
    x.arch = "x86_64";
    x.bazel_version = version;
    x.sha256 = hash;
    
    infos.emplace_back(x);
❱

◀private: static▶ void ☀Add_Needed_Programs(std::vector<std::string> & programs_needed, std::string const& program)❰
    programs_needed.emplace_back(program);
❱