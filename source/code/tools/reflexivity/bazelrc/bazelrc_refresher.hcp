class
❪string❫
❪vector❫
❪"code/reflexivity/docker/data/apt_get_command"❫
❪"code/reflexivity/docker/data/docker_settings"❫
⚯
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/transcompilers/unilang/file_extension_getter/file_extension_getter"❫
❪"code/reflexivity/docker/data/docker_settings_getter"❫
❪"code/reflexivity/comment/generated_comment_getter"❫
⚞⚟

◀public: static▶ void ☀Refresh()❰

    Write_To_File(Get_Bazelrc_File_Path(),Create_Bazelrc_Contents());

❱

◀private: static▶ std::string ☀Create_Bazelrc_Contents()❰
    std::string str;
    Append_With_Newline(str,Generated_Comment_Getter::Get());
    
    //backwards compatibility junk
    //TODO(thickey): fix parts of the repo to delete these:
    Append_With_Newline(str,"build --incompatible_bzl_disallow_load_after_statement=false");
    //Append_With_Newline(str,"build --incompatible_no_transitive_loads=false");
    Append_With_Newline(str,"build --incompatible_disable_crosstool_file=false");
    Append_With_Newline(str,"build --incompatible_disable_deprecated_attr_params=false");
    Append_With_Newline(str,"build --incompatible_use_python_toolchains=false");
    Append_With_Newline(str,"build --incompatible_use_specific_tool_files=false");
    
    
    //hermetic toolchain
    //we don't need to pass crosstool_top anymore and it will one day be deprecated
    //Append_With_Newline(str,"build --crosstool_top=@llvm_toolchain//:toolchain");
    
    //instead we allow cc_toolchain resolution to choose the correct toolchain that was registered through bazel rules
    //one day this flag will be the default and we can remove it here as well
    //TODO(thickey): remove flag
    Append_With_Newline(str,"build --incompatible_enable_cc_toolchain_resolution");
    
    //faster to build here?
    //codeship does not have this.
    //https://app.codeship.com/projects/340017/builds/44589606?pipeline=53b461c2-ec88-4fb5-9c37-c59f7a29c29f
    //Append_With_Newline(str,"build --experimental_sandbox_base=/run/shm");
    
    return str;
❱

◀private: static▶ std::string ☀Get_Bazelrc_File_Path()❰
    std::string f = Bazel_Derived_Root_Of_Repo();
    f += "source/.bazelrc";
    return f;
❱