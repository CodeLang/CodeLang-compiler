class
❪string❫
❪vector❫
❪iostream❫
❪"code/tools/reflexivity/deps_define/data/dependency_specifications"❫
⚯
⚞⚟


◀public: static▶ Dependency_Specifications ☀Get_All_Bazel_Tests()❰
    Dependency_Specifications x;
    
// # TODO(thickey): we can't trust that these git repos will always exist.  
// # make copies and store them somewhere else.  Give multiple mirrors
// # for the urls.  the first url can be where we host it.
// # Also, github is a single source of failure here.  
// # Its probably okay to clone on github and use that as a mirror,
// # but we may also want additional hosting elsewhere (ex: buildfactory)
// # we may want to set up our own servers in case of another world war and we lose github

// # TODO(thickey): as a rule of thumb, we do not want patch files.  
// # when a patch file is created, we need to work with the original author to merge it back.
// # In the worst case scenarios where an agreement cannot be made with the author, or
// # the original author is unresponsive, we can fork the project.
    
//libraries to add:
//https://github.com/facebook/folly
//https://github.com/preshing/junction
//https://github.com/twitter/vireo
//https://github.com/rbock/sqlpp11
//https://github.com/godotengine/godot
//https://github.com/p-ranav/tabulate
// #gmp (this was hard)
// #pretty_printers
// #pstreams
// #add-range-v3 library
// #add klmr-cpp11-range
//https://github.com/jupp0r/prometheus-cpp
    
// #need to make hermetic for imgui
// #sudo apt-get install libsdl2-dev
// #sudo apt-get install libsdl1.2-dev
// #sudo apt install libjpeg9-dev libwebp-dev libtiff5-dev libsdl2-image-dev libsdl2-image-2.0-0

//need to make hermetic for xdo
// #sudo apt-get install xdotool
// #sudo apt-get install libxdo-dev
// #sudo apt-get install libxtst-dev
// # http_archive(
// #     name = "xdo",
// #     build_file = "//bazel/deps/build_files/xdo:xdo.BUILD",
// #     commit = "08c8e2d6cad60a69ce415499e34865157a1b66fd",
// #     remote = "https://github.com/jordansissel/xdotool.git",
// # )


    
    //Build Systems
    x.specs.emplace_back(Bazel());
    
    //C++
    x.specs.emplace_back(Boost());
    x.specs.emplace_back(Abseil());
    x.specs.emplace_back(NameOf());
    x.specs.emplace_back(Stb());
    x.specs.emplace_back(Backward_Cpp());
    
    //Emscripten
    x.specs.emplace_back(Emscripten());
    x.specs.emplace_back(Emscripten_Clang());
    
    //Testing
    x.specs.emplace_back(Gtest());
    x.specs.emplace_back(Lcov());
    
    //Benchmarking
    x.specs.emplace_back(Google_Benchmark());
    x.specs.emplace_back(Gperf());
    x.specs.emplace_back(Cpuinfo());
    x.specs.emplace_back(Asmjit());
    x.specs.emplace_back(Nasm());
    
    //Timing
    x.specs.emplace_back(Stopwatch());
    x.specs.emplace_back(TimerCpp());
    x.specs.emplace_back(Asap());
    
    //Logging
    x.specs.emplace_back(Spdlog());
    
    //Serialization / Parsers / Reflection
    x.specs.emplace_back(RapidJson());
    x.specs.emplace_back(NlohmannJson());
    x.specs.emplace_back(YamlCpp());
    x.specs.emplace_back(Captnproto());
    x.specs.emplace_back(Protobuf());
    x.specs.emplace_back(Apache_Thrift());
    x.specs.emplace_back(Cereal());
    x.specs.emplace_back(Expat());
    x.specs.emplace_back(Flatbuffers());
    x.specs.emplace_back(Snappy());
    x.specs.emplace_back(Csv());
    x.specs.emplace_back(SqliteOrm());
    x.specs.emplace_back(Pegtl());
    x.specs.emplace_back(tomlplusplus());
    x.specs.emplace_back(visit_struct());
    
    //Debugging
    x.specs.emplace_back(painless());
    x.specs.emplace_back(dbg_macro());
    
    //Data Structures
    x.specs.emplace_back(Andres_Graph());
    x.specs.emplace_back(Cpp_Graph_Library());
    x.specs.emplace_back(Date());
    x.specs.emplace_back(MpmcQueue());
    x.specs.emplace_back(SpscQueue());
    x.specs.emplace_back(ConcurrentQueue());
    x.specs.emplace_back(BrainTree());
    x.specs.emplace_back(Forest());
    x.specs.emplace_back(Tree());
    x.specs.emplace_back(Color());
    x.specs.emplace_back(TinyColorMap());
    x.specs.emplace_back(IntervalTree());
    x.specs.emplace_back(Frozen());
    x.specs.emplace_back(stxxl());
    
    
    //Math
    x.specs.emplace_back(Gmp());
    x.specs.emplace_back(BigIntegerCPP());
    x.specs.emplace_back(Fxdiv());
    x.specs.emplace_back(Fp16());
    x.specs.emplace_back(Glm());
    
    //Games
    x.specs.emplace_back(Entt());
    x.specs.emplace_back(Corange());
    
    //Graphics
    //https://github.com/freedesktop/xcb-libxcb
    x.specs.emplace_back(XkbCommon());
    x.specs.emplace_back(X11());
    x.specs.emplace_back(Sdl2());
    x.specs.emplace_back(Sfml());
    x.specs.emplace_back(Glfw());
    x.specs.emplace_back(Imgui());
    x.specs.emplace_back(Cairo());
    x.specs.emplace_back(Lib_Png());
    x.specs.emplace_back(Lib_Jpeg());
    x.specs.emplace_back(GD());
    x.specs.emplace_back(Open_CV());
    x.specs.emplace_back(Open_CV_Test_Data());
    x.specs.emplace_back(Pixman());
    x.specs.emplace_back(Ncurses());
    x.specs.emplace_back(olcPixelGameEngine());
    x.specs.emplace_back(asciiArt());
    x.specs.emplace_back(magnum());
    
    //Font
    x.specs.emplace_back(Freetype2());
    x.specs.emplace_back(Font_Config());
    
    //Database
    x.specs.emplace_back(Sqlite3());
    x.specs.emplace_back(Soci());
    x.specs.emplace_back(Hiberlite());
    
    //Web Servers
    x.specs.emplace_back(Crow());
    x.specs.emplace_back(Cpp_Httplib());
    
    //Web Query
    x.specs.emplace_back(Cpr());
    x.specs.emplace_back(Zlib());
    x.specs.emplace_back(Open_SSL());
    x.specs.emplace_back(Curl());
    x.specs.emplace_back(Chrome_Drivers());
    x.specs.emplace_back(CxxUrl());
    
    //networking
    //https://github.com/librg/librg
    
    //CLI
    x.specs.emplace_back(Cli11());
    
    //Language Interop
    x.specs.emplace_back(Pybind11());
    
    //Threading / Workflow
    x.specs.emplace_back(Cpp_Taskflow());
    x.specs.emplace_back(Tbb());
    x.specs.emplace_back(Pthreadpool());
    x.specs.emplace_back(ThreadPool());
    
    //Security
    x.specs.emplace_back(Obfuscate());
    x.specs.emplace_back(HashLib4Cpp());
    
    //Compression
    x.specs.emplace_back(PicoSha2());
    x.specs.emplace_back(Miniz_Cpp());
    
    //Device Inputs
    x.specs.emplace_back(Getch());
    x.specs.emplace_back(Xorg_Xinput());
    
    //Natural Language
    x.specs.emplace_back(Stmr());
    x.specs.emplace_back(GloVe());
    x.specs.emplace_back(word2vec());
    
    //Audio / Sound
    x.specs.emplace_back(Openal_Soft());
    x.specs.emplace_back(Soloud());
    x.specs.emplace_back(AudioFile());
    x.specs.emplace_back(Wave());
    
    //Documentation
    x.specs.emplace_back(plantuml());
    
    
    //Other
    x.specs.emplace_back(Grpc());
    x.specs.emplace_back(Fmt());
    x.specs.emplace_back(Xdo());
    x.specs.emplace_back(Python3());
    x.specs.emplace_back(Tippecanoe());
    x.specs.emplace_back(Semver());
    x.specs.emplace_back(CppConsoleTable());
    x.specs.emplace_back(Tweeny());
    x.specs.emplace_back(Mustache());
    x.specs.emplace_back(LevenShtein());
    x.specs.emplace_back(Rang());
    x.specs.emplace_back(CrossGuid());
    x.specs.emplace_back(Dtl());
    
    //analyzing files
    x.specs.emplace_back(LibMagic());
    
    //analyzing system
    x.specs.emplace_back(InfoWare());
    
    
    //Programs (want to get library out of)
    x.specs.emplace_back(Fluxcapacitor());
    x.specs.emplace_back(Tardis());
    
    //Java Tools
    x.specs.emplace_back(Google_Java_Format());
    
    //Data Library
    x.specs.emplace_back(Chinese_Syllable_Sounds());
    x.specs.emplace_back(Scrabble_Words());
    
    //Assets
    x.specs.emplace_back(Fonts());
    x.specs.emplace_back(PuyoPuyo());
    x.specs.emplace_back(EnglishSounds());
    
    
    
    
    
    std::cout << x.specs.size() << std::endl;
    
    return x;
❱

◀private: static▶ Dependency_Specification ☀Bazel()❰
    Dependency_Specification spec;
    spec.lib_name = "bazel";
    Add_Unilang_Github_Mirror(spec,"bazel","2895cd5ce6797a22279dc7482926371ae9ea78b5","e3138b869f19c480c1bb28e553cfd7d67ecaf8d86df66ba70dc7e156b40c0aab");
    spec.patch_cmds.emplace_back("find . -name 'BUILD' -type f -delete");
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Google_Java_Format()❰
    Dependency_Specification spec;
    spec.lib_name = "google_java_format";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_SSL()❰
    Dependency_Specification spec;
    spec.lib_name = "openssl";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sqlite3()❰
    Dependency_Specification spec;
    spec.lib_name = "sqlite3";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gmp()❰
    Dependency_Specification spec;
    spec.lib_name = "gmp";
    return spec;
❱

◀private: static▶ Dependency_Specification ☀Boost()❰
    Dependency_Specification spec;
    spec.lib_name  = "boost";
    return spec; 
❱
◀private: static▶ Dependency_Specification ☀Abseil()❰
    Dependency_Specification spec;
    spec.lib_name = "abseil";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀NameOf()❰
    Dependency_Specification spec;
    spec.lib_name = "nameof";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stb()❰
    Dependency_Specification spec;
    spec.lib_name = "stb";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Backward_Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "backward_cpp";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Emscripten()❰
    Dependency_Specification spec;
    spec.lib_name = "emscripten";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Emscripten_Clang()❰
    Dependency_Specification spec;
    spec.lib_name = "emscripten_clang";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gtest()❰
    Dependency_Specification spec;
    spec.lib_name = "gtest";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lcov()❰
    Dependency_Specification spec;
    spec.lib_name = "lcov";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Google_Benchmark()❰
    Dependency_Specification spec;
    spec.lib_name = "google_benchmark";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Gperf()❰
    Dependency_Specification spec;
    spec.lib_name = "gperf";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpuinfo()❰
    Dependency_Specification spec;
    spec.lib_name = "cpuinfo";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Asmjit()❰
    Dependency_Specification spec;
    spec.lib_name = "asmjit";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Nasm()❰
    Dependency_Specification spec;
    spec.lib_name = "nasm";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stopwatch()❰
    Dependency_Specification spec;
    spec.lib_name = "stopwatch";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀TimerCpp()❰
    Dependency_Specification spec;
    spec.lib_name = "timercpp";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Asap()❰
    Dependency_Specification spec;
    spec.lib_name = "asap";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Spdlog()❰
    Dependency_Specification spec;
    spec.lib_name = "spdlog";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀RapidJson()❰
    Dependency_Specification spec;
    spec.lib_name = "rapid_json";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀NlohmannJson()❰
    Dependency_Specification spec;
    spec.lib_name = "nlohmann_json";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀YamlCpp()❰
    Dependency_Specification spec;
    spec.lib_name = "yaml_cpp";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Captnproto()❰
    Dependency_Specification spec;
    spec.lib_name = "captnproto";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Protobuf()❰
    Dependency_Specification spec;
    spec.lib_name = "protobuf";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Apache_Thrift()❰
    Dependency_Specification spec;
    spec.lib_name = "apache_thrift";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cereal()❰
    Dependency_Specification spec;
    spec.lib_name = "cereal";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Expat()❰
    Dependency_Specification spec;
    spec.lib_name = "expat";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Flatbuffers()❰
    Dependency_Specification spec;
    spec.lib_name = "flat_buffers";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Snappy()❰
    Dependency_Specification spec;
    spec.lib_name = "snappy";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Csv()❰
    Dependency_Specification spec;
    spec.lib_name = "csv";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SqliteOrm()❰
    Dependency_Specification spec;
    spec.lib_name = "sqlite_orm";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pegtl()❰
    Dependency_Specification spec;
    spec.lib_name = "pegtl";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Andres_Graph()❰
    Dependency_Specification spec;
    spec.lib_name = "andres_graph";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Graph_Library()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_graph_library";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Date()❰
    Dependency_Specification spec;
    spec.lib_name = "date";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀SpscQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "spsc_queue";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ConcurrentQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "concurrent_queue";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀MpmcQueue()❰
    Dependency_Specification spec;
    spec.lib_name = "mpmc_queue";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀BrainTree()❰
    Dependency_Specification spec;
    spec.lib_name = "brain_tree";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Forest()❰
    Dependency_Specification spec;
    spec.lib_name = "forest";
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tree()❰
    Dependency_Specification spec;
    spec.lib_name = "tree";
    Add_Unilang_Github_Mirror(spec,"tree.hh","edb44045df64efd72dc0dab97388915641987acd","2f38133e582abc484bdede9bde391d097ed15f4c348bb05c8476e5feecd4a96f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Color()❰
    Dependency_Specification spec;
    spec.lib_name = "color";
    Add_Unilang_Github_Mirror(spec,"color","41a786d1167b30324fa32382644039c3f6ccf4db","d13e9a7eb57c4dd479fcdbb80eb6e49bacf7afd423a9361375ced53a50b2b048");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀TinyColorMap()❰
    Dependency_Specification spec;
    spec.lib_name = "tinycolormap";
    Add_Unilang_Github_Mirror(spec,"tinycolormap","a1f736a31f8f8b71a986228a2ab0492730c1e807","3525d912824184f2519215e933757d30bc84d06b85b1ddc0b2ec262af15d41dc");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀IntervalTree()❰
    Dependency_Specification spec;
    spec.lib_name = "intervaltree";
    Add_Unilang_Github_Mirror(spec,"intervaltree","e8082c74a6f5c18de99d8b4cc4a55e2e62a1150d","32dcbabbfbd870dcfb64675b8d47fa6b718d4b87de6ebac9cbdc792d0fc182d4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀BigIntegerCPP()❰
    Dependency_Specification spec;
    spec.lib_name = "big_integer_cpp";
    Add_Unilang_Github_Mirror(spec,"BigIntegerCPP","79e7b023bf5157c0f8d308d3791cf3b081d1e156","1c9505406accb1216947ca60299ed70726eade7c9458c7c7f94ca2aea68d288e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fxdiv()❰
    Dependency_Specification spec;
    spec.lib_name = "fx_div";
    Add_Unilang_Github_Mirror(spec,"FXdiv","f8c5354679ec2597792bc70a9e06eff50c508b9a","7d3215bea832fe77091ec5666200b91156df6724da1e348205078346325fc45e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fp16()❰
    Dependency_Specification spec;
    spec.lib_name = "fp16";
    Add_Unilang_Github_Mirror(spec,"FP16","febbb1c163726b5db24bed55cc9dc42529068997","3e71681e0a67cd28552aa0bbb78ec6a6bd238216df15336dc1326280f7958de2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Glm()❰
    Dependency_Specification spec;
    spec.lib_name = "glm";
    Add_Unilang_Github_Mirror(spec,"glm","67d647ae4645a9787c1f87efa3279e8ec5f506e3","51b79f24e75bc239dcec184f0c349b093482ddf12cbd3e255776106ac083e4ff");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Entt()❰
    Dependency_Specification spec;
    spec.lib_name = "entt";
    Add_Unilang_Github_Mirror(spec,"entt","688e6ad79fcc443d395351f15e447005b668d8dc","0d8466250334485374c38c92d1cb822932898119ffb729fd41c3e84e6e99c6e7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Corange()❰
    Dependency_Specification spec;
    spec.lib_name = "corange";
    Add_Unilang_Github_Mirror(spec,"Corange","3c99c2e25c338b27ee831406aaed0159ec3a77a2","5a57e417b722d67b6297419e156f179aa1968186deeff306462447d66e454b7a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀XkbCommon()❰
    Dependency_Specification spec;
    spec.lib_name = "xkbcommon";
    Add_Unilang_Github_Mirror(spec,"libxkbcommon","bdb009bb0cd925b062ec922bf031042d6209eb29","bb9b5784267331ac5bb1eed7c38d42ce85e545d7bf63168094c71fbb32093681");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀X11()❰
    Dependency_Specification spec;
    spec.lib_name = "x11";
    Add_Unilang_Github_Mirror(spec,"libX11","edc7680ed5a03cedb5facf14693823455e12c29c","f57a916500625261239fdbb0d712aaa2aff0c45c562634b2977164f41895cc57");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sdl2()❰
    Dependency_Specification spec;
    spec.lib_name = "sdl2";
    Add_Unilang_Github_Mirror(spec,"SDL-mirror","36ea2544f08508f42d5193e175d3a269c3b95bdf","d532a339c0d33c4a090983a32017798e9108873dce445e4b617a0f726f90d081");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Sfml()❰
    Dependency_Specification spec;
    spec.lib_name = "sfml";
    Add_Unilang_Github_Mirror(spec,"SFML","257e50beb886f1edebeebbde1903169da4eca39f","6b013624aa9a916da2d37180772031e963098494538f59a14f40e00db23c9077");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Glfw()❰
    Dependency_Specification spec;
    spec.lib_name = "glfw";
    Add_Unilang_Github_Mirror(spec,"glfw","7c3aaf80651070cb2de14cac2f0366f939a1f514","e9170527b057c8c3b78c1c5955d7a5b699da4a29a7db8e7fe45c76eeec5e8a8b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Imgui()❰
    Dependency_Specification spec;
    spec.lib_name = "imgui";
    Add_Unilang_Github_Mirror(spec,"imgui","9da48c16c5eeb8ea98e89951c83fab0f9d2b037b","1db98db987e6ed67b1932bbf825e722d8d7f024471e4be54b815d16a2c6484ba");
    
    //Apparently its pretty easy to come up with too many vertexes in the buffer.
    //Changing this is the author's suggestion, and the code even has a comment to do this.
    //these use some imconfig.h file to overwrite, but this is fine too.
    spec.patch_cmds.emplace_back("find . -type f -name '*.h' -exec sed -i 's/typedef unsigned short ImDrawIdx;/typedef unsigned int ImDrawIdx;/g' {} \\;");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cairo()❰
    Dependency_Specification spec;
    spec.lib_name = "cairo";
    Add_Unilang_Github_Mirror(spec,"cairo","cbc241d338ca7bf927a7cfe23cb15c58491373e0","b1d1344b33f72fc239227e58d98acbe500946a520671e239ae3de89c7a72027d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Png()❰
    Dependency_Specification spec;
    spec.lib_name = "libpng";
    Add_Unilang_Github_Mirror(spec,"libpng","301f7a14295a3bdfaf406dbb5004d0784dc137ea","16ca00dca64c72f293a27af290a349a0d9ae2ef7336f6bd9caae612f67ffba8b");
    spec.patch_files.emplace_back("//bazel/deps/build_files:libpng.patch");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Lib_Jpeg()❰
    Dependency_Specification spec;
    spec.lib_name = "libjpeg";
    Add_Unilang_Github_Mirror(spec,"libjpeg","6c0fcb8ddee365e7abc4d332662b06900612e923","daf72156ce51b85b42e3387c46b7f79e7391f84452ad6e62b5524026c25119e4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GD()❰
    Dependency_Specification spec;
    spec.lib_name = "libgd";
    Add_Unilang_Github_Mirror(spec,"libgd","e0cb1b76c305db68b251fe782faa12da5d357593","ef0bb94002d1fbc5e593c517ea353d3c039b92d20024fdf4bacb1cdc26c0dd9f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV()❰
    Dependency_Specification spec;
    spec.lib_name = "opencv";
    Add_Unilang_Github_Mirror(spec,"opencv","8bde6aea4ba19454554aa008922d967b552e79cc","be16e2ed051c7d3f9817ace8cd602087f5bc86ff63d2745f5d69b3e506a4ea28");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Open_CV_Test_Data()❰
    Dependency_Specification spec;
    spec.lib_name = "opencv_extra";
    Add_Unilang_Github_Mirror(spec,"opencv_extra","b540994702a410614ac7bf00ecd8a790eff6d0fd","97617893f02afa2eb614ef354513f385c94767c5d1ba71eea148747f13ac838c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pixman()❰
    Dependency_Specification spec;
    spec.lib_name = "pixman";
    Add_Unilang_Github_Mirror(spec,"pixman","6f8b8b383f3e9c2c8b9ec22fac73e9e84d0232d3","201917adc8a5be5074f9bddc5c3f5e514949f7fea5a801d04e3fb759af6c990f");
    spec.patch_files.emplace_back("//bazel/deps/build_files:pixman.patch");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Ncurses()❰
    Dependency_Specification spec;
    spec.lib_name = "ncurses";
    Add_Unilang_Github_Mirror(spec,"ncurses","9193d076200365eeb5ff932acdbbdcc5e452292c","a76cc838501ae16392bf748242fabe1108a479a9c5e8a6f905954e619c919f2a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Freetype2()❰
    Dependency_Specification spec;
    spec.lib_name = "freetype2";
    Add_Unilang_Github_Mirror(spec,"freetype2","fbbcf50367403a6316a013b51690071198962920","21773ee5ff55565cda9e9beae39eb36d966079dd1c73085320c0c73328e728a7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Font_Config()❰
    Dependency_Specification spec;
    spec.lib_name = "fontconfig";
    Add_Unilang_Github_Mirror(spec,"fontconfig","277eca11e8f619498e6123001f22bd33d1674df2","711f7fe1c4604f2d0cd8397d18ed70dede07b86a6057009b790395a8f91f558c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Soci()❰
    Dependency_Specification spec;
    spec.lib_name = "soci";
    Add_Unilang_Github_Mirror(spec,"soci","04e1870294918d20761736743bb6136314c42dd5","9c3b350a30795d80e95a297cd2df265b4fb8ec447ab9616a72b2650f99e983a3");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Hiberlite()❰
    Dependency_Specification spec;
    spec.lib_name = "hiberlite";
    Add_Unilang_Github_Mirror(spec,"hiberlite","ffd558a4917b33668d1001b4bba8e11b508be06a","6b290db813962e2bfc571d16d8d346916cf923cef128205ff18478e37d006586");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpr()❰
    Dependency_Specification spec;
    spec.lib_name = "cpr";
    Add_Unilang_Github_Mirror(spec,"cpr","3d14e61ed247a90a07db26fb107beb3086a035d6","656ee0b0d6d79280a0aa6f58c08bb2afdc0b67fd745c3c405b3453bd195e14dd");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Zlib()❰
    Dependency_Specification spec;
    spec.lib_name = "zlib";
    Add_Unilang_Github_Mirror(spec,"zlib","cacf7f1d4e3d44d871b605da3b647f07d718623f","6d4d6640ca3121620995ee255945161821218752b551a1a180f4215f7d124d45");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Curl()❰
    Dependency_Specification spec;
    spec.lib_name = "curl";
    Add_Unilang_Github_Mirror(spec,"curl","11974ac859c5d82def59e837e0db56fef7f6794e","3f6c54fb691853e9b00ed484ea2f52566c7af172ecd48cd9eeec8041a9ac679b");
    spec.patch_files.emplace_back("//bazel/deps/build_files:curl.patch");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Chrome_Drivers()❰
    Dependency_Specification spec;
    spec.lib_name = "chrome_drivers";
    Add_Unilang_Github_Mirror(spec,"chrome-drivers","e47bfe70331bcd06420eadcb64a374fbd98bca18","ff116b6d354f97c7e789a50ca7dae15ae1899e5627c38551860ccbede13fb5c6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CxxUrl()❰
    Dependency_Specification spec;
    spec.lib_name = "cxx_url";
    Add_Unilang_Github_Mirror(spec,"CxxUrl","7e7af0ce97b1021eaaf687ced1f65a5bd3e7d548","9b4ba36ee6579be8c367659ea3768ddb7745a9da00d1ac1e5cfd996bf5d40511");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Crow()❰
    Dependency_Specification spec;
    spec.lib_name = "crow";
    Add_Unilang_Github_Mirror(spec,"crow","49edf898a5b9a39a0d69072cc2434c4f23692908","cd2c780b57c54a42f964ef7e6eaee0cd95f3fee97466c23d5dab87fd80cde696");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Httplib()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_httplib";
    Add_Unilang_Github_Mirror(spec,"cpp-httplib","22615f96828a72d84019b748ede01fa11d905977","166103fc4281a438e1f5b9611981f2351ab12136086404895fe5d22e5db3aff5");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cli11()❰
    Dependency_Specification spec;
    spec.lib_name = "cli11";
    Add_Unilang_Github_Mirror(spec,"cli11","1a1cde98f5e8868ca2f17707ab84dcae5718110e","58e542aa42b31119569463ee3990a9b0931e0a4a8bd0da9aa6d3206ebc5fd159");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pybind11()❰
    Dependency_Specification spec;
    spec.lib_name = "pybind11";
    Add_Unilang_Github_Mirror(spec,"pybind11","25abf7efba0b2990f5a6dfb0a31bc65c0f2f4d17","1a1ccf8779332a7d6d0db9034d42df188867cbaf52eb71d74451f79aa8ce2040");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Cpp_Taskflow()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_taskflow";
    Add_Unilang_Github_Mirror(spec,"cpp-taskflow","67fc5c1cab8b8f72729ca5b0a97f7adb466c9f8a","d68ccaf99903cd148946ef3b78ceeb0278962ec7192d0cc739554bb1e1c5a697");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tbb()❰
    Dependency_Specification spec;
    spec.lib_name = "tbb";
    Add_Unilang_Github_Mirror(spec,"tbb","314792356bf75f4a190277536aea543b9b6b310b","1a3fc4ff6932e524c8afc3461b350851977fc4bfeb498411020c15dd183e2c8a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Pthreadpool()❰
    Dependency_Specification spec;
    spec.lib_name = "pthreadpool";
    Add_Unilang_Github_Mirror(spec,"pthreadpool","6673a4c71fe35e077c6843a74017d9c25610c537","7a523b439a996e2f4376169279409059101f2f71eed4fcc915971368990504a0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀ThreadPool()❰
    Dependency_Specification spec;
    spec.lib_name = "threadpool";
    Add_Unilang_Github_Mirror(spec,"threadpool","06e635dff22c9d359dfb93bc535a460774dc7319","44e7d6de0ef5380b86dfea74bbd53545319cdc06a50d7a1095b04d8a949242c2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Obfuscate()❰
    Dependency_Specification spec;
    spec.lib_name = "obfuscate";
    Add_Unilang_Github_Mirror(spec,"Obfuscate","88915d0afa46448570207e36aa8cc5f714709c50","fda8221e08853a2d15e4c9004ceaf96ecb0fd5f86830d48dff0b218c6fc63353");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀HashLib4Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "HashLib4CPP";
    Add_Unilang_Github_Mirror(spec,"HashLib4CPP","ec6c056df3a9093e731d9a3d60e429554783089e","b2bf7eec9cbe593b16104ffe9e200f51b33fa0e70b10a047cc9c90b17d5aa4ce");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Grpc()❰
    Dependency_Specification spec;
    spec.lib_name = "grpc";
    Add_Unilang_Github_Mirror(spec,"grpc","d6e8c4fdb1c851e48b343fcd82b401a51fd192b3","fbf6d2a560176eb5e5fb7402257da2c73230692df7c3d9a814fa890c7ef9e180");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fmt()❰
    Dependency_Specification spec;
    spec.lib_name = "fmt";
    Add_Unilang_Github_Mirror(spec,"fmt","187bd1b8b2392d565d573c0984d0edd57e20ac8d","f80e9325155478455260d8ebfc803ba1685302cd0303e9c706bd657330ab070a");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xdo()❰
    Dependency_Specification spec;
    spec.lib_name = "xdo";
    Add_Unilang_Github_Mirror(spec,"xdo","dc34b20e6e8ddb43d6d2d7fa1d2b25be4d83b83a","e64cac9d49d1f67e2aa54dcd4352bb1b4f27323778612cb9ad028b3dfc1a50b2");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Python3()❰
    Dependency_Specification spec;
    spec.lib_name = "python3";
    Add_Unilang_Github_Mirror(spec,"python3","7f755fe87d217177603a27d9dcc2fedc979f0f1a","36592ee2910b399c68bf0ddad1625f2c6a359ab9a8253d676d44531500e475d4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tippecanoe()❰
    Dependency_Specification spec;
    spec.lib_name = "tippecanoe";
    Add_Unilang_Github_Mirror(spec,"tippecanoe","a17bd79f7788952d8ecc046c4b47315640f92d93","9169a734cebd6d541e57f0fba98c7ef1d76b9afd9eb335f538d803e847bc41b4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Semver()❰
    Dependency_Specification spec;
    spec.lib_name = "semver";
    Add_Unilang_Github_Mirror(spec,"semver","e19dee33b26049a85427ad187934f15409b237d0","31057740ff329914961566dc517f17ba431581b9ca01f9e856c1d5fc0bff1539");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CppConsoleTable()❰
    Dependency_Specification spec;
    spec.lib_name = "cpp_console_table";
    Add_Unilang_Github_Mirror(spec,"CppConsoleTable","958478a211bcb4d2506243c63a34445eb2e13b5d","8e4f9edc7f6fd3f2de3f2020c8ef51098c35c365e5f4a3670ee279065b96f93b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tweeny()❰
    Dependency_Specification spec;
    spec.lib_name = "tweeny";
    Add_Unilang_Github_Mirror(spec,"tweeny","07afa4d71627030b25b470fff545516d5fc59c47","449f62da783bc47b2ebe91912183f022967f4f7bf1ccfdebe47ace3528f8c2e7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Mustache()❰
    Dependency_Specification spec;
    spec.lib_name = "Mustache";
    Add_Unilang_Github_Mirror(spec,"Mustache","c34f602c8014677da7e6bec48b8e913e832a6868","cf568d7c56ed17ddcbcf40664a8303a24ba868c30b8916d3490bec5af77e33f8");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀LevenShtein()❰
    Dependency_Specification spec;
    spec.lib_name = "levenshtein";
    Add_Unilang_Github_Mirror(spec,"levenshtein.c","2091be3b96fdd093062ebccdb5518bbdfdf4d7ad","f60d78239d7dce4e2e32943295044b459fe17af06fdfcf8f2b429b4c1969ad0f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Rang()❰
    Dependency_Specification spec;
    spec.lib_name = "rang";
    Add_Unilang_Github_Mirror(spec,"rang","cabe04d6d6b05356fa8f9741704924788f0dd762","1f1cdf9016af45fbb37c8992041547c8ccc1edf2fc04d121d86c894c0e45a8b1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀CrossGuid()❰
    Dependency_Specification spec;
    spec.lib_name = "crossguid";
    Add_Unilang_Github_Mirror(spec,"crossguid","ca1bf4b810e2d188d04cb6286f957008ee1b7681","6be27e0b3a4907f0cd3cfadec255ee1b925569e1bd06e67a4d2f4267299b69c4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Dtl()❰
    Dependency_Specification spec;
    spec.lib_name = "dtl";
    Add_Unilang_Github_Mirror(spec,"dtl","6b030d6397909e7658cf785f369f647f40c046c1","5ea614993385b986a4d4c2b88f22cc07dfbd92ce725cfafdbf63e6f4bb8e8a0e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fluxcapacitor()❰
    Dependency_Specification spec;
    spec.lib_name = "fluxcapacitor";
    Add_Unilang_Github_Mirror(spec,"fluxcapacitor","f6c7f0775597c1141e718ce32bf79268ac8c33ef","78e396bb58804b5f6728578392abc489048b4ee6d1fb6e351f506ebab451bde1");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Tardis()❰
    Dependency_Specification spec;
    spec.lib_name = "tardis";
    Add_Unilang_Github_Mirror(spec,"tardis","53b6143ed70a5657139c2db7f73b93d4674cf163","e34291b8f07926795fe2d1e5a575b7f9a06af44f64e21f4051fc6da5e7a2b6a7");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PicoSha2()❰
    Dependency_Specification spec;
    spec.lib_name = "picosha2";
    Add_Unilang_Github_Mirror(spec,"PicoSHA2","b699e6c900be6e00152db5a3d123c1db42ea13d0","b2866ef6b22e4562a4cbec6aa2510e74edd34a4889ac952b09c2acfa7bb8f619");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Miniz_Cpp()❰
    Dependency_Specification spec;
    spec.lib_name = "miniz_cpp";
    Add_Unilang_Github_Mirror(spec,"miniz_cpp","052335e4f7773368df07b26d2baedb0e6d4dbd38","6f0994a0ef9fb95ed8cf12aa36ae6fd6e99e087b384a155b6a0344a763424fc5");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Getch()❰
    Dependency_Specification spec;
    spec.lib_name = "getch";
    Add_Unilang_Github_Mirror(spec,"simple-getch","16c0dc6b00c4decb71b82b26ff082ead236a0058","38f05f2e3d7db2440227a9f55ae0e979a983559ae107d8db6392668ebb81b12d");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Xorg_Xinput()❰
    Dependency_Specification spec;
    spec.lib_name = "xorg_xinput";
    Add_Unilang_Github_Mirror(spec,"xorg-xinput","32314d73b811fff16a11c402778869ba4525e59b","e574041f0997511519137ba290cda39884bc490b0e991ce4447d37112d1becdb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Stmr()❰
    Dependency_Specification spec;
    spec.lib_name = "stmr";
    Add_Unilang_Github_Mirror(spec,"stmr.c","236c5862e534f3426177267da76ea507bc872c9c","90e134d6de671de0faa0a261f3f32945779f612ef0a8294236dcc2d88f00c9a9");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Openal_Soft()❰
    Dependency_Specification spec;
    spec.lib_name = "openal_soft";
    Add_Unilang_Github_Mirror(spec,"openal-soft","024d5d900aa7f9e3435459b0a8cfe354dc8e21fd","0234a10ea8c593d3b362ccc9a0b98c86723f455ea3ddb10175a78712ac713ac0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Soloud()❰
    Dependency_Specification spec;
    spec.lib_name = "soloud";
    Add_Unilang_Github_Mirror(spec,"soloud","6ee8ffb91a02764c7b8f331ee2177096d46bdd7c","3b87374dfa5da58a6ebca6a23280fa5519728b7fb2607e4037988cabe7dbdb2c");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀LibMagic()❰
    Dependency_Specification spec;
    spec.lib_name = "libmagic";
    Add_Unilang_Github_Mirror(spec,"libmagic","f3f079e766b5dceea1850b55bcc59ea6249a94f1","cd8133c5f38b8c91c1e4d49aa9ef23f14f15d5f8986a3616c7516532d670ac1f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Chinese_Syllable_Sounds()❰
    Dependency_Specification spec;
    spec.lib_name = "chinese_syllable_sounds";
    Add_Unilang_Github_Mirror(spec,"chinese_syllable_sounds","042305a69752a5beef8e6e0f66942edc370f7dcc","52849b2317e897ba333a9ae0dd55f7187a7198619fab74e555e9919c750942a0");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Scrabble_Words()❰
    Dependency_Specification spec;
    spec.lib_name = "scrabble_words";
    Add_Unilang_Github_Mirror(spec,"scrabble_words","28a758a38c44baa5cd299d857dc3955bb0dbb9bf","42514a4e7d409e8ed45fbfb13539a7d1d87693e4e1d78c92531e4f24766c42c4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀GloVe()❰
    Dependency_Specification spec;
    spec.lib_name = "GloVe";
    Add_Unilang_Github_Mirror(spec,"GloVe","afd83fbf62b676d339c93639af1312b1b7626b53","795ea4dcf4a3baf23947fbb0623ae1c0a763f43e9a974e33be4326ce92a5ead4");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀word2vec()❰
    Dependency_Specification spec;
    spec.lib_name = "word2vec";
    Add_Unilang_Github_Mirror(spec,"word2vec","9b8b58001ba5d58babe1c62327a8501b62cd6179","0f62348fc0db2719a6a668e1f6bd15f412b2d30f2fa3e09f2d560a5ca4fc1849");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Fonts()❰
    Dependency_Specification spec;
    spec.lib_name = "fonts";
    Add_Unilang_Github_Mirror(spec,"fonts","c1bdb6687eb9e25488c01a0127065d36256e8ebb","b4cc6392e0449b095df2f35fea9af6c72e6ef91937248ac78ae899b64a94be4b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀PuyoPuyo()❰
    Dependency_Specification spec;
    spec.lib_name = "PuyoPuyoAssets";
    Add_Unilang_Github_Mirror(spec,"PuyoPuyoAssets","c44e7bf9cff612fb63948fa96c51ff13a2ac8e41","8acfbf5b95c0520df76370d481d2898e9c7f0e2233232694c5105f12644a572b");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀EnglishSounds()❰
    Dependency_Specification spec;
    spec.lib_name = "english_sounds";
    Add_Unilang_Github_Mirror(spec,"english_sounds","0fdbe05b76b93732c97573148412a2bfbc4bd7fa","b30fd69cbcbf9afef6b6bb92d7729eb9f809f3436b558cfff38689a263053335");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀olcPixelGameEngine()❰
    Dependency_Specification spec;
    spec.lib_name = "olcPixelGameEngine";
    Add_Unilang_Github_Mirror(spec,"olcPixelGameEngine","8418b7d616c417ea46129d981380046004804fb3","ab65c698e5254ce12217d817750d1b1aa0a3720abb7178ed06419ee8cf7df25e");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀asciiArt()❰
    Dependency_Specification spec;
    spec.lib_name = "ascii_art";
    Add_Unilang_Github_Mirror(spec,"ascii_art","fede354e511b5be12726a67abaa3d561ffc763db","f9c39de719465379496a44f02e2886074af962a3d2497bb0a9d2fbb91af935cd");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀InfoWare()❰
    Dependency_Specification spec;
    spec.lib_name = "infoware";
    Add_Unilang_Github_Mirror(spec,"infoware","ea69ce1b25c3cec40424cc1b065fc6e820e6fa9","74f5851e80eee1a14d57fe9b153b17db2aa26e3e99e72896b0062c991f90a325");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Frozen()❰
    Dependency_Specification spec;
    spec.lib_name = "frozen";
    Add_Unilang_Github_Mirror(spec,"frozen","c5bfadab02a484c23794bc47fad9b0a811071ccb","b43a413ccc71af0dc39bdc5e76a07718ea308e387b1e72e4188f6596bc1d8da6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀stxxl()❰
    Dependency_Specification spec;
    spec.lib_name = "stxxl";
    Add_Unilang_Github_Mirror(spec,"stxxl","b9e44f0ecba7d7111fbb33f3330c3e53f2b75236","5350eba594f7899f125e607217662e4027b0c3cb78541b3964e02b9ac36e410f");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀magnum()❰
    Dependency_Specification spec;
    spec.lib_name = "magnum";
    Add_Unilang_Github_Mirror(spec,"magnum","6053cc6fc6761d8e7110d889f01924188106bef8","95cde5b70c1eceee047e9c263ca4dc9e5b8c8316b20f03aa2053b5c9a901f890");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀painless()❰
    Dependency_Specification spec;
    spec.lib_name = "painless";
    Add_Unilang_Github_Mirror(spec,"painless","4ab94066f73379389c08cd53cecb2545d7c52486","173dbc4bdeb113c3a78fed58807bd5ca4b94abfd304edc8b902f2711e8b35cef");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀dbg_macro()❰
    Dependency_Specification spec;
    spec.lib_name = "dbg-macro";
    Add_Unilang_Github_Mirror(spec,"dbg-macro","4f7a7a5555ccc3ef2bd41b8fba6acbfa9af701a8","570e0720c6c10583b85f7bc25f72f7c8a9cf4637456be2e5a835a598d8cb96a6");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀AudioFile()❰
    Dependency_Specification spec;
    spec.lib_name = "AudioFile";
    Add_Unilang_Github_Mirror(spec,"AudioFile","1c77de76f4f396f1019088f3cd9da5141148ee76","aa893a464546b686dd4d2555eafe2a0e9f4a96713328cf6e37603d7e9af02348");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀Wave()❰
    Dependency_Specification spec;
    spec.lib_name = "wave";
    Add_Unilang_Github_Mirror(spec,"wave","a782663d90b5a199e51ef59fc64bbe5a4aa02c38","ac7be574beaef4e08a1c050f46ebcc7c185722d6d8d0d75bfeaf952221500afb");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀plantuml()❰
    Dependency_Specification spec;
    spec.lib_name = "plantuml";
    Add_Unilang_Github_Mirror(spec,"plantuml","9ba7d08d5247cac5ec47a5f0052da3aaad0e8479","684149be1def4fcb1c146ca07cfad0d0baec68014dc689dc32212d0b29db2949");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀tomlplusplus()❰
    Dependency_Specification spec;
    spec.lib_name = "tomlplusplus";
    Add_Unilang_Github_Mirror(spec,"tomlplusplus","983e22978e8792f6248695047ad7cb892c112e18","a522eaa80a33d8c457a0b9cb3509f2e7c7a61d8e102f3c14696d5a7606a4e874");
    return spec;
❱
◀private: static▶ Dependency_Specification ☀visit_struct()❰
    Dependency_Specification spec;
    spec.lib_name = "visit_struct";
    Add_Unilang_Github_Mirror(spec,"visit_struct","8c91d2283c7050593df5b692a13cb0ea99ba81d5","ded2088b102ec566ba6db1b444e1ff823960d901d8bfd38156ef0211a5da38ea");
    return spec;
❱



◀private: static▶ void ☀Add_Unilang_Github_Mirror(Dependency_Specification & spec, std::string const& repo, std::string const& commit, std::string const& sha256)❰
    Dependency_Location location;
    location.owner_name = "Unilang";
    location.repo_name = repo;
    location.at_commit = commit;
    location.sha256 = sha256;
    spec.locations.emplace_back(location);
❱

◀private: static▶ void ☀Add_Original_Github_Mirror(Dependency_Specification & spec, std::string const& name, std::string const& repo, std::string const& commit, std::string const& sha256)❰
    Dependency_Location location;
    location.owner_name = name;
    location.repo_name = repo;
    location.at_commit = commit;
    location.sha256 = sha256;
    spec.locations.emplace_back(location);
❱