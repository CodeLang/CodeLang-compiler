class
❪string❫
❪vector❫
❪"code/tools/reflexivity/deps_define/data/dependency_specifications_getter"❫
❪"code/utilities/filesystem/paths/lib"❫
⚯
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/tools/reflexivity/comment/generated_comment_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
⚞⚟

//TODO: use git_repository instead

◀public: static▶ void ☀Create(Dependency_Specifications const& all_specs)❰

    auto path = Bazel_Deps_Get_Directory();
    Set_Path(path);
    
    for (auto it: all_specs.specs){
        if (Should_Print_Get_File(it)){
            auto source_data  = Create_Get_File_Content(it);
            Write_To_File(As_Removed_Dashes(it.lib_name) + ".bzl",source_data);
        }
    }
❱


◀private: static▶ bool ☀Should_Print_Get_File(Dependency_Specification const& spec)❰

    //since not every dependency has been converted or supported for programmatic generation yet,
    //we will only generate these "get files" if they have actual locations on where to get the code.
    if (spec.locations.empty() && !spec.system){
        return false;
    }
    return true;
❱

◀private: static▶ std::string ☀Create_Get_File_Content(Dependency_Specification const& spec)❰

    //dependency is on the system
    if (spec.system){
        return Create_Local_Get_File_Content(spec);
    }
    
    //dependency is hosted remotely
    return Create_Http_Archive_Get_File_Content(spec);
❱

◀private: static▶ std::string ☀Create_Http_Archive_Get_File_Content(Dependency_Specification spec)❰
    std::string result;
    
    Append_With_Newline(result,Generated_Comment_Getter::Get());
    Append_With_Newline(result,"load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")");
    Append_With_Newline(result,"");
    Append(result,"def ");
    Append(result,Fix_Casing_For_Bazel(spec.lib_name));
    Append_With_Newline(result,"():");
    Append(result,"    ");
    Append_With_Newline(result,"http_archive(");
    
    //add name
    Append(result,"        ");
    Append_Key_Value(result,"name",As_Removed_Dashes(spec.lib_name));
    Append_With_Newline(result,",");
    
    //add build file
    if (!spec.build_content_in_dependency){
        Append(result,"        ");
        Append_Key_Value(result,"build_file","//bazel/deps/build_files:" + As_Removed_Dashes(spec.lib_name) + ".BUILD");
        Append_With_Newline(result,",");
    }
    
    //add sha256
    Append(result,"        ");
    Append_Key_Value(result,"sha256",spec.locations[0].sha256);
    Append_With_Newline(result,",");
    
    //add strip prefix
    Append(result,"        ");
    Append_Key_Value(result,"strip_prefix",spec.locations[0].repo_name + "-" + spec.locations[0].at_commit);
    Append_With_Newline(result,",");
    
    //add urls
    Append(result,"        ");
    Append_With_Newline(result,"urls = [");
    
    for (auto const& it: spec.locations){
        Append(result,"            ");
        Append_In_DQuotes(result,"https://github.com/" + it.owner_name + "/" + it.repo_name + "/archive/" + it.at_commit + "." + spec.locations[0].format);
        Append_With_Newline(result,",");
    }
    
    Append(result,"        ");
    Append(result,"],");
    
    //add patch files
    if (!spec.patch_files.empty()){
        Append(result,"        ");
        Append(result,As_Named_Python_List_Of_Strings("patches",spec.patch_files));
        Append_With_Newline(result,",");
    }
    
    //add patch args
    if (!spec.patch_args.empty()){
        Append(result,"        ");
        Append(result,As_Named_Python_List_Of_Strings("patch_args",spec.patch_args));
        Append_With_Newline(result,",");
    }
    
    //add patch commands
    if (!spec.patch_cmds.empty()){
        Append(result,"        ");
        Append_With_Newline(result,"patch_cmds = [");
        for (auto const& it: spec.patch_cmds){
            Append(result,"            ");
            Append_In_DQuotes(result,it);
            Append_With_Newline(result,",");
        }
        Append(result,"        ");
        Append_With_Newline(result,"],");
    }
    
    //add repo mapping
    if (!spec.repo_mapping.empty()){
        Append(result,"        ");
        Append_With_Newline(result,"repo_mapping = {");
        for (auto const& it: spec.repo_mapping){
            Append(result,"            ");
            Append_In_DQuotes(result,"@" + it.first);
            Append(result," : ");
            Append_In_DQuotes(result,"@" + it.second);
            Append_With_Newline(result,",");
        }
        Append(result,"        ");
        Append_With_Newline(result,"},");
    }
    
    Append_With_Newline(result,"");
    Append(result,"    ");
    Append_With_Newline(result,")");
    
    return result;
❱


◀private: static▶ std::string ☀Create_Local_Get_File_Content(Dependency_Specification spec)❰

    std::string result;
    Append_With_Newline(result,Generated_Comment_Getter::Get());
    Append_With_Newline(result,"");
    Append(result,"def ");
    Append(result,Fix_Casing_For_Bazel(spec.lib_name));
    Append_With_Newline(result,"():");
    Append(result,"    ");
    Append_With_Newline(result,"native.new_local_repository(");
    
    //add name
    Append(result,"        ");
    Append_Key_Value(result,"name",As_Removed_Dashes(spec.lib_name));
    Append_With_Newline(result,",");
    
    //add build file
    if (!spec.build_content_in_dependency){
        Append(result,"        ");
        Append_Key_Value(result,"build_file","//bazel/deps/build_files:" + As_Removed_Dashes(spec.lib_name) + ".BUILD");
        Append_With_Newline(result,",");
    }
    
    //add path
    Append(result,"        ");
    Append_Key_Value(result,"path",spec.system_path);
    Append_With_Newline(result,",");
    
    Append_With_Newline(result,"");
    Append(result,"    ");
    Append_With_Newline(result,")");
    
    return result;
❱


◀private: static▶ std::string ☀Fix_Casing_For_Bazel(std::string const& str)❰
    //return str;
    auto without_dashes = string_replace_all(str,"-","_");
    return Case_Modifier::As_Modified_Casing(Case_Format_Style::LOWER_CAMEL_CASE,without_dashes);
❱


//string util
◀private: static▶ std::string ☀As_Named_Python_List_Of_Strings(std::string const& name, std::vector<std::string> const& strs)❰
    std::string result;
    Append(result,name);
    Append_With_Newline(result," = [");
    
    for (auto const& it: strs){
        Append(result,"            ");
        Append_In_DQuotes(result,it);
        Append_With_Newline(result,",");
    }
    Append(result,"        ");
    Append(result,"]");
        
    return result;
❱