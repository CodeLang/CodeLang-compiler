class
❪string❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/tools/reflexivity/settings/reflexive_refresh_settings"❫
⚯
❪"code/tools/reflexivity/docker/dockerfile_refresher"❫
❪"code/tools/reflexivity/bazelrc/bazelrc_refresher"❫
❪"code/tools/reflexivity/bazel_wrapper/bazel_wrapper_refresher"❫
❪"code/tools/reflexivity/deps_define/refresh/deps_definition_refresher"❫
❪"code/tools/reflexivity/tool_chain_conversion/tool_chain_conversion_refresher"❫
❪"code/tools/reflexivity/settings/reflexive_refresh_settings_getter"❫
❪"code/utilities/program/common_actions/locale/lib"❫
❪"code/utilities/program/name/program_name_getter"❫
❪"code/tools/transcompilers/unilang/self_readme/unilang_documentation_generator"❫
❪"code/literature/publish/essay_publisher"❫
❪"code/utilities/code/concept_tree_to_image"❫
❪"code/tools/reflexivity/deps_define/scan/deps_repo_scanner"❫
❪"code/utilities/build/self_buildfer"❫
⚞⚟


// Parts of the repository (this repository, right here) need generated programatically.  
// The reason we need to generate parts programatically, is so we can try to automatically upgrade portions of the repo infrastructure.
// Like most things, more possibilities open up, when the repo infrastructure is expressed in a data model.

//other bazel reflectivity tools:
//https://github.com/bazelbuild/buildtools
//https://github.com/spotify/bazel-tools

◀public: static▶ void ☀Refresh(Reflexive_Refresh_Settings const& settings)❰

    Set_English_UTF8_Locale();
    
    //things within the repository that are generated
    
    //required for proper build of monorepo
    Required_Build_Regeneration(settings);
    
    if (settings.refresh_scan_deps_definitions){
        Deps_Repo_Scanner::Scan();
    }
    
    
    //compilation tests from language->language
    //compilation tests
    if (settings.refresh_toolchain_conversion_tests){
        std::cout << "Generating Tool Chain Conversions..." << std::endl;
        Tool_Chain_Conversion_Refresher::Refresh();
    }
    
    //at this point, all BUILD file generation should be done,
    //and we can reformat it
    if (settings.reformat_build_files){
        std::cout << "Reformatting Build Files..." << std::endl;
        Self_Builder::Get_Results_Formatting_Build_Files();
    }
    
    exit(0);
    
    //generate unilang documentation
    if (settings.refresh_unilang_documentation){
        std::cout << "Refreshing Unilang Documentation..." << std::endl;
        Unilang_Documentation_Generator::Generate();
    }
    
    //generate unilang documentation
    if (settings.refresh_unilang_concept_tree_image){
        std::cout << "Refreshing Unilang Concept Tree Image..." << std::endl;
        Concept_Tree_To_Image::Create();
    }
    
    //generate essays
    if (settings.refresh_essays){
        std::cout << "Refreshing Essays..." << std::endl;
        Essay_Publisher::Generate_And_Publish();
    }
    
    //Other responsibilities for maintaining a mono-repo:
    //Outside resources can be fetched reliably (additional mirrors; solutions without Internet)
    //Ensure 3rd party libraries are up-to-date. Update them as necessary.
    //Ensure CI is always passing (debug, optimized, sanitizers) (worker bot)
    //Ensure CI is as fast as possible
    //Ensure Build is as fast as possible
    //Flaky Tests / Flaky Builds
❱

◀private: static▶ void ☀Required_Build_Regeneration(Reflexive_Refresh_Settings const& settings)❰

    //things within the repository that are generated
    
    //root repo stuff
    if (settings.refresh_bazel_wrapper){
        std::cout << "Generating Bazel Wrapper..." << std::endl;
        Bazel_Wrapper_Refresher::Refresh();
    }
    
    if (settings.refresh_bazelrc){
        std::cout << "Generating .bazelrc..." << std::endl;
        Bazelrc_Refresher::Refresh();
    }
    
    if (settings.refresh_dockerfile){
        std::cout << "Generating Dockerfile..." << std::endl;
        Dockerfile_Refresher::Refresh();
    }
    
    //repo's third party dependencies
    if (settings.refresh_deps_definitions){
        std::cout << "Generating 3rd party deps..." << std::endl;
        Deps_Definition_Refresher::Refresh();
    }
❱

