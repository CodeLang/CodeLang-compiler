class
❪iostream❫
❪algorithm❫
❪"code/utilities/output/printers/lib"❫
❪"code/tools/repo_tools/aquery_size/program_options/program_options"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/build/profile_parser/file_duration_extractor"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
❪"code/utilities/build/efficient_target_deriver/target_augment_settings"❫
⚯
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/files/observers/other/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/build/efficient_target_deriver/efficient_target_deriver"❫
❪"code/utilities/data_structures/fraction/fraction_parser"❫
❪"code/utilities/program/wrappers/bazel/query/bazel_aquery_runner"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    auto actions = Bazel_Aquery_Runner::Run_Aquery(repo_context.program_to_run_build,options.Target());
❱