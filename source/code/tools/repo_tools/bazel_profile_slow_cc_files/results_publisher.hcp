class
❪iostream❫
❪algorithm❫
❪"code/utilities/output/printers/lib"❫
❪"code/tools/repo_tools/bazel_profile_slow_cc_files/program_options/program_options"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/build/profile_parser/file_duration_extractor"❫
⚯
❪"code/utilities/web/honeycomb/honeycomb_poster"❫
⚞⚟


◀public: static▶ void ☀Publish(Program_Options const& options, std::vector<Duration_File> & durations)❰

    //print them
    auto results = As_Printable_List(durations);
    std::cout << results << std::endl;
    //Write_To_File(options.Output(),results);
    
    //upload them to honeycomb
    Upload_To_Honeycomb(options,durations);
❱

◀private: static▶ void ☀Upload_To_Honeycomb(Program_Options const& options, std::vector<Duration_File> & durations)❰

    std::cout << "posting to honeycomb" << std::endl;
    for (auto const& it: durations){
        
        //data for sending
        std::string dataset = "https://api.honeycomb.io/1/events/" + options.Honeycomb_Dataset();
        std::string api_key = options.Honeycomb_API_Key();
        std::string data = As_Minified_JSON_String(it);
        
        //send and report errors
        auto result = Honeycomb_Poster::Post(dataset,api_key,data);
        if (!result.empty()){
            std::cerr << result << std::endl;
        }
    }
❱

◀private: static▶ std::string ☀As_Printable_List(std::vector<Duration_File> const& durations)❰
    std::stringstream ss;
    
    for (auto const& it: durations){
        ss << it.duration_s << " " << it.file << std::endl;
    }
    
    return ss.str();
❱