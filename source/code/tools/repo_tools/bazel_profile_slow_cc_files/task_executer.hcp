class
❪iostream❫
❪algorithm❫
❪"code/utilities/output/printers/lib"❫
❪"code/tools/repo_tools/bazel_profile_slow_cc_files/program_options/program_options"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/build/profile_parser/file_duration_extractor"❫
❪"code/utilities/build/build_repo_establisher/build_repo_establisher"❫
⚯
❪"code/tools/repo_tools/bazel_profile_slow_cc_files/results_publisher"❫
❪"code/tools/repo_tools/bazel_profile_slow_cc_files/results_filter"❫
❪"code/utilities/filesystem/files/deleting/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/files/observers/other/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰


    //We establish a repo and a context for building artifacts in it.
    //This setup tries to be agnostic to any expectations about the repo's hosting, layout, and build system.
    //It tries to derive things like:
    //where/how the repository is cloned from, what branch it should be on or whether the repo already exists on the system.
    //Analyze the repository to learn how to build it
    auto repo_context = Build_Repo_Establisher::Establish_Repo_For_Building(options.Run_Dir(),options.Url(),options.Branch());
    
    //get the targets to build (we may need to create multiple targets based on what was given to ys)
    auto target_sets = Efficient_Target_Deriver::Smartly_Augment_Target_Based_On_What_Was_Given(repo_context,options.Target());
    
    //run analysis on each target set
    for (auto const& set: target_sets){
        Run_Analysis_For_Target(repo_context,options,set);
    }


❱

◀private: static▶ void ☀Run_Analysis_For_Target(Build_Repo_Settings const& repo_context, Program_Options const& options, std::string const& target)❰

    auto profile_file = Create_Proile_File(repo_context, target, options.Profile_In(), options.Profile_Out());
    
    if (File_Exists(profile_file)){
        
        std::cout << "extracting durations" << std::endl;

        //extract compilation file durations from profile-file
        auto durations = File_Duration_Extractor::Extract(profile_file);
        
        std::cout << "filtering results" << std::endl;
        
        //filter out ones we don't want
        Results_Filter::Filter_Results(durations);
        
        Results_Publisher::Publish(options,durations);
        
        Delete_File(profile_file);
    }
    else {
        std::cout << "profile does not exist.  skipping" << std::endl;
    }
    
    Bazel_Runner::Clean(repo_context.program_to_run_build);

❱


◀private: static▶ std::string ☀Create_Proile_File(Build_Repo_Settings const& x, std::string const& target, std::string const& profile_in, std::string const& profile_out) ❰

    //it was passed in
    if (!profile_in.empty()){
        return profile_in;
    }
    
    //use the other program options to build it
    return Create_Proile_File_By_Building(x,target,profile_out);
❱


◀private: static▶ std::string ☀Create_Proile_File_By_Building(Build_Repo_Settings const& x, std::string const& target, std::string const& profile_out) ❰

    
    auto profile_file = Bazel_Runner::Get_Profile_Information(x.program_to_run_build,
                                                              x.build_settings,
                                                              x.bazel_setup_settings.config_settings,
                                                              target,
                                                              profile_out);
    return profile_file;
❱


