class
❪iostream❫
❪algorithm❫
❪"code/utilities/output/printers/lib"❫
❪"code/tools/repo_tools/bazel_profile_slow_cc_files/program_options/program_options"❫
❪"code/utilities/program/wrappers/git/repo_establisher/repo_establisher"❫
❪"code/utilities/program/wrappers/bazel/setup/wrapper/bazel_wrapper_deriver"❫
❪"code/utilities/program/wrappers/bazel/setup/config/bazel_config_deriver"❫
❪"code/utilities/program/wrappers/bazel/bazel_runner"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/build/parse_profile/file_duration_extractor"❫
❪"code/utilities/program/wrappers/bazel/setup/default_bazel_setup_settings"❫
❪"code/utilities/program/wrappers/git/repo_establisher/default_repo_location_getter"❫
❪"code/utilities/program/wrappers/bazel/setup/bazel_setup_deriver"❫
❪"code/utilities/program/wrappers/bazel/default_build_settings"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    auto profile_file = Create_Proile_File(options);
    std::cout << profile_file << std::endl;

    //extract compilation file durations from profile-file
    auto durations = File_Duration_Extractor::Extract(profile_file);
    
    //sort them by longest first
    std::sort(durations.begin(),durations.end(),[&](Duration_File const& a, Duration_File const& b){
        return b.duration_s < a.duration_s;
    });
    
    //filter out ones we don't want
    //TODOs
    
    //print them
    auto results = As_Printable_List(durations);
    std::cout << results << std::endl;
    Write_To_File(options.Output(),results);

❱

◀private: static▶ std::string ☀Create_Proile_File(Program_Options const& options) ❰

    //it was passed in
    if (!options.Profile_File().empty()){
        return options.Profile_File();
    }
    
    //use the other program options to build it
    return Create_Proile_File_By_Building(options);
❱


◀private: static▶ std::string ☀Create_Proile_File_By_Building(Program_Options const& options) ❰

    //get settings
    auto repo = Default_Repo_Location_Getter::Default_Repo_Location_From_Program_Options(options.Run_Dir(),options.Url(),options.Branch());
    auto setup = Default_Bazel_Setup_Settings::Get();
    auto build = Default_Build_Settings::Get();
    
    
    //clone and establish bazel information
    auto established = Repo_Establisher::Establish_And_Get_Path(repo);
    Bazel_Setup_Deriver::Possibly_Derive_Parts_Of_Bazel_Setup(setup,established.path);
    
    //get profile information
    auto bazel = Prepend_Cd_Path(setup.bazel_wrapper.program_name,established.path);
    
    auto profile_file = Bazel_Runner::Get_Profile_Information(bazel,build,setup.config_settings,options.Target());
    return profile_file;
❱

◀private: static▶ std::string ☀As_Printable_List(std::vector<Duration_File> const& durations)❰
    std::stringstream ss;
    
    for (auto const& it: durations){
        ss << it.duration_s << " " << it.file << std::endl;
    }
    
    return ss.str();
❱