class
❪iostream❫
❪string❫
❪utility❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/tools/repo_tools/build_determinism/data/spawn_pairings"❫
❪"code/tools/repo_tools/build_determinism/spawn_pairer"❫
❪"code/tools/repo_tools/build_determinism/spawn_pair_determinism_checker"❫
❪"code/tools/repo_tools/build_determinism/settings/settings"❫
⚯
⚞⚟


◀public: static▶ Determinism_Pairings ☀Do_AB_Test(Settings const& settings) ❰
    
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"building target...");
    auto spawns1 = Bazel_Runner::Get_Spawn_Information_As_Cmd_Map(settings.bazel_wrapper.program_name,settings.a_strategy,settings.target_name);
    
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"building target...");
    auto spawns2 = Bazel_Runner::Get_Spawn_Information_As_Cmd_Map(settings.bazel_wrapper.program_name,settings.b_strategy,settings.target_name);
    
    auto pairings = Spawn_Pairer::Build_Matches_And_Unpairable_Spawns(spawns1,spawns2);
    std::string pair_results_message = "subcommands: " + std::to_string(pairings.pairs.size()) + " matches " + std::to_string(pairings.unpaired1.size() + pairings.unpaired2.size()) + " non-matches";
    Maybe_Output_And_Flush_With_Newline(settings.verbose,pair_results_message);
    
    auto matches = Spawn_Pair_Determinism_Checker::Get_Nondeterminism_Matches(pairings);
    std::string determinism_matches_message = "matched subcommands: " + std::to_string(matches.deterministic.size()) + " deterministic " + std::to_string(matches.nondeterministic.size()) + " nondeterministic";
    Maybe_Output_And_Flush_With_Newline(settings.verbose,determinism_matches_message);
    
    return matches;
    
❱