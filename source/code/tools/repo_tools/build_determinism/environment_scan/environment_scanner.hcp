class
❪"code/tools/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper_deriver"❫
❪"code/tools/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/tools/repo_tools/build_determinism/reporter"❫
❪"code/tools/repo_tools/build_determinism/subcommand_filter"❫
❪"code/tools/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/tools/repo_tools/build_determinism/file_isolator"❫
❪"code/tools/repo_tools/build_determinism/environment_scan/environment_scan_results"❫
⚯
⚞⚟

◀public: static▶ void ☀Do_Multi_Environment_AB_Test(Settings const& settings) ❰
    
    //run the environment scan tests
    auto results = Do_Test(settings);
    
    //print the results
    auto str_results = Get_Printable_Results(results);
    std::cout << str_results << std::endl;
❱

◀private: static▶ Environment_Scan_Results ☀Do_Test(Settings const& settings) ❰

    Environment_Scan_Results results;
    
    //do A/B determinism experiments multiple times on different kinds of environments
    for (size_t i = 0; i < settings.environment_scan; ++i){
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"on iteration " + std::to_string(i));
        
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing local/local test");
        Do_AB_Experiment_With_Environment_Combination(settings,Run_Environment::LOCAL,Run_Environment::LOCAL,results.local_local);
        
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing remote/remote test");
        Do_AB_Experiment_With_Environment_Combination(settings,Run_Environment::REMOTE,Run_Environment::REMOTE,results.remote_remote);

        Maybe_Output_And_Flush_With_Newline(settings.verbose,"doing local/remote test");
        Do_AB_Experiment_With_Environment_Combination(settings,Run_Environment::LOCAL,Run_Environment::REMOTE,results.local_remote);
    }
    
    return results;
❱


◀private: static▶ std::string ☀Get_Printable_Results(Environment_Scan_Results const& results)❰

    std::string x;
    
    //show results
    Append_With_Newline(x,"                 D  ND");
    Append(x,"LOCAL  | LOCAL  ");
    Append_With_Newline(x,Stream_Str(results.local_local));
    Append(x,"REMOTE | REMOTE ");
    Append_With_Newline(x,Stream_Str(results.remote_remote));
    Append(x,"LOCAL  | REMOTE ");
    Append_With_Newline(x,Stream_Str(results.local_remote));
    
    //synthesize results
    
    //understanding local builds
    Append_With_Newline_Unless_Empty(x,Express_Determinism_Of_Action("building locally",results.local_local));
    
    //understanding remote builds
    Append_With_Newline_Unless_Empty(x,Express_Determinism_Of_Action("building remotely",results.remote_remote));
    
    //understanding differences between local/remote builds together
    if (results.local_local.first > 0 && results.local_local.second == 0){
        if (results.remote_remote.first > 0 && results.remote_remote.second == 0){
            if (results.local_remote.second > 0){
                Append_With_Newline(x,"local builds and remote builds are differently deterministic.");;
            }
        }
    }
    
    return x;
❱

◀private: static▶ std::string ☀Express_Determinism_Of_Action(std::string const& action, std::pair<int,int> const& results)❰
    if (results.first > 0 && results.second == 0){
        return action + " is always deterministic.";
    }
    else if (results.first > 0 && results.second > 0){
         return action + " building remotely is sometimes nondeterministic.";
    }
    else if (results.first == 0 && results.second > 0){
         return action + " building remotely is always nondeterministic.";
    }
    return "";
❱

◀private: static▶ void ☀Do_AB_Experiment_With_Environment_Combination(Settings settings, Run_Environment s1, Run_Environment s2, std::pair<int,int> & results)❰

    //set new strategy
    settings.a_build.environment = s1;
    settings.b_build.environment = s2;
    
    //run experiment and record determinism results
    auto d_results = Determinism_Ab_Runner::Do_AB_Test(settings);
    Increment_Determinism_Results(d_results,results);
❱

◀private: static▶ void ☀Increment_Determinism_Results(Determinism_Pairings const& d_results, std::pair<int,int> & results)❰

    //record whether the experiment was deterministic or not
    if (d_results.nondeterministic.empty()){
        ++results.first;
    }
    else{
        ++results.second;
    }
❱

