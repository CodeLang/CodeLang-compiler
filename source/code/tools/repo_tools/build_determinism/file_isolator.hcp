class
❪"code/tools/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper_deriver"❫
❪"code/tools/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/tools/repo_tools/build_determinism/reporter"❫
❪"code/tools/repo_tools/build_determinism/subcommand_filter"❫
❪"code/tools/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
⚯
⚞⚟


◀public: static▶ void ☀Attempt_To_Isolate_Nondeterministic_Files(Determinism_Pairings const& results, Settings const& settings) ❰

    //Isolate subcommands that are nondeterministic
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"filtering results...");
    auto filtered_results = Subcommand_Filter::Filter_By_Subcommands_That_Cause_Nondeterminism(results.nondeterministic);
    
    //Convert results into specific files that are nondeterministic
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"collecting nondeterministic objects...");
    std::map<std::string,tools::protos::SpawnExec> file_map;
    for (auto const& it: filtered_results){
        auto problems = Determinism_Problem_Getter::Get(it);
        for (auto const& problem: problems){
            if (!problem.file_path.empty()){
                file_map.insert({problem.file_path,it.first});
            }
        }
    }
    
    //decide whether to actually isolate files
    if (!file_map.empty()){
        std::string message = std::to_string(file_map.size()) + " files will need isolated";
        Maybe_Output_And_Flush_With_Newline(settings.verbose,message);
        Isolate_Nondeterministic_Files(file_map,settings);
    }
    else{
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"there are no files to isolate because there were no nondeterministic behavior observed");
    }

❱

◀private: static▶ void ☀Isolate_Nondeterministic_Files(std::map<std::string,tools::protos::SpawnExec> const& file_map, Settings const& settings) ❰

    auto isolation_folder = Random_Tmp_Directory();
    auto isolation_folder_a = isolation_folder + "/a";
    auto isolation_folder_b = isolation_folder + "/b";
    execute("mkdir -p " + isolation_folder_a);
    execute("mkdir -p " + isolation_folder_b);
    
    if (settings.concurrency == Concurrency::PARALLEL){
        for (auto const& it: file_map){
            auto file_a = settings.a_path + "/" + it.first;
            auto file_b = settings.b_path + "/" + it.first;
            if (File_Exists(file_a)){
                Copy_File_To_Dir(file_a,isolation_folder_a);
            }
            else{
                std::cerr << file_a << " does not exist" << std::endl;
            }
            
            if (File_Exists(file_b)){
                Copy_File_To_Dir(file_b,isolation_folder_b);
            }
            else{
                std::cerr << file_b << " does not exist" << std::endl;
            }
        }
    }
    
    
    else if (settings.concurrency == Concurrency::SEQUENTIAL){
        
        //copy files from previous build
        for (auto const& it: file_map){
            auto file_b = settings.b_path + "/" + it.first;
            if (File_Exists(file_b)){
                Copy_File_To_Dir(file_b,isolation_folder_b);
            }
            else{
                std::cerr << file_b << " does not exist" << std::endl;
            }
        }
        
        //do another build to regenerate the nondeterministic files
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"we must do a rebuild since we did single sequential directory");
        auto bazel = Prepend_Cd_Path(settings.bazel_wrapper.program_name,settings.a_path);
        Bazel_Runner::Build_Target(bazel,settings.a_build,settings.target_name);
        
        //copy files from previous build
        for (auto const& it: file_map){
            auto file_a = settings.a_path + "/" + it.first;
            if (File_Exists(file_a)){
                Copy_File_To_Dir(file_a,isolation_folder_a);
            }
            else{
                std::cerr << file_a << " does not exist" << std::endl;
            }
        }
    }
    
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"files have been isolated to " + isolation_folder);
❱