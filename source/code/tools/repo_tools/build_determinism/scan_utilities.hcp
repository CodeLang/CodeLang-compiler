class
❪"code/tools/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/setup/wrapper/bazel_wrapper_deriver"❫
❪"code/tools/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/tools/repo_tools/build_determinism/reporter"❫
❪"code/tools/repo_tools/build_determinism/subcommand_filter"❫
❪"code/tools/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
⚯
⚞⚟


◀public: static▶ void ☀Append_Row(std::string & x, std::string const& name, std::pair<int,int> const& results)❰
    Append(x,name);
    Append_With_Newline(x,Stream_Str(results));
❱

◀public: static▶ std::string ☀Express_Determinism_Of_Action(std::string const& action, std::pair<int,int> const& results)❰
    if (results.first > 0 && results.second == 0){
        return action + " is always deterministic.";
    }
    else if (results.first > 0 && results.second > 0){
         return action + " is sometimes nondeterministic.";
    }
    else if (results.first == 0 && results.second > 0){
         return action + " is always nondeterministic.";
    }
    return "";
❱

◀public: static▶ std::string ☀Express_Determinism_Of_Mixed_Actions(std::string const& action, std::pair<int,int> const& a1, std::pair<int,int> const& a2, std::pair<int,int> const& combined)❰
    if (a1.first > 0 && a1.second == 0){
        if (a2.first > 0 && a2.second == 0){
            if (combined.second > 0){
                return action + " are differently deterministic.";
            }
        }
    }
    return "";
❱

◀public: static▶ void ☀Increment_Determinism_Results(Determinism_Pairings const& d_results, std::pair<int,int> & results)❰

    //record whether the experiment was deterministic or not
    if (d_results.nondeterministic.empty()){
        ++results.first;
    }
    else{
        ++results.second;
    }
❱