class
❪iostream❫
❪string❫
❪utility❫
❪set❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/repo_tools/build_determinism/program_options/program_options"❫
❪"code/tools/repo_tools/build_determinism/settings/settings_getter"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/utilities/serialization/protobuf"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/git-related/lib"❫
❪"code/tools/repo_tools/build_determinism/data/spawn_pairings"❫
❪"code/tools/repo_tools/build_determinism/data/determinism_problem"❫
❪"code/utilities/types/map/lib"❫
❪"code/tools/repo_tools/build_determinism/spawn_pairer"❫
❪"code/tools/repo_tools/build_determinism/spawn_pair_determinism_checker"❫
❪"code/tools/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/tools/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/tools/repo_tools/build_determinism/reporter"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper_deriver"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //get the default settings modified by user's program options.
    auto settings = Settings_Getter::Get(options);
    
    //before starting the analysis, we either clone or move into an existing repo.
    //This is chosen by the user and regardless of their choice, we will end up at the root of a repository.
    //NOTE: we want to avoid cloning the repo more than once from a branch as the branch may change.
    //for example, master would be changing frequently and me affect results.
    //so instead we use the same repository for the whole analysis.
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"setting up repo...");
    Repo_Establisher::Establish_And_Move_Into_Repo(settings.repo);
    
    //try to derive the correct bazel program if its not known.
    Bazel_Wrapper_Deriver::Possibly_Derive_Bazel_Runner(settings.bazel_wrapper);
    
    auto results = Determinism_Ab_Runner::Do_AB_Test(settings);
    Reporter::Report(results,settings.report);
    
❱