class
❪"code/tools/repo_tools/build_determinism/settings/settings_getter"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/printers/prettyprint"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper_deriver"❫
❪"code/tools/repo_tools/build_determinism/determinism_ab_runner"❫
❪"code/tools/repo_tools/build_determinism/reporter"❫
❪"code/tools/repo_tools/build_determinism/subcommand_filter"❫
❪"code/tools/repo_tools/build_determinism/determinism_problem_getter"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/filesystem/files/moving/lib"❫
❪"code/tools/repo_tools/build_determinism/file_isolator"❫
⚯
❪"code/tools/repo_tools/build_determinism/environment_scan/environment_scanner"❫
❪"code/tools/repo_tools/build_determinism/augment_scan/augment_scanner"❫
⚞⚟


//other articles about build determinism:
//https://www.chromium.org/developers/testing/isolated-testing/deterministic-builds
//http://blog.llvm.org/2019/11/deterministic-builds-with-clang-and-lld.html
//http://planet.clang.org/
//http://lists.llvm.org/pipermail/llvm-dev/2017-July/115196.html
//https://github.com/mgrang/non-determinism
//https://blog.conan.io/2019/09/02/Deterministic-builds-with-C-C++.html


//filenames in object files.  why?
//https://stackoverflow.com/questions/32413176/why-do-common-c-compilers-include-the-source-filename-in-the-output
//https://stackoverflow.com/questions/32400931/why-dont-two-binaries-of-programs-with-only-comments-changed-exactly-match-in-g/32401320#32401320


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //get the default settings modified by user's program options.
    auto settings = Settings_Getter::Get(options);
    
    //this will decide which directories to do the analysis in.
    //it might clone and copy folders, it might use existing paths given by the user.
    Setup_Workspace(settings);
    
    //try to derive the correct bazel program if its not known.
    Bazel_Wrapper_Deriver::Possibly_Derive_Bazel_Runner(settings.bazel_wrapper,settings.a_path);
    
    //at this point we have the directories we want to operate in, and knowledge of how to run bazel within them.
    //we move onto doing some kind of analysis.
    
    if (settings.environment_scan != 0){
        Environment_Scanner::Do_Multi_Environment_AB_Test(settings);
    }
    else if (settings.augmented_scan != 0){
        Augment_Scanner::Do_Multi_Environment_AB_Test(settings);
    }
    else{
        Do_Regular_AB_Test(settings);
    }
❱

◀private: static▶ void ☀Setup_Workspace(Settings & settings) ❰

    //before starting the analysis, we either clone or move into an existing repo.
    //This is chosen by the user and regardless of their choice, we will end up at the root of a repository.
    //NOTE: we want to avoid cloning the repo more than once from a branch as the branch may change.
    //for example, master would be changing frequently and me affect results.
    //so instead we use the same repository for the whole analysis.
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"setting up repo...");
    settings.a_path = Repo_Establisher::Establish_And_Get_Path(settings.repo);
    if (settings.concurrency == Concurrency::SEQUENTIAL){
        settings.b_path = settings.a_path;
    }
    else {
        Maybe_Output_And_Flush_With_Newline(settings.verbose,"duplicating folder...");
        settings.b_path = Random_Tmp_Directory();
        Copy_File_To_Dir(settings.a_path,settings.b_path);
    }
    
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"A test folder established: " + settings.a_path);
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"A test folder established: " + settings.b_path);
❱

◀private: static▶ void ☀Do_Regular_AB_Test(Settings const& settings) ❰

    //Perform the AB test and get back results.
    auto results = Determinism_Ab_Runner::Do_AB_Test(settings);
    
    //Analyze the results for the user.
    Reporter::Report(results,settings.report);
    
    //Isolate the problem files.
    File_Isolator::Attempt_To_Isolate_Nondeterministic_Files(results,settings);
❱

