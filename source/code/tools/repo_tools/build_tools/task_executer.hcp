class
❪"code/tools/repo_tools/build_tools/settings/settings_getter"❫
❪"code/utilities/printers/lib"❫
❪"code/utilities/git-related/repo_establisher/repo_establisher"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper_deriver"❫
❪"code/utilities/bazel/bazel_runner"❫
❪"code/utilities/data_structures/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
⚯
⚞⚟


◀public: static▶ void ☀Execute_Needed_Tasks(Program_Options const& options) ❰

    //get the default settings modified by user's program options.
    auto settings = Settings_Getter::Get(options);
    
    //before starting the analysis, we either clone or move into an existing repo.
    //This is chosen by the user and regardless of their choice, we will end up at the root of a repository.
    //NOTE: we want to avoid cloning the repo more than once from a branch as the branch may change.
    //for example, master would be changing frequently and me affect results.
    //so instead we use the same repository for the whole analysis.
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"setting up repo...");
    auto path = Repo_Establisher::Establish_And_Get_Path(settings.repo);
    
    //try to derive the correct bazel program if its not known.
    Bazel_Wrapper_Deriver::Possibly_Derive_Bazel_Runner(settings.bazel_wrapper,path);
    
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"building target...");
    auto bazel = Prepend_Path_To_Program_Execution_Unless_Global_Call(settings.bazel_wrapper.program_name,path);
    auto spawns = Bazel_Runner::Get_Spawn_Information(bazel,settings.strategy,settings.target_name);
    
    //calculate build tools used
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"calculate build tool usage...");
    Unique_Counter<std::string> build_tools;
    for (auto const& it: spawns){
        build_tools.Add(Get_Synthesized_Program_Name(it));
    }
    std::cout << build_tools.hash_table << std::endl;
❱


◀private: static▶ std::string ☀Get_Synthesized_Program_Name(tools::protos::SpawnExec const& s)❰
        std::string program_name = "";
        auto command_args = s.command_args();
        if (!command_args.empty()){
            program_name = command_args[0];
        }
        program_name = Get_Path_Basename(program_name);
        return program_name;
❱