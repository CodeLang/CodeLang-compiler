class
❪iostream❫
❪string❫
❪set❫
❪utility❫
❪memory❫
❪grpcpp/grpcpp.h❫
❪grpcpp/health_check_service_interface.h❫
❪grpcpp/ext/proto_server_reflection_plugin.h❫
❪"build/bazel/remote/execution/v2/remote_execution.grpc.pb.h"❫
❪"code/utilities/formats/serialization/protobuf"❫
❪"code/tools/repo_tools/remote_execution/server/server_settings"❫
❪"code/utilities/remote_execution/services/grpc_glue"❫
⚯
⚞⚟

◀public: static▶ std::unique_ptr<grpc::Server> ☀BuildAndRun(Server_Settings const& settings)❰

  //setup grpc
  grpc::EnableDefaultHealthCheckService(settings.enable_default_health_check_service);
  grpc::reflection::InitProtoReflectionServerBuilderPlugin();
  
  
  grpc::ServerBuilder builder;
  builder.AddListeningPort(settings.address, grpc::InsecureServerCredentials());
  Add_Service_Endpoints(builder);
  
  
  
  // Finally assemble the server.
  std::unique_ptr<grpc::Server> server(builder.BuildAndStart());
  
  return server;
❱

◀private: static▶ void ☀Add_Service_Endpoints(grpc::ServerBuilder & builder)❰

  //add all of the individual services from the proto definitions
  ExecutionService execution_service(
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::ExecuteRequest* request, grpc::ServerWriter<google::longrunning::Operation>* writer){
    return grpc::Status::OK;
  },
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::WaitExecutionRequest* request, grpc::ServerWriter<google::longrunning::Operation>* writer){
    return grpc::Status::OK;
  }
  );
  
  ActionCacheService action_cache_service(
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::GetActionResultRequest* request, build::bazel::remote::execution::v2::ActionResult* response){
    return grpc::Status::OK;
  },
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::UpdateActionResultRequest* request, build::bazel::remote::execution::v2::ActionResult* response){
    return grpc::Status::OK;
  }
  );
  
  ContentAddressableStorageService content_addressable_storage_service(
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::FindMissingBlobsRequest* request, build::bazel::remote::execution::v2::FindMissingBlobsResponse* response){
    return grpc::Status::OK;
  },
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::BatchUpdateBlobsRequest* request, build::bazel::remote::execution::v2::BatchUpdateBlobsResponse* response){
    return grpc::Status::OK;
  },
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::BatchReadBlobsRequest* request, build::bazel::remote::execution::v2::BatchReadBlobsResponse* response){
    return grpc::Status::OK;
  },
  [&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::GetTreeRequest* request, grpc::ServerWriter< build::bazel::remote::execution::v2::GetTreeResponse>* writer){
    return grpc::Status::OK;
  }
  );
  
  CapabilitiesService capabilities_service([&](grpc::ServerContext* context, const build::bazel::remote::execution::v2::GetCapabilitiesRequest* request, build::bazel::remote::execution::v2::ServerCapabilities* response){
        std::cout << Protobuf_Message_To_Json(*request) << std::endl;
        return grpc::Status::OK;
  });
  
  builder.RegisterService(&execution_service);
  builder.RegisterService(&action_cache_service);
  builder.RegisterService(&content_addressable_storage_service);
  builder.RegisterService(&capabilities_service);
  
❱