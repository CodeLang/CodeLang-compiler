class
❪iostream❫
❪string❫
❪utility❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/graphviz/graphviz_image_maker"❫
❪"code/tools/shared_object_trace/correlated_so_ldd"❫
⚯
⚞⚟


    // for (auto const& it: all_correlations){
    //     std::cout << it.so.file << " -> ";
    //     std::cout << it.ldd.file << std::endl;
    // }
◀public: static▶ void ☀Visualize(std::vector<Correlated_So_Ldd> const& correlations)❰

    std::vector<std::string> relationships_strs;
    for (auto const& it: correlations){
        std::string line = "";
        line += "\"";
        line += it.so.file;
        line += "\"";
        line += " <- ";
        line += "\"";
        line += it.ldd.file;
        line += "\"";
        relationships_strs.emplace_back(line);
    }
    
    // std::string x;
    // Append_With_Newline(x,"digraph results {");
    // //Append_With_Newline(x,"splines=false;");
    // Append_With_Newline(x,"node [");
    // Append_With_Newline(x,"fontname=\"Arial\",");
    // //Append_With_Newline(x,"shape = plaintext,");
    // Append_With_Newline(x,"height=.1");
    // Append_With_Newline(x,"]");
    // for (auto const& it: relationships_strs){
    //     Append_With_Newline(x,it);
    // }
    // Append_With_Newline(x,"}");
    //Graphviz_Image_Maker::Make(x,settings.result_path,settings.dep_name);
❱