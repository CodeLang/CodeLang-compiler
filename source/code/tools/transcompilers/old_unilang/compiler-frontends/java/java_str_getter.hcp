class

❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/old_unilang/structure/model/structure"❫
❪"code/utilities/contributor/contributor"❫
❪"code/tools/transcompilers/old_unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/old_unilang/options/language-specific/java/java_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/transcompilers/old_unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/tools/transcompilers/old_unilang/boilerplate_printer/boilerplate_printer"❫
❪"code/tools/transcompilers/old_unilang/structure/print/filename/file_name_getter"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫

❪"code/tools/transcompilers/old_unilang/compiler-frontends/java/parts/methods_getter"❫
❪"code/tools/transcompilers/old_unilang/compiler-frontends/java/parts/data_members_getter"❫
❪"code/tools/transcompilers/old_unilang/structure/print/doxygen_block_printer"❫
❪"code/tools/transcompilers/old_unilang/structure/query/virtual_method_checker"❫
❪"code/tools/transcompilers/old_unilang/compiler-frontends/java/parts/import_getter"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, std::vector<Contributor> const& contributors, Java_Settings const& settings)❰
    std::string text;
    //Append_With_Newline(text,Get_Boilerplate(structure,contributors,settings));
    //Append_With_Newline(text,Get_Package_Name(structure,contributors,settings));
    //Append_With_Newline(text,Import_Getter::Get_Imports(structure,contributors));
    Append_With_Newline(text,Get_Class(structure,contributors,settings));
    return text;
❱

◀private: static▶ std::string ☀Get_Class(Structure const& structure, std::vector<Contributor> const& contributors, Java_Settings const& settings)❰

    //java, everything is a class:
    std::string text;
    text += Doxygen_Block_Printer::Get_Struct_Block(0,as_string(structure.meta.brief_description.value),as_string(structure.meta.detailed_description.value),Class_Name(structure,settings),settings.general.comment.doxygen);
    text += "\n";
    Append_With_Newline(text,Class_Start(structure,contributors,settings));
    Append_With_Newline(text,Data_Members_Getter::Get(structure,contributors,settings));
    Append_With_Newline(text,Methods_Getter::Get(structure,contributors,settings));
    Append_With_Newline(text,"}");
    
    return text;
❱


◀private: static▶ std::string ☀Class_Start(Structure const& structure, std::vector<Contributor> const& contributors, Java_Settings const& settings)❰
    std::string str;
    str += "public ";
    
    if (Virtual_Method_Checker::Has_Virtual_Methods(structure.methods.methods)){
        str += "abstract ";
    }
    
    str += "class ";
    str += Class_Name(structure,settings);
    str += Add_Posible_Templates(structure,settings);
    str += " {\n";
    return str;
❱

◀private: static▶ std::string ☀Add_Posible_Templates(Structure const& structure, Java_Settings const& settings)❰
    if (structure.templates.arguments.empty()){
        return "";
    }
    
    std::string x;
    x += "<";
    for (auto const& it: structure.templates.arguments){
        x += as_string(it.identifier.value);
        x += ",";
    }
    x.pop_back();
    x += ">";
    return x;
    
❱


◀private: static▶ std::string ☀Class_Name(Structure const& structure, Java_Settings const& settings)❰
    return Case_Modifier::As_Modified_Casing(settings.general.filesystem_naming.file_casing,structure.name);
❱







