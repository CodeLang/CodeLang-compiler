class

❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/old_unilang/structure/model/structure"❫
❪"code/utilities/contributor/contributor"❫
❪"code/tools/transcompilers/old_unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/old_unilang/options/language-specific/java/java_test_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/tools/transcompilers/old_unilang/structure/print/struct_derivers"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/tools/transcompilers/old_unilang/options/manipulation/case_adjustment_settings"❫
❪"code/tools/transcompilers/old_unilang/structure/adjust/casing_adjuster"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/tools/transcompilers/old_unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/tools/transcompilers/old_unilang/doxygen_block_printer/grammar_adjuster"❫
❪"code/tools/transcompilers/old_unilang/compiler-frontends/java_test/java_test_str_getter"❫
❪"code/tools/transcompilers/old_unilang/structure/print/filename/file_name_getter"❫
❪"code/tools/transcompilers/old_unilang/structure/query/mock_test_checker"❫
❪"code/tools/transcompilers/old_unilang/structure/query/redis_test_checker"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(Structure structure, std::vector<Contributor> const& contributors, Java_Test_Settings const& settings)❰

  //created files
  std::vector<std::string> created;
   
   Structure_Adjuster::Adjust(structure,settings.manipulations,Source_Language::JAVA);
  
  auto file_result1 = Create_CI_Tests(structure,contributors,settings);
  created.emplace_back(file_result1);
  
  if (Redis_Test_Checker::Has_Redis_Tests(structure)){
    auto file_result2 = Create_NonCI_Tests(structure,contributors,settings);
    created.emplace_back(file_result2);
  }
  
  return created;
❱

◀public: static▶ std::string ☀Create_CI_Tests(Structure structure, std::vector<Contributor> const& contributors, Java_Test_Settings settings)❰

  //adjust settings
  settings.include_test_cases_without_tags = true;
  settings.test_cases_include_because_tags.emplace_back("mock");
  settings.test_cases_include_because_tags.emplace_back("regular");
  
  if (Mock_Test_Checker::Has_Mock_Tests(structure)){
    structure.name += " mock";
  }
  
  //the file to create
  std::string source_code_filename = Get_File_Name(structure,settings);
  
  //get file content
  std::string str = Java_Test_Str_Getter::Get(structure,contributors,settings);
  
  //write content to file
  std::ofstream outfile(source_code_filename);
  outfile << str <<'\n';
  outfile.close();
  
  return source_code_filename;
❱

◀public: static▶ std::string ☀Create_NonCI_Tests(Structure structure, std::vector<Contributor> const& contributors, Java_Test_Settings settings)❰

  //adjust settings
  settings.include_test_cases_without_tags = false;
  settings.test_cases_include_because_tags.emplace_back("redis");
  
  //the file to create
  std::string source_code_filename = Get_File_Name(structure,settings);
  
  //get file content
  std::string str = Java_Test_Str_Getter::Get(structure,contributors,settings);
  
  //write content to file
  std::ofstream outfile(source_code_filename);
  outfile << str <<'\n';
  outfile.close();
  
  return source_code_filename;
❱





◀private: static▶ std::string ☀Get_File_Name(Structure const& structure, Java_Test_Settings const& settings)❰

    Export_File_Settings file_settings;
    file_settings.language = Source_Language::JAVA;
    file_settings.code = Code_Type::GLOBAL;
    file_settings.special = Special_File_Type::TEST;
    file_settings.file = File_Type::ALL;
    
    auto final_file_name = File_Name_Getter::Get(file_settings,structure.name,settings.general.filesystem_naming);
    return final_file_name;
❱