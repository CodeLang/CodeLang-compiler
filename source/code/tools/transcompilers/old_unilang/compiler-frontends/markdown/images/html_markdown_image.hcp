class
❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/old_unilang/structure/model/structure"❫
❪"code/utilities/contributor/contributor"❫
❪"code/tools/transcompilers/old_unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/old_unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Sentence_Image const& i, Markdown_Settings const& settings)❰
    std::string text;
    
    
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"<p align=\"center\">");
        Append_A_Tab(text);
    }
        Append(text,"<img ");
        Append(text,"width=\"");
        Append(text,as_string(i.size.width.value));
        Append(text,"\" ");
        Append(text,"height=\"");
        Append(text,as_string(i.size.height.value));
        Append(text,"\" ");
        Append(text,"src=\"");
        Append(text,as_string(i.image_path.value));
        Append(text,"\">");
        
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"</p>");
    }
    //Append_A_Newline(text);
    return text;
❱