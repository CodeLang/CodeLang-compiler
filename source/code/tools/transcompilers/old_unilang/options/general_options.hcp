class

//general options
❪"code/utilities/comments/code/settings/comment_settings"❫
❪"code/tools/transcompilers/old_unilang/options/code_partition_method"❫
❪"code/tools/transcompilers/old_unilang/options/design_strategy/object_export_method"❫
❪"code/tools/transcompilers/old_unilang/options/design_strategy/in_out_export_api_style"❫
❪"code/tools/transcompilers/old_unilang/options/filesystem/general_filesystem_naming"❫
❪"code/tools/transcompilers/old_unilang/options/constraint_export_style"❫
❪"code/tools/transcompilers/old_unilang/options/language-specific/c/c_language_version"❫
⚯

⚞⚟

◀
public:

//we start with the worst version of C
C_Language_Version version = C_Language_Version::C89;


//TODO: put into "file system file partioning":
//{
//how many files to break the code up into
Object_Code_Partition_Method object_partition = Object_Code_Partition_Method::THREE;
Global_Code_Partition_Method global_partition = Global_Code_Partition_Method::TWO;

//only relevant when global_partition is set to TWO
bool single_global_file_if_there_is_nothing_to_put_in_the_source = true;

//only relevant when the object_partition is set to TWO or THREE
bool single_object_header_if_there_are_no_methods = true;
//}

//TODO: put into "design strategy":
//{
//what design an object should be exported to
Object_Export_Method object_export_method = Object_Export_Method::NORMAL;
//assuming the export method is "In / Out", how do you want to print the API
In_Out_Export_Api_Style in_out_export_api_style = In_Out_Export_Api_Style::BOOLEANS;
//}


//how folders and files are named
General_Filesystem_Naming filesystem_naming;

//how comments on an object should look
Comment_Settings comment;


//constraint related settings
//{
//TODO: move into separate settings type
std::string constraint_checking_filename = "";
Constraint_Export_Style constraint_export_style = Constraint_Export_Style::CONCISE;
bool use_utility_macros_in_concise = true;
//}
▶
