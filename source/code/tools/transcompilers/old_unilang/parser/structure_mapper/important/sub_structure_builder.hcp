class

❪iostream❫
❪"code/tools/transcompilers/old_unilang/structure/model/structure"❫
❪"code/tools/transcompilers/old_unilang/parser/parser_token"❫
❪"code/tools/transcompilers/old_unilang/parser/structure_mapper/util/parser_aliases"❫
❪"code/tools/transcompilers/old_unilang/parser/structure_mapper/util/parser_utilities"❫
❪"code/tools/transcompilers/old_unilang/options/parser/symbols/token_attribute_settings"❫
❪"code/utilities/types/general/lib"❫
❪"code/tools/transcompilers/old_unilang/options/parser/parser_settings"❫
⚯
❪"code/tools/transcompilers/old_unilang/parser/structure_mapper/important/parser_bindings"❫
❪"code/tools/transcompilers/old_unilang/parser/body_parser/body_token_parser"❫
❪"code/tools/transcompilers/old_unilang/parser/structure_mapper/util/parser_token_stripper"❫
❪"code/tools/transcompilers/old_unilang/parser/structure_mapper/util/special_parser_filters"❫
❪"code/tools/transcompilers/old_unilang/parser/entire_body_parser/entire_body_parser"❫
⚞⚟


//meta section
◀public: static▶ Meta_Section ☀Build_Meta_Section(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Meta_Section part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Code_Type<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Pack_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Description<decltype(part)>);
    
    part.group_names          = Parser_Utilities::Get_Token_Values_Of_Token_Name(tokens, Token_Name::META_DATA_GROUP_NAME);
    part.authors              = Parser_Utilities::Get_Token_Values_Of_Token_Name(tokens, Token_Name::META_DATA_AUTHOR);
    part.bugs                 = Parser_Utilities::Get_Token_Values_Of_Token_Name(tokens, Token_Name::META_DATA_BUG);
    part.warnings             = Parser_Utilities::Get_Token_Values_Of_Token_Name(tokens, Token_Name::META_DATA_WARNING);
    part.depreciation_reasons = Parser_Utilities::Get_Token_Values_Of_Token_Name(tokens, Token_Name::META_DATA_DEPRECIATION);
    
    part.subgroups           = Parser_Token_Stripper::Strip_Out_Type_V2<Meta_Subgroup>     (settings,tokens,Token_Group::META_SUBGROUP           ,Build_Meta_Subgroups);
    part.specifications      = Parser_Token_Stripper::Strip_Out_Type_V2<Specification_File>(settings,tokens,Token_Group::META_SPECIFICATION_FILE ,Build_Meta_Specification_Files);
    part.foreseeable_changes = Parser_Token_Stripper::Strip_Out_Type_V2<Foreseeable_Change>(settings,tokens,Token_Group::META_FORSEEABLE_CHANGE  ,Build_Meta_Foreseeable_Changes);
    
    return part;
❱

◀public: static▶ Type_Item ☀Build_Type_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Type_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Type_Section_Root_Items<decltype(part)>);
    return part;
❱

//object template section
◀public: static▶ Template_Argument ☀Build_Object_Template_Argument(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
	Template_Argument part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Object_Template_Args<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Object_Template_Arg_Qualifiers<decltype(part)>);
	return part;
❱

//macro related (DONE)
◀public: static▶ Macro_Item ☀Build_Macro_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Macro_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Macro<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Macro_Specifiers<decltype(part)>);
    return part;
❱

◀public: static▶ Forward_Declare_Item ☀Build_Forward_Declare_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Forward_Declare_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Forward_Declare<decltype(part)>);
    return part;
❱

//subgroup related (DONE)
◀public: static▶ Meta_Subgroup ☀Build_Meta_Subgroups(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Meta_Subgroup part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Subgroups<decltype(part)>);
    return part;
❱

//specification related (DONE)
◀public: static▶ Specification_File ☀Build_Meta_Specification_Files(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Specification_File part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Specification_File<decltype(part)>);
    return part;
❱

//forseeable changes related (DONE)
◀public: static▶ Foreseeable_Change ☀Build_Meta_Foreseeable_Changes(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Foreseeable_Change part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Meta_Foreseeable_Change<decltype(part)>);
    return part;
❱

//enum (DONE)
◀public: static▶ Enum_Item ☀Build_Enum_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Enum_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum_Access_Specifiers<decltype(part)>);
	part.subgroups = Parser_Token_Stripper::Strip_Out_Type_V2<Enum_Subgroup>(settings,tokens,Token_Group::ENUM_SUBGROUP,Build_Enum_Subgroup_Item);
    part.args      = Parser_Token_Stripper::Strip_Out_Type_V2<Enum_Arg>     (settings,tokens,Token_Group::ENUM_ARG,Build_Enum_Arg_Item);
    return part;
❱

◀public: static▶ Enum_Subgroup ☀Build_Enum_Subgroup_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
	Enum_Subgroup part;
	Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum_Subgroup<decltype(part)>);
	return part;
❱

//enum argument (DONE)
◀public: static▶ Enum_Arg ☀Build_Enum_Arg_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Enum_Arg part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum_Args<decltype(part)>);
    part.subscribed_subgroup = Parser_Token_Stripper::Strip_Out_Type_V2<Enum_Arg_Subscribed_Subgroup>(settings,tokens,Token_Group::ENUM_GROUP_AFFILIATION,Build_Enum_Arg_Subscribed_Group);
    return part;
❱

//enum argument subscribed subgroup
◀public: static▶ Enum_Arg_Subscribed_Subgroup ☀Build_Enum_Arg_Subscribed_Group(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
  Enum_Arg_Subscribed_Subgroup part;
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Enum_Subscribed_Subgroup<decltype(part)>);
  return part;
❱



//namespace related (DONE)
◀public: static▶ Namespace_Item ☀Build_Namespace_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Namespace_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Namespace<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Namespace_Specifiers<decltype(part)>);
    return part;
❱
◀public: static▶ Library_Dependency ☀Build_Library_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Library_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Library<decltype(part)>);
    return part;
❱

◀public: static▶ Compile_Option ☀Build_Compile_Option(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Compile_Option part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Compile_Option<decltype(part)>);
    return part;
❱
◀public: static▶ Link_Option ☀Build_Link_Option(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Link_Option part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Library_Option<decltype(part)>);
    return part;
❱



//template argument (DONE)
◀public: static▶ Function_Argument ☀Build_Function_Arg(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Function_Argument part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Args<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Arg_Qualifiers<decltype(part)>);

	part.type_specializations = Parser_Token_Stripper::Strip_Out_Type_V2<Type_Specialization>(settings,tokens,Token_Group::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS,Build_Function_Arg_Type_Specialization);
    
    part.import_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Module_Dependency>(settings,tokens,Token_Group::FUNCTION_ARGUMENT_TYPE_MODULE_DEPENDENCIES,Build_Func_Arg_Module);
    part.library_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Library_Dependency>(settings,tokens,Token_Group::FUNCTION_ARGUMENT_TYPE_LIBRARY_DEPENDENCIES,Build_Func_Arg_Lib);
    part.scope_specifiers = Parser_Token_Stripper::Strip_Out_Type_V2<Scope_Specifier>(settings,tokens,Token_Group::FUNCTION_ARGUMENT_SCOPE,Build_Func_Arg_Scope);
    
    return part;
❱

//function argument (DONE)
◀public: static▶ Function_Result    ☀Build_Function_Result(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Function_Result part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Results<decltype(part)>);
	//Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Result_Type_Specializations<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Result_Qualifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Result_Qualifiers2<decltype(part)>);

	part.type_specializations = Parser_Token_Stripper::Strip_Out_Type_V2<Type_Specialization>(settings,tokens,Token_Group::FUNCTION_RESULT_TYPE_SPECIALIZATIONS,Build_Function_Result_Type_Specialization);
    
    part.import_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Module_Dependency>(settings,tokens,Token_Group::FUNCTION_RESULT_TYPE_MODULE_DEPENDENCIES,Build_Func_Result_Module);
    part.library_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Library_Dependency>(settings,tokens,Token_Group::FUNCTION_RESULT_TYPE_LIBRARY_DEPENDENCIES,Build_Func_Result_Lib);
    part.scope_specifiers = Parser_Token_Stripper::Strip_Out_Type_V2<Scope_Specifier>(settings,tokens,Token_Group::FUNCTION_RESULT_SCOPE,Build_Func_Result_Scope);
    
    return part;
❱

◀public: static▶ Module_Dependency ☀Build_Func_Arg_Module(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Module_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Arg_Module<decltype(part)>);
    return part;
❱
◀public: static▶ Library_Dependency ☀Build_Func_Arg_Lib(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Library_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Arg_Lib<decltype(part)>);
    return part;
❱
◀public: static▶ Scope_Specifier ☀Build_Func_Arg_Scope(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Scope_Specifier part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Arg_Scope<decltype(part)>);
    return part;
❱

◀public: static▶ Module_Dependency ☀Build_Func_Result_Module(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Module_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Result_Module<decltype(part)>);
    return part;
❱
◀public: static▶ Library_Dependency ☀Build_Func_Result_Lib(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Library_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Result_Lib<decltype(part)>);
    return part;
❱
◀public: static▶ Scope_Specifier ☀Build_Func_Result_Scope(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Scope_Specifier part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Func_Result_Scope<decltype(part)>);
    return part;
❱




◀public: static▶ Type_Specialization ☀Build_Function_Arg_Type_Specialization(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Type_Specialization part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Arg_Type_Specializations<decltype(part)>);
    return part;
❱
◀public: static▶ Type_Specialization ☀Build_Function_Result_Type_Specialization(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Type_Specialization part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Result_Type_Specializations<decltype(part)>);
    return part;
❱
◀public: static▶ Type_Specialization ☀Build_Data_Member_Type_Specializations(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Type_Specialization part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Specializations<decltype(part)>);

    part.scope_specifiers = Parser_Token_Stripper::Strip_Out_Type_V2<Scope_Specifier>(settings,tokens,Token_Group::DATA_MEMBER_TYPE_SPECIALIZATIONS_SCOPE,Build_Data_Member_Type_Specializations_Scope_Specifiers);
    return part;
❱
◀public: static▶ Module_Dependency ☀Build_Data_Member_Type_Module_Dependencies(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Module_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Module_Dependencies<decltype(part)>);
    return part;
❱
◀public: static▶ Library_Dependency ☀Build_Data_Member_Type_Library_Dependencies(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Library_Dependency part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Library_Dependencies<decltype(part)>);
    return part;
❱

◀public: static▶ Scope_Specifier ☀Build_Data_Member_Type_Scope_Specifiers(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Scope_Specifier part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Scope_Specifier<decltype(part)>);
    return part;
❱
◀public: static▶ Parent_Type ☀Build_Data_Member_Parent_Type(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Parent_Type part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Parent_Type<decltype(part)>);
    return part;
❱

◀public: static▶ Scope_Specifier ☀Build_Data_Member_Type_Specializations_Scope_Specifiers(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
	Scope_Specifier part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Type_Specializations_Scope_Specifier<decltype(part)>);
	return part;
❱






//Preconditions (DONE)
◀public: static▶ Contract_Precondition ☀Build_Precondition(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Contract_Precondition part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Preconditions<decltype(part)>);
    return part;
❱

//Postconditions (DONE)
◀public: static▶ Contract_Postcondition ☀Build_Postcondition(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Contract_Postcondition part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Function_Postconditions<decltype(part)>);
    return part;
❱
























//inheritance of class related (DONE)
◀public: static▶ Inheritance_Item ☀Build_Inheritance_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Inheritance_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Inheritence<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Inheritence_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Inheritence_Specifiers2<decltype(part)>);
    return part;
❱




//method related (Look into body parser)
◀public: static▶ Method_Item ☀Build_Method_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
   
    Method_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Main_Function_Items<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Class<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Value_Overrides<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Storage<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Virtuality<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Implicit_Method_Modifier<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Event<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Method_Specifiers_Other<decltype(part)>);
    
    //go a level deeper
    part.stamps                             = Parser_Token_Stripper::Strip_Out_Type_V2<Method_Stamp>(settings,tokens,Token_Group::FUNCTION_STAMP,Build_Stamp_Item);
    part.names.alternative_expression_names = Parser_Token_Stripper::Strip_Out_Type_V2<Alternative_Expression_Name>(settings,tokens,Token_Group::FUNCTION_TEMPLATE_ARGUMENT,Build_Alt_Expression_Name_Item);
    part.template_arguments                 = Parser_Token_Stripper::Strip_Out_Type_V2<Template_Argument>(settings,tokens,Token_Group::FUNCTION_TEMPLATE_ARGUMENT,Build_Template_Arg_Item);
    part.function_arguments                 = Parser_Token_Stripper::Strip_Out_Type_V2<Function_Argument>(settings,tokens,Token_Group::FUNCTION_ARGUMENT,Build_Function_Arg);
    part.return_results                     = Parser_Token_Stripper::Strip_Out_Type_V2<Function_Result>(settings,tokens,Token_Group::FUNCTION_RESULT,Build_Function_Result);
    part.contracts.preconditions            = Parser_Token_Stripper::Strip_Out_Type_V2<Contract_Precondition>(settings,tokens,Token_Group::FUNCTION_PRECONDITION,Build_Precondition);
    part.contracts.postconditions           = Parser_Token_Stripper::Strip_Out_Type_V2<Contract_Postcondition>(settings,tokens,Token_Group::FUNCTION_POSTCONDITION,Build_Postcondition);
    part.contracts.postconditions           = Parser_Token_Stripper::Strip_Out_Type_V2<Contract_Postcondition>(settings,tokens,Token_Group::FUNCTION_POSTCONDITION,Build_Postcondition);
    part.unit_tests.test_cases              = Parser_Token_Stripper::Strip_Out_Type_V2<Test_Case>(settings,tokens,Token_Group::FUNCTION_TEST_CASE,Build_Function_Test_Case);
    part.benchmarks.benchmarks              = Parser_Token_Stripper::Strip_Out_Type_V2<Benchmark>(settings,tokens,Token_Group::FUNCTION_BENCHMARK,Build_Function_Benchmark);
    
    //store the original_function_name as the function_name may change later
    //TODO: we probably want to remove this and instead give Token Values a history
    part.names.original_function_name = part.names.function_name;
    
    
    
    //body parser
    //std::cout << as_string(part.names.function_name.value) << std::endl;
    auto function_body = Parser_Utilities::Filter_Out_Tokens_By_Token_Name(tokens,Token_Name::FUNCTION_BODY);
    /* TODO: depreciate this: */ for (auto it: function_body){part.body = Body_Token_Parser::Parse_Method_Body_Into_Stream_Of_Tokens(settings,it.content);}
    /* in place of this: */      for (auto it: function_body){part.entire_body = Entire_Body_Parser::Parse(it.content,settings);}
    
    return part;
❱

◀public: static▶ Test_Case ☀Build_Function_Test_Case(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Test_Case part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Function_Test_Main<decltype(part)>);
    part.reasons_for_failing = Parser_Token_Stripper::Strip_Out_Type_V2<Test_Failure_Reason>(settings,tokens,Token_Group::FUNCTION_TEST_CASE_REASON_FOR_FAILING,Build_Function_Test_Case_Failure_Reason);
    return part;
❱

◀public: static▶ Benchmark ☀Build_Function_Benchmark(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Benchmark part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Benchmark_Main<decltype(part)>);
    part.args = Parser_Token_Stripper::Strip_Out_Type_V2<Benchmark_Arg>(settings,tokens,Token_Group::FUNCTION_BENCHMARK_ARG,Build_Benchmark_Arg);
    return part;
❱

◀public: static▶ Benchmark_Arg ☀Build_Benchmark_Arg(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Benchmark_Arg part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Benchmark_Arg<decltype(part)>);
    return part;
❱


◀public: static▶ Test_Failure_Reason ☀Build_Function_Test_Case_Failure_Reason(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Test_Failure_Reason part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Function_Test_Failure_Reason<decltype(part)>);
    return part;
❱

◀public: static▶ Method_Stamp ☀Build_Stamp_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

	Method_Stamp part;
	Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Stamp_Name<decltype(part)>);
    part.values = Parser_Token_Stripper::Strip_Out_Type_V2<Method_Stamp_Value>(settings,tokens,Token_Group::FUNCTION_STAMP_VALUE,Build_Stamp_Value);
	return part;
❱
◀public: static▶ Method_Stamp_Value ☀Build_Stamp_Value(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

	Method_Stamp_Value part;
	Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Stamp_Value<decltype(part)>);
	return part;
❱

//Bind_Stamp_Name
//Bind_Stamp_Value

◀public: static▶ Typedef_Item ☀Build_Typedef_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Typedef_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Typedef_Specifiers_Class<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Typedef_Root_Items<decltype(part)>);
    
    part.arguments = Parser_Token_Stripper::Strip_Out_Type_V2<Typedef_Argument>(settings,tokens,Token_Group::TYPEDEF_ARGUMENT,Build_Typedef_Argument);
    part.results = Parser_Token_Stripper::Strip_Out_Type_V2<Typedef_Result>(settings,tokens,Token_Group::TYPEDEF_RESULT,Build_Typedef_Result);
    
    return part;
❱

◀public: static▶ Typedef_Argument ☀Build_Typedef_Argument(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Typedef_Argument part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Typedef_Argument<decltype(part)>);
    return part;
❱

◀public: static▶ Typedef_Result ☀Build_Typedef_Result(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Typedef_Result part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Typedef_Result<decltype(part)>);
    return part;
❱

◀public: static▶ Citation ☀Build_Citation(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Citation part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Citation<decltype(part)>);
    
    part.attributes = Parser_Token_Stripper::Strip_Out_Type_V2<Citation_Attribute>(settings,tokens,Token_Group::CITATION_ATTRIBUTES,Build_Citation_Attribute);
    
    return part;
❱
◀public: static▶ Citation_Attribute ☀Build_Citation_Attribute(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Citation_Attribute part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Citation_Attribute<decltype(part)>);
    return part;
❱


◀public: static▶ Paragraph ☀Build_Literature_Paragraph(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Paragraph part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Paragraph_Properties<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Paragraph_Properties2<decltype(part)>);
    
    part.sentences =      Parser_Token_Stripper::Strip_Out_Type_V2<Sentence>     (settings,tokens,Token_Group::LITERATURE_SENTENCE     ,Build_Paragraph_Sentence);
    part.outline_points = Parser_Token_Stripper::Strip_Out_Type_V2<Outline_Point>(settings,tokens,Token_Group::LITERATURE_OUTLINE_POINT,Build_Paragraph_Outline_Point);
    part.thought_connections = Parser_Token_Stripper::Strip_Out_Type_V2<Thought_Connection>(settings,tokens,Token_Group::LITERATURE_THOUGHT_CONNECTION,Build_Paragraph_Thought_Connections);
    return part;
❱
◀public: static▶ Sentence ☀Build_Paragraph_Sentence(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Sentence_Properties<decltype(part)>);
    part.tags = Parser_Token_Stripper::Strip_Out_Type_V2<Sentence_Tag>(settings,tokens,Token_Group::LITERATURE_SENTENCE_TAG,Build_Sentence_Tag);
    part.images = Parser_Token_Stripper::Strip_Out_Type_V2<Sentence_Image>(settings,tokens,Token_Group::LITERATURE_SENTENCE_IMAGE,Build_Sentence_Image);
    part.tables = Parser_Token_Stripper::Strip_Out_Type_V2<Sentence_Table>(settings,tokens,Token_Group::LITERATURE_SENTENCE_TABLE,Build_Sentence_Table);
    part.codes = Parser_Token_Stripper::Strip_Out_Type_V2<Code_Line>(settings,tokens,Token_Group::LITERATURE_SENTENCE_CODE,Build_Sentence_Code);
    return part;
❱
◀public: static▶ Outline_Point ☀Build_Paragraph_Outline_Point(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Outline_Point part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Paragraph_Outline_Point<decltype(part)>);
    return part;
❱
◀public: static▶ Thought_Connection ☀Build_Paragraph_Thought_Connections(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Thought_Connection part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Paragraph_Thought_Connection<decltype(part)>);
    return part;
❱

◀public: static▶ Sentence_Tag ☀Build_Sentence_Tag(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence_Tag part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Sentence_Tags<decltype(part)>);
    return part;
❱
◀public: static▶ Code_Line ☀Build_Sentence_Code(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Code_Line part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Sentence_Code<decltype(part)>);
    return part;
❱
◀public: static▶ Sentence_Image ☀Build_Sentence_Image(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence_Image part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Sentence_Images<decltype(part)>);
    return part;
❱
◀public: static▶ Sentence_Table ☀Build_Sentence_Table(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence_Table part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Table_Properties<decltype(part)>);
    part.headers = Parser_Token_Stripper::Strip_Out_Type_V2<Sentence_Table_Header>(settings,tokens,Token_Group::LITERATURE_SENTENCE_TABLE_HEADER,Build_Sentence_Table_Header);
    part.rows = Parser_Token_Stripper::Strip_Out_Type_V2<Sentence_Table_Row>(settings,tokens,Token_Group::LITERATURE_SENTENCE_TABLE_ROW,Build_Sentence_Table_Row);
    return part;
❱
◀public: static▶ Sentence_Table_Header ☀Build_Sentence_Table_Header(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence_Table_Header part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Table_Header<decltype(part)>);
    return part;
❱
◀public: static▶ Sentence_Table_Row ☀Build_Sentence_Table_Row(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    Sentence_Table_Row part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Literature_Table_Row<decltype(part)>);
    return part;
❱

//import interface related
◀public: static▶ Import_Item ☀Build_Import_Interface_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Import_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Interface_Import_Names<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Interface_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Interface_Specifiers2<decltype(part)>);
    part.relationships = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Relationship>(settings,tokens,Token_Group::IMPORT_INTERFACE_RELATIONSHIP,Build_Interface_Relationships);
    return part;
❱

//import implementation related
◀public: static▶ Import_Item ☀Build_Import_Implementation_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Import_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Implementation_Import_Names<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Implementation_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Implementation_Specifiers2<decltype(part)>);
    part.relationships = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Relationship>(settings,tokens,Token_Group::IMPORT_IMPLEMENTATION_RELATIONSHIP,Build_Implementation_Relationships);
    return part;
❱

//import test related
◀public: static▶ Import_Item ☀Build_Import_Test_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰

    Import_Item part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Test_Import_Names<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Test_Specifiers<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Import_Test_Specifiers2<decltype(part)>);
    part.relationships = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Relationship>(settings,tokens,Token_Group::IMPORT_TEST_RELATIONSHIP,Build_Test_Relationships);
    return part;
❱

◀public: static▶ Import_Relationship ☀Build_Interface_Relationships(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
  Import_Relationship part;
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Interface_Import_Related<decltype(part)>);
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Interface_Import_Relationships<decltype(part)>);
  return part;
❱
◀public: static▶ Import_Relationship ☀Build_Implementation_Relationships(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
  Import_Relationship part;
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Implementation_Import_Related<decltype(part)>);
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Implementation_Import_Relationships<decltype(part)>);
  return part;
❱
◀public: static▶ Import_Relationship ☀Build_Test_Relationships(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
  Import_Relationship part;
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Test_Import_Related<decltype(part)>);
  Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Build_Test_Import_Relationships<decltype(part)>);
  return part;
❱


//template arguments (DONE)
◀public: static▶ Template_Argument ☀Build_Template_Arg_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Template_Argument part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Template_Args<decltype(part)>);
    return part;
❱


//alternate expression names (DONE)
◀public: static▶ Alternative_Expression_Name ☀Build_Alt_Expression_Name_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    
    Alternative_Expression_Name part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Alt_Express_Name<decltype(part)>);
    return part;
❱


//data members (DONE)
◀public: static▶ Data_Member_Item ☀Build_Data_Member_Item(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Data_Member_Item part;
    
    //handle singles
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Members<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Specifiers_Class<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Specifiers_Other<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Qualifiers_Storage<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Qualifiers_Other<decltype(part)>);
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_State_Specifier<decltype(part)>);
    
    
    //sub data member properties
    part.comment_pair = Parser_Token_Stripper::Strip_Out_Type_V2<Key_Value_Pair>(settings,tokens,Token_Group::DATA_MEMBER_KEY_VALUES,Build_Data_Member_Key_Value_Pair);
    part.value_constraints = Parser_Token_Stripper::Strip_Out_Type_V2<Value_Constraints>(settings,tokens,Token_Group::DATA_MEMBER_VALUE_CONSTRAINTS,Build_Data_Member_Value_Constraints);
    part.value_meaning = Parser_Token_Stripper::Strip_Out_Type_V2<Value_Meaning>(settings,tokens,Token_Group::DATA_MEMBER_VALUE_MEANING,Build_Data_Member_Value_Meaning);
    part.value_transition_meaning = Parser_Token_Stripper::Strip_Out_Type_V2<Value_Transition_Meaning>(settings,tokens,Token_Group::DATA_MEMBER_VALUE_TRANSITION_MEANING,Build_Data_Member_Value_Transition_Meaning);
	part.type_specializations = Parser_Token_Stripper::Strip_Out_Type_V2<Type_Specialization>(settings,tokens,Token_Group::DATA_MEMBER_TYPE_SPECIALIZATIONS,Build_Data_Member_Type_Specializations);
    part.module_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Module_Dependency>(settings,tokens,Token_Group::DATA_MEMBER_TYPE_MODULE_DEPENDENCIES,Build_Data_Member_Type_Module_Dependencies);
    part.library_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Library_Dependency>(settings,tokens,Token_Group::DATA_MEMBER_TYPE_LIBRARY_DEPENDENCIES,Build_Data_Member_Type_Library_Dependencies);
    part.scope_specifiers = Parser_Token_Stripper::Strip_Out_Type_V2<Scope_Specifier>(settings,tokens,Token_Group::DATA_MEMBER_SCOPE,Build_Data_Member_Type_Scope_Specifiers);
    part.parent_types = Parser_Token_Stripper::Strip_Out_Type_V2<Parent_Type>(settings,tokens,Token_Group::PARENT_TYPES,Build_Data_Member_Parent_Type);
    
    return part;
❱


//sub data member characteristic
◀public: static▶ Key_Value_Pair ☀Build_Data_Member_Key_Value_Pair(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Key_Value_Pair part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Key_Value_Pair<decltype(part)>);
    return part;
❱
◀public: static▶ Value_Constraints ☀Build_Data_Member_Value_Constraints(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Value_Constraints part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Value_Constraints<decltype(part)>);
    return part;
❱
◀public: static▶ Value_Meaning ☀Build_Data_Member_Value_Meaning(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Value_Meaning part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Value_Meaning<decltype(part)>);
    return part;
❱
◀public: static▶ Value_Transition_Meaning ☀Build_Data_Member_Value_Transition_Meaning(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    
    Value_Transition_Meaning part;
    Get_And_Apply_Bindings(tokens,settings,part,Parser_Bindings::Bind_Data_Member_Value_Transition_Meaning<decltype(part)>);
    return part;
❱







//generic functions for bindings
◀
public: template <typename T, typename Fun>
static auto Get_And_Apply_Bindings(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings, T & sub_struct, Fun function) -> void{

  auto bindings = function(sub_struct,settings);
  Apply_Bindings(tokens,bindings);
}
▶

◀private: static▶ void ☀Apply_Bindings(std::vector<Parser_Token> const& tokens, std::vector<std::pair<Token_Name,std::reference_wrapper<Token_Value>>> & bindings)❰

    //parse based on bindings
    for (auto & binding: bindings){
        auto members = Parser_Utilities::Filter_Out_Tokens_By_Token_Name(tokens,binding.first);
        for (auto & member: members){Parser_Utilities::Set_Token_Value_From_Parser_Token(binding.second,member);}
    }
❱

◀private: static▶ void ☀Apply_Bindings(std::vector<Parser_Token> const& tokens, std::vector<std::pair<Token_Name,std::vector<std::pair<wchar_t,std::reference_wrapper<bool>>>>>  & bindings)❰
    for (auto & binding: bindings){
        auto specifiers = Parser_Utilities::Filter_Out_Tokens_By_Token_Name(tokens,binding.first);
        for (auto specifier: specifiers){
            for (auto& spec_binding : binding.second){
                spec_binding.second.get() = Contains(specifier.content,spec_binding.first);
            }
        }
    }
❱


◀private: template <typename T, typename U>
static void Apply_Bindings(std::vector<Parser_Token> const& tokens, Parser::Any_Value_Mapping<T,U> & binding){
    
    //filter by the token name
    auto filtered = Parser_Utilities::Filter_Out_Tokens_By_Token_Name(tokens,binding.token_name);

    //start by assuming we couldn't find it and apply the fallback
    //if we find it later, we simply overwrite the binded result with what is found
    binding.binded.get() = binding.fallback;

    for (auto token: filtered){
        for (auto pair: binding.map){
            
            //apply match if one exists
            //return early if we find a match
            if (Contains(token.content,pair.from)){
                binding.binded.get() = pair.to;
                
                return;
            }
        }
    }
}▶

