class
❪vector❫
❪string❫
❪unordered_map❫
❪fstream❫
❪"code/tools/transcompilers/hcp-compiler/programatic/data/function"❫
❪"code/tools/transcompilers/hcp-compiler/programatic/data/headers"❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚯
❪"code/tools/transcompilers/hcp-compiler/programatic/data/code"❫
❪"code/tools/transcompilers/hcp-compiler/programatic/code_getter"❫
❪"code/utilities/types/strings/transformers/wrap/lib"❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/tree/shortest_unique_name"❫
❪"code/utilities/types/tree/converters/tree_full_paths_getter"❫
❪"code/utilities/types/tree/children_path_names"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/observers/characteristic/is_cpp_keyword_checker"❫
❪"code/utilities/types/tree/first_full_path_name"❫
❪"code/tools/transcompilers/tree_hcp/shared/path_naming"❫
⚞⚟

◀public: static▶ void ☀Create(std::string const& input_file, std::string const& output_file)❰

    auto all_text = Read_Entire_File_Into_String(input_file);
    auto str_tree = String_To_String_Tree::Convert(all_text);

    Code code;
    code.headers = Get_Headers();
    code.functions.emplace_back(Get_Function(str_tree));
    auto file_content = Code_Getter::Get(code);
    
    Write_Output(output_file,file_content);
❱

◀private: static▶ Headers ☀Get_Headers()❰

    Headers x;
    x.public_headers.emplace_back("string");
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/string_to_string_tree"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/data_structures/tree/generic/tokens/tree_token"));
    x.public_headers.emplace_back(As_Wrapped_In_Double_Quotes("code/utilities/types/strings/transformers/appending/lib"));
    return x;
❱

◀private: static▶ Function ☀Get_Function(String_Tree const& tree)❰
    Function x;
    x.name = "Parse";
    x.arguments.emplace_back("std::vector<Tree_Token> const& tokens");
    x.return_val = Root_Type(tree);
    x.body = Get_Body(tree);
    return x;
❱

◀private: static▶ std::string ☀Get_Body(String_Tree const& tree)❰
    std::string x;
    
    x += Root_Type(tree) + " x;";

    
    x += "return x;";
    return x;
❱

◀private: static▶ std::string ☀Root_Type(String_Tree const& tree)❰
    auto path = First_Full_Path_Name::Get(tree);
    return Path_Naming::Get_Struct_Typename(tree,path);
❱

◀private: static▶ void ☀Write_Output(std::string const& output_file, std::wstring const& file_content)❰
    std::wofstream outfile(output_file);
    outfile << file_content;
    outfile.close();
❱