class
❪string❫
❪utility❫
❪"code/transcompilers/unilang/structure/model/sections/meta/meta_section"❫
❪"code/transcompilers/unilang/options/sections/meta/meta_options"❫
⚯
❪fstream❫
❪iostream❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/time/calendar/tm_wrappers/lib"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Meta_Copyright_Tag_Options const& options, std::vector<Organization> const& orgs, std::string const& file_name)❰
    std::string str;
    if (options.print){
        
        
        //possibly use doxygen tag
        std::string optional_tag_name;
        if (options.use_tag){
            optional_tag_name = options.copyright_tag_symbol + options.copyright_tag_name + " ";
        }
        
        //possibly show company name first
        if (options.show_company_before){
            for (auto org: orgs){
			 str += org.company_name + " ";
            }
        }
        
        //print copyright with possible date
        auto other_stuff = optional_tag_name + options.copyright_date_prefix_statement;
        Append(str,other_stuff);
        
        if (!other_stuff.empty())
        {
            str += " ";
        }
        
        std::string date_part = Get_Date_Part(options.print_method,options,file_name);
        Append_With_Newline(str,date_part + options.copyright_date_suffix_statement);
    }
    
    return str;
❱

◀private: static▶ std::string ☀Get_Date_Part(Meta_Copyright_Print_Method const& method, Meta_Copyright_Tag_Options const& options, std::string const& file_name)❰
    std::string str;
    
    switch (method){
        case Meta_Copyright_Print_Method::SPECIFIED_START_DATE_ONLY: str+=options.start_date; break;
        case Meta_Copyright_Print_Method::DERIVED_START_DATE_ONLY: str+=Get_Derived_Start_Date(options,file_name); break;
        case Meta_Copyright_Print_Method::SPECIFIED_DATE_RANGE: str+=options.start_date + options.year_separator + options.end_date; break;
        case Meta_Copyright_Print_Method::SPECIFIED_START_DATE_WITH_DERIVED_END_DATE: str+=options.start_date + options.year_separator + Current_Year_As_String(); break;
        default:;
    }
    
    
    return str;
❱


◀private: static▶ std::string ☀Get_Derived_Start_Date(Meta_Copyright_Tag_Options const& options, std::string const& file_name)❰
    
    if (options.preserve_creation_date_when_deriving_start_date){
        const auto date_file = file_name + ".date";
        if (File_Exists(date_file)){
            std::ifstream infile(date_file);
            std::string line;
            std::getline(infile,line);
            return line;
        }
    }
    
    return Current_Year_As_String();
❱

◀private: static▶ std::string ☀Current_Year_As_String()❰
    return std::to_string(Current_Year());
❱