class


❪"code/transcompilers/unilang/structure/model/sections/meta/meta_section"❫
❪"code/transcompilers/unilang/options/sections/meta/meta_options"❫
❪"code/transcompilers/unilang/options/sections/meta/meta_organization_options"❫
⚯
❪"code/transcompilers/unilang/boilerplate_printer/meta_block/sections/meta_company_name_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/transformers/other/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(std::vector<Organization> const& organizations, Meta_Organization_Options const& options)❰
    std::string str;
    
    //optionally get bold tag
    std::string optional_bold_tag;
    if (options.bolded_tag){
        optional_bold_tag = options.bold_tag + " ";
    }
    
    //create organization label line
    Append_With_Newline(str,optional_bold_tag + options.tag_name + ":");
    
    for (auto const& it: organizations){
        std::string org_str;
        org_str += Meta_Company_Name_Getter::Get_Printable_Name_From_Organization(it) + '\n';
        org_str += it.address.number + ' ' + it.address.street + '\n';
        org_str += it.address.city + ", " + it.address.state + ' ' + it.address.zip + '\n';
        org_str += it.company_phone_number;
        
        Add_Prefix_To_Each_Line(org_str,"@n    ");
        Append_With_Newline(str,org_str);
        
    }
    
    
    return str;
❱
