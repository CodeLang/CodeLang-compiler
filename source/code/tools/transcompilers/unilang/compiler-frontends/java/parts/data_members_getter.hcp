class

❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/utilities/contributor/contributor"❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/options/language-specific/java/java_settings"❫
❪"code/tools/transcompilers/unilang/options/general_options"❫
❪"code/tools/transcompilers/unilang/options/language-specific/c/c_export_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/transcompilers/unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/tools/transcompilers/unilang/boilerplate_printer/boilerplate_printer"❫
❪"code/tools/transcompilers/unilang/structure/print/filename/file_name_getter"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/tools/transcompilers/unilang/structure/print/doxygen_block_printer"❫
❪"code/tools/transcompilers/unilang/structure/print/derivers/identifier_name_deriver"❫
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
❪"code/utilities/linguistics/computer/keywords/visibility/visibility_keyword_getter"❫
❪"code/utilities/linguistics/computer/types/default_initialize/default_initialize_getter"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, std::vector<Contributor> const& contributors, Java_Settings const& settings)❰
    std::string x;
    
    //TODO: FIX THIS.  DONT DO THIS:
    //WE SHOULD PASS GENERAL/PORTION into the data member printer as well
    //THIS IS A TEMP HACK/FIX.
    C_Export_Settings bad_temp;
    bad_temp.portion = settings.portion;
    bad_temp.general = settings.general;
    
    for (size_t i = 0; i < structure.data_members.data_members.size(); ++i){
        x += Doxygen_Block_Printer::Get_Doxygen_Member_Item_Comment(structure.data_members.data_members[i],bad_temp,4);
        x += "    ";
        x += Get_Visibility_Specifiers(structure.data_members.data_members[i]);
        x += " ";
        x += Posibily_Get_Static_Specifier(structure.data_members.data_members[i]);
        x += " ";
        x += Posibily_Get_Final_Specifier(structure.data_members.data_members[i]);
        x += Get_Real_Type(structure.data_members.data_members[i]);
        x += " ";
        x += Identifier_Name_Deriver::Derive_Name(structure.data_members.data_members[i],bad_temp,false,true);
        x += Default_Initialize_Getter::Possibly_Get_Default_Value(structure.data_members.data_members[i],Source_Language::JAVA);
        x += ";\n\n";

    }
    
    return x;
❱


◀public: static▶ std::string ☀Get_Real_Type(Data_Member_Item const& mem)❰
    auto type       = as_string(mem.type.value);
    auto real_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(type, Source_Language::JAVA).name;
    return real_type;
❱
◀public: static▶ std::string ☀Get_Visibility_Specifiers(Data_Member_Item const& mem)❰

    return Visibility_Keyword_Getter::Get(mem.class_access,Source_Language::JAVA);
❱

◀public: static▶ std::string ☀Posibily_Get_Final_Specifier(Data_Member_Item const& mem)❰
    if (mem.is_const){
        return "final ";
    }
    return "";
❱
◀public: static▶ std::string ☀Posibily_Get_Static_Specifier(Data_Member_Item const& mem)❰
    if (mem.storage == Storage_Specifier::STATIC){
        return "static ";
    }
    else{
        std::cout << "nope" << std::endl;
    }
    return "";
❱