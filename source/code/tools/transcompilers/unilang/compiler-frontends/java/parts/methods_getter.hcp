class

❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/contributor/contributor"❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/options/language-specific/java/java_settings"❫
❪"code/tools/transcompilers/unilang/structure/print/function_declaration_location"❫
❪"code/tools/transcompilers/unilang/structure/model/sections/meta/code_type"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/transcompilers/unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/converters/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/tools/transcompilers/unilang/boilerplate_printer/boilerplate_printer"❫
❪"code/tools/transcompilers/unilang/structure/print/filename/file_name_getter"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/tools/transcompilers/unilang/structure/print/return_type_str_getter"❫
❪"code/tools/transcompilers/unilang/structure/print/doxygen_block_printer"❫
❪"code/tools/transcompilers/unilang/structure/print/shared_printer"❫
❪"code/utilities/types/general/lib"❫
❪"code/tools/transcompilers/unilang/structure/print/derivers/type_name_deriver"❫
❪"code/tools/transcompilers/unilang/structure/print/derivers/identifier_name_deriver"❫
❪"code/utilities/linguistics/computer/keywords/visibility/visibility_keyword_getter"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, std::vector<Contributor> const& contributors, Java_Settings const& settings)❰
    std::string x;
    
    //TODO: FIX THIS.  DONT DO THIS:
    //WE SHOULD PASS GENERAL/PORTION into the data member printer as well
    //THIS IS A TEMP HACK/FIX.
    C_Export_Settings bad_temp;
    bad_temp.portion = settings.portion;
    bad_temp.general = settings.general;
    
    for (auto it: structure.methods.methods){
        x += Doxygen_Block_Printer::Get_Doxygen_Method_Comment(it,structure.methods.methods,bad_temp);
        x += "\n";
        x += Get_Signature(structure.name,it,settings);
        x += "\n";
        x += Get_Possible_Body(it,settings);
    }
    
    return x;
❱

◀private: static▶ std::string ☀Get_Possible_Body(Method_Item const& method, Java_Settings const& settings)❰
    std::string x;
    
    //regular methods have a body
    if (!Method_Is_Abstract(method)){
        x += "{\n";
        x += Get_Body(method,settings);
        x += "\n}\n";
    }
    
    //abstract methods do not have a body
    else{
        x += ";";
    }
    
    return x;
❱

◀private: static▶ std::string ☀Get_Signature(std::string const& name, Method_Item const& method, Java_Settings const& settings)❰

    //TODO: FIX THIS.  DONT DO THIS:
    //WE SHOULD PASS GENERAL/PORTION into the data member printer as well
    //THIS IS A TEMP HACK/FIX.
    C_Export_Settings bad_temp;
    bad_temp.portion = settings.portion;
    bad_temp.general = settings.general;
    
    std::string x;
    x += Possibly_Get_Static_Keyword(method,settings);
    x += " ";
    x += Possibly_Get_Abstract_Keyword(method,settings);
    x += " ";
    x += Visibility_Keyword_Getter::Get(method.class_access,Source_Language::JAVA);
    x += " ";
    x += Return_Type_Str_Getter::Get_Java(name,method,settings);
    x += " ";
    x += Shared_Printer::Derive_Function_Name(name,Code_Type::PRODUCT_TYPE,method,bad_temp);
    x += Get_Arguments(method,settings);
    x += Possible_Thrown_Exceptions(method,settings);
    
    
    return x;
❱

◀private: static▶ std::string ☀Get_Arguments(Method_Item const& method, Java_Settings const& settings)❰
    std::string x;
    x += "(";
        Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(method.function_arguments
         ,[&](Function_Argument arg){
            
           x += Get_Printable_Argument(arg,settings);
           x += ", ";
         }
         ,[&](Function_Argument arg){
           x += Get_Printable_Argument(arg,settings);
         });
        
    x += ")";
    return x;
❱

◀private: static▶ std::string ☀Possible_Thrown_Exceptions(Method_Item const& method, Java_Settings const& settings)❰
    std::string x;
    
    auto expression = as_string(method.exception_expression.value);
    if (!expression.empty()){
        x+= " throws " + expression;
    }
    
    return x;
❱


◀private: static▶ std::string ☀Get_Printable_Argument(Function_Argument const& arg, Java_Settings const& settings)❰

    //TODO: FIX THIS.  DONT DO THIS:
    //WE SHOULD PASS GENERAL/PORTION into the data member printer as well
    //THIS IS A TEMP HACK/FIX.
    C_Export_Settings bad_temp;
    bad_temp.portion = settings.portion;
    bad_temp.general = settings.general;
    
    std::string x;
    
   auto type = as_string(arg.type.value);
   auto real_type = Type_Name_Deriver::Derive_Name(arg,Source_Language::JAVA);
    x += real_type;
    x += " ";
    x += Identifier_Name_Deriver::Derive_Name(arg,bad_temp);
    return x;
❱

◀private: static▶ std::string ☀Possibly_Get_Static_Keyword(Method_Item const& method, Java_Settings const& settings)❰
      
      std::string x;
      
    //TODO: MOVE OUT
    std::string static_keyword = "static";
    std::string static_keyword_spacer = " ";
     
     //static qualifier
     if (method.storage == Storage_Specifier::STATIC){
        Append(x,static_keyword);
        Append(x,static_keyword_spacer);
     }
     return x;
❱
◀private: static▶ std::string ☀Possibly_Get_Abstract_Keyword(Method_Item const& method, Java_Settings const& settings)❰
      
      std::string x;
      
    //TODO: MOVE OUT
    std::string keyword = "abstract";
    std::string keyword_spacer = " ";
     
     //static qualifier
     if (Method_Is_Abstract(method)){
        Append(x,keyword);
        Append(x,keyword_spacer);
     }
     return x;
❱

◀private: static▶ bool ☀Method_Is_Abstract(Method_Item const& method)❰
    if (method.inheritence.virtuality == Method_Virtuality::UNPURE_VIRTUAL || method.inheritence.virtuality == Method_Virtuality::PURE_VIRTUAL){
        return true;
    }
    return false;
❱



◀private: static▶ std::string ☀Get_Body(Method_Item const& method, Java_Settings const& settings)❰
    std::string x;
    for (auto const& it: method.body){
        x += as_string(it.value);
    }
    return x;
❱