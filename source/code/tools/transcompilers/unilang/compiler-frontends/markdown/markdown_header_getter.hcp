class
❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/contributor/contributor"❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string title;
    if (!p.title.value.empty()){
        
        //add the title marker
        Append_A_Newline(title);
        const auto depth = as_signed(as_string(p.depth.value));
        
        //decide what kind of header we want to build
        if (Should_Do_Summary_Tags(depth,settings)){
            Append(title,Summary_Tagged_Header(p,contributors,settings));
        }
        else{
            Append(title,Regular_Header(p,contributors,settings));
        }
    }
    return title;
❱


◀private: static▶ std::string ☀Regular_Header(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
        std::string title;
        const auto depth = as_signed(as_string(p.depth.value));
        Append(title,Depth_To_Header_Marker(depth,settings));
        Append_A_Space(title);
        
        //add the possible numbered
        //in markdown you can just mark everything
        //as 1., and it will be rendered with the correct numbers
        if (p.is_numbered){
            Append(title,settings.headers.standard_number_list);
        }
        
        //add the actual title
        Append_With_Newline(title,p.title.value);
        return title;
❱

◀private: static▶ std::string ☀Summary_Tagged_Header(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string title;
    
    Append(title,settings.headers.summary_start_tag);
    //add the possible numbered
    //in markdown you can just mark everything
    //as 1., and it will be rendered with the correct numbers
    if (p.is_numbered){
        Append(title,settings.headers.standard_number_list);
    }
    
    //add the actual title
    Append(title,p.title.value);
    Append_With_Newline(title,settings.headers.summary_end_tag);
    Append_A_Newline(title);
        
    return title;
❱


◀private: static▶ bool ☀Should_Do_Summary_Tags(int depth, Markdown_Settings const& settings)❰

    if (depth == 0){
        if (settings.headers.h1_as_summary_tags){
            return true;
        }
    }
    return false;
❱

◀private: static▶ std::string ☀Depth_To_Header_Marker(int depth, Markdown_Settings const& settings)❰
    if (depth == 0){
        return settings.headers.h1;
    }
    if (depth == 1){
        return settings.headers.h2;
    }
    if (depth == 2){
        return settings.headers.h3;
    }
    if (depth == 3){
        return settings.headers.h4;
    }
    if (depth == 4){
        return settings.headers.h5;
    }
    if (depth == 5){
        return settings.headers.h6;
    }
    
    //higher than 6? just use 6.
    return settings.headers.h6;
❱