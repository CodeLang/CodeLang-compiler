class
❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/contributor/contributor"❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Sentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    //print images
    for (auto const& it: s.images){
        
        // decide how to print the image.
        // we can do the traditional markdown format,
        // or we can do the more html-oriented format.
        if (/*Image_Has_No_Specified_Dimensions(it)*/true){
            Append(text,Classic_Markdown_Image(it,contributors,settings));
        }
        else {
            Append(text,Html_Markdown_Image(it,contributors,settings));
        }
    }
    return text;
❱

◀private: static▶ bool ☀Image_Has_No_Specified_Dimensions(Sentence_Image const& image)❰
    return image.size.width.value.empty() && image.size.height.value.empty();
❱


◀private: static▶ std::string ☀Classic_Markdown_Image(Sentence_Image const& i, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    //Append_With_Newline(text,"<p align=\"center\">");
    
    //Append_With_Newline(text,"<center>");
    //Append_With_Newline(text,"\\begin{center}");
    
    //Append_With_Newline(text,"<div style=\"float:center\">");
    
    //Append_With_Newline(text,"<div style=\"text-align:right; display-inline:block\">");
    
    Append_With_Newline(text,"<div>");
    
//     text-align:right;
// display-inline:block;
    
    
    Append(text,settings.image.alternative_text_start_marker);
    Append(text,as_string(i.alternative_text.value));
    Append(text,settings.image.alternative_text_end_marker);
    Append(text,settings.image.image_path_start_marker);
    Append(text,as_string(i.image_path.value));
    Append_A_Space(text);
    Append(text,settings.image.hover_text_start_marker);
    Append(text,as_string(i.hover_text.value));
    Append(text,settings.image.hover_text_end_marker);
    Append(text,settings.image.image_path_end_marker);
    
    if (!Image_Has_No_Specified_Dimensions(i)){
        Append(text,"{ ");
        Append(text,"width=\"");
        Append(text,as_string(i.size.width.value));
        Append(text,"\" ");
        Append(text,"height=\"");
        Append(text,as_string(i.size.height.value));
        Append(text,"\"");
        Append(text," .center }");
    }
    
    Append_A_Newline(text);
    //Append_With_Newline(text,"</p>");
    //Append_With_Newline(text,"</center>");
    //Append_With_Newline(text,"\\end{center}");
    
    Append_With_Newline(text,"</div>");
    
    
    Append_A_Newline(text);
    Append_A_Newline(text);
    return text;
❱
◀private: static▶ std::string ☀Html_Markdown_Image(Sentence_Image const& i, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"<p align=\"center\">");
        Append_A_Tab(text);
    }
        Append(text,"<img ");
        Append(text,"width=\"");
        Append(text,as_string(i.size.width.value));
        Append(text,"\" ");
        Append(text,"height=\"");
        Append(text,as_string(i.size.height.value));
        Append(text,"\" ");
        Append(text,"src=\"");
        Append(text,as_string(i.image_path.value));
        Append(text,"\">");
        
    if (settings.image.wrap_in_p_tags){
        Append_With_Newline(text,"</p>");
    }
    Append_A_Newline(text);
    return text;
❱