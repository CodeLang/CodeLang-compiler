class

❪fstream❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/contributor/contributor"❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_header_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_image_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_title_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_sentence_extra_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/tools/transcompilers/unilang/structure/print/struct_derivers"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/tools/transcompilers/unilang/options/manipulation/case_adjustment_settings"❫
❪"code/tools/transcompilers/unilang/structure/adjust/casing_adjuster"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/transcompilers/unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/tools/transcompilers/unilang/doxygen_block_printer/grammar_adjuster"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    for (auto const& it: structure.literature.paragraphs){
        
        const auto depth = as_signed(as_string(it.depth.value));
        if (!Markdown_Title_Getter::More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
            if (depth == 0 && settings.headers.h1_as_details_tags){
                Append_With_Newline(text,settings.headers.details_end_tag);
                Append_With_Newline(text,settings.headers.details_start_tag);
            }
        }
        
        Append(text,Markdown_Title_Getter::Get_Possible_Image_Title(it,contributors,settings));
        Append(text,Possibly_Get_Outline(it,contributors,settings));
        
        //if the title was a special image title, then
        //we don't want to print any of the sentences and supplementary info that's there
        //we technically already printed some of this sentence information as part of the title, and are skipping the rest
        //and avoiding doing it twice.
        if (!Markdown_Title_Getter::More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
            Append(text,Possibly_Get_Sentences(it,contributors,settings));
            // if (depth == 0 && settings.headers.h1_as_details_tags){
            //     Append_With_Newline(text,settings.headers.details_end_tag);
            // }
        }
        Append_A_Newline(text);
    }
    
    return text;
❱



◀private: static▶ std::string ☀Possibly_Get_Outline(Paragraph const& it, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (settings.outlines.print){
        Append_A_Newline(text);
        for (auto const& it: it.outline_points){
            Append(text,settings.outlines.prefix_marker);
            Append_With_Newline(text,as_string(it.point.value));
        }
    }
    
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentences(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    //if there are no sentences don't print them or any of the supplementary data
    if (p.sentences.empty()){
        return text;
    }
    if(!settings.sentences.print){
        return text;
    }
    
    
        
    //print each sentence
    for (auto const& it: p.sentences){
        Append(text,Possibly_Get_Sentence(it,contributors,settings));
    }
    
    //add extra line since we printed sentences under the title
    Append_A_Newline(text);
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentence(Sentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (!s.text.value.empty()){
        Append(text,Grammar_Adjuster::Get_Adjusted(as_string(s.text.value),settings.grammar));
        Append_N_Spaces(text,2);
    }
    if (!s.images.empty() || !s.tables.empty() || !s.codes.empty()){
        Append_A_Newline(text);
        Append(text,Markdown_Sentence_Extra_Getter::Get(s,contributors,settings));
    }
    return text;
❱