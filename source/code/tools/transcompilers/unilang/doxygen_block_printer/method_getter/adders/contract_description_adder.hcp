class


❪"code/transcompilers/unilang/structure/model/sections/method/method_item"❫
❪"code/transcompilers/unilang/structure/model/sections/data_member/data_member_item"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/transcompilers/unilang/doxygen_block_printer/doxygen_block_maker"❫
❪"code/transcompilers/unilang/doxygen_block_printer/doxygen_data"❫
⚯
❪"code/transcompilers/unilang/literal_suffix_getter/adjuster/literal_adjuster"❫
❪"code/transcompilers/unilang/doxygen_block_printer/value_constraint_comment_deriver"❫
❪"code/transcompilers/unilang/structure/print/derivers/identifier_name_deriver"❫
❪"code/transcompilers/unilang/doxygen_block_printer/doxygen_data_shared"❫
❪"code/transcompilers/unilang/units_to_variable_suffix_converter/unit_suffix_lookuper"❫
❪"code/transcompilers/unilang/doxygen_block_printer/grammar_adjuster"❫
❪"code/utilities/converters/lib"❫
⚞⚟


◀public: static▶ void ☀Add(Doxygen_Data & data, Method_Contracts_Section const& contracts, C_Export_Settings const& options)❰

  Add_PreConditions(data,contracts.preconditions,options.portion.method_options.contracts.precondition_existence,options.portion.method_options.comment.grammar);
  Add_PostConditions(data,contracts.postconditions,options.portion.method_options.contracts.postcondition_existence,options.portion.method_options.comment.grammar);
❱
◀private: static▶ void ☀Add_PreConditions(Doxygen_Data & data, std::vector<Contract_Precondition> const& conditions, Meta_Tag_Existence_Option const& settings, Comment_Grammar_Settings grammar_settings)❰
  if (settings.print){
    for (auto it: conditions){
      if (it.comment.value.empty()){
        if (settings.print_when_empty){
          //print empty:
          Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"pre","",grammar_settings);
        }
      }
      else{
        //print with value:
        Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"pre",as_string(it.comment.value));
      }
    }
  }
❱
◀private: static▶ void ☀Add_PostConditions(Doxygen_Data & data, std::vector<Contract_Postcondition> const& conditions, Meta_Tag_Existence_Option const& settings, Comment_Grammar_Settings grammar_settings)❰
  if (settings.print){
    for (auto it: conditions){
      if (it.comment.value.empty()){
        if (settings.print_when_empty){
          //print empty:
          Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"post","");
        }
      }
      else{
        //print with value:
        Doxygen_Data_Shared::Add_If_There_Is_A_Value(data,"post",as_string(it.comment.value));
      }
    }
  }
❱