class


❪"code/tools/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/tools/transcompilers/unilang/structure/model/sections/data_member/value_constraints"❫
❪"code/tools/transcompilers/unilang/constraint_exporter/interval_constraint/interval_constraint"❫
⚯
❪"code/tools/transcompilers/unilang/literal_suffix_getter/adjuster/literal_adjuster"❫
❪"code/tools/transcompilers/unilang/constraint_exporter/value_constraints_to_interval_constraints"❫
❪"code/tools/transcompilers/unilang/type_converters/type_to_hungarian/qualifier_stripper/type_qualifier_stripper"❫
❪"code/tools/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/unilang_type_to_language_type_converter"❫
❪"code/utilities/types/converters/lib"❫
⚞⚟

◀public: static▶ std::string ☀Derive(std::vector<Value_Constraints> constraints, C_Export_Settings const& options, std::string const& type)❰
    std::string str;
    
    bool non_empty = false;
    for (auto const& it: constraints){
        if (!as_string(it.operation.value).empty() && !as_string(it.value.value).empty()){
            non_empty = true;
            break;
        }
    }
    
    
    //print value constraints if we have any:  
    if (non_empty){
        str += "value constraints:\n";
        str += Get_Notated_Value_Constraint_Comments(constraints,options,type);
    }
    
    return str;
❱


◀private: static▶ std::string ☀Get_Notated_Value_Constraint_Comments(std::vector<Value_Constraints> constraints, C_Export_Settings const& options, std::string const& type)❰
    std::string str;
    
    if (options.portion.data_member_options.use_interval_notation){
      str += Get_With_Interval_Notation(constraints,options,type);
    }
    else {
      str += Get_With_Just_Plain_Value_Notation(constraints,options,type);
    }
    
    
    return str;
❱

◀private: static▶ std::string ☀Get_With_Interval_Notation(std::vector<Value_Constraints> constraints, C_Export_Settings const& options, std::string const& type)❰
  std::string str;
  
  auto intervals = Value_Constraints_To_Interval_Constraints::Derive(constraints);
  str += Get_Interval_Notation(intervals,type);
  str += Get_With_Just_Plain_Value_Notation(constraints,options,type);
  
  return str;
❱

◀private: static▶ std::string ☀Get_Interval_Notation(std::vector<Interval_Constraint> const& intervals, std::string const& type)❰
    std::string str;
    for (auto const& it: intervals){
        
        //get language_type
        auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(type),false);
        auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, Source_Language::C);
        
        
        //print the rest as an interval
        str += Get_Interval_Math_Name(it);
        str += Print_Interval_Start_Point(it.begin);
        str += Literal_Adjuster::Get_Adjusted(language_type.name,as_string(it.begin.value.value));
        str += ", ";
        str += Literal_Adjuster::Get_Adjusted(language_type.name,as_string(it.end.value.value));
        str += Print_Interval_End_Point(it.end);
        str += "\n";
    }
    return str;
❱

◀private: static▶ std::string ☀Get_Interval_Math_Name(Interval_Constraint const& interval)❰
    std::string str;
    
    if (interval.begin.type == Interval_Inclusion::OPEN && interval.end.type == Interval_Inclusion::OPEN){
        str += "open interval: ";
    }
    else if (interval.begin.type == Interval_Inclusion::CLOSED && interval.end.type == Interval_Inclusion::CLOSED){
        str += "closed interval: ";
    }
    else{
        str += "interval: ";
    }
    
    return str;
❱

◀private: static▶ std::string ☀Print_Interval_Start_Point(Interval_Point const& point)❰
    switch (point.type){
        case Interval_Inclusion::OPEN: return "(";
        case Interval_Inclusion::CLOSED: return "[";
    }
    return "?";
❱
◀private: static▶ std::string ☀Print_Interval_End_Point(Interval_Point const& point)❰
    switch (point.type){
        case Interval_Inclusion::OPEN: return ")";
        case Interval_Inclusion::CLOSED: return "]";
    }
    return "?";
❱


◀private: static▶ std::string ☀Get_With_Just_Plain_Value_Notation(std::vector<Value_Constraints> constraints, C_Export_Settings const& options, std::string const& type)❰
  std::string str;
  
    for (auto const& it: constraints){
        if (!as_string(it.operation.value).empty() && !as_string(it.value.value).empty()){
            
            //get language_type
            auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(type),false);
            auto language_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(stripped_type_detail.base_type, Source_Language::C);
        
            str += as_string(it.operation.value) + " ";
            str += Literal_Adjuster::Get_Adjusted(language_type.name,as_string(it.value.value)) + '\n';
        }
    }
  
  return str;
❱