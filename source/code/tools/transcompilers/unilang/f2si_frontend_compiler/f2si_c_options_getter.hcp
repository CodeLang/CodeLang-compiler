class


❪"code/tools/transcompilers/unilang/options/language-specific/c/c_export_settings"❫
❪"code/tools/transcompilers/unilang/options/sections/meta/organizations/organization"❫
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/utilities/program/common_actions/exits/lib"❫
⚯

⚞⚟

◀public: static▶ C_Export_Settings ☀Convert_Style_To_Options_Config(std::string const& exporter_name, std::string const& style, Structure const& structure)❰
  return Get_C_Settings(exporter_name,style,structure);
❱

◀public: static▶ C_Export_Settings ☀Get_C_Settings(std::string const& exporter_name, std::string const& style, Structure const& structure)❰
    C_Export_Settings settings;
    
  if (style == "bad-bools"){ settings = Get_Bad_Style_With_Bools_Options_Config(structure); }
  else if (style == "bad-enums"){settings = Get_Bad_Style_With_Enums_Options_Config(structure); }
  else if (style == "good"){settings = Get_Good_Style_Options_Config(structure); }
  else if (style == "constraints"){settings = Get_Good_Style_Options_Config(structure); }
  else{ Exit_With_Error("The " + exporter_name + " exporter does not support the following style: " + style); }
  
    return settings;
❱


◀private: static▶ C_Export_Settings ☀Get_Bad_Style_With_Bools_Options_Config(Structure const& structure)❰
    auto settings = Get_Shared_Style_Options_Config(structure);
    settings.general.object_export_method = Object_Export_Method::INPUT_OUTPUT;   //<- bad design
    settings.general.in_out_export_api_style = In_Out_Export_Api_Style::BOOLEANS; //stupid, but allows multiple calls during update
    return settings;
❱
◀private: static▶ C_Export_Settings ☀Get_Bad_Style_With_Enums_Options_Config(Structure const& structure)❰
    auto settings = Get_Shared_Style_Options_Config(structure);
    settings.general.object_export_method = Object_Export_Method::INPUT_OUTPUT; //<- bad design
    settings.general.in_out_export_api_style = In_Out_Export_Api_Style::ENUM;   //stupid, but allows single calls during update
    return settings;
❱

◀private: static▶ C_Export_Settings ☀Get_Good_Style_Options_Config(Structure const& structure)❰

    auto settings = Get_Shared_Style_Options_Config(structure);
    settings.general.object_export_method = Object_Export_Method::NORMAL; //<- good design
    return settings;
❱


◀private: static▶ C_Export_Settings ☀Get_Shared_Style_Options_Config(Structure const& structure)❰
    C_Export_Settings settings;
    
    //how files should be split up for objects and globals
    settings.general.object_partition = Object_Code_Partition_Method::THREE;
    settings.general.global_partition = Global_Code_Partition_Method::TWO;
    
    
    
    settings.manipulations.imports.header_renames = 
    {{"stdioLib","Defs"}
    };
    
    //header files that we should force to be systems eventhough we didn't write them that way in the code.
    //TODO: allow picking directories!
    settings.manipulations.imports.force_to_be_system_imports =
    {"sysLib"
    ,"stdioLib"
    ,"inetLib"
    ,"math"
    ,"stddef"
    ,"stdio"
    ,"tickLib"
    ,"taskLib"
    ,"StrLib"
    ,"strLib"
    ,"stdlib"
    };
    
    //regardless of what is specified, make the header local
    settings.manipulations.imports.force_to_be_local_imports = 
    {"Defs"
    };
    
    //TODO:
    //allow a warning when someone asks for a system header but we can't find it in our system header specified paths
    
    settings.manipulations.imports.force_header_to_have_a_dot_h = 
    settings.manipulations.imports.force_to_be_system_imports;
    
    //wrap the headers in the extern guards
    settings.portion.extern_c_guard_options.do_extern_c_guards = true;
    
    //temp to test that it was coded right
    settings.portion.method_options.prefix_object_api_methods_with_object_name = true;
    
    //prints in meta block
    settings.portion.meta.project_name = "UH-72A Synthetic Flight Training System (SFTS)";
    settings.portion.meta.contract_number = "#W900KK-09-D-0577";
    settings.portion.meta.task_order = "0002";
    settings.portion.meta.contract_statement = "This work was generated under U.S. Government contract and the\ngovernment has unlimited data rights therein.";
    settings.portion.meta.copyright_statement = "All rights reserved.";
    settings.portion.meta.classification = "Unclassified";
    settings.portion.meta.distribution_statement = "Distribution authorized to the Department of Defense and U.S. DoD contractors only.\nOther requests shall be referred to the controlling DoD office.";
    
    //organization name also shows up in meta block
    Organization org;
    org.company_phone_number = "(412) 321-3280";
    org.company_abbreviation = "F2Si";
    org.company_name = "Fidelity Flight Simulation, Inc.";
    org.address.number = "1815";
    org.address.street = "Parkway View Drive";
    org.address.city = "Pittsburgh";
    org.address.state = "PA";
    org.address.zip = "15205";
    settings.portion.meta.organizations.push_back(org);
    
    //doxygen block settings
    settings.general.comment.doxygen.style = Block_Style::JAVADOC;
    settings.general.comment.doxygen.intermediate_stars = true;
    settings.general.comment.doxygen.column_align = true;
    
    //puncuating comments
    const bool all_grammar_set = false;
    settings.portion.import_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.import_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.typedef_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.typedef_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.macro_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.macro_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.enum_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.enum_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.method_options.brief_grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.method_options.brief_grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.method_options.details_grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.method_options.details_grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.method_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.method_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.portion.data_member_options.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.portion.data_member_options.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    settings.general.comment.grammar.puncuation.auto_capitalize_comments = all_grammar_set;
    settings.general.comment.grammar.puncuation.auto_puncuate_comments = all_grammar_set;
    
    //enum settings
    settings.portion.enum_options.allow_empty_comments = false;
    settings.portion.enum_options.when_show_empty_comment = When_To_Show_Empty_Enum_Comment::ALWAYS;
    settings.portion.enum_options.comment.comment_category = Comment_Style_Category::LANGUAGE;
    settings.portion.enum_options.comment.language.style = Comment_Style::BLOCK;
	settings.portion.enum_options.utility_values.first.name = "FIRST";
	settings.portion.enum_options.utility_values.last.name = "LAST";
	settings.portion.enum_options.utility_values.num.name = "NUM";
    
    
    //HOW TO NAME FILES:
    //normal
    settings.general.filesystem_naming.suffix.global.normal.interface                    = "";
    settings.general.filesystem_naming.suffix.global.normal.implementation               = "";
    settings.general.filesystem_naming.suffix.global.normal.data                         = "data";
    settings.general.filesystem_naming.suffix.global.normal.data_and_interface           = "";
    settings.general.filesystem_naming.suffix.global.normal.interface_and_implementation = "";
    settings.general.filesystem_naming.suffix.global.normal.all                          = "";

    settings.general.filesystem_naming.suffix.sum.normal.interface                    = "";
    settings.general.filesystem_naming.suffix.sum.normal.implementation               = "";
    settings.general.filesystem_naming.suffix.sum.normal.data                         = "data";
    settings.general.filesystem_naming.suffix.sum.normal.data_and_interface           = "";
    settings.general.filesystem_naming.suffix.sum.normal.interface_and_implementation = "";
    settings.general.filesystem_naming.suffix.sum.normal.all                          = "";

    settings.general.filesystem_naming.suffix.product.normal.interface                    = "";
    settings.general.filesystem_naming.suffix.product.normal.implementation               = "";
    settings.general.filesystem_naming.suffix.product.normal.data                         = "data";
    settings.general.filesystem_naming.suffix.product.normal.data_and_interface           = "";
    settings.general.filesystem_naming.suffix.product.normal.interface_and_implementation = "";
    settings.general.filesystem_naming.suffix.product.normal.all                          = "";

    //test
    settings.general.filesystem_naming.suffix.global.test.interface                    = "wrapper";
    settings.general.filesystem_naming.suffix.global.test.implementation               = "wrapper";
    settings.general.filesystem_naming.suffix.global.test.data                         = "wrapper";
    settings.general.filesystem_naming.suffix.global.test.data_and_interface           = "wrapper";
    settings.general.filesystem_naming.suffix.global.test.interface_and_implementation = "wrapper";
    settings.general.filesystem_naming.suffix.global.test.all                          = "wrapper";

    settings.general.filesystem_naming.suffix.sum.test.interface                    = "wrapper";
    settings.general.filesystem_naming.suffix.sum.test.implementation               = "wrapper";
    settings.general.filesystem_naming.suffix.sum.test.data                         = "wrapper";
    settings.general.filesystem_naming.suffix.sum.test.data_and_interface           = "wrapper";
    settings.general.filesystem_naming.suffix.sum.test.interface_and_implementation = "wrapper";
    settings.general.filesystem_naming.suffix.sum.test.all                          = "wrapper";

    settings.general.filesystem_naming.suffix.product.test.interface                    = "wrapper";
    settings.general.filesystem_naming.suffix.product.test.implementation               = "wrapper";
    settings.general.filesystem_naming.suffix.product.test.data                         = "wrapper";
    settings.general.filesystem_naming.suffix.product.test.data_and_interface           = "wrapper";
    settings.general.filesystem_naming.suffix.product.test.interface_and_implementation = "wrapper";
    settings.general.filesystem_naming.suffix.product.test.all                          = "wrapper";

    //constraint
    settings.general.filesystem_naming.suffix.global.constraint.interface                    = "constraints";
    settings.general.filesystem_naming.suffix.global.constraint.implementation               = "constraints";
    settings.general.filesystem_naming.suffix.global.constraint.data                         = "constraints";
    settings.general.filesystem_naming.suffix.global.constraint.data_and_interface           = "constraints";
    settings.general.filesystem_naming.suffix.global.constraint.interface_and_implementation = "constraints";
    settings.general.filesystem_naming.suffix.global.constraint.all                          = "constraints";

    settings.general.filesystem_naming.suffix.sum.constraint.interface                    = "constraints";
    settings.general.filesystem_naming.suffix.sum.constraint.implementation               = "constraints";
    settings.general.filesystem_naming.suffix.sum.constraint.data                         = "constraints";
    settings.general.filesystem_naming.suffix.sum.constraint.data_and_interface           = "constraints";
    settings.general.filesystem_naming.suffix.sum.constraint.interface_and_implementation = "constraints";
    settings.general.filesystem_naming.suffix.sum.constraint.all                          = "constraints";

    settings.general.filesystem_naming.suffix.product.constraint.interface                    = "constraints";
    settings.general.filesystem_naming.suffix.product.constraint.implementation               = "constraints";
    settings.general.filesystem_naming.suffix.product.constraint.data                         = "constraints";
    settings.general.filesystem_naming.suffix.product.constraint.data_and_interface           = "constraints";
    settings.general.filesystem_naming.suffix.product.constraint.interface_and_implementation = "constraints";
    settings.general.filesystem_naming.suffix.product.constraint.all                          = "constraints";

    //serialize
    settings.general.filesystem_naming.suffix.global.serialized.interface                    = "serialize";
    settings.general.filesystem_naming.suffix.global.serialized.implementation               = "serialize";
    settings.general.filesystem_naming.suffix.global.serialized.data                         = "serialize";
    settings.general.filesystem_naming.suffix.global.serialized.data_and_interface           = "serialize";
    settings.general.filesystem_naming.suffix.global.serialized.interface_and_implementation = "serialize";
    settings.general.filesystem_naming.suffix.global.serialized.all                          = "serialize";

    settings.general.filesystem_naming.suffix.sum.serialized.interface                    = "serialize";
    settings.general.filesystem_naming.suffix.sum.serialized.implementation               = "serialize";
    settings.general.filesystem_naming.suffix.sum.serialized.data                         = "serialize";
    settings.general.filesystem_naming.suffix.sum.serialized.data_and_interface           = "serialize";
    settings.general.filesystem_naming.suffix.sum.serialized.interface_and_implementation = "serialize";
    settings.general.filesystem_naming.suffix.sum.serialized.all                          = "serialize";

    settings.general.filesystem_naming.suffix.product.serialized.interface                    = "serialize";
    settings.general.filesystem_naming.suffix.product.serialized.implementation               = "serialize";
    settings.general.filesystem_naming.suffix.product.serialized.data                         = "serialize";
    settings.general.filesystem_naming.suffix.product.serialized.data_and_interface           = "serialize";
    settings.general.filesystem_naming.suffix.product.serialized.interface_and_implementation = "serialize";
    settings.general.filesystem_naming.suffix.product.serialized.all                          = "serialize";
    
    //meta block settings
    settings.portion.meta.comment_settings.doxygen.intermediate_stars = true;
    settings.portion.meta.comment_settings.doxygen.pretty_align_tag_text_on_newlines = false;
    settings.portion.meta.comment_settings.doxygen.column_align = false;
    settings.portion.meta.comment_settings.doxygen.tag_symbol = "";
    settings.portion.meta.comment_settings.doxygen.text_between_tag_and_tag_value  = "";
    
    //enum utility function settings
      
      //values
      settings.manipulations.methods.enum_utility_functions.values.first.print = false;
      settings.manipulations.methods.enum_utility_functions.values.last.print = false;
      settings.manipulations.methods.enum_utility_functions.values.total.print = false;
      settings.manipulations.methods.enum_utility_functions.values.first.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.values.last.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.values.total.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.values.first.function_name = "first";
      settings.manipulations.methods.enum_utility_functions.values.last.function_name = "last";
      settings.manipulations.methods.enum_utility_functions.values.total.function_name = "total";
      
      //iteration
      settings.manipulations.methods.enum_utility_functions.iteration.next.print = false;
      settings.manipulations.methods.enum_utility_functions.iteration.previous.print = false;
      settings.manipulations.methods.enum_utility_functions.iteration.next.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.iteration.previous.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.iteration.next.function_name = "next";
      settings.manipulations.methods.enum_utility_functions.iteration.previous.function_name = "previous";
    
      //enum to string
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string.print = true;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_inflection_count.print = true;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_singular.print = true;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_plural.print = true;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_inflection_count.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_singular.access = Class_Access::PRIVATE;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_plural.access = Class_Access::PRIVATE;
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string.function_name = "to str";
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_inflection_count.function_name = "to inflected str";
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_singular.function_name = "to singular str";
      settings.manipulations.methods.enum_utility_functions.conversion.enum_to_string_plural.function_name = "to plural str";
      
      //string to enum
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum.print = true;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_singular.print = false;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_plural.print = false;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_singular.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_plural.access = Class_Access::PUBLIC;
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum.function_name = "str to enum";
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_singular.function_name = "singular str to enum";
      settings.manipulations.methods.enum_utility_functions.conversion.string_to_enum_plural.function_name = "plural str to enum";
      
      //data member utility function settings
      settings.manipulations.methods.data_member_utility_functions.printable.print = true;
      settings.manipulations.methods.data_member_utility_functions.serializable_json.print = true;
	  settings.manipulations.methods.data_member_utility_functions.to_json.print = true;
	  settings.manipulations.methods.data_member_utility_functions.json_print.print = true;
      settings.manipulations.methods.data_member_utility_functions.transition.print = true;
      settings.manipulations.methods.data_member_utility_functions.comparison.print = true;
      settings.manipulations.methods.data_member_utility_functions.printable.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.serializable_json.access = Class_Access::PUBLIC;
	  settings.manipulations.methods.data_member_utility_functions.to_json.access = Class_Access::PUBLIC;
	  settings.manipulations.methods.data_member_utility_functions.json_print.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.transition.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.equals.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.not_equals.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.less.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.less_equals.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.greater.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.comparison.greater_equals.access = Class_Access::PUBLIC;
      settings.manipulations.methods.data_member_utility_functions.printable.function_name = "print";
      settings.manipulations.methods.data_member_utility_functions.serializable_json.function_name = "serialize json";
	  settings.manipulations.methods.data_member_utility_functions.to_json.function_name = "to json";
	  settings.manipulations.methods.data_member_utility_functions.json_print.function_name = "print json";
      settings.manipulations.methods.data_member_utility_functions.transition.function_name = "print transition changes";
      settings.manipulations.methods.data_member_utility_functions.comparison.equals.function_name = "equal to";
      settings.manipulations.methods.data_member_utility_functions.comparison.not_equals.function_name = "not equal to";
      settings.manipulations.methods.data_member_utility_functions.comparison.less.function_name = "less";
      settings.manipulations.methods.data_member_utility_functions.comparison.less_equals.function_name = "less equal";
      settings.manipulations.methods.data_member_utility_functions.comparison.greater.function_name = "greater";
      settings.manipulations.methods.data_member_utility_functions.comparison.greater_equals.function_name = "greater equal";
      
      //subgroups
      settings.portion.method_options.sorting.interface.tag.comment.doxygen.intermediate_stars = true;
      settings.portion.method_options.sorting.interface.tag.comment.doxygen.pretty_align_tag_text_on_newlines = false;
      settings.portion.method_options.sorting.interface.tag.comment.doxygen.column_align = false;
      settings.portion.method_options.sorting.interface.tag.comment.doxygen.tag_symbol = "";
      settings.portion.method_options.sorting.interface.tag.comment.doxygen.text_between_tag_and_tag_value  = "";
      //---
      settings.portion.method_options.sorting.implementation.tag.comment.doxygen.intermediate_stars = true;
      settings.portion.method_options.sorting.implementation.tag.comment.doxygen.pretty_align_tag_text_on_newlines = false;
      settings.portion.method_options.sorting.implementation.tag.comment.doxygen.column_align = false;
      settings.portion.method_options.sorting.implementation.tag.comment.doxygen.tag_symbol = "";
      settings.portion.method_options.sorting.implementation.tag.comment.doxygen.text_between_tag_and_tag_value  = "";
      
      //attributes

      //for arguments
      settings.portion.method_options.attributes.arguments.non_null.is_null_note.show              = false;
      settings.portion.method_options.attributes.arguments.non_null.is_not_null_note.show          = false;
      settings.portion.method_options.attributes.arguments.non_null.is_null_note.note              = "";
      settings.portion.method_options.attributes.arguments.non_null.is_not_null_note.note          = "";
      settings.portion.method_options.attributes.arguments.non_null.style.technique                = Attribute_Technique::GCC;
      settings.portion.method_options.attributes.arguments.non_null.style.custom                   = "NONNULL";
      settings.portion.method_options.attributes.arguments.non_null.style.gcc                      = "__attribute__((nonnull))";
      settings.portion.method_options.attributes.arguments.non_null.style.clang                    = "__attribute__((nonnull))";
      settings.portion.method_options.attributes.arguments.non_null.style.microsoft                = "[ref]";
      settings.portion.method_options.attributes.arguments.non_null.style.splint                   = "";
      settings.portion.method_options.attributes.arguments.non_null.style.std                      = "__attribute__((nonnull))";
      settings.portion.method_options.attributes.arguments.non_null.placement.decl.section_1       = false;
      settings.portion.method_options.attributes.arguments.non_null.placement.decl.section_2       = false;
      settings.portion.method_options.attributes.arguments.non_null.placement.decl.section_3       = false;
      settings.portion.method_options.attributes.arguments.non_null.placement.def.section_1        = false;
      settings.portion.method_options.attributes.arguments.non_null.placement.def.section_2        = false;
      settings.portion.method_options.attributes.arguments.non_null.placement.def.section_3        = false;

      settings.portion.method_options.attributes.arguments.unused_arg.used_note.show               = false;
      settings.portion.method_options.attributes.arguments.unused_arg.maybe_unused_note.show       = false;
      settings.portion.method_options.attributes.arguments.unused_arg.definitely_unused_note.show  = false;
      settings.portion.method_options.attributes.arguments.unused_arg.used_note.note               = "";
      settings.portion.method_options.attributes.arguments.unused_arg.maybe_unused_note.note       = "";
      settings.portion.method_options.attributes.arguments.unused_arg.definitely_unused_note.note  = "";
      settings.portion.method_options.attributes.arguments.unused_arg.style.technique              = Attribute_Technique::GCC;
      settings.portion.method_options.attributes.arguments.unused_arg.style.custom                 = "UNUSED";
      settings.portion.method_options.attributes.arguments.unused_arg.style.gcc                    = "__attribute__((unused))";
      settings.portion.method_options.attributes.arguments.unused_arg.style.clang                  = "__attribute__((unused))";
      settings.portion.method_options.attributes.arguments.unused_arg.style.microsoft              = "";
      settings.portion.method_options.attributes.arguments.unused_arg.style.splint                 = "/*@unused@*/";
      settings.portion.method_options.attributes.arguments.unused_arg.style.std                    = "[[maybe_unused]]";
      settings.portion.method_options.attributes.arguments.unused_arg.placement.decl.section_1     = false;
      settings.portion.method_options.attributes.arguments.unused_arg.placement.decl.section_2     = false;
      settings.portion.method_options.attributes.arguments.unused_arg.placement.decl.section_3     = true;
      settings.portion.method_options.attributes.arguments.unused_arg.placement.def.section_1      = false;
      settings.portion.method_options.attributes.arguments.unused_arg.placement.def.section_2      = false;
      settings.portion.method_options.attributes.arguments.unused_arg.placement.def.section_3      = true;

      //not supported by diab compiler
      settings.portion.method_options.attributes.arguments.used_return.used_note.show              = false;
      settings.portion.method_options.attributes.arguments.used_return.maybe_unused_note.show      = false;
      settings.portion.method_options.attributes.arguments.used_return.definitely_unused_note.show = false;
      settings.portion.method_options.attributes.arguments.used_return.used_note.note              = "";
      settings.portion.method_options.attributes.arguments.used_return.maybe_unused_note.note      = "";
      settings.portion.method_options.attributes.arguments.used_return.definitely_unused_note.note = "";
      settings.portion.method_options.attributes.arguments.used_return.style.technique             = Attribute_Technique::GCC;
      settings.portion.method_options.attributes.arguments.used_return.style.custom                = "NODISCARD";
      settings.portion.method_options.attributes.arguments.used_return.style.gcc                   = "__attribute__((warn_unused_result))";
      settings.portion.method_options.attributes.arguments.used_return.style.clang                 = "__attribute__((warn_unused_result))";
      settings.portion.method_options.attributes.arguments.used_return.style.microsoft             = "_Check_return_";
      settings.portion.method_options.attributes.arguments.used_return.style.splint                = "";
      settings.portion.method_options.attributes.arguments.used_return.style.std                   = "[[nodiscard]]";
      settings.portion.method_options.attributes.arguments.used_return.placement.decl.section_1    = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.decl.section_2    = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.decl.section_3    = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.decl.section_4    = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.decl.section_5    = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.def.section_1     = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.def.section_2     = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.def.section_3     = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.def.section_4     = false;
      settings.portion.method_options.attributes.arguments.used_return.placement.def.section_5     = false;

	  //for methods
      settings.portion.method_options.attributes.method.unused.used_note.show                      = false;
      settings.portion.method_options.attributes.method.unused.maybe_unused_note.show              = false;
      settings.portion.method_options.attributes.method.unused.definitely_unused_note.show         = false;
      settings.portion.method_options.attributes.method.unused.used_note.note                      = "";
      settings.portion.method_options.attributes.method.unused.maybe_unused_note.note              = "";
      settings.portion.method_options.attributes.method.unused.definitely_unused_note.note         = "";
      settings.portion.method_options.attributes.method.unused.style.technique                     = Attribute_Technique::GCC;
      settings.portion.method_options.attributes.method.unused.style.custom                        = "UNUSED";
      settings.portion.method_options.attributes.method.unused.style.gcc                           = "__attribute__((unused))";
      settings.portion.method_options.attributes.method.unused.style.clang                         = "__attribute__((unused))";
      settings.portion.method_options.attributes.method.unused.style.microsoft                     = "";
      settings.portion.method_options.attributes.method.unused.style.splint                        = "/*@unused@*/";
      settings.portion.method_options.attributes.method.unused.style.std                           = "[[maybe_unused]]";
      settings.portion.method_options.attributes.method.unused.placement.decl.section_1            = true;
      settings.portion.method_options.attributes.method.unused.placement.decl.section_2            = false;
      settings.portion.method_options.attributes.method.unused.placement.decl.section_3            = false;
      settings.portion.method_options.attributes.method.unused.placement.decl.section_4            = false;
      settings.portion.method_options.attributes.method.unused.placement.decl.section_5            = false;
      settings.portion.method_options.attributes.method.unused.placement.def.section_1             = true;
      settings.portion.method_options.attributes.method.unused.placement.def.section_2             = false;
      settings.portion.method_options.attributes.method.unused.placement.def.section_3             = false;
      settings.portion.method_options.attributes.method.unused.placement.def.section_4             = false;
      settings.portion.method_options.attributes.method.unused.placement.def.section_5             = false;

	  //dumb comment at the end of functions
	  settings.portion.method_options.outside_body_comment.print = true;
      settings.portion.method_options.outside_body_comment.comment.comment_category = Comment_Style_Category::LANGUAGE;
      settings.portion.method_options.outside_body_comment.comment.language.style = Comment_Style::BLOCK;

    //newline adjustments on attributes
    //TODO: fix. clang-format is broken and adding a newline after the return type.  So I can't set these to true.
    settings.portion.method_options.attributes.method.decl_newlines.after_section_1 = false;
    settings.portion.method_options.attributes.method.def_newlines.after_section_1 = false;
    
    //determine what to name the exported utility constraint checking file
    //TODO: get rid of this nonsese.  I was rushed for time.
    if (structure.name == "send_to_j2_messages"){
      settings.general.constraint_checking_filename = "J2_send_constraints";
    }
    else if (structure.name == "receive_from_j2_messages"){
      settings.general.constraint_checking_filename = "J2_recieve_constraints";
    }
    else{
      settings.general.constraint_checking_filename = structure.name;
    }
    
    
    
    return settings;
❱
