class

❪vector❫
❪iostream❫
❪"code/tools/transcompilers/unilang/parser/parser_token"❫
❪"code/tools/transcompilers/unilang/options/parser/symbols/token_attribute_settings"❫
❪"code/tools/transcompilers/unilang/options/parser/parser_settings"❫
⚯
❪"code/tools/transcompilers/unilang/structure/model/structure"❫
❪"code/tools/transcompilers/unilang/tokens/token_group"❫
❪"code/tools/transcompilers/unilang/parser/structure_mapper/util/parser_utilities"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
⚞⚟

//TODO: it sucks that I have to specify the tokens that "do not need to be specified for uniqueness
//Aren't they just any token that's on a deeper level.  I suspect we can clean this up.
//Plus, I added a new token and forgot to update it here, and caused me problems.
//WARNING: this caused me problems again.  we need to specify the tokens as a tree, and have a much
//more reliable parsing / adjusting the language story.
//now that I'm in bazel, I'm not really happy about all the code gen we do as build rules.
//update: cleaned up a bit, but now that we are deriving children, it might be even more expensive to parse
//need a better data structure and constant time access to querying for all children (if we intend to keep this filter implementation)

//this whole thing is getting replaced with visual tree


◀public: static▶ std::vector<std::vector<Parser_Token>> ☀Filter_Method_Chunks(std::vector<Parser_Token> const& tokens,Parser_Settings const& settings)❰
    auto children = Find_Children_Token_Groups(Token_Group::FUNCTION,settings);
    auto all = Parser_Utilities::Filter_By_Data_Member_Uniqueness(tokens,children);
    return all;
❱

◀public: static▶ std::vector<std::vector<Parser_Token>> ☀Filter_Group(std::vector<Parser_Token> const& tokens, Token_Group const& group, Parser_Settings const& settings)❰
    auto children = Find_Children_Token_Groups(group,settings);
    auto all = Parser_Utilities::Filter_By_Data_Member_Uniqueness(tokens,children);
    return all;
❱


//THIS MIGHT BE EXPENSIVE AND WE CALL IT ALOT
//THIS NEEDS REPLACED WITH A O(1) LOOKUP IMPL
◀public: static▶ std::vector<Token_Group> ☀Find_Children_Token_Groups(Token_Group const& group, Parser_Settings const& settings)❰
    std::set<Token_Group> children;
    
    auto all_tokens = settings.all_language_tokens;
    for (auto const& a: all_tokens.tokens){
        bool found = false;
        for (auto const& b: a.groups){
            if (found){
                children.insert(b);
            }
            if (b == group){
                found = true;
            }
        }
    }
    
    std::vector<Token_Group> children2(children.begin(),children.end());
    return children2;
❱

