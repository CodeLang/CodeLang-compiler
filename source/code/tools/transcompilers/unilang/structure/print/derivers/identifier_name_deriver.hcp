class

❪string❫
❪iostream❫
❪"code/tools/transcompilers/unilang/structure/model/sections/data_member/data_member_item"❫
❪"code/tools/transcompilers/unilang/options/language-specific/c/c_export_settings"❫
❪"code/tools/transcompilers/unilang/structure/model/sections/data_member/data_member_item"❫
❪"code/tools/transcompilers/unilang/structure/model/sections/method/arguments/argument/function_argument"❫
❪"code/tools/transcompilers/unilang/structure/model/sections/method/arguments/argument/function_result"❫
❪"code/tools/transcompilers/unilang/options/sections/notation_settings"❫
❪"code/utilities/types/tri_bool"❫
⚯
❪"code/tools/transcompilers/unilang/type_converters/type_to_hungarian/data_member_to_hungarian_notation_converter"❫
❪"code/utilities/units/units_to_variable_suffix_lookup_table"❫
❪"code/tools/transcompilers/unilang/structure/print/shared_printer"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/units/unit_suffix_lookuper"❫
❪"code/tools/transcompilers/unilang/options/self_describe_type/modify_identifier_with_extra_type_info"❫
❪"code/utilities/linguistics/computer/types/generic/unilang_type_to_language_type_converter"❫
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟


//gives you the identifier name
//including prefix (hungarian notation)
//identifier (properly cased)
//suffix (units)
//other identifier adjustments based on data member properties
◀public: static▶ std::string ☀Derive_Name(Data_Member_Item const& data_member, C_Export_Settings const& settings, bool is_global, bool is_member)❰
    
      //get prefixes and suffixes
      auto prefix = Data_Member_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix(data_member,settings,is_global,is_member);
      auto suffix = Get_Raw_Unit_Suffix(data_member);
      
      
      //casing settings
      auto identifier_casing = How_To_Case_Identifier(data_member,settings,is_global);
      //auto hungarian_casing = How_To_Case_Hungarian(data_member,settings,is_global);
      auto unit_casing = How_To_Case_Units(data_member,settings,is_global);
      //auto extra_type_casing = How_To_Case_Extra_Type_Info(data_member,settings,is_global);
      
      
      std::string new_identifier = as_string(data_member.name.value);
      new_identifier = Adjust_Based_On_Type_Info(new_identifier,data_member,settings);


      //apply casing
      new_identifier = Case_Modifier::As_Modified_Casing(identifier_casing,new_identifier);
      suffix = Get_Properly_Cased_Suffix(suffix,unit_casing);
    
  //print CONSTANT_LIKE_THIS
  if (data_member.is_const){
  
      Append(new_identifier,suffix);
  }
  
  //print normal prefix with hungarian notation, and possible unit suffix
  else{
      Possibly_Add_Identifier_Prefixes_And_Suffixes(new_identifier,settings.portion.data_member_options.notation,prefix,suffix);
  }
    
    //return it
    return new_identifier;
❱

◀private: static▶ std::string ☀Adjust_Based_On_Type_Info(std::string identifier, Data_Member_Item const& data_member, C_Export_Settings const& settings)❰

	//decide type info input
    Identifier_With_Type_Info data_properties;
    data_properties.identifier = identifier;
    data_properties.optional = Decide_Optional(data_member,settings);
    data_properties.serializable = Decide_Serializable(data_member,settings);
    data_properties.collection = Decide_Collection(data_member,settings);
    data_properties.sequence = Decide_Sequence(data_member,settings);
    data_properties.state = Decide_State(data_member,settings);

	identifier = Modify_Identifier_With_Extra_Type_Info::Modify(data_properties,settings.portion.data_member_options.notation.extra_type_settings);
    return identifier;
❱

◀private: static▶ Tri_Bool ☀Decide_Optional(Data_Member_Item const& data_member, C_Export_Settings const& settings)❰
    auto properties = Unilang_Type_To_Language_Type_Converter::Get_Infered_Type_Properties(as_string(data_member.type.value));
    return properties.optional;
❱
◀private: static▶ Tri_Bool ☀Decide_Serializable(Data_Member_Item const& data_member, C_Export_Settings const& settings)❰
    auto properties = Unilang_Type_To_Language_Type_Converter::Get_Infered_Type_Properties(as_string(data_member.type.value));
    return properties.serializable;
❱
◀private: static▶ Tri_Bool ☀Decide_Collection(Data_Member_Item const& data_member, C_Export_Settings const& settings)❰
    auto properties = Unilang_Type_To_Language_Type_Converter::Get_Infered_Type_Properties(as_string(data_member.type.value));
    return properties.collection;
❱
◀private: static▶ Tri_Bool ☀Decide_Sequence(Data_Member_Item const& data_member, C_Export_Settings const& settings)❰
    auto properties = Unilang_Type_To_Language_Type_Converter::Get_Infered_Type_Properties(as_string(data_member.type.value));
    return properties.sequence;
❱
◀private: static▶ Tri_Bool ☀Decide_State(Data_Member_Item const& data_member, C_Export_Settings const& settings)❰
    auto properties = Unilang_Type_To_Language_Type_Converter::Get_Infered_Type_Properties(as_string(data_member.type.value));
    return properties.state;
❱


◀private: static▶ Case_Format_Style ☀How_To_Case_Data_Member_Thing(Data_Member_Item const& data_member, Data_Member_Casing_Settings const& settings, bool is_global)❰
      Case_Format_Style identifier_casing;
      
      //global
      if (is_global){
        
          //static
          if (data_member.storage == Storage_Specifier::STATIC){
            
            //const
            if (data_member.is_const){
              identifier_casing = settings.global_static_const_casing;
            }
            
            //non const
            else{
              identifier_casing = settings.global_static_non_const_casing;
            }
          }
          
          //non static
          else{
            
            //const
            if (data_member.is_const){
              identifier_casing = settings.global_const_casing;
            }
            
            //non const
            else{
              identifier_casing = settings.global_non_const_casing;
            }
          }
      }
      
      //non global
      else{
          
          //static
          if (data_member.storage == Storage_Specifier::STATIC){
            if (data_member.is_const){
              identifier_casing = settings.static_const_casing;
            }
            else{
              identifier_casing = settings.static_non_const_casing;
            }
          }
          
          //non static
          else{
            if (data_member.is_const){
              identifier_casing = settings.const_casing;
            }
            else{
              identifier_casing = settings.non_const_casing;
            }
          }
          
      }
      return identifier_casing;
❱

◀private: static▶ Case_Format_Style ☀How_To_Case_Identifier(Data_Member_Item const& data_member, C_Export_Settings const& settings, bool is_global)❰
      return How_To_Case_Data_Member_Thing(data_member,settings.portion.data_member_options.casing,is_global);
❱
◀private: static▶ Case_Format_Style ☀How_To_Case_Hungarian(Data_Member_Item const& data_member, C_Export_Settings const& settings, bool is_global)❰
      return How_To_Case_Data_Member_Thing(data_member,settings.portion.data_member_options.notation.hungarian_casing,is_global);
❱
◀private: static▶ Case_Format_Style ☀How_To_Case_Units(Data_Member_Item const& data_member, C_Export_Settings const& settings, bool is_global)❰
      return How_To_Case_Data_Member_Thing(data_member,settings.portion.data_member_options.notation.unit_casing,is_global);
❱
◀private: static▶ Case_Format_Style ☀How_To_Case_Extra_Type_Info(Data_Member_Item const& data_member, C_Export_Settings const& settings, bool is_global)❰
      return How_To_Case_Data_Member_Thing(data_member,settings.portion.data_member_options.notation.extra_type_info_casing,is_global);
❱



//hungarian notation, casing, unit suffix resolvers [for function related]
◀public: static▶ std::string ☀Derive_Name(Function_Argument const& arg, C_Export_Settings const& settings)❰
        
        //get prefixes and suffixes
        auto prefix = Data_Member_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix(arg,settings,false,false);
        auto suffix = Get_Raw_Unit_Suffix(arg);
        suffix = Get_Properly_Cased_Suffix_For_Non_Constant(suffix);
        
        //create the identifier
        std::string new_identifier = Case_Modifier::As_Modified_Casing(settings.portion.method_options.argument_casing,as_string(arg.identifier.value));
        Possibly_Add_Identifier_Prefixes_And_Suffixes(new_identifier,settings.portion.method_options.parameters.notation,prefix,suffix);
        
        //return it
        return new_identifier;
❱
◀public: static▶ std::string ☀Derive_Name(Function_Result const& arg, C_Export_Settings const& settings)❰
        
        
        //get prefixes and suffixes
        auto prefix = Data_Member_To_Hungarian_Notation_Converter::Get_Hungarian_Notation_Prefix(arg,settings,false,false);
        auto suffix = Get_Raw_Unit_Suffix(arg);
        suffix = Get_Properly_Cased_Suffix_For_Non_Constant(suffix);
        
        //create the identifier
        std::string new_identifier = Case_Modifier::As_Modified_Casing(settings.portion.method_options.argument_casing,as_string(arg.identifier.value));
        Possibly_Add_Identifier_Prefixes_And_Suffixes(new_identifier,settings.portion.method_options.parameters.notation,prefix,suffix);
        
        //return it
        return new_identifier;
❱

◀private: static▶ void ☀Possibly_Add_Identifier_Prefixes_And_Suffixes(std::string & identifier, Notation_Settings const& settings, std::string const& prefix, std::string const& suffix)❰
        
        //possibly add hungarian prefix
        if (settings.use_hungarian_prefix){
          identifier = prefix + identifier;
        }
        
        //possibly and unit suffix
        if (settings.use_unit_suffix){
          identifier += suffix;
        } 
❱



//raw gets
◀private: static▶ std::string ☀Get_Raw_Unit_Suffix(Data_Member_Item const& construct)❰
    std::string suffix;
    if (!construct.units.value.empty()){
        suffix = Unit_Suffix_Lookuper::Get_Unit_Suffix_From_Data_Unit(as_string(construct.units.value));
        if (suffix.empty()){
            suffix = as_string(construct.units.value);
        }
    }
    return suffix;
❱
◀private: static▶ std::string ☀Get_Raw_Unit_Suffix(Function_Argument const& construct)❰
    std::string suffix;
    if (!construct.units.value.empty()){
        suffix = Unit_Suffix_Lookuper::Get_Unit_Suffix_From_Data_Unit(as_string(construct.units.value));
        if (suffix.empty()){
            suffix = as_string(construct.units.value);
        }
    }
    return suffix;
❱
◀private: static▶ std::string ☀Get_Raw_Unit_Suffix(Function_Result const& construct)❰
    std::string suffix;
    if (!construct.units.value.empty()){
        suffix = Unit_Suffix_Lookuper::Get_Unit_Suffix_From_Data_Unit(as_string(construct.units.value));
        if (suffix.empty()){
            suffix = as_string(construct.units.value);
        }
    }
    return suffix;
❱


//after raw transofrmations
◀private: static▶ std::string ☀Get_Properly_Cased_Suffix(std::string suffix, Case_Format_Style style)❰
    std::string str;
    
    if (!suffix.empty()){
        str += "_";
        str += Case_Modifier::As_Modified_Casing(style,suffix);
        
    }
    
    return str;
❱


//TODO: deprecate
◀private: static▶ std::string ☀Get_Properly_Cased_Suffix_For_Non_Constant(std::string suffix)❰
    std::string str;
    
    if (!suffix.empty()){
        str += "_";
        str += suffix;
    }
    
    return str;
❱
