class
❪string❫
❪vector❫
❪unordered_map❫
❪utility❫
❪"code/tools/transcompilers/unilang/user-frontend/artifact_actions/artifact_type"❫
❪"code/tools/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/languages/source_language"❫
⚯
❪"code/utilities/types/vectors/operators/lib"❫

⚞⚟

//Multiple artifacts may be implemented in the same source language
//Artifacts are a more general concept than a source implementation.  
//We map artifacts to their source implementation here.  
//From source implementation we can derive other information (like file extensions for example).
◀public: static▶ std::optional<Source_Language> ☀Convert(Artifact_Type const& type)❰
    
    
    std::unordered_map<Artifact_Type,Source_Language> mappings;
    mappings.insert({Artifact_Type::UNILANG, Source_Language::UNILANG});
    mappings.insert({Artifact_Type::C, Source_Language::C});
    mappings.insert({Artifact_Type::CPP, Source_Language::CPP});
    mappings.insert({Artifact_Type::CPP_TEST, Source_Language::CPP});
    mappings.insert({Artifact_Type::CPP_BENCHMARK, Source_Language::CPP});
    mappings.insert({Artifact_Type::CPP_FUZZ, Source_Language::CPP});
    mappings.insert({Artifact_Type::CSHARP, Source_Language::CSHARP});
    mappings.insert({Artifact_Type::D, Source_Language::D});
    mappings.insert({Artifact_Type::RUST, Source_Language::RUST});
    mappings.insert({Artifact_Type::PROCESSING, Source_Language::PROCESSING});
    mappings.insert({Artifact_Type::BAZEL, Source_Language::BAZEL_SKYLARK});
    mappings.insert({Artifact_Type::HIDL, Source_Language::HIDL});
    mappings.insert({Artifact_Type::PROTOBUF, Source_Language::PROTOCOLBUFFERS});
    mappings.insert({Artifact_Type::THRIFT, Source_Language::THRIFT});
    mappings.insert({Artifact_Type::CAPTN_PROTO, Source_Language::CAPTN_PROTO});
    mappings.insert({Artifact_Type::MARKDOWN, Source_Language::MARKDOWN});
    mappings.insert({Artifact_Type::DZSLIDES, Source_Language::HTML});
    mappings.insert({Artifact_Type::PLANT_UML, Source_Language::PLANTUML});
    mappings.insert({Artifact_Type::HTML_TABLE, Source_Language::HTMLTABLE});
    mappings.insert({Artifact_Type::MERMAID, Source_Language::MERMAID});
    mappings.insert({Artifact_Type::CALL_GRAPH, Source_Language::GRAPHVIZ});
    mappings.insert({Artifact_Type::DATE, Source_Language::RAW_TEXT});
    mappings.insert({Artifact_Type::TREESHEETS, Source_Language::XML});
    mappings.insert({Artifact_Type::GRAPH_EASY, Source_Language::RAW_TEXT});
    mappings.insert({Artifact_Type::ADA, Source_Language::ADA});
    mappings.insert({Artifact_Type::BRAINFUCK, Source_Language::BRAINFUCK});
    mappings.insert({Artifact_Type::COBOL, Source_Language::COBOL});
    mappings.insert({Artifact_Type::ELM, Source_Language::ELM});
    mappings.insert({Artifact_Type::FORTRAN, Source_Language::FORTRAN});
    mappings.insert({Artifact_Type::FSHARP, Source_Language::FSHARP});
    mappings.insert({Artifact_Type::GO, Source_Language::GO});
    mappings.insert({Artifact_Type::HASKELL, Source_Language::HASKELL});
    mappings.insert({Artifact_Type::JAVA, Source_Language::JAVA});
    mappings.insert({Artifact_Type::KOTLIN, Source_Language::KOTLIN});
    mappings.insert({Artifact_Type::ML, Source_Language::ML});
    mappings.insert({Artifact_Type::NIM, Source_Language::NIM});
    mappings.insert({Artifact_Type::PASCAL, Source_Language::PASCAL});
    mappings.insert({Artifact_Type::PYTHON, Source_Language::PYTHON});
    mappings.insert({Artifact_Type::RACKET, Source_Language::RACKET});
    mappings.insert({Artifact_Type::SCALA, Source_Language::SCALA});
    mappings.insert({Artifact_Type::SCHEME, Source_Language::SCHEME});
    mappings.insert({Artifact_Type::SWIFT, Source_Language::SWIFT});
    mappings.insert({Artifact_Type::HOLYC, Source_Language::HOLYC});
    
    auto search = mappings.find(type);
    if (search != mappings.end()) {
        return search->second;
    }
    
    //default transformation
    std::optional<Source_Language> language;
    return language;
❱