class


❪vector❫
❪string❫
❪"code/tools/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/tools/transcompilers/unilang/main/program_input"❫
❪"code/utilities/formats/artifact/artifact_type"❫
❪"code/tools/transcompilers/unilang/user-frontend/action_graphs/actionable_code_graph"❫
❪"code/tools/transcompilers/unilang/user-frontend/action_graphs/actionable_code_graphs"❫
⚯
❪iostream❫
❪"code/tools/transcompilers/unilang/compiler-frontends/plant_uml_exporter/plant_uml_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/html_table/html_table_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/processing/processing_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/protobuf/protobuf_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/mermaid/mermaid_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/cpp_test/cpp_test_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/cpp_fuzz/cpp_fuzz_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/cpp_benchmark/cpp_benchmark_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/hidl/hidl_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/java/java_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/java_test/java_test_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/cpp/cpp_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/c/c_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/hidl/hidl_options_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_exporter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/date/date_exporter"❫
❪"code/tools/transcompilers/unilang/f2si_frontend_compiler/bazel_options_getter"❫
❪"code/tools/transcompilers/unilang/options/bazel/language_to_build_object"❫
❪"code/tools/transcompilers/unilang/user-frontend/artifact_actions/artifact_guesser"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/bazel/bazel_rule_exporter"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟


//NOTE: CONSIDER ADDING LANGUAGE STANDARDS AS PART OF THE LANGUAGE
//should we add dialect for this instead?  Some languages just won't have a dialect (which is fine)
//c language standards to support: 
//‘c90’
//‘c89’
//‘iso9899:1990’
//‘iso9899:199409’
//‘c99’
//‘iso9899:1999’
//‘c11’
//‘iso9899:2011’
//‘gnu90’
//‘gnu89’
//‘gnu99’
//‘gnu11’

//c++ language standards to support
//‘c++98’
//‘c++03’
//‘gnu++98’
//‘gnu++03’
//‘c++11’
//‘gnu++11’
//‘c++14’
//‘gnu++14’
//‘c++1z’
//‘gnu++1z’

//other languages and language standards...




//exporter = often a company, organization, or a person of interest.
//*it's a collection of configurations on how the code should be exported for a particular project, or set of projects.

//language = what language the exporter should export to
//this doesn't just imply other language code.  Maybe you want to print to UML, maybe you want to print user docs.
//language options are decided and supported by the exporter.  The exporter has no obligation to support anything it doesn't want to

//style = variations to take on the exported language.  For example,
//f2si has a really bad "component design".  However, they are slowly starting to realize how bad it is, and I've been allowed to turn other
//code into our "data structure design".  (Data structure design is bad name for it, but it is normal OO C design).  
//So these are both styles that I can apply on the same UniLang code.
//Hopefully I can start transitioning the code from the bad design to the good design assuming we stay in business.
◀public: static▶ std::vector<std::string> ☀Compile(Actionable_Code_Graph const& code_graph, Program_Input const& input)❰
    
    std::vector<std::string> created_files;
    
    for (auto const& language: code_graph.actions.artifacts){
        created_files += Create_Individual_Language_Artifact(code_graph.graph,input,language);
    }
    
    return created_files;
❱
◀public: static▶ std::vector<std::string> ☀Compile(Actionable_Code_Graphs const& code_graphs, Program_Input const& input)❰
    
    std::vector<std::string> created_files;
    for (auto const& language: code_graphs.actions.artifacts){
        created_files += Create_Group_Language_Artifact(code_graphs,input,language);
    }
    return created_files;
❱

◀private: static▶ std::vector<std::string> ☀Create_Individual_Language_Artifact(Code_Graph const& code_graph, Program_Input const& input, Artifact_Type const& language)❰

    auto unit = Decide_Exporter_Settings(input);
    std::vector<std::string> created_files;

    switch (language){
        
        // "Universal Programming Languages (UPLs)"
        case Artifact_Type::UNILANG:
        //created_files += Unilang_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.unilang);
        break;

        // "High Level Languages (GPLs)"

        // C++ related
        case Artifact_Type::C:
        created_files += C_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.c);
        break;

        case Artifact_Type::CPP:
        created_files += Cpp_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.cpp);
        break;

        case Artifact_Type::CPP_TEST:
        created_files += Cpp_Test_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.cpp_test);
        break;

        case Artifact_Type::CPP_BENCHMARK:
        created_files += Cpp_Benchmark_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.cpp_benchmark);
        break;

        case Artifact_Type::CPP_FUZZ:
        created_files += Cpp_Fuzz_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.cpp_fuzz);
        break;
        
        case Artifact_Type::JAVA:
        created_files += Java_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.java);
        break;
        
        case Artifact_Type::JAVA_TEST:
        created_files += Java_Test_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.java_test);
        break;

        case Artifact_Type::CSHARP:
        //created_files += CSharp_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.csharp);
        break;

        case Artifact_Type::D:
        //created_files += D_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.d);
        break;

        case Artifact_Type::RUST:
        //created_files += Rust_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.rust);
        break;

        case Artifact_Type::PROCESSING:
        created_files += Processing_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.processing);
        break;

        //IDLs
        case Artifact_Type::HIDL:
        created_files += Hidl_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.hidl);
        break;

        case Artifact_Type::PROTOBUF:
        created_files += Protobuf_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.proto_buff,input.options.dir);
        break;
        
        case Artifact_Type::THRIFT:
        break;
        
        case Artifact_Type::CAPTN_PROTO:
        break;

        //Documentations
        case Artifact_Type::PLANT_UML:
        created_files += Plant_Uml_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.plant_uml);
        break;

        case Artifact_Type::CALL_GRAPH:
        //use to be dia
        break;

        case Artifact_Type::HTML_TABLE:
        created_files += Html_Table_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.html_table);
        break;

        case Artifact_Type::TREESHEETS:
        //created_files += Treesheets_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.treesheets);
        break;

        case Artifact_Type::GRAPH_EASY:
        //https://metacpan.org/pod/release/TELS/Graph-Easy-0.64/bin/graph-easy
        //created_files += Graph_Easy_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.graph_easy);
        break;

        case Artifact_Type::MERMAID:
        created_files += Mermaid_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.mermaid);
        break;
        
        case Artifact_Type::MARKDOWN:
        created_files += Markdown_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.markdown);
        break;
        
        case Artifact_Type::DZSLIDES:
        break;

        //Meta
        case Artifact_Type::DATE:
        created_files += Date_Exporter::Export(code_graph.structure,unit.contributors);
        break;
        
        
        
        //https://videopuppet.com/docs/script/
        //similar to markdown: reStructuredText (RST)
        
        //KOTLIN
        
        //Isabelle
        
        //ACL2
        
        //HOL4
        
        //SPARK
        
        //Dafny
        
        //Coq
        
        //Agda
        
        //Dhall
        //https://dhall-lang.org/
        
        //C++/CX
        //https://en.wikipedia.org/wiki/C%2B%2B/CX
        
        // https://en.wikipedia.org/wiki/Interface_description_language
        // Protobuf
        // Thrift
        // MessagePack
        // Cap'n Proto
        // protlr.com
        
        //ten-lang
        //https://github.com/ten-lang/libten
        
        //emojicode
        //https://www.emojicode.org/docs/
        
        
        // support terralang
        // http://terralang.org/

        // support cuelang
        // https://cuelang.org/docs/about/

        // support lamdu
        // https://www.lamdu.org/
        
        // gnu octave
        // https://www.gnu.org/software/octave/support.html
        
        //Qt Form
        //Qt<->json<->C++ struct
        
        //P4 programming language
        //https://p4.org/code/

        //LISP family:
            //IPL
            //LISP
            //Franz Lisp
            //MacLisp
            //InterLisp
            //EmacsLisp
            //NIL
            //Lisp Machine Lisp
            //Scheme
            //T
            //ZetaLisp
            //LMI Lisp
            //MultiLisp
            //Kawa
            //XLISP
            //Racket
            //Logo
            //newLISP
            //Le Lisp
            //Common Lisp
            //AutoLisp
            //Arc
            //Lazy Racket
            //Typed Racket
            //EuLisp
            //Carp
            //Clojure
            //Vital-Lisp
            //Hackett
            //PicoLisp
            //ISLISP
            //Dylan
            //Hy
            //Virtual Lisp
            //OpenLisp
            //LFE
        
        //Pascal Family:
            //Algol W
            //Euler
            //Pascal
            //Modula
            //Delphi
            //Modula-2
            //Modula-3
            //Oberon
            //Nim
            //Oberon-2
        
        //Prolog Family:
            //Planner
            //Prolog
            //Mercury
            //Pilog
            //Datalog
            //Poplog
            //Logtalk
        
//POP-11
//Pico
//Python
        
        //Squeaky family:
            //Simula
            //Smalltalk
            //BETA
            //CLU
            //Squeak
            //Self
            //Newsqueak
            //Io
            //Scratch
            //ScatchJr
//COWSEL
//POP-2
        //Shell family:
            //sh
            //scsh
            //bash
            //rc
            //csh
            //ksh
            //wish
            //es
            //zsh
//Forth
//awk
//tcl
//erlang
//perl
//oz
//elixir
//rebol
//php
//red
//perl 6
//factor
//postscript
        
        //Algol Family:
            //Algol 58
            //Algol 60
            //Algol 68
            //ABC Algol
            //Algol X
//PL/I
        
//More Math Geared:
        //Untyped lambda calculus
        //First order logic
        //Combinatory logic
        //Simply typed lambda calculus
        //Higher order logic
        
        //C Family:
            //CPL
            //BCPL
            //B
            //C
            //Objective C
            //Cyclone
            //LPC
            //Alef
            //D
            //C++
            //Pike

//Plankalkul
//Begriffsschrift
//Fortran
//Comtran
//Cobol
//COMIT
//SNOBOL
//Rexx
//Ada
//Eiffel
//SPITBOL
//ZPL
//Chapel

        //APL Family:
            //APL
            //FP
            //A
            //PPL
            //FL
            //A+
            //J
            //K
            //Q

//P"
//Unlambda
//Javascript
//INTERCAL
//Speakeasy
//A
//MatLab
//R
//JOSS
//Julia
//Mumps
//JOSS
//JOY
//Brainfuck
//ISWIM
//ALF
//Lua
//Epigram
//Ruby
        
        
        //Basic Family:
            //Darmouth Basic
            //Altair Basic
            //HP Basic
            //VAX BASIC
            //Microsoft Basic
            //IBM Basic
            //MS Basic for Macintosh
            //Integer Basic
            //MBASIC
            //GW-BASIC
            //Applesoft Basic
            //MSX Basic
            //Quick Basic
            //Apple Business Basic
            //Vilnius Basic
            //Liberty Basic
            //FreeBASIC
            //Visual Basic
            //QBasic
            //Visual Basic.NET
            //Gambas
            //VBScript
            //QB32/QB64
            //SmallBasic
            //Microsoft Small Basic
        
        //ML Family:
            //ML
            //Standard ML
            //Dependent ML
            //CAML
            //Alice
            //ATS
            //OCaml
            //Nemerle
            //Grain
            //F#
            //Coq
            //F*
        
        //SASL family:
            //SASL
            //NPL
            //KRC
            //Hope
            //Miranda
            //Orwell
            //Haskell
            //O'Haskell
            //Clean
            //MetaHaskell
            //Curry
            //Idris
            //Elm
        
//idris
        

//luna
//https://luna-lang.org/
        

//model checkers:
//TLA+


//Agda
//Crystal
//CSP
//Limbo
//Go
//occam
//SQL
        

//kittenlang
//https://kittenlang.org/intro/
        


//microsoft products:
//word
//excel
//powerpoint
        

//statebox and petri nets
//http://www.di.unito.it/~amparore/mc4cslta/editor.html


//arc42
//https://arc42.org/overview/


//cloure spec
//http://clojure.org/guides/spec
        
//https://musing-rosalind-2ce8e7.netlify.com
        
        
        
// Documentation Language
//     Behavioural UML Diagram
//         Activity Diagram
//         Use Case Diagram
//         Interaction Overview Diagram
//         Timing Diagram
//         State Machine Diagram
//         Communication Diagram
//         Sequence Diagram
//     Structural UML Diagram
//         Class Diagram
//         Object Diagram
//         Component Diagram
//         Composite Structure Diagram
//         Deployment Diagram
//         Package Diagram
//         Profile Diagram

//Nassi–Shneiderman diagrams 
        
//documentation:
        
// lord/slate
// https://github.com/lord/slate

// docusaurus
// https://docusaurus.io/en/

// mkdocs
// https://www.mkdocs.org

// docsify
// https://docsify.js.org/#/

//vudash
//http://vudash.com/#/
        
//sketch systems (language / diagram)
//https://sketch.systems/
        
        
// https://github.com/woboq/woboq_codebrowser
// https://github.com/foonathan/standardese

        

//https://github.com/google/wuffs

//other schema languages
//https://github.com/Microsoft/bond
//https://github.com/seagreen/plate
//https://github.com/dhall-lang/dhall-lang
//https://github.com/microsoft/BosqueLanguage/
        
        

//https://wy-lang.org/
        

//seq lang
//https://seq-lang.org/intro.html
        

//unison
//https://www.unisonweb.org/
        
//beef language
//https://www.beeflang.org/

        default:
        std::cerr << "unknown export language" << std::endl;
    }
    return created_files;
❱


◀private: static▶ std::vector<std::string> ☀Create_Group_Language_Artifact(Actionable_Code_Graphs const& code_graphs, Program_Input input, Artifact_Type const& language)❰

    auto unit = Decide_Exporter_Settings(input);
    std::vector<std::string> created_files;
    
    //TODO(thickey): we should fix APIs so we aren't converting back
    std::vector<Code_Graph> code_graphs2;
    for (auto const& it: code_graphs.graphs){
        code_graphs2.emplace_back(it.graph);
    }

    switch (language){
        case Artifact_Type::BAZEL:
        created_files += Bazel_Rule_Exporter::Export(code_graphs2,unit.contributors,unit.settings.foreign_language.bazel_build);
        break;
        default:;
    }
    return created_files;
❱



◀private: static▶ Compile_Unit ☀Decide_Exporter_Settings(Program_Input const& input)❰

    //TODO: lookup by data member (need reflection)
    if (input.options.user_chosen_export_settings.exporter == Chosen_Exporter::UBER){
        return input.settings.compiler_settings.uber;
    }
    // else if (input.options.user_chosen_export_settings.exporter == Chosen_Exporter::F2SI){
    //     return input.settings.compiler_settings.f2si;
    // }
    else if (input.options.user_chosen_export_settings.exporter == Chosen_Exporter::TREVOR){
        return input.settings.compiler_settings.trevor;
    }
    
    std::cerr << "invalid exporter" << std::endl;
    return input.settings.compiler_settings.trevor;
❱
