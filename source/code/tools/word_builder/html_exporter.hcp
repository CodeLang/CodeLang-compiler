class
❪string❫
❪"code/utilities/colors/color_palettes"❫
❪"code/utilities/std_hackery/std_aliases"❫
❪"code/tools/word_builder/settings/settings"❫
❪"code/tools/word_builder/data/puzzle"❫
⚯
❪iostream❫
❪"code/utilities/types/vectors/creators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/html/basic_html_template_getter"❫
⚞⚟

◀public: static▶ void ☀Export(std::vector<Puzzle> const& puzzles, Settings const& settings, std::string const& file_name)❰

    //create artifact
    auto str = As_Html_Format(puzzles,settings);
    Write_To_File(file_name,str);
❱

◀private: static▶ std::string ☀As_Html_Format(std::vector<Puzzle> const& puzzles, Settings const& settings)❰
    
    //build html sections
    auto css = Get_Css();
    auto body = Get_Body(puzzles,settings);
    
    //build html
    std::string html = Basic_Html_Template_Getter::Get(css,body);
    return html;
❱


◀private: static▶ std::string ☀Get_Css()❰

    std::string css;
    Append_With_Newline(css,"table { ");
    Append_With_Newline(css,"border: 0px solid black; ");
    Append_With_Newline(css,"font-size: 40px; ");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"th, td { ");
    Append_With_Newline(css,"border: 1px solid black; ");
    Append_With_Newline(css,"font-size: 40px; ");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"table { ");
    Append_With_Newline(css,"width: 25%; ");
    Append_With_Newline(css,"}");
    
    Append_With_Newline(css,"table { padding-bottom: 60px; }");
    Append_With_Newline(css,"tr { text-align: center; }");
    Append_With_Newline(css,"p { font-size: 10px; }");
    return css;
❱

◀private: static▶ std::string ☀Get_Body(std::vector<Puzzle> const& puzzles, Settings const& settings)❰
    std::string x;
    
    //puzzles
    for (auto const& it: puzzles){
        Append_With_Newline(x,"<table>");
        Append_With_Newline(x,"<tr>");
        
        Append_With_Newline(x,"<td>");
        Append_With_Newline(x,it.letters);
        Append_With_Newline(x,"</td>");
        
        Append_With_Newline(x,"<td>");
        Append_With_Newline(x,std::to_string(it.words.size()));
        Append_With_Newline(x,"</td>");

        Append_With_Newline(x,"</tr>");
        Append_With_Newline(x,"</table>");
    }
    
    //put answers on bottom
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    Append_With_Newline(x,"<table>");
    Append_With_Newline(x,"</table>");
    
    
    //answers
    int count = 1;
    for (auto const& it: puzzles){
        Append_With_Newline(x,"<p>");
        Append(x,std::to_string(count));
        Append(x,". ");
        ++count;
        for (auto const& word: it.words){
            Append_With_Newline(x,word);
            Append_With_Newline(x," ");
        }
        Append_With_Newline(x,"</p>");
    }
    
    
    return x;
❱