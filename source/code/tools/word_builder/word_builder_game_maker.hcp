class
❪string❫
⚯
❪iostream❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ void ☀Make()❰

    
    //assume english standard likelyhood of letters
    //these numbers might need recalculated based on the actual word list
    auto letter_likelyhood = Standard_Char_Likelyhood_In_Words();
    
    //create random letters based on probability
    std::string letters;
    for (size_t i = 0; i < 8; ++i){
        letters += Get_Random_By_Probability(letter_likelyhood);
    }
    std::cout << letters << std::endl;
    
    //npt sure if this is the correct relative path,
    //but its what seems to be whats available when I link the data to the binary with "data=".
    auto words = Read_Each_Line_Of_File_Into_Vector("external/scrabble_words/2019.txt");
    
    std::cout << words.size() << " words" << std::endl;
    
    //get answers
    std::vector<std::string> answers;
    for (auto const& it: words){
        if (Letters_Exist_In_Word(letters,it)){
            answers.emplace_back(it);
        }
    }
    
    std::cout << answers.size() << " answers" << std::endl;
    
❱

◀private: static▶ bool ☀Letters_Exist_In_Word(std::string letters, std::string const& word)❰

    for (auto const& it: word){
        if (Contains_Character(letters,it)){
            Remove_First_Instance_Of_Char(letters,it);
        }
        else{
            return false;
        }
    }
    return true;
❱