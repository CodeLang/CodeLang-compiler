class
❪iostream❫
❪cstdlib❫
❪thread❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/program/call/lib.hpp"❫
❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/time/sleeping/lib"❫
⚯
❪"code/utilities/program/wrappers/sendmail/sendmail_sender"❫
❪"code/utilities/program/wrappers/sendmail/sendmail_settings"❫
❪"code/utilities/program/wrappers/sendmail/sendmail_settings_getter"❫
❪"code/utilities/program/wrappers/sendmail/ssmtp_conf_maker"❫
⚞⚟

◀public: static▶ void ☀Run() ❰
    
    
    while (true) {
        
        Move_To_Repo_Root();
        
        Process_Results x;
        x = Run_Command_And_Show("pwd");
        x = Run_Command_And_Show("git rev-parse HEAD");
        
        x = Run_Command_And_Show("echo hello");
        
        x = Run_Command_And_Show("git reset --hard HEAD && git clean -d -f;");
        x = Run_Command_And_Show("git pull");
        
        x = Run_Command_And_Show("./user_build //code/tools/worker_bot:main");
        if (x.return_code == 0){
            
            Send_Email_Status();
            Sleep_For_N_Hours(8);
            exit(0);
        }
        else {
            std::cout << "failed to build. not exiting" << std::endl;
        }
        
        Sleep_For_N_Hours(8);
        
        
    }
❱


◀private: static▶ void ☀Send_Email_Status() ❰

    Ssmtp_Conf_Maker::Setup_File();
    auto sendmail_settings = Sendmail_Settings_Getter::Test_Settings();
    sendmail_settings.title = "Worker Bot Results";
    sendmail_settings.message = "These are the results of our recent runs:";
    Sendmail_Sender::Send(sendmail_settings);
    std::cout << "sleeping then exiting" << std::endl;
❱
◀private: static▶ Process_Results ☀Run_Command_And_Show(std::string command) ❰
        std::cout << command << std::endl;
        auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
        if (!results.stdout.empty()){
            std::cout << results.stdout << std::endl;
        }
        if (!results.stderr.empty()){
            std::cout << results.stderr << std::endl;
        }
        return results;
❱