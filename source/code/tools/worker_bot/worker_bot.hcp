class
❪iostream❫
❪cstdlib❫
❪thread❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/program/call/lib.hpp"❫
❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/time/sleeping/lib"❫
⚯
⚞⚟

◀public: static▶ void ☀Run() ❰
    
    
    while (true) {
        
        Move_To_Repo_Root();
        
        Process_Results x;
        x = Run_Command_And_Show("pwd");
        x = Run_Command_And_Show("git rev-parse HEAD");
        
        x = Run_Command_And_Show("git reset --hard HEAD && git clean -d -f;");
        x = Run_Command_And_Show("git pull");
        
        x = Run_Command_And_Show("./user_build //code/tools/worker_bot:main");
        if (x.return_code == 0){
            std::cout << "sleeping then exiting" << std::endl;
            Sleep_For_N_Hours(1);
            exit(0);
        }
        else {
            std::cout << "failed to build. not exiting" << std::endl;
        }
        
        Sleep_For_N_Hours(1);
        
        
    }
❱


◀private: static▶ Process_Results ☀Run_Command_And_Show(std::string command) ❰
        std::cout << command << std::endl;
        auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
        if (!results.stdout.empty()){
            std::cout << results.stdout << std::endl;
        }
        if (!results.stderr.empty()){
            std::cout << results.stderr << std::endl;
        }
        return results;
❱