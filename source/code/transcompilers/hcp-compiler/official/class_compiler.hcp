class
❪iostream❫
❪string❫
❪fstream❫
❪"class_structure"❫
⚯
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
❪"code/utilities/types/wstrings/transformers/trimming/lib"❫
❪"code/utilities/types/wstrings/transformers/other/lib"❫
❪"code/utilities/converters/lib"❫
❪"include_file_printer"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟


◀public: static▶ void ☀Compile_HCP_File(Class_Structure const& structure, std::string const& directory, bool const& utility_functions◀=true▶)❰

    //use the structure to print the cpp and hpp versions of the file
	
	std::string header_name = As_Removed_Suffix(structure.Path_To_File_Name())+ ".hpp";
	std::string source_name = As_Removed_Suffix(structure.Path_To_File_Name()) + ".cpp";

	  if (!directory.empty()){
		header_name = directory + "/" + Get_File_Name(header_name);
		source_name = directory + "/" + Get_File_Name(source_name);
	}

    //std::cout << structure.Path_To_File_Name() << std::endl;
    //std::cout << header_name << std::endl;
    //std::cout << source_name << std::endl;

    std::wofstream hpp_stream(header_name);
    std::wofstream cpp_stream(source_name);
    
    auto str = As_Removed_Suffix(structure.File_Name());
    std::wstring wstr(str.begin(),str.end());
    cpp_stream << "#include " << '"' << wstr << ".hpp" << '"' << '\n';
    hpp_stream << "#pragma once\n";
    Include_File_Printer::Print(hpp_stream,structure.Header_Includes());
    Include_File_Printer::Print(cpp_stream,structure.Source_Includes());
    hpp_stream << '\n';
    hpp_stream << as_wstring(boost_serialization_headers());
    hpp_stream << as_wstring(nlohmann_serialization_headers());
    
    
    
    hpp_stream << '\n';
    cpp_stream << '\n';

    //dump hpp code wrapped in class name
    Dump_HPP(hpp_stream,structure,structure.File_Name(),utility_functions);
    Dump_CPP(cpp_stream,structure,structure.File_Name(),utility_functions);
    
    //JUNK NOTSES
    //add the json exporting function
    /*
    cpp_stream << "//functions added automatically by hcp-compiler\n";
    
        //json function implementation
        cpp_stream << "nlohmann::json As_JSON_Assignable(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tnlohmann::json j;\n";
        for (auto const& data_member: structure.Data_Members()){
            cpp_stream << "\tj[\"" << data_member << "\"] = As_JSON_Assignable(class_object." << data_member << ");\n";
        }
        cpp_stream << "\treturn j;\n}";
        
        //class name function implementation
        cpp_stream << "std::string Class_Name(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\treturn \"" <<  class_name << "\";\n}";
        
        //As YAML String
        cpp_stream << "std::string As_YAML_String(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tstd::string yaml_str;\n";
        cpp_stream << "\treturn yaml_str;\n}";
        
        //As XML String
        cpp_stream << "std::string As_XML_String(" <<  class_name << " const& class_object){\n";
        cpp_stream << "\tstd::string xml_str;\n";
        cpp_stream << "\treturn xml_str;\n}";
    */
❱

◀private: static▶ std::string ☀Get_Class_Name(Class_Structure const& structure)❰
  return Make_Capital_And_Underscored_In_User_Type_Format(As_Removed_Suffix(structure.File_Name()));
❱

◀private: static▶ void ☀Dump_HPP(std::wofstream & outfile, Class_Structure const& structure, std::string const& hcp_file, bool const& utility_functions)❰
    auto str = Get_Class_Name(structure);
    std::wstring wstr(str.begin(),str.end());
    outfile << "class " << wstr;
    if (!structure.Inheritance().empty()){
        outfile << ": " << structure.Inheritance();
    }
    outfile << "{\n";

    //dump
    outfile << structure.HPP_Code();
    
    if (utility_functions){
      
      /*
      outfile << "//functions added automatically by hcp-compiler\n";
      outfile << "public:\n";
      outfile << "\tfriend  std::string Class_Name(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend nlohmann::json As_JSON_Assignable(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend  std::string As_YAML_String(" <<  wstr << " const& class_object);\n";
      outfile << "\tfriend  std::string As_XML_String(" <<  wstr << " const& class_object);\n";
      */
      
      outfile << "public:\n";
      outfile << as_wstring(boost_serialization_interface_methods(structure));
    }
    
    outfile << "};";
    outfile << "\n";
    
    if (utility_functions){
      outfile << as_wstring(nlohmann_serialization_interface_methods(structure,str));
    }
    
❱

◀private: static▶ void ☀Dump_CPP(std::wofstream & outfile, Class_Structure const& structure, std::string const& hcp_file, bool const& utility_functions)❰
  outfile << structure.CPP_Code();
  auto str = Get_Class_Name(structure);
  
  if (utility_functions){
    outfile << as_wstring(nlohmann_serialization_implementation_methods(structure,str));
  }
❱


//serialization related
◀private: static▶ std::string ☀boost_serialization_interface_methods(Class_Structure const& structure)❰
  std::string str;
  str += "template<class Archive>\n";
  str += "void serialize(Archive & ar, const unsigned int version){\n";
  for (auto const& data_member: structure.Data_Members()){
      str += "\tar & " + as_string(data_member) + ";\n";
  }
  str += "}\n";
  return str;
❱

◀private: static▶ std::string ☀boost_serialization_headers()❰
  std::string str;
  str += "#define _LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR\n";
  str += "#define BOOST_NO_AUTO_PTR\n";
  str += "#include <boost/archive/text_oarchive.hpp>\n";
  str += "#include <boost/archive/text_iarchive.hpp>\n";
  return str;
❱

◀private: static▶ std::string ☀nlohmann_serialization_interface_methods(Class_Structure const& structure, std::string const& class_name)❰
  std::string str;
  Append(str,"void to_json(nlohmann::json& j, const ");
  Append(str,class_name);
  Append_With_Newline(str,"&x);");
  
  Append(str,"void from_json(const nlohmann::json& j, ");
  Append(str,class_name);
  Append_With_Newline(str,"&x);");
  return str;
❱

◀private: static▶ std::string ☀nlohmann_serialization_implementation_methods(Class_Structure const& structure, std::string const& class_name)❰
  std::string str;
  
  //to json
  Append(str,"void to_json(nlohmann::json& j, const ");
  Append(str,class_name);
  Append_With_Newline(str,"&x) {");
  Append_With_Newline(str,"j = nlohmann::json{");
  for (auto const& data_member: structure.Data_Members()){
    Append(str,"{\"");
    Append(str,as_string(data_member));
    Append(str,"\", x.");
    Append(str,as_string(data_member));
    Append_With_Newline(str,"},");
  }
  Append_With_Newline(str,"};");
  Append_With_Newline(str,"}");
  
  
  //from json
  Append(str,"void from_json(const nlohmann::json& j, ");
  Append(str,class_name);
  Append_With_Newline(str,"&x) {");
  for (auto const& data_member: structure.Data_Members()){
    Append(str,"j.at(\"");
    Append(str,as_string(data_member));
    Append(str,"\").get_to(x.");
    Append(str,as_string(data_member));
    Append_With_Newline(str,");");
  }
  Append_With_Newline(str,"}");
  
  return str;
❱

◀private: static▶ std::string ☀nlohmann_serialization_headers()❰
  std::string str;
  str += "#include \"nlohmann/json.hpp\"\n";
  return str;
❱



