class

❪iostream❫
❪fstream❫
❪vector❫
❪string❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/options/bazel/language_to_build_object"❫
❪"code/transcompilers/unilang/user-frontend/language_guesser"❫
❪"code/transcompilers/unilang/options/bazel/build_rule_settings"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_settings"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transfer_action"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transferer"❫
⚯
❪"code/transcompilers/unilang/bazel_printer/top_comment_getter"❫
❪"code/transcompilers/unilang/bazel_printer/load_getter"❫
❪"code/transcompilers/unilang/bazel_printer/package_getter"❫
❪"code/transcompilers/unilang/bazel_printer/rule_getter/rule_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/transcompilers/unilang/bazel_printer/build_info_extractor"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/file_transferer"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(std::vector<Code_Graph> const& code_graphs, std::vector<Contributor> const& contributors, Build_Rule_Settings const& settings)❰
    
    auto build_objects = Build_Info_Extractor::Get_All_Build_Objects(code_graphs);
    
    //get a source code file name that is representative of the build file
    //any source file that becomes part of the build file is probably sufficient.
    //the only reason we need this filename, is because it helps determine if the date
    //should be updated or remain what is was previously
    std::string file_name = Get_Filename_Of_Unilang_Source_To_Represent_Build_File(code_graphs);
  
    std::string result;
    Append_With_Newline(result,Top_Comment_Getter::Get(settings,file_name));
    Append_With_Newline(result,Load_Getter::Get(build_objects,settings.loads));
    Append_With_Newline(result,Package_Getter::Get(settings));
    
    for (auto it: code_graphs){
        Append_With_Newline(result,Rule_Getter::Get(it.structure,settings));
    }
    
    //create build file
    std::ofstream outfile(settings.name_of_build_file);
    outfile << result;
    outfile.close();
    
    
    std::vector<std::string> created_files;
    created_files.emplace_back(settings.name_of_build_file);
    return created_files;
❱


◀private: static▶ std::string ☀Get_Filename_Of_Unilang_Source_To_Represent_Build_File(std::vector<Code_Graph> const& code_graphs)❰
    std::string file_name = "";
    if (!code_graphs.empty()){
        file_name = code_graphs[0].structure.name;
    }
    return file_name;
❱