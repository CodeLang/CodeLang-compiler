class

❪iostream❫
❪fstream❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/options/bazel/language_to_build_object"❫
❪"code/transcompilers/unilang/user-frontend/language_guesser"❫
❪"code/transcompilers/unilang/options/bazel/build_rule_settings"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_settings"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transfer_action"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transferer"❫
⚯
❪"code/transcompilers/unilang/bazel_printer/top_comment_getter"❫
❪"code/transcompilers/unilang/bazel_printer/load_getter"❫
❪"code/transcompilers/unilang/bazel_printer/rule_getter/rule_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/transcompilers/unilang/bazel_printer/build_info_extractor"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
⚞⚟

◀public: static▶ void ☀Export(std::vector<Code_Graph> const& code_graphs, std::vector<Contributor> const& contributors, Build_Rule_Settings const& settings)❰
    
    auto build_objects = Build_Info_Extractor::Get_All_Build_Objects(code_graphs);
  
    std::string result;
    Append_With_Newline(result,Top_Comment_Getter::Get(settings));
    Append_With_Newline(result,Load_Getter::Get(build_objects,settings.loads));
    
    for (auto it: code_graphs){
        Append_With_Newline(result,Rule_Getter::Get(it.structure,settings));
    }
    
    //create build file
    std::ofstream outfile(settings.name_of_build_file);
    outfile << result;
    outfile.close();
    if (true){
        Transfer_Build_File();
    }
❱

◀private: static▶ void ☀Transfer_Build_File()❰

    //build pulse settings
    auto pulse_settings = Get_Pulse_Settings();

    //build action settings
    auto file_name = "BUILD";
    auto action = Get_Pulse_Action(pulse_settings,file_name);

    //transfer
    Pulse_Transferer::Transfer(pulse_settings,action);
❱

◀private: static▶ Pulse_Settings ☀Get_Pulse_Settings()❰
    Pulse_Settings pulse_settings;
    pulse_settings.computer_user = "thickey";
    //pulse_settings.computer_name = "tower";
    pulse_settings.computer_name = "192.168.253.1"; //we could derive this on VMs and other machines on the same network
    pulse_settings.lftp_password_location = "/home/flighty/Desktop/secret/computer_keys/LFTP_PASSWORD";
    pulse_settings.expected_process_name = "pulseUi";
    return pulse_settings;
❱

◀private: static▶ Pulse_Transfer_Action ☀Get_Pulse_Action(Pulse_Settings const& settings, std::string const& file_name)❰

    std::string full_path = Full_Path();
    full_path += "/" + file_name;

    std::string password = Get_First_Line_Of_File(settings.lftp_password_location);
    auto parts = Current_Path_In_Parts();
    Remove_First_Element(parts);    
    parts[1] = settings.computer_user;

    std::string dest_path;
    for (auto p: parts){
        dest_path += "/" + p;
    }


    //Build pulse transfer action
    Pulse_Transfer_Action action;
    action.password = password;
    action.from = full_path;
    action.to = dest_path;
    return action;
❱