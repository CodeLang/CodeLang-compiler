class

❪vector❫
❪string❫
❪iostream❫
❪fstream❫
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/options/language-specific/cpp_benchmark_export_settings"❫
❪"code/transcompilers/unilang/structure/inlined_structures"❫
❪"code/transcompilers/unilang/structure-adjuster/structure_adjuster"❫
❪"code/transcompilers/unilang/structure-printer/file_printer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/languages/source_language"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/structure-printer/export_file_settings/export_file_settings"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫

⚯
❪"code/transcompilers/unilang/structure-printer/filename/file_name_getter"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/transcompilers/unilang/boilerplate_printer/boilerplate_printer"❫
❪"code/transcompilers/unilang/structure-printer/namespace_printer"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/transcompilers/unilang/structure-printer/shared_printer"❫
❪"code/transcompilers/unilang/compiler-frontends/cpp_benchmark/benchmark_coverage_summary_getter"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(Structure structure, std::vector<Contributor> const& contributors, Cpp_Benchmark_Export_Settings const& settings)❰


    std::vector<std::string> files_created;
    
    //force structure changes
    //TODO: we need to store adjustment phases.  Different tools might want the structure
    //at different phases in its transition.  For now, and this is a hack, I'll make a copy
    //for the test wrapper
    Structure copy = structure;
    Structure_Adjuster::Adjust(copy,settings.manipulations,Source_Language::CPP);
    
        Export_File_Settings file_settings;
        file_settings.language = Source_Language::CPP;
        file_settings.code = Code_Type::GLOBAL;
        file_settings.special = Special_File_Type::NORMAL;
        file_settings.file = File_Type::IMPLEMENTATION;
    
    //files_created += Possibly_Create_Test(copy,file_settings,settings);
    
    return files_created;
❱
