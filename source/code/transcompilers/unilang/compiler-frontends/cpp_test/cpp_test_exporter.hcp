class

❪vector❫
❪string❫
❪iostream❫
❪fstream❫
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/options/language-specific/cpp_test_export_settings"❫
❪"code/transcompilers/unilang/structure/inlined_structures"❫
❪"code/transcompilers/unilang/structure-adjuster/structure_adjuster"❫
❪"code/transcompilers/unilang/structure-printer/file_printer"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/languages/source_language"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/structure-printer/export_file_settings/export_file_settings"❫

⚯
❪"code/transcompilers/unilang/structure-printer/filename/file_name_getter"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/transcompilers/unilang/boilerplate_printer/boilerplate_printer"❫
❪"code/transcompilers/unilang/structure-printer/namespace_printer"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/char/lib"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Export(Structure structure, std::vector<Contributor> const& contributors, Cpp_Test_Export_Settings const& settings)❰


    std::vector<std::string> files_created;
    
    //force structure changes
    //TODO: we need to store adjustment phases.  Different tools might want the structure
    //at different phases in its transition.  For now, and this is a hack, I'll make a copy
    //for the test wrapper
    Structure copy = structure;
    Structure_Adjuster::Adjust(copy,settings.manipulations,Source_Language::CPP);
    
        Export_File_Settings file_settings;
        file_settings.language = Source_Language::CPP;
        file_settings.code = Code_Type::GLOBAL;
        file_settings.special = Special_File_Type::NORMAL;
        file_settings.file = File_Type::IMPLEMENTATION;
    
    files_created += Create_Test(copy,file_settings,settings);
    
    return files_created;
❱

◀private: static▶ std::string ☀Create_Path_To_Test_File(Structure const& structure, Export_File_Settings const& file_settings, Cpp_Test_Export_Settings const& settings)❰

        std::string file_test_suffix = "_test";
        std::string file_test_directory = "test";
    
        //create base file name with file extension
        auto file_name = File_Name_Getter::Get(file_settings,structure.name + file_test_suffix,settings.general.filesystem_naming);
        
        //create the test directory we will create a file in
        Create_Path_If_It_Doesnt_Already_Exist(Current_Path() + "/" + file_test_directory);
        
        std::string full_path = file_test_directory + "/" + file_name;
        return full_path;
❱


◀private: static▶ std::vector<std::string> ☀Create_Test(Structure const& structure, Export_File_Settings const& file_settings, Cpp_Test_Export_Settings const& settings)❰
    std::vector<std::string> files_created;
    
    if (Has_Unit_Tests(structure)){
        
        //create file name
        auto full_path = Create_Path_To_Test_File(structure,file_settings,settings);
        files_created.emplace_back(full_path);
        
        std::wofstream out(full_path);
        
        Boilerplate_Printer::Print_Top_Comment(out,structure,file_settings,settings.portion.meta,full_path);
        out << as_wstring(Get_Include_Section(structure));
        
        
    //TODO: FIX THIS
    C_Export_Settings BAD_DONT_DO_THIS;
    BAD_DONT_DO_THIS.general = settings.general;
    BAD_DONT_DO_THIS.portion = settings.portion;
    BAD_DONT_DO_THIS.manipulations = settings.manipulations;
    Namespace_Printer::Print_Namespace(out,structure.namespaces,BAD_DONT_DO_THIS.portion.namespace_options);
        out << as_wstring(Structure_As_Unit_Test(structure,settings));
    Namespace_Printer::Print_Namespace_End(out,structure.namespaces,BAD_DONT_DO_THIS.portion.namespace_options);
    Boilerplate_Printer::Print_End(out,structure,file_settings,BAD_DONT_DO_THIS);
        out.close();
    }
    return files_created;
❱

◀private: static▶ std::string ☀Get_Include_Section(Structure const& structure)❰
    std::string result;
    
    Append(result,"#include ");
    result += Get_Double_Quote();
    auto path = Get_Path_Of_Directory_After_Found_Folder("source");
    Append(result,path);
    Append(result,structure.name);
    Append(result,".hh");
    result += Get_Double_Quote();
    result += "\n";
    
    
    Append(result,"#include ");
    result += Get_Double_Quote();
    Append(result,"gtest/gtest.h");
    result += Get_Double_Quote();
    result += "\n";
    return result;
❱


◀private: static▶ bool ☀Has_Unit_Tests(Structure const& structure)❰
    for (auto const& it: structure.methods.methods){
        if (!it.unit_tests.test_cases.empty()){
            return true;
        }
    }
    
    return false;
❱

◀private: static▶ std::string ☀Structure_As_Unit_Test(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string result;
    result += Get_Each_Unit_Test_Section(structure,settings);
    return result;
❱

◀private: static▶ std::string ☀Get_Each_Unit_Test_Section(Structure const& structure, Cpp_Test_Export_Settings const& settings)❰
    std::string result;
    
    for (auto const& it: structure.methods.methods){
        for (auto const& j: it.unit_tests.test_cases){
            
            //extract all the data into strings
            std::string test_name = Case_Modifier::As_Modified_Casing(settings.portion.method_options.test_case.test_name_casing,as_string(j.name.value));
            std::string test_tag = Case_Modifier::As_Modified_Casing(settings.portion.method_options.test_case.test_tag_casing,as_string(j.tag.value));
            std::string reason_for_testing = as_string(j.reason_for_testing.value);
            
            std::vector<std::string> fail_reasons;
            for (auto const& x: j.reasons_for_failing){
                fail_reasons.emplace_back(as_string(x.reason.value));
            }
            
            result += "// Reason for testing: ";
            result += reason_for_testing;
            result += "\n";
            result += "// Failure explanation: ";
            for (auto const& x: fail_reasons){
                result += x;
                result += "\n";
            }
            result += "TEST(";
            result += test_name;
            result += ", ";
            result += test_tag;
            result += ")\n{\n\n";
            result += as_string(j.body.value);
            result += "\n\n}\n\n";
        }
    }
    return result;
❱