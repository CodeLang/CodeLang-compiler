class

❪functional❫
❪vector❫
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/user-frontend/command_line_arguments/user_chosen_export_settings"❫
⚯

⚞⚟

//default constructor at file beginning
◀public:▶ ☀◈(std::string const& exporter_name)◖
              :exporter_name(exporter_name)
             ◗❰❱

◀public:▶ void ☀Add(std::string const& exporter
                    ,std::function<void(Structure const&, std::vector<Contributor> const&, User_Chosen_Export_Settings const&)> const& spawn_to
                    ,std::function<std::vector<Contributor>()> const& contribs)❰
    
    auto hi = std::make_tuple(exporter,spawn_to,contribs);
    execute_paths.push_back(hi);
❱


◀public:▶ void ☀Spawn_Exporter(Structure const& structure, User_Chosen_Export_Settings const& settings)❰

  for (auto const& it: execute_paths){
    if (std::get<0>(it) == settings.exporter){
      auto contribs = std::get<2>(it)();
      std::get<1>(it)(structure,contribs,settings);
      return;
    }
  }

  throw "The " + exporter_name + " exporter does not exist.";
❱




◀private:
std::string exporter_name;
std::vector<std::tuple<std::string
  ,std::function<void(Structure const&, std::vector<Contributor> const&, User_Chosen_Export_Settings const&)>
  ,std::function<std::vector<Contributor>()>
  >> execute_paths;

▶
