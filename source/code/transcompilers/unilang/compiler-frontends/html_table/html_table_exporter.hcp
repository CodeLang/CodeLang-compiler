class

❪fstream❫
❪iostream❫
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/structure/inlined_structures"❫
❪"code/transcompilers/unilang/options/language-specific/html_table_options"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/transcompilers/unilang/structure-printer/struct_derivers"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/options/manipulation/case_adjustment_settings"❫
❪"code/transcompilers/unilang/structure-adjuster/casing_adjuster"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/transcompilers/unilang/compiler-frontends/xml/xml_exporter"❫
⚞⚟

◀public: static▶ void ☀Export(Structure structure, std::vector<Contributor> const& contributors, std::string const& style, bool transfer)❰


   Html_Table_Options settings;
   
   
  //create file
  std::string file_name = Current_Path() + "/" + structure.name + "." + settings.file_extension;
  std::ofstream outfile(file_name);
  
  //create header
  outfile << settings.css<< "\n";
  
  //transfer settings over
  Xml_Options xml_settings;
  xml_settings.cell_tag_start = settings.cell_tag_start;
  xml_settings.grid_tag_start = settings.grid_tag_start;
  xml_settings.row_tag_start = settings.row_tag_start;
  xml_settings.cell_tag_end = settings.cell_tag_end;
  xml_settings.grid_tag_end = settings.grid_tag_end;
  xml_settings.row_tag_end = settings.row_tag_end;
  
  outfile << settings.before_table<< "\n";
  outfile << Xml_Exporter::Get(structure,xml_settings);
  outfile << settings.after_table<< "\n";
  outfile.close();
  
  Export_Html_File_As_Image(file_name);
  Trim_Whitespace_From_Image("screenshot.png");
❱

◀private: static▶ void ☀Export_Html_File_As_Image(std::string file_name)❰
  //turn into image
  std::string command = "chromium-browser";
  command += " --headless";
  command += " --hide-scrollbars";
  command += " --disable-gpu";
  command += " --screenshot";
  command += " ";
  command += file_name;
  if (Unsuccessful_Run_Of_Command(command)){
     std::cerr << "Failed to produce image" << std::endl;
  }
❱

◀private: static▶ void ☀Trim_Whitespace_From_Image(std::string file_name)❰
  std::string command = "convert";
  command += " ";
  command += file_name;
  command += " ";
  command += "-trim";
  command += " ";
  command += file_name;
  if (Unsuccessful_Run_Of_Command(command)){
     std::cerr << "Failed to trim image" << std::endl;
  }
❱