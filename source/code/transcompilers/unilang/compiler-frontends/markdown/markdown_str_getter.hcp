class

❪fstream❫
❪iostream❫
❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_header_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_image_getter"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/transcompilers/unilang/structure/print/struct_derivers"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/options/manipulation/case_adjustment_settings"❫
❪"code/transcompilers/unilang/structure/adjust/casing_adjuster"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/transcompilers/unilang/structure/adjust/structure_adjuster"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/transcompilers/unilang/doxygen_block_printer/grammar_adjuster"❫
❪"code/utilities/time/date/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Structure const& structure, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    for (auto const& it: structure.literature.paragraphs){
        Append(text,Get_Possible_Image_Title(it,contributors,settings));
        Append(text,Possibly_Get_Outline(it,contributors,settings));
        
        if (!More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
            Append(text,Possibly_Get_Sentences(it,contributors,settings));
        }
    }
    
    return text;
❱

◀private: static▶ std::string ☀Possibly_Get_Outline(Paragraph const& it, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (settings.outlines.print){
        Append_A_Newline(text);
        for (auto const& it: it.outline_points){
            Append(text,settings.outlines.prefix_marker);
            Append_With_Newline(text,as_string(it.point.value));
        }
    }
    
    return text;
❱

◀private: static▶ std::string ☀Get_Possible_Image_Title(Paragraph const& it, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (More_Of_A_Labeled_Image_Title_Display(it,contributors,settings)){
        
        if (settings.headers.allow_labeled_image_titles){
            Append(text,Labeled_Image_Title_Display(it,contributors,settings));
        }
        else{
            Append(text,Labeled_NonImage_Title_Display(it,contributors,settings));
        }
    }
    else{
        Append(text,Markdown_Header_Getter::Get(it,contributors,settings));
    }
    Append(text,Possibly_Get_Outline(it,contributors,settings));
    return text;
❱


◀private: static▶ bool ☀More_Of_A_Labeled_Image_Title_Display(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    if (!p.title.value.empty()){
        for (auto const& s: p.sentences){
            if (s.text.value.empty()){
                return true;
            }
        }
    }
    return false;
❱

◀private: static▶ std::string ☀Labeled_Image_Title_Display(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    for (auto const& s: p.sentences){
        Append_With_Newline(text,Possibly_Get_Sentence_Suplementary(s,contributors,settings));
        Append(text,"**");
        Append(text,as_string(p.title.value));
        Append_With_Newline(text,"**");
        Append_A_Newline(text);
    }
    return text;
❱
◀private: static▶ std::string ☀Labeled_NonImage_Title_Display(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    for (auto const& s: p.sentences){
        for (auto const& it: s.images){
            Append(text,"% ");
            Append_With_Newline(text,as_string(it.alternative_text.value));
        }
        Append(text,"% ");
        Append_With_Newline(text,as_string(p.title.value));
        Append(text,"% ");
        Append_With_Newline(text,Date_As_Full_Month_Day_Year());
    }
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentences(Paragraph const& p, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (!p.sentences.empty()){
        
        //print each sentence
        for (auto const& it: p.sentences){
            Append(text,Possibly_Get_Sentence(it,contributors,settings));
        }
        
        //add extra line since we printed sentences under the title
        Append_A_Newline(text);
    }
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentence(Sentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    if (!s.text.value.empty()){
        Append(text,Grammar_Adjuster::Get_Adjusted(as_string(s.text.value),settings.grammar));
        Append_N_Spaces(text,2);
    }
    if (!s.images.empty() || !s.tables.empty()){
        Append_A_Newline(text);
        Append(text,Possibly_Get_Sentence_Suplementary(s,contributors,settings));
    }
    return text;
❱
◀private: static▶ std::string ☀Possibly_Get_Sentence_Suplementary(Sentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    Append(text,Markdown_Image_Getter::Get(s,contributors,settings));
    
    //print tables
    for (auto const& it: s.tables){
    }
    return text;
❱