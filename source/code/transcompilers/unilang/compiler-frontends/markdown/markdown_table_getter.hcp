class

❪fstream❫
❪iostream❫
❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/contributor/contributor"❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/options/language-specific/markdown/markdown_settings"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟

◀public: static▶ std::string ☀Get(Sentence const& s, std::vector<Contributor> const& contributors, Markdown_Settings const& settings)❰
    std::string text;
    
    //decide not to do it at all
    if (!settings.tables.print){
        return text;
    }
    if (s.tables.empty()){
        return text;
    }
    
    for (auto const& table: s.tables){
        //print headers
        Append(text, "| ");
        for (auto const& it: table.headers){
            Append(text, as_string(it.name.value));
            Append(text, " | ");
        }
        Append_A_Newline(text);
        
        //append table thing
        Append(text, "| ");
        for (auto const& it: table.headers){
            (void)it;
            Append(text, "...");
            Append(text, " | ");
        }
        Append_A_Newline(text);
        
        //append the rows
        Append(text, "| ");
        for (auto const& it: table.rows){
            Append(text, as_string(it.name.value));
            Append(text, " | ");
        }
        Append_A_Newline(text);
    }
    
    return text;
❱