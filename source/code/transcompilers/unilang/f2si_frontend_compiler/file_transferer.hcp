class

❪iostream❫
❪fstream❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_settings"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transfer_action"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transferer"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/system/lib"❫
⚞⚟

◀public: static▶ void ☀Transfer(Pulse_Settings const& settings, std::vector<std::string> const& file_names)❰
    for (auto const& it: file_names){
        Transfer(settings,it);
    }
❱
◀public: static▶ void ☀Transfer(Pulse_Settings const& settings, std::string const& file_name)❰
    
    //build action settings
    auto action = Get_Pulse_Action(settings,file_name);
    
    //transfer
    Pulse_Transferer::Transfer(settings,action);
❱

◀public: static▶ std::string ☀Get_Remote_Workspace(Pulse_Settings const& settings)❰
    auto parts = Current_Path_In_Parts();
    Remove_First_Element(parts);    
    parts[1] = settings.computer_user;

    std::string dest_path;
    for (auto p: parts){
        dest_path += "/" + p;
    }
    return dest_path;
❱


◀private: static▶ Pulse_Transfer_Action ☀Get_Pulse_Action(Pulse_Settings const& settings, std::string const& file_name)❰

    //create mirrored directory location
    std::string full_path = Full_Path();
    full_path += "/" + file_name;

    //Build pulse transfer action
    Pulse_Transfer_Action action;
    action.password = Get_First_Line_Of_File(settings.lftp_password_location);
    action.from = full_path;
    action.to = Get_Remote_Workspace(settings);
    return action;
❱