class

❪iostream❫
❪fstream❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_settings"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transfer_action"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/pulse/pulse_transferer"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/system/lib"❫
⚞⚟

◀public: static▶ void ☀Transfer(std::vector<std::string> const& file_names)❰
    for (auto const& it: file_names){
        Transfer(it);
    }
❱
◀public: static▶ void ☀Transfer(std::string const& file_name)❰

    //build pulse settings
    auto pulse_settings = Get_Pulse_Settings();
    
    //build action settings
    auto action = Get_Pulse_Action(pulse_settings,file_name);
    
    //transfer
    Pulse_Transferer::Transfer(pulse_settings,action);
❱

◀private: static▶ Pulse_Settings ☀Get_Pulse_Settings()❰

    std::string user = whoami();
    if (user == "flighty"){
        return Get_Pulse_Settings_For_Machine_Off_The_Network();
    }
    
    return Get_Pulse_Settings_For_Machine_On_The_Network();
❱

◀private: static▶ Pulse_Settings ☀Get_Pulse_Settings_For_Machine_Off_The_Network()❰
    Pulse_Settings pulse_settings;
    pulse_settings.computer_user = "thickey";
    pulse_settings.computer_name = "tower";
    pulse_settings.lftp_password_location = "/home/flighty/Desktop/secret/computer_keys/LFTP_PASSWORD";
    pulse_settings.expected_process_name = "pulseUi";
    pulse_settings.lftp_tool_to_use = "lftp";
    pulse_settings.pulse_required = true;
    return pulse_settings;
❱
◀private: static▶ Pulse_Settings ☀Get_Pulse_Settings_For_Machine_On_The_Network()❰
    Pulse_Settings pulse_settings;
    pulse_settings.computer_user = "thickey";
    pulse_settings.computer_name = "192.168.253.1"; //we could derive this on VMs and other machines on the same network
    pulse_settings.lftp_password_location = "/home/flighty/Desktop/secret/computer_keys/LFTP_PASSWORD";
    pulse_settings.expected_process_name = "pulseUi";
    pulse_settings.lftp_tool_to_use = "lftp";
    pulse_settings.pulse_required = false;
    return pulse_settings;
❱

◀private: static▶ Pulse_Transfer_Action ☀Get_Pulse_Action(Pulse_Settings const& settings, std::string const& file_name)❰

    std::string full_path = Full_Path();
    full_path += "/" + file_name;

    std::string password = Get_First_Line_Of_File(settings.lftp_password_location);
    auto parts = Current_Path_In_Parts();
    Remove_First_Element(parts);    
    parts[1] = settings.computer_user;

    std::string dest_path;
    for (auto p: parts){
        dest_path += "/" + p;
    }

    //Build pulse transfer action
    Pulse_Transfer_Action action;
    action.password = password;
    action.from = full_path;
    action.to = dest_path;
    return action;
❱