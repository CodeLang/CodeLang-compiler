class
❪string❫
❪"code/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/languages/source_language"❫
❪"code/transcompilers/unilang/file_extension_getter/lookup_table/file_extension_lookup_table_getter"❫
❪"code/transcompilers/unilang/user-frontend/artifact_actions/artifact_type"❫
❪"code/transcompilers/unilang/user-frontend/artifact_actions/to_source_language"❫
⚯
❪"code/utilities/types/map/lib"❫
⚞⚟



◀public: static▶ std::string ☀Get_For_Interface(Artifact_Type const& artifact)❰

  //attempt to convert
  auto language = To_Source_Language::Convert(artifact);
  if (!language){
    return default_extension_if_unfound();
  }
  return Get_Out_Of_Table(*language,true);
❱


◀public: static▶ std::string ☀Get_For_Implementation(Artifact_Type const& artifact)❰

 //attempt to convert
  auto language = To_Source_Language::Convert(artifact);
  if (!language){
    return default_extension_if_unfound();
  }
  return Get_Out_Of_Table(*language,false);
❱

◀public: static▶ std::string ☀Get_For_Interface(Source_Language const& language)❰
  return Get_Out_Of_Table(language,true);
❱
◀public: static▶ std::string ☀Get_For_Implementation(Source_Language const& language)❰
  return Get_Out_Of_Table(language,false);
❱



◀private: static▶ std::string ☀Get_Out_Of_Table(Source_Language const& language, bool interface)❰
    
    //get table
    auto table = File_Extension_Lookup_Table_Getter::Get_Lookup_Table();
    
    //get the value out of the table if it exists
    if (Exists_In_Unordered_Map(table.values,language)){
        auto value = table.values.at(language);
        
        if (interface){ return value.interface; }
        return value.implementation;
    }
    
    //return something bogus if not found in the table
    return default_extension_if_unfound();
❱


◀private: static▶ std::string ☀default_extension_if_unfound()❰
    return "unknown";
❱