class
❪"code/transcompilers/unilang/file_extension_getter/lookup_table/file_extension_lookup_table"❫
❪"code/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/languages/source_language"❫
❪"code/transcompilers/unilang/file_extension_getter/language_extensions/language_extensions"❫
❪string❫
⚯
❪"code/transcompilers/unilang/file_extension_getter/lookup_table/language_extension_deriver"❫
❪"code/utilities/types/map/lib"❫
⚞⚟



◀public: static▶ File_Extension_Lookup_Table ☀Get_Lookup_Table()❰
    File_Extension_Lookup_Table table;
    
    
    Add_Entry(table,Source_Language::ADA,Language_Extension_Deriver::Ada());
    Add_Entry(table,Source_Language::BRAINFUCK,Language_Extension_Deriver::BrainFuck());
    Add_Entry(table,Source_Language::C,Language_Extension_Deriver::C());
    Add_Entry(table,Source_Language::CPP,Language_Extension_Deriver::Cpp());
    Add_Entry(table,Source_Language::CSHARP,Language_Extension_Deriver::CSharp());
    Add_Entry(table,Source_Language::COBOL,Language_Extension_Deriver::Cobol());
    Add_Entry(table,Source_Language::D,Language_Extension_Deriver::D());
    Add_Entry(table,Source_Language::ELM,Language_Extension_Deriver::Elm());
    Add_Entry(table,Source_Language::FORTRAN,Language_Extension_Deriver::Fortran());
    Add_Entry(table,Source_Language::FSHARP,Language_Extension_Deriver::Fsharp());
    Add_Entry(table,Source_Language::GO,Language_Extension_Deriver::Go());
    Add_Entry(table,Source_Language::HASKELL,Language_Extension_Deriver::Haskell());
    Add_Entry(table,Source_Language::JAVA,Language_Extension_Deriver::Java());
    Add_Entry(table,Source_Language::KOTLIN,Language_Extension_Deriver::Kotlin());
    Add_Entry(table,Source_Language::ML,Language_Extension_Deriver::Ml());
    Add_Entry(table,Source_Language::NIM,Language_Extension_Deriver::Nim());
    Add_Entry(table,Source_Language::PASCAL,Language_Extension_Deriver::Pascal());
    Add_Entry(table,Source_Language::PYTHON,Language_Extension_Deriver::Python());
    Add_Entry(table,Source_Language::RACKET,Language_Extension_Deriver::Racket());
    Add_Entry(table,Source_Language::RUST,Language_Extension_Deriver::Rust());
    Add_Entry(table,Source_Language::SCALA,Language_Extension_Deriver::Scala());
    Add_Entry(table,Source_Language::SCHEME,Language_Extension_Deriver::Scheme());
    Add_Entry(table,Source_Language::SWIFT,Language_Extension_Deriver::Swift());
    Add_Entry(table,Source_Language::HOLYC,Language_Extension_Deriver::HolyC());
    Add_Entry(table,Source_Language::HIDL,Language_Extension_Deriver::HIDL());
    Add_Entry(table,Source_Language::PROCESSING,Language_Extension_Deriver::Processing());
    Add_Entry(table,Source_Language::MARKDOWN,Language_Extension_Deriver::Markdown());
    
    return table;
❱

◀private: static▶ void ☀Add_Entry(File_Extension_Lookup_Table & table, Source_Language const& language, Language_Extensions const& extensions)❰
    //const std::string exception{"unilang type \"" + std::to_string(language) + "\" is already in the file extension lookup table!"}; //<- TODO: need to automate to_string for enums
    std::string exception{"source language already in file extension table"};
    Throw_On_Failure_To_Insert_Item(table.values,language,extensions,exception);
❱




