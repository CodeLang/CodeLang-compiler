class
❪"code/transcompilers/unilang/file_extension_getter/language_extensions/language_extensions"❫
⚯

⚞⚟

//nothing
◀public: static▶ Language_Extensions ☀Ada()❰
    Language_Extensions extensions;
    
    extensions.interface = "adb";
    extensions.implementation = "adb";
    
    return extensions;
❱

◀public: static▶ Language_Extensions ☀BrainFuck()❰
    Language_Extensions extensions;
    
    extensions.interface = "bf";
    extensions.implementation = "bf";
    
    return extensions;
❱

◀public: static▶ Language_Extensions ☀C()❰
    Language_Extensions extensions;
    
    extensions.interface = "h";
    extensions.implementation = "c";
    
    return extensions;
❱

◀public: static▶ Language_Extensions ☀Cpp()❰
    Language_Extensions extensions;
    
    //extensions.interface = "hpp";
    //extensions.implementation = "cpp";
    extensions.interface = "hh";
    extensions.implementation = "cc";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀CSharp()❰
    Language_Extensions extensions;
    
    extensions.interface = "cs";
    extensions.implementation = "cs";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Cobol()❰
    Language_Extensions extensions;
    
    extensions.interface = "cbl";
    extensions.implementation = "cbl";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀D()❰
    Language_Extensions extensions;
    
    extensions.interface = "d";
    extensions.implementation = "d";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Elm()❰
    Language_Extensions extensions;
    
    extensions.interface = "elm";
    extensions.implementation = "elm";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Fortran()❰
    Language_Extensions extensions;
    
    extensions.interface = "f";
    extensions.implementation = "f";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Fsharp()❰
    Language_Extensions extensions;
    
    extensions.interface = "fs";
    extensions.implementation = "fs";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Go()❰
    Language_Extensions extensions;
    
    extensions.interface = "go";
    extensions.implementation = "go";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Haskell()❰
    Language_Extensions extensions;
    
    extensions.interface = "hs";
    extensions.implementation = "hs";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Java()❰
    Language_Extensions extensions;
    
    extensions.interface = "java";
    extensions.implementation = "java";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Kotlin()❰
    Language_Extensions extensions;
    
    extensions.interface = "kt";
    extensions.implementation = "kt";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Ml()❰
    Language_Extensions extensions;
    
    extensions.interface = "sml";
    extensions.implementation = "sml";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Nim()❰
    Language_Extensions extensions;
    
    extensions.interface = "nim";
    extensions.implementation = "nim";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Pascal()❰
    Language_Extensions extensions;
    
    extensions.interface = "pp";
    extensions.implementation = "pp";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Python()❰
    Language_Extensions extensions;
    
    extensions.interface = "py";
    extensions.implementation = "py";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Racket()❰
    Language_Extensions extensions;
    
    extensions.interface = "rkt";
    extensions.implementation = "rkt";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Rust()❰
    Language_Extensions extensions;
    
    extensions.interface = "rs";
    extensions.implementation = "rs";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Scala()❰
    Language_Extensions extensions;
    
    extensions.interface = "scala";
    extensions.implementation = "scala";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Scheme()❰
    Language_Extensions extensions;
    
    extensions.interface = "scm";
    extensions.implementation = "scm";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀Swift()❰
    Language_Extensions extensions;
    
    extensions.interface = "swift";
    extensions.implementation = "swift";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀HolyC()❰
    Language_Extensions extensions;
    
    extensions.interface = "C";
    extensions.implementation = "C";
    
    return extensions;
❱
◀public: static▶ Language_Extensions ☀HIDL()❰
    Language_Extensions extensions;
    
    extensions.interface = "hidl";
    extensions.implementation = "hidl";
    
    return extensions;
❱


