class
❪fstream❫
❪string❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/bdf/settings/bdf_settings"❫
❪"code/utilities/bdf/glyph/glyphs"❫
⚯
❪"code/transcompilers/unilang/language-and-theme-creator/sublime/global"❫
❪"code/transcompilers/unilang/language-and-theme-creator/sublime/unilang_file_creator"❫
❪"code/transcompilers/unilang/language-and-theme-creator/font/unilang_font"❫
❪"code/transcompilers/unilang/tokens/uniqueness/unique_tokens_checker"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/bdf/exporter/bdf_settings_to_format"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
⚞⚟

◀public: static▶ void ☀Create_Fonts()❰

    std::string font_name = "Unilang";
    std::string font_format = "bdf";
    std::string font_str = Font_As_String();
    
    
    //TODO: prob rename to Unilang
    Create_Path_If_It_Doesnt_Already_Exist(Fonts_Path_1());
    std::ofstream outfile(Fonts_Path_1() + font_name + "." + font_format);
    outfile << font_str;
    outfile.close();

    //some other things that MIGHT need to be done
    //sudo rm /etc/fonts/conf.avail/70-no-bitmaps.conf
    //sudo fc-cache -f -v
❱

◀private: static▶ std::string ☀Font_As_String()❰
    std::string str;
    
    Bdf_Settings bdf_settings;
    bdf_settings.segments = Unilang_Font::Get();
    str += Bdf_Settings_To_Format::Convert(bdf_settings);
    
    return str;
❱

◀private: static▶ std::string ☀Fonts_Path_1()❰
    return Full_Path_To_Home() + "/.fonts/";
❱
◀private: static▶ std::string ☀Fonts_Path_2()❰
    return Full_Path_To_Home() + "/.local/share/fonts/";
❱