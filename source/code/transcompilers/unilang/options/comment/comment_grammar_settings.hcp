class
❪vector❫
❪string❫
❪unordered_map❫
❪"code/transcompilers/unilang/options/comment/doxygen/doxygen_block_options"❫
⚯

⚞⚟

◀
public:
     
   //grammar settings on exported comment
   
   //whether or not to take certain actions
   bool auto_capitalize_comments = true;
   bool auto_puncuate_comments = true;
   
   //the default puncution we will apply when the comment is missing puncuation
   std::string default_puncuation = ".";
   
   //a list of puncuations that we will look at to decide if the comment is missing puncuation
   //TODO: change to "terminal puncuation"
   std::vector<std::string> puncuations{
   ".",
   "!",
   "?",
   ":"
   };

   std::vector<std::string> non_word_puncuations{
   ".",
   "!",
   "?",
   ":",
   ",",
   "-",
   "*",
   "'",
   "\""
   };
   
   //options for sensoring bad words
   bool auto_sensor_bad_words = true;
   std::vector<std::string> bad_words{
   "fuck",
   "shit",
   "bitch",
   "damn",
   "ass",
   "gay",
   "dumb",
   "stupid",
   "crap",
   "cunt",
   "dick"
   }; //etc
   
   //use sensor alternative
   //instead of just sensoring the bad words with stars,
   //we may have alternative words/phrases to replace them with.
   bool use_sensor_alternative=true;
   std::unordered_map<std::string, std::string> bad_word_alternatives{
	{"damn","darn"},
	{"crap","bad"}
   };
	
   bool use_auto_corrects=true;
   std::unordered_map<std::string, std::string> auto_corrects{
	{"teh","the"},
	{"wensday","wednesday"}
   };

   bool auto_capitalize_certain_words = true;
   std::vector<std::string> capitalize_words{
   "pennsylvania"
   };

   bool auto_full_caps_certain_words = true;
   std::vector<std::string> full_caps_words{
   "hidl"
   };
   
    
▶
