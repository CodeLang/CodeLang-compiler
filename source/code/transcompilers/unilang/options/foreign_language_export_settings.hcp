class
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/cpp_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/d_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/rust_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/csharp_export_settings"❫
❪"code/transcompilers/unilang/options/language-agnostic/language_agnostic_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/hidl_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/plant_uml_settings/plant_uml_settings"❫
❪"code/transcompilers/unilang/options/language-specific/protocol_buffer_settings/protocol_buffer_settings"❫
⚯

⚞⚟


◀
public:
  C_Export_Settings c;
  Cpp_Export_Settings cpp;
  Csharp_Export_Settings csharp;
  D_Export_Settings d;
  Hidl_Export_Settings hidl;
  Plant_Uml_Settings plant_uml;
  Rust_Export_Settings rust;
  Protocol_Buffer_Settings proto_buff;
  
  //terminology and such usually based on the foundations of math, language theory, type theory, etc.
  Language_Agnostic_Export_Settings agnostic;
▶
