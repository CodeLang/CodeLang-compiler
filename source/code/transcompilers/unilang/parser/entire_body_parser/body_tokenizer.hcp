class
❪iostream❫
❪"code/transcompilers/unilang/structure/model/sections/method/body/function_body"❫
❪"code/transcompilers/unilang/parser/entire_body_parser/nested_body_tokens"❫
❪"code/transcompilers/unilang/options/parser/parser_settings"❫
⚯
❪"code/transcompilers/unilang/parser/global_tokens_table_utilities"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/converters/lib"❫
⚞⚟

◀public: static▶ Nested_Body_Tokens ☀Turn_Body_Into_Nested_Tokens(std::wstring const& body, Parser_Settings const& settings)❰
    Nested_Body_Tokens all;
    int depth = 0;
    std::wstring buffer;
    bool in_token = false;
    Body_Token_Name currently_in = Body_Token_Name::UNCAUGHT_STATEMENT;
    for (auto const& c: body){
        Handle_Char(all,buffer,in_token,depth,currently_in,c,settings);
    }
    
    if (in_token){
        std::cerr << "you ended a body while still inside a token" << std::endl;
    }
    Add_To_Token_Set_No_Recursion(all,buffer,Body_Token_Name::UNCAUGHT_STATEMENT);
    
    return all;
❱

◀private: static▶ void ☀Handle_Char(Nested_Body_Tokens & all, std::wstring & buffer, bool & in_token, int & depth, Body_Token_Name & currently_in, wchar_t const& c, Parser_Settings const& settings)❰
    
    //when not in a token
    if (!in_token){
        Handle_Char_When_Out_Of_Token(all,buffer,in_token,depth,currently_in,c,settings);
    }
    else{
        Handle_Char_When_In_Token(all,buffer,in_token,depth,currently_in,c,settings);
    }
❱

◀private: static▶ void ☀Handle_Char_When_Out_Of_Token(Nested_Body_Tokens & all, std::wstring & buffer, bool & in_token, int & depth, Body_Token_Name & currently_in, wchar_t const& c, Parser_Settings const& settings)❰

    if (Global_Tokens_Table_Utilities::Char_Is_A_Unilang_Unicode_Body_Starter_Char(c)){
        
        //store the left over stuff when we were outside other tokens
        Add_To_Token_Set(all,buffer,Body_Token_Name::UNCAUGHT_STATEMENT,settings);
        
        //update state and clear buffer for analysis inside the token
        in_token = true;
        buffer.clear();
        currently_in = Global_Tokens_Table_Utilities::Get_Body_Token_Through_Character_LookUp(settings.all_language_tokens,c).name;
        ++depth;
        
        
    }else{
        buffer += c;
    }
❱
◀private: static▶ void ☀Handle_Char_When_In_Token(Nested_Body_Tokens & all, std::wstring & buffer, bool & in_token, int & depth, Body_Token_Name & currently_in, wchar_t const& c, Parser_Settings const& settings)❰
    
    
    Attempt_To_Adjust_Our_Depth(currently_in,c,depth,settings);
    
    
    if (Global_Tokens_Table_Utilities::Char_Is_A_Unilang_Unicode_Body_Ender_Char(c) && depth == 0){
        
        //store the stuff we found inside the tokens
        Add_To_Token_Set(all,buffer,currently_in,settings);
        
        //update the state now that we are outside the found token
        in_token = false;
        buffer.clear();
        currently_in = Body_Token_Name::UNCAUGHT_STATEMENT;
    }else{
        buffer += c;
    }
        

❱

◀private: static▶ void ☀Attempt_To_Adjust_Our_Depth(Body_Token_Name const& currently_in, wchar_t const& c, int & depth, Parser_Settings const& settings)❰

    //if we found a duplicate starter tag, increment the depth
    if (Global_Tokens_Table_Utilities::Char_Is_A_Unilang_Unicode_Body_Starter_Char(c)){
        if (Global_Tokens_Table_Utilities::Get_Body_Char_Start_Representation(settings.all_language_tokens,currently_in) == c){
            ++depth;
            //std::cout << " up=" << depth;
        }
    }
    
    //if we the ending tag decrement the depth
    if (Global_Tokens_Table_Utilities::Char_Is_A_Unilang_Unicode_Body_Ender_Char(c)){
        if (Global_Tokens_Table_Utilities::Get_Body_Char_End_Representation(settings.all_language_tokens,currently_in) == c){
            --depth;
            //std::cout << " dn=" << depth;
        }
    }
❱

◀private: static▶ void ☀Add_To_Token_Set(Nested_Body_Tokens & all, std::wstring const& buffer, Body_Token_Name const& name, Parser_Settings const& settings)❰
    
        Body_Token_Value t;
        t.value = buffer;
        t.name = name;
        
        Nested_Body_Tokens wrapped;
        wrapped.single = t;
        
        //RECURSION
        auto sub = Turn_Body_Into_Nested_Tokens(buffer,settings);
        wrapped.tokens.get().emplace_back(sub);
        all.tokens.get().emplace_back(wrapped);
❱
◀private: static▶ void ☀Add_To_Token_Set_No_Recursion(Nested_Body_Tokens & all, std::wstring const& buffer, Body_Token_Name const& name)❰
    
        Body_Token_Value t;
        t.value = buffer;
        t.name = name;
        
        Nested_Body_Tokens wrapped;
        wrapped.single = t;
        
        all.tokens.get().emplace_back(wrapped);
❱

◀private: static▶ bool ☀any_char_contains_token_start(std::wstring const& buffer)❰
    for (auto const& c: buffer){
        if (Global_Tokens_Table_Utilities::Char_Is_A_Unilang_Unicode_Body_Starter_Char(c)){
            return true;
        }
    }
    return false;
❱