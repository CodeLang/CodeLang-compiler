class
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
❪"code/transcompilers/unilang/tokens/all_language_tokens"❫
⚯

⚞⚟

//analyzing parts from the global TOKENS table via character
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Char(wchar_t const& c)❰
    return In_Vector(All_Unicode_Chars_Used(),c);
❱
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Starter_Char(wchar_t const& c)❰
    return In_Vector(All_Unilang_Start_Markers(),c);
❱
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Ender_Char(wchar_t const& c)❰
    return In_Vector(All_Unilang_End_Markers(),c);
❱

//analyzing parts from the global BODY TOKENS table via character
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Body_Char(wchar_t const& c)❰
    auto all_tokens = Get_Tokens::Get();
    return In_Vector(All_Unicode_Body_Chars_Used(all_tokens),c);
❱
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Body_Starter_Char(wchar_t const& c)❰
    auto all_tokens = Get_Tokens::Get();
    return In_Vector(All_Unilang_Body_Start_Markers(all_tokens),c);
❱
◀public: static▶ bool ☀Char_Is_A_Unilang_Unicode_Body_Ender_Char(wchar_t const& c)❰
    auto all_tokens = Get_Tokens::Get();
    return In_Vector(All_Unilang_Body_End_Markers(all_tokens),c);
❱

◀public: static▶ wchar_t ☀Get_Body_Char_Start_Representation(All_Language_Tokens const& all_tokens, Body_Token_Name const& name)❰

    for (auto it: all_tokens.body_tokens){
        if (it.name == name){
            return it.start;
        }
    }
    return L'x';
❱
◀public: static▶ wchar_t ☀Get_Body_Char_End_Representation(All_Language_Tokens const& all_tokens, Body_Token_Name const& name)❰
    
    for (auto it: all_tokens.body_tokens){
        if (it.name == name){
            return it.end;
        }
    }
    return L'x';
❱





◀public: static▶ bool ☀Chars_Make_Valid_Unilang_Enclosure_Block(wchar_t const& start, wchar_t const& end)❰
    if (Char_Is_A_Unilang_Unicode_Starter_Char(start) && Char_Is_A_Unilang_Unicode_Ender_Char(end)){
        auto starts = All_Unilang_Start_Markers();
        auto ends = All_Unilang_End_Markers();
        auto index = Get_Index_Of_Element(starts,start);
        if (end == ends[index]){
            return true;
        }
    }
    return false;
❱





◀public: static▶ Token ☀Get_Token_Through_Character_LookUp(All_Language_Tokens const& all_tokens, wchar_t const& c)❰

    for (auto it: all_tokens.tokens){
        if (it.start == c || it.end == c){
            return it;
        }
    }
    throw std::invalid_argument("token character does not exist");
❱
◀public: static▶ Body_Token ☀Get_Body_Token_Through_Character_LookUp(All_Language_Tokens const& all_tokens, wchar_t const& c)❰

    for (auto it: all_tokens.body_tokens){
        if (it.start == c || it.end == c){
            return it;
        }
    }
    throw std::invalid_argument("token character does not exist");
❱



//stripping out columns of global TOKENS table
◀private: static▶ std::vector<wchar_t> ☀All_Unicode_Chars_Used()❰
    return All_Unilang_Start_Markers() + All_Unilang_End_Markers();
❱
◀private: static▶ std::vector<wchar_t> ☀All_Unilang_Start_Markers()❰
    auto all_tokens = Get_Tokens::Get();
    return Destructure_Out_Vec_Of_Data_Member(all_tokens.tokens.begin(),all_tokens.tokens.end(),&decltype(all_tokens.tokens)::value_type::start);
❱
◀private: static▶ std::vector<wchar_t> ☀All_Unilang_End_Markers()❰
    auto all_tokens = Get_Tokens::Get();
    return Destructure_Out_Vec_Of_Data_Member(all_tokens.tokens.begin(),all_tokens.tokens.end(),&decltype(all_tokens.tokens)::value_type::end);
❱


//stripping out columns of global BODY_TOKENS table
◀private: static▶ std::vector<wchar_t> ☀All_Unicode_Body_Chars_Used(All_Language_Tokens const& all_tokens)❰
    return All_Unilang_Body_Start_Markers(all_tokens) + All_Unilang_Body_End_Markers(all_tokens);
❱
◀private: static▶ std::vector<wchar_t> ☀All_Unilang_Body_Start_Markers(All_Language_Tokens const& all_tokens)❰
    return Destructure_Out_Vec_Of_Data_Member(all_tokens.body_tokens.begin(),all_tokens.body_tokens.end(),&decltype(all_tokens.body_tokens)::value_type::start);
❱
◀private: static▶ std::vector<wchar_t> ☀All_Unilang_Body_End_Markers(All_Language_Tokens const& all_tokens)❰
    return Destructure_Out_Vec_Of_Data_Member(all_tokens.body_tokens.begin(),all_tokens.body_tokens.end(),&decltype(all_tokens.body_tokens)::value_type::end);
❱
