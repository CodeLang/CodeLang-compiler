class


❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/parser/parser_token"❫
❪"code/transcompilers/unilang/parser/token_value"❫
❪"code/transcompilers/unilang/parser/structure_mapper/important/sub_structure_builder"❫
❪"code/transcompilers/unilang/options/parser/symbols/token_attribute_settings"❫
❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/options/parser/parser_settings"❫
⚯
❪"code/transcompilers/unilang/parser/structure_mapper/util/parser_token_stripper"❫
❪"code/transcompilers/unilang/parser/structure_mapper/util/parser_utilities"❫
❪"code/transcompilers/unilang/parser/structure_mapper/util/special_parser_filters"❫
❪"code/transcompilers/unilang/parser/structure_mapper/stamp_expander"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/stripping/lib"❫
⚞⚟

//WHAT THIS DOES:  turns the entire stream of tokens into a UniLang's conceptual data structure.
//the mapping of tokens to composed types is relatively 1-1.

//TODO(thickey):
//THOUGHTS:
//I'm not happy at all how this conversion works.  
//It's very hacky, and very inefficient.  
//I wanted to keep the placement and absence of tokens flexible, but I don't like
//the amount of repetitive filtering I did to achieve this.
//One day, this should be reworked to do a single sweep.
//We should process the entire set of tokens, filtering out the important chunks-- not recursively filtering smaller and smaller batches of tokens.
//The specifier/qualifier parsing has a similar problem.  We can probably break out early, but don't.

//FOR NOW:  
//I realize this is inefficient, but I'm not going to worry too much about it right now.  
//Because the transcompiliation process is still so fast that it doesn't affect my workflow.
//Once we separate out our data from our algorithm, we can optimize the algorithm to be more efficient.  
//Plus, it's working just fine.  Once we have a significant amount of export code relying on this, we can make changes and ensure that we don't break anything.

//random thought:
//maybe I should turn this into a tree of tokens first.... where each leaf is a token name, and each non-leaf is a token_group

//again, this conversion process, while inefficient, is not slow enough for me to consider it a priority task to fix.  
//I'm basically trying to express a variant tree in flat manner, and its messy.  Maybe once this gets tried and tested, and we have unit tests,
//we can consider rewriting this conversion process
//more of an issue these days because I want to run unilang inside the build also.  We'll find out what parts of the compiler take long, and optimize them later

//Also keep in mind, this will one day be raw serialized, and only edited through a projectional editor.  
//So most of the compiler frontend will be regular IDL de-serialization.
◀public: static▶ Structure ☀Create_Code_Object_From_Token_Stream(std::vector<Parser_Token> tokens, std::string const& path_to_file, Parser_Settings const& settings)❰
    Structure code;

    //a poor-mans mustache templating resolver (an alternative to languge specific templates/template constraints and/or macros)
    //works at the UniLang level.  allows function generation into main Structure
	Stamp_Expander::Perform_Expansion(tokens,settings);
    
    //set the file name that the code structure was derived from
    // "path/to/file/thing.Unilang" becomes "thing"
    code.name = As_Removed_Suffix(Get_File_Name_From_File_Path(path_to_file));
    
    //store the full path of the file.  
    //this gives the structure a unique identifier when compared to other files
    code.full_file_path = path_to_file;
    
    //the overall structure of any UniLang file
    
    //single section:
    code.meta = Sub_Structure_Builder::Build_Meta_Section(tokens,settings);

    //multi-sections
    code.literature.paragraphs               = Parser_Token_Stripper::Strip_Out_Type_V2<Paragraph>             (settings,tokens,Token_Group::LITERATURE                ,Sub_Structure_Builder::Build_Literature_Paragraph);
    code.imports.interface_dependencies      = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Item>           (settings,tokens,Token_Group::IMPORT_INTERFACE          ,Sub_Structure_Builder::Build_Import_Interface_Item);
    code.imports.implementation_dependencies = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Item>           (settings,tokens,Token_Group::IMPORT_IMPLEMENTATION     ,Sub_Structure_Builder::Build_Import_Implementation_Item);
    code.imports.test_dependencies           = Parser_Token_Stripper::Strip_Out_Type_V2<Import_Item>           (settings,tokens,Token_Group::IMPORT_TEST               ,Sub_Structure_Builder::Build_Import_Test_Item);
    code.libraries.libraries                 = Parser_Token_Stripper::Strip_Out_Type_V2<Library_Dependency>    (settings,tokens,Token_Group::LIBRARY                   ,Sub_Structure_Builder::Build_Library_Item);
    code.compile_options.flags               = Parser_Token_Stripper::Strip_Out_Type_V2<Compile_Option>        (settings,tokens,Token_Group::COPTS                     ,Sub_Structure_Builder::Build_Compile_Option);
    code.link_options.flags                  = Parser_Token_Stripper::Strip_Out_Type_V2<Link_Option>           (settings,tokens,Token_Group::LINKOPTS                  ,Sub_Structure_Builder::Build_Link_Option);
    code.namespaces.namespaces               = Parser_Token_Stripper::Strip_Out_Type_V2<Namespace_Item>        (settings,tokens,Token_Group::NAMESPACE                 ,Sub_Structure_Builder::Build_Namespace_Item);
    code.types.types                         = Parser_Token_Stripper::Strip_Out_Type_V2<Type_Item>             (settings,tokens,Token_Group::TYPES                     ,Sub_Structure_Builder::Build_Type_Item);
    code.macros.macros                       = Parser_Token_Stripper::Strip_Out_Type_V2<Macro_Item>            (settings,tokens,Token_Group::MACRO                     ,Sub_Structure_Builder::Build_Macro_Item);
    code.forwards.forwards                   = Parser_Token_Stripper::Strip_Out_Type_V2<Forward_Declare_Item>  (settings,tokens,Token_Group::FORWARD_DECLARE           ,Sub_Structure_Builder::Build_Forward_Declare_Item);
    code.enums.enumerated_types              = Parser_Token_Stripper::Strip_Out_Type_V2<Enum_Item>             (settings,tokens,Token_Group::ENUM                      ,Sub_Structure_Builder::Build_Enum_Item);
    code.inheritance.inherited_objects       = Parser_Token_Stripper::Strip_Out_Type_V2<Inheritance_Item>      (settings,tokens,Token_Group::INHERITANCE               ,Sub_Structure_Builder::Build_Inheritance_Item);
    code.templates.arguments                 = Parser_Token_Stripper::Strip_Out_Type_V2<Template_Argument>     (settings,tokens,Token_Group::OBJECT_TEMPLATE_ARGUMENT  ,Sub_Structure_Builder::Build_Object_Template_Argument);
    code.methods.methods                     = Parser_Token_Stripper::Strip_Out_Type_V2<Method_Item>           (settings,tokens,Token_Group::FUNCTION                  ,Sub_Structure_Builder::Build_Method_Item);
    code.typedefs.typedefs                   = Parser_Token_Stripper::Strip_Out_Type_V2<Typedef_Item>          (settings,tokens,Token_Group::TYPEDEF                   ,Sub_Structure_Builder::Build_Typedef_Item);
    code.data_members.data_members           = Parser_Token_Stripper::Strip_Out_Type_V2<Data_Member_Item>      (settings,tokens,Token_Group::DATA_MEMBER               ,Sub_Structure_Builder::Build_Data_Member_Item);
    
    return code;
❱