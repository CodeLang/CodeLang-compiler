class


❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/parser/parser_token"❫
❪"code/transcompilers/unilang/parser/structure_mapper/util/parser_aliases"❫
❪"code/transcompilers/unilang/options/parser/symbols/token_attribute_settings"❫
❪"code/transcompilers/unilang/options/parser/parser_settings"❫
⚯
❪"code/transcompilers/unilang/parser/structure_mapper/util/parser_utilities"❫
❪"code/transcompilers/unilang/parser/body_parser/body_token_parser"❫
⚞⚟


//can probably be made into a tree somehow
//this is basically type conversion glue.  
//Take a token under an inferred context and parse it into our more descriptive structure portion



//META RELATED (DONE):
◀public: template <typename T>
static auto Bind_Meta_Code_Type(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Code_Type> {
    
    return {t.code_type, Token_Name::META_DATA_CODE_TYPE,
                            {{settings.tokens.symbols.meta.global,Code_Type::GLOBAL}
                            ,{settings.tokens.symbols.meta.sum_type,Code_Type::SUM_TYPE}
                            ,{settings.tokens.symbols.meta.product_type,Code_Type::PRODUCT_TYPE}}
                            ,Code_Type::GLOBAL};
}▶
◀public: template <typename T>
static auto Bind_Meta_Pack_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::META_DATA_CODE_TYPE,{{settings.tokens.symbols.meta.packed,t.packed}}}
    };
}▶

◀public: template <typename T>
static auto Bind_Meta_Description(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::META_DATA_BRIEF_DESCRIPTION,    t.brief_description}
       ,{Token_Name::META_DATA_DETAILED_DESCRIPTION, t.detailed_description}
    };
}▶


◀public: template <typename T>
static auto Bind_Meta_Subgroups(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::META_SUBGROUP_NAME,               t.name}
       ,{Token_Name::META_SUBGROUP_DESCRIPTION,   t.description}
    };
}▶
◀public: template <typename T>
static auto Bind_Meta_Specification_File(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::META_SPECIFICATION_FILE_PATH,          t.path_to_file}
       ,{Token_Name::META_SPECIFICATION_FILE_DESCRIPTION,   t.description}
    };
}▶
◀public: template <typename T>
static auto Bind_Meta_Foreseeable_Change(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::META_FORSEEABLE_CHANGE,              t.possible_change}
       ,{Token_Name::META_FORSEEABLE_CHANGE_REASON,       t.reason_for_change}
       ,{Token_Name::META_FORSEEABLE_REASON_PERCENTAGE,   t.percent_likelyhood}
    };
}▶
//--------------------------------------
◀public: template <typename T>
static auto Function_Test_Main(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::FUNCTION_TEST_CASE_NAME,              t.name}
       ,{Token_Name::FUNCTION_TEST_CASE_TAG,       t.tag}
       ,{Token_Name::FUNCTION_TEST_CASE_REASON_FOR_TESTING,   t.reason_for_testing}
       ,{Token_Name::FUNCTION_TEST_CASE_BODY,   t.body}
    };
}▶
◀public: template <typename T>
static auto Function_Test_Failure_Reason(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::FUNCTION_TEST_CASE_REASON_FOR_FAILING,              t.reason}
    };
}▶

//--------------------------------------
◀public: template <typename T>
static auto Benchmark_Main(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::FUNCTION_BENCHMARK_CASE_NAME,              t.name}
       ,{Token_Name::FUNCTION_BENCHMARK_CASE_TAG,       t.tag}
       ,{Token_Name::FUNCTION_BENCHMARK_CASE_SETUP,   t.setup.body}
       ,{Token_Name::FUNCTION_BENCHMARK_CASE_ACTION,   t.action.body}
    };
}▶

◀public: template <typename T>
static auto Benchmark_Arg(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::FUNCTION_BENCHMARK_ARGUMENT_NAME,              t.name}
       ,{Token_Name::FUNCTION_BENCHMARK_ARGUMENT_LOW,       t.range_low}
       ,{Token_Name::FUNCTION_BENCHMARK_ARGUMENT_HIGH,   t.range_high}
       ,{Token_Name::FUNCTION_BENCHMARK_ARGUMENT_MULTIPLIER,   t.multiplier}
    };
}▶

//typedefs
◀public: template <typename T>
static auto Bind_Typedef_Specifiers_Class(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.access, Token_Name::TYPEDEF_SPECIFIERS,
                            {{settings.tokens.symbols._typedef.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols._typedef.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols._typedef.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶

◀public: template <typename T>
static auto Bind_Typedef_Root_Items(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::TYPEDEF_NAME,t.name}
       ,{Token_Name::TYPEDEF_BRIEF_DESCRIPTION,t.brief_description}
       ,{Token_Name::TYPEDEF_DETAILED_DESCRIPTION,t.detailed_description}
    };
}▶

◀public: template <typename T>
static auto Bind_Type_Section_Root_Items(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::TYPE_NAME,t.name}
       ,{Token_Name::TYPE_BRIEF_DESCRIPTION,t.brief}
       ,{Token_Name::TYPE_DETAILED_DESCRIPTION,t.detail}
    };
}▶

◀public: template <typename T>
static auto Bind_Typedef_Argument(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::TYPEDEF_ARGUMENT,t.name}
       ,{Token_Name::TYPEDEF_ARGUMENT_COMMENT,t.comment}
    };
}▶

◀public: template <typename T>
static auto Bind_Typedef_Result(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::TYPEDEF_RETURN,t.name}
       ,{Token_Name::TYPEDEF_RETURN_COMMENT,t.comment}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Paragraph_Properties(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_DEPTH,t.depth}
       ,{Token_Name::LITERARY_TITLE,t.title}
    };
}▶

◀public: template <typename T>
static auto Build_Paragraph_Outline_Point(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_OUTLINE_POINT,t.point}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Paragraph_Properties2(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::LITERARY_SENTENCE_PROPERTIES,{
          {settings.tokens.symbols.literature.numbered,t.is_numbered}
        }}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Sentence_Properties(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_SENTENCE_NAME,t.name}
       ,{Token_Name::LITERARY_SENTENCE,t.text}
       ,{Token_Name::LITERARY_SENTENCE_AUTHOR_NOTE,t.author_note}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Sentence_Tags(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_SENTENCE_TAG,t.name}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Sentence_Images(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_IMAGE_PATH,t.image_path}
       ,{Token_Name::LITERARY_IMAGE_ALTERNATIVE_TEXT,t.alternative_text}
       ,{Token_Name::LITERARY_IMAGE_HOVER_TEXT,t.hover_text}
       ,{Token_Name::LITERARY_IMAGE_HEIGHT,t.size.height}
       ,{Token_Name::LITERARY_IMAGE_WIDTH,t.size.width}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Table_Properties(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_SENTENCE_TABLE_TITLE,t.title}
    };
}▶

◀public: template <typename T>
static auto Build_Literature_Table_Header(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_SENTENCE_TABLE_HEADER,t.name}
    };
}▶
◀public: template <typename T>
static auto Build_Literature_Table_Row(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    return {
        {Token_Name::LITERARY_SENTENCE_TABLE_ROW,t.name}
    };
}▶

//IMPORT RELATED (DONE):
◀public: template <typename T>
static auto Build_Interface_Import_Names(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::IMPORT_INTERFACE_NAME,t.name}
       ,{Token_Name::IMPORT_INTERFACE_COMMENT,t.comment}
    };
}▶

◀public: template <typename T>
static auto Build_Implementation_Import_Names(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::IMPORT_IMPLEMENTATION_NAME,t.name}
       ,{Token_Name::IMPORT_IMPLEMENTATION_COMMENT,t.comment}
    };
}▶

◀public: template <typename T>
static auto Build_Test_Import_Names(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::IMPORT_TEST_NAME,t.name}
       ,{Token_Name::IMPORT_TEST_COMMENT,t.comment}
    };
}▶

◀public: template <typename T>
static auto Build_Import_Interface_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_INTERFACE_SPECIFIERS ,{{settings.tokens.symbols.import._inline,t.inlined}}}
    };
}▶

◀public: template <typename T>
static auto Build_Import_Interface_Specifiers2(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Import_Type> {
    
    return {t.type, Token_Name::IMPORT_INTERFACE_SPECIFIERS,
                            {{settings.tokens.symbols.import.system,Import_Type::SYSTEM}}
                            ,Import_Type::LOCAL};
}▶

◀public: template <typename T>
static auto Build_Import_Implementation_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_IMPLEMENTATION_SPECIFIERS ,{{settings.tokens.symbols.import._inline,t.inlined}}}
    };
}▶

◀public: template <typename T>
static auto Build_Import_Implementation_Specifiers2(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Import_Type> {
    
    return {t.type, Token_Name::IMPORT_IMPLEMENTATION_SPECIFIERS,
                            {{settings.tokens.symbols.import.system,Import_Type::SYSTEM}}
                            ,Import_Type::LOCAL};
}▶
◀public: template <typename T>
static auto Build_Import_Test_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_TEST_SPECIFIERS ,{{settings.tokens.symbols.import._inline,t.inlined}}}
    };
}▶

◀public: template <typename T>
static auto Build_Import_Test_Specifiers2(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Import_Type> {
    
    return {t.type, Token_Name::IMPORT_TEST_SPECIFIERS,
                            {{settings.tokens.symbols.import.system,Import_Type::SYSTEM}}
                            ,Import_Type::LOCAL};
}▶





◀public: template <typename T>
static auto Build_Interface_Import_Relationships(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_INTERFACE_RELATIONSHIP,{
          {settings.tokens.symbols.import.type_relation.association,t.relationships.association}
          ,{settings.tokens.symbols.import.type_relation.aggregation,t.relationships.aggregation}
          ,{settings.tokens.symbols.import.type_relation.composition,t.relationships.composition}
          ,{settings.tokens.symbols.import.type_relation.inheritence,t.relationships.inheritence}
          ,{settings.tokens.symbols.import.type_relation.generaliation,t.relationships.generalization}
          ,{settings.tokens.symbols.import.type_relation.realization,t.relationships.realization}
          ,{settings.tokens.symbols.import.type_relation.dependency,t.relationships.dependency}
        }}
    };
}▶
◀public: template <typename T>
static auto Build_Implementation_Import_Relationships(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_IMPLEMENTATION_RELATIONSHIP,{
          {settings.tokens.symbols.import.type_relation.association,t.relationships.association}
          ,{settings.tokens.symbols.import.type_relation.aggregation,t.relationships.aggregation}
          ,{settings.tokens.symbols.import.type_relation.composition,t.relationships.composition}
          ,{settings.tokens.symbols.import.type_relation.inheritence,t.relationships.inheritence}
          ,{settings.tokens.symbols.import.type_relation.generaliation,t.relationships.generalization}
          ,{settings.tokens.symbols.import.type_relation.realization,t.relationships.realization}
          ,{settings.tokens.symbols.import.type_relation.dependency,t.relationships.dependency}
        }}
    };
}▶
◀public: template <typename T>
static auto Build_Test_Import_Relationships(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::IMPORT_TEST_RELATIONSHIP,{
          {settings.tokens.symbols.import.type_relation.association,t.relationships.association}
          ,{settings.tokens.symbols.import.type_relation.aggregation,t.relationships.aggregation}
          ,{settings.tokens.symbols.import.type_relation.composition,t.relationships.composition}
          ,{settings.tokens.symbols.import.type_relation.inheritence,t.relationships.inheritence}
          ,{settings.tokens.symbols.import.type_relation.generaliation,t.relationships.generalization}
          ,{settings.tokens.symbols.import.type_relation.realization,t.relationships.realization}
          ,{settings.tokens.symbols.import.type_relation.dependency,t.relationships.dependency}
        }}
    };
}▶

◀public: template <typename T>
static auto Build_Interface_Import_Related(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::IMPORT_INTERFACE_RELATED,       t.related}
  };
}▶
◀public: template <typename T>
static auto Build_Implementation_Import_Related(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::IMPORT_IMPLEMENTATION_RELATED,       t.related}
  };
}▶
◀public: template <typename T>
static auto Build_Test_Import_Related(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::IMPORT_TEST_RELATED,       t.related}
  };
}▶




//--------------------------------------

//MACRO RELATED (DONE):
◀public: template <typename T>
static auto Bind_Macro(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::MACRO_NAME,    t.name}
       ,{Token_Name::MACRO_UNITS,   t.units}
       ,{Token_Name::MACRO_BRIEF,   t.brief}
       ,{Token_Name::MACRO_DETAIL,  t.detail}
       ,{Token_Name::MACRO_VALUE,   t.value}
    };
}▶

◀public: template <typename T>
static auto Bind_Macro_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.access, Token_Name::MACRO_SPECIFIERS,
                            {{settings.tokens.symbols.macro.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols.macro.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols.macro.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶

//--------------------------------------

//FORWARD DECLARE:
◀public: template <typename T>
static auto Bind_Forward_Declare(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::FORWARD_DECLARE_ARGUMENT,    t.name}
    };
}▶
//--------------------------------------

//ENUM RELATED (DONE):
◀public: template <typename T>
static auto Bind_Enum(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::ENUM_NAME,      t.name}
       ,{Token_Name::ENUM_BRIEF,     t.brief}
       ,{Token_Name::ENUM_DETAIL,    t.detail}
       ,{Token_Name::ENUM_BASE_TYPE, t.base_type}
    };
}▶

◀public: template <typename T>
static auto Bind_Enum_Args(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::ENUM_ARG_NAME,    t.name}
       ,{Token_Name::ENUM_ARG_VALUE,   t.value}
       ,{Token_Name::ENUM_ARG_COMMENT, t.comment}
    };
}▶

◀public: template <typename T>
static auto Bind_Enum_Subgroup(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::ENUM_SUBGROUP_NAME,    t.name}
		,{Token_Name::ENUM_SUBGROUP_DESCRIPTION,    t.description}
    };
}▶
◀public: template <typename T>
static auto Bind_Enum_Subscribed_Subgroup(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::ENUM_ARG_GROUP_AFFILIATION,    t.name}
    };
}▶

◀public: template <typename T>
static auto Bind_Enum_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::ENUM_SPECIFIERS,{{settings.tokens.symbols.enumerated.iterable,t.is_iterable}}}
    };
}▶
◀public: template <typename T>
static auto Bind_Enum_Access_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.access, Token_Name::ENUM_SPECIFIERS,
                            {{settings.tokens.symbols.enumerated.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols.enumerated.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols.enumerated.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶
//--------------------------------------


//INHERITENCE RELATED (DONE):
◀public: template <typename T>
static auto Bind_Inheritence(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::INHERITANCE_TYPE,    t.name}
    };
}▶
◀public: template <typename T>
static auto Bind_Inheritence_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::INHERITANCE_SPECIFIERS,{{settings.tokens.symbols.inheritance._virtual,t.virtually}}}
    };
}▶

◀public: template <typename T>
static auto Bind_Inheritence_Specifiers2(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.class_access, Token_Name::INHERITANCE_SPECIFIERS,
                            {{settings.tokens.symbols.inheritance.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols.inheritance.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols.inheritance.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶
//--------------------------------------






//NAMESPACE RELATED (DONE):
◀public: template <typename T>
static auto Bind_Namespace(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
      {Token_Name::NAMESPACE_NAME,      t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Namespace_Specifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::NAMESPACE_SPECIFIERS,{{settings.tokens.symbols._namespace._inline,t.inlined}}}
    };
}▶
//--------------------------------------

◀public: template <typename T>
static auto Bind_Library(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
      {Token_Name::LIBRARY,      t.name}
  };
}▶
◀public: template <typename T>
static auto Bind_Compile_Option(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
      {Token_Name::COPTS,      t.flag}
  };
}▶
◀public: template <typename T>
static auto Bind_Library_Option(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
      {Token_Name::LINKOPTS,      t.flag}
  };
}▶



//PRECONDITIONS POST CONDITIONS (DONE)
◀public: template <typename T>
static auto Bind_Function_Preconditions(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_PRECONDITION,         t.condition}
      ,{Token_Name::FUNCTION_PRECONDITION_COMMENT, t.comment}
  };
}▶
◀public: template <typename T>
static auto Bind_Function_Postconditions(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_POSTCONDITION,         t.condition}
      ,{Token_Name::FUNCTION_POSTCONDITION_COMMENT, t.comment}
  };
}▶
//--------------------------------------












//METHOD RELATED:
◀public: template <typename T>
static auto Bind_Stamp_Name(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{

    return {
       {Token_Name::FUNCTION_STAMP_NAME,              t.name}
  };
}▶
◀public: template <typename T>
static auto Bind_Stamp_Value(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{

    return {
       {Token_Name::FUNCTION_STAMP_VALUE,             t.value}
  };
}▶

//method bindings
◀public: template <typename T>
static auto Bind_Main_Function_Items(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{

    return {
       {Token_Name::FUNCTION_NAME,              t.names.function_name}
      ,{Token_Name::FUNCTION_NAME,              t.names.original_function_name}
      ,{Token_Name::FUNCTION_UNIQUE_MANGLE_NAME,t.names.unique_mangle_name}
      ,{Token_Name::FUNCTION_BRIEF_DESCRIPTION, t.brief_description}
      ,{Token_Name::FUNCTION_DETAILED_DESCRIPTION, t.detailed_description}
      ,{Token_Name::EXCEPT_EXPRESSION, t.exception_expression}
      ,{Token_Name::EXCEPT_COMMENT, t.exception_comment}
      ,{Token_Name::FUNCTION_SUBGROUP_NAME, t.subgroup}
  };
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Class(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.class_access, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols.method.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols.method.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Value_Overrides(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Value_Overload> {
    
    return {t.overload_specifiers.value, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method.lvalue_overload,Value_Overload::LVALUE}
                            ,{settings.tokens.symbols.method.rvalue_overload,Value_Overload::RVALUE}}
                            ,Value_Overload::NONE};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Storage(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Storage_Specifier> {
    
    return {t.storage, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method.static_storage,Storage_Specifier::STATIC}
                            ,{settings.tokens.symbols.method.extern_storage,Storage_Specifier::EXTERN}}
                            ,Storage_Specifier::NONE};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Virtuality(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Method_Virtuality> {
    
    return {t.inheritence.virtuality, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method.inheritance._virtual,Method_Virtuality::UNPURE_VIRTUAL}
                            ,{settings.tokens.symbols.method.inheritance.pure_virtual,Method_Virtuality::PURE_VIRTUAL}}
                            ,Method_Virtuality::NONE};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Implicit_Method_Modifier(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Implicit_Method_Modifier> {
    
    return {t.implict_modifier, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method._default,Implicit_Method_Modifier::DEFAULT}
                            ,{settings.tokens.symbols.method._delete,Implicit_Method_Modifier::DELETED}}
                            ,Implicit_Method_Modifier::NONE};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Event(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Method_Event_Characteristic> {
    
    return {t.event, Token_Name::FUNCTION_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.method.signal,Method_Event_Characteristic::SIGNAL}
                            ,{settings.tokens.symbols.method.slot,Method_Event_Characteristic::SLOT}}
                            ,Method_Event_Characteristic::NONE};
}▶

◀public: template <typename T>
static auto Bind_Method_Specifiers_Other(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::FUNCTION_CLASS_SPECIFIERS,{
          {settings.tokens.symbols.method._friend,t.is_friend}
          ,{settings.tokens.symbols.method.const_overload,t.overload_specifiers.is_const}
          ,{settings.tokens.symbols.method._inline,t.is_inlined}
          ,{settings.tokens.symbols.method.cache,t.is_cached}
          ,{settings.tokens.symbols.method._explicit,t.is_explicit}
          ,{settings.tokens.symbols.method.unused,t.is_unused}
          ,{settings.tokens.symbols.method.inheritance.override,t.inheritence.is_overrided}
          ,{settings.tokens.symbols.method.inheritance.final,t.inheritence.is_final}
        }}
    };
}▶


//template args
◀public: template <typename T>
static auto Bind_Template_Args(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_TEMPLATE_ARGUMENT_TYPE,       t.type}
      ,{Token_Name::FUNCTION_TEMPLATE_ARGUMENT_IDENTIFIER, t.identifier}
      ,{Token_Name::FUNCTION_TEMPLATE_ARGUMENT_DEFAULT, t.default_value}
      ,{Token_Name::FUNCTION_TEMPLATE_ARGUMENT_COMMENT, t.comment}
  };
}▶
◀public: template <typename T>
static auto Bind_Template_Arg_Qualifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::FUNCTION_ARGUMENT_TYPE_QUALIFIERS,{
                                                        {settings.tokens.symbols.method.argument.infinitely_more,t.infinitely_more}
                                                        }}
    };
}▶

//alternate expression name
◀public: template <typename T>
static auto Bind_Alt_Express_Name(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ALTERNATIVE_EXPRESSION_NAME,       t.name}
  };
}▶


//type specializations
◀public: template <typename T>
static auto Bind_Data_Member_Type_Specializations(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_TYPE_SPECIALIZATIONS,       t.type}
  };
}▶
◀public: template <typename T>
static auto Bind_Data_Member_Type_Module_Dependencies(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_TYPE_MODULE_DEPENDENCIES,       t.name}
  };
}▶
◀public: template <typename T>
static auto Bind_Data_Member_Type_Scope_Specifier(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_SCOPE,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Data_Member_Type_Parent_Type(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_PARENT_TYPE,       t.type}
  };
}▶

◀public: template <typename T>
static auto Bind_Data_Member_Type_Specializations_Scope_Specifier(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_TYPE_SPECIALIZATIONS_SCOPE,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Data_Member_Type_Library_Dependencies(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::DATA_MEMBER_TYPE_LIBRARY_DEPENDENCIES,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Function_Arg_Type_Specializations(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ARGUMENT_TYPE_SPECIALIZATIONS,       t.type}
  };
}▶

◀public: template <typename T>
static auto Bind_Function_Result_Type_Specializations(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_RESULT_TYPE_SPECIALIZATIONS,       t.type}
  };
}▶


//function args
◀public: template <typename T>
static auto Bind_Function_Args(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ARGUMENT_TYPE,       t.type}
      ,{Token_Name::FUNCTION_ARGUMENT_IDENTIFIER, t.identifier}
      ,{Token_Name::FUNCTION_ARGUMENT_UNITS,      t.units}
      ,{Token_Name::FUNCTION_ARGUMENT_DEFAULT,    t.default_value}
      ,{Token_Name::FUNCTION_ARGUMENT_COMMENT,    t.comment}
  };
}▶

◀public: template <typename T>
static auto Bind_Function_Arg_Qualifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::FUNCTION_ARGUMENT_TYPE_QUALIFIERS,{{settings.tokens.symbols.method.argument._mutable,t.is_mutable}
                                                        ,{settings.tokens.symbols.method.argument.reference,t.is_reference}
                                                        ,{settings.tokens.symbols.method.argument.infinitely_more,t.infinitely_more}
                                                        ,{settings.tokens.symbols.method.argument.optional,t.is_optional}
                                                        }}
    };
}▶


//function results
◀public: template <typename T>
static auto Bind_Function_Results(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_RESULT_TYPE,       t.type}
      ,{Token_Name::FUNCTION_RESULT_IDENTIFIER, t.identifier}
      ,{Token_Name::FUNCTION_RESULT_UNITS,      t.units}
      ,{Token_Name::FUNCTION_RESULT_DEFAULT,    t.default_value}
      ,{Token_Name::FUNCTION_RESULT_COMMENT,    t.comment}
  };
}▶

◀public: template <typename T>
static auto Bind_Function_Result_Qualifiers(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::FUNCTION_RESULT_TYPE_QUALIFIERS,{{settings.tokens.symbols.method.result._mutable,t.is_mutable}
                                                        ,{settings.tokens.symbols.method.argument.reference,t.is_reference}
                                                        ,{settings.tokens.symbols.method.argument.infinitely_more,t.infinitely_more}
                                                        ,{settings.tokens.symbols.method.argument.optional,t.is_optional}
                                                     }}
    };
}▶
◀public: template <typename T>
static auto Bind_Function_Result_Qualifiers2(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Usage_Requirement> {
    
    return {t.usage_requirement, Token_Name::FUNCTION_RESULT_TYPE_QUALIFIERS,
                            {{settings.tokens.symbols.method.result.allowed_to_discard,Usage_Requirement::POSSIBLY_IGNORED}
			                ,{settings.tokens.symbols.method.result.required_to_discard,Usage_Requirement::IGNORED}}
                            ,Usage_Requirement::NOT_IGNORED};
}▶


//DATA MEMBER RELATED:
◀public: template <typename T>
static auto Bind_Data_Members(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::DATA_MEMBER_TYPE,                 t.type}
       ,{Token_Name::DATA_MEMBER_IDENTIFIER,           t.name}
       ,{Token_Name::DATA_MEMBER_DEFAULT_VALUE,        t.default_value}
       ,{Token_Name::DATA_MEMBER_BRIEF,                t.brief}
       ,{Token_Name::DATA_MEMBER_DETAILED,             t.detail}
       ,{Token_Name::DATA_MEMBER_UNITS,                t.units}
       ,{Token_Name::DATA_MEMBER_PARTIAL_PACK_AMOUNT,  t.reflection.partial_pack_amount}
    };
}▶


◀public: template <typename T>
static auto Bind_Data_Specifiers_Class(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Class_Access> {
    
    return {t.class_access, Token_Name::DATA_MEMBER_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.data_member.access._public,Class_Access::PUBLIC}
                            ,{settings.tokens.symbols.data_member.access._protected,Class_Access::PROTECTED}
                            ,{settings.tokens.symbols.data_member.access._private,Class_Access::PRIVATE}}
                            ,Class_Access::PUBLIC};
}▶

◀public: template <typename T>
static auto Bind_Data_Specifiers_Other(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::DATA_MEMBER_CLASS_SPECIFIERS,{
          {settings.tokens.symbols.data_member.serializable,t.reflection.serializable}
          ,{settings.tokens.symbols.data_member.printable,t.reflection.printable}
          ,{settings.tokens.symbols.data_member.comparable,t.reflection.comparable}
          ,{settings.tokens.symbols.data_member.log_value_transition,t.reflection.log_value_transition}
          ,{settings.tokens.symbols.data_member.name_of_enveloping_type,t.is_a_name_for_the_enveloping_type}
          ,{settings.tokens.symbols.data_member.optional,t.is_optional}
        }}
    };
}▶

◀public: template <typename T>
static auto Bind_Data_Qualifiers_Storage(T & t, Parser_Settings const& settings) -> Parser::Any_Value_Mapping<char,Storage_Specifier> {
    
    return {t.storage, Token_Name::DATA_MEMBER_CLASS_SPECIFIERS,
                            {{settings.tokens.symbols.data_member.static_storage,Storage_Specifier::STATIC}
                            ,{settings.tokens.symbols.data_member.extern_storage,Storage_Specifier::EXTERN}}
                            ,Storage_Specifier::NONE};
}▶


◀public: template <typename T>
static auto Bind_Data_Qualifiers_Other(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::DATA_MEMBER_TYPE_QUALIFIERS,{
          {settings.tokens.symbols.data_member.const_qualifier,t.is_const}
        }}
    };
}▶


◀public: template <typename T>
static auto Bind_Data_State_Specifier(T & t, Parser_Settings const& settings) -> Parser::Bool_Value_Binds {
    
    return {
        {Token_Name::DATA_MEMBER_CLASS_SPECIFIERS,{
           {settings.tokens.symbols.data_member.state.obserable,t.is_observable}  //getter
          ,{settings.tokens.symbols.data_member.state.injectable,t.is_injectable}  //setter
          ,{settings.tokens.symbols.data_member.state.obtainable,t.is_obtainable}  //obtain
        }}
    };
}▶


//data member sub attributes:
◀public: template <typename T>
static auto Bind_Data_Member_Key_Value_Pair(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::DATA_MEMBER_PAIR_KEY,t.key}
       ,{Token_Name::DATA_MEMBER_PAIR_VALUE,t.value}
    };
}▶
◀public: template <typename T>
static auto Bind_Data_Member_Value_Constraints(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::DATA_MEMBER_CONSTRAINT_OPERATION,t.operation}
        ,{Token_Name::DATA_MEMBER_CONSTRAINT_VALUE,t.value}
        ,{Token_Name::DATA_MEMBER_BROKEN_CONSTRAINT_MEANING,t.meaning}
        ,{Token_Name::DATA_MEMBER_CONSTRAINT_DISPLAY_THEME,t.display_theme}
    };
}▶
◀public: template <typename T>
static auto Bind_Data_Member_Value_Meaning(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::DATA_MEMBER_DEFINED_VALUE,t.value}
       ,{Token_Name::DATA_MEMBER_DEFINED_VALUE_OPERATION,t.operation}
       ,{Token_Name::DATA_MEMBER_DEFINED_VALUE_MEANING,t.meaning}
       ,{Token_Name::DATA_MEMBER_DEFINED_VALUE_DISPLAY_THEME,t.display_theme}
    };
}▶

◀public: template <typename T>
static auto Bind_Data_Member_Value_Transition_Meaning(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
        {Token_Name::DATA_MEMBER_TRANSITION_BEFORE_OPERATION,t.before.boolean_expression}
       ,{Token_Name::DATA_MEMBER_TRANSITION_BEFORE_VALUE,t.before.value}
       ,{Token_Name::DATA_MEMBER_TRANSITION_AFTER_OPERATION,t.after.boolean_expression}
       ,{Token_Name::DATA_MEMBER_TRANSITION_AFTER_VALUE,t.after.value}
       ,{Token_Name::DATA_MEMBER_TRANSITION_MEANING,t.meaning}
       ,{Token_Name::DATA_MEMBER_TRANSITION_DISPLAY_THEME,t.display_theme}
    };
}▶



◀public: template <typename T>
static auto Bind_Func_Arg_Module(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ARGUMENT_TYPE_MODULE_DEPENDENCIES,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Func_Arg_Lib(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ARGUMENT_TYPE_LIBRARY_DEPENDENCIES,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Func_Arg_Scope(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_ARGUMENT_TYPE_SCOPE,       t.name}
  };
}▶


◀public: template <typename T>
static auto Bind_Func_Result_Module(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_RESULT_TYPE_MODULE_DEPENDENCIES,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Func_Result_Lib(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_RESULT_TYPE_LIBRARY_DEPENDENCIES,       t.name}
  };
}▶

◀public: template <typename T>
static auto Bind_Func_Result_Scope(T & t, Parser_Settings const& settings) -> Parser::Token_Value_Binds{
    
    return {
       {Token_Name::FUNCTION_RESULT_TYPE_SCOPE,       t.name}
  };
}▶







