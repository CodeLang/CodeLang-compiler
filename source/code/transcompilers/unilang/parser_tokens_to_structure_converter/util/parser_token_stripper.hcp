class


❪"code/transcompilers/unilang/parser/parser_token"❫

//sub structure items
❪"code/transcompilers/unilang/structure/sections/import/import_item"❫
❪"code/transcompilers/unilang/structure/sections/namespace/namespace_item"❫
❪"code/transcompilers/unilang/structure/sections/macro/macro_item"❫
❪"code/transcompilers/unilang/structure/sections/inheritance/inheritance_item"❫
❪"code/transcompilers/unilang/structure/sections/enum/item/enum_item"❫
❪"code/transcompilers/unilang/structure/sections/method/method_item"❫
❪"code/transcompilers/unilang/structure/sections/data_member/data_member_item"❫
❪"code/transcompilers/unilang/parser_tokens_to_structure_converter/util/parser_utilities"❫
❪"code/transcompilers/unilang/options/parser/symbols/token_attribute_settings"❫
❪"code/transcompilers/unilang/parser_tokens_to_structure_converter/util/special_parser_filters"❫
⚯
⚞⚟

◀
public: template <typename T, typename Fun>
static auto Strip_Out_Type(Token_Attribute_Settings const& settings, std::vector<Parser_Token> const& tokens,
Token_Group const& group, Fun const& builder_function) -> std::vector<T>{

    std::vector<T> items;
    
    auto new_tokens = Parser_Utilities::Filter_Out_Tokens_By_Group_Name(tokens,group);
    auto split =  Parser_Utilities::Filter_By_Data_Member_Uniqueness(new_tokens);
    for (auto it: split){
        items.push_back(builder_function(it,settings));
    }
    
    return items;
}
▶

◀
public: template <typename T, typename Fun, typename Custom_Splitter>
static auto Strip_Out_Type(Token_Attribute_Settings const& settings, std::vector<Parser_Token> const& tokens, 
Token_Group const& group, Fun const& builder_function, Custom_Splitter const& custom_splitter) -> std::vector<T>{

    std::vector<T> items;
    
    auto new_tokens = Parser_Utilities::Filter_Out_Tokens_By_Group_Name(tokens,group);
    auto split =  custom_splitter(new_tokens);
    for (auto it: split){
        items.push_back(builder_function(it,settings));
    }
    
    return items;
}
▶

◀
public: template <typename T, typename Fun, typename Custom_Splitter>
static auto Strip_Out_Type_V2(Token_Attribute_Settings const& settings, std::vector<Parser_Token> const& tokens, 
Token_Group const& group, Fun const& builder_function) -> std::vector<T>{

    std::vector<T> items;
    
    auto new_tokens = Parser_Utilities::Filter_Out_Tokens_By_Group_Name(tokens,group);
    auto split =  Special_Parser_Filters::Filter_Group(new_tokens,group);
    for (auto it: split){
        items.push_back(builder_function(it,settings));
    }
    
    return items;
}
▶

