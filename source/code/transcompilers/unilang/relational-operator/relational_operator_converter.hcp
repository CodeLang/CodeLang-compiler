class

❪string❫
❪"code/transcompilers/unilang/relational-operator/relational_operator"❫
⚯
⚞⚟

◀public: static▶ std::string ☀As_String(Relational_Operator const& op)❰
	switch(op){
		case Relational_Operator::EQUAL: return "==";
        case Relational_Operator::NOT_EQUAL: return "!=";
        case Relational_Operator::LESS: return "<";
        case Relational_Operator::LESS_EQUAL: return "<=";
        case Relational_Operator::GREATER: return ">";
        case Relational_Operator::GREATER_EQUAL: return ">=";
	}
	return "?";
❱
◀public: static▶ std::string ☀As_Word(Relational_Operator const& op)❰
	switch(op){
		case Relational_Operator::EQUAL: return "equal to";
        case Relational_Operator::NOT_EQUAL: return "not equal to";
        case Relational_Operator::LESS: return "less";
        case Relational_Operator::LESS_EQUAL: return "less equal";
        case Relational_Operator::GREATER: return "greater";
        case Relational_Operator::GREATER_EQUAL: return "greater equal";
	}
	return "?";
❱
◀public: static▶ Relational_Operator ☀As_Opposite(Relational_Operator const& op)❰
	switch(op){
		case Relational_Operator::EQUAL: return Relational_Operator::NOT_EQUAL;
        case Relational_Operator::NOT_EQUAL: return Relational_Operator::EQUAL;
        case Relational_Operator::LESS: return Relational_Operator::GREATER_EQUAL;
        case Relational_Operator::LESS_EQUAL: return Relational_Operator::GREATER;
        case Relational_Operator::GREATER: return Relational_Operator::LESS_EQUAL;
        case Relational_Operator::GREATER_EQUAL: return Relational_Operator::LESS;
	}
	return Relational_Operator::NOT_EQUAL;
❱