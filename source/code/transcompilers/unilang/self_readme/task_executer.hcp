class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //Unicode please
    Set_English_UTF8_Locale();

    //move to the right place in the repository
    auto build_from = Full_Path_To_Desktop() + "unilang/source/code/company/self/";
    Set_Path(build_from);
    
    //the files we are reading/building
    auto from = "unilang_docs.UniLang";
    auto to_readme = Full_Path_To_Desktop() + "unilang/README.md";
    auto to_raw_pdf = Full_Path_To_Desktop() + "unilang/README-pdf.md";
    auto to_manual_pdf = Full_Path_To_Desktop() + "unilang/README.pdf";
    auto to_latex_template = Full_Path_To_Desktop() + "unilang/README.tx";
    auto to_slide_md = Full_Path_To_Desktop() + "unilang/README-slides.md";
    auto to_dzslides_html = Full_Path_To_Desktop() + "unilang/README-slides.html";
    
    //parse it
    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    input.options.input_files.emplace_back(from);
    auto graphs = Code_Graphs_Creator::Turn_Files_Into_Code_Graphs(input);
    
    //ensure the parse was good
    if (graphs.size() != 1){
        Exit_With_Error("we should have parsed out a single code graph");
    }
    
    //build markdown documentation
    auto structure = graphs[0].structure;
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    auto result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    Write_To_File(to_readme,result);
    
    
    //build pdf documentation
    Set_Path(Full_Path_To_Desktop() + "unilang/");
    Write_To_File(to_latex_template,Latex_Template_Getter::Get());
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.tables.print = false;
    result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    Write_To_File(to_raw_pdf,result);
    std::string command = "pandoc --toc -V -s ";
    command += "--template=";
    command += to_latex_template;
    command += " ";
    command += "--variable mainfont=\"Palatino\" ";
    command += "--variable sansfont=\"Helvetica\" ";
    command += "--variable monofont=\"Menlo\" ";
    command += "--variable fontsize=12pt ";
    //command += "--latex-engine=xelatex ";
    command += "-o ";
    command += to_manual_pdf;
    command += " ";
    command += to_raw_pdf;
    std::cout << command << std::endl;
    if (Unsuccessful_Run_Of_Command(command)){
        Exit_With_Error("failed to create pdf");
    }
    
    //build html slides documentation
    md_settings.outlines.print = true;
    md_settings.sentences.print = false;
    result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    Write_To_File(to_slide_md,result);
    command = "pandoc -s --mathml -i -t dzslides ";
    command += to_slide_md;
    command += " -o ";
    command += to_dzslides_html;
    std::cout << command << std::endl;
    if (Unsuccessful_Run_Of_Command(command)){
        Exit_With_Error("failed to create html slides");
    }
❱