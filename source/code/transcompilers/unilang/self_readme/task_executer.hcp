class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/locale/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/dzslides/dzslides_exporter"❫
❪"code/transcompilers/unilang/self_readme/latex_template_getter"❫
❪"code/utilities/web/dropbox/dropbox_uploader"❫
❪"code/utilities/secret/secret_getter"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //Unicode please
    Set_English_UTF8_Locale();

    //move somewhere
    Move_To_Unilang_Docs_Place_In_Repo();
    
    //the files we are reading/building
    auto from = "unilang_docs.unilang";
    auto to_readme = Bazel_Derived_Root_Of_Repo() + "README.md";
    auto to_raw_pdf = Bazel_Derived_Root_Of_Repo() + "README-pdf.md";
    auto to_manual_pdf = Bazel_Derived_Root_Of_Repo() + "README.pdf";
    auto to_latex_template = Bazel_Derived_Root_Of_Repo() + "README.tx";
    auto slides_base_name = Bazel_Derived_Root_Of_Repo() + "README-slides";
    bool upload_to_dropbox = true;
    
    
    //parse it
    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    input.options.input_files.emplace_back(from);
    auto graphs = Code_Graphs_Creator::Turn_Files_Into_Code_Graphs(input);
    
    //ensure the parse was good
    if (graphs.size() != 1){
        Exit_With_Error("we should have parsed out a single code graph");
    }
    
    //build markdown documentation
    auto structure = graphs[0].structure;
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    auto result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    Write_To_File(to_readme,result);
    
    //build pdf documentation
    Set_Path(Bazel_Derived_Root_Of_Repo());
    Write_To_File(to_latex_template,Latex_Template_Getter::Get());
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = false;
    int font_size = 12;
    int toc_depth = 2;
    
    result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    Write_To_File(to_raw_pdf,result);
    std::string command = "pandoc --toc -V -s ";
    command += "--template=";
    command += to_latex_template;
    command += " ";
    command += "--variable mainfont=\"Palatino\" ";
    command += "--variable sansfont=\"Helvetica\" ";
    command += "--variable monofont=\"Menlo\" ";
    command += "--variable fontsize=";
    command += std::to_string(font_size);
    command += "pt ";
    command += "--toc-depth=";
    command += std::to_string(toc_depth);
    command += " ";
    //command += "--latex-engine=xelatex ";
    command += "-o ";
    command += to_manual_pdf;
    command += " ";
    command += to_raw_pdf;
    std::cout << command << std::endl;
    if (Unsuccessful_Run_Of_Command(command)){
        Exit_With_Error("failed to create pdf");
    }
    
    //build html slides documentation
    auto dz_settings = input.settings.compiler_settings.trevor.settings.foreign_language.dzslides;
    Dzslides_Exporter::Create_Markdown_And_Slides(graphs[0].structure,contributors,dz_settings,slides_base_name);
    
    //upload pdf to dropbox
    if (upload_to_dropbox){
        auto secret = Secret_Getter::Unilang_Dropbox_Access_Key();
        Dropbox_Uploader::Upload(to_manual_pdf,"unilang/unilang.pdf",secret);
    }
❱

◀private: static▶ void ☀Move_To_Unilang_Docs_Place_In_Repo() ❰
    auto build_from = Bazel_Derived_Path_To_Self_Unilang();
    Set_Path(build_from);
❱