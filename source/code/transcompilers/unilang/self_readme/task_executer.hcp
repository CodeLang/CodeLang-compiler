class

❪"code/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/transcompilers/unilang/tokens/generic_token"❫
❪"code/transcompilers/unilang/tokens/get_tokens"❫
⚯
❪"code/utilities/types/general/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/transcompilers/unilang/user-frontend/code_graphs_creator"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks() ❰

    //the unilang file we are converting into the repo's readme
    auto build_from = Full_Path_To_Desktop() + "unilang/source/code/company/self/";
    Set_Path(build_from);
    auto from = "unilang_docs.UniLang";
    auto to = Full_Path_To_Desktop() + "unilang/README.md";
    
    //parse it
    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    input.options.input_files.emplace_back(from);
    auto graphs = Code_Graphs_Creator::Turn_Files_Into_Code_Graphs(input);
    if (graphs.size() != 1){
        Exit_With_Error("we should have parsed out a single code graph");
    }
    
    auto structure = graphs[0].structure;
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    auto result = Markdown_Str_Getter::Get(graphs[0].structure,contributors,md_settings);
    std::cout << result << std::endl;
    

❱