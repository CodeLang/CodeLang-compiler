class


❪vector❫
❪string❫
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/options/manipulation/struct_manipulation_settings"❫
❪"code/transcompilers/unilang/doxygen_block_printer/grammar_adjuster"❫
❪"code/transcompilers/unilang/options/comment/comment_grammar_settings"❫
❪"code/transcompilers/unilang/options/manipulation/comment_reflow_settings"❫
❪"code/transcompilers/unilang/parser/token_value"❫
⚯
❪"code/transcompilers/unilang/structure-adjuster/words_deriver"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
⚞⚟



◀public: static▶ void ☀Adjust(Token_Value & comment, Comment_Grammar_Settings const& grammar, Comment_Reflow_Settings const& reflow)❰

//we attempt to manipulate the comments that were actually typed. Here's how:
//attempt to parse out sentences.  
//for now, we'll assume each line is a sentence.
//kinda sucks.  I'll have to make sure I don't implicitly newline in the middle of a sentences.
//also some things aren't actually sentences so we'll have to be careful with our adjustments.  
//somethings are questions.  some end with colons: where we start listing things.
//Uh yeah, we'll hack this based on real world / experience-based evaluation
auto sentences = Get_All_Adjusted_Sentences(comment,grammar);

auto full = Possibly_Apply_Reflow(sentences,grammar,reflow);
comment.value = as_wstring(full);
❱

◀public: static▶ std::vector<std::string> ☀Get_All_Adjusted_Sentences(Token_Value const& comment, Comment_Grammar_Settings const& grammar)❰
	auto sentences = Derive_Setences(comment);

	//adjust sentences
	for (auto & it: sentences){
		it = Grammar_Adjuster::Get_Adjusted(it,grammar);
	}
	return sentences;
❱

◀public: static▶ std::vector<std::string> ☀Derive_Setences(Token_Value const& comment)❰
	auto str = as_string(comment.value);
    auto sentences = Split_Into_Parts_From_Delimiter(str,'\n');
	return sentences;
❱


◀public: static▶ std::string ☀Possibly_Apply_Reflow(const std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar, Comment_Reflow_Settings const& reflow)❰
	std::string result;
	
    //replace the sentences if we aren't reflowing
    if (!reflow.enable){
		for (auto const& it: sentences){
			result += it + '\n';	
		}
	}

    
	else{
       result = Apply_Reflow(sentences,grammar,reflow);
	}

	return result;
❱

◀public: static▶ std::string ☀Apply_Reflow(const std::vector<std::string> & sentences, Comment_Grammar_Settings const& grammar, Comment_Reflow_Settings const& reflow)❰
	std::string result;

	int current_width = 0;
	for (auto const& it: sentences){
		auto words = Words_Deriver::Derive(it);
		for (auto const& word: words){
			if (Word_Will_Fit_On_The_Line(current_width,word,reflow)){
				Append_Current_Result_For_Same_Line(result,word,reflow);
				Increase_Current_Width_For_Same_Line(current_width,word,reflow);
			}
			else{
				current_width = 0;
				Append_Current_Result_For_New_Line(result,word,reflow);
				Increase_Current_Width_For_New_Line(current_width,word,reflow);
			}
		}

		//now that the sentence is over, we add the sentence divider
		rtrim(result);
		result += reflow.sentence_divider;
        current_width += reflow.sentence_divider.size();
	}
	return result;
❱

◀public: static▶ bool ☀Word_Ends_The_Sentence(Comment_Grammar_Settings const& grammar, std::string const& word)❰
	for (auto it: grammar.puncuations){
		if (Ends_With(word,it)){
			return true;
		}
	}
	return false;
❱

◀public: static▶ bool ☀Word_Will_Fit_On_The_Line(int const& current_width, std::string const& word, Comment_Reflow_Settings const& reflow)❰
	return current_width + reflow.re_spacing.size() + word.size() <= reflow.max_width;
❱


//appending back to the token
◀public: static▶ void ☀Append_Current_Result_For_Same_Line(std::string & result, std::string const& word, Comment_Reflow_Settings const& reflow)❰
	result += reflow.re_spacing;
	result += word;
❱
◀public: static▶ void ☀Append_Current_Result_For_New_Line(std::string & result, std::string const& word, Comment_Reflow_Settings const& reflow)❰
	result += reflow.reflow_divider;
	result += word;
❱

//adjusting the current_width count
◀public: static▶ void ☀Increase_Current_Width_For_Same_Line(int & current_width, std::string const& word, Comment_Reflow_Settings const& reflow)❰
    current_width += word.size();
    current_width += reflow.re_spacing.size();
❱
◀public: static▶ void ☀Increase_Current_Width_For_New_Line(int & current_width, std::string const& word, Comment_Reflow_Settings const& reflow)❰
    current_width += word.size();
❱


