class


❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/options/manipulation/struct_manipulation_settings"❫
❪"code/transcompilers/unilang/type_converters/unilang-type-to-language-type-converter/unilang_type_to_language_type_converter"❫
⚯
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/utilities/types/vectors/transformers/lib"❫
⚞⚟

◀public: static▶ void ☀Inject_Into_Body(std::vector<Method_Item> & methods, Struct_Manipulation_Settings const& settings)❰
    //we only want to enforce return statements
    //on any function that:
    //is void and currently doesn't have a return statement

    Case_Format_Style identifier_casing = Case_Format_Style::SNAKE_CASE;
    for (auto & method: methods){
        if (Return_Is_Valid_For_This_Adjustment(method)){
            auto uni_type = as_string(method.return_results[0].type.value);
            auto identifier = as_string(method.return_results[0].identifier.value);
            identifier = Case_Modifier::As_Modified_Casing(identifier_casing,identifier);
            auto lang_type = Unilang_Type_To_Language_Type_Converter::Convert_To_Language_Type(uni_type,Source_Language::CPP);
            
            
            Add_Instantiate_Statement(method,lang_type.name,identifier);
            Add_Return_Statement(method,identifier);
        }
    }
❱

◀private: static▶ bool ☀Return_Is_Valid_For_This_Adjustment(Method_Item const& method)❰
    if (!method.return_results.empty()){
        if (!method.return_results[0].is_reference){
            return true;
        }
    }
    return false;
❱

◀private: static▶ void ☀Add_Instantiate_Statement(Method_Item & method, std::string const& type, std::string const& identifier)❰
    Body_Token_Value t;

    std::string statement = type + " " + identifier + ";";
    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring(statement);
    Add_To_Front(method.body,t);
❱

◀private: static▶ void ☀Add_Return_Statement(Method_Item & method, std::string const& identifier)❰
    Body_Token_Value t;

    std::string statement = "return " + identifier + ";";
    t.name = Body_Token_Name::REGULAR;
    t.value =  as_wstring(statement);
    Add_To_Back(method.body,t);
❱