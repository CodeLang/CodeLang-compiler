class


❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
⚯
❪"code/utilities/converters/lib"❫
⚞⚟

◀public: static▶ void ☀Force_Return_On_Void_Functions(std::vector<Method_Item> & methods, C_Export_Settings const& settings)❰
	//we only want to enforce return statements
    //on any function that:
	//is void and currently doesn't have a return statement

	for (auto & method: methods){
		if (method.return_results.empty()){
		    Add_Return_Statement_If_One_Does_Not_Already_Exist(method,settings);
		}
	}
❱

◀private: static▶ void ☀Add_Return_Statement_If_One_Does_Not_Already_Exist(Method_Item & method, C_Export_Settings const& settings)❰

	if(!Return_Statement_Currently_Exists(method,settings)){
		Add_Frivolous_Return_Statement(method,settings);
	}
❱

◀private: static▶ bool ☀Return_Statement_Currently_Exists(Method_Item const& method, C_Export_Settings const& settings)❰
	//for now, I'm just going to assume that I don't do this in UniLang	
	return false;
❱
◀private: static▶ void ☀Add_Frivolous_Return_Statement(Method_Item & method, C_Export_Settings const& settings)❰
    Body_Token_Value t;

    t.name = Body_Token_Name::REGULAR;
    t.value =  L"\nreturn;\n";
    method.body.push_back(t);
❱
