class


❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/options/manipulation/struct_manipulation_settings"❫
⚯
❪"code/transcompilers/unilang/structure-adjuster/methods/creating_methods/extra_methods_creator"❫
❪"code/transcompilers/unilang/structure-adjuster/methods/forcers/method_chaining_enforcer"❫
❪"code/transcompilers/unilang/structure-adjuster/methods/forcers/return_statement_enforcer"❫
❪"code/transcompilers/unilang/structure-adjuster/methods/forcers/method_overload_adjuster"❫
❪"code/transcompilers/unilang/structure-printer/derivers/structure_typename_deriver"❫
❪"code/transcompilers/unilang/structure-adjuster/methods/api_and_lifetime/api_and_lifetime_creator"❫
⚞⚟

◀public: static▶ void ☀Adjust(Structure & structure, Struct_Manipulation_Settings const& settings)❰
    
    //add new methods based on settings and existing structure properties
    //Extra_Methods_Creator::Add_New_Methods(structure,settings);

    //adjust unilang lifetime methods to C lifetime methods (possibly adding additional methods for support)
    //also adjust method properties based on unilang properties
    //for example, unilang has access specifiers (public,protected,private).  C does not.  
    //therefore we take private as meaning static source declared functions. We make those adjustments
    //Transform_And_Add_Lifetime_Methods(structure,settings);

    //force void functions to allow method chaining
    //Method_Chaining_Enforcer::Adjust_Functions_To_Allow_Message_Chaining(structure,settings);

    //force void functions to have a frivolous return statement
	//Return_Statement_Enforcer::Force_Return_On_Void_Functions(structure.methods.methods,settings);

    //languages like C don't have function overloading
    //resolve overloading after we have all the functions we intend to print
    //Method_Overload_Adjuster::Resolve_Overloads_By_Adjusting_Function_Names(structure,settings);
❱
◀public: static▶ void ☀Transform_And_Add_Lifetime_Methods(Structure & structure, Struct_Manipulation_Settings const& settings)❰
	//structure.methods = Api_And_Lifetime_Creator::Get_All_Methods_After_Necessary_Transformation(structure,settings);
❱