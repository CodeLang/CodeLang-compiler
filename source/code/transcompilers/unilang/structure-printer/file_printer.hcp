class

❪vector❫
❪string❫
❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/transcompilers/unilang/options/language-specific/cpp_export_settings"❫
⚯
//printers
❪"code/transcompilers/unilang/structure-printer/global_printer"❫
❪"code/transcompilers/unilang/structure-printer/object_printer"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/vectors/operators/lib"❫
⚞⚟

◀public: static▶ std::vector<std::string> ☀Create(Structure structure, C_Export_Settings const& options)❰

    std::vector<std::string> files_created;
    if (structure.meta.code_type == Code_Type::GLOBAL){
        files_created += Global_Printer::Print_Global_Files(structure,options);
    }
    else if(structure.meta.code_type == Code_Type::PRODUCT_TYPE){
        //files_created += Object_Printer::Print_Object_Files(structure,options);
    }
    else if(structure.meta.code_type == Code_Type::SUM_TYPE){
        //TODO
    }
    else {
        throw "invalid value type";
    }
    return files_created;
❱

◀public: static▶ std::vector<std::string> ☀Create(Structure structure, Cpp_Export_Settings const& options)❰

    std::vector<std::string> files_created;
    if (structure.meta.code_type == Code_Type::GLOBAL){
        files_created += Global_Printer::Print_Global_Files(structure,options);
    }
    else if(structure.meta.code_type == Code_Type::PRODUCT_TYPE){
        //files_created += Object_Printer::Print_Object_Files(structure,options);
    }
    else if(structure.meta.code_type == Code_Type::SUM_TYPE){
        //TODO
    }
    else {
        throw "invalid value type";
    }
    return files_created;
❱
