class


❪"code/transcompilers/unilang/structure/sections/method/method_item"❫
❪"code/transcompilers/unilang/tokens/token_name"❫
❪"code/transcompilers/unilang/structure/sections/data_member/data_member_item"❫
❪"code/transcompilers/unilang/options/language-specific/c_export_settings"❫
❪"code/transcompilers/unilang/structure/sections/meta/code_type"❫
❪"code/transcompilers/unilang/structure-printer/function_declaration_location"❫
⚯
❪"code/transcompilers/unilang/structure-printer/doxygen_block_printer"❫
❪"code/transcompilers/unilang/in-out-design-printer/input_struct_getter"❫
❪"code/transcompilers/unilang/structure-printer/method_body_token_printer"❫
❪"code/transcompilers/unilang/structure-printer/shared_printer"❫
❪"code/transcompilers/unilang/test-wrapper-printer/test_wrapper_utilities"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
❪"code/transcompilers/unilang/structure-printer/derivers/identifier_name_deriver"❫
❪"code/transcompilers/unilang/structure-printer/attributes/method_attributes_getter"❫
❪"code/transcompilers/unilang/structure-printer/derivers/type_name_deriver"❫
❪"code/transcompilers/unilang/type_converters/type_to_hungarian/qualifier_stripper/type_qualifier_dresser"❫
❪"code/transcompilers/unilang/type_converters/type_to_hungarian/qualifier_stripper/type_qualifier_stripper"❫
❪"code/transcompilers/unilang/structure-printer/return_type_str_getter"❫
❪"code/transcompilers/unilang/structure-printer/method_block_ender"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/converters/lib"❫
❪"code/utilities/types/general/lib"❫

⚞⚟

//non-wrapped methods
◀public: static▶ void ☀Print_Global_Implementation_Methods(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members, C_Export_Settings const& options, Object_Export_Method const& export_method)❰
    for (auto it: methods){
        Print_Method_Implementation(out,file_name,code_type,it,members,methods,false,options,"",export_method);
    }
❱
◀public: static▶ void ☀Print_Object_Implementation_Methods(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members, C_Export_Settings const& options, Object_Export_Method const& export_method, std::string const& implicit_name)❰
    for (auto it: methods){
        Print_Method_Implementation(out,file_name,code_type,it,members,methods,true,options,implicit_name,export_method);
    }
❱

◀public: static▶ void ☀Print_Method_Interface(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, Method_Item const& method, C_Export_Settings const& options)❰
    Doxygen_Block_Printer::Print_Doxygen_Method_Comment(out,method,options);
    Print_Method_Deceleration(out,file_name,code_type,method,options);
❱
◀public: static▶ void ☀Print_Method_Implementation(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, Method_Item const& method, std::vector<Data_Member_Item> const& members, std::vector<Method_Item> const& methods, bool const& object_method, C_Export_Settings const& options, std::string implicit_name, Object_Export_Method const& export_method)❰
    Doxygen_Block_Printer::Print_Doxygen_Method_Comment(out,method,options);
    Print_Method_Definition(out,file_name,code_type,method,members,methods,object_method,options,implicit_name,export_method);
❱




//these exist to make the private global functions static in the source
//instead of non-static in the header
//it was a mistake to make this function, and was done as a quick hack.
//refactor when you can
//basically, we can convert private functions to have static, and call one of the other functions automatically
◀public: static▶ void ☀Print_Global_Interface_Methods2(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, C_Export_Settings const& options)❰

    for (auto it: methods){
        if (it.class_access == Class_Access::PUBLIC){
            Print_Method_Interface(out,file_name,Code_Type::GLOBAL,it,options);
        }
    }
❱
◀public: static▶ void ☀Print_Global_Implementation_Methods2(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members, C_Export_Settings const& options, Object_Export_Method const& export_method)❰
    //print the statics at the top of the source



    for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
            it.storage = Storage_Specifier::STATIC;
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_decl));
            Print_Method_Interface(out,file_name,Code_Type::GLOBAL,it,options);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_decl));
        }
    }
    
    //print the public implementations
    for (auto it: methods){
        if (it.class_access == Class_Access::PUBLIC){
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_impl));
            Print_Method_Implementation(out,file_name,Code_Type::GLOBAL,it,members,methods,false,options,"",export_method);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_impl));
        }
    }
    
    //print the private/static implementations
    for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
            it.storage = Storage_Specifier::STATIC;
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_impl));
            Print_Method_Implementation(out,file_name,Code_Type::GLOBAL,it,members,methods,false,options,"",export_method);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_impl));
        }
    }
❱






//THESE TWO FRONTENDS EXIST BECAUSE OF OF THE GROUP PRINTER.  
//WE ARE ITERATING OVER GROUPS OF METHODS AND NOT JUST METHODS
//SO WE NEED TO MAKE SURE WE PRINT ALL OF THE DECLS IN THE IMPLEMENTATION FIRST
◀public: static▶ void ☀Print_Global_Implementation_DECL_ONLY_Methods2(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members,
                                                                      C_Export_Settings const& options, Object_Export_Method const& export_method)❰



    for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
            it.storage = Storage_Specifier::STATIC;
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_decl));
            Print_Method_Interface(out,file_name,Code_Type::GLOBAL,it,options);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_decl));
        }
    }
❱
◀public: static▶ bool ☀Print_Global_Implementation_DECL_ONLY_Methods2_is_any(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members,
                                                                      C_Export_Settings const& options, Object_Export_Method const& export_method)❰
      for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
          return true;
        }
      }
      return false;
❱
◀public: static▶ void ☀Print_Global_Implementation_IMPL_ONLY_Methods2(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members,
                                                            C_Export_Settings const& options, Object_Export_Method const& export_method)❰


    
    //print the public implementations
    for (auto it: methods){
        if (it.class_access == Class_Access::PUBLIC){
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_impl));
            Print_Method_Implementation(out,file_name,Code_Type::GLOBAL,it,members,methods,false,options,"",export_method);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_impl));
        }
    }
    
    //print the private/static implementations
    for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
            it.storage = Storage_Specifier::STATIC;
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.before_impl));
            Print_Method_Implementation(out,file_name,Code_Type::GLOBAL,it,members,methods,false,options,"",export_method);
            out << as_wstring(Maybe_Divider(options.portion.method_options.dividers.after_impl));
        }
    }
❱
◀public: static▶ bool ☀Print_Global_Implementation_IMPL_ONLY_Methods2_is_any(std::wofstream & out, std::string const& file_name, std::vector<Method_Item> const& methods, std::vector<Data_Member_Item> const& members,
                                                            C_Export_Settings const& options, Object_Export_Method const& export_method)❰
    //print the public implementations
    for (auto it: methods){
        if (it.class_access == Class_Access::PUBLIC){
            return true;
        }
    }
    
    //print the private/static implementations
    for (auto it: methods){
        if (it.class_access != Class_Access::PUBLIC){
            return true;
        }
    }
    return false;
  
❱
//---------------------


◀private: static▶ std::string ☀Maybe_Divider(const Divider_Settings & settings)❰
  std::string str;
  if (settings.print){
    str += "\n\n";
    str += settings.divider;
    str += "\n\n";
  }
  
  return str;
❱













◀private: static▶ void ☀Print_Method_Deceleration(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, Method_Item const& method, C_Export_Settings const& options)❰
    
    Print_Method_Signature(out,file_name,code_type,method,options,Function_Declaration_Location::DECLARATION);
    
	//[attributes]
    auto attributes5 = Method_Attributes_Getter::Get_Method_Section_5(method,options,Function_Declaration_Location::DECLARATION);
    Print_To_Stream(out,attributes5);

    Print_To_Stream_With_Newline(out,";");
    Print_To_Stream_With_Newline(out,"");
❱
◀private: static▶ void ☀Print_Method_Definition(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, Method_Item const& method, std::vector<Data_Member_Item> const& members, std::vector<Method_Item> const& methods, bool const& object_method, C_Export_Settings const& options, std::string implicit_name, Object_Export_Method const& export_method)❰

    Print_Method_Signature(out,file_name,code_type,method,options,Function_Declaration_Location::DEFINITION);
    Print_To_Stream_With_Newline(out,"");
    Print_To_Stream_With_Newline(out,"{");
    
    Method_Body_Token_Printer::Print(out,file_name,method,members,methods,object_method,options,implicit_name,export_method);
    
    Print_To_Stream_With_Newline(out,"");
	auto possible_end_comment = Method_Block_Ender::Possibly_Get_End_Of_Method_Comment(file_name,code_type,method,options);
    Print_To_Stream_With_Newline(out,"} " + possible_end_comment);
    Print_To_Stream_With_Newline(out,"");
❱
◀private: static▶ void ☀Print_Method_Signature(std::wofstream & out, std::string const& file_name, Code_Type const& code_type, Method_Item const& method, C_Export_Settings const& options, Function_Declaration_Location const& location)❰

  //TODO: MOVE OUT
  std::string static_keyword = "static";
  
  
	//[attributes]
    auto attributes1 = Method_Attributes_Getter::Get_Method_Section_1(method,options,location);
    Print_To_Stream(out,attributes1);

     //template params
     Print_Template_Argument_List(out,method.template_arguments);

	//[attributes]
    auto attributes2 = Method_Attributes_Getter::Get_Method_Section_2(method,options,location);
    Print_To_Stream(out,attributes2);

     //static qualifier
     if (method.storage == Storage_Specifier::STATIC){
        Print_To_Stream(out,static_keyword);
        Print_To_Stream(out," ");
     }

	//[attributes]
    auto attributes3 = Method_Attributes_Getter::Get_Method_Section_3(method,options,location);
    Print_To_Stream(out,attributes3);
     
    //print the return type
    Print_To_Stream(out,Return_Type_Str_Getter::Get_C(file_name,method,options));

	//[attributes]
    auto attributes4 = Method_Attributes_Getter::Get_Method_Section_4(method,options,location);
    Print_To_Stream(out,attributes4);
    
    Print_To_Stream(out,Shared_Printer::Derive_Function_Name(file_name,code_type,method,options));
    Print_Function_Argument_List(out,method.function_arguments,options,location);
❱



◀private: static▶ void ☀Print_The_Void_Type(std::wofstream & out, C_Export_Settings const& options)❰
  Function_Result result;
  result.type.value = as_wstring("void");
  auto real_type = Type_Name_Deriver::Derive_Name(result,Source_Language::CPP);
  Print_To_Stream(out,real_type);
❱





//other goodies


◀public: static▶ void ☀Print_Template_Argument_List(std::wofstream & out, std::vector<Template_Argument> const& arguments)❰
❱
◀public: static▶ void ☀Print_Function_Argument_List(std::wofstream & out, std::vector<Function_Argument> const& arguments, C_Export_Settings const& options, Function_Declaration_Location const& location)❰
    Print_To_Stream(out,"(");
    if (arguments.empty()){
        Print_The_Void_Type(out,options);
    }else{
        Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(arguments
         ,[&](Function_Argument arg){
            
           Print_To_Stream(out,Get_Printable_Argument(arg,options,location));
           Print_To_Stream(out,", ");
         }
         ,[&](Function_Argument arg){
           Print_To_Stream(out,Get_Printable_Argument(arg,options,location));
         });
    }
    Print_To_Stream(out,")");
❱

◀public: static▶ std::string ☀Get_Printable_Argument(Function_Argument const& arg, C_Export_Settings const& options, Function_Declaration_Location const& location)❰
  
	if (arg.infinitely_more){
		return "...";
	}
	return Get_Printable_Single_Argument(arg,options,location);
❱

◀public: static▶ std::string ☀Get_Printable_Single_Argument(Function_Argument const& arg, C_Export_Settings const& options, Function_Declaration_Location const& location)❰
  std::string str;
  
	//[attributes]
    auto attributes1 = Method_Attributes_Getter::Get_Argument_Section_1(arg,options,location);
    Append(str,attributes1);

   //whether to put 'const' in front
   if (!arg.is_mutable){Append(str,"const ");}

	//[attributes]
    auto attributes2 = Method_Attributes_Getter::Get_Argument_Section_2(arg,options,location);
    Append(str,attributes2);
   
   //handling the array as part of the type
   auto type = as_string(arg.type.value);
   
   //append type and type name
   auto real_type = Type_Name_Deriver::Derive_Name(arg,Source_Language::CPP);
   Append(str,real_type);
   Append(str," ");
   Append(str,Decide_How_To_Print_After_Type_Specifier(arg,options));

	//[attributes]
	auto attributes3 = Method_Attributes_Getter::Get_Argument_Section_3(arg,options,location);
	Append(str,attributes3);
  
  return str;
❱

◀public: static▶ std::string ☀Decide_How_To_Print_After_Type_Specifier(Function_Argument const& arg, C_Export_Settings const& options)❰
   
   auto stripped_type_detail = Type_Qualifier_Stripper::Strip_To_Base_Unilang_Type(as_string(arg.type.value),arg.is_reference);
   auto derived_name = Identifier_Name_Deriver::Derive_Name(arg,options);
   return Type_Qualifier_Dresser::Add_Qualifers_Back_To_Derived_Language_Argument_Type(stripped_type_detail, derived_name, options);
❱




◀public: static▶ void ☀Print_Function_Argument_Call(std::wofstream & out, std::vector<Function_Argument> const& arguments, C_Export_Settings const& options)❰
        Call_Function_On_All_Elements_Except_Last_Element_Then_Call_Function_On_Last_Element(arguments
             ,[&](Function_Argument arg){
               Print_To_Stream(out,Identifier_Name_Deriver::Derive_Name(arg,options));
               Print_To_Stream(out,", ");
             }
             ,[&](Function_Argument arg){
               Print_To_Stream(out,Identifier_Name_Deriver::Derive_Name(arg,options));
             });
❱



