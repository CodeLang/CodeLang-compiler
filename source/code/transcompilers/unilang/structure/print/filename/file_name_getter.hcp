class


❪"code/transcompilers/unilang/structure/print/export_file_settings/export_file_settings"❫
❪"code/transcompilers/unilang/options/filesystem/general_filesystem_naming"❫
❪"code/utilities/types/strings/transformers/casing/case_modifier"❫
⚯
❪"code/transcompilers/unilang/structure/print/filename/file_name_creator"❫
❪iostream❫
⚞⚟




◀public: static▶ std::string ☀Get(Export_File_Settings const& file_settings, std::string const& raw_file_name, General_Filesystem_Naming const& naming_settings)❰

    switch (file_settings.code){
        case Code_Type::GLOBAL:        return Get_From_Code_Type(file_settings,raw_file_name,naming_settings,naming_settings.suffix.global);
        case Code_Type::SUM_TYPE:      return Get_From_Code_Type(file_settings,raw_file_name,naming_settings,naming_settings.suffix.sum);
        case Code_Type::PRODUCT_TYPE:  return Get_From_Code_Type(file_settings,raw_file_name,naming_settings,naming_settings.suffix.product);
    }
    
    return Print_Error_Message_And_Return_Nothing("invalid code type");
❱

◀private: static▶ std::string ☀Get_From_Code_Type(Export_File_Settings const& file_settings, std::string const& raw_file_name, General_Filesystem_Naming const& naming_settings, Filetype_Suffix_Settings const& suffix_settings)❰

    switch (file_settings.special){
        case Special_File_Type::NORMAL:       return Get_From_Special_File_Type(file_settings,raw_file_name,naming_settings,suffix_settings.normal);
        case Special_File_Type::TEST:         return Get_From_Special_File_Type(file_settings,raw_file_name,naming_settings,suffix_settings.test);
        case Special_File_Type::CONSTRAINT:   return Get_From_Special_File_Type(file_settings,raw_file_name,naming_settings,suffix_settings.constraint);
        case Special_File_Type::SERIALIZE:    return Get_From_Special_File_Type(file_settings,raw_file_name,naming_settings,suffix_settings.serialize);
    }
    
    return Print_Error_Message_And_Return_Nothing("invalid special type");
❱

◀private: static▶ std::string ☀Get_From_Special_File_Type(Export_File_Settings const& file_settings, std::string const& raw_file_name, General_Filesystem_Naming const& naming_settings, Special_Filetype_Suffix_Settings const& suffix_settings)❰

    switch (file_settings.file){
        case File_Type::INTERFACE:                    return File_Name_Creator::Create_Header_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.interface);
        case File_Type::IMPLEMENTATION:               return File_Name_Creator::Create_Source_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.implementation);
        case File_Type::DATA:                         return File_Name_Creator::Create_Header_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.data);
        case File_Type::DATA_AND_INTERFACE:           return File_Name_Creator::Create_Header_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.data_and_interface);
        case File_Type::INTERFACE_AND_IMPLEMENTATION: return File_Name_Creator::Create_Header_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.interface_and_implementation);
        case File_Type::ALL:                          return File_Name_Creator::Create_Header_Name(raw_file_name,naming_settings,file_settings.language,suffix_settings.all);
    }
    
    return Print_Error_Message_And_Return_Nothing("invalid file type");
❱



◀private: static▶ std::string ☀Print_Error_Message_And_Return_Nothing(std::string const& error_message)❰
    std::cerr << error_message << std::endl;
    return "";
❱
