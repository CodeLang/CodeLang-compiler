class
❪"code/transcompilers/unilang/structure/sections/import/import_item"❫
⚯

⚞⚟

◀public:

    //all of the imported interface and implementation statements
    //interface dependencies refer to header includes
    //implementation dependencies refer to source includes
    std::vector<Import_Item> interface_dependencies;
    std::vector<Import_Item> implementation_dependencies;
    
    //in a perfect world, I'd like a unit test to not involve any additional test dependencies.
    //why? because everything in the interface of a function/method would have to already be included at some point in the interface/implementation dependencies
    //the interface and implementation dependencies are automatically considered dependneices of the test, because without them, we couldn't compile.
    //the base headers are traversed, and the tree is automcatically a chunk of dependencies we would copy over to the test environment.  So the only time I could
    //see additional test depenencies needed, is for integration tests.  Type A is used to produce type B which is given to C under test.  So Type A is an additional
    //dependency.  type B is already derived based on the interface depenencies, as it must be making up the methods being tested.
    std::vector<Import_Item> additional_test_dependencies;

▶
