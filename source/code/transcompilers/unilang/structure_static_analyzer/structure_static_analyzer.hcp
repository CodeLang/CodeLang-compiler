class
❪"code/transcompilers/unilang/structure/structure"❫
❪"code/transcompilers/unilang/options/static_analysis/static_analysis_settings"❫
❪"code/transcompilers/unilang/structure_static_analyzer/error_message"❫
⚯
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/converters/lib"❫
❪iostream❫
❪"code/utilities/types/sets/lib"❫
❪"code/transcompilers/unilang/structure-query/closed_box_function_checker"❫
⚞⚟

//need the file markers stored inside the structure
◀public: static▶ void ☀Print_Warnings(Structure const& structure, Static_Analysis_Settings const& settings)❰

    auto error_messages = Get_All_Of_The_Error_Messages(structure,settings);
    Print_Error_Messages(error_messages,settings);
❱

◀private: static▶ void ☀Print_Error_Messages(std::vector<Error_Message> const& error_messages, Static_Analysis_Settings const& settings)❰

    for (auto const& it: error_messages){
        auto str = Full_Error_Message(it,settings);
        std::cout << str << std::endl;
    }
❱


◀private: static▶ std::string ☀Full_Error_Message(Error_Message const& error_message, Static_Analysis_Settings const& settings)❰
    std::string str;
    str += error_message.file_name;
    str += ":";
    str += std::to_string(error_message.location.start.row);
    str += ":";
    str += std::to_string(error_message.location.start.column);
    str += ": ";
    str += error_message.message;
    
    return str;
❱


◀private: static▶ std::vector<Error_Message> ☀Get_All_Of_The_Error_Messages(Structure const& structure, Static_Analysis_Settings const& settings)❰
    std::vector<Error_Message> error_messages;
    
    Print_Warnings_About_Meta_Section(error_messages,structure,settings);
    Print_Warnings_About_Import_Section(error_messages,structure,settings);
    Print_Warnings_About_Method_Section(error_messages,structure,settings);
    Print_Warnings_About_Data_Member_Section(error_messages,structure,settings);
    
    Get_Warnings_About_Measurements(error_messages,structure,settings);
    
    //warn if the identifier indicates there should probably be a length but no length is provided
    //certain words can tip this off: length, distance, weight, etc
    
    return error_messages;
❱

◀private: static▶ void ☀Get_Warnings_About_Measurements(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
    
    Warn_About_Missing_Measurements(error_messages,structure,settings);
❱

◀private: static▶ void ☀Warn_About_Missing_Measurements(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
    
    for (auto const& it: structure.data_members.data_members){
        auto identifier = as_string(it.name.value);
        auto units = as_string(it.units.value);
        auto location = it.name.location;
        Add_Warning_If_Relevant_Identifier_Is_Missing_Units(error_messages,location,structure,settings,identifier,units);
    }
    
    for (auto const& it: structure.methods.methods){
        for (auto const& j: it.template_arguments){
            auto identifier = as_string(j.identifier.value);
            auto units = as_string(j.units.value);
            auto location = j.identifier.location;
            Add_Warning_If_Relevant_Identifier_Is_Missing_Units(error_messages,location,structure,settings,identifier,units);
        }
        for (auto const& j: it.function_arguments){
            auto identifier = as_string(j.identifier.value);
            auto units = as_string(j.units.value);
            auto location = j.identifier.location;
            Add_Warning_If_Relevant_Identifier_Is_Missing_Units(error_messages,location,structure,settings,identifier,units);
        }
        for (auto const& j: it.return_results){
            auto identifier = as_string(j.identifier.value);
            auto units = as_string(j.units.value);
            auto location = j.identifier.location;
            Add_Warning_If_Relevant_Identifier_Is_Missing_Units(error_messages,location,structure,settings,identifier,units);
        }
    }
    
❱

◀private: static▶ void ☀Add_Warning_If_Relevant_Identifier_Is_Missing_Units(std::vector<Error_Message> & error_messages, File_Range_Location const& location, Structure const& structure, Static_Analysis_Settings const& settings, std::string const& identifier, std::string const& units)❰
        if (Exists_In_Set(settings.measurements.measurements_that_should_have_units,identifier)){
            if (units.empty()){
                std::string error_message = identifier;
                error_message += " has no units, and it probably should";
                Add_Error(error_messages,location,structure,error_message);
            }
        }
❱

◀private: static▶ void ☀Print_Warnings_About_Meta_Section(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
    //Spell_Check_Brief_Description();
    //Spell_Check_Detailed_Description();
    //Spell_Check_Group_Names();
    //Check_For_Valid_Author_Name();
    //Spell_Check_Bugs();
    //Spell_Check_Warnings();

    //make certain token values be mandatory
    Add_Error_Based_On_Expression_And_Desire(structure.meta.brief_description.value.empty(),settings.warn_about_empty_brief_description,error_messages,structure,"Missing brief description");
    Add_Error_Based_On_Expression_And_Desire(structure.meta.detailed_description.value.empty(),settings.warn_about_empty_detailed_description,error_messages,structure,"Missing detailed description");
    Add_Error_Based_On_Expression_And_Desire(structure.meta.group_names.empty(),settings.warn_about_no_group_names,error_messages,structure,"No group names provided");
    
    //I've been accidentally new lining comments after a comma
    //unilang expects each sentence to be a line.
    //i might change that later, but here is a warning I might want regardless
    Add_Error_Based_On_Expression_And_Desire(A_Line_Ends_With_A_Comma(structure.meta.brief_description.value),settings.warn_about_empty_brief_description,error_messages,structure,"brief line ends with a comma");
    Add_Error_Based_On_Expression_And_Desire(A_Line_Ends_With_A_Comma(structure.meta.detailed_description.value),settings.warn_about_empty_detailed_description,error_messages,structure,"detail line ends with a comma");
    
    
❱
◀private: static▶ void ☀Print_Warnings_About_Import_Section(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
    //Spell_Check_Brief_Import_Comment();
    for (auto it: structure.imports.interface_dependencies){
        Add_Error_Based_On_Expression_And_Desire(it.comment.value.empty(),settings.warn_about_no_interface_import_comment,error_messages,structure,"Missing interface import comment");
    }
    for (auto it: structure.imports.implementation_dependencies){
        Add_Error_Based_On_Expression_And_Desire(it.comment.value.empty(),settings.warn_about_no_implementation_import_comment,error_messages,structure,"Missing implementation import comment");
    }
❱
◀private: static▶ void ☀Print_Warnings_About_Method_Section(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
    //Spell_Check_Function_Name();
    //Spell_Check_Function_Brief_Description();
    //Spell_Check_Function_Detailed_Brief_Description();
    //Spell_Check_Function_Template_Argument_Comment();
    //Spell_Check_Function_Argument_Comment();
    //Spell_Check_Function_Result_Comment();
    //Spell_Check_Function_Except_Comment();


    //check to see if we accidentally made a closed box function
    if (settings.sections.method.check_for_closed_box){
        for (auto it: structure.methods.methods){
            if (Closed_Box_Function_Checker::Is_Closed_Box(it)){
                std::string error = "closed-box method detected: " + as_string(it.names.original_function_name.value);
                
                //TODO: SET
                File_Range_Location location;
                Add_Error(error_messages,location,structure,error);
            }
        }
    }
❱
◀private: static▶ void ☀Print_Warnings_About_Data_Member_Section(std::vector<Error_Message> & error_messages, Structure const& structure, Static_Analysis_Settings const& settings)❰
//Brief
//Detailed
❱


◀private: static▶ bool ☀A_Line_Ends_With_A_Comma(std::wstring str)❰

    auto parts = Split_Into_Parts_From_Delimiter(as_string(str),'\n');
    for (auto & it: parts){
        trim(it);
        if (it.back() == ','){
            return true;
        }
    }
    return false;
❱

//the expression needs to be true and we need to have a desire to print the error, else dont
◀private: static▶ void ☀Add_Error_Based_On_Expression_And_Desire(bool expression, bool desire, std::vector<Error_Message> & error_messages, Structure const& structure, std::string const& error)❰
    if (expression && desire){
        
        //TODO: SET
        File_Range_Location location;
        Add_Error(error_messages,location,structure,error);
    }
❱

◀private: static▶ void ☀Add_Error(std::vector<Error_Message> & error_messages, File_Range_Location const& location, Structure const& structure, std::string const& error_message)❰
    Error_Message error;
    error.file_name = structure.full_file_path;
    error.location = location;
    error.message = error_message;
    error_messages.push_back(error);
❱