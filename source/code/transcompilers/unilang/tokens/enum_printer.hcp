class
❪"all_ast_markers"❫
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
⚯

⚞⚟

◀public: static▶ void ☀Create_Enum_Files(All_Ast_Markers const& all_ast_markers,std::string output_directory) ❰

  //root
  Create_Token_Group_Enum_Header(all_ast_markers.root,all_ast_markers.body_root,output_directory);
  Create_Token_Group_Enum_Source(all_ast_markers.root,all_ast_markers.body_root,output_directory);

  //leaves
  Create_Token_Name_Enum_Header(all_ast_markers.root,all_ast_markers.body_root,output_directory);
  Create_Token_Name_Enum_Source(all_ast_markers.root,all_ast_markers.body_root,output_directory);
❱


◀private: static▶ void ☀Create_Token_Group_Enum_Header(Ast_Markers const& root, Ast_Markers const& body_root,std::string output_directory) ❰
    
    std::ofstream out(output_directory + "/token_group.hpp");
    Print_To_Stream_With_Newline(out,"#pragma once");
    Print_To_Stream_With_Newline(out,"#include <string>");
    Print_To_Stream_With_Newline(out,"//a conceptual category that is applied across individual tokens.");
    
    Print_Token_Decl(out,root.groups);
    Print_Token_Decl(out,body_root.groups);
    
    Print_To_Stream_With_Newline(out,"//eventually add:");
    Print_To_Stream_With_Newline(out,"//enum class Contract_Condition_Token_Group");
❱


◀private: static▶ void ☀Create_Token_Group_Enum_Source(Ast_Markers const& root, Ast_Markers const& body_root,std::string output_directory) ❰
    std::ofstream out(output_directory + "/token_group.cpp");
    Print_To_Stream_With_Newline(out,"#include \"token_group.hpp\"");
    Print_Token_Def(out,root.groups);
    Print_Token_Def(out,body_root.groups);
❱




◀private: static▶ void ☀Create_Token_Name_Enum_Header(Ast_Markers const& root, Ast_Markers const& body_root,std::string output_directory) ❰
    
    //build up specific info for tokens
    auto file_name = output_directory + "/token_name";
    std::vector<Enum> enums;
    enums.emplace_back(root.leaves);
    enums.emplace_back(body_root.leaves);
    
    //generic enum creator
    Create_Enums_Header(file_name,enums);
❱


◀private: static▶ void ☀Create_Token_Name_Enum_Source(Ast_Markers const& root, Ast_Markers const& body_root,std::string output_directory) ❰
    std::ofstream out(output_directory + "/token_name.cpp");
    Print_To_Stream_With_Newline(out,"#include \"code/transcompilers/unilang/tokens/token_name.hpp\"");
    Print_Token_Def(out,root.leaves);
    Print_Token_Def(out,body_root.leaves);
❱







//pure enum goodness
◀private: static▶ void ☀Create_Enums_Header(std::string const& output_filename, std::vector<Enum> const& enums)❰
    std::ofstream out(output_filename + ".hpp");
    Print_To_Stream_With_Newline(out,"#pragma once");
    Print_To_Stream_With_Newline(out,"#include <string>");
    for (auto const& e: enums){
        Print_Token_Decl(out,e);
    }
❱
◀private: static▶ void ☀Create_Enums_Source(std::string const& output_filename, std::vector<Enum> const& enums)❰
    std::ofstream out(output_filename + ".cpp");
    Print_To_Stream(out,"#include \"");
    Print_To_Stream(out,output_filename);
    Print_To_Stream(out,".hpp");
    Print_To_Stream_With_Newline(out,"\"");
    
    for (auto const& e: enums){
        Print_Token_Decl(out,e);
    }
❱




◀private: static▶ void ☀Print_Token_Decl(std::ofstream & out, Enum e)❰

    Print_To_Stream_With_Newline(out,"enum class " + Make_Capital_And_Underscored_In_User_Type_Format(e.name) + "{");
    for (auto const& it: e.values){
        Print_To_Stream_With_Newline(out,As_All_Capital_Letters_With_Spaces_As_Underscores(it) + ",");
    }
    Print_To_Stream_With_Newline(out,"};");
    Print_To_Stream_With_Newline(out,"std::string as_string(" + Make_Capital_And_Underscored_In_User_Type_Format(e.name) + " t);");
❱
◀private: static▶ void ☀Print_Token_Def(std::ofstream & out, Enum e)❰

    Print_To_Stream_With_Newline(out,"std::string as_string(" + Make_Capital_And_Underscored_In_User_Type_Format(e.name) + " t){");
    Print_To_Stream_With_Newline(out,"switch (t){");
    for (auto const& it: e.values){
        Print_To_Stream_With_Newline(out,"case " + Make_Capital_And_Underscored_In_User_Type_Format(e.name) + "::" + As_All_Capital_Letters_With_Spaces_As_Underscores(it) + ": return \"" + As_All_Capital_Letters_With_Spaces_As_Underscores(it) + "\";");
    }
    Print_To_Stream_With_Newline(out,"}");
    Print_To_Stream_With_Newline(out,"return \"unknown\";");
    Print_To_Stream_With_Newline(out,"}");
❱