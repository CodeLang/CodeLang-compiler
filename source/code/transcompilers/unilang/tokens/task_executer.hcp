class
❪"all_ast_markers_getter"❫
❪"enum_printer"❫
⚯
⚞⚟
◀public: static▶ void ☀Execute_Needed_Tasks(std::string output_directory) ❰

   //generation of other dependency files
   Generate_Other_Files(output_directory);
❱

◀private: static▶ void ☀Generate_Other_Files(std::string output_directory) ❰

	auto all_ast_markers = All_Ast_Markers_Getter::Get();

	//create the enum files
	Enum_Printer::Create_Enum_Files(all_ast_markers,output_directory);

	//create the global map of tokens
	Create_Global_Token_Table_Header(output_directory);
	Create_Global_Token_Table_Source(output_directory);
❱





//TODO(thickey):
//deprecate these two files.  
//there is no reason to generate this table
//have a single function get this table.  allow for func decomp
◀private: static▶ void ☀Create_Global_Token_Table_Source(std::string output_directory) ❰

std::ofstream outfile(output_directory + "/global_token_table.cpp");
outfile << "#include \"global_token_table.hpp\"\n";
❱

◀private: static▶ void ☀Create_Global_Token_Table_Header(std::string output_directory) ❰
std::ofstream outfile(output_directory + "/global_token_table.hpp");
outfile << "#pragma once\n";
outfile << "#include \"code/transcompilers/unilang/tokens/generic_token.hpp\"\n";
outfile << "#include \"code/transcompilers/unilang/tokens/token_name.hpp\"\n";
outfile << "#include \"code/transcompilers/unilang/tokens/token_group.hpp\"\n";
outfile << "#include <vector>\n";
❱