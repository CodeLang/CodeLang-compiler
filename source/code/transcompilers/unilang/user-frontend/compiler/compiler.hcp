class


❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/program_input"❫
⚯
❪iostream❫
❪"code/transcompilers/unilang/trevor_frontend_compiler/trevor_exporter"❫
❪"code/transcompilers/unilang/trevor_frontend_compiler/trevor_contributors_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/f2si_exporter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/f2si_contributors_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_exporter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_contributors_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_hidl_exporter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_hidl_options_getter"❫
❪"code/transcompilers/unilang/options/bazel/language_to_build_object"❫
❪"code/transcompilers/unilang/user-frontend/language_guesser"❫
❪"code/transcompilers/unilang/compiler-frontends/bazel/bazel_rule_exporter"❫
⚞⚟


//NOTE: CONSIDER ADDING LANGUAGE STANDARDS AS PART OF THE LANGUAGE
//should we add dialect for this instead?  Some languages just won't have a dialect (which is fine)
//c language standards to support: 
//‘c90’
//‘c89’
//‘iso9899:1990’
//‘iso9899:199409’
//‘c99’
//‘iso9899:1999’
//‘c11’
//‘iso9899:2011’
//‘gnu90’
//‘gnu89’
//‘gnu99’
//‘gnu11’

//c++ language standards to support
//‘c++98’
//‘c++03’
//‘gnu++98’
//‘gnu++03’
//‘c++11’
//‘gnu++11’
//‘c++14’
//‘gnu++14’
//‘c++1z’
//‘gnu++1z’

//other languages and language standards...




//exporter = often a company, organization, or a person of interest.
//*it's a collection of configurations on how the code should be exported for a particular project, or set of projects.

//language = what language the exporter should export to
//this doesn't just imply other language code.  Maybe you want to print to UML, maybe you want to print user docs.
//language options are decided and supported by the exporter.  The exporter has no obligation to support anything it doesn't want to

//style = variations to take on the exported language.  For example,
//f2si has a really bad "component design".  However, they are slowly starting to realize how bad it is, and I've been allowed to turn other
//code into our "data structure design".  (Data structure design is bad name for it, but it is normal OO C design).  
//So these are both styles that I can apply on the same UniLang code.
//Hopefully I can start transitioning the code from the bad design to the good design assuming we stay in business.
◀public: static▶ void ☀Compile(Code_Graph const& code_graph, Program_Input const& input)❰
	
	auto unit = Decide_Exporter_Settings(input);
    
    if (input.options.user_chosen_export_settings.language == "c"){
    }
    else if(input.options.user_chosen_export_settings.language == "cpp"){
        std::cout << "compiling cpp: " << code_graph.structure << std::endl;
    }
    else if(input.options.user_chosen_export_settings.language == "csharp"){
    }
    else if(input.options.user_chosen_export_settings.language == "d"){
    }
    else if(input.options.user_chosen_export_settings.language == "rust"){
    }
    else if(input.options.user_chosen_export_settings.language == "hidl"){
        
        //get settings and call
        std::cout << "compiling hidl: " << code_graph.structure << std::endl;
        unit.settings.foreign_language.hidl = Uber_Hidl_Options_Getter::Convert_Style_To_Options_Config("Normal","normal");
        unit.contributors = {};
        Uber_Hidl_Exporter::Export(code_graph.structure,unit.contributors,unit.settings.foreign_language.hidl,true);
    }
    else if(input.options.user_chosen_export_settings.language == "protobuf"){
    }
    else if(input.options.user_chosen_export_settings.language == "plant_uml"){
    }
    else if(input.options.user_chosen_export_settings.language == "call_graph"){
    }
    else if(input.options.user_chosen_export_settings.language == "html_table"){
    }
    else if(input.options.user_chosen_export_settings.language == "treesheets"){
    }
❱

◀public: static▶ void ☀Compile(std::vector<Code_Graph> const& code_graphs, Program_Input const& input)❰
    
    auto unit = Decide_Exporter_Settings(input);
    
    std::cout << "compiling BUILD" << std::endl;
    //unit.settings.foreign_language.bazel =
    unit.contributors = {};
    Bazel_Rule_Exporter::Export(code_graphs);
❱

◀public: static▶ Compile_Unit ☀Decide_Exporter_Settings(Program_Input const& input)❰

    //TODO: lookup by data member (need reflection)
    if (input.options.user_chosen_export_settings.exporter == "uber"){
        return input.settings.compiler_settings.uber;
    }
    else if (input.options.user_chosen_export_settings.exporter == "f2si"){
        return input.settings.compiler_settings.f2si;
    }
    else if (input.options.user_chosen_export_settings.exporter == "trevor"){
        return input.settings.compiler_settings.trevor;
    }
    
    std::cerr << "invalid exporter" << std::endl;
    return input.settings.compiler_settings.trevor;
❱
