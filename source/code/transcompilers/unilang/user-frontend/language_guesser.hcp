class
❪string❫
❪vector❫
❪"code/transcompilers/unilang/structure/model/structure"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
⚯

⚞⚟


//if you didn't provide which languages to go to, that's fine.
//we'll figure out which languages based on some kind of context.
//this way we can run a single shell command that does everything,
//without having to worry about about any complicated cli, or big config files.  
//don't get me wrong, you can still override all the default deduction through those other methods.
//but usually I'm not jumping around to too many repos, so I can just specify a context and allow these helpful deductions.

//TODO(thickey): pretty much all the languages this impl chooses,
//is based on the context of the company/repo I'm working in.
//we need configs for that context.  context being like company_name or something.
//we can probably leverage or mirror the --exporter property.

//TODO(thickey): we may want to do a language bundle pack.  
//i.e. cpp,cpp_test,cpp_benchmark, etc are all in the cpp_full_pack.

//TODO(thickey): these languages strings should be enums
//same with --exporter.
◀public: static▶ std::vector<std::string> ☀Guess(Structure const& structure)❰

    std::vector<std::string> langs;
    
    //eh, its just data.
    //do you want to do something a bit more language agnostic?
    //some kind of IDL?
    if (structure.methods.methods.empty()){
        
        langs.emplace_back("hidl");
    }
    
    //its got methods?  ok, its probably like actual code then.
    //what language do I use these days?  let's transcompile to that.
    else {
        langs.emplace_back("cpp");
        langs.emplace_back("cpp_test");
        langs.emplace_back("cpp_benchmark");
        
        // we may want to export temporal data so the generation remains deterministic
        // yeah, I woke up the day after new years and saw that unilang was generating different code.
        // sure enough this had to do with the date in a copyright comment.
        langs.emplace_back("date");
    }
    
    return langs;
❱

◀public: static▶ std::vector<std::string> ☀Guess(std::vector<Code_Graph> const& code_graphs)❰

    std::vector<std::string> langs;

    //do we need to generate any files for the collective group of unilang files?
    //we do this for the build files.
    langs.emplace_back("bazel");

    //we may also want to do this for collective documentation
    //TODO(thickey): ...

    return langs;
❱