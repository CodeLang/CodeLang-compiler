class
❪"code/transcompilers/unilang/main/program_options/program_options"❫
❪"code/transcompilers/unilang/user-frontend/command_line_arguments/dependency_paths"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings"❫
❪"code/transcompilers/unilang/main/composed_program_options/composed_program_options"❫
❪"code/transcompilers/unilang/user-frontend/graph_adjuster/code_graph_adjuster"❫
❪"code/transcompilers/unilang/user-frontend/fully_read_file"❫
❪"code/transcompilers/unilang/main/program_input"❫
⚯
❪"code/transcompilers/unilang/validators/file_name/filename_validator"❫
❪"code/transcompilers/unilang/parser/parser"❫
❪"code/transcompilers/unilang/user-frontend/compiler/compiler"❫
❪"code/transcompilers/unilang/user-frontend/exception_handler"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/strings/transformers/stripping/lib"❫
❪"code/transcompilers/unilang/structure_static_analyzer/structure_static_analyzer"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/transcompilers/unilang/user-frontend/language_guesser"❫

❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_hidl_options_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/bazel_options_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/f2si_contributors_getter"❫
❪"code/transcompilers/unilang/f2si_frontend_compiler/uber_contributors_getter"❫
⚞⚟

◀public: static▶ void ☀Transcompile_Each_Of_The_Files_According_To_Program_Options(Program_Input input)❰
    
    
    //MASS SET ALL OF THE SETTINGS
    Set_All_Settings(input);
    
    //decide all of the files we intend to transcompile
    //update/adjust existing files provided by the user
	input.options.input_files = Decide_What_Files_To_Transcompile(input.options.input_files);
    
    if (input.options.input_files.empty()){
        Exit_With_Error("no files to process");
    }
    
    //set default exporter if not chosen
    std::string default_exporter = "uber";
    if (input.options.user_chosen_export_settings.exporter.empty()){
        input.options.user_chosen_export_settings.exporter = default_exporter;
    }
    
    //parse all of the files into data structures
    auto graphs = Turn_Files_Into_Code_Graphs(input);
    Create_All_The_Files(graphs,input);
❱

◀public: static▶ void ☀Set_All_Settings(Program_Input & input)❰

    input.settings.compiler_settings.uber.contributors = Uber_Contributors_Getter::Get();
    input.settings.compiler_settings.f2si.contributors = F2si_Contributors_Getter::Get();
    //input.settings.compiler_settings.trevor.contributors = Trevor_Contributors_Getter::Get();
    
    input.settings.compiler_settings.uber.settings.foreign_language.hidl = Uber_Hidl_Options_Getter::Get();
    input.settings.compiler_settings.f2si.settings.foreign_language.hidl = Uber_Hidl_Options_Getter::Get();
    //input.settings.compiler_settings.trevor.settings.foreign_language.hidl = Uber_Hidl_Options_Getter::Get();

    input.settings.compiler_settings.uber.settings.foreign_language.bazel_build = Bazel_Options_Getter::Get();
    input.settings.compiler_settings.f2si.settings.foreign_language.bazel_build = Bazel_Options_Getter::Get();
    //input.settings.compiler_settings.trevor.settings.foreign_language.bazel_build = Bazel_Options_Getter::Get();
❱


◀private: static▶ void ☀Create_All_The_Files(std::vector<Code_Graph> const& graphs, Program_Input const& input)❰

    //Decide where to place exports of the file
    auto output_directory = Decide_Output_Directory();
    Create_Path_And_Temporarily_Move_To_It_To_Call_Function(output_directory,[&](){
    
        //create new files from all the data structures
        Transcompile_Each_Code_Graph(graphs,input);
        
        //create additional files with all of the data structures (usually build files / other meta)
        Transcompile_Extra_Files(graphs,input);
    });
❱

◀private: static▶ std::vector<std::string> ☀Decide_What_Files_To_Transcompile(std::vector<std::string> input_files)❰
    
    //if no files were passed, get all of the files in the directory
    //TODO: file extension is a setting
    if (input_files.empty()){
        auto files = Get_Everything_At_Path_With_The_File_Extension("UniLang");
        input_files = files;
    }
    return input_files;
❱

◀private: static▶ std::vector<Code_Graph> ☀Turn_Files_Into_Code_Graphs(Program_Input const& input)❰
    std::vector<Code_Graph> graphs;
    for (auto const& it: input.options.input_files){
        auto g = Parse_File(it,input.settings,input.options);
        graphs.emplace_back(g);
    }
    return graphs;
❱

◀private: static▶ Code_Graph ☀Parse_File(std::string const& path_to_file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //derive filename from the path
    auto file_name = Get_File_Name_From_File_Path(path_to_file);
    
    //check if something is initially wrong with the path and filename sent to the compiler
    //might throw..
    Filename_Validator::Validate_Input_File(settings.file_validation,file_name,settings.parser.input_files.expected_file_extension);
    
    //read in the entire file first so that we have it in memory.
    //This is useful for testing too, where we can pass test strings into the frontend
    //without having to actually create files in unit tests.
    Fully_Read_File file(file_name);
    
    //I would like the backend compiler to return something like 
    //full strings for the files one day.  We would want to write to
    //disk at the very very end.
    auto code_graph = Front_End(file,settings,program_options);
    return code_graph;
❱

◀private: static▶ Code_Graph ☀Front_End(Fully_Read_File const& file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //Apart from just parsing the file that needs compiled, 
    //we will also need to compile all of the file's dependencies and store them in a graph data structure
    //create a graph of these classes to handle the dependencies.
    //might throw...
    auto code_graph = Parser::Parse(file,program_options.dependency_paths,settings.parser);
    
    //before compiling the source file,
    //make the necessary code graph transformations automatically
    //this will include actions like:  
    // - specific transformations from settings
    // - inlining structures
    // - deriving import relations
    Code_Graph_Adjuster::Adjust(code_graph,settings,program_options);
    
    Structure_Static_Analyzer::Print_Warnings(code_graph.structure,settings.static_analysis);
    
    return code_graph;
❱

◀private: static▶ std::string ☀Decide_Output_Directory()❰

    //root_where_unilang_files_are_for_mirrored_repos_on_other_machines
    std::string root_unilang = "company";
    
    //we want to store UniLang files in the repo, but we don't want to export their generation into the same repo
    //(that will just make the repo dirty and I don't want to accidentally push up generated files)
    //instead, we want to export them to a mirroring directory on the desktop before also transferring them to where they need to go
    auto path = Full_Path_To_Desktop() + Get_Path_Of_Directory_After_Found_Folder(root_unilang);
    return path;
❱

◀private: static▶ void ☀Transcompile_Extra_Files(std::vector<Code_Graph> const& code_graphs, Program_Input input)❰

    //set default language if not chosen
    if (input.options.user_chosen_export_settings.language.empty()){
        
        //todo: derive from structure
        //hard-coded in the structure from the user or from a prior stage
        input.options.user_chosen_export_settings.language = "bazel";
        Compiler::Compile(code_graphs,input);
    }
❱
◀private: static▶ void ☀Transcompile_Each_Code_Graph(std::vector<Code_Graph> const& graphs, Program_Input input)❰
    for (auto const& it: graphs){
        Program_Input artifact_input = input;
        if (artifact_input.options.user_chosen_export_settings.language.empty()){
            artifact_input.options.user_chosen_export_settings.language = Language_Guesser::Guess(it.structure);
        }

        Compiler::Compile(it,artifact_input);
    }
❱
