class

❪"code/transcompilers/unilang/main/program_options/program_options"❫
❪"code/transcompilers/unilang/user-frontend/command_line_arguments/dependency_paths"❫
❪"code/transcompilers/unilang/dependency_graph_creator/code_graph"❫
❪"code/transcompilers/unilang/main/root_settings/root_settings"❫
❪"code/transcompilers/unilang/main/composed_program_options/composed_program_options"❫
❪"code/transcompilers/unilang/user-frontend/graph_adjuster/code_graph_adjuster"❫
❪"code/transcompilers/unilang/user-frontend/fully_read_file"❫
⚯
❪"code/transcompilers/unilang/validators/file_name/filename_validator"❫
❪"code/transcompilers/unilang/parser/parser"❫
❪"code/transcompilers/unilang/user-frontend/compiler/compiler"❫
❪"code/transcompilers/unilang/user-frontend/exception_handler"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/types/strings/transformers/stripping/lib"❫
❪"code/transcompilers/unilang/structure_static_analyzer/structure_static_analyzer"❫
❪"code/utilities/filesystem/files/getting/lib"❫
⚞⚟

◀public: static▶ void ☀Transcompile_Each_Of_The_Files_According_To_Program_Options(Root_Settings const& settings, Composed_Program_Options const& program_options, std::vector<std::string> input_files)❰
    
    //decide all of the files we intend to transcompile
	input_files = Decide_What_Files_To_Transcompile(input_files);
    
    //parse all of the files into data structures
    auto graphs = Turn_Files_Into_Code_Graphs(input_files,settings,program_options);
    
    //create new files from all the data structures
    Transcompile_Code_Graphs(graphs,program_options);
    
    //create additional files with all of the data structures (usually build files / other meta)
    Process_All_Graphs_Transcompiled(graphs,settings,program_options);
❱

◀private: static▶ std::vector<std::string> ☀Decide_What_Files_To_Transcompile(std::vector<std::string> input_files)❰
    
    //if no files were passed, get all of the files in the directory
    //TODO: file extension is a setting
    if (input_files.empty()){
        auto files = Get_Everything_At_Path_With_The_File_Extension("UniLang",Current_Path());
        input_files = files;
    }
    return input_files;
❱

◀private: static▶ std::vector<Code_Graph> ☀Turn_Files_Into_Code_Graphs(std::vector<std::string> const& input_files, Root_Settings const& settings, Composed_Program_Options const& program_options)❰
    std::vector<Code_Graph> graphs;
    for (auto const& it: input_files){
        auto g = Parse_File(it,settings,program_options);
        graphs.emplace_back(g);
    }
    return graphs;
❱

◀private: static▶ Code_Graph ☀Parse_File(std::string const& path_to_file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //derive filename from the path
    auto file_name = Get_File_Name_From_File_Path(path_to_file);
    
    //check if something is initially wrong with the path and filename sent to the compiler
    //might throw..
    Filename_Validator::Validate_Input_File(settings.file_validation,file_name,settings.parser.input_files.expected_file_extension);
    
    //read in the entire file first so that we have it in memory.
    //This is useful for testing too, where we can pass test strings into the frontend
    //without having to actually create files in unit tests.
    Fully_Read_File file(file_name);
    
    //I would like the backend compiler to return something like 
    //full strings for the files one day.  We would want to write to
    //disk at the very very end.
    auto code_graph = Front_End(file,settings,program_options);
    return code_graph;
❱

◀private: static▶ void ☀Transcompile_Code_Graphs(std::vector<Code_Graph> const& graphs, Composed_Program_Options const& program_options)❰
    for (auto const& it: graphs){
        Back_End(it,program_options);
    }
❱

◀private: static▶ Code_Graph ☀Front_End(Fully_Read_File const& file, Root_Settings const& settings, Composed_Program_Options const& program_options)❰

    //Apart from just parsing the file that needs compiled, 
    //we will also need to compile all of the file's dependencies and store them in a graph data structure
    //create a graph of these classes to handle the dependencies.
    //might throw...
    auto code_graph = Parser::Parse(file,program_options.dependency_paths,settings.parser);
    
    //Decide where to place exports of the file
    Decide_Output_Directory(code_graph.structure);
    
    //before compiling the source file,
    //make the necessary code graph transformations automatically
    //this will include actions like:  
    // - specific transformations from settings
    // - inlining structures
    // - deriving import relations
    Code_Graph_Adjuster::Adjust(code_graph,settings,program_options);
    
    Structure_Static_Analyzer::Print_Warnings(code_graph.structure,settings.static_analysis);
    
    return code_graph;
❱

◀private: static▶ void ☀Back_End(Code_Graph code_graph, Composed_Program_Options const& program_options)❰

    
    //compile the code structure into the appropriate source code files
    Create_Path_And_Temporarily_Move_To_It_To_Call_Function(code_graph.structure.output_directory,[&](){
        Compiler::Compile(code_graph,program_options);
    });
❱

◀private: static▶ void ☀Decide_Output_Directory(Structure & structure)❰

    //we want to store UniLang files in the repo, but we don't want to export their generation into the same repo
    //(that will just make the repo dirty and I don't want to accidentally push up generated files)
    //instead, we want to export them to a mirroring directory on the desktop before also transferring them to where they need to go
    auto path = Full_Path_To_Desktop() + Get_Path_Of_Directory_After_Found_Folder("company");
    structure.output_directory = path;
❱

◀private: static▶ void ☀Process_All_Graphs_Transcompiled(std::vector<Code_Graph> const& code_graphs, Root_Settings const& settings, Composed_Program_Options const& program_options)❰
    //todo...
❱
