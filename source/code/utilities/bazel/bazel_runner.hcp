class
❪vector❫
❪string❫
❪iostream❫
❪sstream❫
❪iomanip❫
❪unordered_map❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/random/lib"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/utilities/serialization/protobuf"❫
❪"code/utilities/bazel/build_settings"❫
⚯
⚞⚟


◀public: static▶ std::unordered_map<std::string,tools::protos::SpawnExec> ☀Get_Spawn_Information_As_Cmd_Map(std::string const& bazel_wrapper, Build_Settings const& settings, std::string const& target)❰

    auto spawns = Get_Spawn_Information(bazel_wrapper,settings,target);
    
    //turn the response into a map where the key is the spawn subcommand
    std::unordered_map<std::string,tools::protos::SpawnExec> results;
    for (auto & spawn: spawns){
        
        std::vector<std::string> spawn_cmds;
        for (auto const& cmd: *spawn.mutable_command_args()){
            spawn_cmds.emplace_back(cmd);
        }
        
        auto key = Get_As_Comma_Seperated_String(spawn_cmds);
        results.insert({key,spawn});
    }
    
    return results;
❱
◀public: static▶ std::vector<tools::protos::SpawnExec> ☀Get_Spawn_Information(std::string const& bazel_wrapper, Build_Settings const& settings, std::string const& target)❰

    //clean
    Clean(bazel_wrapper);
    
    //build
    std::string file_name = Random_Tmp_Filename();
    auto command = Get_Create_Spawn_File_Command(bazel_wrapper,settings,target,file_name);
    Execute_Quietly_But_Report_Stderr_And_Exit_When_Nonzero(command);
    
    //extract
    auto spawns = Deserialize_Multiple_From_Json_File<tools::protos::SpawnExec>(file_name);
    return spawns;
❱


◀public: static▶ void ☀Build_Target(std::string const& bazel_wrapper, Build_Settings const& settings, std::string const& target)❰
    auto command = Get_Create_Build_Target_Command(bazel_wrapper,settings,target);
    Execute_Quietly_But_Report_Stderr_And_Exit_When_Nonzero(command);
❱

◀public: static▶ void ☀Clean(std::string const& bazel_wrapper)❰
    auto command = Clean_Command(bazel_wrapper);
    Execute_Quietly_But_Report_Stderr_And_Exit_When_Nonzero(command);
❱






//Cleaning the repository
◀private: static▶ std::string ☀Clean_Command(std::string const& bazel_wrapper) ❰
    std::string command = bazel_wrapper;
    command += " clean";
    return command;
❱


//Doing target builds
◀private: static▶ std::string ☀Get_Create_Build_Target_Command(std::string const& bazel_wrapper, Build_Settings const& settings, std::string const& target) ❰

    if (settings.environment == Run_Environment::LOCAL){
        return Get_Create_Build_Target_Command_Local_Build(bazel_wrapper,target);
    }
    return Get_Create_Build_Target_Command_Remote_Build(bazel_wrapper,target);
❱
◀private: static▶ std::string ☀Get_Create_Build_Target_Command_Local_Build(std::string const& bazel_wrapper, std::string const& target) ❰
    std::string command = bazel_wrapper;
    command += " build ";
    command += target;
    return command;
❱
◀private: static▶ std::string ☀Get_Create_Build_Target_Command_Remote_Build(std::string const& bazel_wrapper, std::string const& target) ❰
    std::string command = bazel_wrapper;
    command += " build ";
    command += target;
    command += " --config=remote --noremote_accept_cached";
    return command;
❱



//Doing target builds while creating an execution log
//command += " --execution_log_binary_file=";
//I had trouble reading in the binary format
◀private: static▶ std::string ☀Get_Create_Spawn_File_Command(std::string const& bazel_wrapper, Build_Settings const& settings, std::string const& target, std::string const& file_name) ❰

    if (settings.environment == Run_Environment::LOCAL){
        return Get_Create_Spawn_File_Command_Local_Build(bazel_wrapper,target,file_name);
    }
    return Get_Create_Spawn_File_Command_Remote_Build(bazel_wrapper,target,file_name);
❱
◀private: static▶ std::string ☀Get_Create_Spawn_File_Command_Local_Build(std::string const& bazel_wrapper, std::string const& target, std::string const& file_name) ❰
    std::string command = bazel_wrapper;
    command += " build ";
    command += target;
    command += " --execution_log_json_file=";
    command += file_name;
    return command;
❱
◀private: static▶ std::string ☀Get_Create_Spawn_File_Command_Remote_Build(std::string const& bazel_wrapper, std::string const& target, std::string const& file_name) ❰
    std::string command = bazel_wrapper;
    command += " build ";
    command += target;
    command += " --config=remote --noremote_accept_cached";
    command += " --execution_log_json_file=";
    command += file_name;
    return command;
❱