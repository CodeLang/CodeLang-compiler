class
❪vector❫
❪string❫
❪iostream❫
❪sstream❫
❪iomanip❫
❪unordered_map❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/shell/lib"❫
❪"code/utilities/random/lib"❫
❪"src/main/protobuf/spawn.pb.h"❫
❪"code/utilities/serialization/protobuf"❫
⚯
⚞⚟

◀public: static▶ std::vector<std::string> ☀Get_Direct_Dependencies(std::string const& bazel_wrapper, std::string const& dep_name)❰

    auto command = Get_Bazel_Direct_Implicit_Dep_Query_Command(bazel_wrapper,dep_name);
    auto results = Get_Each_Line_Of_Shell_Command(command);
    Remove_If(results,[&](std::string s){
        return !Begins_With(s,"@");
    });
    
    for (auto & it: results){
        Remove_Everything_After_Found_Instance(it,"//");
        Remove_First_Char(it);
    }
    
    Sort_And_Remove_Duplicates(results);
    return results;
❱

◀public: static▶ std::vector<tools::protos::SpawnExec> ☀Get_Spawn_Information(std::string const& bazel_wrapper, std::string const& target)❰

    //clean
    Clean(bazel_wrapper);
    
    //build
    std::string file_name = Random_Tmp_Filename();
    auto command = Get_Create_Spawn_File_Command(bazel_wrapper,target,file_name);
    execute_quietly(command);
    
    //extract
    auto spawns = Deserialize_Multiple_From_Json_File<tools::protos::SpawnExec>(file_name);
    return spawns;
❱

◀public: static▶ std::unordered_map<std::string,tools::protos::SpawnExec> ☀Get_Spawn_Information_As_Cmd_Map(std::string const& bazel_wrapper, std::string const& target)❰

    auto spawns = Get_Spawn_Information(bazel_wrapper,target);
    
    std::unordered_map<std::string,tools::protos::SpawnExec> results;
    for (auto & spawn: spawns){
        
        std::vector<std::string> spawn_cmds;
        for (auto const& cmd: *spawn.mutable_command_args()){
            spawn_cmds.emplace_back(cmd);
        }
        
        auto key = Get_As_Comma_Seperated_String(spawn_cmds);
        results.insert({key,spawn});
        std::cout << key << std::endl;
    }
    
    return results;
❱

◀public: static▶ void ☀Clean(std::string const& bazel_wrapper)❰
    auto command = Clean_Command(bazel_wrapper);
    execute_quietly(command);
❱



◀private: static▶ std::string ☀Clean_Command(std::string const& bazel_wrapper) ❰
    std::string command = bazel_wrapper;
    command += " clean";
    return command;
❱

◀private: static▶ std::string ☀Get_Bazel_Direct_Implicit_Dep_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰
    std::string command = bazel_wrapper;
    command += " query 'rdeps(...,@" + dep_name + "//...)' ";
    command += "--implicit_deps ";
    command += "--nohost_deps ";
    command += "--keep_going 2> /dev/null ";
    return command;
❱

◀private: static▶ std::string ☀Get_Bazel_Direct_Implicit_NoDep_Query_Command(std::string const& bazel_wrapper, std::string const& dep_name) ❰
    std::string command = bazel_wrapper;
    command += " query 'deps(@" + dep_name + "//...)' ";
    command += "--noimplicit_deps ";
    command += "--nohost_deps ";
    command += "--keep_going 2> /dev/null ";
    return command;
❱

◀private: static▶ std::string ☀Get_Create_Spawn_File_Command(std::string const& bazel_wrapper, std::string const& target, std::string const& file_name) ❰
    std::string command = bazel_wrapper;
    command += " build ";
    command += target;
    command += " --execution_log_json_file=";
    //command += " --execution_log_binary_file=";
    command += file_name;
    return command;
❱