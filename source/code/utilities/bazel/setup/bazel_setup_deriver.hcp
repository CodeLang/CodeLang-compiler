class
❪iostream❫
❪string❫
❪"code/utilities/bazel/setup/config/bazel_config_deriver"❫
❪"code/utilities/bazel/setup/wrapper/bazel_wrapper_deriver"❫
❪"code/utilities/bazel/setup/bazel_setup"❫
❪"code/utilities/printers/lib"❫
⚯
⚞⚟

◀public: static▶ void ☀Possibly_Derive_Parts_Of_Bazel_Setup(Bazel_Setup & settings, std::string const& path)❰

    //try to derive the correct bazel program if its not known.
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"deriving bazel runner...");
    Bazel_Wrapper_Deriver::Possibly_Derive_Bazel_Runner(settings.bazel_wrapper,path);

    //try to derive the correct bazel configs to use for the environments
    Maybe_Output_And_Flush_With_Newline(settings.verbose,"deriving bazel configs...");
    Bazel_Config_Deriver::Possibly_Derive_Bazel_Config_Settings(settings.config_settings,path);

    Maybe_Output_And_Flush_With_Newline(settings.verbose,"deriving dockerability of build...");
    Bazel_Dockerfile_Deriver::Possibly_Derive_Dockerfile_Settings(settings.docker,path);
❱
