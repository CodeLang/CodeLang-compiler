class
❪iostream❫
❪string❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/bazel/wrapper/bazel_wrapper"❫
⚯
⚞⚟

◀public: static▶ void ☀Possibly_Derive_Bazel_Runner(Bazel_Wrapper & settings)❰
    if (settings.derive){
        settings.program_name = Derive_Program_Name(settings);
    }
❱

◀private: static▶ std::string ☀Derive_Program_Name(Bazel_Wrapper const& settings) ❰
    auto program_name = First_Filename_Found_At_Current_Path(settings.search_derive_programs);
    
    //use global installed bazel
    if (program_name.empty()){
        program_name = settings.default_program_name;
    }
    
    //use the local found bazel wrapper
    else{
        program_name = "./" + program_name;
    }
    
    return program_name;
❱