class


❪vector❫
❪string❫
❪iostream❫
❪"code/utilities/bdf/settings/bdf_settings"❫
⚯
⚞⚟


◀public: static▶ std::string ☀Convert(Bdf_Settings const& settings)❰

    std::string str;
    
    //1
    str += settings.start_font_keyword;
    str += " ";
    str += settings.version;
    str += "\n";
    
    //2
    str += settings.comment_keyword;
    str += " ";
    str += settings.main_font_comment;
    str += "\n";
    
    //3
    str += settings.font_keyword;
    str += " ";
    str += settings.xlfd.divider;
    str += settings.xlfd.foundry;
    str += settings.xlfd.divider;
    str += settings.xlfd.family_name;
    str += settings.xlfd.divider;
    str += settings.xlfd.weight;
    str += settings.xlfd.divider;
    str += settings.xlfd.slant;
    str += settings.xlfd.divider;
    str += settings.xlfd.set_width_name;
    str += settings.xlfd.divider;
    str += settings.xlfd.add_style_name;
    str += settings.xlfd.divider;
    str += std::to_string(settings.xlfd.pixel_size);
    str += settings.xlfd.divider;
    str += std::to_string(settings.xlfd.point_size);
    str += settings.xlfd.divider;
    str += std::to_string(settings.xlfd.resoultion_x);
    str += settings.xlfd.divider;
    str += std::to_string(settings.xlfd.resoultion_y);
    str += settings.xlfd.divider;
    str += settings.xlfd.spacing;
    str += settings.xlfd.divider;
    str += std::to_string(settings.xlfd.average_width);
    str += settings.xlfd.divider;
    str += settings.xlfd.charset_registry;
    str += settings.xlfd.divider;
    str += settings.xlfd.charset_encoding;
    str += "\n";
    
    //4
    str += settings.bdf_size.size_keyword;
    str += " ";
    str += std::to_string(settings.bdf_size.point_size);
    str += " ";
    str += std::to_string(settings.bdf_size.x_resolution);
    str += " ";
    str += std::to_string(settings.bdf_size.y_resolution);
    str += "\n";
    
    //5
    str += settings.font_bounding_box_keyword;
    str += " ";
    str += std::to_string(settings.width);
    str += " ";
    str += std::to_string(settings.height);
    str += " ";
    str += std::to_string(settings.x_displacement);
    str += " ";
    str += std::to_string(settings.y_displacement);
    str += "\n";
    
    //6
    str += settings.start_properties_keyword;
    str += " ";
    str += std::to_string(settings.attributes.size());
    str += "\n";
    
    //7
    for (auto const& it: settings.attributes){
        str += it.first;
        str += " ";
        str += it.second;
        str += "\n";
    }
    
    //8
    str += settings.end_properties_keyword;
    str += "\n";
    
    //9
    str += settings.chars_keyword;
    str += " ";
    str += std::to_string(settings.segments.size());
    str += "\n";
    
    //10
    for (size_t i = 0; i < settings.segments.size(); ++i){
        
        //start
        str += settings.STARTCHAR_keyword;
        str += " ";
        if (settings.derive_name_automatically){
            str += Derived_Name(settings,settings.segments[i].glyph_index);
        }
        else{
            str += settings.segments[i].name;
        }
        str += "\n";
        
        //encoding
        str += settings.ENCODING_keyword;
        str += " ";
        str += std::to_string(settings.segments[i].glyph_index);
        str += "\n";
        
        
        //swidth
        str += settings.SWIDTH_keyword;
        str += " ";
        str += std::to_string(settings.segments[i].s_width_x);
        str += " ";
        str += std::to_string(settings.segments[i].s_width_y);
        str += "\n";
        
        //dwidth
        str += settings.DWIDTH_keyword;
        str += " ";
        str += std::to_string(settings.segments[i].d_width_x);
        str += " ";
        str += std::to_string(settings.segments[i].d_width_y);
        str += "\n";
        
        //bbx
        str += settings.BBX_keyword;
        str += " ";
        str += std::to_string(settings.segments[i].bbx_w);
        str += " ";
        str += std::to_string(settings.segments[i].bb_h);
        str += " ";
        str += std::to_string(settings.segments[i].bbo_x);
        str += " ";
        str += std::to_string(settings.segments[i].bbo_y);
        str += "\n";
        
        //bitmap
        str += settings.BITMAP_keyword;
        str += "\n";
        for (auto const & it: settings.segments[i].hex_encoded_bitmap){
            str += it;
            str += "\n";
        }
        
        //end
        str += settings.ENDCHAR_keyword;
        str += "\n";
        
    }
    
    //11
    str += settings.end_font_keyword;
    str += "\n";
    
    
    
    return str;
❱


◀public: static▶ std::string ☀Derived_Name(Bdf_Settings const& settings, int graph_index)❰
    std::string str;
    str += settings.derived_name_base;
    str += std::to_string(graph_index);
    return str;
❱
