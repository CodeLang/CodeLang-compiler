class
❪string❫
❪vector❫
⚯

⚞⚟

◀
public:

    //a. The word STARTCHAR followed by up to 14 characters (no blanks)
    // of descriptive name of the glyph.
    std::string name = "";
    
    //b. The word ENCODING followed by one of the following forms:
    //i. <n> − the glyph index, that is, a positive integer representing the character code used to
    //access the glyph in X requests, as defined by the encoded character set given by the
    //CHARSET_REGISTRY-CHARSET_ENCODING font properties for XLFD conforming
    //fonts. If these XLFD font properties are not defined, the encoding scheme is font-dependent.
    //ii. −1 <n> − equivalent to form above. This syntax is provided for backward compatibility
    //with previous versions of this specification and is not recommended for use with new
    //fonts.
    //iii. −1 − an unencoded glyph. Some font compilers may discard unencoded glyphs, but, in
    //general, the glyph names may be used by font compilers and X servers to implement
    //dynamic mapping of glyph repertoires to character encodings as seen through the X protocol.
    int glyph_index = 0;
    
    // c. The word SWIDTH followed by the scalable width in x and y of character. Scalable widths
    // are in units of 1/1000th of the size of the character. If the size of the character is p points, the
    // width information must be scaled by p/1000 to get the width of the character in printer’s points.
    // This width information should be considered as a vector indicating the position of the next
    // character’s origin relative to the origin of this character. To convert the scalable width to the
    // width in device pixels, multiply SWIDTH times p/1000 times r/72, where r is the device resolution
    // in pixels per inch. The result is a real number giving the ideal print width in device pixels.
    // The actual device width must of course be an integral number of device pixels and is given
    // in the next entry. The SWIDTH y value should always be zero for a standard X font.
    int s_width_x = 0;
    int s_width_y = 0;
    
    //d. The word DWIDTH followed by the width in x and y of the character in device units. Like the
    //SWIDTH, this width information is a vector indicating the position of the next character’s origin
    //relative to the origin of this character. Note that the DWIDTH of a given ‘‘hand-tuned’’
    //WYSIWYG glyph may deviate slightly from its ideal device-independent width given by
    //SWIDTH in order to improve its typographic characteristics on a display. The DWIDTH y
    //value should always be zero for a standard X font.
    int d_width_x = 0;
    int d_width_y = 0;
    
    //e. The word BBX followed by the width in x (BBw), height in y (BBh), and x and y displacement
    //(BBox, BBoy) of the lower left corner from the origin of the character.
    int bbx_w = 0;
    int bb_h = 0;
    int bbo_x = 0;
    int bbo_y = 0;
    
    //f. The optional word ATTRIBUTES followed by the attributes as 4 hex-encoded characters. The
    //interpretation of these attributes is undefined in this document.
    
    //g. The word BITMAP
    
    //h. h lines of hex-encoded bitmap, padded on the right with zeros to the nearest byte (that is, multiple
    //of 8).
    std::vector<std::string> hex_encoded_bitmap;
    
    //i. The word ENDCHAR.
    

// Example:
// STARTCHAR u10FDF1
// ENCODING 1113585
// SWIDTH 545 0
// DWIDTH 6 0
// BBX 2 9 1 -1
// BITMAP
// C0
// 40
// 40
// 40
// 40
// 40
// 40
// 40
// C0
// ENDCHAR
▶
