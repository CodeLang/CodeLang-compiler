class
❪iostream❫
❪string❫
❪vector❫
❪utility❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/other_language/lib"❫

❪"code/utilities/program/call/process_spawn/process_spawner"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/output/printers/lib"❫
⚯
⚞⚟


◀public: static▶ std::vector<std::string> ☀Get(std::string const& file_name) ❰

    return Use_Existing_Owner_Tool(file_name);
    //TODO: derive in a different way
❱


◀private: static▶ std::vector<std::string> ☀Use_Existing_Owner_Tool(std::string const& file_name) ❰

    std::string command;
    command += "./bazel run tools:get_owners ";
    command += file_name;
    
    auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
    
    if (results.return_code != 0){
        std::vector<std::string> failed;
        std::cout << "failed to get owners" << std::endl;
        return failed;
    }
    
    trim(results.stdout);
    auto result = Split_Into_Parts_From_Comma(Get_Last_Line(results.stdout));
    std::cout << "owners: " << result << std::endl;
    return result;
❱