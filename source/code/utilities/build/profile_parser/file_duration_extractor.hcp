class
❪iostream❫
❪vector❫
❪string❫
❪cmath❫
❪"code/utilities/build/profile_parser/data/duration_file"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/path/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/formats/json/functions/lib"❫
⚯
⚞⚟


◀public: static▶ std::vector<Duration_File> ☀Extract(std::string const& profile_file)❰
    std::vector<Duration_File> results;
    
    auto json = Read_Json_From_File(profile_file);
    
    for (auto it: json["traceEvents"]){
        
        if (it["cat"] == "action processing"){
            
            if (Begins_With(it["name"],"Compiling ")){
                
                Store_Result(results,it);
            }
        }
    }
    
    return results;
❱

◀private: static▶ void ☀Store_Result(std::vector<Duration_File> & results, nlohmann::json const& it)❰

    Duration_File x;
    
    //get the second part of the name which should be the filename
    x.file = Split_By_Spaces(it["name"])[1];
    
    //get the duration. convert microseconds to seconds
    x.duration_s = it["dur"].get<int>() / 1000000;
    
    results.emplace_back(x);
❱