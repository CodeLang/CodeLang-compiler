class
❪iostream❫
❪vector❫
❪string❫
❪cmath❫
❪"code/utilities/shell/process_spawn/process_spawner"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/shell/process_spawn/process_results"❫
⚯
⚞⚟




◀public: static▶ Process_Results ☀Get_Results_Of_Building_Through_Docker_Container()❰
    Set_Path(Bazel_Derived_Root_Of_Repo());
    return Process_Spawner::Execute_And_Get_Back_Results(Build_Everything_With_Docker_Command());
❱
◀public: static▶ Process_Results ☀Get_Results_Of_Building_Repo_As_Is()❰
    Set_Path(Bazel_Derived_Root_Of_Repo());
    return Process_Spawner::Execute_And_Get_Back_Results(Build_Everything_Command());
❱

//robots are going to change and build this repository
//they will need a way to pragmatically check if their changes result in a successful build
◀public: static▶ bool ☀Does_Current_Repo_Build_Through_Docker_Container()❰
    return !Get_Results_Of_Building_Through_Docker_Container().return_code;
❱
◀public: static▶ bool ☀Does_Current_Repo_Build_As_Is()❰
    return !Get_Results_Of_Building_Repo_As_Is().return_code;
❱



//these are scripts on the root of the repo
◀private: static▶ std::string ☀Build_Everything_With_Docker_Command()❰
    return "./docker_build_everything";
❱
◀private: static▶ std::string ☀Build_Everything_Command()❰
    return "./build_everything";
❱