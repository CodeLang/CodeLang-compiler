class
⚯
⚞⚟


◀public: static▶ void ☀Create()❰

    
    //get the default split-tree string version
    auto split_trees = Default_Split_Concept_Trees_Getter::Get_Full_Path_Version();
    
    //convert them to visual trees
    auto visual_trees = Create_Visual_Split_Trees(split_trees);
    
    //TODO find / draw connection paths
    
    
    //draw the trees
    Frame_Elements frames;
    for (auto it: visual_trees){
        frames.types += Render_As_Schema_Tree(it).types;
    }
    
    Convert_To_Image(frames);
    
❱


◀private: static▶ std::vector<Positioned_Buildable_Schema_Faced_Tree> ☀Create_Visual_Split_Trees(Split_String_Trees const& split_trees)❰
    std::vector<Positioned_Buildable_Schema_Faced_Tree> result;
    
    Position moving_pos;
    for (auto it: split_trees.trees){
        auto label_tree = String_Tree_To_Buildable_Schema_Faced_Tree::Convert(it);
        label_tree.pos = moving_pos;
        result.emplace_back(label_tree);
        moving_pos.x += 150;
    }
    
    return result;
❱

◀private: static▶ Frame_Elements ☀Render_As_Schema_Tree(Positioned_Buildable_Schema_Faced_Tree label_tree)❰


    
    //convert the label tree to drawable frame elements
    Frame_Elements elements;
    Pc_Input_State pc_input;
    auto unilang_font_lookup = Unilang_Character_Maps::Get();
    elements.types += Buildable_Schema_Face_Tree_Drawer::Draw(unilang_font_lookup,label_tree,pc_input).frame_elements.types;
    
    return elements;
❱

◀private: static▶ void ☀Convert_To_Image(Frame_Elements const& elements)❰

    //draw the elements to an image
    Cairo_Render_Settings settings;
    
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    settings.file_name = host_folder + ".readme/unilang_split_concept_tree.png";
    settings.bg_color.r = 1;
    settings.bg_color.g = 1;
    settings.bg_color.b = 1;
    Frame_Renderer::Render(elements,settings);
    
    //additional cleanuo
    Image_Transparent::Convert(settings.file_name);
❱







//TODO: Attempting to draw lines from PKs to FKs
//TODO REMOVE THIS
◀private: static▶ Frame_Elements ☀Draw_Fk_Pk_Connections(Split_String_Trees trees)❰


    Frame_Elements elements;
    
    
    // path -> {iterator, which tree}
    auto mapped_elements = Extract_Elements_To_Map(trees);
    
    // {iterator, which tree} / {iterator, which tree}
    auto pairings = Create_Pk_Fk_Pairings(mapped_elements);
    
    
    
    //convert trees back
    for (auto & it: trees.trees){
        Unique_Id_Tree_To_Str_Tree::Convert(it);
    }
    
    
    return elements;

❱


◀private: static▶ std::map<std::string,std::pair<tree<std::string>::pre_order_iterator,int>> ☀Extract_Elements_To_Map(Split_String_Trees const& trees)❰

    std::map<std::string,std::pair<tree<std::string>::pre_order_iterator,int>> extracted;
    for (size_t i = 0; i < trees.trees.size(); ++i){
        for (auto it = trees.trees[i].nodes.begin(); it != trees.trees[i].nodes.end(); ++it){
            extracted.insert({*it,std::pair<tree<std::string>::pre_order_iterator,int>{it,static_cast<int>(i)}});
        }
    }
    return extracted;
❱

◀private: static▶ vec_of_same_pairs<std::pair<tree<std::string>::pre_order_iterator,int>>
☀Create_Pk_Fk_Pairings(std::map<std::string,std::pair<tree<std::string>::pre_order_iterator,int>> const& mapped_elements)❰

    vec_of_same_pairs<std::pair<tree<std::string>::pre_order_iterator,int>> results;

    auto references = Reference_Lookup_Map_Getter::Get_Default_References();
    for (auto ref_pair: references.map){
        auto fk = mapped_elements.find(ref_pair.first)->second;
        auto pk = mapped_elements.find(ref_pair.second)->second;
        same_pair<std::pair<tree<std::string>::pre_order_iterator,int>> p;
        p.first = fk;
        p.second = pk;
        results.emplace_back(p);
    }
    
    return results;

❱