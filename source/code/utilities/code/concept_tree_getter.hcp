class
❪string❫
❪iostream❫
❪cmath❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
⚯
⚞⚟

◀public: static▶ String_Tree ☀Get()❰

    String_Tree x;
    
    auto top = x.nodes.begin();
    auto root = x.nodes.insert(top,"code");
    
    Append(x,root,"module",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        Append(x,root,"code_type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        });
    });
    
    return x;
❱


◀public:
template <typename Fun>
static void Append(String_Tree & tree, tree<std::string>::pre_order_iterator root, std::string const& value, Fun fun){
    
    
    auto new_root=tree.nodes.append_child(root,value);
    fun(tree,new_root);
    
}
▶