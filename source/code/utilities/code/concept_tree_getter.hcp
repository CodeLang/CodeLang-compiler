class
❪string❫
❪iostream❫
❪cmath❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/data_structures/tree/generic/string_to_string_tree"❫
❪"src/tree.hh"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚯
⚞⚟

◀public: static▶ String_Tree ☀Get()❰

    
    std::string str;
    Append_With_Newline(str,"code");
    Append_With_Newline(str,".module");
    Append_With_Newline(str,"..code type");
    Append_With_Newline(str,"..brief");
    Append_With_Newline(str,"..detail");
    
    Append_With_Newline(str,"..group");
    Append_With_Newline(str,"...name");
    
    Append_With_Newline(str,"..author");
    Append_With_Newline(str,"...name");
    
    Append_With_Newline(str,"..bug");
    Append_With_Newline(str,"...name");
    
    Append_With_Newline(str,"..warning");
    Append_With_Newline(str,"...name");
    
    Append_With_Newline(str,"..subgroup");
    Append_With_Newline(str,"...name");
    Append_With_Newline(str,"...description");
    
    Append_With_Newline(str,"..specification document");
    Append_With_Newline(str,"...path");
    Append_With_Newline(str,"...description");
    
    Append_With_Newline(str,"..foreseeable change");
    Append_With_Newline(str,"...change");
    Append_With_Newline(str,"...reason");
    Append_With_Newline(str,"...percentage");
    
    Append_With_Newline(str,"..citation");
    Append_With_Newline(str,"...type");
    Append_With_Newline(str,"...id");
    Append_With_Newline(str,"...citation attribute");
    Append_With_Newline(str,"....key");
    Append_With_Newline(str,"....value");
    
    Append_With_Newline(str,"..terminology");
    Append_With_Newline(str,"...term");
    Append_With_Newline(str,"...definition");
    Append_With_Newline(str,"...url");
    
    Append_With_Newline(str,"..literature");
    Append_With_Newline(str,"...depth");
    Append_With_Newline(str,"...properties");
    Append_With_Newline(str,"...title");
    Append_With_Newline(str,"...outline point");
    Append_With_Newline(str,"....point");
    Append_With_Newline(str,"...thought connection");
    Append_With_Newline(str,"....from");
    Append_With_Newline(str,"....edge");
    Append_With_Newline(str,"....to");
    Append_With_Newline(str,"...sentence");
    Append_With_Newline(str,"....name");
    Append_With_Newline(str,"....text");
    Append_With_Newline(str,"....author note");
    Append_With_Newline(str,"....citations");
    Append_With_Newline(str,".....id");
    Append_With_Newline(str,"....tag");
    Append_With_Newline(str,".....name");
    Append_With_Newline(str,"....image");
    Append_With_Newline(str,".....path");
    Append_With_Newline(str,".....alternative text");
    Append_With_Newline(str,".....hover text");
    Append_With_Newline(str,".....width");
    Append_With_Newline(str,".....height");
    Append_With_Newline(str,"....code line");
    Append_With_Newline(str,".....line");
    Append_With_Newline(str,"....table");
    Append_With_Newline(str,".....title");
    Append_With_Newline(str,".....header");
    Append_With_Newline(str,"......value");
    Append_With_Newline(str,".....row");
    Append_With_Newline(str,"......value");
    
    auto x = String_To_String_Tree::Convert(str);
    
    
    // String_Tree x;
    // auto top = x.nodes.begin();
    // auto root = x.nodes.insert(top,"code");
    
    // Append(x,root,"module",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    
    
    
    
    
    
    
    
    
    
    //     Append(x,root,"library",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"name");
    //     });
        
    //     Append(x,root,"copts",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"flag");
    //     });
        
    //     Append(x,root,"linkopts",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"flag");
    //     });
        
    //     Append(x,root,"import interface",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"specifiers");
    //         Token(x,root,"name");
    //         Token(x,root,"comment");
            
    //         Append(x,root,"relationship",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"related");
    //         });
    //     });
        
    //     Append(x,root,"import implementation",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"specifiers");
    //         Token(x,root,"name");
    //         Token(x,root,"comment");
            
    //         Append(x,root,"relationship",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"related");
    //         });
    //     });
        
    //     Append(x,root,"import test",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"specifiers");
    //         Token(x,root,"name");
    //         Token(x,root,"comment");
            
    //         Append(x,root,"relationship",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"related");
    //         });
    //     });
        
        
    //     Append(x,root,"typedef",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"specifiers");
    //         Token(x,root,"brief");
    //         Token(x,root,"detail");
    //         Token(x,root,"name");
            
    //         Append(x,root,"argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"statement");
    //             Token(x,root,"comment");
    //         });
    //         Append(x,root,"result",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"statement");
    //             Token(x,root,"comment");
    //         });
    //     });
        
        
    //     Append(x,root,"enum",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"specifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"base type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
            
    //         Append(x,root,"foreseeable change",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"change");
    //             Token(x,root,"reason");
    //             Token(x,root,"percentage");
    //         });
            
    //         Append(x,root,"subgroup",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"description",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"group affiliation",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //             });
    //         });
    //     });
        
        
        
        
    //     Append(x,root,"macro",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"specifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"units",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
            
    //         Append(x,root,"argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"identifier",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //     });
        
    //     Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //     });
        
    //     Append(x,root,"dependency type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"module",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             //an import in code
    //         });
    //         Append(x,root,"library",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             //a dep in bazel
    //         });
    //     });
        
    //     Append(x,root,"namespace",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"specifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //     });
        
    //     Append(x,root,"inheritance",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"specifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //     });
        
    //     Append(x,root,"forward declare",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //     });
        
    //     Append(x,root,"template argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"qualifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"identifier",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"default",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"units",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
            
    //         Append(x,root,"concept",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //     });
        
        
    //     Append(x,root,"function",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Append(x,root,"specifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"subgroup name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"unique name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         });
    //         Append(x,root,"alternative name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"expression",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"precondition",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"postcondition",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"big o",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"complexity type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"arg",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
            
    //             Append(x,root,"foreseeable change",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"change");
    //                 Token(x,root,"reason");
    //                 Token(x,root,"percentage");
    //             });
        
    //         Append(x,root,"stamp",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     Append(x,root,"content",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     });
    //                 });
    //             });
    //         });
    //         Append(x,root,"template argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"qualifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"identifier",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"default",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"units",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
                
    //             Append(x,root,"concept",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //             });
    //         });
    //         Append(x,root,"argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"qualifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"scope",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //             });
    //             Append(x,root,"specialization",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //                 Append(x,root,"scope",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     });
    //                 });
    //             });
    //             Append(x,root,"identifier",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"units",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"default",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"result",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"qualifiers",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"scope",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //             });
    //             Append(x,root,"specialization",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 });
    //                 Append(x,root,"scope",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     });
    //                 });
    //             });
    //             Append(x,root,"identifier",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"units",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"default",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //             Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             });
    //         });
    //         Append(x,root,"except",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"statement");
    //             Token(x,root,"comment");
    //         });
    //         Append(x,root,"body",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Append(x,root,"statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"depth");
    //                 Token(x,root,"name");
    //             });
    //         });
    //         Append(x,root,"test case",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"name");
    //             Append(x,root,"tag",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"name");
    //             });
    //             Append(x,root,"reason for testing",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"explanation");
    //             });
    //             Append(x,root,"reason for failing",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"explanation");
    //             });
                
                
    //             Append(x,root,"body",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Append(x,root,"statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                     Token(x,root,"depth");
    //                     Token(x,root,"name");
    //                 });
    //             });
    //         });
    //         Append(x,root,"benchmark",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"name");
    //             Append(x,root,"tag",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"name");
    //             });
    //             Append(x,root,"benchmark argument",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    
    //                 Token(x,root,"name");
    //                 Token(x,root,"low");
    //                 Token(x,root,"high");
    //                 Token(x,root,"multiplier");
    //             });
    //             Token(x,root,"setup statement");
    //             Token(x,root,"action statement");
    //         });
    //     });

    //     Append(x,root,"data member",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"brief");
    //         Token(x,root,"detail");
    //         Token(x,root,"class specifiers");
    //         Token(x,root,"type qualifiers");
    //         Token(x,root,"identifier");
    //         Token(x,root,"units");
    //         Token(x,root,"default value");
    //         Token(x,root,"partial pack amount");
    //         Token(x,root,"type");
    //         Token(x,root,"indexes to identifier");
            
    //         Append(x,root,"scope",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"name");
    //             Append(x,root,"specialization",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //                 Token(x,root,"name");
    //             });
    //         });
            
    //         Append(x,root,"parent type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"name");
    //         });
            
    //         Append(x,root,"key value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"key");
    //             Token(x,root,"value");
    //         });
            
    //         Append(x,root,"constraint",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"operation");
    //             Token(x,root,"value");
    //             Token(x,root,"meaning");
    //             Token(x,root,"display theme");
    //         });
            
    //         Append(x,root,"value meaning",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"operation");
    //             Token(x,root,"value");
    //             Token(x,root,"meaning");
    //             Token(x,root,"display theme");
    //         });
            
    //         Append(x,root,"value transition meaning",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //             Token(x,root,"before operation");
    //             Token(x,root,"before value");
    //             Token(x,root,"after operation");
    //             Token(x,root,"after value");
    //             Token(x,root,"meaning");
    //             Token(x,root,"display theme");
    //         });
    //     });
        
    //     Append(x,root,"raw statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"id");
    //         Token(x,root,"text");
    //     });
        
    //     Append(x,root,"todo statement",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"id");
    //         Token(x,root,"text");
    //     });
        
    //     Append(x,root,"comment",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
    //         Token(x,root,"id");
    //         Token(x,root,"text");
    //     });

    // });
    
    return x;
❱


◀public:
template <typename Fun>
static void Append(String_Tree & tr, tree<std::string>::pre_order_iterator root, std::string const& value, Fun fun){
    
    
    auto new_root=tr.nodes.append_child(root,value);
    fun(tr,new_root);
    
}
▶

◀public:
static void Token(String_Tree & tr, tree<std::string>::pre_order_iterator root, std::string const& value){
    
    tr.nodes.append_child(root,value);
    
}
▶