class
❪string❫
❪iostream❫
❪cmath❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"src/tree.hh"❫
⚯
⚞⚟

◀public: static▶ String_Tree ☀Get()❰

    String_Tree x;
    
    auto top = x.nodes.begin();
    auto root = x.nodes.insert(top,"code");
    
    Append(x,root,"module",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        Append(x,root,"code type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        });
        Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        });
        Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
        });
        Append(x,root,"group",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        Append(x,root,"author",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        Append(x,root,"bug",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        Append(x,root,"warning",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        Append(x,root,"subgroup",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"description",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        
        Append(x,root,"specification document",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"path",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"description",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        
        Append(x,root,"foreseeable change",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"change",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"reason",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"percentage",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
        
        Append(x,root,"citation",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"id",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            
            Append(x,root,"citation attribute",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                Append(x,root,"key",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
            });
        });
        
        Append(x,root,"literature",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"depth",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"properties",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"title",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            
            Append(x,root,"outline point",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                Append(x,root,"point",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
            });
            
            Append(x,root,"thought connection",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                Append(x,root,"from",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                Append(x,root,"edge",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                Append(x,root,"to",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
            });
            
            Append(x,root,"sentence",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                Append(x,root,"text",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                Append(x,root,"author note",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                });
                
               Append(x,root,"tag",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                });
               
               Append(x,root,"image",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    Append(x,root,"path",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                    Append(x,root,"alternative text",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                    Append(x,root,"hover text",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                    Append(x,root,"width",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                    Append(x,root,"height",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                });
               
               Append(x,root,"code line",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    Append(x,root,"line",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                });
               
               Append(x,root,"table",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    Append(x,root,"title",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                    });
                    
                   Append(x,root,"header",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                        Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                        });
                    });
                   Append(x,root,"row",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                        Append(x,root,"value",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
                        });
                    });
                });
            });
        });

        Append(x,root,"type",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            Append(x,root,"brief",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"detail",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
            Append(x,root,"name",[](String_Tree & x, tree<std::string>::pre_order_iterator root){
            });
        });
    });
    
    return x;
❱


◀public:
template <typename Fun>
static void Append(String_Tree & tr, tree<std::string>::pre_order_iterator root, std::string const& value, Fun fun){
    
    
    auto new_root=tr.nodes.append_child(root,value);
    fun(tr,new_root);
    
}
▶