class
❪string❫
❪iostream❫
❪cmath❫
❪map❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
❪"code/utilities/code/concept_tree_getter"❫
❪"code/utilities/data_structures/graphics/objects/grid/positioned_button_face_tree"❫
❪"src/tree.hh"❫
⚯
⚞⚟

◀public: static▶ void ☀Create()❰


    //original tree
    auto str_tree = Concept_Tree_Getter::Get();
    
    //new tree
    Positioned_Button_Face_Tree label_tree;
    
    
    std::map<int,tree<Buttoned_Faced_Label>::pre_order_iterator> lookup;
    for (auto it = str_tree.nodes.begin(); it != str_tree.nodes.end(); ++it){
        
        int depth = str_tree.nodes.depth(it);
        
        if (depth == 0){
            Add_A_Root_Element(label_tree,lookup,it,depth);
        }
        else {
            Add_A_Child_Element(label_tree,lookup,it,depth);
        }
    }
    
❱

◀private: static▶ void ☀Add_A_Root_Element(Positioned_Button_Face_Tree & label_tree, std::map<int,tree<Buttoned_Faced_Label>::pre_order_iterator> & lookup, tree<std::string>::pre_order_iterator, int depth)❰
❱
◀private: static▶ void ☀Add_A_Child_Element(Positioned_Button_Face_Tree & label_tree, std::map<int,tree<Buttoned_Faced_Label>::pre_order_iterator> & lookup, tree<std::string>::pre_order_iterator, int depth)❰
❱