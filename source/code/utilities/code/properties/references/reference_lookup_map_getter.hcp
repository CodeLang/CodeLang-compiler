class
⚯

⚞⚟

◀public: static▶ Reference_Lookup_Map ☀Get_Default_References()❰

    Reference_Lookup_Map x;
    
    //Foreign Key -> Primary Key
    //It's like a database kind of thing.
    //all the elements are a part of the same tree, but these references turn the tree into the graph.
    //what they really do is turn the tree-graph into a graph of trees.
    //there are different ways to try and render this idea.
    //the most common would be Entity Relationship Diagrams (ERDs)
    x.map.insert({"code/module/build options fk/","code/module/build options/pk/"});
    
    x.map.insert({"code/module/literature/paragraph/sentence/citations/citation fk/","code/module/citation/pk/"});
    x.map.insert({"code/module/descriptions/description/foreseeable change fk/","code/module/foreseeable change/pk/"});
    x.map.insert({"code/module/description fk/","code/module/descriptions/description/pk/"});
    x.map.insert({"code/module/functions/function/description fk/","code/module/descriptions/description/pk/"});
    x.map.insert({"code/module/functions/function/body/statement/statement fk/","code/module/statements/raw statement/pk/"});
    x.map.insert({"code/module/functions/function/body/statement/statement fk/","code/module/statements/todo statement/pk/"});
    x.map.insert({"code/module/functions/function/body/statement/statement fk/","code/module/statements/comment/pk/"});
    x.map.insert({"code/module/data members/data member/description fk/","code/module/descriptions/description/pk/"});
    
    
    // These are some checks to ensure the reference information was entered correctly.
    Schema_Name_Validator::Crash_On_Violations("reference lookup keys",Keys(x.map));
    Schema_Name_Validator::Crash_On_Violations("reference lookup values",Values(x.map));
    
    //make sure foreign keys and primary keys are properly named as fk / pk
    for (auto it: Keys(x.map)){
        if (!Reference_Is_Foreign_Key::Check(it)){
            std::cerr << it << " should be a foreign key in foreign key syntax." << std::endl;
            exit(-1);
        }
    }
    for (auto it: Values(x.map)){
        if (!Reference_Is_Primary_Key::Check(it)){
            std::cerr << it << " should be a foreign key in foreign key syntax." << std::endl;
            exit(-1);
        }
    }
    
    return x;
❱