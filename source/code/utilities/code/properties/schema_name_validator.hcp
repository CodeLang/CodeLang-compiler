class
⚯

⚞⚟


◀public: static▶ void ☀Crash_On_Violations(std::string const& name, std::vector<std::string> const& paths)❰
    auto violations = Check_Violations(paths);
    if (!violations.empty()){
        
        std::cerr << violations.size() << " violations found for: " << name << std::endl;
        std::cerr << "They are:" << std::endl;
        for (auto const& it: violations){
            std::cerr << it << std::endl;
        }
        exit(-1);
    }
❱


◀private: static▶ std::vector<std::string> ☀Check_Violations(std::vector<std::string> const& paths)❰

    
    auto schema = Buildable_Schema_Faced_Tree_Default_Schema::Get();
    std::vector<std::string> violations;
    for (auto const& it: paths){
        if (!Exists_In_Unordered_Map(schema.map,it)){
            violations.emplace_back(it);
        }
    }
    
    return violations;
❱