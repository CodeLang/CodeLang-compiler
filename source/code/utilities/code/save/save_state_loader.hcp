class
❪"code/tools/ide/settings/ide_elements"❫
❪"code/utilities/formats/json/converters/json_file_io"❫
⚯
❪"code/tools/ide/global_actions/global_action_decider"❫
❪"code/utilities/program/wrappers/zenity/file_selector/file_selector"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/code/concept_string_tree_parser"❫
❪"code/utilities/formats/json/converters/lib"❫
❪"code/utilities/code/save/save_state"❫
⚞⚟


◀public: static▶ Ide_Elements ☀Load(std::string const& file_name)❰
    
    //load raw json first so that we understand the version it was saved at
    auto json = Json_File_Io::Read_Compressed_Json_From_File(file_name,Json_Compression_Format::BSON);
    int version = json["version"];
    
    //provide forward compatibility on the json object by adjusting it to meet the needs of the current version
    //after thuis adjustment it will be safe to deserialize.
    Upgrade_Json_For_Deserialization_Compadibility(json,version);
    
    //Now that the json has been modified, we can deserialize the object
    Save_State x;
    
    try {
        x = json.get<Save_State>();
    }
    catch(std::exception const& e){
        std::cerr << "We can't deserialize the object properly :(" << std::endl;
        std::cerr << "Here is the library exception: " << e.what() << std::endl;
        std::cerr << "We will now dump that object:" << std::endl;
        std::cerr << json.dump(2) << std::endl;
        exit(-1);
    }
    
    //unpack it
    return x.elements;
❱



◀private: static▶ void ☀Upgrade_Json_For_Deserialization_Compadibility(nlohmann::json & j, int version)❰

    if (version <= 1){
        std::cout << "applying patch 1" << std::endl;
        Patch_1(j);
    }
    if (version <= 2){
        //DO WHEN NEEDED
    }
❱

◀private: static▶ void ☀Patch_1(nlohmann::json & j)❰
    for (auto & element: j["elements"]["types"]){
        
        //if its the variant structure we care about
        if (element["element"]["index"] == 1){
            //std::cout << element["element"]["index"].dump(0) << std::endl;
            
            element["element"]["value"]["state"]["schema"].clear();
            element["element"]["value"]["state"]["schema_styles"].clear();
            element["element"]["value"]["state"]["schema_styles"]["map"] = {};
            //element["element"]["value"]["state"]["schema_styles"]["default_styles"] = nlohmann::json::object();
            //element["element"]["value"]["state"]["schema_styles"]["map"]= nlohmann::json::object();
            //element["element"]["value"]["state"]["schema"]["default_styles"].clear();
            //element["element"]["value"]["state"]["default_styles"]["label_styles"]  = nlohmann::json::object();
        }
    }
❱
