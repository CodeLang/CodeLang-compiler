class
⚯
⚞⚟

◀public: static▶ Hsv_Color ☀Convert(Rgb_Color rgb)❰

    Hsv_Color result;

    float min, max, delta;
    min = std::min({rgb.r, rgb.g, rgb.b});
    max = std::max({rgb.r, rgb.g, rgb.b});
    result.v = max;               // v
    delta = max - min;
    if( max != 0 )
        result.s = delta / max;       // s
    else {
        // r = g = b = 0        // s = 0, v is undefined
        result.s = 0;
        result.h = -1;
        return result;
    }
    if( rgb.r == max )
        result.h = ( rgb.g - rgb.b ) / delta;     // between yellow & magenta
    else if( rgb.g == max )
        result.h = 2 + ( rgb.b - rgb.r ) / delta; // between cyan & yellow
    else
        result.h = 4 + ( rgb.r - rgb.g ) / delta; // between magenta & cyan
    result.h *= 60;               // degrees
    if( result.h < 0 )
        result.h += 360;
        
    
    return result;
❱



// r,g,b values are from 0 to 1
// h = [0,360], s = [0,1], v = [0,1]
//      if s == 0, then h = -1 (undefined)
// void RGBtoHSV( Rgb_Color const& rgb, Hsv_Color & hsv)
// {
//     float min, max, delta;
//     min = MIN( rgb.r, rgb.g, rgb.b );
//     max = MAX( rgb.r, rgb.g, rgb.b );
//     *v = max;               // v
//     delta = max - min;
//     if( max != 0 )
//         *s = delta / max;       // s
//     else {
//         // r = g = b = 0        // s = 0, v is undefined
//         *s = 0;
//         *h = -1;
//         return;
//     }
//     if( r == max )
//         *h = ( g - b ) / delta;     // between yellow & magenta
//     else if( g == max )
//         *h = 2 + ( b - r ) / delta; // between cyan & yellow
//     else
//         *h = 4 + ( r - g ) / delta; // between magenta & cyan
//     *h *= 60;               // degrees
//     if( *h < 0 )
//         *h += 360;
// }



// hsv rgb2hsv(rgb in)
// {
//     hsv         out;
//     double      min, max, delta;

//     min = in.r < in.g ? in.r : in.g;
//     min = min  < in.b ? min  : in.b;

//     max = in.r > in.g ? in.r : in.g;
//     max = max  > in.b ? max  : in.b;

//     out.v = max;                                // v
//     delta = max - min;
//     if (delta < 0.00001)
//     {
//         out.s = 0;
//         out.h = 0; // undefined, maybe nan?
//         return out;
//     }
//     if( max > 0.0 ) { // NOTE: if Max is == 0, this divide would cause a crash
//         out.s = (delta / max);                  // s
//     } else {
//         // if max is 0, then r = g = b = 0              
//         // s = 0, h is undefined
//         out.s = 0.0;
//         out.h = NAN;                            // its now undefined
//         return out;
//     }
//     if( in.r >= max )                           // > is bogus, just keeps compilor happy
//         out.h = ( in.g - in.b ) / delta;        // between yellow & magenta
//     else
//     if( in.g >= max )
//         out.h = 2.0 + ( in.b - in.r ) / delta;  // between cyan & yellow
//     else
//         out.h = 4.0 + ( in.r - in.g ) / delta;  // between magenta & cyan

//     out.h *= 60.0;                              // degrees

//     if( out.h < 0.0 )
//         out.h += 360.0;

//     return out;
// }



