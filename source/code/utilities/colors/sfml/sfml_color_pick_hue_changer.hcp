class
⚯
⚞⚟

◀public: static▶ void ☀Modulate(sf::VertexArray &points, double hue)❰

    // First, Let's "sanitize" inputs a bit.
    // Don't accept negative numbers.
    if (hue < 0)
        hue = 0;
    // Lazy overflow by subtracting the integer portion of the number.
    else if (hue > 1)
        hue -= static_cast<int>(hue);

    // Now iterate over all "pixels" and upate their colors.
    for (unsigned int y = 0; y <= 255; ++y) {
        for (unsigned int x = 0; x <= 255; ++x) {
            // "Calculate" our missing HSV components with ranges from 0 to 1.
            const double s = x / 255.; // x is our saturation
            const double v = y / 255.; // y is our value

            // Pick the correct case based on our position on the color wheel.
            const int cs = static_cast<int>(hue * 6);

            // Calculate some helper values used in our cases below.
            const double f = hue * 6 - cs;
            const double p = v * (1 - s);
            const double q = v * (1 - s * f);
            const double t = v * (1 - s * (1 - f));

            switch (cs) {
                case 0:
                case 6:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(v * 255), sf::Uint8(t * 255), sf::Uint8(p * 255));
                    break;
                case 1:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(q * 255), sf::Uint8(v * 255), sf::Uint8(p * 255));
                    break;
                case 2:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(p * 255), sf::Uint8(v * 255), sf::Uint8(t * 255));
                    break;
                case 3:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(p * 255), sf::Uint8(q * 255), sf::Uint8(v * 255));
                    break;
                case 4:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(t * 255), sf::Uint8(p * 255), sf::Uint8(v * 255));
                    break;
                case 5:
                    points[y * 256 + x].color = sf::Color(sf::Uint8(v * 255), sf::Uint8(p * 255), sf::Uint8(q * 255));
                    break;
            }
        }
    }
❱