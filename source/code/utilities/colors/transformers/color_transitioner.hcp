class
⚯
⚞⚟

◀public: static▶ std::vector<Rgb_Color> ☀Transition_Colors(Rgb_Color_Transition const& transition, int amount)❰

    std::vector<Rgb_Color> colors;
    for (size_t i = 0; i < static_cast<size_t>(amount); ++i){
        auto p = i / static_cast<float>(amount - 1);
        Rgb_Color new_color;
        new_color.r = int((1.0-p) * transition.from.r + p * transition.to.r + 0.5);
        new_color.g = int((1.0-p) * transition.from.g + p * transition.to.g + 0.5);
        new_color.b = int((1.0-p) * transition.from.b + p * transition.to.b + 0.5);
        colors.emplace_back(new_color);
    }
    return colors;
❱
◀public: static▶ std::vector<Transparent_Rgb_Color> ☀Transition_Colors(Rgba_Color_Transition const& transition, int amount)❰

    std::vector<Transparent_Rgb_Color> colors;
    for (size_t i = 0; i < static_cast<size_t>(amount); ++i){
        auto p = i / static_cast<float>(amount - 1);
        Transparent_Rgb_Color new_color;
        new_color.r = int((1.0-p) * transition.from.r + p * transition.to.r + 0.5);
        new_color.g = int((1.0-p) * transition.from.g + p * transition.to.g + 0.5);
        new_color.b = int((1.0-p) * transition.from.b + p * transition.to.b + 0.5);
        new_color.alpha = int((1.0-p) * transition.from.alpha + p * transition.to.alpha + 0.5);
        colors.emplace_back(new_color);
    }
    return colors;
❱


◀public: static▶ Rgb_Color ☀Get_Next_Transition(Rgb_Color const& current, Rgb_Color_Transition const& transition, int amount)❰

    std::vector<Rgb_Color> colors = Transition_Colors(transition,amount);
    
    
    for (int i = 0; i < colors.size(); ++i){
        if (colors[i].r == current.r && colors[i].g == current.g && colors[i].b == current.b){
            if (i+1 < colors.size()){
                return colors[i+1];
            }
            else{
                return colors[i];
            }
        }
    }
    
    return colors[0];
❱