class
❪string❫
❪unordered_map❫
❪"code/utilities/data_structures/graphics/bitmap/multi_color_bitmap/multi_color_bitmap"❫
⚯
⚞⚟



◀public: static▶ Multi_Color_Bitmap ☀Create()❰
    Multi_Color_Bitmap b;
    
    Pixel_Settings p;
    
    p.color_fill.r = 68;
    p.color_fill.g = 68;
    p.color_fill.b = 68;
    
    //top border
    for (size_t i = 0; i < 9; ++i){
        p.pos.x = i;
        p.pos.y = 0;
        b.pixels.emplace_back(p);
    }
    
    //bottom border
    for (size_t i = 0; i < 9; ++i){
        p.pos.x = i;
        p.pos.y = 8;
        b.pixels.emplace_back(p);
    }
    
    //left
    for (size_t i = 1; i < 8; ++i){
        p.pos.x = 0;
        p.pos.y = i;
        b.pixels.emplace_back(p);
    }
    
    //right
    for (size_t i = 1; i < 8; ++i){
        p.pos.x = 8;
        p.pos.y = i;
        b.pixels.emplace_back(p);
    }
    
    p.color_fill.r = 255;
    p.color_fill.g = 255;
    p.color_fill.b = 255;
    
    //white square
    for (size_t i = 1; i < 8; ++i){
        for (size_t j = 1; j < 8; ++j){
            p.pos.x = i;
            p.pos.y = j;
            b.pixels.emplace_back(p);
        }
    }
    
    p.color_fill.r = 0;
    p.color_fill.g = 0;
    p.color_fill.b = 0;
    int pixel_length_of_hairs = 3;
    int offset = 4;
    
    //build a cross-hair
    for (size_t i = 0; i < pixel_length_of_hairs; ++i){
        p.pos.x = i + offset;
        p.pos.y = 0 + offset;
        b.pixels.emplace_back(p);
        
        p.pos.x = i*-1 + offset;
        p.pos.y = 0 + offset;
        b.pixels.emplace_back(p);
        
    }
    
    return b;
❱