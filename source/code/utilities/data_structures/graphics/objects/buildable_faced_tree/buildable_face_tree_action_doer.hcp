class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/positioned_buildable_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buildable_faced_tree/buildable_label_action"❫
⚯
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/premade/buttoned_faced_label_premades"❫
⚞⚟

◀public: static▶ void ☀Do_Label_Action(Positioned_Buildable_Face_Tree & tree, Buildable_Label_Action const& action)❰

        
        switch (action){
            
            case Buildable_Label_Action::ADD_SIBLING_BEFORE: Add_Sibling_Before(tree);
            break;
            
            case Buildable_Label_Action::ADD_SIBLING_AFTER: Add_Sibling_After(tree);
            break;
            
            case Buildable_Label_Action::ADD_CHILD_BEFORE: Add_Child_Before(tree);
            break;
            
            case Buildable_Label_Action::ADD_CHILD_AFTER: Add_Child_After(tree);
            break;
            
            case Buildable_Label_Action::DELETE: Delete(tree);
            break;
            
            case Buildable_Label_Action::DELETE_SIBLINGS_BEFORE: Delete_Siblings_Before(tree);
            break;
            
            case Buildable_Label_Action::DELETE_SIBLINGS_AFTER: Delete_Siblings_After(tree);
            break;
            
            case Buildable_Label_Action::DELETE_CHILDREN: Delete_Children(tree);
            break;
            
            case Buildable_Label_Action::COPY: Copy(tree);
            break;
        }
❱



◀private: static▶ void ☀Add_Sibling_Before(Positioned_Buildable_Face_Tree & tree)❰
    
    auto x = Buttoned_Faced_Label_Premades::Single_Plain_White_Box_For_Tree();
    tree.structure.nodes.insert(tree.selected_node,x);
❱
◀private: static▶ void ☀Add_Sibling_After(Positioned_Buildable_Face_Tree & tree)❰

    auto x = Buttoned_Faced_Label_Premades::Single_Plain_White_Box_For_Tree();
    tree.structure.nodes.insert_after(tree.selected_node,x);
❱
◀private: static▶ void ☀Add_Child_Before(Positioned_Buildable_Face_Tree & tree)❰
    
    auto x = Buttoned_Faced_Label_Premades::Single_Plain_White_Box_For_Tree();
    tree.structure.nodes.prepend_child(tree.selected_node,x);
❱
◀private: static▶ void ☀Add_Child_After(Positioned_Buildable_Face_Tree & tree)❰

    auto x = Buttoned_Faced_Label_Premades::Single_Plain_White_Box_For_Tree();
    tree.structure.nodes.append_child(tree.selected_node,x);
❱
◀private: static▶ void ☀Delete_Siblings_Before(Positioned_Buildable_Face_Tree & tree)❰
    tree.structure.nodes.erase_left_siblings(tree.selected_node);
❱
◀private: static▶ void ☀Delete_Siblings_After(Positioned_Buildable_Face_Tree & tree)❰
    tree.structure.nodes.erase_right_siblings(tree.selected_node);
❱
◀private: static▶ void ☀Delete_Children(Positioned_Buildable_Face_Tree & tree)❰
    tree.structure.nodes.erase_children(tree.selected_node);
❱



◀private: static▶ void ☀Delete(Positioned_Buildable_Face_Tree & tree)❰
    
    tree.structure.nodes.erase(tree.selected_node);
❱
◀private: static▶ void ☀Copy(Positioned_Buildable_Face_Tree & tree)❰
    std::cout << "doing copy" << std::endl;
❱