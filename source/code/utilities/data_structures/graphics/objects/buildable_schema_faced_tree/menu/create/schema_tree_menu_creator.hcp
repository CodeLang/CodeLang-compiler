class
⚯
⚞⚟


◀public: static▶ Select_Menu ☀Create_Menu(Button_Face_Tree const& structure, Schema_Path_Settings const& settings, Schema_Tree_Menu_Creation_Settings const& menu_settings, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //there are two kinds of menus to choose from
    return Create(structure,settings,menu_settings,it);
❱

◀private: static▶ Select_Menu ☀Create(Button_Face_Tree const& structure, Schema_Path_Settings const& settings, Schema_Tree_Menu_Creation_Settings const& menu_settings, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    Select_Menu x;
    x.name = menu_settings.menu_name;
    
    if (menu_settings.add_global_manipulation_options){
        Add_Global_Manipulation_Options(x,structure,menu_settings,settings.schema,it);
    }
    if (menu_settings.add_local_manipulation_options){
        Add_Local_Manipulation_Options(x,structure,menu_settings,settings.schema,it);
    }
    
    if (menu_settings.add_sibiling_rename_options){
        Add_Sibling_Names_For_Renaming(x,structure,menu_settings,settings.schema,it);
    }
    
    if (menu_settings.add_children_append_options){
        Add_Children_Names_For_Appending(x,structure,menu_settings,settings.schema,it);
    }
    if (menu_settings.add_choice_value_options){
        Add_Choices(x,structure,menu_settings,settings.choices,it);
    }
    
    Activate_First_Menu_Item(x);
    
    return x;
❱
    
    

◀private: static▶ void ☀Activate_First_Menu_Item(Select_Menu & x)❰
    auto first = x.menu.nodes.begin();
    if (first != x.menu.nodes.end()){
        first->state.faces[0].label.user_state.is_active = true;
    }
❱
◀private: static▶ void ☀Add_Global_Manipulation_Options(Select_Menu & x, Button_Face_Tree const& structure, Schema_Tree_Menu_Creation_Settings const& settings, Child_Lookup_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //style
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();
    
    for (auto const& it: Global_Manipulation_Option_all_strings()){
        face_label.state.faces[0].label.message = settings.global_symbol + it;
        x.menu.nodes.insert(x.menu.nodes.end(),face_label);
    }
❱
◀private: static▶ void ☀Add_Local_Manipulation_Options(Select_Menu & x, Button_Face_Tree const& structure, Schema_Tree_Menu_Creation_Settings const& settings, Child_Lookup_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //style
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();
    
    for (auto const& it: Local_Manipulation_Option_all_strings()){
        face_label.state.faces[0].label.message = settings.local_symbol + it;
        x.menu.nodes.insert(x.menu.nodes.end(),face_label);
    }
❱

◀private: static▶ void ☀Add_Sibling_Names_For_Renaming(Select_Menu & x, Button_Face_Tree const& structure, Schema_Tree_Menu_Creation_Settings const& settings, Child_Lookup_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //style
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();
    
    if (structure.nodes.depth(it) > 0){
        auto parent = structure.nodes.parent(it);
    
        //get child items based on the schema
        auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,parent);
        auto strs = Child_Lookup_Map_Find::Get_Children(lookup,full_name);
        for (auto const& it: strs){
            face_label.state.faces[0].label.message = settings.sibling_symbol + it;
            x.menu.nodes.insert(x.menu.nodes.end(),face_label);
        }
    }
❱

◀private: static▶ void ☀Add_Children_Names_For_Appending(Select_Menu & x, Button_Face_Tree const& structure, Schema_Tree_Menu_Creation_Settings const& settings, Child_Lookup_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //style
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();

    //get child items based on the schema
    auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,it);
    auto strs = Child_Lookup_Map_Find::Get_Children(lookup,full_name);
    for (auto const& str: strs){
        face_label.state.faces[0].label.message = settings.children_append_symbol + str;
        x.menu.nodes.insert(x.menu.nodes.end(),face_label);
    }
❱

◀private: static▶ void ☀Add_Choices(Select_Menu & x, Button_Face_Tree const& structure, Schema_Tree_Menu_Creation_Settings const& settings, Choices_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    //style
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();
    
    auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,it);
    std::vector<std::string> strs = Get_Value_Or_Default(lookup.map,full_name);
    
    
    for (auto const& str: strs){
        face_label.state.faces[0].label.message = settings.choice_value_symbol + str;
        x.menu.nodes.insert(x.menu.nodes.end(),face_label);
    }
    
    
❱
