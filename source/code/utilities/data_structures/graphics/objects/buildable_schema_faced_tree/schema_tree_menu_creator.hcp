class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/positioned_button_face_tree"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map"❫
❪"code/utilities/data_structures/graphics/objects/select_menu/select_menu"❫
⚯
❪"code/utilities/data_structures/graphics/objects/faced_label/premade/faced_label_premades"❫
❪"code/utilities/data_structures/tree/generic/child_lookup_map_find"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_tree/button_face_tree_full_path_name"❫
⚞⚟


◀public: static▶ Select_Menu ☀Create_Menu(Button_Face_Tree const& structure, Child_Lookup_Map const& lookup, tree<Buttoned_Faced_Label>::pre_order_iterator it)❰

    Select_Menu x;
    
    auto face_label = Faced_Label_Premades::Highlightable_Single_Plain_White_Box();
    auto top = x.menu.nodes.begin();


    //get child items based on the schema
    auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,it);
    auto strs = Child_Lookup_Map_Find::Get_Children(lookup,full_name);
    for (auto const& it: strs){
        
        face_label.state.faces[0].label.message = it;
        x.menu.nodes.insert(top,face_label);
    }
    
    
    return x;
❱