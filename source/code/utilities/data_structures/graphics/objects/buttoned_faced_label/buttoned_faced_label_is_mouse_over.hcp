class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/data/buttoned_faced_label"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
⚯
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_drawer"❫
❪"code/utilities/data_structures/graphics/objects/faced_label/faced_label_is_mouse_over"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/data_structures/graphics/objects/buttoned_faced_label/absolute_button_maker"❫
⚞⚟

◀public: static▶ bool ☀Check(Character_Maps const& font_chars, Buttoned_Faced_Label & label, Position const& pos, Pc_Input_State const& pc_input)❰
    
    return Check(font_chars,label,pos,pc_input.mouse.pos);
❱

◀public: static▶ bool ☀Check(Character_Maps const& font_chars, Buttoned_Faced_Label & label, Position const& pos, Position const& mouse_pos)❰
    
    auto is_over = Faced_Label_Is_Mouse_Over::Check(font_chars,label.label,pos,mouse_pos);
    if (is_over){
        return true;
    }
    
    //check button
    if (label.style.show_button){
        auto button = Absolute_Button_Maker::Make(label,pos);
        auto events = Mouse_Events_Checker::position_inside_rectangle(mouse_pos,button.pos,label.button.click_size);
        if (events){
            return true;
        }
    }
    
    return false;
❱