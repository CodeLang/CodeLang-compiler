class
⚯
⚞⚟

◀public: static▶ Buttoned_Faced_Label ☀Single_Plain_White_Box_For_Tree()❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.label = Faced_Label_Premades::Single_Plain_White_Box();
    
    return x;
❱


//all the same style
◀public: static▶ Buttoned_Faced_Label ☀Unilang_Node(std::string const& node_name)❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.label = Faced_Label_Premades::Single_Gray_Concept_With_Plain_White_Value();
    x.label.state.faces[0].name = node_name;
    x.label.state.faces[0].label.message = node_name;
    x.label.state.faces[1].name = node_name;
    x.label.state.faces[1].label.message = node_name;
    
    return x;
❱

◀public: static▶ Buttoned_Faced_Label ☀Opened_Unilang_Node(std::string const& node_name)❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.button.current_face = 1;
    x.label = Faced_Label_Premades::Single_Gray_Concept_With_Plain_White_Value();
    x.label.state.faces[0].name = node_name;
    x.label.state.faces[0].label.message = node_name;
    x.label.state.faces[1].name = node_name;
    x.label.state.faces[1].label.message = node_name;
    
    return x;
❱


//leaf / nonleaf style differences
◀public: static▶ Buttoned_Faced_Label ☀Opened_Unilang_Leaf_Node(std::string const& node_name)❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.button.current_face = 1;
    x.label = Faced_Label_Premades::Single_Gray_Concept_With_Plain_White_Value();
    x.label.state.faces[0].name = node_name;
    x.label.state.faces[0].label.message = node_name;
    x.label.state.faces[1].name = node_name;
    x.label.state.faces[1].label.message = node_name;
    
    return x;
❱

◀public: static▶ Buttoned_Faced_Label ☀Closed_Unilang_NonLeaf_Node(std::string const& node_name)❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.label = Faced_Label_Premades::Single_Gray_Concept();
    x.label.state.faces[0].name = node_name;
    x.label.state.faces[0].label.message = node_name;
    
    return x;
❱
◀public: static▶ Buttoned_Faced_Label ☀Opened_Unilang_NonLeaf_Node(std::string const& node_name)❰
    Buttoned_Faced_Label x;
    
    x.button = Tree_Button::Create_Positioned();
    x.button.current_face = 1;
    x.label = Faced_Label_Premades::Single_Gray_Concept();
    x.label.state.faces[0].name = node_name;
    x.label.state.faces[0].label.message = node_name;
    
    return x;
❱

◀public: static▶ Buttoned_Faced_Label ☀Unilang_Root_Node()❰
    auto label = Closed_Unilang_NonLeaf_Node("code");
    label.label.state.faces[0].label.user_state.is_active = true;
    return label;
❱
◀public: static▶ Buttoned_Faced_Label ☀Opened_Unilang_Root_Node()❰
    auto label = Opened_Unilang_NonLeaf_Node("code");
    label.label.state.faces[0].label.user_state.is_active = true;
    return label;
❱