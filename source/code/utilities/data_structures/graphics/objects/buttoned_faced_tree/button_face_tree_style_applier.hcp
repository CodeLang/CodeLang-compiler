class
⚯
⚞⚟




◀public: static▶ void ☀Apply_Theme(Button_Face_Tree & tree, Child_Lookup_Map const& schema, Style_Lookup_Map const& schema_styles)❰

    (void)schema;

    for (auto it = tree.nodes.begin(); it != tree.nodes.end(); ++it)
    {
        std::string full_name;
        if (tree.nodes.depth(it) > 0){
            full_name = With_Child_Name(tree,tree.nodes.parent(it),it->label.state.faces[0].name);
        }
        else{
            full_name = it->label.state.faces[0].name + "/";
        }
        Button_Faced_Label_Style_Applier::Apply_Theme(*it,schema_styles,full_name);
    }
❱



◀private: static▶ std::string ☀With_Child_Name(Button_Face_Tree const& structure, ::tree<Buttoned_Faced_Label>::pre_order_iterator it, std::string const& child_name)❰
    auto full_name = Button_Face_Tree_Full_Path_Name::Get(structure,it);
    full_name += child_name + "/";
    return full_name;
❱