class
⚯
⚞⚟


◀public: static▶ Text_Box_Action ☀Decide(Pc_Input_State const& pc_input)❰
    
    if (Is_Active(pc_input.keyboard.shift) && Is_Pressed(pc_input.keyboard.right)){
        return Text_Box_Action::SELECT_FORWARD;
    }
    if (Is_Pressed(pc_input.keyboard.right)){
        return Text_Box_Action::NAVIGATE_FORWARD;
    }
    if (Is_Active(pc_input.keyboard.shift) && Is_Pressed(pc_input.keyboard.left)){
        return Text_Box_Action::SELECT_BACKWARD;
    }
    if (Is_Pressed(pc_input.keyboard.left)){
        return Text_Box_Action::NAVIGATE_BACKWARD;
    }
    if (Is_Pressed(pc_input.keyboard.backspace)){
        return Text_Box_Action::BACKSPACE;
    }
    if (Is_Active(pc_input.keyboard.ctrl) && Is_Pressed(pc_input.keyboard.a)){
        return Text_Box_Action::SELECT_ALL;
    }
    if (Is_Active(pc_input.keyboard.ctrl) && Is_Pressed(pc_input.keyboard.c)){
        return Text_Box_Action::COPY;
    }
    if (Is_Active(pc_input.keyboard.ctrl) && Is_Pressed(pc_input.keyboard.v)){
        return Text_Box_Action::PASTE;
    }
    if (Is_Pressed(pc_input.keyboard.delete_)){
        return Text_Box_Action::DELETE;
    }
    
    // Text_Box_Action::ADD_CHARS is not set, but handled directly elsewhere
    
    return Text_Box_Action::NONE;
❱

◀private: static▶ bool ☀Is_Active(Key_State const& k)❰
    return k == Key_State::DOWN || k == Key_State::PRESSED;
❱
◀private: static▶ bool ☀Is_Down(Key_State const& k)❰
    return k == Key_State::DOWN;
❱
◀private: static▶ bool ☀Is_Pressed(Key_State const& k)❰
    return k == Key_State::PRESSED;
❱