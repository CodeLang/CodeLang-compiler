class
⚯
⚞⚟

//EVENT IT
◀public: static▶ bool ☀Event_It(Character_Maps const& font_chars, Faced_Label & label, Position const& pos, Pc_Input_State const& pc_input, bool in_position_possible)❰
    return Do_Events(font_chars,label.state,pos,pc_input,in_position_possible);
❱

◀private: static▶ bool ☀Do_Events(Character_Maps const& font_chars, Faced_Label_State & label, Position const& pos, Pc_Input_State const& pc_input, bool in_position_possible)❰

    if (!label.style.print_all){
      return Regular_Events(font_chars,label,pos,pc_input,in_position_possible);
    }
    return All_Face_Events(font_chars,label,pos,pc_input,in_position_possible);
❱


◀private: static▶ bool ☀Regular_Events(Character_Maps const& font_chars, Faced_Label_State & label, Position const& pos, Pc_Input_State const& pc_input, bool in_position_possible)❰

    return Label_Apply_Events::Event_It(font_chars,pos,label.faces[label.index].label,pc_input,in_position_possible);
❱

◀private: static▶ bool ☀All_Face_Events(Character_Maps const& font_chars, Faced_Label_State & label, Position const& pos, Pc_Input_State const& pc_input, bool in_position_possible)❰
  
  bool was_evented_overall = false;
  
  auto current_pos = pos;
  for (size_t i = 0; i < label.faces.size(); ++i){
     auto evented = Label_Apply_Events::Event_It(font_chars,current_pos,label.faces[i].label,pc_input,in_position_possible);
     if (evented) { was_evented_overall = true; }
    current_pos.x += Label_Dimension_Getter::Get(label.faces[i].label).x -1;
  }
  
  return was_evented_overall;
❱