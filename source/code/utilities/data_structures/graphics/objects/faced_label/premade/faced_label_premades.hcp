class
⚯
⚞⚟


◀public: static▶ Faced_Label ☀Single_Plain_Gray_Box(std::string const& name_and_text)❰
    Faced_Label x;
    
    x.state.faces.emplace_back(Name_And_Text_Gray_Face(name_and_text));
    x.state.index = 0;
    
    return x;
❱
◀public: static▶ Faced_Label ☀Single_Plain_Light_Purple_Box(std::string const& name_and_text)❰
    Faced_Label x;
    
    x.state.faces.emplace_back(Name_And_Text_Light_Purple_Face(name_and_text));
    x.state.index = 0;
    
    return x;
❱
◀public: static▶ Faced_Label ☀Highlightable_Single_Plain_White_Box()❰
    Faced_Label x;
    
    //add the face
    Label_Face face;
    face.name = "<name>";
    face.label.message = "<message>";
    face.label.styles = Default_Label_Styles::Highlightable_Plain_White_Box();
    x.state.faces.emplace_back(face);
    
    return x;
❱
◀public: static▶ Faced_Label ☀Single_Plain_White_Box()❰
    Faced_Label x;
    
    //add the face
    Label_Face face;
    face.name = "<name>";
    face.label.message = "<message>";
    face.label.styles = Default_Label_Styles::Plain_White_Box();
    x.state.faces.emplace_back(face);
    
    return x;
❱


// A "concept face label" will just be a label with two faces
// The first face represents the concept
// The second face represents the value of that concept.
// From a semiotic perspective, this is very much a signifier/signified relationship.
//however, in terms of our composition layout for data structures, only the leaf nodes have editable content
//therefore, the non-leaf nodes do not need a signified.  They can be concept only.
◀public: static▶ Faced_Label ☀Single_Gray_Concept()❰
    Faced_Label x;
    
    //add the concept face
    x.state.faces.emplace_back(Signifier_Face());
    
    //we want to start on the only available face
    x.state.index = 0;
    
    return x;
❱

◀public: static▶ Faced_Label ☀Single_Gray_Concept_With_Plain_White_Value()❰
    Faced_Label x;
    
    //add the concept face
    x.state.faces.emplace_back(Signifier_Face());
    
    //add the value face
    x.state.faces.emplace_back(Signified_Face());
    
    //we want to start the appearance on the value
    x.state.index = 1;
    
    return x;
❱


◀public: static▶ Label_Face ☀Signifier_Face()❰
    Label_Face face;
    face.name = "<concept>";
    face.label.message = "<concept>";
    face.label.styles = Default_Label_Styles::Plain_Gray_Box();

    //the signifier should not be editable
    face.label.cursors.ability = Default_Cursor_Ability::No_Edit();
    
    return face;
❱

◀public: static▶ Label_Face ☀Signified_Face()❰
    Label_Face face;
    face.name = "<value>";
    face.label.message = "<value>";
    face.label.styles = Default_Label_Styles::Plain_White_Box();
    return face;
❱

◀public: static▶ Label_Face ☀Name_And_Text_Gray_Face(std::string const& name)❰
    Label_Face face;
    face.name = name;
    face.label.message = name;
    face.label.styles = Default_Label_Styles::Plain_Gray_Box();

    
    return face;
❱

◀public: static▶ Label_Face ☀Name_And_Text_Light_Purple_Face(std::string const& name)❰
    Label_Face face;
    face.name = name;
    face.label.message = name;
    face.label.styles = Default_Label_Styles::Light_Purple();

    
    return face;
❱