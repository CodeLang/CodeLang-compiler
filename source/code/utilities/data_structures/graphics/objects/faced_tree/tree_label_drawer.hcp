class
⚯
⚞⚟

◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Positioned_Face_Tree & tree, Pc_Input_State const& pc_input)❰
    
    Frame_Elements elements;
    Print_Tree_In_Iteration(font_chars,elements,pc_input,tree.pos,tree.nodes,tree.nodes.begin(),tree.nodes.end());
    return elements;
❱
◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Face_Tree & tree, Position const& pos, Pc_Input_State const& pc_input)❰
    
    Frame_Elements elements;
    Print_Tree_In_Iteration(font_chars,elements,pc_input,pos,tree.nodes,tree.nodes.begin(),tree.nodes.end());
    return elements;
❱

◀private: static▶ void ☀Print_Tree_In_Iteration(Character_Maps const& font_chars, Frame_Elements & elements, Pc_Input_State const& pc_input, Position const& pos, const tree<Faced_Label>& tr, tree<Faced_Label>::pre_order_iterator it, tree<Faced_Label>::pre_order_iterator end)❰

    //exit early if tree if empty
    if(!tr.is_valid(it)) return;
    
    //calculate the current depth of the iterator given
    int rootdepth=tr.depth(it);
    
    auto start_pos = pos;
    auto current_pos = pos;
    
    while(it!=end) {
        
        //calculate the depth of the node
        int depth = tr.depth(it)-rootdepth;
        
        Adjust_Positions_For_Next_Cell((*it),start_pos,current_pos,depth);
        Faced_Label_Eventer::Event_It(font_chars,(*it),current_pos,pc_input);
        Append(elements.types,Faced_Label_Drawer::Draw(font_chars,(*it),current_pos,pc_input.mouse).types);
        
        ++it;
    }
❱

◀private: static▶ void  ☀Adjust_Positions_For_Next_Cell(Faced_Label const& label, Position const& start_pos, Position & current_pos, int const& depth)❰
        auto dim = Faced_Label_Drawer::Get_Dimensions(label);
        current_pos.x = start_pos.x + 10 * depth;
        current_pos.y += dim.y-1;
❱