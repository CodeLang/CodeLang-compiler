class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/data_structures/graphics/objects/grid/faced/regular/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/grid/faced/slider/positioned_slider"❫
❪"code/utilities/data_structures/graphics/objects/functions/label_drawer"❫
❪"code/utilities/graphics/imgui/render/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
⚯
⚞⚟

◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Positioned_Slider & slider, Pc_Input_State const& pc_input)❰
    
    Frame_Elements elements;
    
   Positioned_Rectangle_Settings bar;
   bar.pos = slider.pos;
   bar.pos.y += 4;
   bar.shape.dimensions.width = slider.state.total_length;
   bar.shape.dimensions.height = 1;
   elements.types.emplace_back(bar);
    
   auto draw_label_pos = slider.pos;
   draw_label_pos.x += slider.state.current_length;
   
   elements.types +=  Label_Drawer::Full_Draw(font_chars,draw_label_pos,slider.state.label,pc_input).types;
   
   if (slider.state.label.user_state.is_active){
       if (pc_input.mouse.left.down){
        slider.state.current_length = (pc_input.mouse.pos.x - slider.pos.x);
        
       if (slider.state.current_length < 0){
        slider.state.current_length  = 0;
       }
       if (slider.state.current_length > slider.state.total_length){
        slider.state.current_length  = slider.state.total_length;
       }
        
        
       }
   }
    
    return elements;
❱