class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/data_structures/graphics/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/data_structures/graphics/bitmap/full_color_bitmap/positioned_full_color_bitmap"❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/data_structures/graphics/objects/label/data/label_settings"❫
❪"code/utilities/data_structures/graphics/objects/label/data/positioned_label"❫
❪"code/utilities/data_structures/graphics/objects/cursor/label_cursor_selection"❫
❪"code/utilities/data_structures/graphics/objects/mouse/events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/render/elements/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/render/elements/full_color_bitmap_drawer"❫
❪"code/utilities/data_structures/graphics/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui_renders"❫
❪"code/utilities/data_structures/graphics/objects/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
❪"code/utilities/data_structures/dimensions/two_d_dimensions"❫
❪"code/utilities/fonts/bdf/character_maps/character_maps"❫
❪"code/utilities/peripheral/pc/pc_input_state"❫
⚯
❪"code/utilities/data_structures/graphics/text/str_to_bdf_segments"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/time/cycle_clock/cycle_clock_checker"❫
❪"code/utilities/data_structures/graphics/objects/label/label_text_bitmap_getter"❫
❪"code/utilities/data_structures/graphics/objects/label/style/label_style_chooser"❫
❪"code/utilities/data_structures/graphics/objects/label/label_length_getter"❫
❪"code/utilities/data_structures/graphics/objects/cursor/cursor_drawer"❫
❪"code/utilities/colors/color_defaults"❫
⚞⚟

//size it
◀public: static▶ Two_D_Dimensions ☀Get(Label_Settings label)❰
    auto& style = Label_Style_Chooser::Get_Style_To_Use(label);
    return Get(label,style);
    
❱


◀public: static▶  Two_D_Dimensions ☀Get(Label_Settings const& label, Label_Style const& style)❰
    Two_D_Dimensions dim;
    dim.x = Decide_Textbox_Width(label,style);
    dim.y = 15;
    return dim;
❱

◀private: static▶ int ☀Decide_Textbox_Width(Label_Settings const& label, Label_Style const& style)❰

    //derive the width based on the characters of the label
    if (style.width.grow_width){
        const auto SOME_BUFFER_SPACE = 3;
        auto box_width = Label_Length_Getter::Get_Message_Length(label) + SOME_BUFFER_SPACE;
        return box_width;
    }
    
    //derive the width based on a fixed settings
    return style.width.fixed_width;
❱