class
⚯
⚞⚟



//FULL_DRAW
◀public: static▶ Frame_Elements ☀Full_Draw(Character_Maps const& font_chars, Positioned_Label & label, Pc_Input_State const& pc_input)❰
    return Full_Draw(font_chars,label.pos,label.state,pc_input);
❱
◀public: static▶ Frame_Elements ☀Full_Draw(Character_Maps const& font_chars, Position pos, Label_Settings & label, Pc_Input_State const& pc_input)❰
    Frame_Elements elements;
    
    //label events
    Label_Apply_Events::Event_It(font_chars,pos,label,pc_input,true);
    
    //draw label
    elements.types += Draw(font_chars,pos,label,pc_input.mouse).types;
    
    return elements;
❱

//DRAW IT
◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Positioned_Label & label, Mouse_State const& mouse_state)❰
    return Draw(font_chars,label.pos,label.state,mouse_state);
❱
◀public: static▶ Frame_Elements ☀Draw(Character_Maps const& font_chars, Position pos, Label_Settings & label, Mouse_State const& mouse_state)❰
    
    Frame_Elements elements;
    
    //convert strings to bitmap representations
    auto text = Get_Position_Adjusted_Bitmap(font_chars,pos,label);
    
    
    //decide box dimensions
    auto& style = Label_Style_Chooser::Get_Style_To_Use(label);
    Decide_Label_Box_Dimensions(font_chars,label,style);
    

    //draw and handle backdrop
    Set_Label_Properties_Based_On_Events(label,label.events,mouse_state);
    Draw_Rectangle_Portion(elements,text,pos,style);
    
    
    //adjust for message bitmap and print it
    elements.types.emplace_back(text);
    
    //draw cursor
    elements.types += Get_Position_Adjusted_Cursor(font_chars,pos,label,style,label.events,mouse_state).types;
    
    
    return elements;
❱





//utility



◀private: static▶ void ☀Adjust_Position(Position & pos)❰

    int x_adjusted_label_draw = 2;
    int y_adjusted_label_draw = 10;

    //adjust for label backdrop
    pos.y += y_adjusted_label_draw;
    pos.x += x_adjusted_label_draw;
❱


◀private: static▶ Frame_Elements ☀Get_Position_Adjusted_Cursor(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Style const& style, Mouse_Events const& events, Mouse_State const& mouse_state)❰

    Adjust_Position(pos);
    Adjust_Cursor_Selection(font_chars,pos,label,style,label.events,mouse_state);
    return Cursor_Drawer::Draw_Cursor(pos,label);
❱

◀private: static▶ void ☀Adjust_Cursor_Selection(Character_Maps const& font_chars, Position pos, Label_Settings & label, Label_Style const& style, Mouse_Events const& events, Mouse_State const& mouse_state)❰

    //set active properties on the label
    if (mouse_state.left.clicked){
        if (events.state.left.clicked){
            label.cursors.cursors.clear();
            auto s = get_cursor_selection_based_on_click(font_chars,events.state.pos,pos,label,style);
            label.cursors.cursors.emplace_back(s);
        }
        else{
            label.cursors.cursors.clear();
        }
    }

❱






◀private: static▶ Positioned_Full_Color_Bitmap ☀Get_Position_Adjusted_Bitmap(Character_Maps const& font_chars, Position pos, Label_Settings & label)❰
    Adjust_Position(pos);
    auto text = Get_Text_Bitmap(font_chars,pos,label);
    return text;
❱
◀private: static▶ Positioned_Full_Color_Bitmap ☀Get_Text_Bitmap(Character_Maps const& font_chars, Position pos, Label_Settings & label)❰
    Positioned_Full_Color_Bitmap text;
    text.bitmap = Label_Text_Bitmap_Getter::Get_Width_Adjusted_Text_Bitmap(font_chars,label);
    text.pos = pos;
    return text;
❱


◀private: static▶ void ☀Set_Label_Properties_Based_On_Events(Label_Settings & label, Mouse_Events const& events, Mouse_State const& mouse_state)❰

    //set hover properties on the label
    label.user_state.is_hovered = events.in_position;
    
    //set active properties on the label
    if (mouse_state.left.clicked){
        if (events.state.left.clicked){
            label.user_state.is_active = true;
        }
        else{
            label.user_state.is_active = false;
        }
    }
    
❱

◀private: static▶ void ☀Draw_Rectangle_Portion(Frame_Elements & elements, Positioned_Full_Color_Bitmap & bitmap, Position pos, Label_Style const& style)❰
    
    bitmap.bitmap.color_fill = style.text;
    Positioned_Rectangle_Settings settings;
    settings.shape = style.box;
    settings.pos = pos;
    elements.types.emplace_back(settings);
❱

◀private: static▶ void ☀Decide_Label_Box_Dimensions(Character_Maps const& font_chars, Label_Settings & label, Label_Style const& style)❰

    
    auto dim = Label_Dimension_Getter::Get(label,style);
    
    
    
    //set these box dimensions for all state styles of the label
    label.styles.regular_nonactive.box.dimensions.width      = dim.x;
    label.styles.regular_nonactive.box.dimensions.height     = dim.y;
    label.styles.hovered_active.box.dimensions.width  = dim.x;
    label.styles.hovered_active.box.dimensions.height = dim.y;
    label.styles.regular_active.box.dimensions.width      = dim.x;
    label.styles.regular_active.box.dimensions.height     = dim.y;
    label.styles.hovered_nonactive.box.dimensions.width  = dim.x;
    label.styles.hovered_nonactive.box.dimensions.height = dim.y;

    label.styles.regular_nonactive_disabled.box.dimensions.width      = dim.x;
    label.styles.regular_nonactive_disabled.box.dimensions.height     = dim.y;
    label.styles.hovered_active_disabled.box.dimensions.width  = dim.x;
    label.styles.hovered_active_disabled.box.dimensions.height = dim.y;
    label.styles.regular_active_disabled.box.dimensions.width      = dim.x;
    label.styles.regular_active_disabled.box.dimensions.height     = dim.y;
    label.styles.hovered_nonactive_disabled.box.dimensions.width  = dim.x;
    label.styles.hovered_nonactive_disabled.box.dimensions.height = dim.y;
❱

◀private: static▶ Label_Cursor_Selection ☀get_cursor_selection_based_on_click(Character_Maps const& font_chars, Position click_pos, Position pos, Label_Settings & label, Label_Style const& style)❰
    
    
    Label_Cursor_Selection s;
    s.label_cursor = style.cursor_style;
    
    int width_covered = 0;
    bool found = false;
    auto segments = Str_To_Bdf_Segments::Convert(font_chars.segments.lookup,label.message);
    for (size_t i = 0; i < segments.size(); ++i){
        pos.x += segments[i].d_width_x;
        width_covered = segments[i].d_width_x;
        if (pos.x > click_pos.x){
            s.label_index = i;
            found = true;
            break;
        }
    }
    
    if (!found){
        s.label_index = 0;
    }
    
    int diff = std::abs(pos.x - click_pos.x);
    if (diff >= width_covered/2){
        s.label_index -= 1;
    }
    
    
    return s;
❱




