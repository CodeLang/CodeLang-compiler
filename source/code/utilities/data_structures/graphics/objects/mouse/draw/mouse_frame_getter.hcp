class
⚯
⚞⚟

◀public: static▶ Frame_Elements ☀Get(Ide_Settings & settings, Mouse_State const& mouse)❰
    Frame_Elements elements;
    Render_Mouse_Components(elements,settings,mouse);
    return elements;
❱

◀private: static▶ void ☀Render_Mouse_Components(Frame_Elements & elements, Ide_Settings & settings, Mouse_State const& mouse)❰

    //the transparent box created by clicking and dragging the mouse
    Mouse_Selection_Drawer::Draw(elements,settings,mouse);
    
    //the actual global mouse cursor
    settings.desktop.mouse.mouse.bitmap.pos = mouse.pos;
    elements.types.emplace_back(settings.desktop.mouse.mouse.bitmap);

    // possible mouse cordinates floading near the global mouse.
    Possibly_Add_Mouse_Coordinates(elements,settings,mouse);
❱

◀private: static▶ void ☀Possibly_Add_Mouse_Coordinates(Frame_Elements & elements, Ide_Settings & settings, Mouse_State const& mouse)❰

    if (settings.desktop.mouse.mouse.draw_coordinates)
    {

        Positioned_Full_Color_Bitmap coordinates;
        std::string label = "[";
        label += std::to_string(mouse.pos.x);
        label += ",";
        label += std::to_string(mouse.pos.y);
        label += "]";
        coordinates.bitmap = Text_To_Bitmap::Convert(settings.desktop.unilang_font_lookup,label);
        coordinates.pos = mouse.pos;
        coordinates.pos.y -= 5;
        coordinates.pos.x += 5;
        elements.types.emplace_back(coordinates);
    }
❱