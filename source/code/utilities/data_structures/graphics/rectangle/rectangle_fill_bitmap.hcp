class
⚯
⚞⚟


//create a shaded rectangle
◀public: static▶ Multi_Color_Bitmap ☀Convert(Position pos, Shade_Rectangle_Settings const &settings)❰
    return Convert(pos,settings.colors,settings.dimensions);
❱

◀public: static▶ Multi_Color_Bitmap ☀Convert(Position pos, Rectangle_Shade_Colors const& colors2, Rectangle_Dimensions const& dimensions)❰
    Multi_Color_Bitmap bitmap;
    auto colors = Color_Transitioner::Transition_Colors(colors2.fill,dimensions.width);
    
    Pixel_Settings p_settings;
    //p_settings.pos = po;
    p_settings.pos.x = 0;
    p_settings.pos.y = 0;
    for (auto const& c: colors){
      p_settings.color_fill = c;
      for (size_t i = 0; i < dimensions.height; ++i){
        bitmap.pixels.emplace_back(p_settings);
        p_settings.pos.y++;
      }
      p_settings.pos.y = 0;
      p_settings.pos.x++;
    }
  return bitmap;
❱
