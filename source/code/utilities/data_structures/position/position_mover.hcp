class
⚯
⚞⚟

◀public: static▶ void ☀Move_In_Direction(Position & point, Compass_Direction_Diagnonal const& dir)❰


    Compass_Direction_Diagnonal_Movement move;
    move.magnitude = 1;
    move.direction = dir;
    return Move_In_Direction(point,move);
❱

◀public: static▶ void ☀Move_In_Direction(Position & point, Compass_Direction_Diagnonal_Movements const& dirs)❰

    for (auto const& it: dirs.movements){
        Move_In_Direction(point,it);
    }
❱

◀public: static▶ std::vector<Position> ☀Get_Positions_From_Movement(Position & point, Compass_Direction_Diagnonal_Movement const& dir)❰
    std::vector<Position> results;
    
    for (size_t i = 0; i < dir.magnitude; ++i){
        Move_In_Direction_Amount(point,dir.direction,1);
        results.emplace_back(point);
    }
    
    
    return results;
❱

◀public: static▶ void ☀Move_In_Direction(Position & point, Compass_Direction_Diagnonal_Movement const& dir)❰

    Move_In_Direction_Amount(point,dir.direction,dir.magnitude);
❱

◀public: static▶ void ☀Move_In_Direction_Amount(Position & point, Compass_Direction_Diagnonal const& dir, int amount)❰
    if (dir == Compass_Direction_Diagnonal::NORTH){
        point.y += amount;
        return;
    }
    if (dir == Compass_Direction_Diagnonal::SOUTH){
        point.y -= amount;
        return;
    }
    
    if (dir == Compass_Direction_Diagnonal::WEST){
        point.x -= amount;
        return;
    }
    if (dir == Compass_Direction_Diagnonal::EAST){
        point.x += amount;
        return;
    }
    
    if (dir == Compass_Direction_Diagnonal::NORTH_WEST){
        point.y += amount;
        point.x -= amount;
        return;
    }
    if (dir == Compass_Direction_Diagnonal::SOUTH_WEST){
        point.y -= amount;
        point.x -= amount;
        return;
    }
    if (dir == Compass_Direction_Diagnonal::NORTH_EAST){
        point.y += amount;
        point.x += amount;
        return;
    }
    if (dir == Compass_Direction_Diagnonal::SOUTH_EAST){
        point.y -= amount;
        point.x += amount;
        return;
    }
❱
◀public: static▶ Position ☀As_Moved_Direction(Position point, Compass_Direction_Diagnonal_Movement const& dir)❰
    Move_In_Direction(point,dir);
    return point;
❱