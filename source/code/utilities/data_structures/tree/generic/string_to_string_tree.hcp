class
❪iostream❫
❪fstream❫
❪string❫
❪utility❫
❪vector❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
⚯
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/types/strings/observers/counters/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/types/tree/converters/depth_list"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
⚞⚟


//assume string representation of tree is like:
//o
//.o
//.o
//..o
//...o
//.o
//
◀public: static▶ String_Tree ☀Convert(std::string str) ❰

    //convert string representation into a list of strings with depth
    trim(str);
    auto lines = Split_Into_Parts_From_Newline(str);
    
    for (auto const& it: lines){
        std::cout << it << std::endl;
    }
    auto depth_list = Convert_To_String_Depths(lines);

    //convert to tree
    String_Tree tree;
    tree.nodes = from_depth_list(depth_list);
    
    return tree;
❱

◀private: static▶ std::vector<std::pair<int,std::string>> ☀Convert_To_String_Depths(std::vector<std::string> const& lines) ❰

    std::vector<std::pair<int,std::string>> results;
    for (auto it: lines){
        
        //trim off the indent characters to get the depth and store it with the label
        auto depth = Starts_With_How_Many_Dots(it);
        Remove_First_N_Chars(it,depth);
        results.emplace_back(depth,it);
    }
    return results;
❱
