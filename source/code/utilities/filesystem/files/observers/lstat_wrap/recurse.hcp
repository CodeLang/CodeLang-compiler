class
❪iostream❫
❪boost/asio/thread_pool.hpp❫
❪boost/asio/post.hpp❫
❪thread❫
❪memory❫
❪filesystem❫
❪boost/asio/post.hpp❫
❪"code/utilities/execution/thread_pool_getter"❫
❪"code/utilities/filesystem/files/observers/lstat_wrap/lib"❫
⚯
⚞⚟



◀public: static▶ std::unordered_map<std::string,struct stat> ☀RecursiveLstat(std::string const& path_to_file)❰
  
  std::unordered_map<std::string,struct stat> m;
  
  std::filesystem::recursive_directory_iterator dirpos{ path_to_file };
  std::vector<std::filesystem::path> paths;
  std::copy(begin(dirpos), end(dirpos), std::back_inserter(paths));
  std::mutex mut; // we need some blocking mechanism for the output...
  
  
  std::for_each(std::begin(paths), std::end(paths), [&](const std::filesystem::path& p) {
      auto stat = Lstat(p.string());
      {
        std::unique_lock<std::mutex> lock(mut);
        m.insert({p,stat});
      }
  });
  
  return m;
❱


//makes no sense; don't do this.  need to parallelize from within for_each
◀public: static▶ std::unordered_map<std::string,struct stat> ☀RecursiveLstatParallel(std::string const& path_to_file)❰
  std::unordered_map<std::string,struct stat> m;
  
  std::filesystem::recursive_directory_iterator dirpos{ path_to_file };
  std::vector<std::filesystem::path> paths;
  std::copy(begin(dirpos), end(dirpos), std::back_inserter(paths));
  
  std::mutex mut; // we need some blocking mechanism for the output...
  
  auto pool = Thread_Pool_Getter::Get_Max();
  std::for_each(std::begin(paths), std::end(paths), [&](const std::filesystem::path& p) {
    
      boost::asio::post(*pool, [&]() {
          auto stat = Lstat(p.string());
          {
            std::unique_lock<std::mutex> lock(mut);
            m.insert({p,stat});
          }
      });
  });
  
  pool->join();
  
  return m;
❱

◀private: static▶ void ☀RecursiveLstatParallel(std::unordered_map<std::string,struct stat> & m, std::mutex & mut, std::filesystem::path const& path_to_file)❰
  
  //std::cout << path_to_file.string() << std::endl;
  std::filesystem::recursive_directory_iterator dirpos{ path_to_file };
  
    auto stat2 = Lstat(path_to_file.string());
    {
        std::unique_lock<std::mutex> lock(mut);
        m.insert({path_to_file.string(),stat2});
    }
  
  
  for(auto& p: std::filesystem::recursive_directory_iterator(path_to_file)){
        auto stat = Lstat(p.path().string());
        {
            std::unique_lock<std::mutex> lock(mut);
            m.insert({p.path().string(),stat});
        }
  }
❱

◀private: static▶ std::vector<std::filesystem::path> ☀shallow_dirs(std::string const& path_to_file)❰
    
    std::vector<std::filesystem::path> results;
    for(auto const& p: std::filesystem::directory_iterator(path_to_file)){
        results.emplace_back(p.path());
    }
    return results;
❱
◀private: static▶ std::vector<std::filesystem::directory_entry> ☀shallow_dirents(std::string const& path_to_file)❰
    
    std::vector<std::filesystem::directory_entry> results;
    for(auto const& p: std::filesystem::directory_iterator(path_to_file)){
        results.emplace_back(p);
    }
    return results;
❱

◀public: static▶ std::unordered_map<std::string,struct stat> ☀RecursiveLstatParallel2(std::string const& path_to_file)❰
    std::unordered_map<std::string,struct stat> m;
    std::mutex mut;
    
    auto pool = Thread_Pool_Getter::Get_Max();
    auto dirs = shallow_dirents(path_to_file);
    for(auto const& p: dirs){
        if (p.is_directory()){
            boost::asio::post(*pool, [&m,&mut,p]() {
                RecursiveLstatParallel(m,mut,p.path());
            });
        }
        else{
            
            auto stat = Lstat(p.path().string());
            {
                std::unique_lock<std::mutex> lock(mut);
                m.insert({p.path().string(),stat});
            }
        }
    }
    pool->join();
    
    return m;
❱