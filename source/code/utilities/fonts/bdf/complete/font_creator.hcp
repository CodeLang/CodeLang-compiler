class
❪fstream❫
❪string❫
❪"code/tools/transcompilers/unilang/tokens/generic_token"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/fonts/bdf/settings/bdf_settings"❫
❪"code/utilities/fonts/bdf/glyph/glyphs"❫
❪"code/utilities/fonts/bdf/complete/unilang/unilang_segments"❫
❪"code/utilities/fonts/bdf/complete/font_creation_settings"❫
⚯
❪"code/utilities/fonts/bdf/complete/unilang/unilang_segments"❫
❪"code/tools/transcompilers/unilang/tokens/uniqueness/unique_tokens_checker"❫
❪"code/utilities/fonts/bdf/exporter/bdf_settings_to_format"❫
❪"code/tools/transcompilers/unilang/tokens/get_tokens"❫
❪"code/utilities/filesystem/paths/lib"❫
⚞⚟

◀public: static▶ void ☀Create_Fonts(Font_Creation_Settings const& settings)❰
    
    //get font
    std::string font_str = Font_As_String(settings);
    
    //create all the font files
    for (auto const& path: settings.font_paths){
        Create_Path_If_It_Doesnt_Already_Exist(path);
        std::ofstream outfile(path + settings.font_name + "." + settings.font_format);
        outfile << font_str;
        outfile.close();
    }
    
    //other ubuntu hacks so the font is actually available on the system
    //sudo rm /etc/fonts/conf.avail/70-no-bitmaps.conf
    //sudo fc-cache -f -v
❱

◀private: static▶ std::string ☀Font_As_String(Font_Creation_Settings const& settings)❰
    std::string str;
    
    Bdf_Settings bdf_settings;
    bdf_settings.segments = settings.segments;
    str += Bdf_Settings_To_Format::Convert(bdf_settings);
    
    return str;
❱
