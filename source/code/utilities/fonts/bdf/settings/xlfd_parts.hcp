class
❪string❫
❪vector❫
⚯

⚞⚟

◀
public:
	//XLFD convention
	//https://en.wikipedia.org/wiki/X_logical_font_description
	//For reference, this was generated by FontForge for Profont:
	//FONT -FontForge-ProFont-Medium-R-Normal--11-80-100-100-C-60-ISO10646-1

	//Another example:
	//The following sample is for a 75-dpi, 12-point, Charter font:
	//-bitstream-charter-medium-r-normal--12-120-75-75-p-68-iso8859-1[65 70 80_90]
	//(which also tells the font source that the client is interested only in characters 65, 70, and 80-90.)

	//1. FOUNDRY: Type foundry - vendor or supplier of this font
	std::string foundry = "Unilang";

	//2. FAMILY_NAME: Typeface family
	std::string family_name = "Unilang";

	//3. WEIGHT_NAME: Weight of type
	std::string weight = "Medium";

	//4. SLANT: Slant (upright, italic, oblique, reverse italic, reverse oblique, or "other")
	std::string slant = "R";

	//5. SETWIDTH_NAME: Proportionate width (e.g. normal, condensed, narrow, expanded/double-wide)
	std::string set_width_name = "Normal";

	//6. ADD_STYLE_NAME: Additional style (e.g. (Sans) Serif, Informal, Decorated)
	std::string add_style_name = "";

	//7. PIXEL_SIZE: Size of characters, in pixels; 0 (Zero) means a scalable font
	int pixel_size = 11;

	//8. POINT_SIZE: Size of characters, in tenths of points
	int point_size = 80;

	//9. RESOLUTION_X: Horizontal resolution in dots per inch (DPI), for which the font was designed
	int resoultion_x = 100;

	//10. RESOLUTION_Y: Vertical resolution, in DPI
	int resoultion_y = 100;

	//11. SPACING: monospaced, proportional, or "character cell"
	std::string spacing = "C";

	//12. AVERAGE_WIDTH: Average width of characters of this font; 0 means scalable font
	int average_width = 60;

	//13. CHARSET_REGISTRY: Registry defining this character set
	std::string charset_registry = "ISO10646";

	//14. CHARSET_ENCODING: Registry's character encoding scheme for this set
	std::string charset_encoding = "1";
	
	
	
	//extra settings:
	std::string divider = "-";
▶
