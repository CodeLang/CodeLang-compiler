class
⚯
⚞⚟

◀public: static▶ std::string ☀Format(Gexf_Data const& data, std::map<std::string,nlohmann::json> const& user_data)❰
    std::string file_results = Start(data);
    Append(file_results,Build_Node_Section(data,user_data));
    Append(file_results,Build_Edge_Section(data.node_edge_data));
    Append(file_results,End());
    return file_results;
❱

◀private: static▶ std::string ☀Build_Node_Section(Gexf_Data const& data, std::map<std::string,nlohmann::json> const& user_data)❰

    std::string file_results;
    Append_With_Newline(file_results,"<nodes>");
    for (auto const& node: data.node_edge_data.nodes){
        Append(file_results,"<node ");
        Append_Key_Value(file_results,"id",node);
        Append_Key_Value(file_results,"label",node);
        Append_With_Newline(file_results,">");
        
        Append_With_Newline(file_results,Get_Node_Attributes_For_User(node,data.attrs,user_data));
        
        Append_With_Newline(file_results,"</node>");
    }
    Append_With_Newline(file_results,"</nodes>");
    return file_results;
❱

◀private: static▶ std::string ☀Get_Node_Attributes_For_User(std::string const& id, std::vector<Gexf_Attribute> const& attrs, std::map<std::string,nlohmann::json> const& user_data)❰
    std::string result;
    
    auto found = user_data.find(id);
    if (found != user_data.end()){
        
        //get the json blob (while stepping into the first object name)
        auto json_blob = found->second;
        
        for (size_t i = 0; i < attrs.size(); ++i){
            
            
            std::string attr_value;
            if (attrs[i].type == "string"){
                attr_value = Json_Extractor::Extract_String(json_blob,attrs[i].extract);
            }
            else if (attrs[i].type == "integer"){
                attr_value = std::to_string(Json_Extractor::Extract_Integer(json_blob,attrs[i].extract));
            }
            
            if (!attr_value.empty()){
                
                attr_value = Xml_String_Escaper::As_Escaped(attr_value);
                Append(result,"<attvalue ");
                Append_Key_Value(result,"for",std::to_string(i));
                Append_Key_Value(result,"value",attr_value);
                Append_With_Newline(result," />");
            }
        }
        
        Append_With_Newline(result,"<attvalues>");
        Append_With_Newline(result,"</attvalues>");
    }
    return result;
❱

◀private: static▶ std::string ☀Build_Edge_Section(Node_Edge_Data const& node_edge_data)❰

    bool record_weight = true;
    bool record_time = true;
    
    std::string file_results;
    Append_With_Newline(file_results,"<edges>");
    for (auto const& edge: node_edge_data.edges.hash_table){
        auto e = From_JSON_String<Timed_Connection>(edge.first);
        Append(file_results,"<edge ");
        Append_Key_Value(file_results,"source",e.connection.source);
        Append_Key_Value(file_results,"target",e.connection.target);
        
        auto start_epoch = Rfc333_Datetime_To_Epoch_Converter::Convert(e.interval.start);
        auto end_epoch = Rfc333_Datetime_To_Epoch_Converter::Convert(e.interval.end);
        
        //why is google inconsistent about when a meeting started / ended?
        //i.e. why does google say a meeting ended before it even started?
        //not sure. but gephi needs it to be consistent so we'll flip them.
        if (end_epoch < start_epoch){
            std::swap(start_epoch,end_epoch);
        }
        
        
        if (record_time){
            Append_Key_Value(file_results,"start",Epoch_To_YYY_MM_DD(start_epoch));
            Append_Key_Value(file_results,"end",Epoch_To_YYY_MM_DD(end_epoch));
        }
        
        if (record_weight){
            Append_Key_Value(file_results,"weight",std::to_string(edge.second));
        }
        Append_With_Newline(file_results,"/>");
    }
    Append_With_Newline(file_results,"</edges>");
    
    return file_results;
❱


◀private: static▶ std::string ☀Epoch_To_YYY_MM_DD(unsigned long epoch)❰
    time_t rawtime = static_cast<time_t>(epoch);
    struct tm  ts;
    char       buf[80];
    ts = *localtime(&rawtime);
    strftime(buf, sizeof(buf), "%Y-%m-%d", &ts);
    std::string result = buf;
    return result;
❱

◀private: static▶ std::string ☀Start(Gexf_Data const& data)❰
    
        //settings
        std::string graph_mode = Derive_Graph_Mode(data.node_edge_data);
        std::string edge_type = Derive_Edge_Type(data.node_edge_data);

        std::string str;
        
        //schema
        Append_With_Newline(str,"<?xml version=\"1.1\" encoding=\"UTF-8\"?>");
        Append_With_Newline(str,"<gexf xmlns=\"http://www.gexf.net/1.3draft\"");
        Append_With_Newline(str,"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
        Append_With_Newline(str,"xsi:schemaLocation=\"http://www.gexf.net/1.3draft");
        Append_With_Newline(str,"http://www.gexf.net/1.3draft/gexf.xsd\"");
        Append_With_Newline(str,"version=\"1.3\">");
        
        //meta
        Append(str,"<meta ");
        Append_Key_Value(str,"lastmodifieddate",data.metadata.modification_date);
        Append_With_Newline(str,">");
        Append_With_Newline(str,"<creator>");
        Append_With_Newline(str,data.metadata.creator);
        Append_With_Newline(str,"</creator>");
        Append_With_Newline(str,"<description>");
        Append_With_Newline(str,data.metadata.description);
        Append_With_Newline(str,"</description>");
        Append_With_Newline(str,"<keywords>");
        Append_With_Newline(str,Get_As_Comma_Seperated_String(data.metadata.keywords));
        Append_With_Newline(str,"</keywords>");
        Append_With_Newline(str,"</meta>");
        
        //graph
        Append(str,"<graph ");
        Append_Key_Value(str,"mode",graph_mode);
        Append_Key_Value(str,"defaultedgetype",edge_type);
        Append_Key_Value(str,"timeformat",data.metadata.time_format);
        Append_With_Newline(str,">");
        
        //attribute definitions
        Append_With_Newline(str,"<attributes class=\"node\">");
        for (size_t i = 0; i < data.attrs.size(); ++i){
            Append(str,"<attribute ");
            Append_Key_Value(str,"id",std::to_string(i));
            Append_Key_Value(str,"title",data.attrs[i].title);
            Append_Key_Value(str,"type",data.attrs[i].type);
            Append_With_Newline(str,">");
            
            Append(str,"<default>");
            Append(str,data.attrs[i].default_value);
            Append_With_Newline(str,"</default>");
            Append_With_Newline(str,"</attribute>");
            
            
        }
        Append_With_Newline(str,"</attributes>");
    
    
        return str;
❱


◀private: static▶ std::string ☀Derive_Graph_Mode(Node_Edge_Data const& node_edge_data)❰

    // The graph is dynamic if there is timing information encoded.
    // We can just look at a single element to decide this.
    // Typically all the elements have intervals or none of them do.
    if (node_edge_data.edges.hash_table.empty()){
        
        //not sure
        return "slice";
    }


    auto edge = *node_edge_data.edges.hash_table.begin();
    auto e = From_JSON_String<Timed_Connection>(edge.first);
    if (!e.interval.start.empty() && !e.interval.end.empty()){
        return "dynamic";
    }
    
    return "static";
❱
◀private: static▶ std::string ☀Derive_Edge_Type(Node_Edge_Data const& node_edge_data)❰

    for (auto const& edge: node_edge_data.edges.hash_table){
        auto e = From_JSON_String<Timed_Connection>(edge.first);
        if (e.connection.type == Edge_Type::DIRECTED){
            return "directed";
        }
        else if (e.connection.type == Edge_Type::UNDIRECTED){
            return "undirected";
        }
    }

    //not sure
    return "mutual";
❱




◀private: static▶ std::string ☀End()❰
    std::string str;
    Append_With_Newline(str,"</graph>");
    Append_With_Newline(str,"</gexf>");
    return str;
❱