class
❪string❫
❪vector❫
❪utility❫
⚯
❪iostream❫
❪"code/utilities/types/vectors/creators/lib"❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/types/strings/transformers/appending/lib"❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/program/wrappers/nvprune/nvprune_finder"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
❪"code/utilities/types/strings/transformers/trimming/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
⚞⚟

◀public: static▶ void ☀Prune(std::string const& filename, std::vector<std::string> const& keep_archs, std::string const& filename_out)❰
    
    auto command = Get_Command(filename,keep_archs,filename_out);
    auto command_results = Get_Each_Line_Of_Shell_Command(command);
❱

◀public: static▶ std::string ☀Get_Command(std::string const& filename, std::vector<std::string> const& keep_archs, std::string const& filename_out)❰
    std::string command;
    command += Nvprune_Finder::Find_Binary();
    command += " ";
    for (auto const& it: keep_archs){
        command += "-gencode code=";
        command += "\"" + it + "\"";
        command += ",";
        command += "arch=";
        command += "\"" + string_replace_all(it,"sm","compute") + "\"";
        command += " ";
    }
    command += " " + filename;
    command += " -o ";
    command += filename_out;
    return command;
❱