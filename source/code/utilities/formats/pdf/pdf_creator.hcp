class
❪string❫
❪iostream❫
❪cstdlib❫
❪iostream❫
❪vector❫
❪"code/tools/transcompilers/unilang/structure/model/inlined_structures"❫
❪"code/tools/transcompilers/unilang/main/program_input"❫
❪"code/utilities/formats/pdf/pdf_settings"❫
⚯
❪"code/tools/transcompilers/unilang/main/root_settings/root_settings_getter"❫
❪"code/tools/transcompilers/unilang/compiler-frontends/markdown/markdown_str_getter"❫
❪"code/utilities/types/general/lib"❫
❪"code/utilities/program/common_actions/exits/lib"❫
❪"code/utilities/filesystem/files/creating/lib"❫
❪"code/utilities/formats/pdf/latex_template_getter"❫
❪"code/utilities/formats/pdf/csl_template_getter"❫
❪"code/utilities/program/call/lib"❫
❪"code/utilities/filesystem/files/temp/temp_file"❫
❪"code/utilities/filesystem/files/temp/existing_temp_file"❫
❪"code/utilities/program/call/process_spawn/process_spawner"❫
⚞⚟

//garbage deps (needs fixed)
//sudo apt install texlive-latex-base
//sudo apt-get install pandoc
//sudo apt-get install texlive-fonts-recommended
//sudo apt-get install xzdec
//tlmgr install xzdec
//sudo tlmgr option repository ftp://tug.org/historic/systems/texlive/2017/tlnet-final
//tlmgr install xcolor

◀public: static▶ void ☀Create_Pdf(Structure const& structure, Pdf_Settings const& pdf_settings)❰
    
    //get settings
    Program_Input input;
    input.settings = Root_Settings_Getter::Get();
    auto contributors = input.settings.compiler_settings.trevor.contributors;
    auto md_settings = input.settings.compiler_settings.trevor.settings.foreign_language.markdown;
    
    //generate latex template
    auto temp1_ = Temp_File(pdf_settings.latex_template,Latex_Template_Getter::Get(),false);
    
    //generate csl template
    auto temp2_ = Temp_File(pdf_settings.csl_template,Csl_Template_Getter::Get_Chicago_Fullnote(),false);
    
    md_settings.headers.allow_labeled_image_titles = false;
    md_settings.headers.h1_as_details_tags = false;
    md_settings.headers.h1_as_summary_tags = false;
    md_settings.tables.print = true;
    md_settings.tables.as_list = true;
    
    auto result = Markdown_Str_Getter::Get(structure,contributors,md_settings);
    auto temp3_ = Temp_File(pdf_settings.md_format,result,false);
    
    
    auto command = Build_Pandoc_Command(pdf_settings);
    
    //std::cout << command << std::endl;
    auto results = Process_Spawner::Execute_And_Get_Back_Results(command);
    
    
    if (results.return_code != 0){
        std::cerr << results.stderr << std::endl;
        Exit_With_Error("failed to create pdf");
    }
❱

◀private: static▶ std::string ☀Build_Pandoc_Command(Pdf_Settings const& pdf_settings)❰

    std::vector<std::pair<std::string,std::string>> vars;
    vars.emplace_back("mainfont",pdf_settings.mainfont);
    vars.emplace_back("sansfont",pdf_settings.sansfont);
    vars.emplace_back("monofont",pdf_settings.monofont);

    std::string command = "pandoc --toc -V -s ";
    
    if (!pdf_settings.bibtex_file.empty()){
        command += "--bibliography ";
        command += pdf_settings.bibtex_file;
        //command += ".bib ";
        command += " --filter pandoc-citeproc ";
        
        //both didn't work
        //command += " --biblatex ";
        //command += " --natbib ";
        
        //seems to be a part of latex template but doesn't work
        command += " -V biblio-title=Bibliography ";
        
        command += " --csl ";
        command += pdf_settings.csl_template;
        command += " ";
        
    }
    
    //add template
    command += "--template=";
    command += pdf_settings.latex_template;
    command += " ";
    
    //add vars
    for (auto const& var: vars){
        command += "--variable ";
        command += var.first;
        command += "=\"";
        command += var.second;
        command += "\" ";
    }
    
    //font size
    command += "--variable fontsize=";
    command += std::to_string(pdf_settings.font_size);
    
    command += "pt ";
    command += "--toc-depth=";
    command += std::to_string(pdf_settings.toc_depth);
    command += " ";
    //command += "--latex-engine=xelatex ";
    command += " -f markdown+implicit_figures -t latex ";
    command += "-o ";
    command += pdf_settings.resulting_pdf;
    command += " ";
    command += pdf_settings.md_format;
    
    return command;
❱
