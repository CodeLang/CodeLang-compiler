class
⚯
⚞⚟

◀public: static▶ int_grid ☀Generate()❰

    int row_amount = 6;
    int col_amount = 6;
    int color_range = 5;
    
    
    int_grid x = Get_All_Negative_1_Grid(row_amount,col_amount);
    for (int i = 0; i < col_amount; ++i){
        
        std::vector<int> row;
        for (int j = 0; j < row_amount; ++j){
            x[i][j] = get_random_number(color_range, x, i, j, row_amount, col_amount);
        }
        x.emplace_back(row);
    }
    
    
    return x;
❱


◀public: static▶ int_grid ☀Get_All_Negative_1_Grid(int row_amount, int col_amount)❰

    int_grid x;
    for (int i = 0; i < col_amount; ++i){
        
        std::vector<int> row;
        for (int j = 0; j < row_amount; ++j){
            row.emplace_back(-1);
        }
        x.emplace_back(row);
    }
    
    
    return x;
❱

◀private: static▶ int ☀get_random_number(int max, int_grid const& grid, int x, int y, int row_amount, int col_amount)❰

    // the easiest way to get a random number is to just pick one without regard of neighbors
    // this is nice, but for the filler game, it leads big blobs to be stolen.
    // the normal game does not seem to do this.
    //return RandomIntFromRange(0,max-1);

    //pick a number that is unique to your neighbors
    auto neighbors = get_neighbor_values(grid,x,y,row_amount,col_amount);
    int rnd = RandomIntFromRange(0,max-1);
    while (In_Vector(neighbors,rnd)){
        rnd = RandomIntFromRange(0,max-1);
    }
    return rnd;

❱

◀private: static▶ std::vector<int> ☀get_neighbor_values(int_grid const& grid, int x, int y, int row_amount, int col_amount)❰
    std::vector<int> found;
    if (x > 0) {
        found.emplace_back(grid[x-1][y]);
    }
    if (x < col_amount-1){
        found.emplace_back(grid[x+1][y]);
    }
    
    if (y > 0) {
        found.emplace_back(grid[x][y-1]);
    }
    if (y < row_amount-1){
        found.emplace_back(grid[x][y+1]);
    }
    
    return found;

❱



