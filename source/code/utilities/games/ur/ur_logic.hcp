class
❪string❫
❪iostream❫
❪string❫
❪"code/utilities/games/ur/state/ur_game_state"❫
❪"code/utilities/types/map/lib"❫
❪"code/utilities/types/sets/lib"❫
❪"code/utilities/types/unordered_set/lib"❫
❪"code/utilities/random/dice/n_sided_dice"❫
⚯
⚞⚟

◀public: static▶ std::vector<int> ☀Player_Piece_Choices(Ur_Game_State const& x, int const& move_amount)❰
    std::vector<int> available_pieces;
    
    for (size_t i = 0; i < x.players[x.player_turn].pieces.size(); ++i){
        if (Is_Piece_Moveable(x,x.players[x.player_turn].pieces[i],move_amount)){
            available_pieces.emplace_back(i);
        }
    }
    
    return available_pieces;
❱

◀private: static▶ bool ☀Is_Piece_Moveable(Ur_Game_State const& x, Ur_Player const& piece, int const& move_amount)❰

    
    //no piece is moveable 0 spaces.
    //you roll a 0, you don't really get a turn
    if (move_amount == 0){
        return false;
    }
    

    //the path is invalid (going off the board maybe?)
    //you have to land exactly on a space given the movement amount
    auto ends_at_spot = Follow_Path_Or(x.players[x.player_turn].path,piece.current_spot,move_amount,std::string(""));
    if (ends_at_spot.empty()){
        return false;
    }
    
    
    //if its a shared spot, you are okay to land there
    if (Exists_In_Set(x.shared_spots,ends_at_spot)){
        return true;
    }
    
    
    //you can't land on your own piece
    for (auto const& it: x.players[x.player_turn].pieces){
        if (ends_at_spot == it.current_spot){
            return false;
        }
    }
     
    
    //you can't land on other players if they are in a safe zone
    for (int i =0 ; i < x.players.size(); ++i){
        if (i != x.player_turn){
            for (auto const& it: x.players[i].pieces){
                if (ends_at_spot == it.current_spot){
                    if (Exists_In_Set(x.safe_spots,ends_at_spot)){
                        return false;
                    }
                }
            }
        }
    }
    
    
    return true;
❱

◀private: static▶ void ☀Move_Piece(Ur_Game_State const& x, Ur_Player & piece, int const& move_amount)❰
    auto ends_at_spot = Follow_Path_Or(x.players[x.player_turn].path,piece.current_spot,move_amount,std::string(""));
    
    if (ends_at_spot == ""){
        std::cerr << "should not happen" << std::endl;
        exit(0);
    }
    
    piece.current_spot = ends_at_spot;
❱