class
❪string❫
❪iostream❫
❪set❫
❪"code/utilities/gcal/gcal_credentials"❫
⚯
❪"code/utilities/shell/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟



◀public: static▶ std::set<nlohmann::json> ☀Get_Pittsburgh_Rooms(Gcal_Credentials & creds)❰
    std::string url = "https://www.googleapis.com/calendar/v3/users/me/calendarList?maxResults=250&showDeleted=True&showHidden=True&access_token=";
    url += creds.access_token;
    
    auto j = Token_Refreshing_Gcal_Query(url,creds);
    
    
    std::set<nlohmann::json> rooms;
    Insert_Rooms_That_Start_With(rooms,j,"PIT");
    
    while (j.find("nextPageToken") != j.end()) {
        
        Html_Fetch_Settings settings;
        settings.url = url;
        settings.url += "&pageToken=";
        settings.url += j["nextPageToken"];
        
        auto j = Token_Refreshing_Gcal_Query(url,creds);
        Insert_Rooms_That_Start_With(rooms,j,"PIT");
    }
    
    return rooms;
❱

◀private: static▶ void ☀Insert_Rooms_That_Start_With(std::set<nlohmann::json> & rooms, nlohmann::json const& j, std::string const& prefix)❰
    for (auto const& it: j["items"]){
        if (Begins_With(it["summary"],prefix)){
            rooms.insert(it);
        }
    }
❱


◀private: static▶ nlohmann::json ☀Token_Refreshing_Gcal_Query(std::string const& url, Gcal_Credentials & creds)❰
    Html_Fetch_Settings settings;
    settings.url = url;
    auto j = Extract_Web_Json(settings);
    
    //error (assume the token has expired)
    while (j.find("err") != j.end()) {
        Refresh_Token(creds);
        j = Extract_Web_Json(settings);
    }
    return j;
❱


◀private: static▶ void ☀Refresh_Token(Gcal_Credentials & creds)❰

    //construct the url for refreshing our access token
   std::string url = "https://www.googleapis.com/oauth2/v4/token?";
   url += "refresh_token=";
   url += creds.refresh_token;
   url += "&client_id=";
   url += creds.client_id;
   url += "&client_secret=";
   url += creds.client_secret;
   url += "&grant_type=refresh_token";
   
    //query endpoint for new access token
    Html_Fetch_Settings settings;
    settings.url = url;
    settings.post = true;
    auto j = Extract_Web_Json(settings);
    
    //handle cases when we don't get an access token back
    if (j.find("access_token") != j.end()) {
        std::string message = "failed to refresh token\n";
        message += j.dump(4);
        Exit_With_Error(message);
    }
    
    //assuming it works, assign our new access token
    creds.access_token = j["access_token"];
❱


// get all cals
// curl 'https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token=X'

// acl:
// curl 'https://www.googleapis.com/calendar/v3/calendars/thickey@uber.com/acl?access_token=X'
// curl 'https://www.googleapis.com/calendar/v3/calendars/uber.com_4141524161626f756c6576617264656e33373574683230304f4b50686f6e65726f6f6d31706572736f6e2d393932363933@resource.calendar.google.com/acl?access_token=x'


// get events of cal
// curl 'https://www.googleapis.com/calendar/v3/calendars/thickey@uber.com/events?access_token=X'

// settings
// curl 'https://www.googleapis.com/calendar/v3/users/me/settings?access_token=x'
