class
❪string❫
❪iostream❫
❪set❫
❪"code/utilities/gcal/gcal_credentials"❫
❪"code/utilities/gcal/data/gcal_room"❫
⚯
❪"code/utilities/shell/lib"❫
❪"code/utilities/web/lib"❫
❪"code/utilities/exits/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/gcal/gcal_query"❫
⚞⚟



◀public: static▶ std::set<nlohmann::json> ☀Get_Pittsburgh_Rooms(Gcal_Credentials & creds)❰
    return Get_Cals_Whose_Description_Starts_With(creds,"PIT");
❱
◀public: static▶ std::set<nlohmann::json> ☀Get_San_Francisco_Rooms(Gcal_Credentials & creds)❰
    return Get_Cals_Whose_Description_Starts_With(creds,"SFO");
❱

◀public: static▶ Gcal_Room ☀Get_All_Events_Of_Calendar(Gcal_Credentials & creds, std::string const& cal_id)❰
    std::string url = "https://www.googleapis.com/calendar/v3/calendars/";
    url += cal_id;
    url += "/events?maxResults=250&showDeleted=True&showHiddenInvitations=True&singleEvents=False";
    Gcal_Room room;
    
    //do all pagination
    auto x = Query_All_Pages(url,creds);
    
    //extract events as individual json
    if (!x.empty()){
        room.summary = x[0]["summary"];
        room.timeZone = x[0]["timeZone"];
        room.updated = x[0]["updated"];
        for (auto const& it: x){
            for (auto const& e: it["items"]){
                room.events.emplace_back(e);
            }
        }
    }
    return room;
❱

◀private: static▶ std::set<nlohmann::json> ☀Get_Cals_Whose_Description_Starts_With(Gcal_Credentials & creds, std::string const& prefix)❰

    std::string url = "https://www.googleapis.com/calendar/v3/users/me/calendarList?maxResults=250&showDeleted=True&showHidden=True";
    
    //get all of the calendars we subscribe to
    auto results = Query_All_Pages(url,creds);
    
    //filter them by the prefix
    std::set<nlohmann::json> rooms;
    for (auto const& it: results){
        Insert_Rooms_That_Start_With(rooms,it,prefix);
    }
    
    return rooms;
❱

◀private: static▶ std::vector<nlohmann::json> ☀Query_All_Pages(std::string const& url, Gcal_Credentials & creds)❰
    std::vector<nlohmann::json> results;
    auto j = Gcal_Query::Token_Refreshing_Query(url,creds);
    results.emplace_back(j);
    while (j.find("nextPageToken") != j.end()) {
        Html_Fetch_Settings settings;
        settings.url = url;
        settings.url += "&pageToken=";
        settings.url += j["nextPageToken"];
        j = Gcal_Query::Token_Refreshing_Query(settings.url,creds);
        results.emplace_back(j);
        std::cout << "page #" << results.size() << std::endl;
    }
    return results;
❱


◀private: static▶ void ☀Insert_Rooms_That_Start_With(std::set<nlohmann::json> & rooms, nlohmann::json const& j, std::string const& prefix)❰
    for (auto const& it: j["items"]){
        if (Begins_With(it["summary"],prefix)){
            rooms.insert(it);
        }
    }
❱

// acl:
// curl 'https://www.googleapis.com/calendar/v3/calendars/thickey@uber.com/acl?access_token=X'
// curl 'https://www.googleapis.com/calendar/v3/calendars/uber.com_4141524161626f756c6576617264656e33373574683230304f4b50686f6e65726f6f6d31706572736f6e2d393932363933@resource.calendar.google.com/acl?access_token=x'


// get events of cal
// curl 'https://www.googleapis.com/calendar/v3/calendars/thickey@uber.com/events?access_token=X'

// settings
// curl 'https://www.googleapis.com/calendar/v3/users/me/settings?access_token=x'
