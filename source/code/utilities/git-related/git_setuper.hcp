class
❪string❫
❪stdio.h❫
❪curl/curl.h❫
⚯
❪"code/utilities/types/char/lib.hpp"❫
❪"code/utilities/shell/lib.hpp"❫
❪"code/utilities/streams/filestreams/read_all/lib.hpp"❫
❪sys/stat.h❫
❪iostream❫
❪"code/utilities/shell/lib.hpp"❫
❪"code/utilities/filesystem/files/getting/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
⚞⚟


◀public: static▶ void ☀Setup()❰

//setting up and configuring git

//ensure git is installed before using it
print_and_execute("sudo apt-get install -f -y --force-yes --fix-missing git;");
                  
//std::string email = "TrevorJamesHickey@gmail.com";
std::string email = "thickey@uber.com";
std::string user_name = "Trevor Hickey";

//set my identity
print_and_execute("git config --global user.email \"" + email + "\"");
print_and_execute("git config --global user.name \"" + user_name + "\"");

//turn on colors
print_and_execute("git config --global color.ui true");

//set my editor when needed
print_and_execute("git config --global core.editor vim");

//ignore any changes in file modes
//which will probably happen when using chmod
print_and_execute("git config --global core.filemode false");

//remember my password when checking out with https
print_and_execute("git config --global credential.helper \"cache --timeout=999999\"");

//handle line endings correctly based on the operating system
print_and_execute("git config --global core.autocrlf input");

print_and_execute("git config --global push.default simple");
print_and_execute("git config --global core.autocrlf input");

//have pulls automatically do a rebase instead of a merge
print_and_execute("git config --global pull.rebase true");


❱