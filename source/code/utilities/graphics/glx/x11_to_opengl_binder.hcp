class
⚯
⚞⚟

//This is basically done for the case where you need to opengl to draw to an x11 window
//such as when you are making a screensaver for xscreensaver
◀public: static▶ void ☀Bind(Main_X11_State & x11)❰

    X11_To_Opengl_Bind_Settings settings;
    settings.visual_impl = 1;
    settings.context_impl = 1;

    Glx_Data glx = Glx_Data_Getter::Get(x11,settings);

    // Sync to ensure any errors generated are processed.
    XSync(x11.d, false);
    
    // Bind the rendering context to the window
    glXMakeCurrent(x11.d, x11.root, glx.ctx);
    
    // Request that the X window be displayed on the screen
    XMapWindow(x11.d, x11.root);
    
    
    // Be sure to free the FBConfig list allocated by glXChooseFBConfig()
    XFree(glx.fbc);
    
    // Get the window attributes
    //Set viewport to parent window's width/height
    XWindowAttributes wa;
    XGetWindowAttributes(x11.d, x11.root, &wa);
    glViewport(0, 0, wa.width, wa.height);
❱

◀private: static▶ void ☀Check_GLX_With_X11_Is_Possible(Main_X11_State const& x11)❰

    // Make sure OpenGL's GLX extension is supported.  The
    // glXQueryExtension also returns the GLX extension's error base and event
    // base.  For almost all OpenGL programs, this information is irrelevant;
    // hence the use of dummy.
    int dummy = 0;
    if(!glXQueryExtension(x11.d, &dummy, &dummy)){
        std::cerr << "X server has no OpenGL GLX extension" << std::endl;
        exit(-1);
    }
❱




