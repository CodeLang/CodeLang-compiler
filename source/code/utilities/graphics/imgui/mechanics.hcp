class
❪string❫
❪iostream❫
❪"imgui.h"❫
❪"imgui_internal.h"❫
❪"examples/imgui_impl_sdl.h"❫
❪"examples/imgui_impl_opengl3.h"❫
❪GL/gl3w.h❫
❪"SDL.h"❫
❪cstdlib❫
❪iostream❫
⚯
⚞⚟


◀public: static▶ void ☀setup_sdl() ❰
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER) != 0)
    {
        std::cerr << "We weren't able to initialize SDL.\n";
        std::cerr << "Something is incompatible with your display.\n";
        std::cerr << "Here is the SDL error:\n";
        std::cerr << SDL_GetError() << '\n';
        exit(EXIT_FAILURE);
    }
❱

◀public: static▶ std::string ☀decide_sdl_glsl_version()❰
    std::string version;

#if __APPLE__
    // GL 3.2 Core + GLSL 150
    version = "#version 150";
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG); // Always required on Mac
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
#else
    // GL 3.0 + GLSL 130
    version = "#version 130";
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, 0);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
#endif

    return version;
❱

◀public: static▶ SDL_Window *☀create_main_window(std::string const &window_name)❰
    int double_buffer_num = 1;
    int depth_size = 24;
    int stencil_size = 8;
    int display_mode = 0;
    
    // Setup window
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, double_buffer_num);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, depth_size);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, stencil_size);
    SDL_DisplayMode current;
    SDL_GetCurrentDisplayMode(display_mode, &current);
    SDL_Window *window = SDL_CreateWindow(window_name.c_str(),
                                          SDL_WINDOWPOS_CENTERED,
                                          SDL_WINDOWPOS_CENTERED,
                                          1280,
                                          720,
                                          SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);
    return window;
❱

◀public: static▶ bool ☀poll_for_events(SDL_Window *window)
❰
    // Poll and handle events (inputs, window resize, etc.)
    // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your
    // inputs.
    // - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
    // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
    // Generally you may always pass all inputs to dear imgui, and hide them from your application based on those
    // two flags.
    SDL_Event event;
    bool      done = false;
    while (SDL_PollEvent(&event))
    {
        ImGui_ImplSDL2_ProcessEvent(&event);
        done = user_asked_to_quit(window, event);
    }
    return done;
❱

◀public: static▶ void ☀clean_up_resources(SDL_GLContext &gl_context, SDL_Window *window)
❰
    // Cleanup
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplSDL2_Shutdown();
    ImGui::DestroyContext();

    SDL_GL_DeleteContext(gl_context);
    SDL_DestroyWindow(window);
    SDL_Quit();
❱

◀private: static▶ bool ☀user_asked_to_quit(SDL_Window *window, SDL_Event event)
❰
    if (event.type == SDL_QUIT)
    {
        return true;
    }
    if (event.type == SDL_WINDOWEVENT && event.window.event == SDL_WINDOWEVENT_CLOSE
        && event.window.windowID == SDL_GetWindowID(window))
    {
        return true;
    }
    return false;
❱

