class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/positioned_full_color_bitmap"❫
❪"code/utilities/bdf/settings/character_segment"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/label/positioned_label"❫
❪"code/utilities/graphics/imgui/ui/draw/label/cursor/label_cursor_selection"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
❪"code/tools/ide/frame/logic/frame_elements"❫
❪"code/utilities/types/vectors/operators/lib"❫
❪"code/utilities/mouse/state/mouse_state"❫
⚯
❪"code/utilities/graphics/imgui/ui/draw/text/str_to_bdf_segments"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/graphics/imgui/time/cycle_clock_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/label/functions/label_text_bitmap_getter"❫
❪"code/utilities/graphics/imgui/ui/draw/label/style/label_style_chooser"❫
❪"code/utilities/graphics/imgui/ui/draw/label/functions/label_length_getter"❫
⚞⚟

◀public: static▶ Frame_Elements ☀Draw(std::unordered_map<int,Character_Segment> const& font_chars, Positioned_Label & label, Mouse_State const& mouse_state)❰
    return Draw(font_chars,label.pos,label.label,mouse_state);
❱
◀public: static▶ Frame_Elements ☀Draw(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings & label, Mouse_State const& mouse_state)❰
    
    Frame_Elements elements;
    
    //convert strings to bitmap representations
    Positioned_Full_Color_Bitmap text;
    text.bitmap = Label_Text_Bitmap_Getter::Get_Width_Adjusted_Text_Bitmap(font_chars,label);
    
    //decide box dimensions
    auto& style = Label_Style_Chooser::Get_Style_To_Use(label);
    Decide_Label_Box_Dimensions(font_chars,label,style);
    
    int x_adjusted_label_draw = -2;
    int y_adjusted_label_draw = -10;
    
    text.pos = pos;

    //adjust for label backdrop
    pos.y += y_adjusted_label_draw;
    pos.x += x_adjusted_label_draw;

    //draw and handle backdrop
    auto events = Mouse_Events_Checker::search_for_mouse_events_in_rectangle(pos,label.styles.regular_active.box,mouse_state);
    Set_Label_Properties_Based_On_Events(label,events);
    Draw_Rectangle_Portion(elements,text,pos,style);
    
    //adjust for message bitmap and print it
    pos.y -= y_adjusted_label_draw;
    pos.x -= x_adjusted_label_draw;
    elements.types.emplace_back(text);
    
    //set active properties on the label
    if (ImGui::IsMouseClicked(0)){
        if (events.clicked){
            label.cursors.clear();
            auto s = get_cursor_selection_based_on_click(font_chars,events.pos,pos,label);
            label.cursors.emplace_back(s);
        }
        else{
            label.cursors.clear();
        }
    }
    return elements;
❱






//utility
◀private: static▶ void ☀Set_Label_Properties_Based_On_Events(Label_Settings & label, Mouse_Events const& events)❰

    //set hover properties on the label
    label.user_state.is_hovered = events.hovered;
    
    //set active properties on the label
    if (ImGui::IsMouseClicked(0)){
        if (events.clicked){
            label.user_state.is_active = true;
        }
        else{
            label.user_state.is_active = false;
        }
    }
❱

◀private: static▶ void ☀Draw_Rectangle_Portion(Frame_Elements & elements, Positioned_Full_Color_Bitmap & bitmap, Position pos, Label_Style const& style)❰
    
    bitmap.bitmap.color_fill = style.text;
    Positioned_Rectangle_Settings settings;
    settings.shape = style.box;
    settings.pos = pos;
    elements.types.emplace_back(settings);
❱

◀private: static▶ void ☀Decide_Label_Box_Dimensions(std::unordered_map<int,Character_Segment> const& font_chars, Label_Settings & label, Label_Style const& style)❰

    //some pixel fudging
    const auto EXPECTED_MONOSPACE_FITTING_HEIGHT = 15;
    
    auto box_width = Decide_Textbox_Width(label,style);
    auto box_height = EXPECTED_MONOSPACE_FITTING_HEIGHT;
    
    
    //set these box dimensions for all state styles of the label
    label.styles.regular_nonactive.box.dimensions.width      = box_width;
    label.styles.regular_nonactive.box.dimensions.height     = box_height;
    label.styles.hovered_active.box.dimensions.width  = box_width;
    label.styles.hovered_active.box.dimensions.height = box_height;
    label.styles.regular_active.box.dimensions.width      = box_width;
    label.styles.regular_active.box.dimensions.height     = box_height;
    label.styles.hovered_nonactive.box.dimensions.width  = box_width;
    label.styles.hovered_nonactive.box.dimensions.height = box_height;
❱

◀private: static▶ int ☀Decide_Textbox_Width(Label_Settings const& label, Label_Style const& style)❰

    //derive the width based on the characters of the label
    if (style.width.grow_width){
        const auto SOME_BUFFER_SPACE = 3;
        auto box_width = Label_Length_Getter::Get_Message_Length(label) + SOME_BUFFER_SPACE;
        return box_width;
    }
    
    //derive the width based on a fixed settings
    return style.width.fixed_width;
❱

◀private: static▶ Label_Cursor_Selection ☀get_cursor_selection_based_on_click(std::unordered_map<int,Character_Segment> const& font_chars, Position click_pos, Position pos, Label_Settings & label)❰
    
    
    Label_Cursor_Selection s;
    int width_covered = 0;
    bool found = false;
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    for (size_t i = 0; i < segments.size(); ++i){
        pos.x += segments[i].d_width_x;
        width_covered = segments[i].d_width_x;
        if (pos.x > click_pos.x){
            s.label_index = i;
            found = true;
            break;
        }
    }
    
    if (!found){
        s.label_index = 0;
    }
    
    //calculate through label_index
    //TODO(thickey): delete
    int diff = std::abs(pos.x - click_pos.x);
    if (diff < width_covered/2){
        //s.recommended_cursor_pos.x = pos.x;
    }
    else{
        //s.recommended_cursor_pos.x = pos.x - width_covered;
        s.label_index -= 1;
    }
    //s.recommended_cursor_pos.y = pos.y - 9;
    
    
    s.label_cursor = Create_Label_Cursor_Settings();
    return s;
❱


◀private: static▶ Label_Cursor ☀Create_Label_Cursor_Settings()❰

    Label_Cursor x;
    
    //main cursor
    //(the short line inside a textbox)
    x.tick.shape.shape.dimensions.width = 1;
    x.tick.shape.shape.dimensions.height = 13;
    x.tick.shape.shape.edge.thickness = 0;
    x.tick.shape.shape.edge.rounding  = 0.0;
    x.tick.shape.shape.hooks.draw_border = false;
    x.tick.shape.shape.hooks.draw_fill = true;
    x.tick.shape.shape.colors.border = Imgui_Type_Utility::Red();
    x.tick.shape.shape.colors.fill = Imgui_Type_Utility::Red();
    x.tick.shape.pos.x = 30;
    x.tick.shape.pos.y = 30;
    
    //label selection
    x.highlight.shape.shape.dimensions.width = 50;
    x.highlight.shape.shape.dimensions.height = 50;
    x.highlight.shape.shape.edge.thickness = 1;
    x.highlight.shape.shape.edge.rounding  = 0.0;
    x.highlight.shape.shape.hooks.draw_border = false;
    x.highlight.shape.shape.hooks.draw_fill = true;
    x.highlight.shape.shape.colors.border = Imgui_Type_Utility::Red();
    x.highlight.shape.shape.colors.border.alpha = 100;
    x.highlight.shape.shape.colors.fill = Imgui_Type_Utility::Red();
    x.highlight.shape.shape.colors.fill.alpha = 100;
    
    return x;
    
❱




