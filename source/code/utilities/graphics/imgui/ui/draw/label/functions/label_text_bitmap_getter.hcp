class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/fonts/bdf/settings/character_segment"❫
❪"code/utilities/graphics/imgui/ui/draw/label/grid/faced/regular/label_settings"❫
⚯
❪"code/utilities/graphics/imgui/ui/draw/text/str_to_bdf_segments"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/graphics/imgui/time/cycle_clock_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui/draw/label/style/label_style_chooser"❫
❪"code/utilities/graphics/imgui/ui/draw/label/functions/label_length_getter"❫
⚞⚟


◀public: static▶ Full_Color_Bitmap ☀Get_Width_Adjusted_Text_Bitmap(std::unordered_map<int,Character_Segment> const& font_chars, Label_Settings & label)❰

    Readjust_Width_Based_On_Slide_Animation(label,label.styles.hovered_active.width);
    Readjust_Width_Based_On_Slide_Animation(label,label.styles.regular_active.width);
    Readjust_Width_Based_On_Slide_Animation(label,label.styles.hovered_nonactive.width);
    Readjust_Width_Based_On_Slide_Animation(label,label.styles.regular_nonactive.width);
    
    auto bitmap = Text_To_Bitmap::Convert(font_chars,label.message);
    auto& style = Label_Style_Chooser::Get_Style_To_Use(label);
    if (!style.width.grow_width){
        
        //shift the text
        Text_Cycle(bitmap,style.width);
        
        //trim off the pixels
        auto removed = Remove_Pixels_Past_A_Width(bitmap,style.width.fixed_width);
        
        //possibly wrap some pixels back around
        for (auto & it: removed){
            if (it.x < 0){
                it.x = Label_Length_Getter::Get_Message_Length(label) + it.x;
                if (it.x < label.styles.hovered_active.width.fixed_width-5){
                    bitmap.pixels.emplace_back(it);
                }
            }
        }
        
        
    }
    
    return bitmap;
❱


◀private: static▶ void ☀Readjust_Width_Based_On_Slide_Animation(Label_Settings const& label, Label_Width_Style & width)❰

    if (!width.grow_width){
        if (Cycle_Clock_Checker::Check(width.pixel_slide.slide_clock)){
            width.pixel_slide.cycle_offset += width.pixel_slide.cycle_offset_pixel_jump;
        }
        
        Potentially_Reset_Offset(label,width);
    }
❱

◀private: static▶ void ☀Potentially_Reset_Offset(Label_Settings const& label, Label_Width_Style & width)❰

        if (width.pixel_slide.cycle_offset >  Label_Length_Getter::Get_Message_Length(label)){
            width.pixel_slide.cycle_offset = 0;
        }
❱


◀private: static▶ void ☀Text_Cycle(Full_Color_Bitmap & bitmap, Label_Width_Style & width)❰
    Full_Color_Bitmap new_bitmap;
    new_bitmap.color_fill = bitmap.color_fill;
    
    for (auto & it: bitmap.pixels){
        it.x -= width.pixel_slide.cycle_offset;
        new_bitmap.pixels.emplace_back(it);
    }
    bitmap = new_bitmap;
❱

◀private: static▶ std::vector<Position> ☀Remove_Pixels_Past_A_Width(Full_Color_Bitmap & bitmap, const int width)❰

    std::vector<Position> removed;
    Remove_If(bitmap.pixels,[&](Position const& position){
        if (position.x+5 > width || position.x < 0){
            removed .emplace_back(position);
            return true;
        }
        return false;
    });
    
    return removed;
❱