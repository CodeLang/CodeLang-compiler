class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/bdf/settings/character_segment"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_cursor_selection"❫
⚯
❪"code/utilities/graphics/imgui/ui/draw/text/str_to_bdf_segments"❫
⚞⚟

◀public: static▶ void ☀Move_Cursor_Forward(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰

    if (label.message.empty()){
        Move_Cursor_To_The_Beginning(font_chars,pos,label,s);
        return;
    }
    
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    s.label_index += 1;
    s.recommended_cursor_pos.x += segments[s.label_index].d_width_x;
❱
◀public: static▶ void ☀Move_Cursor_Backward(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰
    
    if (label.message.empty()){
        Move_Cursor_To_The_Beginning(font_chars,pos,label,s);
        return;
    }
    
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    s.label_index -= 1;
    s.recommended_cursor_pos.x -= segments[s.label_index+1].d_width_x;
❱
◀public: static▶ void ☀Move_Cursor_To_Start_Of_Selection(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰
    
    //already at the beginning
    if (s.additional_chars_selected >= 0){
        return;
    }
    
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    for (size_t i = 0; i < std::abs(s.additional_chars_selected); ++i){
        s.recommended_cursor_pos.x -= segments[s.label_index].d_width_x;
        s.label_index -= 1;
    }
❱
◀public: static▶ void ☀Move_Cursor_To_End_Of_Selection(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰
    
    //already at the end
    if (s.additional_chars_selected <= 0){
        return;
    }
    
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    for (size_t i = 0; i < s.additional_chars_selected; ++i){
        s.label_index += 1;
        s.recommended_cursor_pos.x += segments[s.label_index].d_width_x;
    }
❱
◀public: static▶ void ☀Move_Cursor_To_The_End(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰
    
    
    
    if (label.message.empty()){
        Move_Cursor_To_The_Beginning(font_chars,pos,label,s);
        return;
    }
    
    s.label_index = static_cast<int>(label.message.size())-1;
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    s.recommended_cursor_pos.x = 0;
    for (size_t i = 0; i < segments.size(); ++i){
        pos.x += segments[i].d_width_x;
    }
    s.recommended_cursor_pos.x = pos.x;
❱

◀public: static▶ void ☀Move_Cursor_To_The_Beginning(std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings const& label, Label_Cursor_Selection & s)❰
        s.label_index = -1;
        s.recommended_cursor_pos.x = pos.x;
❱