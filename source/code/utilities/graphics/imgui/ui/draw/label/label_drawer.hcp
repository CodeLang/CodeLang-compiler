class
❪string❫
❪unordered_map❫
❪utility❫
❪cstdlib❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap"❫
❪"code/utilities/bdf/settings/character_segment"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/label/label_cursor_selection"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/full_color_bitmap/full_color_bitmap_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/text/text_to_bitmap"❫
❪"code/utilities/graphics/imgui/ui/ui_renders"❫
⚯
❪"code/utilities/graphics/imgui/ui/draw/text/str_to_bdf_segments"❫
❪"code/utilities/types/vectors/transformers/lib"❫
❪"code/utilities/graphics/imgui/time/cycle_clock_checker"❫
⚞⚟

◀public: static▶ void ☀Draw(ImDrawList *draw_list, std::unordered_map<int,Character_Segment> const& font_chars, Position pos, Label_Settings & label)❰
    
    //convert strings to bitmap representations
    auto bitmap = Get_Width_Adjusted_Text_Bitmap(font_chars,label);
    
    //decide box dimensions
    auto& style = Get_Style_To_Use(label);
    Decide_Label_Box_Dimensions(font_chars,label,style);
    
    int x_adjusted_label_draw = -2;
    int y_adjusted_label_draw = -10;

    //adjust for label backdrop
    pos.y += y_adjusted_label_draw;
    pos.x += x_adjusted_label_draw;

    //draw and handle backdrop
    auto events = Mouse_Events_Checker::search_for_mouse_events_in_rectangle(pos,label.styles.regular_active.box);
    Set_Label_Properties_Based_On_Events(label,events);
    Draw_Rectangle_Portion(draw_list,bitmap,pos,label);
    
    //adjust for message bitmap and print it
    pos.y -= y_adjusted_label_draw;
    pos.x -= x_adjusted_label_draw;
    Full_Color_Bitmap_Drawer::Draw(draw_list,pos,bitmap);
    
    
    //set active properties on the label
    if (ImGui::IsMouseClicked(0)){
        if (events.clicked){
            label.cursors.clear();
            auto s = get_cursor_selection_based_on_click(font_chars,events.pos,pos,label);
            label.cursors.emplace_back(s);
        }
        else{
            label.cursors.clear();
        }
    }
❱

◀private: static▶ Full_Color_Bitmap ☀Get_Width_Adjusted_Text_Bitmap(std::unordered_map<int,Character_Segment> const& font_chars, Label_Settings & label)❰

    Readjust_Width_Based_On_Slide_Animation(label.styles.hovered_active.width);
    Readjust_Width_Based_On_Slide_Animation(label.styles.regular_active.width);
    Readjust_Width_Based_On_Slide_Animation(label.styles.hovered_nonactive.width);
    Readjust_Width_Based_On_Slide_Animation(label.styles.regular_nonactive.width);
    
    auto bitmap = Text_To_Bitmap::Convert(font_chars,label.message);
    auto& style = Get_Style_To_Use(label);
    if (!style.width.grow_width){
        Text_Cycle(bitmap,style.width);
        Remove_Pixels_Past_A_Width(bitmap,style.width.fixed_width);
    }
    
    return bitmap;
❱


◀private: static▶ void ☀Readjust_Width_Based_On_Slide_Animation(Label_Width_Style & width)❰

    if (!width.grow_width){
        if (Cycle_Clock_Checker::Check(width.pixel_slide.slide_clock)){
            width.pixel_slide.cycle_offset += width.pixel_slide.cycle_offset_pixel_jump;
        }
        
        if (width.pixel_slide.cycle_offset > 200){
            width.pixel_slide.cycle_offset = 0;
        }
    }
❱

◀private: static▶ void ☀Text_Cycle(Full_Color_Bitmap & bitmap, Label_Width_Style & width)❰
    Full_Color_Bitmap new_bitmap;
    new_bitmap.color_fill = bitmap.color_fill;
    
    for (auto & it: bitmap.pixels){
        it.x -= width.pixel_slide.cycle_offset;
        new_bitmap.pixels.emplace_back(it);
    }
    bitmap = new_bitmap;
❱

◀private: static▶ void ☀Remove_Pixels_Past_A_Width(Full_Color_Bitmap & bitmap, const int width)❰

    Remove_If(bitmap.pixels,[&](Position const& position){
        if (position.x+5 > width || position.x < 0){
            return true;
        }
        return false;
    });
❱






//utility
◀private: static▶ void ☀Set_Label_Properties_Based_On_Events(Label_Settings & label, Mouse_Events const& events)❰

    //set hover properties on the label
    label.user_state.is_hovered = events.hovered;
    
    //set active properties on the label
    if (ImGui::IsMouseClicked(0)){
        if (events.clicked){
            label.user_state.is_active = true;
        }
        else{
            label.user_state.is_active = false;
        }
    }
❱

◀private: static▶ void ☀Draw_Rectangle_Portion(ImDrawList *draw_list, Full_Color_Bitmap & bitmap, Position pos, Label_Settings & label)❰
    
    
    auto style = Get_Style_To_Use(label);
    
    bitmap.color_fill = style.text;
    Rectangle_Drawer::draw_rectangle(draw_list,pos,style.box);
❱

◀private: static▶ Label_Style& ☀Get_Style_To_Use(Label_Settings & label)❰

    if (label.user_state.is_active){
        if (label.user_state.is_hovered){
            return label.styles.hovered_active;
        }
        else{
            return label.styles.regular_active;
        }
    }
    else{
        if (label.user_state.is_hovered){
            return label.styles.hovered_nonactive;
        }
        else{
            return label.styles.regular_nonactive;
        }
    }
    
    return label.styles.regular_nonactive;
❱

◀private: static▶ void ☀Decide_Label_Box_Dimensions(std::unordered_map<int,Character_Segment> const& font_chars, Label_Settings & label, Label_Style const& style)❰

    //some pixel fudging
    const auto EXPECTED_MONOSPACE_FITTING_HEIGHT = 15;
    
    auto box_width = Decide_Textbox_Width(label,style);
    auto box_height = EXPECTED_MONOSPACE_FITTING_HEIGHT;
    
    
    //set these box dimensions for all state styles of the label
    label.styles.regular_nonactive.box.width      = box_width;
    label.styles.regular_nonactive.box.height     = box_height;
    label.styles.hovered_active.box.width  = box_width;
    label.styles.hovered_active.box.height = box_height;
    label.styles.regular_active.box.width      = box_width;
    label.styles.regular_active.box.height     = box_height;
    label.styles.hovered_nonactive.box.width  = box_width;
    label.styles.hovered_nonactive.box.height = box_height;
❱

◀private: static▶ int ☀Decide_Textbox_Width(Label_Settings const& label, Label_Style const& style)❰

    //derive the width based on the characters of the label
    if (style.width.grow_width){
        const auto EXPECTED_MONOSPACE_CHAR_WIDTH = 6;
        const auto SOME_BUFFER_SPACE = 3;
        auto box_width = (label.message.size() * EXPECTED_MONOSPACE_CHAR_WIDTH) + SOME_BUFFER_SPACE;
        return box_width;
    }
    
    //derive the width based on a fixed settings
    return style.width.fixed_width;
    
    
❱

◀private: static▶ Label_Cursor_Selection ☀get_cursor_selection_based_on_click(std::unordered_map<int,Character_Segment> const& font_chars, Position click_pos, Position pos, Label_Settings & label)❰
    
    
    Label_Cursor_Selection s;
    int width_covered = 0;
    bool found = false;
    auto segments = Str_To_Bdf_Segments::Convert(font_chars,label.message);
    for (size_t i = 0; i < segments.size(); ++i){
        pos.x += segments[i].d_width_x;
        width_covered = segments[i].d_width_x;
        if (pos.x > click_pos.x){
            s.label_index = i;
            found = true;
            break;
        }
    }
    
    if (!found){
        s.label_index = segments.size()-1;
    }
    
    //get difference
    int diff = std::abs(pos.x - click_pos.x);
    if (diff < width_covered/2){
        s.recommended_cursor_pos.x = pos.x;
    }
    else{
        s.recommended_cursor_pos.x = pos.x - width_covered;
        s.label_index -= 1;
    }
    s.recommended_cursor_pos.y = pos.y - 9;
    return s;
❱