class
❪string❫
❪"code/utilities/data_structures/shapes/rectangle/rectangle_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events"❫
❪"code/utilities/data_structures/position/position"❫
❪"code/utilities/peripheral/mouse/state/mouse_state"❫
⚯
❪"code/utilities/graphics/imgui/mechanics"❫
⚞⚟



◀public: static▶ Mouse_Events ☀search_for_mouse_events_in_rectangle(Position pos, Rectangle_Settings const &settings, Mouse_State const& mouse_state)
❰
    //find if any mouse events have happened on the rectangle
    Mouse_Events events;
    if (mouse_clicked_area(pos, settings,mouse_state))
    {
        events.clicked = true;
        events.pos = mouse_state.pos;
    }
    if (mouse_is_hovering_area(pos, settings,mouse_state))
    {
        events.hovered = true;
        events.pos = mouse_state.pos;
    }
    
    return events;
❱



◀private: static▶ bool ☀mouse_clicked_area(Position pos, Rectangle_Settings const &settings, Mouse_State const& mouse_state)
❰
    if (ImGui::IsMouseClicked(0))
    {
        auto mouse_pos = mouse_state.pos;
        return position_inside_rectangle(mouse_pos,pos,settings);
    }
    return false;
❱

◀private: static▶ bool ☀mouse_is_hovering_area(Position pos, Rectangle_Settings const &settings, Mouse_State const& mouse_state)
❰
    //old implementation
    // if (ImGui::IsMouseHoveringRect(
    //         ImVec2(pos.x, pos.y), ImVec2(pos.x + settings.dimensions.width - 1, pos.y + settings.dimensions.height), false))
    // {
    //     return true;
    // }
    // return false;

    auto mouse_pos = mouse_state.pos;
    return position_inside_rectangle(mouse_pos,pos,settings);
❱






◀private: static▶ bool ☀position_inside_rectangle(Position const& pos, Position const& rect_pos, Rectangle_Settings const& settings)
❰
    if (pos.x > rect_pos.x && pos.x < rect_pos.x + settings.dimensions.width)
    {
        if (pos.y >= rect_pos.y && pos.y <= rect_pos.y + settings.dimensions.height)
        {
            return true;
        }
    }
    return false;
❱