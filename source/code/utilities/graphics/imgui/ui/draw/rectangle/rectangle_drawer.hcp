class
❪string❫
❪"code/utilities/data_structures/shapes/rectangle/rectangle_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/imgui_type_utility"❫
❪"code/utilities/data_structures/position/position"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"code/utilities/data_structures/shapes/rectangle/positioned_rectangle_settings"❫
❪"code/utilities/data_structures/shapes/rectangle/shade_rectangle_settings"❫
❪"code/utilities/data_structures/graphics/bitmap/multi_color_bitmap/multi_color_bitmap"❫
❪"code/utilities/colors/color_transitioner"❫
❪"code/utilities/graphics/imgui/render/elements/multi_color_bitmap_drawer"❫
❪"code/utilities/graphics/imgui/ui/draw/rectangle/rectangle_fill_bitmap"❫
⚯
⚞⚟


//regular draw
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Positioned_Rectangle_Settings const &settings)
❰
  return draw_rectangle(draw_list,settings.pos,settings.shape);
❱
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    Possibly_Draw_Filling(draw_list,pos,settings);
    Possibly_Draw_Border(draw_list,pos,settings);
❱
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Position pos, Shade_Rectangle_Settings const &settings)
❰
  auto fill_as_bitmap = Rectangle_Fill_Bitmap::Convert(pos,settings);
  Multi_Color_Bitmap_Drawer::Draw(draw_list,pos,fill_as_bitmap);
❱


◀private: static▶ void ☀Possibly_Draw_Filling(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    if (settings.hooks.draw_fill){
      draw_list->AddRectFilled(ImVec2(pos.x, pos.y),
                               ImVec2(pos.x + settings.dimensions.width, pos.y + settings.dimensions.height),
                               Imgui_Type_Utility::to_imgui_color(settings.colors.fill),
                               settings.edge.rounding,
                               ImDrawCornerFlags_All);
    }
    
    if (settings.hooks.draw_shade){
      //pos.y -= 5;
      //pos.x -= 15;
      //pos.y -= (settings.dimensions.height/2) - 2;
      auto bitmap = Rectangle_Fill_Bitmap::Convert(pos,settings.shades,settings.dimensions);
      Multi_Color_Bitmap_Drawer::Draw(draw_list,pos,bitmap);
    }
    
❱
◀private: static▶ void ☀Possibly_Draw_Border(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    if (settings.hooks.draw_border){
      draw_list->AddRect(ImVec2(pos.x, pos.y),
                         ImVec2(pos.x + settings.dimensions.width, pos.y + settings.dimensions.height),
                         Imgui_Type_Utility::to_imgui_color(settings.colors.border),
                         settings.edge.rounding,
                         ImDrawCornerFlags_All,
                         settings.edge.thickness);
    }
❱


//interactive draw
◀public: static▶ Mouse_Events ☀draw_interactive_rectangle(ImDrawList *draw_list, Positioned_Rectangle_Settings const &settings, Mouse_State const& mouse_state)❰
  return draw_interactive_rectangle(draw_list,settings.pos,settings.shape,mouse_state);
❱
◀public: static▶ Mouse_Events ☀draw_interactive_rectangle(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings, Mouse_State const& mouse_state)
❰
    // draw it
    draw_rectangle(draw_list,pos,settings);

    // observe user interaction
    return Mouse_Events_Checker::search_for_mouse_events_in_rectangle(pos,settings,mouse_state);
❱