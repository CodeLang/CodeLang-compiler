class
❪string❫
❪"code/utilities/data_structures/shapes/rectangle/rectangle_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events"❫
❪"code/utilities/graphics/imgui/ui/draw/mouse_events/mouse_events_checker"❫
❪"code/utilities/graphics/imgui/ui/draw/imgui_type_utility"❫
❪"code/utilities/data_structures/position/position"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"code/utilities/data_structures/shapes/rectangle/positioned_rectangle_settings"❫
❪"code/utilities/data_structures/shapes/rectangle/shade_rectangle_settings"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/multi_color_bitmap/multi_color_bitmap"❫
❪"code/utilities/colors/color_transitioner"❫
❪"code/utilities/graphics/imgui/ui/draw/bitmap/multi_color_bitmap/multi_color_bitmap_drawer"❫
⚯
⚞⚟


//regular draw
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Positioned_Rectangle_Settings const &settings)
❰
  return draw_rectangle(draw_list,settings.pos,settings.shape);
❱
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    Possibly_Draw_Filling(draw_list,pos,settings);
    Possibly_Draw_Border(draw_list,pos,settings);
❱
◀public: static▶ void ☀draw_rectangle(ImDrawList *draw_list, Position pos, Shade_Rectangle_Settings const &settings)
❰
  auto fill_as_bitmap = Fill_As_Bitmap(draw_list,pos,settings);
  //std::cout << fill_as_bitmap.pixels.size() << std::endl;
  Multi_Color_Bitmap_Drawer::Draw(draw_list,pos,fill_as_bitmap);
❱


◀private: static▶ void ☀Possibly_Draw_Filling(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    if (settings.hooks.draw_fill){
      draw_list->AddRectFilled(ImVec2(pos.x, pos.y),
                               ImVec2(pos.x + settings.dimensions.width, pos.y + settings.dimensions.height),
                               Imgui_Type_Utility::to_imgui_color(settings.colors.fill),
                               settings.edge.rounding,
                               ImDrawCornerFlags_All);
    }
    
    if (settings.hooks.draw_shade){
      //pos.y -= 5;
      //pos.x -= 15;
      //pos.y -= (settings.dimensions.height/2) - 2;
      auto bitmap = Fill_As_Bitmap(pos,settings.shades,settings.dimensions);
      Multi_Color_Bitmap_Drawer::Draw(draw_list,pos,bitmap);
    }
    
❱
◀private: static▶ void ☀Possibly_Draw_Border(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    if (settings.hooks.draw_border){
      draw_list->AddRect(ImVec2(pos.x, pos.y),
                         ImVec2(pos.x + settings.dimensions.width, pos.y + settings.dimensions.height),
                         Imgui_Type_Utility::to_imgui_color(settings.colors.border),
                         settings.edge.rounding,
                         ImDrawCornerFlags_All,
                         settings.edge.thickness);
    }
❱





//create a shaded rectangle
◀private: static▶ Multi_Color_Bitmap ☀Fill_As_Bitmap(ImDrawList *draw_list, Position pos, Shade_Rectangle_Settings const &settings)❰
    return Fill_As_Bitmap(pos,settings.colors,settings.dimensions);
❱

◀private: static▶ Multi_Color_Bitmap ☀Fill_As_Bitmap(Position pos, Rectangle_Shade_Colors const& colors2, Rectangle_Dimensions const& dimensions)❰
    Multi_Color_Bitmap bitmap;
    auto colors = Color_Transitioner::Transition_Colors(colors2.fill,dimensions.width);
    
    Pixel_Settings p_settings;
    //p_settings.pos = po;
    p_settings.pos.x = 0;
    p_settings.pos.y = 0;
    for (auto const& c: colors){
      p_settings.color_fill = c;
      for (size_t i = 0; i < dimensions.height; ++i){
        bitmap.pixels.emplace_back(p_settings);
        p_settings.pos.y++;
      }
      p_settings.pos.y = 0;
      p_settings.pos.x++;
    }
  return bitmap;
❱


















//interactive draw
◀public: static▶ Mouse_Events ☀draw_interactive_rectangle(ImDrawList *draw_list, Positioned_Rectangle_Settings const &settings)❰
  return draw_interactive_rectangle(draw_list,settings.pos,settings.shape);
❱
◀public: static▶ Mouse_Events ☀draw_interactive_rectangle(ImDrawList *draw_list, Position pos, Rectangle_Settings const &settings)
❰
    // draw it
    draw_rectangle(draw_list,pos,settings);

    // observe user interaction
    return Mouse_Events_Checker::search_for_mouse_events_in_rectangle(pos,settings);
❱