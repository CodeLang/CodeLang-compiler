class
❪string❫
❪iostream❫
❪algorithm❫
❪"code/utilities/graphics/opengl/loader/opengl_loaders"❫
⚯
❪"code/utilities/streams/filestreams/lib"❫
❪"code/utilities/image/stb_image"❫
⚞⚟

//I have no idea how to properly load textures.  This was copied and pasted from elesewhere
//we likely need to be more intelligent about how all of these parameters are set.
//but at least its isolated
◀public: static▶ void ☀Load(GLuint & texture, unsigned char* img_data, int const& width, int const& height)❰

        // Create a OpenGL texture identifier
        glGenTextures(1, &texture);
        
        if (texture == 0){
            std::cerr << "Zero is a reserved texture name and is never returned as a texture name by glGenTextures()." << std::endl;
            std::cerr << "Have you created an OpenGL context first?" << std::endl;
            std::cerr << "glGetError: " << glGetError() << std::endl;
            exit(-1);
        }
        
        glBindTexture(GL_TEXTURE_2D, texture);
        
        // Setup filtering parameters for display
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE); // This is required on WebGL for non power-of-two textures
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE); // Same
        
        //glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
        
    // Upload pixels into texture
#if defined(GL_UNPACK_ROW_LENGTH) && !defined(__EMSCRIPTEN__)
        glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
#endif
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data);
❱