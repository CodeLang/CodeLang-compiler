class
❪string❫
❪iostream❫
❪cstdlib❫
❪iostream❫
❪"code/utilities/law/software_laws"❫
⚯

⚞⚟

◀public: static▶ Software_Laws ☀Get() ❰
	Software_Laws x;
    x.laws.emplace_back(Murphy_Law());
    x.laws.emplace_back(Brook_Law());
    x.laws.emplace_back(Hofstadter_Law());
    x.laws.emplace_back(Conway_Law());
    x.laws.emplace_back(Robustness_Principle());
    x.laws.emplace_back(Eighty_Twenty_Rule());
    x.laws.emplace_back(Peter_Principle());
    x.laws.emplace_back(Kerchkhoff_Principle());
    x.laws.emplace_back(Linus_Law());
    x.laws.emplace_back(Moore_Law());
    x.laws.emplace_back(Wirth_Law());
    x.laws.emplace_back(Ninety_Ninety_Rule());
    x.laws.emplace_back(Knuth_Optimization_Priciple());
    x.laws.emplace_back(Norvig_Law());
    x.laws.emplace_back(Cunningham_Law());
    x.laws.emplace_back(Goodhart_Law());
    x.laws.emplace_back(Osborn_Law());
    x.laws.emplace_back(Parkinson_Law());

	return x  ;
❱


◀private: static▶ Software_Law ☀Murphy_Law() ❰
    Software_Law law;
    law.name = "Murphy's Law";
    law.description = "If something can go wrong, it will.";
    return law;
❱
◀private: static▶ Software_Law ☀Brook_Law() ❰
    Software_Law law;
    law.name = "Brook's Law";
    law.description = "Adding manpower to a late software project makes it later.";
    return law;
❱
◀private: static▶ Software_Law ☀Hofstadter_Law() ❰
    Software_Law law;
    law.name = "Hofstadter's Law";
    law.description = "It always takes longer than you expect, even when you take into account Hofstadter's Law.";
    return law;
❱
◀private: static▶ Software_Law ☀Conway_Law() ❰
    Software_Law law;
    law.name = "Conway's Law";
    law.description = "Any piece of software reflects the organizational structure that produced it.";
    //Or even more clearly:
    //Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.
    return law;
❱
◀private: static▶ Software_Law ☀Robustness_Principle() ❰
    Software_Law law;
    //Postel's Law
    law.name = "Robustness Principle";
    law.description = "Be conservative in what you send, be liberal in what you accept.";
    return law;
❱
◀private: static▶ Software_Law ☀Eighty_Twenty_Rule() ❰
    Software_Law law;
    //Pareto Principle
    law.name = "80-20 Rule";
    law.description = "For many phenomena, 80% of consequences stem from 20% of the causes.";
    return law;
❱
◀private: static▶ Software_Law ☀Peter_Principle() ❰
    Software_Law law;
    law.name = "Peter Principle";
    law.description = "In a hierarchy, every employee tends to rise to his level of incompetence.";
    return law;
❱
◀private: static▶ Software_Law ☀Kerchkhoff_Principle() ❰
    Software_Law law;
    law.name = "Kerchkhoff's Principle";
    law.description = "In cryptography, a system should be secure even if everything about the system, except for a small piece of information - the key - is public knowledge.";
    return law;
❱
◀private: static▶ Software_Law ☀Linus_Law() ❰
    Software_Law law;
    law.name = "Linus's Law";
    law.description = "Given enough eyeballs, all bugs are shallow.";
    return law;
❱
◀private: static▶ Software_Law ☀Moore_Law() ❰
    Software_Law law;
    law.name = "Moore's Law";
    law.description = "The power of computers per unit cost doubles every 24 month.";
    //The number of transistors on an integrated circuit will double in about 18 months.
    //The processing speed of computers will double every two years!
    return law;
❱
◀private: static▶ Software_Law ☀Wirth_Law() ❰
    Software_Law law;
    law.name = "Wirth's law";
    law.description = "Software gets slower faster than hardware gets faster.";
    return law;
❱
◀private: static▶ Software_Law ☀Ninety_Ninety_Rule() ❰
    Software_Law law;
    law.name = "Ninety-ninety rule";
    law.description = "The first 90% of the code takes 10% of the time. The remaining 10% takes the other 90% of the time.";
    return law;
❱
◀private: static▶ Software_Law ☀Knuth_Optimization_Priciple() ❰
    Software_Law law;
    law.name = "Knuth's optimization principle";
    law.description = "Premature optimization is the root of all evil.";
    return law;
❱
◀private: static▶ Software_Law ☀Norvig_Law() ❰
    Software_Law law;
    law.name = "Norvig's Law";
    law.description = "Any technology that surpasses 50% penetration will never double again (in any number of months).";
    return law;
❱
◀private: static▶ Software_Law ☀Cunningham_Law() ❰
    Software_Law law;
    law.name = "Cunningham's Law";
    law.description = "The fastest way to get help over the internet is not to ask the question but to instead answer it wrong.";
    return law;
❱
◀private: static▶ Software_Law ☀Goodhart_Law() ❰
    Software_Law law;
    law.name = "Goodhart's Law";
    law.description = "When a measure becomes a target, it ceases to be a good measure.";
    return law;
❱
◀private: static▶ Software_Law ☀Osborn_Law() ❰
    Software_Law law;
    law.name = "Osborn's Law";
    law.description = "Variables won't. Constants aren't.";
    //I think he's saying that we often guess wrong regarding what will change and what won't.
    return law;
❱
◀private: static▶ Software_Law ☀Parkinson_Law() ❰
    Software_Law law;
    law.name = "Parkinson's Law";
    law.description = "Work expands to fill all time allocated to its completion.";
    return law;
❱
◀private: static▶ Software_Law ☀Gall_Law() ❰
    Software_Law law;
    law.name = "Gall's Law";
    law.description = "A complex system that works is invariably found to have evolved from a simple system that worked.";
    //A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.
    return law;
❱