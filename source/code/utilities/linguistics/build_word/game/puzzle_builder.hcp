class
❪string❫
❪"code/utilities/linguistics/build_word/game/settings/build_word_game_settings"❫
❪"code/utilities/linguistics/build_word/game/build_word_puzzle"❫
⚯
❪iostream❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ std::vector<Build_Word_Puzzle> ☀Create_Puzzles(Build_Word_Game_Settings const& settings)❰
    std::vector<Build_Word_Puzzle> puzzles;
    
    while (puzzles.size() < static_cast<size_t>(settings.puzzle_amount)){
        auto p = Create_Puzzle(settings);
        if (p.words.size() >= static_cast<size_t>(settings.min_words_in_puzzle) && p.words.size() <= static_cast<size_t>(settings.max_words_in_puzzle)){
            puzzles.emplace_back(p);
        }
    }
    
    return puzzles;
❱

◀private: static▶ Build_Word_Puzzle ☀Create_Puzzle(Build_Word_Game_Settings const& settings)❰

    //create random letters based on probability
    auto letters = Get_N_Random_Letters(settings.letter_probability,settings.letter_amount);
    
    
    
    //get answers
    std::vector<std::string> answers;
    for (auto const& it: settings.words){
        
        if (it.size() >= static_cast<size_t>(settings.min_word_size)){
            if (Letters_Exist_In_Word(letters,it)){
                answers.emplace_back(it);
            }
        }
    }
    
    //build puzzle
    Build_Word_Puzzle p;
    p.letters = letters;
    p.words = answers;
    return p;

❱

◀private: static▶ std::string ☀Get_N_Random_Letters(std::map<std::string,double> const& letter_probability, int const& letter_amount)❰
    std::string letters;
    for (size_t i = 0; i < static_cast<size_t>(letter_amount); ++i){
        letters += Get_Random_By_Probability(letter_probability);
    }
    return letters;
❱

◀private: static▶ bool ☀Letters_Exist_In_Word(std::string letters, std::string const& word)❰

    for (auto const& it: word){
        if (Contains_Character(letters,it)){
            Remove_First_Instance_Of_Char(letters,it);
        }
        else{
            return false;
        }
    }
    return true;
❱