class
❪string❫
❪"code/utilities/linguistics/build_word/game/settings/build_word_game_settings"❫
⚯
❪iostream❫
❪"code/utilities/streams/filestreams/read_all/lib"❫
❪"code/utilities/types/char/lib"❫
❪"code/utilities/random/lib"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/types/strings/transformers/search_replace/lib"❫
❪"code/utilities/types/strings/transformers/removing/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
❪"code/utilities/linguistics/dictionary/scrabble_2019"❫
⚞⚟

◀public: static▶ Build_Word_Game_Settings ☀Get()❰

    Build_Word_Game_Settings settings;
    
    //assume english standard likelyhood of letters
    //these numbers might need recalculated based on the actual word list
    settings.letter_probability = Standard_Char_Likelyhood_In_Words();
    
    //not sure if this is the correct relative path,
    //but its what seems to be whats available when I link the data to the binary with "data=".
    settings.words = Scrabble_2019::Get();
    
    settings.letter_amount = 8;
    settings.min_word_size = 4;
    
    settings.puzzle_amount = 1;
    //settings.min_words_in_puzzle = 30;
    settings.min_words_in_puzzle = 50;
    settings.max_words_in_puzzle = 200;
    
    settings.puzzle_output_file = Full_Path_For_Desktop_File("word_build.html");
    settings.puzzle_pdf_file = Full_Path_For_Desktop_File("word_build.pdf");
    
    return settings;
❱