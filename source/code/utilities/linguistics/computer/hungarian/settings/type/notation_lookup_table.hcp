class
❪string❫
❪unordered_map❫
⚯

⚞⚟

◀
public:
    
std::unordered_map<std::string,std::string> values

{{"void","t"} //base void types are probably void pointers.  They are generic.
,{"void*","pt"} //most likely an array of void pointers (base derive code probably needs adjusted to prevent this)
// /\ Eventually, I don't expect pointer types to be looked up.  This table should be for base types only;.
// pointers get stripped off the same way we strip off array brackets 
// pointer types in this table should eventually all be removed from this table.

,{"nullptr_t","p"} //pointer to nullptr? pp?  who cares.  hungarian notation is retarted.
,{"WORD","w"}   //typedef of an unsigned short on VxWorks
,{"DWORD","dw"} //typedef of an unsigned int on VxWorks

//boolean
,{"bool","b"}
,{"BOOL","b"} //typedef of an int

//char
,{"char","c"}
,{"signed char","c"}
,{"unsigned char","uc"}
,{"BYTE","uc"}          //typedef of an unsigned char on VxWorks.  Why we don't prefix what the actual type is for WORD/DWORD? who knows.
,{"wchar_t","c"}
,{"signed wchar_t","c"}
,{"unsigned wchar_t","uc"}
,{"char16_t","c"}
,{"char32_t","c"}

//shorts
,{"short","s"}
,{"short int","s"}
,{"signed short","s"}
,{"signed short int","s"}
,{"unsigned short","us"}
,{"unsigned short int","us"}

//ints
,{"int","n"}
,{"signed","n"}
,{"signed int","n"}
,{"unsigned","u"} //unsigned ints are just 'u' yet other unsigned integral types are u_.  Inconsistent, but that's what I was told.
,{"unsigned int","u"}
,{"size_t","u"}
,{"ptrdiff_t","u"}

//longs
,{"long","l"}
,{"long int","l"}
,{"signed long","l"}
,{"signed long int","l"}
,{"unsigned long","ul"}
,{"unsigned long int","ul"}

//long longs
,{"long long","ll"}
,{"long long int","ll"}
,{"signed long long","ll"}
,{"signed long long int","ll"}
,{"unsigned long long","ull"}
,{"unsigned long long int","ull"}

//rational
,{"float","f"}
,{"double","d"}
,{"long double","ld"}

//fixed width types <cstdint>
,{"int8_t","n"}
,{"int16_t","n"}
,{"int32_t","n"}
,{"int64_t","n"}
,{"int_fast8_t","n"}
,{"int_fast16_t","n"}
,{"int_fast32_t","n"}
,{"int_fast64_t","n"}
,{"int_least8_t","n"}
,{"int_least16_t","n"}
,{"int_least32_t","n"}
,{"int_least64_t","n"}
,{"intmax_t","n"}
,{"intptr_t","n"}
,{"uint8_t","u"}
,{"uint16_t","u"}
,{"uint32_t","u"}
,{"uint64_t","u"}
,{"uint_fast8_t","u"}
,{"uint_fast16_t","u"}
,{"uint_fast32_t","u"}
,{"uint_fast64_t","u"}
,{"uint_least8_t","u"}
,{"uint_least16_t","u"}
,{"uint_least32_t","u"}
,{"uint_least64_t","u"}
,{"uintmax_t","u"}
,{"uintptr_t","u"}

//vxWorks macro types from before C99 that don't follow the C standard.  
,{"INT8","n"}
,{"INT16","n"}
,{"INT32","n"}
,{"UINT8","u"}
,{"UINT16","u"}
,{"UINT32","u"}

,{"UCHAR","uc"}
,{"USHORT","us"}
,{"UINT","u"}
,{"ULONG","ul"}
};


//Additional notes:
//function pointer = fn?

//what about made up typedef's?
//maybe we'll trace the genesis of those, before using this table
//we can leave in specific macros that break the rules of their genesis.

//what about type deduction through auto/decltype
//trace the genesis of those too..
//although, lets be real. anyone using C++11 is smart enough not to use hungarian.

//by the way, a lot of these are already goofed because a 
//word, a short, a uint16, they all have different hungarian, but they are all the same type.  
//just something to think about I guess...

//hungarian is the dumbest, most brain-dead, mentally handicapped practice known to man
//anyone who thinks its a good idea doesn't understand software quality and should probably go back to school.
//anyone who enforces it on a project will likely cause the project to not meet deadlines.
//that being said, please dont spend any time thinking about it.  

▶
