class
❪string❫
❪iostream❫
❪cstdlib❫
❪iostream❫
❪"code/utilities/linguistics/scale/scale"❫
⚯

⚞⚟

//What's the best name for theses?
//implicature scales? horn scales? levinston scales? scalar implicatures?
◀public: static▶ Scale ☀Frequencies() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "frequency";
    
    point.word_phrases.emplace_back("never");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("occasionally");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("sometimes");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("often");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("usually");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("always");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱

◀public: static▶ Scale ☀Likelihood() ❰
    Scale scale;
    Scale_Point point;
    scale.name = "likelihood";
    
    point.word_phrases.emplace_back("impossible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("possible");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("likely");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("certain");
    scale.units.emplace_back(point);
    point.word_phrases.clear();
    
    point.word_phrases.emplace_back("definite");
    scale.units.emplace_back(point);
    point.word_phrases.clear();

    return scale;
❱