class
⚯
⚞⚟

//Speak pinyin
◀public: static▶ void ☀Speak(std::string const& message, std::string const& directory, std::string const& file_name) ❰


   //decide how to output wav file
   std::string output_path = directory + file_name + ".mp3";
   Wav_File_Join_Settings settings;
   settings.output_path = output_path;

   auto words = Split_By_Spaces(message);
   for (auto word: words){
        auto syllable_files = Get_Word_Syllable_Files(word);
        for (auto const& syllable_file: syllable_files){
            std::cout << syllable_file << std::endl;
            settings.input_paths.emplace_back(syllable_file);
        }
        
        //add a space after each word?
   }
   
   
   Mp3_File_Joiner::Join(settings);
   execute(std::string("mplayer ") + settings.output_path);
    
❱

◀private: static▶ std::vector<std::string> ☀Get_Word_Syllable_Files(std::string word) ❰

    std::vector<std::string> sounds;

    std::string current_syllable = word;
    word.clear();
    while (!current_syllable.empty()){
        
        std::cout << current_syllable << " " << word << std::endl;
    
        
        //check if its valid pinyin
        auto sound_file = Chinese_Syllable_Sounds::From_Pinyin(current_syllable);
        if (sound_file != ""){
            std::cout << "got it" << std::endl;
            sounds.emplace_back(sound_file);
            current_syllable = word;
            word.clear();
            continue;
        }
        
        
        //pop off a letter
            std::string temp;
            temp += current_syllable.back();
            current_syllable.pop_back();
            word = temp + word;
    }

    return sounds;
    
    

❱



