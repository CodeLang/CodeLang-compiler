class
❪string❫
⚯
❪"code/utilities/program/wrappers/convert/settings/draw_text_settings"❫
❪"code/utilities/program/wrappers/convert/settings/image_settings"❫
❪"code/utilities/program/wrappers/convert/convert_image_maker"❫
❪"code/utilities/program/wrappers/convert/draw_text_on_image"❫
❪"code/utilities/program/wrappers/convert/whitespace_image_trimmer"❫
❪"code/utilities/program/wrappers/convert/black_and_white_forcer"❫
❪"code/utilities/program/wrappers/convert/image_transparent"❫
❪"code/utilities/filesystem/paths/lib"❫
❪"code/utilities/filesystem/files/temp/existing_temp_file"❫
❪"code/utilities/fonts/font_files/pixel_bit_advanced"❫
⚞⚟


◀public: static▶ void ☀Create() ❰

    //a little imaging pipeline:
    Create_Base_Image();
    Write_Text();
    Whitespace_Image_Trimmer::Trim_Whitespace_From_Image(Unilang_Image_2());
    Image_Transparent::Convert(Unilang_Image_2(),Unilang_Image_3());
    Black_And_White_Forcer::Force(Unilang_Image_3(),Unilang_Image_4());
    
    //delete the intermediary files
    Existing_Temp_File x1(Unilang_Image_1());
    Existing_Temp_File x2(Unilang_Image_2());
    Existing_Temp_File x3(Unilang_Image_3());

❱

◀private: static▶ void ☀Create_Base_Image() ❰
    
    Image_Settings settings;
    settings.file_name = Unilang_Image_1();
    settings.dim.x = 500;
    settings.dim.y = 500;
    settings.base_color = "white";
    Convert_Image_Maker::Make(settings);
❱

◀private: static▶ void ☀Write_Text() ❰

    Draw_Text_Settings settings;
    settings.input_file = Unilang_Image_1();
    settings.output_file = Unilang_Image_2();
    
    settings.text = "Unilang";
    settings.font_path = Pixel_Bit_Advanced::Get();
    settings.pos.x = 0;
    settings.pos.y = 100;
    settings.point_size=60;
    settings.fill_color = "black";
    Draw_Text_On_Image::Write_Text(settings);
❱


◀private: static▶ std::string ☀Unilang_Image_1() ❰
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    return host_folder + ".readme/unilang_logo_1.png";
❱
◀private: static▶ std::string ☀Unilang_Image_2() ❰
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    return host_folder + ".readme/unilang_logo_2.png";
❱
◀private: static▶ std::string ☀Unilang_Image_3() ❰
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    return host_folder + ".readme/unilang_logo_3.png";
❱
◀private: static▶ std::string ☀Unilang_Image_4() ❰
    auto host_folder = Bazel_Derived_Root_Of_Repo();
    return host_folder + ".readme/unilang_logo.png";
❱