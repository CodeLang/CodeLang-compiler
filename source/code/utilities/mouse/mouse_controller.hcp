class
❪"xdo_cpp"❫
❪"point"❫
⚯
⚞⚟

//lifetime stuff
◀public:▶ ☀◈()
❰
    xdo = xdo_new(NULL);
    if (!xdo){
        std::cerr << "invalid xdo_new" << std::endl;
    }
❱

◀public:▶ ☀~◈()
❰
    xdo_free(xdo);
❱

//functionality
◀public:▶ void ☀move_mouse(Point to)
❰
    //where we are starting from
    auto from = current_mouse_position();
    
    //build a mouse trajectory
    auto trajectory = build_efficient_trajectory(from,to);
    
    for (auto point: trajectory){
        jump_to_mouse_position(point);
        auto delay_ms = RandomIntFromRange(400,900);
        Sleep_For_N_Microseconds(delay_ms);
    }
❱
◀public:▶ void ☀click()❰
    xdo_mouse_down(xdo,NULL,1);
    Sleep_For_N_Milliseconds(700);
    xdo_mouse_up(xdo,NULL,1);
❱


◀public:▶ void ☀pixel_shake()
❰
    auto current = current_mouse_position();
    current.x+=10;
    current.y+=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x-=10;
    current.y-=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x+=10;
    current.y+=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x-=10;
    current.y-=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x+=10;
    current.y+=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x-=10;
    current.y-=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x+=10;
    current.y+=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
    current.x-=10;
    current.y-=10;
    move_mouse(current);
    Sleep_For_N_Milliseconds(500);
❱


◀private:▶ std::vector<Point> ☀build_efficient_trajectory(Point from, const Point & to)
❰
    //find out the distance between the coordinates
    auto distances = get_coordinate_distances(from,to);
    
    //find out how many points are in our trajectory
    auto iterations = std::max(distances.x,distances.y);
    
    //figure out x and y direction
    bool x_moves_positively = should_x_move_positively(from,to);
    bool y_moves_positively = should_y_move_positively(from,to);
    
    //find out which coordinate will change every trajectory point
    bool x_always_changes = true;
    if (distances.y > distances.x){
        x_always_changes = false;
    }
    
    //get how many times the non-always moving coordinate needs to nudge
    int non_always_nudge_interval = calculate_nudge_interval(from,to);
    
    //create trajectory
    std::vector<Point> traj;
    for (int i = 0; i < iterations; ++i){
        
        //move always moving coordinate
        if (x_always_changes){
            nudge_coordinate(from.x,x_moves_positively);
            
            //move sometimes moving coordinate
            if (should_nudge(i,non_always_nudge_interval)){
                nudge_coordinate(from.y,y_moves_positively);
            }
        }
        else{
            nudge_coordinate(from.y,y_moves_positively);
            
            //move sometimes moving coordinate
            if (should_nudge(i,non_always_nudge_interval)){
                nudge_coordinate(from.x,x_moves_positively);
            }
        }
        
        non_always_nudge_interval = calculate_nudge_interval(from,to);
        
        
        traj.emplace_back(from);
    }
    return traj;
❱


◀private:▶ bool ☀should_nudge(const int iteration, const int non_always_nudge_interval)❰
    if (non_always_nudge_interval <= 0){
        return false;
    }
    
    return iteration % non_always_nudge_interval == 0;
❱

◀private:▶ int ☀calculate_nudge_interval(const Point & from, const Point & to)❰

    //find out the distance between the coordinates
    auto distances = get_coordinate_distances(from,to);
    
    //find out how many points are in our trajectory
    auto iterations = std::max(distances.x,distances.y);
    
    //find out which coordinate will change every trajectory point
    bool x_always_changes = true;
    if (distances.y > distances.x){
        x_always_changes = false;
    }
    
    //get how many times the non-always moving coordinate needs to nudge
    float non_always_nudge_interval_f = 0;
    if (x_always_changes){
        non_always_nudge_interval_f = static_cast<float>(iterations) / distances.y;
    }
    else{
        non_always_nudge_interval_f = static_cast<float>(iterations) / distances.x;
    }
    
    int non_always_nudge_interval = std::round(non_always_nudge_interval_f);
    
    if (non_always_nudge_interval <= 0){
        non_always_nudge_interval = 0;
    }
    return non_always_nudge_interval;
❱

◀private:▶ Point ☀get_coordinate_distances(const Point & from, const Point & to)❰
    Point distances;
    distances.x = std::abs(from.x - to.x);
    distances.y = std::abs(from.y - to.y);
    return distances;
❱
◀private:▶ bool ☀should_x_move_positively(const Point & from, const Point & to)❰
    bool x_moves_positively = true;
    if (from.x > to.x){
        x_moves_positively = false;
    }
    return x_moves_positively;
❱
◀private:▶ bool ☀should_y_move_positively(const Point & from, const Point & to)❰
    bool y_moves_positively = true;
    if (from.y > to.y){
        y_moves_positively = false;
    }
    return y_moves_positively;
❱



//nudge coordinate
◀private:▶ void ☀nudge_coordinate(int & coordinate, bool positiviely)
❰
    if (positiviely){
        coordinate +=1;
    }
    else{
        coordinate -=1;
    }
❱

//xdo wrappers
◀private:▶ void ☀jump_to_mouse_position(const Point & point)
❰
    auto result = xdo_move_mouse(xdo,point.x,point.y,0);
    if (result){
        std::cerr << "failed to move mouse" << std::endl;
    }
❱

◀private:▶ Point ☀current_mouse_position()
❰
    Point point;
    auto result = xdo_get_mouse_location(xdo,&point.x,&point.y,nullptr);
    if (result){
        std::cerr << "failed to get mouse" << std::endl;
    }
    return point;
❱


◀private:
    xdo_t *xdo;
▶