class
❪iostream❫
❪string❫
❪cstdlib❫
❪"code/utilities/output/diagnostic/diagnostic_settings"❫
❪"code/utilities/colors/lib"❫
⚯

⚞⚟

◀public: static▶ void ☀Report(Diagnostic_Settings const& settings)❰

	if (settings.print){

		auto colored_str = Get_Colored_String(settings.message,settings.color);
		Send_To_Stream(colored_str,settings.stream,settings.flush);
		if (settings.exit){
			exit(0);
		}
	}
❱

◀private: static▶ void ☀Send_To_Stream(std::string const& str, Diagnostic_Stream const& stream, bool flush)❰
	if (stream == Diagnostic_Stream::STDOUT){
		std::cout << str;
		if (flush){
			std::cout.flush();
		}
	}
	else if (stream == Diagnostic_Stream::STDERR){
		std::cerr << str;
		if (flush){
			std::cerr.flush();
		}
	}
❱

◀private: static▶ std::string ☀Get_Colored_String(std::string const& str, Diagnostic_Color const& color)❰
	if (color == Diagnostic_Color::GREEN){
		return Green_String(str);
	}
	if (color == Diagnostic_Color::RED){
		return Red_String(str);
	}
	if (color == Diagnostic_Color::GOLD){
		return Gold_String(str);
	}
	if (color == Diagnostic_Color::BLUE){
		return Blue_String(str);
	}
	if (color == Diagnostic_Color::TEAL){
		return Teal_String(str);
	}
	if (color == Diagnostic_Color::WHITE){
		return White_String(str);
	}
	if (color == Diagnostic_Color::BLACK){
		return Black_String(str);
	}
	return str;
❱