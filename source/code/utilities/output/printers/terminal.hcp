class
⚯
⚞⚟


//output string through std::cout
◀public: static▶ void ☀Green_Message(std::string const& str)❰

    std::cout << String_Colorizer::Green_String(str);
    return;
❱
◀public: static▶ void ☀Red_Message(std::string const& str)❰

    std::cout << String_Colorizer::Red_String(str);
    return;
❱
◀public: static▶ void ☀Gold_Message(std::string const& str)❰

    std::cout << String_Colorizer::Gold_String(str);
    return;
❱
◀public: static▶ void ☀Blue_Message(std::string const& str)❰

    std::cout << String_Colorizer::Blue_String(str);
    return;
❱
◀public: static▶ void ☀Teal_Message(std::string const& str)❰

    std::cout << String_Colorizer::Teal_String(str);
    return;
❱
◀public: static▶ void ☀White_Message(std::string const& str)❰

    std::cout << String_Colorizer::White_String(str);
    return;
❱
◀public: static▶ void ☀Black_Message(std::string const& str)❰

    std::cout << String_Colorizer::Black_String(str);
    return;
❱
◀public: static▶ void ☀Purple_Message(std::string const& str)❰

    std::cout << String_Colorizer::Purple_String(str);
    return;
❱

//output string through std::cout and flush
◀public: static▶ void ☀Green_Message_And_Flush(std::string const& str)❰
    Green_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Red_Message_And_Flush(std::string const& str)❰
    Red_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Gold_Message_And_Flush(std::string const& str)❰
    Gold_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Blue_Message_And_Flush(std::string const& str)❰
    Blue_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Teal_Message_And_Flush(std::string const& str)❰
    Teal_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀White_Message_And_Flush(std::string const& str)❰
    White_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Black_Message_And_Flush(std::string const& str)❰
    Black_Message(str);
    std::cout.flush();
    return;
❱
◀public: static▶ void ☀Purple_Message_And_Flush(std::string const& str)❰
    Purple_Message(str);
    std::cout.flush();
    return;
❱

//output through std::cerr
◀public: static▶ void ☀Green_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Green_String(str);
    return;
❱
◀public: static▶ void ☀Red_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Red_String(str);
    return;
❱
◀public: static▶ void ☀Gold_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Gold_String(str);
    return;
❱
◀public: static▶ void ☀Blue_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Blue_String(str);
    return;
❱
◀public: static▶ void ☀Teal_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Teal_String(str);
    return;
❱
◀public: static▶ void ☀White_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::White_String(str);
    return;
❱
◀public: static▶ void ☀Black_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Black_String(str);
    return;
❱
◀public: static▶ void ☀Purple_Error_Message(std::string const& str)❰

    std::cerr << String_Colorizer::Purple_String(str);
    return;
❱

//output string through std::cerr and flush
◀public: static▶ void ☀Green_Error_Message_And_Flush(std::string const& str)❰
    Green_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Red_Error_Message_And_Flush(std::string const& str)❰
    Red_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Gold_Error_Message_And_Flush(std::string const& str)❰
    Gold_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Blue_Error_Message_And_Flush(std::string const& str)❰
    Blue_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Teal_Error_Message_And_Flush(std::string const& str)❰
    Teal_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀White_Error_Message_And_Flush(std::string const& str)❰
    White_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Black_Error_Message_And_Flush(std::string const& str)❰
    Black_Error_Message(str);
    std::cerr.flush();
    return;
❱
◀public: static▶ void ☀Purple_Error_Message_And_Flush(std::string const& str)❰
    Purple_Error_Message(str);
    std::cerr.flush();
    return;
❱

◀public: static▶ void ☀Green_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Green_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Red_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Red_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Gold_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Gold_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Blue_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Blue_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Teal_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Teal_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀White_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::White_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Black_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Black_String(green);
    std::cout << regular << std::endl;
❱
◀public: static▶ void ☀Purple_Then_Regular_Message(std::string const& green, std::string const& regular)
❰
    std::cout << String_Colorizer::Purple_String(green);
    std::cout << regular << std::endl;
❱