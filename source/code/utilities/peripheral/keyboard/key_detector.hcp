class
❪"code/tools/ide/settings/ide_settings"❫
❪"code/utilities/graphics/imgui/mechanics"❫
❪"code/utilities/peripheral/keyboard/state/key_state"❫
⚯
⚞⚟

//Eventually we will probably want to allow key-bindings and things
//These direct key checks are used for implementation simplicity,
//but we may have a generic wrapper for key_indexes similar and wrapped around imgui

//Left Key
◀public: static▶ bool ☀Left_Key_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_LeftArrow);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Left_Key_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_LeftArrow);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Left_Key_State()❰

    if (Left_Key_Pressed()){ return Key_State::PRESSED; }
    if (Left_Key_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Right Key
◀public: static▶ bool ☀Right_Key_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_RightArrow);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Right_Key_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_RightArrow);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Right_Key_State()❰

    if (Right_Key_Pressed()){ return Key_State::PRESSED; }
    if (Right_Key_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Up Key
◀public: static▶ bool ☀Up_Key_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_UpArrow);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Up_Key_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_UpArrow);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Up_Key_State()❰

    if (Up_Key_Pressed()){ return Key_State::PRESSED; }
    if (Up_Key_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Down Key
◀public: static▶ bool ☀Down_Key_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_DownArrow);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Down_Key_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_DownArrow);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Down_Key_State()❰

    if (Down_Key_Pressed()){ return Key_State::PRESSED; }
    if (Down_Key_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱


//Shift Button
◀public: static▶ bool ☀Shift_Down()❰
    auto key_index = 225;
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Shift_Pressed()❰
    auto key_index = 225;
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Shift_State()❰

    if (Shift_Pressed()){ return Key_State::PRESSED; }
    if (Shift_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱


//Ctrl Button
◀public: static▶ bool ☀Ctrl_Down()❰
    auto key_index = 224;
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Ctrl_Pressed()❰
    auto key_index = 224;
    if (ImGui::IsKeyPressed(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Ctrl_State()❰

    if (Ctrl_Pressed()){ return Key_State::PRESSED; }
    if (Ctrl_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Backspace Button
◀public: static▶ bool ☀Backspace_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Backspace);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Backspace_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Backspace);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Backspace_State()❰

    if (Backspace_Pressed()){ return Key_State::PRESSED; }
    if (Backspace_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Delete Button
◀public: static▶ bool ☀Delete_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Delete);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Delete_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Delete);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Delete_State()❰

    if (Delete_Pressed()){ return Key_State::PRESSED; }
    if (Delete_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//Escape Button
◀public: static▶ bool ☀Escape_Down()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Escape);
    if (ImGui::IsKeyDown(key_index)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀Escape_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_Escape);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ Key_State ☀Get_Escape_State()❰

    if (Escape_Pressed()){ return Key_State::PRESSED; }
    if (Escape_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//A Button
◀public: static▶ bool ☀A_Down()❰
    return ImGui::IsKeyDown(4);
❱
◀public: static▶ bool ☀A_Pressed()❰
    return ImGui::IsKeyPressed(4,true);
❱
◀public: static▶ Key_State ☀Get_A_State()❰

    if (A_Pressed()){ return Key_State::PRESSED; }
    if (A_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//C Button
◀public: static▶ bool ☀C_Down()❰
    return ImGui::IsKeyDown(ImGuiKey_C);
❱
◀public: static▶ bool ☀C_Pressed()❰
    return ImGui::IsKeyPressed(ImGuiKey_C,true);
❱
◀public: static▶ Key_State ☀Get_C_State()❰

    if (C_Pressed()){ return Key_State::PRESSED; }
    if (C_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//V Button
◀public: static▶ bool ☀V_Down()❰
    return ImGui::IsKeyDown(ImGuiKey_V);
❱
◀public: static▶ bool ☀V_Pressed()❰
    return ImGui::IsKeyPressed(ImGuiKey_V,true);
❱
◀public: static▶ Key_State ☀Get_V_State()❰

    if (V_Pressed()){ return Key_State::PRESSED; }
    if (V_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱

//F5 Button
◀public: static▶ bool ☀F5_Down()❰
    return ImGui::IsKeyDown(62);
❱
◀public: static▶ bool ☀F5_Pressed()❰
    return ImGui::IsKeyPressed(62,true);
❱
◀public: static▶ Key_State ☀Get_F5_State()❰

    if (F5_Pressed()){ return Key_State::PRESSED; }
    if (F5_Down()){ return Key_State::DOWN; }
    return Key_State::NONE;
❱



//Combined
◀public: static▶ bool ☀CtrlA_Pressed()❰
    //auto key_index = ImGui::GetKeyIndex(ImGuiKey_A);
    if (Ctrl_Down()){
        if (ImGui::IsKeyPressed(4,true)){
            return true;
        }
    }
    return false;
❱
◀public: static▶ bool ☀CtrlC_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_C);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱
◀public: static▶ bool ☀CtrlV_Pressed()❰
    auto key_index = ImGui::GetKeyIndex(ImGuiKey_V);
    if (ImGui::IsKeyPressed(key_index,true)){
        return true;
    }
    return false;
❱

◀public: static▶ bool ☀Shift_Plus_Right_Key_Pressed()❰
    if (Right_Key_Pressed()){
        if (Shift_Down()){
            return true;
        }
    }
    return false;
❱

◀public: static▶ bool ☀Shift_Plus_Left_Key_Pressed()❰
    if (Left_Key_Pressed()){
        if (Shift_Down()){
            return true;
        }
    }
    return false;
❱