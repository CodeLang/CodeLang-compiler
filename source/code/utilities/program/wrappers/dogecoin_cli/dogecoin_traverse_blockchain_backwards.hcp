class
⚯
⚞⚟





◀
public: template <typename Fun>
static void Traverse_From_Top(Fun fun){
    
    //what block do we start at?  The last one!
    auto current_block_hash = Dogecoin_Latest_Block_Getter::Get();
    From_Block_Hash(current_block_hash,fun);
    
}
▶

◀
public: template <typename Fun>
static void Traverse_From_Height(size_t height, Fun fun){
    
    auto current_block_hash = Dogecoin_Get_Block_By_Height::Get(height);
    From_Block_Hash(current_block_hash,fun);
    
    
}
▶

◀
public: template <typename Fun>
static void From_Block_Hash(std::string current_block_hash, Fun fun){
    
    
    
    //just make this value start at != 0.
    //we will start at something high and dwindle to 0- or break out early
    size_t current_height = 1;
    
    
    
    while (current_height != 0){
        
         //do something with block
         auto json = Dogecoin_Block_Getter::Get(current_block_hash);
         auto should_break = fun(json);
         
         //break if we need to
         if (should_break == Should_Break::YES){
            return;
        }
         
         
         
         //move onto the next block
         if (json.find("previousblockhash") == json.end()){
            //stop when current_height is 0
            //if these attributes are missing its 0
            current_height = 0;
         }
         else{
            current_block_hash = json["previousblockhash"];
            current_height = json["height"];
         }
         
         
    }
    
    
}
▶