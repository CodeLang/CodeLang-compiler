class
❪string❫
❪random❫
⚯
❪"code/utilities/math/gmp/lib"❫
❪"code/utilities/random/gmp/fwd"❫
❪"code/utilities/types/strings/observers/hex/lib"❫
⚞⚟


◀public: static▶ std::string ☀RandomIntFromRange(std::string low_in, std::string high_in)❰
    //put into large number class
    mpz_class min(low_in);
    mpz_class max(high_in);

    //swap if necessary
    if (min > max) {std::swap(min, max);}

    //build seed
    std::random_device rd;
    global::gen.seed(rd()); 

    //generate random number
    mpz_class str = mpz_class(mpz_class(max - min));
    size_t bit_size = mpz_sizeinbase ((str).get_mpz_t(), 2);
    std::string number = to_string(min + ( global::gen.get_z_bits(bit_size) % ( max - min + mpz_class("1") ) ));

    return number;
❱

◀public: static▶ std::string ☀RandomIntFromRangeInBin(std::string low_in, std::string high_in)❰
    //put into large number class
    mpz_class min(low_in);
    mpz_class max(high_in);

    //swap if necessary
    if (min > max) {std::swap(min, max);}

    //build seed
    std::random_device rd;
    global::gen.seed(rd()); 

    //generate random number
    mpz_class str = mpz_class(mpz_class(max - min));
    size_t bit_size = mpz_sizeinbase ((str).get_mpz_t(), 2);
    mpz_class number = min + ( global::gen.get_z_bits(bit_size) % ( max - min + mpz_class("1") ) );

    
    return number.get_str(2);
❱

◀public: static▶ std::string ☀ToBin(std::string num)❰
    mpz_class x(num);


    
    return x.get_str(2);
❱