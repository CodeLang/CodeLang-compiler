class
⚯
⚞⚟


// Different ways to get hex characters.



// Common use-case of needed 64 hex chars.
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Rand()❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Rand_Mod_16();
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Gen(std::mt19937 & gen)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Mod_16(gen);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Gen(std::mt19937 & gen, Hex_Ordering order)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Mod_16(gen,order);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Int_Dist(std::mt19937 & gen)❰
    std::string x;
     std::uniform_int_distribution<int> distribution(0, 15);
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Int_Dist(gen,distribution);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Bin_Gen(std::mt19937 & gen)❰
    std::string bin256;
    for (size_t i = 0; i < 256; ++i){
        if (gen()%2){
            bin256 += "1";
        }
        else
        {
            bin256 += "0";
        }
    }
    
    auto hex = bintohex(bin256);
    return hex;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Gen(std::mt19937_64 & gen)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Mod_16(gen);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Gen(std::minstd_rand & gen)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Mod_16(gen);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_PHP()❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Gen_Mod_16_PHP();
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Nums(std::vector<uint64_t> nums)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Num(nums[i]);
    }
    return x;
❱
◀public: static▶ std::string ☀Random_64Char_Hex_Via_Nums(std::vector<uint32_t> nums)❰
    std::string x;
    for (size_t i = 0; i < 64; ++i){
        x += Hex_Char_Via_Num(nums[i]);
    }
    return x;
❱

// Getting individual hex chars.
◀public: static▶ char ☀Hex_Char_Via_Rand_Mod_16()❰
  return Hex_Char_Index::Get_Hex_Char_From_Index(rand()%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Mod_16(std::mt19937 & gen)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(gen()%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Mod_16(std::mt19937 & gen, Hex_Ordering order)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(order,gen()%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Int_Dist(std::mt19937 & gen, std::uniform_int_distribution<int> & distribution)❰
    int randomIndex = distribution(gen);
    return Hex_Char_Index::Get_Hex_Char_From_Index(randomIndex);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Mod_16(std::mt19937_64 & gen)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(gen()%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Mod_16(std::minstd_rand & gen)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(gen()%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Gen_Mod_16_PHP()❰
    //the mt_rand impl may be different both in algorithm and architecure (bit size)
    //return Hex_Char_Index::Get_Hex_Char_From_Index(php_mt_rand()%16);
    return 0;
❱
◀public: static▶ char ☀Hex_Char_Via_Num(uint64_t num)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(num%16);
❱
◀public: static▶ char ☀Hex_Char_Via_Num(uint32_t num)❰
    return Hex_Char_Index::Get_Hex_Char_From_Index(num%16);
❱

// Warming up an existing number generator
◀public: static▶ void ☀Shift_On_Another_Hex_Via_Rand(std::string & str)❰
    str.erase(0,1);
    str += Hex_Char_Via_Rand_Mod_16();
❱
◀public: static▶ void ☀Shift_On_Another_Hex_Via_Gen(std::string & str, std::mt19937 & gen)❰
    str.erase(0,1);
    str += Hex_Char_Via_Gen_Mod_16(gen);
❱
◀public: static▶ void ☀Shift_On_Another_Hex_Via_Gen(std::string & str, std::mt19937_64 & gen)❰
    str.erase(0,1);
    str += Hex_Char_Via_Gen_Mod_16(gen);
❱
◀public: static▶ void ☀Shift_On_Another_Hex_Via_Gen(std::string & str, std::minstd_rand & gen)❰
    str.erase(0,1);
    str += Hex_Char_Via_Gen_Mod_16(gen);
❱
◀public: static▶ void ☀Shift_On_Another_Hex_Via_PHP(std::string & str)❰
    str.erase(0,1);
    str += Hex_Char_Via_Gen_Mod_16_PHP();
❱