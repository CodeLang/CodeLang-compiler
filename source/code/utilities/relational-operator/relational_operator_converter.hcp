class

❪string❫
❪"code/utilities/relational-operator/relational_operator"❫
❪"code/utilities/relational-operator/relational_operator_print_settings"❫
⚯
⚞⚟

◀public: static▶ std::string ☀As_String(Relational_Operator const& op, Relational_Operator_Print_Settings const& settings)❰
	switch(op){
		case Relational_Operator::EQUAL: return settings.equal_str;
        case Relational_Operator::NOT_EQUAL: return settings.not_equal_str;
        case Relational_Operator::LESS: return settings.less_str;
        case Relational_Operator::LESS_EQUAL: return settings.less_equal_str;
        case Relational_Operator::GREATER: return settings.greater_str;
        case Relational_Operator::GREATER_EQUAL: return settings.greater_equal_str;
	}
	return "?";
❱
◀public: static▶ std::string ☀As_Word(Relational_Operator const& op, Relational_Operator_Print_Settings const& settings)❰
	switch(op){
		case Relational_Operator::EQUAL: return settings.equal_word;
        case Relational_Operator::NOT_EQUAL: return settings.not_equal_word;
        case Relational_Operator::LESS: return settings.less_word;
        case Relational_Operator::LESS_EQUAL: return settings.less_equal_word;
        case Relational_Operator::GREATER: return settings.greater_word;
        case Relational_Operator::GREATER_EQUAL: return settings.greater_equal_word;
	}
	return "?";
❱
◀public: static▶ Relational_Operator ☀As_Opposite(Relational_Operator const& op)❰
	switch(op){
		case Relational_Operator::EQUAL: return Relational_Operator::NOT_EQUAL;
        case Relational_Operator::NOT_EQUAL: return Relational_Operator::EQUAL;
        case Relational_Operator::LESS: return Relational_Operator::GREATER_EQUAL;
        case Relational_Operator::LESS_EQUAL: return Relational_Operator::GREATER;
        case Relational_Operator::GREATER: return Relational_Operator::LESS_EQUAL;
        case Relational_Operator::GREATER_EQUAL: return Relational_Operator::LESS;
	}
	return Relational_Operator::NOT_EQUAL;
❱