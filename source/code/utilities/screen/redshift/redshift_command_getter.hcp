class
❪string❫
❪iostream❫
❪"code/utilities/screen/redshift/redshift_settings"❫
⚯

⚞⚟
◀public: static▶ std::string ☀Get(Redshift_Settings const& settings)❰

    // it would be nice to call into the API instead of spawning a program, but hey.
    std::string command = "redshift ";
    
    if (settings.set_brightness){
        command += "-b ";
        command += std::to_string(settings.day_brightness);
        command += ":";
        command += std::to_string(settings.night_brightness);
        command += " ";
    }
    
    if (settings.apply_gamma_correction){
        command += "-g ";
        command += std::to_string(settings.red_gamma_correction);
        command += ":";
        command += std::to_string(settings.green_gamma_correction);
        command += ":";
        command += std::to_string(settings.blue_gamma_correction);
        command += " ";
    }
    
    if (settings.apply_static_location){
        command += "-l ";
        command += std::to_string(settings.lat);
        command += ":";
        command += std::to_string(settings.lon);
        command += " ";
    }
    
    if (settings.one_shot){
        command += "-o ";
    }
    
    if (settings.set_temperature){
        command += "-O ";
        command += std::to_string(settings.temperature);
        command += " ";
    }
    
    if (settings.apply_reset){
        command += "-x ";
    }
    
    if (!settings.temperature_transition){
        command += "-r ";
    }
    
    if (settings.apply_time_temperature){
        command += "-t ";
        command += std::to_string(settings.day_temperature);
        command += ":";
        command += std::to_string(settings.night_temperature);
        command += " ";
    }
    
    return command;
❱

◀public: static▶ std::string ☀Get_Reset_Command(Redshift_Settings const& settings)❰
    std::string command = "redshift -x";
    return command;
❱


