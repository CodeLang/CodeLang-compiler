class
❪string❫
❪"code/utilities/screen/rgb_section.hpp"❫
❪"code/utilities/screen/good_bad_screen_tint_settings.hpp"❫
⚯
❪"code/utilities/streams/filestreams/lib.hpp"❫
❪"code/utilities/filesystem/paths/lib.hpp"❫
❪"code/utilities/shell/lib.hpp"❫
❪iostream❫
⚞⚟


◀public: static▶ void ☀Set_Tint(int redshift_lvl)❰
    std::string command = "redshift-gtk -r -O";
    command += std::to_string(redshift_lvl);
    no_hup_execute_quietly_in_background(command);
❱

◀public: static▶ void ☀Set_Rgb_Section(Rgb_Section const& section, float percentage)❰
    switch (section){
        case Rgb_Section::RED: Set_Redness(percentage); break;
        case Rgb_Section::GREEN: Set_Greeness(percentage); break;
        case Rgb_Section::BLUE: Set_Blueness(percentage); break;
        default:;
    }
❱

◀private: static▶ void ☀Set_Redness(float red_percentage)❰
    auto command = Get_Redness_Redshift_Command(red_percentage);
    no_hup_execute_quietly_in_background(command);
❱
◀private: static▶ void ☀Set_Greeness(float green_percentage)❰
    auto command = Get_Greeness_Redshift_Command(green_percentage);
    no_hup_execute_quietly_in_background(command);
❱
◀private: static▶ void ☀Set_Blueness(float blue_percentage)❰
    auto command = Get_Blueness_Redshift_Command(blue_percentage);
    no_hup_execute_quietly_in_background(command);
❱

◀private: static▶ std::string ☀Get_Redness_Redshift_Command(float red_percentage)❰

    float r_value = 1;
    float g_value = 1;
    float b_value = 1;
    
    //adjust for redness
    float as_decimal = red_percentage;
    g_value -= as_decimal;
    b_value -= as_decimal;
    
    return Build_Redshift_Command(r_value,g_value,b_value);
❱
◀private: static▶ std::string ☀Get_Greeness_Redshift_Command(float green_percentage)❰

    float r_value = 1;
    float g_value = 1;
    float b_value = 1;
    
    //adjust for redness
    float as_decimal = green_percentage;
    r_value -= as_decimal;
    b_value -= as_decimal;
    
    return Build_Redshift_Command(r_value,g_value,b_value);
❱
◀private: static▶ std::string ☀Get_Blueness_Redshift_Command(float blue_percentage)❰

    float r_value = 1;
    float g_value = 1;
    float b_value = 1;
    
    //adjust for redness
    float as_decimal = blue_percentage;
    r_value -= as_decimal;
    g_value -= as_decimal;
    
    return Build_Redshift_Command(r_value,g_value,b_value);
❱

◀private: static▶ std::string ☀Build_Redshift_Command(float r, float g, float b)❰
    std::string command = "redshift -o -g ";
    command += std::to_string(r);
    command += ":";
    command += std::to_string(g);
    command += ":";
    command += std::to_string(b);
    return command;
❱



//use case
◀public: static▶ void ☀Adjust_Screen_On_Good_Bad_Evaluation(Good_Bad_Screen_Tint_Settings const& settings)❰
    
    auto d = difference(settings.current_value,settings.standard_value);
    if (settings.current_value < settings.standard_value){
        
        //clamp if over
        if (d > settings.expected_max_negative_difference){
            d = settings.expected_max_negative_difference;
        }
        
        auto percent = map_value_across_range(d,0,settings.expected_max_negative_difference,settings.negative_low_rgb_value,settings.negative_high_rgb_value);
        Screen_Tint_Setter::Set_Rgb_Section(settings.below_color, 1.0 - percent);
        if (settings.debug){
            Print_Debug_Message("down",d,percent);
        }
    }
    else if (settings.current_value > settings.standard_value){
        
        //clamp if over
        if (d > settings.expected_max_positive_difference){
            d = settings.expected_max_positive_difference;
        }
        
        auto percent = map_value_across_range(d,0,settings.expected_max_positive_difference,settings.positive_low_rgb_value,settings.positive_high_rgb_value);
        Screen_Tint_Setter::Set_Rgb_Section(settings.above_color, 1.0 - percent);
        if (settings.debug){
            Print_Debug_Message("up",d,percent);
        }
    }
❱

◀private: static▶ void ☀Print_Debug_Message(std::string const& label, float difference, float percent)❰
    std::cout << label << ": " << difference << " (" << percent << ")" << std::endl;
❱

◀private: static▶ float ☀difference(float a, float b)❰
    if (a < b){
        return b-a;
    }
    return a-b;
❱
◀private: static▶ float ☀map_value_across_range(float s, float a1, float a2, float b1, float b2)❰

    return b1 + (s-a1)*(b2-b1)/(a2-a1);
❱