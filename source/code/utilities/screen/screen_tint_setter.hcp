class
❪string❫
❪"code/utilities/screen/good_bad/rgb_section.hpp"❫
❪"code/utilities/screen/good_bad/good_bad_screen_tint_settings.hpp"❫
❪"code/utilities/screen/redshift/redshift_settings"❫
❪"code/utilities/screen/good_bad/mood_setting"❫
⚯
❪"code/utilities/streams/filestreams/lib.hpp"❫
❪"code/utilities/filesystem/paths/lib.hpp"❫
❪"code/utilities/shell/lib.hpp"❫
❪"code/utilities/screen/redshift/redshift_command_getter"❫
❪"code/utilities/math/math"❫
❪"code/utilities/screen/screen_gama_setter"❫
❪iostream❫
⚞⚟



//use case
◀public: static▶ void ☀Adjust_Screen_On_Good_Bad_Evaluation(Good_Bad_Screen_Tint_Settings const& settings)❰
    
    if (settings.current_value < settings.standard_value){
        Set_Mood(settings,settings.bad);
    }
    else if (settings.current_value > settings.standard_value){
        Set_Mood(settings,settings.good);
    }
❱

◀private: static▶ void ☀Set_Mood(Good_Bad_Screen_Tint_Settings const& settings, Mood_Setting const& mood)❰
    
    auto r_pct = Get_Mood_Percentage(settings,mood.red);
    auto g_pct = Get_Mood_Percentage(settings,mood.green);
    auto b_pct = Get_Mood_Percentage(settings,mood.blue);
        
    if (settings.show_screen_tint){
        Screen_Gama_Setter::Set_Rgb_Section(settings.shift, r_pct, g_pct, b_pct);
    }
    else{
        Screen_Gama_Setter::Reset_Rgb_Section(settings.shift);
    }
    if (settings.debug_data){
        Print_Debug_Message(settings,r_pct,g_pct,b_pct);
    }
❱

◀private: static▶ float ☀Get_Mood_Percentage(Good_Bad_Screen_Tint_Settings const& settings, Gama_Slider const& slider)❰

    // make sure the difference is significant
    auto d = Math::clamped_difference(settings.current_value,settings.standard_value,slider.expected_max_difference);
    if (d < slider.difference_until_change){
        return 0;
    }
    
    //fit the difference to a range
    auto percent = Math::map_value_across_range(d,0,slider.expected_max_difference,slider.low_rgb_value,slider.high_rgb_value);
    return percent;
❱

◀private: static▶ void ☀Print_Debug_Message(Good_Bad_Screen_Tint_Settings const& settings, float r, float g, float b)❰
    std::cout << settings.standard_value << " -> " << settings.current_value << " ";
    std::cout << "diff: " << " (" << decimal_as_str_pct(r) << " " << decimal_as_str_pct(g) << " " << decimal_as_str_pct(b) << ")" << std::endl;
❱

◀private: static▶ std::string ☀decimal_as_str_pct(float f)❰
    return std::to_string(f * 100) + "%";
❱