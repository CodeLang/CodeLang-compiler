class
❪string❫
❪"code/utilities/screen/good_bad/rgb_section.hpp"❫
❪"code/utilities/screen/good_bad/good_bad_screen_tint_settings.hpp"❫
❪"code/utilities/screen/redshift/redshift_settings"❫
❪"code/utilities/screen/good_bad/mood_setting"❫
⚯
❪"code/utilities/streams/filestreams/lib.hpp"❫
❪"code/utilities/filesystem/paths/lib.hpp"❫
❪"code/utilities/shell/lib.hpp"❫
❪"code/utilities/screen/redshift/redshift_command_getter"❫
❪iostream❫
⚞⚟


◀public: static▶ void ☀Set_Rgb_Section(Redshift_Settings const& setting, Rgb_Section const& section, float percentage)❰
    switch (section){
        case Rgb_Section::RED: Set_Redness(setting,percentage); break;
        case Rgb_Section::GREEN: Set_Greeness(setting,percentage); break;
        case Rgb_Section::BLUE: Set_Blueness(setting,percentage); break;
        default:;
    }
❱

◀private: static▶ void ☀Set_Redness(Redshift_Settings const& setting, float red_percentage)❰
    auto command = Get_Redness_Redshift_Command(setting, red_percentage);
    no_hup_execute_quietly_in_background(command);
❱
◀private: static▶ void ☀Set_Greeness(Redshift_Settings const& setting, float green_percentage)❰
    auto command = Get_Greeness_Redshift_Command(setting, green_percentage);
    no_hup_execute_quietly_in_background(command);
❱
◀private: static▶ void ☀Set_Blueness(Redshift_Settings const& setting, float blue_percentage)❰
    auto command = Get_Blueness_Redshift_Command(setting, blue_percentage);
    no_hup_execute_quietly_in_background(command);
❱

◀private: static▶ std::string ☀Get_Redness_Redshift_Command(Redshift_Settings setting, float red_percentage)❰
    
    //adjust for redness
    float as_decimal = red_percentage;
    setting.green_gamma_correction -= as_decimal;
    setting.blue_gamma_correction -= as_decimal;
    
    return Redshift_Command_Getter::Get(setting);
❱
◀private: static▶ std::string ☀Get_Greeness_Redshift_Command(Redshift_Settings setting, float green_percentage)❰
    
    //adjust for redness
    float as_decimal = green_percentage;
    setting.red_gamma_correction -= as_decimal;
    setting.blue_gamma_correction -= as_decimal;
    
    return Redshift_Command_Getter::Get(setting);
❱
◀private: static▶ std::string ☀Get_Blueness_Redshift_Command(Redshift_Settings setting, float blue_percentage)❰
    
    //adjust for redness
    float as_decimal = blue_percentage;
    setting.red_gamma_correction -= as_decimal;
    setting.green_gamma_correction -= as_decimal;
    
    return Redshift_Command_Getter::Get(setting);
❱



//use case
◀public: static▶ void ☀Adjust_Screen_On_Good_Bad_Evaluation(Good_Bad_Screen_Tint_Settings const& settings)❰
    
    if (settings.current_value < settings.standard_value){
        Set_Mood(settings,settings.bad);
    }
    else if (settings.current_value > settings.standard_value){
        Set_Mood(settings,settings.good);
    }
❱

◀private: static▶ void ☀Set_Mood(Good_Bad_Screen_Tint_Settings const& settings, Mood_Setting const& mood)❰

        auto d = difference(settings.current_value,settings.standard_value);
        clamp_if_over(d,mood.expected_max_difference);
        
        //TODO(thickey): customize to only do this when the difference is large enough
        auto percent = map_value_across_range(d,0,mood.expected_max_difference,mood.low_rgb_value,mood.high_rgb_value);
        
        if (settings.show_screen_tint){
            Set_Rgb_Section(settings.shift, mood.color, 1.0 - percent);
        }
        if (settings.debug_data){
            Print_Debug_Message(as_string(mood.color),settings,d,percent);
        }
        
❱

◀private: static▶ void ☀Print_Debug_Message(std::string const& label, Good_Bad_Screen_Tint_Settings const& settings, float difference, float percent)❰
    std::cout << settings.standard_value << " -> " << settings.current_value << " ";
    std::cout << "diff: " << difference << " (" << (percent * 100) << "% " << label << ")" << std::endl;
❱

◀private: static▶ void ☀clamp_if_over(float & val, float const& roof)❰
    if (val > roof){
        val = roof;
    }
❱

◀private: static▶ float ☀difference(float a, float b)❰
    if (a < b){
        return b-a;
    }
    return a-b;
❱
◀private: static▶ float ☀map_value_across_range(float s, float a1, float a2, float b1, float b2)❰

    return b1 + (s-a1)*(b2-b1)/(a2-a1);
❱