class
❪string❫
❪vector❫
❪iostream❫
❪"code/utilities/program/wrappers/graphviz/graphviz_image_maker"❫
❪"code/utilities/semiotics/knowledge/triadic_knowledge"❫
❪"code/utilities/semiotics/knowledge/dyadic_knowledge"❫
⚯
❪"code/utilities/types/strings/transformers/appending/lib"❫
⚞⚟

◀public: static▶ std::string ☀Convert(Dyadic_Knowledge const& k) ❰
    std::string x;
    
    Append_With_Newline(x,"digraph results {");
    //Append_With_Newline(x,"splines=false;");
    Append_With_Newline(x,"node [");
    Append_With_Newline(x,"fontname=\"Arial\",");
    Append_With_Newline(x,"shape = plaintext,");
    Append_With_Newline(x,"height=.1");
    Append_With_Newline(x,"]");
    
    for (auto const& s: k.signs){

        auto from = s.signifier;
        auto edge = "S";
        auto to = s.signified;
        Append(x,Graphviz_Node_To_Node_Line(from,edge,to));
    }
    
    Append_With_Newline(x,"}");
    return x;
❱

◀public: static▶ std::string ☀Convert(Triadic_Knowledge const& k) ❰
    std::string x;
    
    Append_With_Newline(x,"digraph results {");
    //Append_With_Newline(x,"splines=false;");
    Append_With_Newline(x,"node [");
    Append_With_Newline(x,"fontname=\"Arial\",");
    Append_With_Newline(x,"shape = plaintext,");
    Append_With_Newline(x,"height=.1");
    Append_With_Newline(x,"]");
    
    for (auto const& s: k.signs){
        
        //1st to 2nd
        auto from = s.representation;
        auto edge = "2";
        auto to = s.object;
        Append(x,Graphviz_Node_To_Node_Line(from,edge,to));
        
        //2nd to 3rd (1)
        from = s.representation;
        edge = "3";
        to = s.interpretant;
        Append(x,Graphviz_Node_To_Node_Line(from,edge,to));
        
        //2nd to 3rd (1)
        from = s.object;
        edge = "3";
        to = s.interpretant;
        Append(x,Graphviz_Node_To_Node_Line(from,edge,to));
    }
    
    Append_With_Newline(x,"}");
    
    return x;
❱


◀private: static▶ std::string ☀Graphviz_Node_To_Node_Line(std::string const& from, std::string const& edge, std::string const& to) ❰
    std::string x;
    Append_In_DQuotes(x,from);
    Append(x," -> ");
    Append_In_DQuotes(x,to);
    Append(x,"[ label=");
    Append_In_DQuotes(x,edge);
    Append_With_Newline(x,"]");
    return x;
❱




