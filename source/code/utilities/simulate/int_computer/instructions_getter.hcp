class
❪vector❫
❪string❫
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/simulate/int_computer/instruction"❫
⚯
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ std::vector<Instruction> ☀Get_Instructions(std::vector<std::string> lines) ❰

    std::vector<Instruction> ops;
    for (auto const& it: lines){
        auto parts = Split_By_Spaces(it);
        
        Operation_Type type = Operation_Type::NOP;
        if (parts[0] == "nop"){
            type = Operation_Type::NOP;
        }
        else if (parts[0] == "acc"){
            type = Operation_Type::ACC;
        }
        else if (parts[0] == "jmp"){
            type = Operation_Type::JMP;
        }
        
        Instruction temp;
        temp.op_code = type;
        temp.args.emplace_back(as_signed(parts[1]));
        ops.emplace_back(temp);
    }
    
    return ops;
❱