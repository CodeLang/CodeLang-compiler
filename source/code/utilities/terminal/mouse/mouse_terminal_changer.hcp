class
❪string❫
❪iostream❫
❪"code/utilities/terminal/mouse/mouse_terminal_settings"❫
❪"code/utilities/terminal/terminal_background_changer"❫
❪"code/utilities/math/math"❫
❪"code/utilities/shell/lib.hpp"❫
⚯
❪"code/utilities/data_structures/color/hsv_color"❫
❪"code/utilities/colors/hsv_to_rgb_converter"❫
⚞⚟


◀public: static▶ void ☀Change_Terminal(Mouse_Terminal_Settings const& settings)❰

    Terminal_Background_Changer::Set_State_Of_Color_Changing_In_Terminal(settings.change_background);

    if (settings.change_background){
        Adjust_Background_On_Mouse_Evaluation(settings);
    }
❱

◀private: static▶ void ☀Adjust_Background_On_Mouse_Evaluation(Mouse_Terminal_Settings const& settings)❰

        if (settings.do_hsv_mapping){
            Through_Hsv_Mapping(settings);
        }
        else{
            Through_Gama_Rgb_Mapping(settings);
        }
❱

◀private: static▶ void ☀Through_Hsv_Mapping(Mouse_Terminal_Settings const& settings)❰
        
        Hsv_Color hsv;
        hsv.h = Math::map_value_across_range(settings.current_x,0,1920,0,360);
        hsv.v = .5;
        hsv.s = Math::map_value_across_range(settings.current_y,0,1080,0,1);
        auto rgb = Hsv_To_Rgb_Converter::Convert(hsv);
        
        
        rgb.r = Math::map_value_across_range(rgb.r,0,1,0,255);
        rgb.g = Math::map_value_across_range(rgb.g,0,1,0,255);
        rgb.b = Math::map_value_across_range(rgb.b,0,1,0,255);
        
        //std::cout << "mouse: " << settings.current_x << " " << settings.current_y << std::endl;
        //std::cout << "hsv: " << hsv.h << " " << hsv.s << " " << hsv.v << std::endl;
        //std::cout << "rgb:"  << rgb.r << " " << rgb.g << " " << rgb.b << std::endl;
        Terminal_Background_Changer::Set_Background_By_Rgb_Section(rgb.r, rgb.g, rgb.b);

❱

◀private: static▶ void ☀Through_Gama_Rgb_Mapping(Mouse_Terminal_Settings const& settings)❰

        auto r_pct = Get_Mood_Percentage(settings,settings.red);
        auto g_pct = Get_Mood_Percentage(settings,settings.green);
        auto b_pct = Get_Mood_Percentage(settings,settings.blue);
        
        if (settings.red.binded == Optional_Two_D_Coordinate_Dimension::NONE){
            r_pct = 1 - (g_pct / 2) + (b_pct / 2);
        }
        if (settings.green.binded == Optional_Two_D_Coordinate_Dimension::NONE){
            g_pct = 1 - (r_pct / 2) + (b_pct / 2);
        }
        if (settings.blue.binded == Optional_Two_D_Coordinate_Dimension::NONE){
            b_pct = 1 - (r_pct / 2) + (g_pct / 2);
        }
        
        Terminal_Background_Changer::Set_Background_By_Rgb_Section(r_pct, g_pct, b_pct);
        
        //if (settings.debug_data){
        //    Print_Debug_Message(settings,r_pct,g_pct,b_pct);
        //}
❱


◀private: static▶ float ☀Get_Mood_Percentage(Mouse_Terminal_Settings const& settings, Mouse_Binded_Gama_Slider const& slider)❰

    auto mouse_current = settings.current_x;
    if (slider.binded == Optional_Two_D_Coordinate_Dimension::Y){
        mouse_current = settings.current_y;
    }
    
    // make sure the difference is significant
    auto d = Math::clamped_difference(mouse_current,settings.standard_value,slider.slider.expected_max_difference);
    if (d < slider.slider.difference_until_change){
        return 0;
    }
    
    //fit the difference to a range
    auto percent = Math::map_value_across_range(d,0,slider.slider.expected_max_difference,slider.slider.low_rgb_value,slider.slider.high_rgb_value);
    return percent;
❱