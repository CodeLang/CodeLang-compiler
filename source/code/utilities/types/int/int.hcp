class
❪string❫
❪iostream❫
❪cstdlib❫
❪algorithm❫
⚯
❪"code/utilities/types/converters/lib"❫
❪"code/utilities/types/strings/observers/converting/lib"❫
⚞⚟

◀public: static▶ unsigned long ☀reverse_bits(unsigned long num) ❰
  unsigned long s = 8 * sizeof(num); // bit size; must be power of 2
  unsigned long mask = ~0;
  while ((s >>= 1) > 0) {
    mask ^= (mask << s);
    num = ((num >> s) & mask) | ((num << s) & ~mask);
  }
  return num;
❱


◀public: static▶ std::vector<std::vector<int>> ☀combinations(int N, int K)❰
    std::vector<std::vector<int>> results;
    std::vector<int> temp;
    
    std::string bitmask(K, 1); // K leading 1's
    bitmask.resize(N, 0); // N-K trailing 0's
    
    do {
        for (int i = 0; i < N; ++i) // [0..N-1] integers
        {
            if (bitmask[i]){
                temp.emplace_back(i);
            }
        }
        results.emplace_back(temp);
        temp.clear();
        
        std::cout << std::endl;
    } while (std::prev_permutation(bitmask.begin(), bitmask.end()));
    
    return results;
❱

◀public: static▶ std::vector<std::vector<int>> ☀permutations(int start_amount, int amount)❰
    std::vector<int> nums;
    std::vector<std::vector<int>> results;
    for (size_t i = start_amount; i < start_amount + amount; ++i){
        nums.emplace_back(i);
    }
    
    do {
        results.emplace_back(nums);
    } while (std::next_permutation(nums.begin(), nums.end()));
    return results;
❱



◀public: static▶ int ☀get_last_n_digits(int x, int digits)❰
    auto x_str = std::to_string(x);
    std::string final_str;
    for (size_t i = 0; i < digits; ++i){
        if (i < x_str.size()){
            final_str = x_str[x_str.size()-1-i] + final_str;
        }
    }
    return as_signed(final_str);
❱

◀public: static▶ int ☀get_nth_digit_from_back(int x, int digit_place)❰
    
    auto x_str = std::to_string(x);
    if (digit_place < x_str.size()){
        std::string result;
        result += x_str[x_str.size()-1-digit_place];
        return as_signed(result);
    }
    
    return 0;
❱
◀public: static▶ void ☀increment_if_greater_than_zero(int & x, int const& increment_amount)❰
    if (increment_amount > 0){
        x += increment_amount;
    }
❱


◀public:
template <typename Fun>
static void reduce_to_zero(int & x, Fun f){
    
    f(x);
    while (x >= 0){
        f(x);
    }
}

▶

◀public: 
template <typename Fun>
static int remainder_total_reducing_to_zero(int x, Fun fun){
    int total = 0;
    Int::reduce_to_zero(x,[&](int & x){
        fun(x);
        Int::increment_if_greater_than_zero(total,x);
        
    });
    return total;
    
}
▶
