class
❪vector❫
❪string❫
❪map❫
❪"code/utilities/language_basic/std_hackery/std_aliases"❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
❪"code/utilities/types/strings/observers/comparing/lib"❫
⚯
⚞⚟

◀public: static▶ std::vector<std::string> ☀Words_Found_In_Grid(string_grid const& grid, std::vector<std::string> const& words)❰
    std::vector<std::string> finds;
    
    for (auto const& word: words){
        //std::cout << word << std::endl;
        if (Word_Exists(grid,word)){
            finds.emplace_back(word);
        }
    }
    
    return finds;
❱

◀public: static▶ std::vector<std::pair<size_t,size_t>> ☀Get_Starting_Points(string_grid const& grid, std::string const& word)❰
    std::vector<std::pair<size_t,size_t>> x;
    for (size_t i = 0; i < grid.size(); ++i){
        for (size_t j = 0; j < grid[0].size(); ++j){
            if (Case_Insensitive_String_Compare(grid[i][j],std::string(1,word[0]))){
                std::pair<size_t,size_t> p;
                p.first = i;
                p.second = j;
                x.emplace_back(p);
            }
        }
    }
    return x;
❱

◀public: static▶ bool ☀Word_Exists(string_grid const& grid, std::string const& word)❰
    
    auto starting_points = Get_Starting_Points(grid,word);
    
    for (auto const& p: starting_points){
        if (Word_Found_At_Point(grid,word,p)){
            return true;
        }
    }
    
    
    
    return false;
❱

◀public: static▶ bool ☀Word_Found_At_Point(string_grid const& grid, std::string const& word, std::pair<size_t,size_t> point)❰
    return false;
❱