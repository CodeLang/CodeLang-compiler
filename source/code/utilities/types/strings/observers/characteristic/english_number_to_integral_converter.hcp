class
⚯
⚞⚟


◀public: static▶ std::string ☀Convert(std::string const& str)❰

    //TODO this needs implemented with rules

    auto word = As_Lowercase(str);
    std::map<std::string,std::string> mapping;
    mapping.insert({"zero","0"});
    mapping.insert({"one","1"});
    mapping.insert({"two","2"});
    mapping.insert({"three","3"});
    mapping.insert({"four","4"});
    mapping.insert({"five","5"});
    mapping.insert({"six","6"});
    mapping.insert({"seven","7"});
    mapping.insert({"eight","8"});
    mapping.insert({"nine","9"});
    mapping.insert({"ten","10"});
    mapping.insert({"eleven","11"});
    mapping.insert({"twelve","12"});
    mapping.insert({"thirteen","13"});
    mapping.insert({"fourteen","14"});
    mapping.insert({"fifteen","15"});
    mapping.insert({"sixteen","16"});
    mapping.insert({"seventeen","17"});
    mapping.insert({"eighteen","18"});
    mapping.insert({"nineteen","19"});
    mapping.insert({"twenty","20"});
    mapping.insert({"thirty","30"});
    mapping.insert({"forty","40"});
    mapping.insert({"fifty","50"});
    mapping.insert({"sixty","60"});
    mapping.insert({"seventy","70"});
    mapping.insert({"eighty","80"});
    mapping.insert({"ninety","90"});
    
    mapping.insert({"first","1"});
    mapping.insert({"second","2"});
    mapping.insert({"third","3"});
    mapping.insert({"fourth","4"});
    mapping.insert({"fifth","5"});
    mapping.insert({"sixth","6"});
    mapping.insert({"seventh","7"});
    mapping.insert({"eighth","8"});
    mapping.insert({"ninth","9"});
    mapping.insert({"tenth","10"});
    mapping.insert({"eleventh","11"});
    mapping.insert({"twelfth","12"});
    mapping.insert({"thirteenth","13"});
    mapping.insert({"fourteenth","14"});
    mapping.insert({"fifteenth","15"});
    mapping.insert({"sixteenth","16"});
    mapping.insert({"seventeenth","17"});
    mapping.insert({"eighteenth","18"});
    mapping.insert({"nineteenth","19"});
    mapping.insert({"twentieth","20"});
    
    //TODO: we should just trim off st or th on a number if we see it
    mapping.insert({"1st","1"});
    mapping.insert({"2nd","2"});
    mapping.insert({"3rd","3"});
    mapping.insert({"4th","4"});
    mapping.insert({"5th","5"});
    mapping.insert({"6th","6"});
    mapping.insert({"7th","7"});
    mapping.insert({"8th","8"});
    mapping.insert({"9th","9"});
    mapping.insert({"10th","10"});
    mapping.insert({"11th","11"});
    mapping.insert({"12th","12"});
    mapping.insert({"13th","13"});
    mapping.insert({"14th","14"});
    mapping.insert({"15th","15"});
    mapping.insert({"16th","16"});
    mapping.insert({"17th","17"});
    mapping.insert({"18th","18"});
    mapping.insert({"19th","19"});
    mapping.insert({"20th","20"});
    mapping.insert({"21st","21"});
    mapping.insert({"22nd","22"});
    mapping.insert({"23rd","23"});
    mapping.insert({"24th","24"});
    mapping.insert({"25th","25"});
    mapping.insert({"26th","26"});
    mapping.insert({"27th","27"});
    mapping.insert({"28th","28"});
    mapping.insert({"29th","29"});
    mapping.insert({"30th","30"});
    mapping.insert({"31st","31"});
    mapping.insert({"32nd","32"});
    mapping.insert({"100th","100"});
    
    auto found = mapping.find(word);
    if (found != mapping.end()){
        return found->second;
    }
    return str;
❱