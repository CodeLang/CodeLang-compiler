class
❪string❫
❪iostream❫
❪vector❫
❪SFML/Graphics.hpp❫
⚯
❪algorithm❫
❪"code/utilities/types/vectors/observers/lib"❫
❪"code/utilities/types/vectors/transformers/lib"❫
⚞⚟

◀public: static▶ void ☀Sort_By_Length(std::vector<sf::Text> & words) ❰

    auto temp = words;
    std::sort(temp.begin(),temp.end(),[](sf::Text a, sf::Text b){
        std::string str1 = a.getString();
        std::string str2 = b.getString();
        return str1.size() < str2.size();
    });
    
    Copy_Text_Without_Position(words,temp);
❱

◀public: static▶ void ☀Alphabetize(std::vector<sf::Text> & words) ❰

    auto temp = words;
    std::sort(temp.begin(),temp.end(),[](sf::Text a, sf::Text b){
        std::string str1 = a.getString();
        std::string str2 = b.getString();
        return str1 < str2;
    });
    
    Copy_Text_Without_Position(words,temp);
    
❱

◀public: static▶ void ☀Alphabetize_And_Sort_By_Length(std::vector<sf::Text> & words) ❰

    //first we alphabetize
    auto temp = words;
    std::sort(temp.begin(),temp.end(),[](sf::Text a, sf::Text b){
        std::string str1 = a.getString();
        std::string str2 = b.getString();
        return str1 < str2;
    });
    
    //then we put intp size groups
    std::vector<std::vector<sf::Text>> groups;
    for (auto const& it: temp){
        std::string str = it.getString();
        Expand_Vector_For_Index(groups,str.size());
        groups[str.size()].emplace_back(it);
    }
    
    //flatten
    temp = Flatten(groups);
    
    Copy_Text_Without_Position(words,temp);
❱

◀private: static▶ void ☀Copy_Text_Without_Position(std::vector<sf::Text> & words, std::vector<sf::Text> const& temp)❰
    for (size_t i = 0; i < temp.size(); ++i){
        auto pos = words[i].getPosition();
        words[i] = temp[i];
        words[i].setPosition(pos);
    }
❱