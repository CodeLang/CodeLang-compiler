class
❪string❫
❪vector❫
❪map❫
❪"code/utilities/types/char/letter_case"❫
❪"code/utilities/types/char/optional_letter_case"❫
❪"code/utilities/types/strings/transformers/casing/lib"❫
⚯

⚞⚟

//regular
◀public: static▶ std::string ☀Set_Casing(std::string &s, Letter_Case const& case_style) ❰

    if (case_style == Letter_Case::UPPER){
        Uppercase(s);
    }
    else if (case_style == Letter_Case::LOWER){
        Lowercase(s);
    }
    return s;
❱
◀public: static▶ void ☀Set_Casing(std::vector<std::string> & v, Letter_Case const& case_style) ❰
    for (auto & s: v){
        Set_Casing(s,case_style);
    }
❱
◀public: static▶ void ☀Set_Casing(std::map<std::string,int> & m, Letter_Case const& case_style) ❰
    //c++ is garbage.  use extract or something
    // for (auto & it: m){
    //     Set_Casing(it.first,case_style);
    // }
❱



//optional
◀public: static▶ std::string ☀Set_Casing(std::string &s, Optional_Letter_Case const& case_style) ❰

    if (case_style == Optional_Letter_Case::UPPER){
        Uppercase(s);
    }
    else if (case_style == Optional_Letter_Case::LOWER){
        Lowercase(s);
    }
    else{
        //ignore
    }
    return s;
❱
◀public: static▶ void ☀Set_Casing(std::vector<std::string> & v, Optional_Letter_Case const& case_style) ❰
    for (auto & s: v){
        Set_Casing(s,case_style);
    }
❱
◀public: static▶ void ☀Set_Casing(std::map<std::string,int> & m, Optional_Letter_Case const& case_style) ❰
    //c++ is garbage.  use extract or something
    // for (auto & it: m){
    //     Set_Casing(it.first,case_style);
    // }
❱