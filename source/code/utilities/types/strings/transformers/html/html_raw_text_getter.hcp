class
⚯
⚞⚟

◀public: static▶ std::string ☀parse_away_html_tags(std::string & html)❰
    make_python_str(html);
    auto parsed = pybind11::eval("parse_html(" + html + ")").cast<std::string>();
    return parsed;
❱

◀public: static▶ void ☀add_beautiful_soup_function()❰
    pybind11::exec("from bs4 import BeautifulSoup");
    pybind11::exec(R"(
def parse_html(x):
    soup = BeautifulSoup(x, 'html.parser')
    
    # kill all script and style elements
    for script in soup(["script", "style"]):
        script.decompose()    # rip it out

    result = soup.get_text()
    # print(result)
    return result


def visible(element):
    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
        return False
    elif re.match('<!--.*-->', str(element.encode('utf-8'))):
        return False
    return True
    
def parse_html2(x):
    soup = BeautifulSoup(x)
    data = soup.findAll(text=True)
    result = filter(visible, data)
    return result
)");
❱

◀private: static▶ void ☀make_python_str(std::string & str)❰
    str += "\"\"\"\n";
    str = std::string("\"\"\"\n") + str;
❱

◀private: static▶ void ☀add_beautiful_soup_function_on_path()❰
    pybind11::exec("from bs4 import BeautifulSoup");
    pybind11::exec(R"(
def parse_html(path):

    with open(path, 'r') as content_file:
        content = content_file.read()
    soup = BeautifulSoup(content 'html.parser')
    return soup.get_text()
)");
❱