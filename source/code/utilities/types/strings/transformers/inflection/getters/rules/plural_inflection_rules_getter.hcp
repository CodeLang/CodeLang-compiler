class
❪"code/utilities/types/strings/transformers/inflection/settings/regular/plural_inflections"❫
⚯
⚞⚟
◀public: static▶ Plural_Inflections ☀Get() ❰

Plural_Inflections plurals;

//this is all wrong because I removed the /1 /2 group selectors during replace

//stolen from the ruby on rails inflector library
//the order is important. will convert a plural back into the same plural
plurals.inflections.emplace_back(std::regex("(quiz)$"),"$1zes");
plurals.inflections.emplace_back(std::regex("^(oxen)$"),"$1");
plurals.inflections.emplace_back(std::regex("^(ox)$"),"$1en");
plurals.inflections.emplace_back(std::regex("^(m|l)ice$"),"$1ice");
plurals.inflections.emplace_back(std::regex("^(m|l)ouse$"),"$1ice");
plurals.inflections.emplace_back(std::regex("(matr|vert|ind)(?:ix|ex)$"),"$1ices");
plurals.inflections.emplace_back(std::regex("(x|ch|ss|sh)$"),"$1es");

//stolen from https://github.com/agerwick/inflections/blob/master/lib/inflections/en.rb
//spin off od blog post about ruby on rails shooting themselves in the foot
plurals.inflections.emplace_back(std::regex("([^aeiouy])y$"),"$1ies");
plurals.inflections.emplace_back(std::regex("([^aeiouy]o)$"),"$1es");
plurals.inflections.emplace_back(std::regex("([sxz]|[cs]h)$"),"$1es");

//ruby on rails inflector
plurals.inflections.emplace_back(std::regex("([^aeiouy]|qu)y$"),"$1ies");
plurals.inflections.emplace_back(std::regex("(hive)$"),"$1s");
plurals.inflections.emplace_back(std::regex("(?:([^f])fe|([lr])f)$"),"$1ves");
plurals.inflections.emplace_back(std::regex("sis$"),"ses");
plurals.inflections.emplace_back(std::regex("([ti])a$"),"$1a");
plurals.inflections.emplace_back(std::regex("([ti])um$"),"$1a");
plurals.inflections.emplace_back(std::regex("(buffal|tomat)o$"),"$1oes");
plurals.inflections.emplace_back(std::regex("(bu)s$"),"$1ses");
plurals.inflections.emplace_back(std::regex("(alias|status)$"),"$1es");
plurals.inflections.emplace_back(std::regex("(octop|vir)i$"),"$1i");
plurals.inflections.emplace_back(std::regex("(octop|vir)us$"),"$1i");
plurals.inflections.emplace_back(std::regex("^(ax|test)is$"),"$1es");
plurals.inflections.emplace_back(std::regex("s$"),"s");
plurals.inflections.emplace_back(std::regex("$"),"s");


//stolen from https://github.com/doctrine/inflector/blob/master/lib/Doctrine/Common/Inflector/Inflector.php#L64
plurals.inflections.emplace_back(std::regex("(s)tatus$"),"$1$2tatuses");
plurals.inflections.emplace_back(std::regex("(quiz)$"),"$1zes");
plurals.inflections.emplace_back(std::regex("^(ox)$"),"$1en");
plurals.inflections.emplace_back(std::regex("([m|l])ouse$"),"$1ice");
plurals.inflections.emplace_back(std::regex("(matr|vert|ind)(ix|ex)$"),"$1ices");
plurals.inflections.emplace_back(std::regex("(x|ch|ss|sh)$"),"$1es");
plurals.inflections.emplace_back(std::regex("([^aeiouy]|qu)y$"),"$1ies");
plurals.inflections.emplace_back(std::regex("(hive)$"),"$1s");
plurals.inflections.emplace_back(std::regex("(?:([^f])fe|([lr])f)$"),"$1$2ves");
plurals.inflections.emplace_back(std::regex("sis$"),"ses");
plurals.inflections.emplace_back(std::regex("([ti])um$"),"$1a");
plurals.inflections.emplace_back(std::regex("(p)erson$"),"$1eople");
plurals.inflections.emplace_back(std::regex("(m)an$"),"$1en");
plurals.inflections.emplace_back(std::regex("(c)hild$"),"$1hildren");
plurals.inflections.emplace_back(std::regex("(f)oot$"),"$1eet");
plurals.inflections.emplace_back(std::regex("(buffal|her|potat|tomat|volcan)o$"),"$1$2oes");
plurals.inflections.emplace_back(std::regex("(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$"),"$1i");
plurals.inflections.emplace_back(std::regex("us$"),"uses");
plurals.inflections.emplace_back(std::regex("(alias)$"),"$1es");
plurals.inflections.emplace_back(std::regex("(analys|ax|cris|test|thes)is$"),"$1es");
plurals.inflections.emplace_back(std::regex("s$"),"s");
plurals.inflections.emplace_back(std::regex("^$"),"");
plurals.inflections.emplace_back(std::regex("$"),"s");

//stolen from https://github.com/Automattic/mongoose/blob/master/lib/utils.js
plurals.inflections.emplace_back(std::regex("(m)an$"), "$1en");
plurals.inflections.emplace_back(std::regex("(pe)rson$"), "$1ople");
plurals.inflections.emplace_back(std::regex("(child)$"), "$1ren");
plurals.inflections.emplace_back(std::regex("^(ox)$"), "$1en");
plurals.inflections.emplace_back(std::regex("(ax|test)is$"), "$1es");
plurals.inflections.emplace_back(std::regex("(octop|vir)us$"), "$1i");
plurals.inflections.emplace_back(std::regex("(alias|status)$"), "$1es");
plurals.inflections.emplace_back(std::regex("(bu)s$"), "$1ses");
plurals.inflections.emplace_back(std::regex("(buffal|tomat|potat)o$"), "$1oes");
plurals.inflections.emplace_back(std::regex("([ti])um$"), "$1a");
plurals.inflections.emplace_back(std::regex("sis$"), "ses");
plurals.inflections.emplace_back(std::regex("(?:([^f])fe|([lr])f)$"), "$1$2ves");
plurals.inflections.emplace_back(std::regex("(hive)$"), "$1s");
plurals.inflections.emplace_back(std::regex("([^aeiouy]|qu)y$"), "$1ies");
plurals.inflections.emplace_back(std::regex("(x|ch|ss|sh)$"), "$1es");
plurals.inflections.emplace_back(std::regex("(matr|vert|ind)ix|ex$"), "$1ices");
plurals.inflections.emplace_back(std::regex("([m|l])ouse$"), "$1ice");
plurals.inflections.emplace_back(std::regex("(kn|w|l)ife$"), "$1ives");
plurals.inflections.emplace_back(std::regex("(quiz)$"), "$1zes");
plurals.inflections.emplace_back(std::regex("s$"), "s");
plurals.inflections.emplace_back(std::regex("([^a-z])$"), "$1");
plurals.inflections.emplace_back(std::regex("$"), "s");

return plurals;

❱
