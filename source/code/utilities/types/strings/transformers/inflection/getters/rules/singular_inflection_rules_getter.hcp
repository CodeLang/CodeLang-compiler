class
❪"code/utilities/types/strings/transformers/inflection/settings/regular/singular_inflections"❫
⚯
⚞⚟
◀public: static▶ Singular_Inflections ☀Get() ❰

Singular_Inflections singulars;

//stolen from the ruby on rails inflector library
//the order is important. will convert a plural back into the same plural
singulars.inflections.emplace_back(std::regex("(database)s$"), "$1");
singulars.inflections.emplace_back(std::regex("(quiz)zes$"), "$1");
singulars.inflections.emplace_back(std::regex("(matr)ices$"), "$1ix");
singulars.inflections.emplace_back(std::regex("(vert|ind)ices$"), "$1ex");
singulars.inflections.emplace_back(std::regex("^(ox)en"), "$1");
singulars.inflections.emplace_back(std::regex("(alias|status)(es)?$"), "$1");
singulars.inflections.emplace_back(std::regex("(octop|vir)(us|i)$"), "$1us");
singulars.inflections.emplace_back(std::regex("^(a)x[ie]s$"), "$1xis");
singulars.inflections.emplace_back(std::regex("(cris|test)(is|es)$"), "$1is");
singulars.inflections.emplace_back(std::regex("(shoe)s$"), "$1");
singulars.inflections.emplace_back(std::regex("(o)es$"), "$1");
singulars.inflections.emplace_back(std::regex("(bus)(es)?$"), "$1");
singulars.inflections.emplace_back(std::regex("^(m|l)ice$"), "$1ouse");
singulars.inflections.emplace_back(std::regex("(x|ch|ss|sh)es$"), "$1");
singulars.inflections.emplace_back(std::regex("(m)ovies$"), "$1ovie");
singulars.inflections.emplace_back(std::regex("(s)eries$"), "$1eries");
singulars.inflections.emplace_back(std::regex("([^aeiouy]|qu)ies$"), "$1y");
singulars.inflections.emplace_back(std::regex("([lr])ves$"), "$1f");
singulars.inflections.emplace_back(std::regex("(tive)s$"), "$1");
singulars.inflections.emplace_back(std::regex("(hive)s$"), "$1");
singulars.inflections.emplace_back(std::regex("([^f])ves$"), "$1fe");
singulars.inflections.emplace_back(std::regex("(^analy)(sis|ses)$"), "$1sis");
singulars.inflections.emplace_back(std::regex("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$"), "$1sis");
singulars.inflections.emplace_back(std::regex("([ti])a$"), "$1um");
singulars.inflections.emplace_back(std::regex("(n)ews$"), "$1ews");
singulars.inflections.emplace_back(std::regex("(ss)$"), "$1");
singulars.inflections.emplace_back(std::regex("s$"), "");

//stolen from https://github.com/agerwick/inflections/blob/master/lib/inflections/en.rb
//spin off od blog post about ruby on rails shooting themselves in the foot
singulars.inflections.emplace_back(std::regex("([^aeiouy])ies$/i"), "$1y");
singulars.inflections.emplace_back(std::regex("([^aeiouy]o)es$/"), "$1");
singulars.inflections.emplace_back(std::regex("([sxz]|[cs]h)es$/"), "$1");
singulars.inflections.emplace_back(std::regex("(ss)$/i"), "$1");
singulars.inflections.emplace_back(std::regex("s$/i"), "");



//stolen from https://github.com/doctrine/inflector/blob/master/lib/Doctrine/Common/Inflector/Inflector.php#L64
singulars.inflections.emplace_back(std::regex("(s)tatuses$"),"$1$2tatus");
singulars.inflections.emplace_back(std::regex("^(.*)(menu)s$"),"$1$2");
singulars.inflections.emplace_back(std::regex("(quiz)zes$"),"$1");
singulars.inflections.emplace_back(std::regex("(matr)ices$"),"$1ix");
singulars.inflections.emplace_back(std::regex("(vert|ind)ices$"),"$1ex");
singulars.inflections.emplace_back(std::regex("^(ox)en"),"$1");
singulars.inflections.emplace_back(std::regex("(alias)(es)*$"),"$1");
singulars.inflections.emplace_back(std::regex("(buffal|her|potat|tomat|volcan)oes$"),"$1o");
singulars.inflections.emplace_back(std::regex("(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$"),"$1us");
singulars.inflections.emplace_back(std::regex("([ftw]ax)es"),"$1");
singulars.inflections.emplace_back(std::regex("(analys|ax|cris|test|thes)es$"),"$1is");
singulars.inflections.emplace_back(std::regex("(shoe|slave)s$"),"$1");
singulars.inflections.emplace_back(std::regex("(o)es$"),"$1");
singulars.inflections.emplace_back(std::regex("ouses$"),"ouse");
singulars.inflections.emplace_back(std::regex("([^a])uses$"),"$1us");
singulars.inflections.emplace_back(std::regex("([m|l])ice$"),"$1ouse");
singulars.inflections.emplace_back(std::regex("(x|ch|ss|sh)es$"),"$1");
singulars.inflections.emplace_back(std::regex("(m)ovies$"),"$1ovie");
singulars.inflections.emplace_back(std::regex("(s)eries$"),"$1eries");
singulars.inflections.emplace_back(std::regex("([^aeiouy]|qu)ies$"),"$1y");
singulars.inflections.emplace_back(std::regex("([lr])ves$"),"$1f");
singulars.inflections.emplace_back(std::regex("(tive)s$"),"$1");
singulars.inflections.emplace_back(std::regex("(hive)s$"),"$1");
singulars.inflections.emplace_back(std::regex("(drive)s$"),"$1");
singulars.inflections.emplace_back(std::regex("([^fo])ves$"),"$1fe");
singulars.inflections.emplace_back(std::regex("(^analy)ses$"),"$1sis");
singulars.inflections.emplace_back(std::regex("(analy|diagno|^ba|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$"),"$1$2sis");
singulars.inflections.emplace_back(std::regex("([ti])a$"),"$1um");
singulars.inflections.emplace_back(std::regex("(p)eople$"),"$1$2erson");
singulars.inflections.emplace_back(std::regex("(m)en$"),"$1an");
singulars.inflections.emplace_back(std::regex("(c)hildren$"),"$1$2hild");
singulars.inflections.emplace_back(std::regex("(f)eet$"),"$1oot");
singulars.inflections.emplace_back(std::regex("(n)ews$"),"$1$2ews");
singulars.inflections.emplace_back(std::regex("eaus$"),"eau");
singulars.inflections.emplace_back(std::regex("^(.*us)$"),"$1");
singulars.inflections.emplace_back(std::regex("s$"),"");

return singulars;

❱
