class
❪string❫
❪regex❫
❪vector❫
❪"code/utilities/types/strings/transformers/inflection/settings/inflection_settings"❫
⚯
❪"code/utilities/types/strings/observers/splitting/lib"❫
❪"code/utilities/output/printers/lib"❫
❪"code/utilities/types/strings/observers/other/lib"❫
⚞⚟

◀public: static▶ std::string ☀Inflect_Based_On_Count(std::string s, Inflection_Settings const& settings, int count) ❰
    if (count == 1){
        return As_Singular(s,settings);
    }
    return As_Plural(s,settings);
❱



//a simple and inaccurate version of making a word singular
◀public: static▶ std::string ☀As_Singular_Simple(std::string s, Inflection_Settings const& settings) ❰

    if (Ends_With(s,"s")){
        s.pop_back();
    }
    return s;
❱
◀public: static▶ std::string ☀As_Singular(std::string s, Inflection_Settings const& settings) ❰
    
    //first check to see if it is one of our known uninfected words
    if (There_Exists_A_Match(s,settings.uninflected)){ return s;}
    
    //then check to see if it was one of the irregulars
    for (auto pair: settings.irregulars.inflections){
        if (pair.singular == s || pair.plural == s){
            return pair.singular;
        }
    }
    
    //our last conversion attempt is to run against some
    //ordered regex patterns till we have a match
    return Convert_Through_Rules(s,settings.singulars.inflections);
❱
◀public: static▶ std::string ☀As_Plural(std::string s, Inflection_Settings const& settings) ❰

    //first check to see if it is one of our known uninfected words
    if (There_Exists_A_Match(s,settings.uninflected)){ return s;}
    
    //then check to see if it was one of the irregulars
    for (auto pair: settings.irregulars.inflections){
        if (pair.singular == s || pair.plural == s){
            return pair.plural;
        }
    }
    
    //our last conversion attempt is to run against some
    //ordered regex patterns till we have a match
    return Convert_Through_Rules(s,settings.plurals.inflections);
❱


//utilities
◀private: static▶ bool ☀There_Exists_A_Match(std::string s, std::vector<std::regex> regexes) ❰
        for (auto it: regexes){
            if (std::regex_search(s,it)){
                return true;
            }
        }
        return false;
❱
◀private: static▶ std::string ☀Convert_Through_Rules(std::string s, std::vector<Inflection> inflections) ❰

    //make sure its actually 1 word
    auto words = Split_By_Spaces(s);
    //std::cout << words << std::endl;
    auto last_word = words.back();
    words.pop_back();
    
    for (auto inflection: inflections){
      if (std::regex_search(last_word,inflection.rule)){
        auto replace_version = std::regex_replace(last_word,inflection.rule,inflection.replacement);
        last_word = replace_version;
        break;
      }
    }
    
    //re-assemble if it was not 1 word
    std::string final;
    for (auto const& it: words){
        final += it + " ";
    }
    final += last_word;
    
    return final;
❱