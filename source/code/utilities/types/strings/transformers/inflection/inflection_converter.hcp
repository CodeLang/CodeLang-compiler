class
❪string❫
❪regex❫
❪vector❫
❪"code/utilities/types/strings/transformers/inflection/settings/inflection_settings"❫
⚯
⚞⚟

◀public: static▶ std::string ☀As_Singular(std::string s, Inflection_Settings const& settings) ❰
    
    //first check to see if it is one of our known uninfected words
    if (There_Exists_A_Match(s,settings.uninflected)){ return s;}
    
    //then check to see if it was one of the irregulars
    for (auto pair: settings.irregulars.inflections){
        if (pair.singular == s || pair.plural == s){
            return pair.singular;
        }
    }
    
    //our last conversion attempt is to run against some
    //ordered regex patterns till we have a match
    return Convert_Through_Rules(s,settings.singulars.inflections);
❱
◀public: static▶ std::string ☀As_Plural(std::string s, Inflection_Settings const& settings) ❰

    //first check to see if it is one of our known uninfected words
    if (There_Exists_A_Match(s,settings.uninflected)){ return s;}
    
    //then check to see if it was one of the irregulars
    for (auto pair: settings.irregulars.inflections){
        if (pair.singular == s || pair.plural == s){
            return pair.plural;
        }
    }
    
    //our last conversion attempt is to run against some
    //ordered regex patterns till we have a match
    return Convert_Through_Rules(s,settings.plurals.inflections);
❱


//utilities
◀private: static▶ bool ☀There_Exists_A_Match(std::string s, std::vector<std::regex> regexes) ❰
        for (auto it: regexes){
            if (std::regex_search(s,it)){
                return true;
            }
        }
        return false;
❱
◀private: static▶ std::string ☀Convert_Through_Rules(std::string s, std::vector<Inflection> inflections) ❰
    
    for (auto inflection: inflections){
      if (std::regex_search(s,inflection.rule)){
        auto replace_version = std::regex_replace(s,inflection.rule,inflection.replacement);
        return replace_version;
      }
    }
    return s;
❱