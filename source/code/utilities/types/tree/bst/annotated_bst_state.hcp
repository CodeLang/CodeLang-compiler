class
❪string❫
❪iostream❫
❪utility❫
❪vector❫
❪"code/utilities/data_structures/tree/binary_node.hpp"❫
⚯

⚞⚟

◀
public:
    
    //actual storage for algorithm
    BinaryNode<int>* a = nullptr;
    BinaryNode<int>* b = nullptr;
    
    //offlimits from algorithm
    //but used for observation of state
    BinaryNode<int>* root = nullptr;
    
    bool draw_photo = true;
    int current_photo = 0;
    
    //all the original nodes
    //(this makes it easy to query all the original nodes before the graph gets tangled and not easily traversed)
    std::vector<BinaryNode<int>*> all_nodes;
    std::vector<std::vector<int>> val_heights;
    std::vector<std::pair<std::optional<int>,std::optional<int>>> original_connections;
    
    //we annotate this because we need to draw the graph different after the swap
    //to avoid it rendering more tangled than it actually is
    bool swap_occured = false;
    std::pair<int,int> swapped_vals;
    
    bool comparing_values = false;
    std::pair<int,int> compared_vals;
    
▶