class
❪"code/utilities/data_structures/tree/binary_nodes"❫
❪vector❫
❪iostream❫
⚯
⚞⚟

◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example1()❰
  
  //     6 
  //    /  \ 
  //   10   2 
  //  /  \ /  \ 
  // 1   3 7  12 
  // 10 and 2 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  x.nodes[0]->right->left = &*x.nodes[5];
  x.nodes[0]->right->right = &*x.nodes[6];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example2()❰
  
  //       10
  //      /  \
  //     5    8
  //    / \
  //   2   20
  // 20 and 8 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example3()❰
  //        2
  //      /  \
  //     3    1
  // 3 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example4()❰
    //        2
    //      /  \
    //     1    3
    //    /      \
    //   4        0
    // 4 and 0 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(0));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example5()❰
  //       4
  //      /  \
  //     3    5
  //    /      \
  //   2        6
  //  /          \
  // 7            1
  // 7 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  x.nodes[0]->left->left->left = &*x.nodes[5];
  x.nodes[0]->right->right->right = &*x.nodes[6];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example6()❰
  //       7
  //      /  \
  //     3    5
  //    /      \
  //   2        6
  //  /          \
  // 1            4
  // 7 and 4 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  x.nodes[0]->left->left->left = &*x.nodes[5];
  x.nodes[0]->right->right->right = &*x.nodes[6];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example7()❰
  //     6 
  //    /  \ 
  //   2    10 
  //  /  \ /  \ 
  // 12   3 7  1 
  // 12 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  x.nodes[0]->right->left = &*x.nodes[5];
  x.nodes[0]->right->right = &*x.nodes[6];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example8()❰
//
//                    9
//                   / \
//                  8   15
//                 /   / \ 
//                7  14   19
//               /  /    / \
//              6  13   17  10
//             /  /    / \   \
//            1  20   16  18  25
//             \  \          /  
//              2  11       24  
//               \  \      /    
//                4  12    22   
//               / \      / \   
//              3   5    21  23 
//              20 and 10 swapped

//top layer
BinaryNodes<int> x;
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(15));

//2nd
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(14));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));

//3rd
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(13));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(17));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));

//4th
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(16));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(25));

//5th
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(24));

//6th
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(22));

//7th
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(21));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(23));
x.nodes[0]->left = &*x.nodes[1];
x.nodes[0]->right = &*x.nodes[2];
x.nodes[0]->left->left = &*x.nodes[3];
x.nodes[0]->right->left = &*x.nodes[4];
x.nodes[0]->right->right = &*x.nodes[5];
x.nodes[0]->left->left->left = &*x.nodes[6];
x.nodes[0]->right->left->left = &*x.nodes[7];
x.nodes[0]->right->right->left = &*x.nodes[8];
x.nodes[0]->right->right->right = &*x.nodes[9];
x.nodes[0]->left->left->left->left = &*x.nodes[10];
x.nodes[0]->right->left->left->left = &*x.nodes[11];
x.nodes[0]->right->right->left->left = &*x.nodes[12];
x.nodes[0]->right->right->left->right = &*x.nodes[13];
x.nodes[0]->right->right->right->right = &*x.nodes[14];
x.nodes[0]->left->left->left->left->right = &*x.nodes[15];
x.nodes[0]->right->left->left->left->right = &*x.nodes[16];
x.nodes[0]->right->right->right->right->left = &*x.nodes[17];
x.nodes[0]->left->left->left->left->right->right = &*x.nodes[18];
x.nodes[0]->right->left->left->left->right->right = &*x.nodes[19];
x.nodes[0]->right->right->right->right->left->left = &*x.nodes[20];
x.nodes[0]->left->left->left->left->right->right->left = &*x.nodes[21];
x.nodes[0]->left->left->left->left->right->right->right = &*x.nodes[22];
x.nodes[0]->right->right->right->right->left->left->left = &*x.nodes[23];
x.nodes[0]->right->right->right->right->left->left->right = &*x.nodes[24];
return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example9()❰
//
//           6
//          / \
//         5   7
//        /     \
//       8       4
//      /         \
//     3           9
//    /             \
//   2               10
//  /                 \
// 1                   11
//4 and 8 are swapped
BinaryNodes<int> x;
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
x.nodes[0]->left = &*x.nodes[1];
x.nodes[0]->right = &*x.nodes[2];
x.nodes[0]->left->left = &*x.nodes[3];
x.nodes[0]->right->right = &*x.nodes[4];
x.nodes[0]->left->left->left = &*x.nodes[5];
x.nodes[0]->right->right->right = &*x.nodes[6];
x.nodes[0]->left->left->left->left = &*x.nodes[7];
x.nodes[0]->right->right->right->right = &*x.nodes[8];
x.nodes[0]->left->left->left->left->left = &*x.nodes[9];
x.nodes[0]->right->right->right->right->right = &*x.nodes[10];
return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example10()❰
  
  //       10
  //      /  \
  //     5    8
  //    / \
  //   2   20
  // 20 and 8 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_NonAdjecent_Example11()❰
  
  //       10
  //      /  \
  //     5    2
  //    / \
  //   20   8
  // 20 and 2 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱





◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example1()❰
  //       10
  //      /  \
  //     6    20
  //    / \
  //   2   5
  // 5 and 6 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example2()❰
  //       10
  //      /  \
  //     4    20
  //    / \
  //   5   7
  // 4 and 5 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example3()❰
  //        5
  //      /  \
  //     10    20
  //    / \
  //   4   7
  // 5 and 10 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example4()❰
  
  //        1
  //      /  \
  //     2    3
  // 2 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example5()❰
  
  //        1
  //      /  \
  //     2    3
  //    /
  //   0
  // 2 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(0));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example6()❰
  //        1
  //      /  \
  //     2    3
  //           \
  //            4
  // 2 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->right->right = &*x.nodes[3];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example7()❰
    //        1
    //      /  \
    //     2    3
    //   /       \
    //  0         4
    // 2 and 1 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(0));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example8()❰
 //           20
 //         /
 //        19
 //      /
 //     18
 //    /
 //   5
 //  / \
 // 6   7
   
 //    6 and 5 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->left->left = &*x.nodes[2];
  x.nodes[0]->left->left->left = &*x.nodes[3];
  x.nodes[0]->left->left->left->left = &*x.nodes[4];
  x.nodes[0]->left->left->left->right = &*x.nodes[5];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example9()❰
 //           20
 //         /
 //        19
 //      /
 //     18
 //    /
 //   7
 //  / \
 // 5   6
   
 //    7 and 6 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->left->left = &*x.nodes[2];
  x.nodes[0]->left->left->left = &*x.nodes[3];
  x.nodes[0]->left->left->left->left = &*x.nodes[4];
  x.nodes[0]->left->left->left->right = &*x.nodes[5];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example10()❰
    //        3
    //      /  \
    //     1    2
    // 3 and 2 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example11()❰
  // 2
  //  \
  //   1
  //   1 and 2 are swapped
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->right = &*x.nodes[1];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀TwoNodesSwapped_Adjecent_Example12()❰
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes[0]->left = &*x.nodes[1];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example1()❰
     //     6 
     //    /  \ 
     //   2    10 
     //  /  \ /  \ 
     // 1   3 7  12 
    BinaryNodes<int> x;
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->left->left = &*x.nodes[3];
    x.nodes[0]->left->right = &*x.nodes[4];
    x.nodes[0]->right->left = &*x.nodes[5];
    x.nodes[0]->right->right = &*x.nodes[6];
    return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example2()❰
    //    2
    //  /  \
    // 1    3
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example3()❰
     //       2
     //     /  \
     //    1    3
     //  /       \
     // 0         4
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(0));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example4()❰
  // 1-2-3-4-5-6-7-8-9-10
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->left->left = &*x.nodes[2];
  x.nodes[0]->left->left->left = &*x.nodes[3];
  x.nodes[0]->left->left->left->left = &*x.nodes[4];
  x.nodes[0]->left->left->left->left->left = &*x.nodes[5];
  x.nodes[0]->left->left->left->left->left->left = &*x.nodes[6];
  x.nodes[0]->left->left->left->left->left->left->left = &*x.nodes[7];
  x.nodes[0]->left->left->left->left->left->left->left->left = &*x.nodes[8];
  x.nodes[0]->left->left->left->left->left->left->left->left->left = &*x.nodes[9];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example5()❰
  // 1-2-3-4-5-6-7-8-9-10
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes[0]->right = &*x.nodes[1];
  x.nodes[0]->right->right = &*x.nodes[2];
  x.nodes[0]->right->right->right = &*x.nodes[3];
  x.nodes[0]->right->right->right->right = &*x.nodes[4];
  x.nodes[0]->right->right->right->right->right = &*x.nodes[5];
  x.nodes[0]->right->right->right->right->right->right = &*x.nodes[6];
  x.nodes[0]->right->right->right->right->right->right->right = &*x.nodes[7];
  x.nodes[0]->right->right->right->right->right->right->right->right = &*x.nodes[8];
  x.nodes[0]->right->right->right->right->right->right->right->right->right = &*x.nodes[9];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example6()❰
    //  2
    // /
    // 1
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes[0]->left = &*x.nodes[1];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example7()❰
     // 1
     // \
     //  2
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes[0]->right = &*x.nodes[1];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example8()❰
    //    2
    //  /  \
    // 1    3
    //       \
    //        5
    //       / \
    //      4   6
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->right->right = &*x.nodes[3];
  x.nodes[0]->right->right->left = &*x.nodes[4];
  x.nodes[0]->right->right->right = &*x.nodes[5];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example9()❰
      //       5
      //      / \
      //     4   6
      //    /
      //   2
      //  / \
      // 1   3
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->left = &*x.nodes[3];
  x.nodes[0]->left->left->left = &*x.nodes[4];
  x.nodes[0]->left->left->right = &*x.nodes[5];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example10()❰
  // 13
  // /
  // 11
  // \
  //  12
  //  /
  //  9
  //  \
  //   10
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(13));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->left->right = &*x.nodes[2];
  x.nodes[0]->left->right->left = &*x.nodes[3];
  x.nodes[0]->left->right->left->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example11()❰
   // 1
   //  \
   //   6
   //  /
   // 3
   //  \
   //   5
   //   /
   //  4
   BinaryNodes<int> x;
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
    x.nodes[0]->right = &*x.nodes[1];
    x.nodes[0]->right->left = &*x.nodes[2];
    x.nodes[0]->right->left->right = &*x.nodes[3];
    x.nodes[0]->right->left->right->left = &*x.nodes[4];
   return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example12()❰
     //     6 
     //    /  \ 
     //   2    10 
     //  /  \ /   \ 
     // 1   3 7     12
     //      \  \   /
     //      4  8  11
   BinaryNodes<int> x;
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
   x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->left->left = &*x.nodes[3];
    x.nodes[0]->left->right = &*x.nodes[4];
    x.nodes[0]->right->left = &*x.nodes[5];
    x.nodes[0]->right->right = &*x.nodes[6];
    x.nodes[0]->left->right->right = &*x.nodes[7];
    x.nodes[0]->right->left->right = &*x.nodes[8];
    x.nodes[0]->right->right->left = &*x.nodes[9];
   return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example13()❰
   //        10
   //       /  \
   //      9    11
   //    /       \
   //   8         12
   //  /           \
   // 0             20
   //  \            /
   //   1          19
   //     \       / 
   //       2   18
   //        \  /
   //        3  17
   BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(0));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(17));
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->left->left = &*x.nodes[3];
    x.nodes[0]->right->right = &*x.nodes[4];
    x.nodes[0]->left->left->left = &*x.nodes[5];
    x.nodes[0]->right->right->right =&*x.nodes[6];
    x.nodes[0]->left->left->left->right = &*x.nodes[7];
    x.nodes[0]->right->right->right->left = &*x.nodes[8];
    x.nodes[0]->left->left->left->right->right = &*x.nodes[9];
    x.nodes[0]->right->right->right->left->left = &*x.nodes[10];
    x.nodes[0]->left->left->left->right->right->right = &*x.nodes[11];
    x.nodes[0]->right->right->right->left->left->left = &*x.nodes[12];
   return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example14()❰
       //    12
       //  /    \
       // 1      23
       //  \    /
       //   11 13
       //  /    \
       // 2      22
       //  \    /
       //   10 14
       //  /    \
       // 3      21
       //  \    /
       //   9  15
       //  /    \
       // 4      20
       //  \    /
       //   8  16
       //  /    \
       // 5      19
       //  \    /
       //   7  17
       //  /    \
       // 6      18
   BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(23));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(13));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(22));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(14));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(21));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(15));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(16));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(17));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->left->right = &*x.nodes[3];
  x.nodes[0]->right->left = &*x.nodes[4];
  x.nodes[0]->left->right->left = &*x.nodes[5];
  x.nodes[0]->right->left->right = &*x.nodes[6];
  x.nodes[0]->left->right->left->right = &*x.nodes[7];
  x.nodes[0]->right->left->right->left = &*x.nodes[8];
  x.nodes[0]->left->right->left->right->left = &*x.nodes[9];
  x.nodes[0]->right->left->right->left->right = &*x.nodes[10];
  x.nodes[0]->left->right->left->right->left->right = &*x.nodes[11];
  x.nodes[0]->right->left->right->left->right->left = &*x.nodes[12];
  x.nodes[0]->left->right->left->right->left->right->left = &*x.nodes[13];
  x.nodes[0]->right->left->right->left->right->left->right = &*x.nodes[14];
  x.nodes[0]->left->right->left->right->left->right->left->right = &*x.nodes[15];
  x.nodes[0]->right->left->right->left->right->left->right->left = &*x.nodes[16];
  x.nodes[0]->left->right->left->right->left->right->left->right->left = &*x.nodes[17];
  x.nodes[0]->right->left->right->left->right->left->right->left->right = &*x.nodes[18];
  x.nodes[0]->left->right->left->right->left->right->left->right->left->right = &*x.nodes[19];
  x.nodes[0]->right->left->right->left->right->left->right->left->right->left = &*x.nodes[20];
  x.nodes[0]->left->right->left->right->left->right->left->right->left->right->left = &*x.nodes[21];
  x.nodes[0]->right->left->right->left->right->left->right->left->right->left->right = &*x.nodes[22];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example15()❰
       //    12
       //  /    \
       // 1      23
       //  \    /  \
       //   11 13   24
       //  /    \    \
       // 2      22   25
       //  \    /      \
       //   10 14       26
       //  /    \        \
       // 3      21      27
       //  \    /         \
       //   9  15         28
       //  /    \
       // 4      20
       //  \    /
       //   8  16
       //  /    \
       // 5      19
       //  \    /
       //   7  17
       //  /    \
       // 6      18
    BinaryNodes<int> x;
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(12));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(1));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(23));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(11));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(13));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(2));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(22));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(10));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(14));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(3));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(21));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(9));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(15));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(4));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(20));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(8));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(16));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(5));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(19));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(7));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(17));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(6));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(18));
    
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(24));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(25));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(26));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(27));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>>(28));
    
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->left->right = &*x.nodes[3];
    x.nodes[0]->right->left = &*x.nodes[4];
    x.nodes[0]->left->right->left = &*x.nodes[5];
    x.nodes[0]->right->left->right = &*x.nodes[6];
    x.nodes[0]->left->right->left->right = &*x.nodes[7];
    x.nodes[0]->right->left->right->left = &*x.nodes[8];
    x.nodes[0]->left->right->left->right->left = &*x.nodes[9];
    x.nodes[0]->right->left->right->left->right = &*x.nodes[10];
    x.nodes[0]->left->right->left->right->left->right = &*x.nodes[11];
    x.nodes[0]->right->left->right->left->right->left = &*x.nodes[12];
    x.nodes[0]->left->right->left->right->left->right->left = &*x.nodes[13];
    x.nodes[0]->right->left->right->left->right->left->right = &*x.nodes[14];
    x.nodes[0]->left->right->left->right->left->right->left->right = &*x.nodes[15];
    x.nodes[0]->right->left->right->left->right->left->right->left = &*x.nodes[16];
    x.nodes[0]->left->right->left->right->left->right->left->right->left = &*x.nodes[17];
    x.nodes[0]->right->left->right->left->right->left->right->left->right = &*x.nodes[18];
    x.nodes[0]->left->right->left->right->left->right->left->right->left->right = &*x.nodes[19];
    x.nodes[0]->right->left->right->left->right->left->right->left->right->left = &*x.nodes[20];
    x.nodes[0]->left->right->left->right->left->right->left->right->left->right->left = &*x.nodes[21];
    x.nodes[0]->right->left->right->left->right->left->right->left->right->left->right = &*x.nodes[22];
    
    x.nodes[0]->right->right = &*x.nodes[23];
    x.nodes[0]->right->right->right = &*x.nodes[24];
    x.nodes[0]->right->right->right->right = &*x.nodes[25];
    x.nodes[0]->right->right->right->right->right = &*x.nodes[26];
    x.nodes[0]->right->right->right->right->right->right = &*x.nodes[27];
    return x;
❱
◀public: static▶ BinaryNodes<int> ☀Correct_Tree_Example16()❰
       //    12
       //  /    \
       // 1      23
       //  \    /  \
       //   11 13   24
       //  /    \    \
       // 2      22   25
       //  \    /      \
       //   10 14       26
       //  /    \        \
       // 3      21      27
       //  \    /         \
       //   9  15         31
       //  /    \        /
       // 4      20     28
       //  \    /        \
       //   8  16         30
       //  /    \        /
       // 5      19     29
       //  \    /
       //   7  17
       //  /    \
       // 6      18
    BinaryNodes<int> x;
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (12));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (1));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (23));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (11));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (13));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (2));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (22));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (10));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (14));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (3));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (21));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (9));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (15));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (4));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (20));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (8));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (16));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (5));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (19));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (7));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (17));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (6));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (18));
    
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (24));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (25));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (26));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (27));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (31));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (28));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (30));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (29));
    
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->left->right = &*x.nodes[3];
    x.nodes[0]->right->left = &*x.nodes[4];
    x.nodes[0]->left->right->left = &*x.nodes[5];
    x.nodes[0]->right->left->right = &*x.nodes[6];
    x.nodes[0]->left->right->left->right = &*x.nodes[7];
    x.nodes[0]->right->left->right->left = &*x.nodes[8];
    x.nodes[0]->left->right->left->right->left = &*x.nodes[9];
    x.nodes[0]->right->left->right->left->right = &*x.nodes[10];
    x.nodes[0]->left->right->left->right->left->right = &*x.nodes[11];
    x.nodes[0]->right->left->right->left->right->left = &*x.nodes[12];
    x.nodes[0]->left->right->left->right->left->right->left = &*x.nodes[13];
    x.nodes[0]->right->left->right->left->right->left->right = &*x.nodes[14];
    x.nodes[0]->left->right->left->right->left->right->left->right = &*x.nodes[15];
    x.nodes[0]->right->left->right->left->right->left->right->left = &*x.nodes[16];
    x.nodes[0]->left->right->left->right->left->right->left->right->left = &*x.nodes[17];
    x.nodes[0]->right->left->right->left->right->left->right->left->right = &*x.nodes[18];
    x.nodes[0]->left->right->left->right->left->right->left->right->left->right = &*x.nodes[19];
    x.nodes[0]->right->left->right->left->right->left->right->left->right->left = &*x.nodes[20];
    x.nodes[0]->left->right->left->right->left->right->left->right->left->right->left = &*x.nodes[21];
    x.nodes[0]->right->left->right->left->right->left->right->left->right->left->right = &*x.nodes[22];
    
    x.nodes[0]->right->right = &*x.nodes[23];
    x.nodes[0]->right->right->right = &*x.nodes[24];
    x.nodes[0]->right->right->right->right = &*x.nodes[25];
    x.nodes[0]->right->right->right->right->right = &*x.nodes[26];
    x.nodes[0]->right->right->right->right->right->right = &*x.nodes[27];
    x.nodes[0]->right->right->right->right->right->right->left = &*x.nodes[28];
    x.nodes[0]->right->right->right->right->right->right->left->right = &*x.nodes[29];
    x.nodes[0]->right->right->right->right->right->right->left->right->left = &*x.nodes[30];
    return x;
❱
◀public: static▶ BinaryNodes<int> ☀Example_Hickey_Hijack_Easy()❰
  //    2
  //  /  \
  // 1    4
  //     / \
  //    3   5
  BinaryNodes<int> x;
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (2));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (1));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (4));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (3));
  x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (5));
  x.nodes[0]->left = &*x.nodes[1];
  x.nodes[0]->right = &*x.nodes[2];
  x.nodes[0]->right->left = &*x.nodes[3];
  x.nodes[0]->right->right = &*x.nodes[4];
  return x;
❱
◀public: static▶ BinaryNodes<int> ☀Example_Hickey_Hijack_Hard()❰
        //    2
        //  /  \
        // 1    3
        //       \
        //        11
        //       /
        //      5
        //     / \
        //    4   7
        //       / \
        //      6   10
        //         /
        //        8
        //         \
        //          9
    BinaryNodes<int> x;
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (2));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (1));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (3));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (11));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (5));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (4));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (7));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (6));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (10));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (8));
    x.nodes.emplace_back(std::make_shared<BinaryNode<int>> (9));
    x.nodes[0]->left = &*x.nodes[1];
    x.nodes[0]->right = &*x.nodes[2];
    x.nodes[0]->right->right = &*x.nodes[3];
    x.nodes[0]->right->right->left = &*x.nodes[4];
    x.nodes[0]->right->right->left->left = &*x.nodes[5];
    x.nodes[0]->right->right->left->right = &*x.nodes[6];
    x.nodes[0]->right->right->left->right->left = &*x.nodes[7];
    x.nodes[0]->right->right->left->right->right = &*x.nodes[8];
    x.nodes[0]->right->right->left->right->right->left = &*x.nodes[9];
    x.nodes[0]->right->right->left->right->right->left->right = &*x.nodes[10];
  return x;
❱