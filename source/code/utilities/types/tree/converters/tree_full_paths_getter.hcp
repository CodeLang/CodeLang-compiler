class
❪string❫
❪unordered_set❫
❪"code/utilities/data_structures/tree/generic/string_tree"❫
⚯
❪iostream❫
⚞⚟


◀public: static▶ std::unordered_set<std::string> ☀Get_All_Parent_Paths(String_Tree const& str_tree)❰
    
    std::unordered_set<std::string> paths;
    for (auto it = str_tree.nodes.begin(); it != str_tree.nodes.end(); ++it){
        if (str_tree.nodes.number_of_children(it) > 0){
            paths.insert(Full_Node_Name(str_tree,it));
        }
    }
    
    return paths;
❱

◀public: static▶ std::unordered_set<std::string> ☀Get_All_Child_Paths(String_Tree const& str_tree)❰

    std::unordered_set<std::string> paths;
    for (auto it = str_tree.nodes.begin(); it != str_tree.nodes.end(); ++it){
        if (str_tree.nodes.number_of_children(it) == 0){
            paths.insert(Full_Node_Name(str_tree,it));
        }
    }
    
    return paths;
❱



◀private: static▶ std::string ☀Full_Node_Name(String_Tree const& str_tree, tree<std::string>::pre_order_iterator it)❰
    std::string full_name;
    
    while (str_tree.nodes.parent(it) != nullptr){
        
        full_name = *it + "/" + full_name;
        it = str_tree.nodes.parent(it);
    }
    full_name = *it + "/" + full_name;
    
    return full_name;
❱