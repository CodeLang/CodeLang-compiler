class
❪iostream❫
❪string❫
⚯
⚞⚟

//parent utility
//check if parent is really a parent of child
◀public:
template <typename T>
static bool is_right_child(T* parent, T* child){
    if (parent->right){
        if (parent->right->val == child->val){
            return true;
        }
    }
    return false;
}
▶

◀public:
template <typename T>
static bool is_left_child(T* parent, T* child){
    if (parent->left){
        if (parent->left->val == child->val){
            return true;
        }
    }
    return false;
}
▶

◀public:
template <typename T>
static bool has_no_children(T* t){
    if (t->left){
        return false;
    }
    if (t->right){
        return false;
    }
    return true;
}
▶

◀public:
template <typename T>
static bool is_parent_of(T* parent, T* child){
    return is_right_child(parent,child) || is_left_child(parent,child);
}
▶

◀public:
template <typename T>
static bool have_parent_relationship(T* n1, T* n2){
    return is_parent_of(n1,n2) || is_parent_of(n2,n1);
}
▶


◀public:
template <typename T>
static bool are_adjacent(T* node1, T* node2){
    return is_parent_of(node1,node2) || is_parent_of(node2,node1);
}
▶

◀public:
template <typename T>
static T* get_parent(T* node1, T* node2){
    if (is_parent_of(node1,node2)){
        return node1;
    }
    if (is_parent_of(node2,node1)){
        return node2;
    }
    return nullptr;
}
▶

◀public:
template <typename T>
static T* get_child(T* node1, T* node2){
    if (is_parent_of(node1,node2)){
        return node2;
    }
    if (is_parent_of(node2,node1)){
        return node1;
    }
    return nullptr;
}
▶

◀public:
template <typename T>
static std::pair<T*,T*> as_parent_child(std::pair<T*,T*> const& nodes){
    std::pair<T*,T*> results;
    results.first = get_parent(nodes.first,nodes.second);
    results.second = get_child(nodes.first,nodes.second);
    return results;
}
▶

◀public:
template <typename T>
static bool left_child_breaks_bst_constraint(T* parent)
{
    if (parent->left){
        if (parent->left->val > parent->val){
            return true;
        }
    }
    return false;
}
▶

◀public:
template <typename T>
static bool right_child_breaks_bst_constraint(T* parent)
{
    if (parent->right){
        if (parent->right->val < parent->val){
            return true;
        }
    }
    return false;
}
▶

//given a parent node,
//return the immediate child that invalidates a BST structure
◀public:
template <typename T>
static T* find_invalid_child(T* parent){
    
    if (left_child_breaks_bst_constraint(parent)){
        return parent->left;
    }
    if (right_child_breaks_bst_constraint(parent)){
        return parent->right;
    }
    return nullptr;
}
▶

◀public:
template <typename T>
static bool child_breaks_bst_constraint(T* parent){
    return left_child_breaks_bst_constraint(parent) || right_child_breaks_bst_constraint(parent);
}
▶

◀public:
template <typename T>
static bool both_children_break_bst_constraint(T* parent){
    return left_child_breaks_bst_constraint(parent) && right_child_breaks_bst_constraint(parent);
}
▶

◀public:
//printing utility
template <typename T>
std::string as_str(T* t){
    if (!t){
        return "null";
    }
    return std::to_string(t->val);
}
▶