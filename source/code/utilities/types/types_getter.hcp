class
❪string❫
⚯
❪iostream❫
⚞⚟


//generic
◀public: static▶ std::vector<std::string> ☀Get()❰

    std::vector<std::string> types;
    
    //PRIMITIVE
    types.emplace_back("boolean");
    types.emplace_back("character");
    types.emplace_back("floating-point");
    types.emplace_back("integer");
    types.emplace_back("enumerated type");


    //COMPOSITE
    types.emplace_back("array");
    types.emplace_back("record");
    types.emplace_back("tuple");
    types.emplace_back("struct");
    types.emplace_back("pair");
    types.emplace_back("union");
    types.emplace_back("variant");

    //ADT
    types.emplace_back("list");
    types.emplace_back("associative array");
    types.emplace_back("multimap");
    types.emplace_back("heap");
    types.emplace_back("set");
    types.emplace_back("multiset");
    types.emplace_back("stack");
    types.emplace_back("queue");
    types.emplace_back("double-ended queue");
    types.emplace_back("priority queue");
    types.emplace_back("tree");
    types.emplace_back("graph");
    types.emplace_back("Array");
    types.emplace_back("Bit array");
    types.emplace_back("Bit field");
    types.emplace_back("Bitboard");
    types.emplace_back("Bitmap");
    types.emplace_back("Circular buffer");
    types.emplace_back("Control table");
    types.emplace_back("Image");
    types.emplace_back("Dope vector");
    types.emplace_back("Dynamic array");
    types.emplace_back("Gap buffer");
    types.emplace_back("Hashed array tree");
    types.emplace_back("Heightmap");
    types.emplace_back("Lookup table");
    types.emplace_back("Matrix");
    types.emplace_back("Parallel array");
    types.emplace_back("Sorted array");
    types.emplace_back("Sparse matrix");
    types.emplace_back("Iliffe vector");
    types.emplace_back("Variable-length array");
    types.emplace_back("Doubly linked list");
    types.emplace_back("Array list");
    types.emplace_back("Linked list");
    types.emplace_back("Self-organizing list");
    types.emplace_back("Skip list");
    types.emplace_back("Unrolled linked list");
    types.emplace_back("VList");
    types.emplace_back("Conc-tree list");
    types.emplace_back("Xor linked list");
    types.emplace_back("Zipper");
    types.emplace_back("Doubly connected edge list also known as half-edge");
    types.emplace_back("Difference list");
    types.emplace_back("Free list");
    types.emplace_back("AA tree");
    types.emplace_back("AVL tree");
    types.emplace_back("Binary search tree");
    types.emplace_back("Binary tree");
    types.emplace_back("Cartesian tree");
    types.emplace_back("Left-child right-sibling binary tree");
    types.emplace_back("Order statistic tree");
    types.emplace_back("Pagoda");
    types.emplace_back("Randomized binary search tree");
    types.emplace_back("Red–black tree");
    types.emplace_back("Rope");
    types.emplace_back("Scapegoat tree");
    types.emplace_back("Self-balancing binary search tree");
    types.emplace_back("Splay tree");
    types.emplace_back("T-tree");
    types.emplace_back("Tango tree");
    types.emplace_back("Threaded binary tree");
    types.emplace_back("Top tree");
    types.emplace_back("Treap");
    types.emplace_back("WAVL tree");
    types.emplace_back("Weight-balanced tree");
    types.emplace_back("B-tree");
    types.emplace_back("B+ tree");
    types.emplace_back("B*-tree");
    types.emplace_back("B sharp tree");
    types.emplace_back("Dancing tree");
    types.emplace_back("2-3 tree");
    types.emplace_back("2-3-4 tree");
    types.emplace_back("Queap");
    types.emplace_back("Fusion tree");
    types.emplace_back("Bx-tree");
    types.emplace_back("AList");
    types.emplace_back("Heap");
    types.emplace_back("Binary heap");
    types.emplace_back("B-heap");
    types.emplace_back("Weak heap");
    types.emplace_back("Binomial heap");
    types.emplace_back("Fibonacci heap");
    types.emplace_back("AF-heap");
    types.emplace_back("Leonardo Heap");
    types.emplace_back("2-3 heap");
    types.emplace_back("Soft heap");
    types.emplace_back("Pairing heap");
    types.emplace_back("Leftist heap");
    types.emplace_back("Treap");
    types.emplace_back("Beap");
    types.emplace_back("Skew heap");
    types.emplace_back("Ternary heap");
    types.emplace_back("D-ary heap");
    types.emplace_back("Brodal queue");
    types.emplace_back("Trie");
    types.emplace_back("Radix tree");
    types.emplace_back("Suffix tree");
    types.emplace_back("Suffix array");
    types.emplace_back("Compressed suffix array");
    types.emplace_back("FM-index");
    types.emplace_back("Generalised suffix tree");
    types.emplace_back("B-trie");
    types.emplace_back("Judy array");
    types.emplace_back("X-fast trie");
    types.emplace_back("Y-fast trie");
    types.emplace_back("Merkle tree");
    types.emplace_back("Ctrie");
    types.emplace_back("Ternary tree");
    types.emplace_back("K-ary tree");
    types.emplace_back("And–or tree");
    types.emplace_back("(a,b)-tree");
    types.emplace_back("Link/cut tree");
    types.emplace_back("SPQR-tree");
    types.emplace_back("Spaghetti stack");
    types.emplace_back("Disjoint-set data structure");
    types.emplace_back("Fusion tree");
    types.emplace_back("Enfilade");
    types.emplace_back("Exponential tree");
    types.emplace_back("Fenwick tree");
    types.emplace_back("Van Emde Boas tree");
    types.emplace_back("Rose tree");
    types.emplace_back("Segment tree");
    types.emplace_back("Interval tree");
    types.emplace_back("Range tree");
    types.emplace_back("Bin");
    types.emplace_back("K-d tree");
    types.emplace_back("Implicit k-d tree");
    types.emplace_back("Min/max k-d tree");
    types.emplace_back("Relaxed k-d tree");
    types.emplace_back("Adaptive k-d tree");
    types.emplace_back("Quadtree");
    types.emplace_back("Octree");
    types.emplace_back("Linear octree");
    types.emplace_back("Z-order");
    types.emplace_back("UB-tree");
    types.emplace_back("R-tree");
    types.emplace_back("R+ tree");
    types.emplace_back("R* tree");
    types.emplace_back("Hilbert R-tree");
    types.emplace_back("X-tree");
    types.emplace_back("Metric tree");
    types.emplace_back("Cover tree");
    types.emplace_back("M-tree");
    types.emplace_back("VP-tree");
    types.emplace_back("BK-tree");
    types.emplace_back("Bounding interval hierarchy");
    types.emplace_back("Bounding volume hierarchy");
    types.emplace_back("BSP tree");
    types.emplace_back("Rapidly exploring random tree");
    types.emplace_back("Abstract syntax tree");
    types.emplace_back("Parse tree");
    types.emplace_back("Decision tree");
    types.emplace_back("Alternating decision tree");
    types.emplace_back("Minimax tree");
    types.emplace_back("Expectiminimax tree");
    types.emplace_back("Finger tree");
    types.emplace_back("Expression tree");
    types.emplace_back("Log-structured merge-tree");
    types.emplace_back("Lexicographic Search Tree");
    types.emplace_back("Bloom filter");
    types.emplace_back("Count-Min sketch");
    types.emplace_back("Distributed hash table");
    types.emplace_back("Double hashing");
    types.emplace_back("Dynamic perfect hash table");
    types.emplace_back("Hash array mapped trie");
    types.emplace_back("Hash list");
    types.emplace_back("Hash table");
    types.emplace_back("Hash tree");
    types.emplace_back("Hash trie");
    types.emplace_back("Koorde");
    types.emplace_back("Prefix hash tree");
    types.emplace_back("Rolling hash");
    types.emplace_back("MinHash");
    types.emplace_back("Quotient filter");
    types.emplace_back("Ctrie");
    types.emplace_back("Graph");
    types.emplace_back("Adjacency list");
    types.emplace_back("Adjacency matrix");
    types.emplace_back("Graph-structured stack");
    types.emplace_back("Scene graph");
    types.emplace_back("Binary decision diagram");
    types.emplace_back("Zero-suppressed decision diagram");
    types.emplace_back("And-inverter graph");
    types.emplace_back("Directed graph");
    types.emplace_back("Directed acyclic graph");
    types.emplace_back("Propositional directed acyclic graph");
    types.emplace_back("Multigraph");
    types.emplace_back("Hypergraph");
    types.emplace_back("Lightmap");
    types.emplace_back("Winged edge");
    types.emplace_back("Quad-edge");
    types.emplace_back("Routing table");
    types.emplace_back("Symbol table");

    return types;
❱