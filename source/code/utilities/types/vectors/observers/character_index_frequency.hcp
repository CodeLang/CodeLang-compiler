class
❪string❫
❪iostream❫
❪vector❫
❪map❫
❪"code/utilities/data_structures/counters/unique_counter/unique_counter"❫
⚯
⚞⚟

◀public: static▶ char ☀Get_Most_Common(std::vector<std::string> const& words, size_t index) ❰
    
    Unique_Counter<char> counter;
    for (auto const& it: words){
        counter.Add(it[index]);
    }
    return counter.Most_Common();

❱

◀public: static▶ char ☀Get_Least_Common(std::vector<std::string> const& words, size_t index) ❰
    
    Unique_Counter<char> counter;
    for (auto const& it: words){
        counter.Add(it[index]);
    }
    return counter.Least_Common();

❱

◀public: static▶ bool ☀More_Than_1_Most_Common(std::vector<std::string> const& words, size_t index) ❰
    
    Unique_Counter<char> counter;
    for (auto const& it: words){
        counter.Add(it[index]);
    }
    auto top_2 = counter.Top_N_Most_Common(2);
    return top_2[0].first == top_2[1].first;

❱