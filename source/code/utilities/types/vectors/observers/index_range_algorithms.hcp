class
❪string❫
❪iostream❫
❪vector❫
❪algorithm❫
❪map❫
❪"code/utilities/data_structures/range/range"❫
⚯
⚞⚟



◀public: static▶ Range ☀Find_Contiguous_Range_That_Equals_Num(std::vector<int> const& numbers, int val) ❰
    for (size_t i = 0; i < numbers.size(); ++i){
        int total = 0;
        for (size_t j = i; j < numbers.size(); ++j){
            total += numbers[j];
            if (total == val){
                Range r;
                r.low = i;
                r.high = j;
                return r;
            }
            else if (total > val){
                break;
            }
        }
    }
    
    Range none;
    return none;
❱

◀public: static▶ int ☀Min_Element(std::vector<int> const& numbers, Range const& range)❰
    int x = numbers[range.low];
    for (size_t i = range.low; i < range.high; ++i){
        x = std::min(x,numbers[i]);
    }
    return x;
❱
◀public: static▶ int ☀Max_Element(std::vector<int> const& numbers, Range const& range)❰
    int x = numbers[range.low];
    for (size_t i = range.low; i < range.high; ++i){
        x = std::max(x,numbers[i]);
    }
    return x;
❱

◀public: static▶ bool ☀Two_Values_From_Vec_Range_Can_Sum_To_Value(std::vector<int> const& numbers, Range const& range, int val) ❰

    for (size_t i = range.low; i < range.high; ++i){
        for (size_t j = range.low; j < range.high; ++j){
            if (i != j){
                if (numbers[i] + numbers[j] == val){
                    return true;
                }
            }
        }
    }
    return false;
❱