class
⚯
⚞⚟

◀
public: 
template <typename T, typename Fun>
static void Traverse(std::vector<T> vec, std::string const& bar_text, Fun fun){
   
   
  using namespace indicators;

  //Hide cursor
  show_console_cursor(false);

  ProgressBar bar{
    option::BarWidth{100},
    option::Start{"["},
    option::Fill{"■"},
    option::Lead{"■"},
    option::Remainder{"-"},
    option::End{" ]"},
    option::PostfixText{bar_text},
    option::ForegroundColor{Color::cyan},
    option::FontStyles{std::vector<FontStyle>{FontStyle::bold}}
  };
  
  for (size_t i = 0; i < vec.size(); ++i){
    double current_progress = (static_cast<double>(i) / static_cast<double>(vec.size())) * 100;
    bar.set_progress(static_cast<size_t>(current_progress));
    fun(vec[i]);
  }
  
  show_console_cursor(true);
}

▶