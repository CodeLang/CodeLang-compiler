class
❪pybind11/embed.h❫
❪"code/utilities/web/automate/browser/browser_settings"❫
⚯
❪iostream❫
⚞⚟




◀public: static▶ void ☀Create(Browser_Settings const& settings) ❰
      
    //include python imports
    Include_Necessary_Imports(settings);
    
    //customize and create selenium browser with driver attached
    Create_Browser_Object(settings);
❱

◀private: static▶ void ☀Include_Necessary_Imports(Browser_Settings const& settings) ❰
    try {
        pybind11::exec("from selenium import webdriver");
        pybind11::exec("from selenium.webdriver.chrome.options import Options");
        pybind11::exec("from selenium.webdriver.common.keys import Keys");
        pybind11::exec("from selenium.webdriver.support.ui import Select");
        pybind11::exec("from selenium.webdriver.common.by import By");
        pybind11::exec("from selenium.webdriver.support.ui import WebDriverWait");
        pybind11::exec("from selenium.webdriver.support import expected_conditions as EC");
    }
    catch(std::exception const& e){
        std::cerr << "You need selenium installed for python3.\n";
        std::cerr << "Try pip3 install selenium\n";
        exit(EXIT_SUCCESS);
    }
❱

◀private: static▶ void ☀Create_Browser_Object(Browser_Settings const& settings) ❰

    pybind11::exec("chrome_options = Options()");
    //pybind11::exec("chrome_options.add_argument('user-data-dir=/home/flighty/.config/chromium/test_profile')");
    
    if (settings.ignore_certificate_errors){
        pybind11::exec("chrome_options.add_argument('--ignore-certificate-errors')");
    }
    
    if (settings.disable_notifications){
        pybind11::exec("chrome_options.add_argument('--disable-notifications')");
    }
    
    if (settings.disable_extensions){
        pybind11::exec("chrome_options.add_argument('--disable-extensions')");
    }
    
    if (settings.start_maximized){
        pybind11::exec("chrome_options.add_argument('--start-maximized')");
    }
    
    //add a user agent so we don't get caught
    if (settings.use_user_agent){
        pybind11::exec("chrome_options.add_argument('user-agent=" + settings.user_agent + "')");
    }
    
    if (settings.headless){
        pybind11::exec("chrome_options.add_argument('--headless')");
    }
    
    pybind11::exec("executable_path = \"" + settings.driver_path + "\"");
    pybind11::exec(settings.browser_name + " = webdriver.Chrome(chrome_options=chrome_options,executable_path=executable_path)");
    
    //Once set, the implicit wait is set for the life of the WebDriver object.
    if (settings.set_implicit_wait){
        std::string command = settings.browser_name + ".implicitly_wait(";
        command += std::to_string(settings.implicit_wait_s);
        command += ")";
        pybind11::exec(command);
    }
❱