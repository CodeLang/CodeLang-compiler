class
❪string❫
❪stdio.h❫
❪curl/curl.h❫
❪"code/utilities/web/dropbox/dropbox_upload_settings"❫
⚯
❪"code/utilities/types/char/lib.hpp"❫
❪"code/utilities/shell/lib.hpp"❫
❪"code/utilities/streams/filestreams/read_all/lib.hpp"❫
❪sys/stat.h❫
❪iostream❫
⚞⚟



◀public: static▶ void ☀Upload(Dropbox_Upload_Settings const& settings)❰

  if (settings.strategy == Upload_To_Dropbox_Strategy::CURL_COMMAND){
    Upload_With_Curl_Command(settings.local_file_path,settings.docker_file_path,settings.access_token);
  }
  else if (settings.strategy == Upload_To_Dropbox_Strategy::CURL_LIB){
    Upload_With_Curl_Lib(settings.local_file_path,settings.docker_file_path,settings.access_token);
  }

❱

◀private: static▶ void ☀Upload_With_Curl_Lib(std::string const& local_file_path, std::string const& docker_file_path, std::string const& access_token)❰

    //derived from dropbox site documentation
      CURL *curl;
      CURLcode res;
      struct stat file_info;
      FILE *fd;
      fd = fopen(local_file_path.c_str(), "rb"); /* open file to upload */
      
      if(!fd){
        std::cout << "file not found" << std::endl;
        return;
      }
     
      /* to get the file size */ 
      if(fstat(fileno(fd), &file_info) != 0){
        std::cout << "can't get file info" << std::endl;
        return;
      }

      /* In windows, this will init the winsock stuff */
      curl_global_init(CURL_GLOBAL_ALL);

      /* get a curl handle */
      curl = curl_easy_init();
      if(curl) {


            struct curl_slist *headers=NULL; /* init to NULL is important */
            
            std::string auth_str = "Authorization: Bearer ";
            auth_str += access_token;
            headers = curl_slist_append(headers, auth_str.c_str());
            headers = curl_slist_append(headers, "Content-Type: application/octet-stream");
            
            std::string dropbox_apis_str = "Dropbox-API-Arg: {\"path\":\"/";
            dropbox_apis_str += docker_file_path;
            dropbox_apis_str += "\",\"mode\": \"overwrite\",\"autorename\": true,\"mute\": false}";
            headers = curl_slist_append(headers, dropbox_apis_str.c_str());
            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
            curl_easy_setopt(curl, CURLOPT_URL, upload_url().c_str());
            
            //send raw text
            std::string file_path_str = local_file_path;
            auto all_data = Read_Entire_Binary_File_Into_String(file_path_str);
            curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, all_data.size());
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, all_data.c_str());
            
            //upload a file
            //Dropbox does not support this method
            //curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
            //curl_easy_setopt(curl, CURLOPT_POST, 1L);
            //curl_easy_setopt(curl, CURLOPT_READDATA, fd);
            //curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE,
            //                 (curl_off_t)file_info.st_size);

            /* Perform the request, res will get the return code */
            res = curl_easy_perform(curl);
            /* Check for errors */
            if(res != CURLE_OK)
                  fprintf(stderr, "curl_easy_perform() failed: %s\n",
                    curl_easy_strerror(res));

            /* always cleanup */
              curl_easy_cleanup(curl);

      }
      curl_global_cleanup();

      fclose(fd);
❱

◀private: static▶ void ☀Upload_With_Curl_Command(std::string const& local_file_path, std::string const& docker_file_path, std::string const& access_token)❰


  //I don't want to upload to dropbox with the command spawn, but I was having difficulty with libcurl directly
	std::string command;
	command += "curl -X POST " + upload_url() + " ";
	command += "--header ";
	command += Get_Double_Quote();
	command += "Authorization: Bearer ";
	command += access_token;
	command += Get_Double_Quote();
	command += " ";
	command += "--header ";
	command += Get_Double_Quote();
  command += "Dropbox-API-Arg: {\\\"path\\\":\\\"/";
	command += docker_file_path;
  command += "\\\",\\\"mode\\\": \\\"overwrite\\\",\\\"autorename\\\": true,\\\"mute\\\": false}";
	command += Get_Double_Quote();
	command += " ";
  command += "--header ";
  command += Get_Double_Quote();
  command += "Content-Type: application/octet-stream";
  command += Get_Double_Quote();
  command += " ";
	command += "--data-binary @";
	command += local_file_path;

	execute(command);

❱

◀private: static▶ std::string ☀upload_url()❰
	return "https://content.dropboxapi.com/2/files/upload";
❱