class
❪X11/Xlib.h❫
❪X11/Xutil.h❫
❪X11/xpm.h❫
❪X11/Xatom.h❫
❪X11/extensions/shape.h❫
❪"code/utilities/x11/main_state/x11_main_state_creator"❫
❪vector❫
⚯
⚞⚟


◀public: static▶ std::vector<X11_Window_Geometry> ☀Get_All_Window_Geometry(Main_X11_State const& state)❰
    std::vector<X11_Window_Geometry> geos;
    unsigned long len=0;
    auto list = (Window*)winlist(state.d,&len);
    for (int i=0;i<(int)len;i++) {
        auto geo = get_geometry(state.d,list[i]);
        geos.emplace_back(geo);
        
    }
    return geos;
❱

◀private: static▶ X11_Window_Geometry ☀get_geometry(Display * display, Window w)❰
    X11_Window_Geometry geo;
    Window theTempRoot;
    Window child;
    
    
    //catch the error on getting geometry because someone may have closed the window
    XSetErrorHandler([](Display *dpy, XErrorEvent *err){
        return 0;
    });
    
    auto result = XGetGeometry(display, w, &theTempRoot,
               &geo.x, &geo.y,
               &geo.width, &geo.height,
               &geo.border_width, &geo.depth);
    
    if (result == 0){
        return geo;
    }
    
    XTranslateCoordinates(display, w, theTempRoot, geo.x, geo.y, &geo.x, &geo.y, &child);
  return geo;
❱

◀private: static▶ Window* ☀winlist (Display *disp, unsigned long *len) ❰
    Atom prop = XInternAtom(disp,"_NET_CLIENT_LIST",False), type;
    int form;
    unsigned long remain;
    unsigned char *list;
 
    errno = 0;
    if (XGetWindowProperty(disp,XDefaultRootWindow(disp),prop,0,1024,False,XA_WINDOW,
                &type,&form,len,&remain,&list) != Success) {
        perror("winlist() -- GetWinProp");
        return 0;
    }
     
    return (Window*)list;
❱

◀private: static▶ char* ☀winame (Display *disp, Window win) ❰
    Atom prop = XInternAtom(disp,"WM_NAME",False), type;
    int form;
    unsigned long remain, len;
    unsigned char *list;
 
    errno = 0;
    if (XGetWindowProperty(disp,win,prop,0,1024,False,XA_STRING,
                &type,&form,&len,&remain,&list) != Success) {
        perror("winlist() -- GetWinProp");
        return NULL;
    }
 
    return (char*)list;
❱


◀private: static▶ int ☀getprop (Display *disp, char *name, Window win) ❰
        Atom prop = XInternAtom(disp,name,False), type;
        int form, r = 0;
        unsigned long len, remain;
        unsigned char *list;
        char *tname;
 
        errno = 0;
        if (XGetWindowProperty(disp,win,prop,0,1024,False,AnyPropertyType,
                &type,&form,&len,&remain,&list) != Success) {
                perror("GetWinProp");
                return 0;
        }
        if (type == None) printf("%s is not available.\n",name);
        else {
                tname = atomtype(type);
                printf ("%s (type %s, %lu %d-bit items) remaining: %lu\n",name,tname,len,form,remain);
                XFree(tname);
                r = 1;
        }
        XFree(list);
        return r;
❱
 
◀private: static▶ char* ☀atomtype (Atom x) ❰
    char *type = static_cast<char*>(malloc(32));
    switch (x) {
        case XA_PRIMARY:
            strcpy(type,"XA_PRIMARY");
            break;
        case XA_SECONDARY:
            strcpy(type,"XA_SECONDARY");
            break;
        case XA_ARC:
            strcpy(type,"XA_ARC");
            break;
        case XA_ATOM:
            strcpy(type,"XA_ATOM");
            break;
        case XA_CARDINAL:
            strcpy(type,"XA_CARDINAL");
            break;
        case XA_INTEGER:
            strcpy(type,"XA_INTEGER");
            break;
        case XA_STRING:
            strcpy(type,"XA_STRING");
            break;
        case XA_WINDOW:
            strcpy(type,"XA_WINDOW");
            break;
        case XA_WM_HINTS:
            strcpy(type,"XA_WM_HINTS");
            break;
        default:
            sprintf(type,"unlisted (%lu), see Xatom.h",x);
            break;
        }
        return type;
❱