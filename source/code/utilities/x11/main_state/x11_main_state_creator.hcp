class
❪string❫
❪cstdlib❫
❪iostream❫
❪X11/extensions/shape.h❫
❪"code/utilities/x11/main_state/setup_display_settings"❫
❪"code/utilities/x11/data/main_x11_state"❫
❪"code/utilities/x11/data/x11_window_geometry"❫
❪"code/utilities/x11/data/x11_bg_fg_colors"❫
⚯
⚞⚟


◀private: static▶ void ☀set_typical_x11_error_handler()❰
    
    //error handler
    XSetErrorHandler([](Display *dpy, XErrorEvent *err){
            char msg[80];
            XGetErrorText(dpy, err->error_code, msg, 80);
            std::cout << "X Error: " << msg  << std::endl;
            exit(1);
            return 0;
    });
❱

◀private: static▶ Display * ☀open_display()❰
    
    //create the main display
    Display *theDisplay = nullptr;
    if ((theDisplay = XOpenDisplay(NULL)) == NULL) {
        std::cerr << "can't create display" << std::endl;
        exit(1);
    }
    return theDisplay;
❱

◀private: static▶ void ☀check_shape_extension(Display * theDisplay)❰

    //check that we can do shape stuff
    int event_base = 0;
    int error_base = 0;
    auto supported = XShapeQueryExtension(theDisplay,&event_base, &error_base);
    if (!supported){
        std::cout << "doesn't support shapes" << std::endl;
    }
❱

◀private: static▶ Display * ☀setup_display(Setup_Display_Settings const& settings)❰
  
    if (settings.set_error_handler){
        set_typical_x11_error_handler();
    }

    //create the main display
    auto d = open_display();

    //turn on debug sync mode
    if (settings.syncronize_debug_mode) {
        XSynchronize(d,true);
    }
    
    //feature check
    if (settings.check_for_shape_extension){
        check_shape_extension(d);
    }
    
    return d;
❱

◀private: static▶ X11_Window_Geometry ☀get_geometry(Display * display, Window w)❰
    X11_Window_Geometry geo;
    Window theTempRoot;
    XGetGeometry(display, w, &theTempRoot,
               &geo.x, &geo.y,
               &geo.width, &geo.height,
               &geo.border_width, &geo.depth);
  return geo;
❱

◀private: static▶ X11_Bg_Fg_Colors ☀setup_colors(Display * theDisplay, int theScreen, unsigned int theDepth)
❰
    X11_Bg_Fg_Colors colors;
    
    Colormap theColormap = DefaultColormap(theDisplay, theScreen);
    std::string Foreground = "black";
    std::string Background = "white";
    if (theDepth == 1) {
        Foreground = "black";
        Background = "white";
    }

    XColor      theExactColor;
    if (!XAllocNamedColor(theDisplay, theColormap,
                Foreground.c_str(), &colors.fg, &theExactColor)) {
        std::cerr << "Can't XAllocNamedColor" << std::endl;
        exit(1);
    }

    if (!XAllocNamedColor(theDisplay, theColormap,
                Background.c_str(), &colors.bg, &theExactColor)) {
        std::cerr << "Can't XAllocNamedColor" << std::endl;
        exit(1);
    }
    
    return colors;
❱


◀public: static▶ Main_X11_State ☀Create(Setup_Display_Settings const& settings)❰
    Main_X11_State state;
      
    //create the main display
    state.d = setup_display(settings);
    
    //create the screen and depth
    state.screen = DefaultScreen(state.d);
    state.depth = DefaultDepth(state.d, state.screen);
    
    //create the root window
    state.root = RootWindow(state.d, state.screen);
    state.root_geo = get_geometry(state.d, state.root);
    
    //colors
    state.colors = setup_colors(state.d, state.screen, state.depth);
    
    return state;
❱